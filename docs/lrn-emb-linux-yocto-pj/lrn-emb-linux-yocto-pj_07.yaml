- en: Chapter 7. ADT Eclipse Plug-ins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。ADT Eclipse插件
- en: In this chapter, you will be presented with a new perspective of the available
    tool in the Yocto Project. This chapter marks the beginning of the introduction
    to various tools available in the Yocto Project ecosystem, tools that are very
    useful and different from the Poky reference system. In this chapter, a short
    presentation to the **Application Development Environment** (**ADE**) is presented
    with emphasis on the Eclipse project and the Yocto Project's added plug-ins. A
    number of the plug-ins are shown along with their configurations and use cases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将看到Yocto项目中可用工具的新视角。本章标志着对Yocto项目生态系统中各种工具的介绍的开始，这些工具非常有用，并且与Poky参考系统不同。在本章中，将简要介绍**应用开发环境**（**ADE**）并强调Eclipse项目和Yocto项目的附加插件。展示了一些插件以及它们的配置和用例。
- en: A broader view of the **Application Development Toolkit** (**ADT**) will also
    be shown to you. This project's main objective is to offer a software stack that
    is able to develop, compile, run, debug, and profile software applications. It
    tries to do this without requiring extra learning from the developer's point of
    view. Its learning curve is very low, taking into consideration the fact that
    Eclipse is one of the most used **Integrated Development Environment** (**IDEs**),
    and over time, it has become very user-friendly, stable, and dependable. The ADT
    user experience is very similar to the one that any Eclipse or non-Eclipse user
    has when they use an Eclipse IDE. The available plug-ins try to make this experience
    as similar as possible so that development is similar to any Eclipse IDE. The
    only difference is between configuration steps, and this defines the difference
    between one Eclipse IDE version and another.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 还将向您展示**应用开发工具包**（**ADT**）的更广泛视图。该项目的主要目标是提供一个能够开发、编译、运行、调试和分析软件应用程序的软件堆栈。它试图在不需要开发者额外学习的情况下实现这一点。它的学习曲线非常低，考虑到Eclipse是最常用的**集成开发环境**（**IDE**）之一，而且随着时间的推移，它变得非常用户友好、稳定和可靠。ADT用户体验与任何使用Eclipse或非Eclipse用户在使用Eclipse
    IDE时的体验非常相似。可用的插件尝试使这种体验尽可能相似，以便开发类似于任何Eclipse IDE。唯一的区别在于配置步骤，这定义了一个Eclipse IDE版本与另一个版本之间的区别。
- en: The ADT offers the possibility of using a standalone cross-compiler, debugging
    tool profilers, emulators, and even development board interaction in a platform-independent
    manner. Although interaction with hardware is the best option for an embedded
    developer, in most cases, the real hardware is missing due to various reasons.
    For these scenarios, it is possible to use a QEMU emulator to simulate the necessary
    hardware.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ADT提供了使用独立交叉编译器、调试工具分析器、仿真器甚至是以平台无关的方式与开发板交互的可能性。虽然与硬件交互是嵌入式开发人员的最佳选择，但在大多数情况下，由于各种原因，真实硬件是缺失的。对于这些情况，可以使用QEMU仿真器来模拟必要的硬件。
- en: The Application Development Toolkit
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用开发工具包
- en: 'ADT is one of the components of the Yocto Project and provides a cross-development
    platform, which is perfect for user-specific application development. For the
    development process to take place in an orderly manner, some components are required:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ADT是Yocto项目的组成部分，提供了一个跨开发平台，非常适合用户特定的应用程序开发。为了使开发过程有序进行，需要一些组件：
- en: Eclipse IDE Yocto plug-ins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse IDE Yocto插件
- en: QEMU emulator for specific hardware simulations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于特定硬件模拟的QEMU仿真器
- en: Cross-toolchain alongside its specific `sysroot`, which are both architecture-specific
    and are generated using the metadata and the build system made available by the
    Yocto Project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与特定体系结构相关的交叉工具链以及其特定的`sysroot`，这两者都是使用Yocto项目提供的元数据和构建系统生成的
- en: Userspace tools to enhance a developer's experience with the application development
    process
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户空间工具以增强开发人员在应用程序开发过程中的体验
- en: The Eclipse plug-ins are available when offering full support to the Yocto Project
    with the Eclipse IDE and maximizing the Yocto experience. The end result is an
    environment that is customized for the Yocto developer's needs, with a cross-toolchain,
    deployment on a real hardware, or QEMU emulation features, and also a number of
    tools that are available for collecting data, tracing, profiling, and performance
    reviews.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供对Eclipse IDE的完全支持并最大化Yocto体验时，Eclipse插件可用。最终结果是为Yocto开发人员的需求定制的环境，具有交叉工具链、在真实硬件上部署或QEMU仿真功能，以及一些用于收集数据、跟踪、分析和性能评估的工具。
- en: 'The QEMU emulator is used to simulate various hardware. It can be obtained
    with these methods:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU仿真器用于模拟各种硬件。可以通过以下方法获得它：
- en: Using the ADT installer script, which offers the possibility of installing it
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ADT安装程序脚本，提供安装的可能性
- en: Cloning a Poky repository and sourcing the environment, access is granted to
    a QEMU environment
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆一个Poky存储库并获取环境，可以访问QEMU环境
- en: Downloading a Yocto release and sourcing the environment offers for the same
    result
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Yocto发布并获取环境，以获得相同的结果
- en: Installing a cross-toolchain and sourcing the environment to make the QEMU environment
    available
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装交叉工具链并获取环境以使QEMU环境可用
- en: The toolchain contains a cross-debugger, cross-compiler, and cross-linker, which
    are very well used in the process of application development. The toolchain also
    comes with a matching sysroot for the target device because it needs access to
    various headers and libraries necessary to run on the target architecture. The
    sysroot is generated from the root filesystem and uses the same metadata configuration.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 工具链包含交叉调试器、交叉编译器和交叉链接器，在应用程序开发过程中被广泛使用。工具链还配备了用于目标设备的匹配sysroot，因为它需要访问运行在目标架构上所需的各种头文件和库。sysroot是从根文件系统生成的，并使用相同的元数据配置。
- en: The userspace tools include the tools already mentioned in the previous chapters,
    such as SystemTap, PowerTop, LatencyTop, perf, OProfile, and LTTng-UST. They are
    used for getting information about the system and developed application; information,
    such as power consumption, desktop stutters, counting of events, performance overviews,
    and diagnosing software, hardware, or functional problems, and even tracing software
    activities.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间工具包括在前几章中已经提到的工具，如SystemTap、PowerTop、LatencyTop、perf、OProfile和LTTng-UST。它们用于获取有关系统和开发应用程序的信息；例如功耗、桌面卡顿、事件计数、性能概述以及诊断软件、硬件或功能问题，甚至跟踪软件活动的信息。
- en: Setting up the environment
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'Before explaining the ADT Project further, its Eclipse IDE plug-ins, other
    features, and functionalities of the setup would be required. To install the Eclipse
    IDE, the first step involves the setup of a host system. There are multiple methods
    to do this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步解释ADT项目、其Eclipse IDE插件、设置的其他功能之前，需要安装Eclipse IDE。安装Eclipse IDE的第一步涉及设置主机系统。有多种方法可以做到这一点：
- en: '**Using an ADT install script**: This is the recommended method to install
    the ADT, mostly because the installation process is completely automated. Users
    are in control of the features that they want available.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用ADT安装脚本**：这是安装ADT的推荐方法，主要是因为安装过程是完全自动化的。用户可以控制他们想要的功能。'
- en: '**Using the ADT tarball**: This method involves a section of an appropriate
    tarball with the architecture-specific toolchain and setting it up using a script.
    The tarball can be both downloaded and manually built using Bitbake. This method
    also has limitations due to the fact that not all of its features are available
    after installation, apart from the cross-toolchain and QEMU emulator.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用ADT tarball**：这种方法涉及使用特定架构工具链的适当tarball部分，并使用脚本进行设置。该tarball可以通过下载和使用Bitbake手动构建。由于安装后并非所有功能都可用，此方法也存在限制，除了交叉工具链和QEMU模拟器之外。'
- en: '**Using a toolchain from the build directory**: This method takes advantage
    of the fact that a build directory is already available, so the setup of the cross-toolchain
    is very easy. Also, in this case, it faces the same limitation as the one mentioned
    in the preceding point.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用构建目录中的工具链**：这种方法利用了构建目录已经可用的事实，因此交叉工具链的设置非常容易。此外，在这种情况下，它面临与前一点提到的相同的限制。'
- en: The ADT install script is the preferred method to install the ADT. Of course,
    before moving on to the installation step, the necessary dependencies need to
    be available to make sure that the ADT install script runs smoothly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ADT安装脚本是安装ADT的首选方法。当然，在进行安装步骤之前，需要确保必要的依赖项可用，以确保ADT安装脚本顺利运行。
- en: These packages were already mentioned in the previous chapters, but they will
    once again, be explained here to make things easy for you. I advise you to go
    back to these chapters and refer to the information once again as a memory exercise.
    To refer to packages that might be of interest to you, take a look at the ADT
    Installer packages, such as `autoconf automake libtool libglib2.0-dev`, Eclipse
    Plug-ins, and graphical support offered by the `libsdl1.2-dev xterm` packages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包已经在前几章中提到过，但在这里将再次解释，以便为您简化事情。我建议您回到这些章节，再次查阅信息作为记忆练习。要查看可能对您感兴趣的软件包，请查看ADT
    Installer软件包，例如`autoconf automake libtool libglib2.0-dev`，Eclipse插件以及`libsdl1.2-dev
    xterm`软件包提供的图形支持。
- en: After the host system is prepared with all the required dependencies, the ADT
    tarball can be downloaded from [http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/adt-installer/](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/adt-installer/).
    At this location, the `adt_installer.tar.bz2` archive is available. It needs to
    be downloaded and its content extracted.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 主机系统准备好所有所需的依赖项后，可以从[http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/adt-installer/](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/adt-installer/)下载ADT
    tarball。在这个位置，`adt_installer.tar.bz2`存档可用。需要下载并提取其内容。
- en: This tarball can also be generated using the Bitbake build system inside a build
    directory, and the result will be available inside the `tmp/deploy/sdk/adt_installer.tar.bz2`
    location. To generate it, the next command needs to be given into the build directory,
    which is `bitbake adt-installer`. The build directory also needs to be properly
    configured for the target device.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个tarball也可以在构建目录中使用Bitbake构建系统生成，并且结果将在`tmp/deploy/sdk/adt_installer.tar.bz2`位置可用。要生成它，需要在构建目录中输入下一个命令，即`bitbake
    adt-installer`。构建目录还需要为目标设备正确配置。
- en: The archive is unpacked using the `tar -xjf adt_installer.tar.bz2` command.
    It can be extracted in any directory, and after unpacking the `adt-installer`
    directory, it is created and contains the ADT installer script called `adt_installer`.
    It also has a configuration file called `adt_installer.conf`, which is used to
    define the configurations before running the script. The configuration file defines
    information, such as the filesystem, kernel, QEMU support, and so on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 存档使用`tar -xjf adt_installer.tar.bz2`命令解压缩。它可以在任何目录中提取，并在解压缩`adt-installer`目录后，创建并包含名为`adt_installer`的ADT安装程序脚本。它还有一个名为`adt_installer.conf`的配置文件，用于在运行脚本之前定义配置。配置文件定义了诸如文件系统、内核、QEMU支持等信息。
- en: 'These are the variables that the configuration file contains:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是配置文件包含的变量：
- en: '`YOCTOADT_REPO`: This defines the packages and root filesystem on which the
    installation is dependent. Its reference value is defined at [http://adtrepo.yoctoproject.org//1.7](http://adtrepo.yoctoproject.org//1.7).
    Here, the directory structure is defined and its structure is the same between
    releases.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_REPO`：这定义了安装所依赖的软件包和根文件系统。其参考值在[http://adtrepo.yoctoproject.org//1.7](http://adtrepo.yoctoproject.org//1.7)中定义。在这里，定义了目录结构，其结构在发布之间是相同的。'
- en: '`YOCTOADT_TARGETS`: This defines the target architecture for which the cross
    development environment is set up. There are default values defined that can be
    associated with this variable, such as `arm`, `ppc`, `mips`, `x86`, and `x86_64`.
    Also, multiple values can be associated with it and the separation between them
    being is done using the space separator.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_TARGETS`：这定义了为其设置交叉开发环境的目标架构。有一些默认值可以与此变量关联，如`arm`，`ppc`，`mips`，`x86`和`x86_64`。也可以关联多个值，并使用空格分隔它们。'
- en: '`YOCTOADT_QEMU`: This variable defines the use of the QEMU emulator. If it
    is set to `Y`, the emulator will be available after installation; otherwise the
    value is set to `N`, and hence, the emulator won''t be available.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_QEMU`：此变量定义了QEMU模拟器的使用。如果设置为`Y`，则安装后将可用模拟器；否则，值设置为`N`，因此模拟器将不可用。'
- en: '`YOCTOADT_NFS_UTIL`: This defines if the NFS user-mode that will be installed.
    The available values are, as defined previously, `Y` and `N`. For the use of the
    Eclipse IDE plug-ins, it is necessary to define the `Y` value for both `YOCTOADT_QEMU`
    and `YOCTOADT_NFS_UTIL`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_NFS_UTIL`：这定义了将安装的NFS用户模式。可用的值如前所述为`Y`和`N`。为了使用Eclipse IDE插件，必须为`YOCTOADT_QEMU`和`YOCTOADT_NFS_UTIL`同时定义`Y`值。'
- en: '`YOCTOADT_ROOTFS_<arch>`: This specifies which architecture root filesystem
    to use from the repository that is defined in the first mentioned `YOCTOADT_REPO`
    variable. For the `arch` variable, the default values are the ones already mentioned
    in the `YOCTOADT_TARGETS` variable. This variable''s valid values are represented
    by the image files available, such as `minimal`, `sato`, `minimal-dev`, `sato-sdk`,`lsb`,
    `lsb-sdk`, and so on. For multiple arguments to the variable, the space separator
    can be used.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_ROOTFS_<arch>`：这指定了要从第一个提到的`YOCTOADT_REPO`变量中定义的存储库中使用哪个架构的根文件系统。对于`arch`变量，默认值是`YOCTOADT_TARGETS`变量中已经提到的值。该变量的有效值由可用的镜像文件表示，如`minimal`，`sato`，`minimal-dev`，`sato-sdk`，`lsb`，`lsb-sdk`等。对于该变量的多个参数，可以使用空格分隔符。'
- en: '`YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`: This represents the root filesystem
    from which the `sysroot` of the cross-development toolchain will be generated.
    The valid values for the ''arch'' variable are the same as the one mentioned previously.
    Its value is dependent on what was previously defined as values for the `YOCTOADT_ROOTFS_<arch>`
    variable. So, if only one variable is defines as the value for the `YOCTOADT_ROOTFS_<arch>`
    variable, the same value will be available for `YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`.
    Also, if multiple variables are defined in the `YOCTOADT_ROOTFS_<arch>` variable,
    then one of them needs to define the `YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>` variable.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`：这代表了交叉开发工具链的`sysroot`将从中生成的根文件系统。`arch`变量的有效值与之前提到的相同。它的值取决于之前为`YOCTOADT_ROOTFS_<arch>`变量定义的值。因此，如果只有一个变量被定义为`YOCTOADT_ROOTFS_<arch>`变量的值，那么相同的值将可用于`YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`。此外，如果在`YOCTOADT_ROOTFS_<arch>`变量中定义了多个变量，则其中一个需要定义`YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`变量。'
- en: '`YOCTOADT_TARGET_MACHINE_<arch>`: This defines the machine for which the image
    is downloaded, as there could be compilation option differences between machines
    of the same architecture. The valid values for this variable are can be mentioned
    as: `qemuarm`, `qemuppc`, `ppc1022ds`, `edgerouter`, `beaglebone`, and so on.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_TARGET_MACHINE_<arch>`：这定义了下载镜像的目标机器，因为相同架构的机器之间可能存在编译选项的差异。该变量的有效值可以是：`qemuarm`，`qemuppc`，`ppc1022ds`，`edgerouter`，`beaglebone`等。'
- en: '`YOCTOADT_TARGET_SYSROOT_LOC_<arch>`: This defines the location where the target
    `sysroot` will be available after the installation process.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YOCTOADT_TARGET_SYSROOT_LOC_<arch>`：这定义了安装过程结束后目标`sysroot`将可用的位置。'
- en: 'There are also some variables defined in the configuration files, such as `YOCTOADT_BITBAKE`
    and `YOCTOADT_METADATA`, which are defined for future work references. After all
    the variables are defined according to the needs of the developer, the installation
    process can start. This is done by running the `adt_installer` script:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件中还定义了一些变量，如`YOCTOADT_BITBAKE`和`YOCTOADT_METADATA`，这些变量是为了未来的工作参考而定义的。开发人员根据需要定义所有变量后，安装过程就可以开始了。这是通过运行`adt_installer`脚本来完成的：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is an example of the `adt_installer.conf` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`adt_installer.conf`文件的示例：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the installation has started, the user is asked the location of the cross-toolchain.
    If no alternative is offered, the default path is selected and the cross-toolchain
    is installed in the `/opt/poky/<release>` directory. The installation process
    can be visualized both in a silent or interactive way. By using the `I` option,
    the installation is done in an interactive mode, while the silent mode is enabled
    using the `S` option.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装开始后，用户会被询问交叉工具链的位置。如果没有提供替代方案，则选择默认路径，并将交叉工具链安装在`/opt/poky/<release>`目录中。安装过程可以以静默或交互方式可视化。通过使用`I`选项，可以以交互模式进行安装，而使用`S`选项可以启用静默模式。
- en: At the end of the install procedure, the cross-toolchain will be found in its
    defined location. An environment setup script will be available for later usage,
    and the image tarball in the `adt-installer` directory, and the `sysroot` directory
    is defined in the location of the `YOCTOADT_TARGET_SYSROOT_LOC_<arch>` variable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程结束时，交叉工具链将在其定义的位置找到。环境设置脚本将可供以后使用，并且镜像tarball位于`adt-installer`目录中，`sysroot`目录位于`YOCTOADT_TARGET_SYSROOT_LOC_<arch>`变量的位置。
- en: As shown previously, there is more than one method to prepare the ADT environment.
    The second method involves only the installation of the toolchain installer—although
    it offers the possibility of having a prebuilt cross-tooolchain, support files
    and scripts, such as the `runqemu` script to start something similar to a kernel
    or Linux image in an emulator—which does not offer the same possibilities as the
    first option. Also, this option has its limitations regarding the `sysroot` directory.
    Although it's been generated, the `sysroot` directory might still need to be extracted
    and installed in a separate location. This can happened for various reasons, such
    as the need to boot a root filesystem over NFS or develop the application using
    the root filesystem as the target `sysroot`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，准备ADT环境有不止一种方法。第二种方法只涉及安装工具链安装程序，尽管它提供了预构建的交叉工具链、支持文件和脚本的可能性，比如`runqemu`脚本，可以在仿真器中启动类似于内核或Linux镜像的东西，但这不提供与第一种选择相同的可能性。此外，这个选项在`sysroot`目录方面有其局限性。尽管已经生成了`sysroot`目录，但可能仍需要将其提取并安装到单独的位置。这可能是由于各种原因，比如需要通过NFS引导根文件系统或者使用根文件系统作为目标`sysroot`开发应用程序。
- en: The root filesystem can be extracted from an already generated cross-toolchain
    using the `runqemu-extract-sdk` script, which should be called only after the
    cross-development environment script was set up using source command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根文件系统可以从已经生成的交叉工具链中提取出来，使用`runqemu-extract-sdk`脚本，这个脚本应该在使用source命令设置好交叉开发环境脚本之后才能调用。
- en: There are two methods to obtain the toolchain installed for this second option.
    The first method involves the use of the toolchain installer available at [http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/).
    Open the folder that matches your development host machine. In this folder, multiple
    install scripts are available. Each one matches a target architecture, so the
    right one should be selected for the target you have. One such example can be
    seen from [http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/x86_64/poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/x86_64/poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh),
    which is, in fact, the installer script for the `armv7a` target and the `x86_64`
    host machine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以获得为第二个选项安装的工具链。第一种方法涉及使用[http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/)上可用的工具链安装程序。打开与您的开发主机机器匹配的文件夹。在此文件夹中，有多个安装脚本可用。每个脚本都与目标架构匹配，因此应为您拥有的目标选择正确的脚本。一个这样的例子可以从[http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/x86_64/poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/x86_64/poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh)中看到，实际上是`armv7a`目标和`x86_64`主机机器的安装程序脚本。
- en: 'If your target machine is not one of the ones that are made available by the
    Yocto community, or if you prefer an alternative to this method, then building
    the toolchain installer script is the method for you. In this case, you will require
    a build directory, and you will be presented with two alternatives, both of them
    are equally good:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的目标机器不是Yocto社区提供的机器之一，或者您更喜欢这种方法的替代方法，那么构建工具链安装程序脚本就是适合您的方法。在这种情况下，您将需要一个构建目录，并且将呈现两种同样好的选择：
- en: The first one involves the use of the `bitbake meta-toolchain` command, and
    the end result is an installer script that requires the installation and set up
    of the cross-toolchain in a separate location.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法涉及使用`bitbake meta-toolchain`命令，最终结果是一个安装程序脚本，需要在单独的位置安装和设置交叉工具链。
- en: The second alternative involves the use of the `bitbake –c populate_sdk <image-name>`
    task, which offers the toolchain installer script and the matching `sysroot` for
    the target. The advantage here is that the binaries are linked with only one and
    the same `libc`, making the toolchain self-contained. There is, of course, a limitation
    that each architecture can create only one specific build. However, target-specific
    options are passed through the `gcc` options. Using variables, such as `CC` or
    `LD`, makes the process easier to maintain and also saves some space in the build
    directory.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种选择涉及使用`bitbake –c populate_sdk <image-name>`任务，该任务提供了工具链安装程序脚本和与目标匹配的`sysroot`。这里的优势在于二进制文件只与一个`libc`链接，使得工具链是自包含的。当然，每个架构只能创建一个特定的构建，但是目标特定的选项通过`gcc`选项传递。使用变量，如`CC`或`LD`，使得这个过程更容易维护，并且还节省了构建目录中的一些空间。
- en: After the installer is downloaded, make sure that the install script has set
    the execution correctly, and start the installation with the `./poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh`
    command.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序下载完成后，确保安装脚本已经正确设置执行权限，并使用`./poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh`命令开始安装。
- en: Some of the information you require includes the place where the installation
    should be made, the default location being the `/opt/poky/1.7` directory. To avoid
    this, the script can be called with the `–d <install-location>` argument and the
    installation can be made in the `<install-location>` location, as mentioned.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要的一些信息包括安装的位置，默认位置是`/opt/poky/1.7`目录。为了避免这一点，可以使用`–d <install-location>`参数调用脚本，并将安装位置设置为`<install-location>`，如上所述。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that the `MACHINE` variable is set accordingly in the `local.conf`
    file. Also, if the build is done for a different host machine, then `SDKMACHINE`
    should also be set. More than one `MACHINE` cross-toolchain can be generated in
    the same build directory, but these variables need to be properly configured.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`local.conf`文件中`MACHINE`变量设置正确。此外，如果为不同的主机机器进行构建，则还应设置`SDKMACHINE`。在同一个构建目录中可以生成多个`MACHINE`交叉工具链，但是这些变量需要正确配置。
- en: After the installation process is finished, the cross-toolchain will be available
    in the selected location, and the environment script will also be available for
    sourcing when needed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，交叉工具链将在所选位置可用，并且在需要时还将可用于源的环境脚本。
- en: The third option involves the use of the build directory and the execution of
    the `bitbake meta-ide-support` command. Inside the build directory, the proper
    environment needs to be set using one of the two available build environment setup
    scripts, which include the `oe-init-build-env` script or `oe-init-build-env-memres`.
    The local configuration from the `local.conf` file also needs to be set accordingly
    for the target architecture. After these steps are fulfilled by the developer,
    the `bitbake meta-ide-support` command could be used to start the generation of
    the cross-toolchain. At the end of the process, an environment setup script will
    be available inside the `<build-dir-path>/tmp` directory, but in this case, the
    toolchain is tightly linked into the build directory in which it was built.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选项涉及使用构建目录和执行`bitbake meta-ide-support`命令。在构建目录中，需要使用两个可用的构建环境设置脚本之一来设置适当的环境，其中包括`oe-init-build-env`脚本或`oe-init-build-env-memres`脚本。还需要根据目标架构相应地设置`local.conf`文件中的本地配置。开发人员完成这些步骤后，可以使用`bitbake
    meta-ide-support`命令开始生成交叉工具链。在过程结束时，将在`<build-dir-path>/tmp`目录中提供一个环境设置脚本，但在这种情况下，工具链紧密地链接到构建目录中。
- en: With the environment set up, writing of an application can start, but the developer
    would still need to complete some steps before finishing the activity, such as
    testing the application on the real root filesystem, debugging, and many others.
    For the kernel module and driver implementation, the kernel source code will be
    required, so the activity is just starting.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 环境设置完成后，可以开始编写应用程序，但开发人员仍然需要在完成活动之前完成一些步骤，例如在真实的根文件系统上测试应用程序、调试等。对于内核模块和驱动程序的实现，将需要内核源代码，因此活动刚刚开始。
- en: Eclipse IDE
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse IDE
- en: The plug-ins available for Eclipse from the Yocto Project include the functionalities
    for the ADT Project and toolchain. They allow developers to use a cross-compiler,
    debugger, and all the available tools generated with the Yocto Project, Poky,
    and additional meta layers. Not only can these components be used within the Eclipse
    IDE, but they also offer a familiar environment for application development.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto项目为Eclipse提供的插件包括ADT项目和工具链的功能。它们允许开发人员使用交叉编译器、调试器和Yocto项目、Poky和其他元层生成的所有可用工具。这些组件不仅可以在Eclipse
    IDE中使用，而且还为应用程序开发提供了熟悉的环境。
- en: The Eclipse IDE is an alternative for developers who are not interested in interacting
    with editors, such as `vim`, although, in my opinion, `vim` can be used for all
    kinds of projects. Even if their dimensions or complexities are not a problem,
    the overhead for using `vim` might not suit all tastes. The Eclipse IDE is the
    best alternative available for all developers. It has a lot of useful features
    and functionalities that can make your life a little easier and it is pretty easy
    to grasp.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE是开发人员的另一种选择，他们不想与编辑器进行交互，比如`vim`，尽管在我看来，`vim`可以用于各种项目。即使它们的尺寸或复杂性不是问题，使用`vim`的开销可能并不适合所有口味。Eclipse
    IDE是所有开发人员可用的最佳选择。它具有许多有用的功能和功能，可以让您的生活变得更轻松，而且很容易掌握。
- en: The Yocto Project offers support for two versions of Eclipse, Kepler and Juno.
    The Kepler version is the one recommended with the latest Poky release. I also
    recommend the Kepler 4.3.2 version of Eclipse, the one downloaded from the official
    download site of Eclipse, [http://www.eclipse.org/downloads](http://www.eclipse.org/downloads).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto项目支持Eclipse的两个版本，Kepler和Juno。 Kepler版本是最新Poky版本推荐的版本。我还建议使用Eclipse的Kepler
    4.3.2版本，这是从Eclipse官方下载站点[http://www.eclipse.org/downloads](http://www.eclipse.org/downloads)下载的版本。
- en: 'From this site, the Eclipse Standard 4.3.2 version containing the **Java Development
    Tools** (**JDT**), the Eclipse Platform, and the Development Environment Plug-ins
    for the host machine should be downloaded. After the download is finished, the
    received archive content should be extracted using the tar command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个网站上，应该下载包含**Java开发工具**（**JDT**）、Eclipse平台和主机机器的开发环境插件的Eclipse标准4.3.2版本。下载完成后，应使用tar命令提取接收到的存档内容：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next step is represented by the configuration. With the content extracted,
    the Eclipse IDE needs to be configured before installing the Yocto Project-specific
    plug-ins. The configuration starts with initializing the Eclipse IDE:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是配置。在提取内容后，需要在安装Yocto项目特定插件之前配置Eclipse IDE。配置从初始化Eclipse IDE开始：
- en: 'The Eclipse IDE is started after executing the `./eclipse` executable and setting
    the `Workspace` location. This is how the starting windows looks:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`./eclipse`可执行文件并设置`Workspace`位置后，将启动Eclipse IDE。这是启动窗口的外观：
- en: '![Eclipse IDE](img/image00326.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Eclipse IDE](img/image00326.jpeg)'
- en: Eclipse window
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse窗口
- en: 'To initialize the Eclipse IDE perform the following steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化Eclipse IDE，请执行以下步骤：
- en: Select **Workbench**, and you will be moved into the empty workbench where the
    projects source code will be written.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**工作台**，您将进入空的工作台，可以在其中编写项目源代码。
- en: Now, navigate through the **Help** menu and select **Install New Software**.![Eclipse
    IDE](img/image00327.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过**帮助**菜单导航并选择**安装新软件**。![Eclipse IDE](img/image00327.jpeg)
- en: Help menu
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助菜单
- en: A new window will open, and in the **Work with:** drop-down menu, select **Kepler
    - http://download.eclipse.org/releases/kepler**, as shown in the following screenshot:![Eclipse
    IDE](img/image00328.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开一个新窗口，在**使用：**下拉菜单中，选择**Kepler - http://download.eclipse.org/releases/kepler**，如下图所示：![Eclipse
    IDE](img/image00328.jpeg)
- en: Install window
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装窗口
- en: Expand the **Linux Tools** section and select **LTTng – Linux Tracing Toolkit**
    box, as shown in the following screenshot:![Eclipse IDE](img/image00329.jpeg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**Linux工具**部分，并选择**LTTng – Linux跟踪工具包**框，如下截图所示：![Eclipse IDE](img/image00329.jpeg)
- en: Install—LTTng – Linux Tracing Toolkit box
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 安装—LTTng – Linux跟踪工具包框
- en: 'Expand the **Moble and Device Development** section and select the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**移动和设备开发**部分，并选择以下内容：
- en: '**C/C++ Remote Launch (Requires RSE Remote System Explorer)**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C/C++远程启动（需要RSE远程系统资源管理器）**'
- en: '**Remote System Explorer End-user Runtime**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程系统资源管理器终端用户运行时
- en: '**Remote System Explorer User Actions**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程系统资源管理器用户操作
- en: '**Target Management Terminal**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标管理终端
- en: '**TCF Remote System Explorer add-in**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCF远程系统资源管理器插件**'
- en: '**TCF Target Explorer**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCF目标资源管理器
- en: '![Eclipse IDE](img/image00330.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Eclipse IDE](img/image00330.jpeg)'
- en: 'Expand the **Programming Languages** section and select the following:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**编程语言**部分，并选择以下内容：
- en: '**C/C++ Autotools Support**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C/C++ Autotools支持
- en: '**C/C++ Development Tools**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C/C++开发工具
- en: 'This is shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示：
- en: '![Eclipse IDE](img/image00331.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Eclipse IDE](img/image00331.jpeg)'
- en: Available software list window
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可用软件列表窗口
- en: Finish the installation after taking a quick look at the **Install Details**
    menu and enabling the license agreement:![Eclipse IDE](img/image00332.jpeg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在快速查看**安装详细信息**菜单并启用许可协议后完成安装：![Eclipse IDE](img/image00332.jpeg)
- en: Install details window
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装详细信息窗口
- en: 'After these steps, the Yocto Project Eclipse plug-ins can be installed into
    the IDE, but not before restarting the Eclipse IDE to make sure that the preceding
    changes take effect. The result after the configuration phase is visible here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，可以将Yocto项目Eclipse插件安装到IDE中，但在重新启动Eclipse IDE之前，不能确保前述更改生效。配置阶段结束后的结果在此可见：
- en: '![Eclipse IDE](img/image00333.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![Eclipse IDE](img/image00333.jpeg)'
- en: Eclipse—Configuring phase results
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse—配置阶段结果
- en: 'To install the Eclipse plug-ins for the Yocto Project, these steps are required:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Yocto项目的Eclipse插件，需要执行以下步骤：
- en: Start the Eclipse IDE as mentioned previously.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前面提到的方法启动Eclipse IDE。
- en: As shown in the previous configuration, select the **Install New Software**
    option from the **Help** menu.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的配置所示，从**帮助**菜单中选择**安装新软件**选项。
- en: Click on the **Add** button and insert `downloads.yoctoproject.org/releases/eclipse-plugin/1.7/kepler/`
    in the URL section. Give a proper name to the new **Work with:** site as indicated
    here:![Eclipse IDE](img/image00334.jpeg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加**按钮，并在URL部分插入`downloads.yoctoproject.org/releases/eclipse-plugin/1.7/kepler/`。根据此处的指示为新的**Work
    with:**站点命名：![Eclipse IDE](img/image00334.jpeg)
- en: Edit site window
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑站点窗口
- en: After the **OK** button is pressed, and the **Work with** site is updated, new
    boxes appear. Select all of them, as shown in this image, and click on the **Next**
    button:![Eclipse IDE](img/image00335.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下**OK**按钮并更新**Work with**站点后，会出现新的框。选择所有这些框，如此图所示，并单击**下一步**按钮：![Eclipse IDE](img/image00335.jpeg)
- en: Install details window
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 安装详细信息窗口
- en: One final pick at the installed components and the installation is approaching
    its end.![Eclipse IDE](img/image00336.jpeg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一次查看已安装的组件，安装即将结束。![Eclipse IDE](img/image00336.jpeg)
- en: Install details window
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安装详细信息窗口
- en: If this warning message appears, press **OK** and move further. It only lets
    you know that the installed packages have unsigned content.![Eclipse IDE](img/image00337.jpeg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现此警告消息，请按**确定**并继续。它只是让您知道已安装的软件包具有未签名的内容。![Eclipse IDE](img/image00337.jpeg)
- en: Security warning window
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 安全警告窗口
- en: The installation finishes only after the Eclipse IDE is restarted for the changes
    to take effect.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在重新启动Eclipse IDE后更改才会生效，安装才算完成。
- en: After the installation, the Yocto plug-ins are available and ready to be configured.
    The configuration process involves the setup of the target-specific option and
    cross-compiler. For each specific target, the preceding configurations steps need
    to be performed accordingly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，Yocto插件可用并准备好进行配置。配置过程涉及设置特定于目标的选项和交叉编译器。对于每个特定的目标，需要相应地执行前述配置步骤。
- en: 'The configuration process is done by selecting the **Preferences** option from
    the **Window** menu. A new window will open, and from there, the **Yocto Project
    ADT** option should be selected. More details are available, as shown in the following
    screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从**窗口**菜单中选择**首选项**选项来完成配置过程。将打开一个新窗口，从中应选择**Yocto项目ADT**选项。更多细节可参见以下截图：
- en: '![Eclipse IDE](img/image00338.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Eclipse IDE](img/image00338.jpeg)'
- en: Eclipse IDE—Preferences
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE—首选项
- en: The next thing to do involves the configuration of the available options of
    the cross-compiler. The first option refers to the toolchain type, and there are
    two options available, **Standalone prebuilt toolchain** and **Build system derived
    toolchain**, which is the default selected option. The former refers to a toolchain
    specific for an architecture that already has an existing kernel and root filesystem,
    so the developed application will be made available in the image manually. However,
    this step is not a requirement since all the components are separated. The latter
    option refers to a toolchain built inside a Yocto Project build directory.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的事情涉及配置交叉编译器的可用选项。第一个选项是工具链类型，有两个选项可用，**独立预构建工具链**和**构建系统派生工具链**，默认选择后者。前者是指特定于已有现有内核和根文件系统的架构的工具链，因此开发的应用程序将手动在镜像中提供。但是，由于所有组件都是分开的，这一步并不是必需的。后者是指在Yocto项目构建目录中构建的工具链。
- en: The next elements that need to be configured are the toolchain location, `sysroot`
    location, and the target architecture. The **Toolchain Root Location** is used
    to define the toolchain install location. For an installation done with the `adt_installer`
    script, for example, the toolchain will be available in the `/opt/poky/<release>`
    directory. The second argument, **Sysroot Location**, represents the location
    of the target device root filesystem. It can be found in the `/opt/poky/<release>`
    directory, as seen the preceding example, or even inside the build directory if
    other method to generate it were used. The third and last option from this section
    is represented by the **Target Architecture** and it indicates the type of hardware
    used or emulated. As it can be seen on the window, it is a pull-down menu where
    the required option is selected, and a user will find all the supported architectures
    listed. In a situation where the necessary architecture is not available inside
    the pull-down menu, the corresponding image for the architecture will need to
    be built.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 需要配置的下一个元素是工具链位置、`sysroot`位置和目标架构。**工具链根位置**用于定义工具链安装位置。例如，使用`adt_installer`脚本安装时，工具链将位于`/opt/poky/<release>`目录中。第二个参数**Sysroot位置**表示目标设备根文件系统的位置。它可以在`/opt/poky/<release>`目录中找到，如前面的示例所示，或者如果使用其他方法生成它，则甚至可以在构建目录中找到。这一部分的第三个和最后一个选项由**目标架构**表示，它表示所使用或模拟的硬件类型。正如在窗口中所看到的，它是一个下拉菜单，用户可以选择所需的选项，并找到所有支持的架构列表。在所需架构在下拉菜单中不可用的情况下，将需要构建相应的架构镜像。
- en: The last remaining section is represented by the target specific option. This
    refers to the possibility of emulating an architecture using QEMU or running the
    image on the externally available hardware. For external hardware, use the **External
    HW** option that needs to be selected for the work to be finished, but for the
    QEMU emulation, there are still things to do besides selecting the **QEMU** option.
    In this scenario, the user will also need to indicate the **Kernel** and **Custom
    Option**. For the kernel selection, the process is simple. It is available in
    the prebuilt image location in case the **Standalone pre-built toolchain** option
    was selected or in the `tmp/deploy/images/<machine-name>` directory if the **Build
    system derived toolchain** option was selected. For the second option, the **Custom
    Option** argument, the process for adding it will not be as simple as the preceding
    options.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后剩下的部分是目标特定选项。这指的是使用QEMU模拟架构或在外部可用的硬件上运行镜像的可能性。对于外部硬件，请使用需要选择的**外部硬件**选项以完成工作，但对于QEMU模拟，除了选择**QEMU**选项外，还有其他事情要做。在这种情况下，用户还需要指定**内核**和**自定义选项**。对于内核选择，过程很简单。如果选择了**独立预构建工具链**选项，它将位于预构建镜像位置，或者如果选择了**构建系统派生工具链**选项，则将位于`tmp/deploy/images/<machine-name>`目录中。对于第二个选项**自定义选项**参数，添加它的过程不会像前面的选项那样简单。
- en: The **Custom Option** field needs to be filled with various options, such as
    `kvm`, nographic, `publicvnc`, or `serial`, which indicate major options for the
    emulated architecture or their parameters. These are kept inside angled brackets,
    and include parameters, such as the memory used (`-m 256`), networking support
    (`-net`), and full screen support (`-full-screen`). More information regarding
    the available options and parameters can be found using the `man qemu` command.
    All of the preceding configurations can be overwritten using the **Change Yocto
    Project Settings** option from the **Project** menu after a project is defined.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义选项**字段需要填写各种选项，例如`kvm`、nographic、`publicvnc`或`serial`，它们表示模拟架构或其参数的主要选项。这些选项被保存在尖括号内，并包括参数，例如使用的内存（`-m
    256`）、网络支持（`-net`）和全屏支持（`-full-screen`）。有关可用选项和参数的更多信息可以使用`man qemu`命令找到。在定义项目后，可以使用**更改Yocto项目设置**选项从**项目**菜单中覆盖所有前述配置。'
- en: 'To define a project, these steps need to be taken:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个项目，需要执行以下步骤：
- en: Select the **Project…** option from the **File** | **New** menu option, as shown
    here:![Eclipse IDE](img/image00339.jpeg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件** | **新建**菜单选项中选择**项目…**选项，如下所示：![Eclipse IDE](img/image00339.jpeg)
- en: Eclipse IDE—Project
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE—项目
- en: Select **C project** from the **C/C++** option. This will open a **C Project**
    window:![Eclipse IDE](img/image00340.jpeg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**C/C++**选项中选择**C项目**。这将打开一个**C项目**窗口：![Eclipse IDE](img/image00340.jpeg)
- en: Eclipse IDE—New project window
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE—新项目窗口
- en: In the **C Project** window, there are multiple options available. Let's select
    **Yocto Project ADT Autotools Project**, and from there, the **Hello World ANSI
    C Autotools Project** option. Add a name for the new project, and we are ready
    to move to the next steps:![Eclipse IDE](img/image00341.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**C项目**窗口中，有多个选项可用。让我们选择**Yocto项目ADT Autotools项目**，然后选择**Hello World ANSI C
    Autotools项目**选项。为新项目添加名称，我们准备进行下一步：![Eclipse IDE](img/image00341.jpeg)
- en: C project window
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: C项目窗口
- en: In the **C Project** window we you be prompted to add information regarding
    the **Author**, **Copyright notice**, **Hello world greetings**, **Source**, and
    **License** fields accordingly:![Eclipse IDE](img/image00342.jpeg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**C项目**窗口中，您将被提示相应地添加**作者**、**版权声明**、**Hello world问候**、**源**和**许可**字段的信息：![Eclipse
    IDE](img/image00342.jpeg)
- en: C project—basic settings window
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: C项目—基本设置窗口
- en: After all the information is added, the **Finish** button can be clicked on.
    The user will be prompted in the new **C/C++** perspective that is specific for
    the opened project, with the newly created project appearing on the left-hand
    side of the menu.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '添加所有信息后，可以单击**完成**按钮。用户将在新的特定于**C/C++**的透视图中得到提示，该透视图特定于打开的项目，并且新创建的项目将出现在菜单的左侧。 '
- en: After the project is created and the source code is written, to build the project,
    select the **Build Project** option from the **Project…** menu.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目并编写源代码后，要构建项目，请从**项目…**菜单中选择**构建项目**选项。
- en: QEMU emulator
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QEMU模拟器
- en: QEMU is used in the Yocto Project as a virtualization machine and emulator for
    various target architectures. It is very useful to run and test various Yocto
    generated applications and images, apart from fulfilling other purposes. Its primary
    use outside of the Yocto world is its selling point for the Yocto Project too,
    making it the default tool to be used to emulate hardware.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU在Yocto项目中作为各种目标架构的虚拟化机器和仿真器使用。它非常有用，可以运行和测试各种Yocto生成的应用程序和映像，除了完成其他目的。在Yocto世界之外，它的主要用途也是Yocto项目的卖点，使其成为默认工具来模拟硬件。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about the use case of QEMU can be found by accessing [http://www.yoctoproject.org/docs/1.7/adt-manual/adt-manual.html#the-qemu-emulator](http://www.yoctoproject.org/docs/1.7/adt-manual/adt-manual.html#the-qemu-emulator).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有关QEMU用例的更多信息，请访问[http://www.yoctoproject.org/docs/1.7/adt-manual/adt-manual.html#the-qemu-emulator](http://www.yoctoproject.org/docs/1.7/adt-manual/adt-manual.html#the-qemu-emulator)。
- en: Interaction with the QEMU emulation is done within Eclipse, as shown previously.
    For this to happen, the proper configuration would be required, as instructed
    in the preceding section. Starting the QEMU emulation here is done using the **External
    Tools** option from the **Run** menu. A new window will be opened for the emulator,
    and after the corresponding login information is passed to the prompt, the shell
    will be available for user interaction. An application can be deployed and debugged
    on the emulator also.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与QEMU仿真的交互是在Eclipse中完成的，如前所示。为此发生，需要适当的配置，如在前一节中所述。在这里启动QEMU仿真是使用“运行”菜单中的“外部工具”选项完成的。将为仿真器打开一个新窗口，并在传递相应的登录信息到提示后，shell将可供用户交互。应用程序也可以在仿真器上部署和调试。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information regarding QEMU interaction is available at [http://www.yoctoproject.org/docs/1.7/dev-manual/dev-manual.html#dev-manual-qemu](http://www.yoctoproject.org/docs/1.7/dev-manual/dev-manual.html#dev-manual-qemu).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有关QEMU交互的更多信息，请访问[http://www.yoctoproject.org/docs/1.7/dev-manual/dev-manual.html#dev-manual-qemu](http://www.yoctoproject.org/docs/1.7/dev-manual/dev-manual.html#dev-manual-qemu)。
- en: Debugging
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: Debugging an application can also be done using the QEMU emulator or the actual
    target hardware, if it exists. When the project was configured, a run/debug Eclipse
    configuration was generated as a **C/C+ Remote Application** instance, and it
    can be found on the basis of its name, which is according to the `<project-name>_gdb_-<suffix>`
    syntax. For example, `TestProject_gdb_armv5te-poky-linux-gnueabi` could be an
    example of this.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，还可以使用QEMU仿真器或实际目标硬件来调试应用程序。当项目配置时，将生成一个**C/C+远程应用程序**实例的运行/调试Eclipse配置，并且可以根据其名称找到，该名称符合`<project-name>_gdb_-<suffix>`的语法。例如，`TestProject_gdb_armv5te-poky-linux-gnueabi`可能是一个例子。
- en: 'To connect to the Eclipse GDB interface and start the remote target debugging
    process, the user is required to perform a few steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到Eclipse GDB界面并启动远程目标调试过程，用户需要执行一些步骤：
- en: Select **C/C++ Remote application** from the **Run** | **Debug configuration**
    menu and choose the run/debug configuration from the **C/C++ Remote Application**
    available in the left panel.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“运行”|“调试配置”菜单中选择“C/C++远程应用程序”，并从左侧面板中的“C/C++远程应用程序”中选择运行/调试配置。
- en: Select the suitable connection from the drop-down list.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择适当的连接。
- en: Select the binary application to deploy. If multiple executables are available
    in your project, by pushing the **Search Project** button, Eclipse will parse
    the project and provide a list with all the available binaries.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要部署的二进制应用程序。如果项目中有多个可执行文件，在按下“搜索项目”按钮后，Eclipse将解析项目并提供所有可用二进制文件的列表。
- en: Enter the absolute path in which the application will be deployed by setting
    the **Remote Absolute File Path for C/C++ Application:** field accordingly.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过相应地设置“C/C++应用程序的远程绝对文件路径：”字段，输入应用程序将部署的绝对路径。
- en: 'Selecting the debugger option is available in the **Debugger** tab. To debug
    shared libraries, a few extra steps are necessary:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“调试器”选项卡中可以选择调试器选项。要调试共享库，需要进行一些额外的步骤：
- en: Select the **Add** | **Path Mapping** option from the **Source** tab to make
    sure a path mapping is available for the debug configuration.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“源”选项卡中选择“添加”|“路径映射”选项，以确保调试配置中有路径映射可用。
- en: Select **Load shared libraries symbols automatically** from the **Debug/Shared
    Library** tab and indicate the path of the shared libraries accordingly. This
    path is highly dependent on the architecture of the processor, so be very careful
    which library file you indicate. Usually, for the 32-bit architecture, the `lib`
    directory is selected, and for the 64-bit architecture, the `lib64` directory
    is chosen.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“调试/共享库”选项卡中选择“自动加载共享库符号”，并相应地指示共享库的路径。这个路径高度依赖于处理器的架构，所以非常小心地指定库文件。通常，对于32位架构，选择`lib`目录，对于64位架构，选择`lib64`目录。
- en: On the **Arguments** tab, there is a possibility of passing various arguments
    to the application binary during the time of execution.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“参数”选项卡上，有可能在执行时向应用程序二进制文件传递各种参数。
- en: 'Once all the debug configurations are finished, click on the **Apply** and
    **Debug** buttons. A new GDB session will be launched and **Debug perspective**
    will open. When the debugger is being initialized, Eclipse will open three consoles:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有调试配置后，单击“应用”和“调试”按钮。将启动一个新的GDB会话，并打开“调试透视”。当调试器正在初始化时，Eclipse将打开三个控制台：
- en: A GDB console named after the GDB binary described previously, used for command-line
    interaction
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为之前描述的GDB二进制文件的GDB控制台，用于命令行交互
- en: A remote shell used to run an application display results
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于运行应用程序显示结果的远程shell
- en: A local machine console that is named after the binary path, which in most of
    cases, is not used. It remains as an artefact.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为二进制路径的本地机器控制台，在大多数情况下，不会被使用。它仍然是一个工件。
- en: After the setup of the debug configuration, the application can be rebuilt and
    executed again using the available **Debug** icon in the toolbar. If, in fact,
    you want only to run and deploy the application, the **Run** icon can be used.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调试配置设置完成后，可以使用工具栏中的**调试**图标重新构建和执行应用程序。实际上，如果您只想运行和部署应用程序，可以使用**运行**图标。
- en: Profiling and tracing
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能分析和跟踪
- en: Inside the **Yocto Tools** menu, you can see the supported tools that are used
    for the tracing and profiling of developed applications. These tools are used
    for enhancing various properties of the application and, in general, the development
    process and experience. The tools that will be presented are LTTng, Perf, LatencyTop,
    PerfTop, SystemTap, and KGDB.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Yocto工具**菜单中，您可以看到用于跟踪和分析开发应用程序的支持工具。这些工具用于增强应用程序的各种属性，总的来说，是为了提高开发过程和体验。将介绍的工具包括LTTng、Perf、LatencyTop、PerfTop、SystemTap和KGDB。
- en: 'The first one we''ll take a look at is the LTTng Eclipse Plug-in, which offers
    the possibility of tracing a target session and analyzing the results. To start
    working with the tool, a quick configuration is necessary first, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要看的是LTTng Eclipse插件，它提供了跟踪目标会话和分析结果的可能性。要开始使用该工具，首先需要进行快速配置，如下所示：
- en: Start the tracing perspective by selecting **Open Perspective** from the **Window**
    menu.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**窗口**菜单中选择**打开透视图**来开始跟踪透视图。
- en: Create a new tracing project by selecting **Project** from the **File** | **New**
    menu.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件** | **新建**菜单中选择**项目**来创建一个新的跟踪项目。
- en: 'Select **Control View** from the **Window** | **Show view** | **Other…** |
    **Lttng** menu. This will enable you to access all these desired operations:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**窗口** | **显示视图** | **其他...** | **Lttng**菜单中选择**控制视图**。这将使您能够访问所有这些所需的操作：
- en: Creating a new connection
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的连接
- en: Creating a session
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个会话
- en: Starting/stopping tracing
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始/停止跟踪
- en: Enabling events
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用事件
- en: Next, we'll introduce the user space performance analyzing tool called **Perf**.
    It offers statistical profiling of the application code and a simple CPU for multiple
    threads and kernel. To do this, it uses a number of performance counters, dynamic
    probes, or trace points. To use the Eclipse Plug-in, a remote connection to the
    target is required. It can be done by the Perf wizard or by using the **Remote
    System Explorer** | **Connection** option from the **File** | **New** | **Other**
    menu. After the remote connection is set up, interaction with the tool is the
    same as in the case of the command line support available for the tool.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一个名为**Perf**的用户空间性能分析工具。它为多个线程和内核提供应用程序代码的统计分析和简单的CPU分析。为了做到这一点，它使用了许多性能计数器、动态探针或跟踪点。要使用Eclipse插件，需要远程连接到目标。可以通过Perf向导或使用**文件**
    | **新建** | **其他**菜单中的**远程系统资源管理器** | **连接**选项来完成。远程连接设置完成后，与该工具的交互与该工具的命令行支持相同。
- en: '**LatencyTop** is an application that is used to identify the latencies available
    within the kernel and also their root cause. This tool is not available for ARM
    kernels that have **Symmetric multiprocessing** (**SMP**) support enabled due
    to the limitation of the ARM kernels. This application also requires a remote
    connection. After the remote connection is set up, the interaction is the same
    as in the case of the command line support available for the tool. This application
    is run from the Eclipse Plug-in using `sudo`.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**LatencyTop**是一个用于识别内核中可用延迟及其根本原因的应用程序。由于ARM内核的限制，此工具不适用于启用了**对称多处理**（**SMP**）支持的ARM内核。此应用程序还需要远程连接。远程连接设置完成后，与该工具的命令行支持相同。此应用程序是使用`sudo`从Eclipse插件运行的。'
- en: '**PowerTop** is used to measure the consumption of electrical power. It analyzes
    the applications, kernel options, and device drivers that run on a Linux system
    and estimates their power consumption. It is very useful to identify components
    that use the most amount of power. This application requires a remote connection.
    After the remote connection is set up, the interaction with the application is
    the same as for the command line available support for the tool. This application
    is run from the Eclipse Plug-in using the –d option to display the output in the
    Eclipse window.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**PowerTop**用于测量电力消耗。它分析在Linux系统上运行的应用程序、内核选项和设备驱动程序，并估计它们的功耗。它非常有用，可以识别使用最多功率的组件。此应用程序需要远程连接。远程连接设置完成后，与该工具的命令行支持相同。此应用程序是使用-Eclipse插件运行的，使用-d选项在Eclipse窗口中显示输出。'
- en: '**SystemTap** is a tool that enables the use of scripts to get results from
    a running Linux. SystemTap provides free software (GPL) infrastructure to simplify
    the gathering of information about the running Linux system via the tracing of
    all kernel calls. It''s very similar to dtrace from Solaris, but it is still not
    suited for production systems, unlike dtrace. It uses a language similar to `awk`
    and its scripts have the `.stp` extension. The monitored data can be extracted
    and various filters and complex processing can be done on them. The Eclipse Plug-in
    uses the `crosstap` script to translate the `.stp` scripts to a C language to
    create a `Makefile`, run a C compiler to create a kernel module for the target
    architecture that is inserted into the target kernel, and later, collect the tracing
    data from the kernel. To start the SystemTap plug-in in Eclipse, there are a number
    of steps to be followed:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**SystemTap**是一种工具，它可以使用脚本从运行中的Linux系统中获取结果。SystemTap提供了一个自由软件（GPL）基础设施，用于简化通过跟踪所有内核调用来收集有关运行中Linux系统的信息。它与Solaris的dtrace非常相似，但与dtrace不同的是，它仍然不适用于生产系统。它使用类似于`awk`的语言，其脚本具有`.stp`扩展名。监视的数据可以被提取，并且可以对其进行各种过滤和复杂处理。Eclipse插件使用`crosstap`脚本将`.stp`脚本转换为C语言，创建一个`Makefile`，运行C编译器以创建一个插入到目标内核的目标架构的内核模块，然后从内核中收集跟踪数据。要在Eclipse中启动SystemTap插件，需要遵循一些步骤。'
- en: Select the **systemtap** option from the **Yocto Project Tools** menu.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Yocto项目工具**菜单中选择**systemtap**选项。
- en: 'In the opened windows, the crosstap argument needs to be passed:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的窗口中，需要传递crosstap参数：
- en: Set the **Metadata Location** variable to the corresponding `poky` directory
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Metadata Location**变量设置为相应的`poky`目录
- en: Set **Remote User ID** by entering the root (the default option) because it
    has `ssh` access to the target-any other user that has the same privileges is
    also a good choice
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过输入root（默认选项）来设置**Remote User ID**，因为它对目标具有`ssh`访问权限-任何其他具有相同权限的用户也是一个不错的选择
- en: Set in the **Remote Host** variable to the corresponding IP address for the
    target
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Remote Host**变量设置为目标的相应IP地址
- en: Use the **Systemtap Scripts** variable for the full path to the `.stp` scripts
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Systemtap Scripts**变量来获取`.stp`脚本的完整路径
- en: Set additional cross options using the **Systemtap Args** field
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Systemtap Args**字段设置额外的交叉选项
- en: The output of the `.stp` script should be available in the console view from
    Eclipse.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`.stp`脚本的输出应该在Eclipse的控制台视图中可用。'
- en: 'The last tool we''ll take a look at is **KGDB**. This tool is used specifically
    for the debugging of Linux kernel, and is useful only if development on the Linux
    kernel source code is done inside the Eclipse IDE. To use this tool, a number
    of necessary configuration setups are required:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的最后一个工具是**KGDB**。这个工具专门用于调试Linux内核，只有在Eclipse IDE内进行Linux内核源代码开发时才有用。要使用这个工具，需要进行一些必要的配置设置：
- en: 'Disable the C/C++ indexing:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用C/C++索引：
- en: Select the **C/C++ Indexer** option from the **Window** | **Preferences** menu
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**Window** | **Preferences**菜单中选择**C/C++ Indexer**选项
- en: Unselect the **Enable indexer** checkbox
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消选择**Enable indexer**复选框
- en: 'Create a project where the kernel source code can be imported:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可以导入内核源代码的项目：
- en: Select the **C/C++** | **C Project** option from the **File** | **New** menu
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**File** | **New**菜单中选择**C/C++** | **C Project**选项
- en: Select the **Makefile project** | **Empty project** option and give a proper
    name to the project
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**Makefile project** | **Empty project**选项，并为项目命名
- en: Unselect the **Use default location** option
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消选择**Use default location**选项
- en: Click on the **Browse** button and identify the kernel source code local git
    repository location
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击**Browse**按钮并标识内核源代码本地git存储库的位置
- en: Press the **Finish** button and the project should be created
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下**Finish**按钮，项目应该已创建
- en: 'After the prerequisites are fulfilled, the actual configuration can start:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在满足先决条件后，实际配置可以开始：
- en: Select the **Debug Configuration** option from the **Run** menu.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**Run**菜单中选择**Debug Configuration**选项。
- en: Double-click on the **GDB Hardware Debugging** option to create a default configuration
    named **<project name> Default**.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击**GDB Hardware Debugging**选项以创建名为**<project name> Default**的默认配置。
- en: From the **Main** tab, browse to the location of the `vmlinux` built image,
    select the **Disable auto build** radio button, as well as the **GDB (DFS) Hardware
    Debugging Launcher** option.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**Main**选项卡，浏览到`vmlinux`构建图像的位置，选择**Disable auto build**单选按钮，以及**GDB (DFS)
    Hardware Debugging Launcher**选项。
- en: For the **C/C++ Application** option available in the **Debugger** tab, browse
    for the location of the GDB binary available inside the toolchain (if ADT installer
    script is available, its default location should be `/opt/poky/1.7/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi-gdb`).
    Select **Generic serial option** from the **JTAG Device** menu. The **Use remote
    target** option is a requirement.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**Debugger**选项卡中可用的**C/C++ Application**选项，浏览工具链内可用的GDB二进制文件的位置（如果ADT安装程序脚本可用，则其默认位置应为`/opt/poky/1.7/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi-gdb`）。从**JTAG
    Device**菜单中选择**Generic serial option**。**Use remote target**选项是必需的。
- en: From the **Startup** tab, select the **Load symbols** option. Make sure that
    the **Use Project binary** option indicates the correct `vmlinux` image and that
    the **Load image** option is not selected.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**Startup**选项卡，选择**Load symbols**选项。确保**Use Project binary**选项指示正确的`vmlinux`图像，并且未选择**Load
    image**选项。
- en: Press the **Apply** button to make sure the previous configuration is enabled.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下**Apply**按钮以确保先前的配置已启用。
- en: 'Prepare the target for the serial communication debugging:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为串行通信调试准备目标：
- en: Set the `echo ttyS0,115200` | `/sys/module/kgdboc/parameters/kgdboc` option
    to make sure the appropriate device is used for debugging
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置`echo ttyS0,115200` | `/sys/module/kgdboc/parameters/kgdboc`选项以确保适当的设备用于调试
- en: Start KGDB on the `echo g` | `/proc/sysrq-trigger` target
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`echo g` | `/proc/sysrq-trigger`目标上启动KGDB
- en: Close the terminal with the target but keep the serial connectivity
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭目标终端但保持串行连接
- en: Select the **Debug Configuration** option from the **Run** menu
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**Run**菜单中选择**Debug Configuration**选项
- en: Select the previously created configuration and click on the **Debug** button
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择先前创建的配置，然后单击**Debug**按钮
- en: After the **Debug** button is pressed, the debug session should start and the
    target will be halted in the `kgdb_breakpoint()` function. From there, all the
    commands specific to GDB are available and ready to be used.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**Debug**按钮后，调试会话应该开始，并且目标将在`kgdb_breakpoint()`函数中停止。从那里，所有特定于GDB的命令都可用并准备好使用。
- en: The Yocto Project bitbake commander
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yocto Project bitbake指挥官
- en: The bitbake commander offers the possibility of editing recipes and creating
    a metadata project in a manner similar to the one available in the command line.
    The difference between the two is that the Eclipse IDE is used to do the metadata
    interaction.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: bitbake指挥官提供了编辑配方和创建元数据项目的可能性，类似于命令行中可用的方式。两者之间的区别在于使用Eclipse IDE进行元数据交互。
- en: 'To make sure that a user is able to do these sort of actions, a number of steps
    are required:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保用户能够执行这些操作，需要进行一些步骤：
- en: Select the **Project** option from the **File** | **New** menu
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**File** | **New**菜单中选择**Project**选项
- en: Select the **Yocto Project BitBake Commander** wizard from the opened window
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从打开的窗口中选择**Yocto Project BitBake Commander**向导
- en: Select the **New Yocto Project** option and a new window will be opened tp define
    properties of the new project
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**New Yocto Project**选项，将打开一个新窗口来定义新项目的属性
- en: Using **Project Location**, identify the parent of the `poky` directory
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**项目位置**，识别`poky`目录的父目录
- en: Use the **Project Name** option to define the project name. Its default value
    is poky
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**项目名称**选项定义项目名称。其默认值为poky
- en: For the **Remote service provider** variable, select the **Local** choice and
    make use of the same choice for the **Connection name** drop-down list
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**远程服务提供商**变量，选择**本地**选项，并在**连接名称**下拉列表中使用相同的选项
- en: Make sure that the **Clone** checkbox is not selected for an installed `poky`
    source directory
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保对已安装的`poky`源目录未选择**克隆**复选框
- en: By using the Eclipse IDE, its features are available to be used. One of the
    most useful features is the quick search option that could prove to be very useful
    for some developers. Other benefits include the possibility of creating recipes
    using templates, editing them with syntax highlighting, auto completion, error
    reports on the fly, and many more.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Eclipse IDE，其功能可供使用。其中最有用的功能之一是快速搜索选项，对一些开发人员可能非常有用。其他好处包括使用模板创建配方的可能性，使用语法高亮、自动完成、实时错误报告等进行编辑，以及许多其他功能。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The use of bitbake commander is restricted to local connections only. The remote
    connection causes the IDE to freeze due to a bug available upstream.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用bitbake commander仅限于本地连接。远程连接会导致IDE由于上游可用的错误而冻结。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were presented with information about the functionalities
    of the ADE offered by the Yocto Project, and the numerous Eclipse Plug-ins available
    for application development not only as an alternative, but also as a solution
    for developers who are connected to their IDEs. Although the chapter started with
    an introduction to the application development options for the command-line enthusiast,
    it shortly became more about IDE interaction than anything else. This happened
    because alternative solutions need to be available so that developers could choose
    what fits their needs best.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Yocto项目提供的ADE功能的信息，以及可用于应用程序开发的众多Eclipse插件，这不仅是一种替代方案，也是对连接到他们的IDE的开发人员的解决方案。尽管本章以介绍命令行爱好者的应用程序开发选项开始，但很快就变成了关于IDE交互的内容。这是因为需要提供替代解决方案，以便开发人员可以选择最适合他们需求的内容。
- en: In the next chapter, a number of Yocto Project components will be presented.
    This time, they are not related to application development, but involve metadata
    interaction, quality assurance, and continuous integration services. I will try
    to present yet another face of the Yocto Project that I believe will help readers
    get a better picture of the Yocto Project, and eventually, interact with and contribute
    to the components that suit them and their needs best.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，将介绍一些Yocto项目的组件。这一次，它们与应用程序开发无关，而涉及元数据交互、质量保证和持续集成服务。我将尝试展示Yocto项目的另一面，我相信这将帮助读者更好地了解Yocto项目，并最终与适合他们和他们需求的组件进行交互和贡献。
