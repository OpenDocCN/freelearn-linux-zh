- en: Implementing Mandatory Access Control with SELinux and AppArmor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SELinux和AppArmor实施强制访问控制
- en: As we saw in the previous chapters, Discretionary Access Control allows users
    to control who can access their own files and directories. But, what if your company
    needs to have more administrative control over who accesses what? For this, we
    need some sort of Mandatory Access Control or MAC.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看到，自主访问控制允许用户控制谁可以访问他们自己的文件和目录。但是，如果您的公司需要对谁访问什么拥有更多的管理控制权呢？为此，我们需要某种强制访问控制或MAC。
- en: The best way I know to explain the difference between DAC and MAC is to hearken
    back to my Navy days.  I was riding submarines at the time, and I had to have
    a Top Secret clearance to do my job. With DAC, I had the physical ability to take
    one of my Top Secret books to the mess decks, and hand it to a cook who didn't
    have that level of clearance. With MAC, there were rules that prevented me from
    doing so. On operating systems, things work pretty much the same way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道解释DAC和MAC之间的区别的最好方法是回想起我在海军时的日子。那时我在潜艇上工作，我必须有最高机密级别的许可才能做我的工作。使用DAC，我有能力将我的最高机密级别的书带到餐厅，交给一个没有那个级别许可的厨师。使用MAC，有规定阻止我这样做。在操作系统上，事情基本上是一样的。
- en: There are several different MAC systems that are available for Linux. The two
    that we'll cover in this chapter are SELinux and AppArmor.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有几种不同的MAC系统可用。本章将涵盖的两种是SELinux和AppArmor。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What SELinux is and how it can benefit a system's administrator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux是什么以及它如何有益于系统管理员
- en: How to set security contexts for files and directories
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为文件和目录设置安全上下文
- en: How to use setroubleshoot to troubleshoot SELinux problems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用setroubleshoot来排除SELinux问题
- en: Looking at SELinux policies and how to create custom policies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看SELinux策略以及如何创建自定义策略
- en: What AppArmor is and how it can benefit a systems administrator
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AppArmor是什么以及它如何有益于系统管理员
- en: Looking at AppArmor policies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看AppArmor策略
- en: Working with AppArmor command-line utilities
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AppArmor命令行实用程序
- en: Troubleshooting AppArmor problems
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排除AppArmor问题
- en: How SELinux can benefit a systems administrator
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELinux如何有益于系统管理员
- en: 'SELinux is a free open source software project that was developed by the U.S.
    National Security Agency. While it can theoretically be installed on any Linux
    distro, the Red Hat-type distros are the only ones that come with it already set
    up and enabled. It uses code in Linux kernel modules, along with filesystem-extended
    attributes, to help ensure that only authorized users and processes can access
    either sensitive files or system resources. There are three ways in which SELinux
    can be used:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux是由美国国家安全局开发的免费开源软件项目。虽然理论上它可以安装在任何Linux发行版上，但只有红帽类型的发行版才预先设置并启用了它。它使用Linux内核模块中的代码，以及文件系统扩展属性，以帮助确保只有经过授权的用户和进程才能访问敏感文件或系统资源。SELinux有三种使用方式：
- en: It can help prevent intruders from exploiting a system
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助防止入侵者利用系统
- en: It can be used to ensure that only users with the proper security clearance
    can access files that are labeled with a security classification
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以用来确保只有具有适当安全许可的用户才能访问标有安全分类的文件
- en: In addition to MAC, SELinux can also be used as a type of role-based access
    control
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了MAC，SELinux还可以用作一种基于角色的访问控制
- en: In this chapter, I'll only be covering the first of these three uses because
    that is the most common way in which SELinux is used. There's also the fact that
    covering all three of these uses would require writing a whole book, which I don't
    have space to do here.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我只会涵盖这三种用法中的第一种，因为这是SELinux最常用的方式。还有一个事实，涵盖这三种用法将需要写一整本书，而我在这里没有空间来做。
- en: If you go through this introduction to SELinux and find that you still need
    more SELinux information, you'll find whole books and courses on just this subject
    at the Packt Publishing website.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读完这篇关于SELinux的介绍，发现您仍然需要更多关于SELinux的信息，您可以在Packt Publishing网站上找到关于这个主题的整本书和课程。
- en: So how can SELinux benefit the busy systems administrator? Well, you might remember
    when a few years ago, news about the *Shellshock* bug hit the world's headlines.
    Essentially, Shellshock was a bug in the Bash shell that allowed intruders to
    break into a system and to exploit it by gaining root privileges. For systems
    that were running SELinux, it was still possible for the bad guys to break in,
    but SELinux would have prevented them from successfully running their exploits.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么SELinux如何有益于繁忙的系统管理员呢？嗯，也许你还记得几年前，有关*Shellshock*漏洞的新闻震惊了世界。基本上，Shellshock是Bash
    shell中的一个漏洞，允许入侵者通过获取root权限来入侵系统并利用它。对于运行SELinux的系统，入侵者仍然有可能入侵，但SELinux将阻止他们成功运行其利用程序。
- en: SELinux is also yet another mechanism that can help protect data in users' home
    directories. If you have a machine that's set up as a Network File System server,
    a Samba server, or a web server, SELinux will prevent those daemons from accessing
    users' home directories, unless you explicitly configure SELinux to allow that
    behavior.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux还是另一种可以帮助保护用户家目录中数据的机制。如果您有一台设置为网络文件系统服务器、Samba服务器或Web服务器的机器，除非您明确配置SELinux允许该行为，否则SELinux将阻止这些守护程序访问用户的家目录。
- en: On web servers, you can use SELinux to prevent the execution of malicious CGI
    scripts or PHP scripts. If you don't need for your server to run CGI or PHP scripts,
    you can disable them in SELinux.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web服务器上，您可以使用SELinux防止恶意CGI脚本或PHP脚本的执行。如果您的服务器不需要运行CGI或PHP脚本，您可以在SELinux中禁用它们。
- en: With older versions of Docker and without Mandatory Access Control, it was trivially
    easy for a normal user to break out of a Docker container and gain root-level
    access to the host machine. Although Docker security has since improved, SELinux
    is still a useful tool for hardening servers that run Docker containers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧版本的Docker中，没有强制访问控制，普通用户很容易就能打破Docker容器并获得对主机的root级访问权限。尽管Docker的安全性已经得到改善，但SELinux仍然是加固运行Docker容器的服务器的有用工具。
- en: So now, you're likely thinking that everyone would use such a great tool, right?
    Sadly, that's not the case. In its beginning, SELinux got a reputation for being
    difficult to work with, and many administrators would just disable it. In fact,
    a lot of tutorials you see on the web or on YouTube have *disable SELinux* as
    the first step. In this section, I'd like to show you that things have improved
    and that SELinux no longer deserves its bad reputation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能认为每个人都会使用这样一个伟大的工具，对吗？遗憾的是，情况并非如此。在开始阶段，SELinux因为难以使用而声名狼藉，许多管理员会选择禁用它。事实上，你在网上或YouTube上看到的很多教程都把*禁用SELinux*作为第一步。在本节中，我想向你展示事情已经改善，SELinux不再应该有坏名声。
- en: Setting security contexts for files and directories
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为文件和目录设置安全上下文
- en: 'Think of SELinux as a glorified labeling system. It adds labels, known as *security
    contexts*, to files and directories through extended file attributes. It also
    adds the same type of labels, known as domains, to system processes. To see these
    contexts and domains on your CentOS machines, use the `-Z` option with either
    `ls` or `ps`.  For example, files and directories in my own home directory would
    look as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 把SELinux想象成一个被吹捧的标签系统。它通过扩展文件属性向文件和目录添加标签，称为*安全上下文*。它还向系统进程添加相同类型的标签，称为域。要在你的CentOS机器上查看这些上下文和域，可以使用`ls`或`ps`的`-Z`选项。例如，我的家目录中的文件和目录如下所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Processes on my system would look something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我的系统上的进程看起来像这样：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s break this down. In the outputs of both the `ls -Z` and `ps -Z`
    commands, we have the following parts:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来分解一下。在`ls -Z`和`ps -Z`命令的输出中，我们有以下部分：
- en: '**The SELinux user**: In both cases, the SELinux user is the generic `unconfined_u`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELinux用户**：在这两种情况下，SELinux用户是通用的`unconfined_u`'
- en: '**The SELinux role**: In the `ls -Z` example, we see that the role is `object_r`,
    and in the `ps -Z` example it''s `unconfined_r`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELinux角色**：在`ls -Z`示例中，我们看到角色是`object_r`，在`ps -Z`示例中是`unconfined_r`'
- en: '**The type**: It''s `user_home_t` in the `ls -Z` output, and `unconfined_t`
    in the `ps -Z` output'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：在`ls -Z`输出中是`user_home_t`，在`ps -Z`输出中是`unconfined_t`'
- en: '**The sensitivity**: In the `ps -Z` output it''s `s0`. In the `ps -Z` output
    it''s `s0-s0`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感度**：在`ps -Z`输出中是`s0`。在`ps -Z`输出中是`s0-s0`'
- en: '**The category**: We don''t see a category in the `ls -Z` output, but we do
    see `c0.c1023` in the `ps -Z` output'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：在`ls -Z`输出中我们看不到类别，但在`ps -Z`输出中我们看到`c0.c1023`'
- en: Out of all of the preceding security context and security domain components,
    the only one that interests us now is the type. For the purposes of this chapter,
    we're only interested in covering what a normal Linux administrator would need
    to know to keep intruders from exploiting the system, and the type is the only
    one of these components that we need to use for that. All of the other components
    come into play when we set up advanced, security classification-based access control
    and role-based access control.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有先前的安全上下文和安全域组件中，我们现在只关心类型。在本章中，我们只关心一个正常的Linux管理员需要了解的内容，以防止入侵者利用系统，而类型是我们需要使用的这些组件中的唯一一个。当我们设置高级的基于安全分类的访问控制和基于角色的访问控制时，所有其他组件都会发挥作用。
- en: Okay, here's the somewhat over-simplified explanation of how this helps a Linux
    administrator maintain security. What we want is for system processes to only
    access objects that we allow them to access. (System processes include things
    like the web server daemon, the FTP daemon, the Samba daemon, and the Secure Shell
    daemon. Objects include things such as files, directories, and network ports.)
    To achieve this, we'll assign a *type* to all of our processes and all of our
    objects. We'll then create *policies* that define which process types can access
    which object types.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里是一个有些过于简化的解释，说明这如何帮助Linux管理员维护安全性。我们希望系统进程只能访问我们允许它们访问的对象。（系统进程包括诸如Web服务器守护程序、FTP守护程序、Samba守护程序和安全Shell守护程序等。对象包括文件、目录和网络端口等。）为了实现这一点，我们将为所有的进程和对象分配一个*类型*。然后我们将创建*策略*，定义哪些进程类型可以访问哪些对象类型。
- en: Fortunately, whenever you install any Red Hat-type distro, pretty much all of
    the hard work has already been done for you. Red Hat-type distros all come with
    SELinux already enabled and set up with the targeted policy. Think of this targeted
    policy as a somewhat relaxed policy, which allows a casual desktop user to sit
    down at the computer and actually conduct business without having to tweak any
    SELinux settings. But, if you're a server administrator, you may find yourself
    having to tweak this policy in order to allow server daemons to do what you need
    them to do.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，当你安装任何红帽类型的发行版时，几乎所有的艰苦工作都已经为你完成。红帽类型的发行版都已经默认启用了SELinux，并设置了针对的策略。把这个针对的策略想象成一个相对宽松的策略，允许普通桌面用户坐在电脑前进行业务操作，而不需要调整任何SELinux设置。但是，如果你是服务器管理员，你可能会发现自己需要调整这个策略，以允许服务器守护程序执行你需要它们执行的操作。
- en: The targeted policy, which comes installed by default, is what a normal Linux
    administrator will use in his or her day-to-day duties. If you look in the repositories
    of your CentOS virtual machine, you'll see that there are also several others,
    which we won't cover in this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 针对的策略，默认安装的策略是正常的Linux管理员在日常工作中会使用的。如果你查看你的CentOS虚拟机的存储库，你会发现还有其他几个，这些我们在本书中不会涉及。
- en: Installing the SELinux tools
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装SELinux工具
- en: 'For some bizarre reason that I''ll never understand, the tools that you need
    to administer SELinux don''t get installed by default, even though SELinux itself
    does. So, the first thing you''ll need to do on your CentOS virtual machine is
    to install them:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某种我永远无法理解的怪异原因，默认情况下不会安装您需要管理SELinux的工具，即使SELinux本身已经安装。因此，在您的CentOS虚拟机上，您需要做的第一件事是安装它们：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In a later portion of this chapter, we''ll be looking at how to use setroubleshoot
    to help diagnose SELinux problems. In order to have some cool error messages to
    look at when we get there, go ahead and install setroubleshoot now, and activate
    it by restarting the `auditd` daemon.  (There''s no setroubleshoot daemon because
    setroubleshoot is meant to be controlled by the `auditd` daemon.) We have the
    following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将看看如何使用setroubleshoot来帮助诊断SELinux问题。为了在那里查看一些很酷的错误消息，现在就安装setroubleshoot，并通过重新启动`auditd`守护程序来激活它。（没有setroubleshoot守护程序，因为setroubleshoot是由`auditd`守护程序控制的。）我们有以下代码：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One of the little systemd quirks that we have to deal with is that you can't
    stop or restart the `auditd` daemon with the normal `systemctl` command, as you're
    supposed to do when working with systemd daemons. However, the old-fashioned `service`
    command works. (And no, I don't know why that is.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须处理的一个小systemd怪癖是，当使用systemd守护程序时，你不能用正常的`systemctl`命令停止或重新启动`auditd`守护程序。然而，老式的`service`命令可以工作。（不，我不知道为什么。）
- en: Depending on the type of installation that you chose when installing CentOS,
    you might or might not already have setroubleshoot installed. To be sure, go ahead
    and run the command to install it. It won't hurt anything if setroubleshoot is
    already there.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您在安装CentOS时选择的安装类型，您可能已经安装了setroubleshoot，也可能没有。为了确保，继续运行命令来安装它。如果setroubleshoot已经存在，运行这个命令不会有任何问题。
- en: You now have what you need to get started.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了开始的所需。
- en: Creating web content files with SELinux enabled
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在启用SELinux的情况下创建Web内容文件
- en: 'Now, let''s look at what can happen if you have web content files that are
    set with the wrong SELinux type. First, we''ll install, enable, and start the
    Apache web server on our CentOS virtual machines. (Note that including the `--now`
    option allows us to enable and start a daemon all in one single step.) We have
    the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如果您的Web内容文件设置了错误的SELinux类型会发生什么。首先，我们将在我们的CentOS虚拟机上安装、启用和启动Apache Web服务器。（请注意，包括`--now`选项允许我们在一个步骤中启用和启动守护程序。）我们有以下代码：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you haven''t done so already, you''ll want to configure the firewall to
    allow access to the web server:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，您将希望配置防火墙以允许访问Web服务器：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we look at the SELinux information for the Apache processes, we''ll see
    this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看Apache进程的SELinux信息时，我们会看到这个：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As I said before, we're not interested in the user or the role. However, we
    are interested in the type, which in this case is `httpd_t`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我之前说的，我们对用户或角色不感兴趣。但是，我们对类型感兴趣，在这种情况下是`httpd_t`。
- en: 'On Red Hat-type systems, we would normally place web content files in the `/var/www/html`
    directory. Let''s look at the SELinux context for that `html` directory:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在红帽类型的系统上，我们通常会将Web内容文件放在`/var/www/html`目录中。让我们看看`html`目录的SELinux上下文：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The type is `httpd_sys_content`, so it stands to reason that the `httpd` daemon
    should be able to access this directory. It''s currently empty, so let''s `cd`
    into it and create a simple index file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类型是`httpd_sys_content`，所以`httpd`守护程序应该能够访问这个目录。目前它是空的，所以让我们`cd`进入它并创建一个简单的索引文件：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'I''ll put this into the file, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我会把这个放到文件中，如下所示：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Okay, as I said, it's simple, as my HTML hand-coding skills aren't what they
    used to be. But still, it serves our present purposes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，就像我说的，这很简单，因为我的HTML手工编码技能已经不如以前了。但是，它仍然满足我们当前的目的。
- en: 'Looking at the SELinux context, we see that the file has the same type as the
    `html` directory:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 查看SELinux上下文时，我们看到文件具有与`html`目录相同的类型：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I can now navigate to this page from the web browser of my trusty OpenSUSE
    workstation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以从我信任的OpenSUSE工作站的网络浏览器导航到这个页面：
- en: '![](img/07aefddb-cadc-4600-a7f2-6ab2909e6b16.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07aefddb-cadc-4600-a7f2-6ab2909e6b16.png)'
- en: 'Now though, let''s see what happens if I decide to create content files in
    my own home directory and then move them to the `html` directory. First, let''s
    see what the SELinux context is for my new file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如果我决定在自己的家目录中创建内容文件，然后将它们移动到`html`目录中会发生什么。首先，让我们看看我的新文件的SELinux上下文是什么：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The context type is now `user_home_t`, which is a sure-fire indicator that
    I created this in my home directory. I''ll now move the file to the `html` directory,
    overwriting the old file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文类型现在是`user_home_t`，这是一个确切的指示，表明我是在我的家目录中创建的。我现在将文件移动到`html`目录，覆盖旧文件：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Even though I moved the file over to the `/var/www/html` directory, the SELinux
    type is still associated with users'' home directories. Now, I''ll go to the browser
    of my host machine to refresh the page:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我把文件移动到`/var/www/html`目录，SELinux类型仍然与用户的家目录相关联。现在，我将转到我的主机机器的浏览器上刷新页面：
- en: '![](img/09ce2e91-df19-4295-a74d-a3414d56fa64.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09ce2e91-df19-4295-a74d-a3414d56fa64.png)'
- en: So, I have a slight bit of a problem. The type that's assigned to my file doesn't
    match with the type of the httpd daemon processes, so SELinux doesn't allow the
    `httpd` processes to access the file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我有一个小问题。分配给我的文件的类型与httpd守护程序进程的类型不匹配，因此SELinux不允许`httpd`进程访问该文件。
- en: Had I copied the file to the `html` directory instead of moving it, the SELinux
    context would have changed to match that of the destination directory.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我将文件复制到`html`目录而不是移动它，SELinux上下文将会改变以匹配目标目录的上下文。
- en: Fixing an incorrect SELinux context
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复不正确的SELinux上下文
- en: 'Okay, so I have this web content file that nobody can access, and I really
    don''t feel up to creating a new one. So, what do I do? Actually, we have three
    different utilities for fixing this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所以我有这个没有人可以访问的Web内容文件，我真的不想创建一个新的。那我该怎么办呢？实际上，我们有三种不同的实用程序来解决这个问题：
- en: '`chcon`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chcon`'
- en: '`restorecon`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restorecon`'
- en: '`semanage`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`semanage`'
- en: Using chcon
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用chcon
- en: 'There are two ways to use `chcon` to fix an incorrect SELinux type on a file
    or directory.  The first is to just manually specify the proper type:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用`chcon`来修复文件或目录上的不正确的SELinux类型。第一种方法是手动指定正确的类型：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can use `chcon` to change any part of the context, but as I keep saying,
    we're only interested in the type, which gets changed with the `-t` option. You
    can see in the `ls -Z` output that the command was successful.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`chcon`来更改上下文的任何部分，但正如我一直在说的，我们只对类型感兴趣，这可以通过`-t`选项进行更改。您可以在`ls -Z`输出中看到命令成功执行了。
- en: 'The other way to use `chcon` is to reference a file that has the proper context. 
    For demo purposes, I changed the `index.html` file back to the home directory
    type and have created a new file within the `/var/www/html` directory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chcon`的另一种方法是引用具有正确上下文的文件。出于演示目的，我将`index.html`文件更改回了主目录类型，并在`/var/www/html`目录中创建了一个新文件：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, any files that I create within this directory will automatically
    have the proper SELinux context settings. Now, let''s use that new file as a reference
    in order to set the proper context on the `index.html` file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我在此目录中创建的任何文件都将自动具有正确的SELinux上下文设置。现在，让我们使用该新文件作为参考，以便在`index.html`文件上设置正确的上下文：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, I used the `--reference` option and specified the file that I wanted to
    use as a reference. The file that I wanted to change is listed at the end of the
    command.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我使用了`--reference`选项，并指定了要用作参考的文件。要更改的文件列在命令的末尾。
- en: Now, that's all good, but I want to find an easier way that doesn't require
    quite as much typing. After all, I am an old man, and I don't want to overexert
    myself. So, let's take a look at the `restorecon` utility.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这一切都很好，但我想找到一种更简单的方法，不需要输入那么多。毕竟，我是个老人，不想过度劳累自己。因此，让我们来看看`restorecon`实用程序。
- en: Using restorecon
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用restorecon
- en: 'Using `restorecon` is easy. Just type `restorecon`, followed by the name of
    the file that you need to change. Once again, I''ve changed the context of the
    `index.html` file back to the home directory type. This time though, I''m using
    `restorecon` to set the correct type:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`restorecon`很容易。只需输入`restorecon`，然后输入需要更改的文件的名称。再次，我将`index.html`文件的上下文更改回了主目录类型。不过这次，我使用`restorecon`来设置正确的类型：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And, that's all there is to it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。
- en: 'You can also use `chcon` and `restorecon` to change the context of an entire
    directory and its contents. For either one, just use the `-R` option. For example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`chcon`和`restorecon`来更改整个目录及其内容的上下文。对于任何一个，只需使用`-R`选项。例如：
- en: '`sudo chcon -R -t httpd_sys_content_t /var/www/html/`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo chcon -R -t httpd_sys_content_t /var/www/html/`'
- en: '`sudo restorecon -R /var/www/html/`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo restorecon -R /var/www/html/`'
- en: (Remember:  `-R` stands for recursive.)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: （记住：`-R`代表递归。）
- en: 'There''s still one last thing to take care of, even though it isn''t really
    affecting our ability to access this file. That is, I need to change ownership
    of the file to the Apache user:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这并不会影响我们访问此文件的能力，但仍然有最后一件事要处理。也就是说，我需要将文件的所有权更改为Apache用户：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using semanage
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用semanage
- en: In the scenario I've just presented, either `chcon` or `restorecon` will suit
    your needs just fine. The active SELinux policy mandates what the security contexts
    in certain directories are supposed to look like. As long as you're using `chcon`
    or `restorecon` within directories that are defined in the active SELinux policy,
    you're good. But let's say that you've created a directory elsewhere that you
    want to use for serving out web content files. You would need to set the `httpd_sys_content_t`
    type on that directory and all of the files within it. However, if you use `chcon`
    or `restorecon` for that, the change won't survive a system reboot. To make the
    change permanent, you'll need to use `semanage`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我刚刚提到的情况下，无论是`chcon`还是`restorecon`都可以满足您的需求。活动的SELinux策略规定了某些目录中的安全上下文应该是什么样子。只要您在活动的SELinux策略中定义的目录中使用`chcon`或`restorecon`，就没问题。但是假设您在其他地方创建了一个目录，想要用来提供网页内容文件。您需要在该目录及其中的所有文件上设置`httpd_sys_content_t`类型。但是，如果您使用`chcon`或`restorecon`进行操作，更改将无法在系统重新启动后保留。要使更改永久生效，您需要使用`semanage`。
- en: 'For some strange reason, let''s say that I want to serve web content out of
    a directory that I''ve created in the `/home` directory:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 出于某种奇怪的原因，假设我想要从`/home`目录中创建的目录中提供网页内容：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Because I had to use my powers of sudo to create the directory here, it''s
    associated with the root user''s `home_root_t` type, instead of the normal `user_home_dir_t`
    type. Any files that I create within this directory will have the same type:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我不得不使用我的sudo权限在这里创建目录，它与root用户的`home_root_t`类型相关联，而不是正常的`user_home_dir_t`类型。我在此目录中创建的任何文件都将具有相同的类型：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next step is to use `semanage` to add a permanent mapping of this directory
    and the `httpd_sys_content_t` type to the active policy''s context list:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用`semanage`将此目录和`httpd_sys_content_t`类型的永久映射添加到活动策略的上下文列表中：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Okay, here''s the breakdown of the `semanage` command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是`semanage`命令的详细说明：
- en: '`fcontext`: Because `semanage` has many purposes, we have to specify that we
    want to work with a file context.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fcontext`：因为`semanage`有许多用途，我们必须指定我们要处理文件上下文。'
- en: '`-a`: This specifies that we''re adding a new record to the context list for
    the active SELinux policy.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`：这指定我们要为活动的SELinux策略的上下文列表添加新记录。'
- en: '`-t`: This specifies the type that we want to map to the new directory. In
    this case, we''re creating a new mapping with the `httpd_sys_content` type.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`：这指定了我们要映射到新目录的类型。在这种情况下，我们正在使用`httpd_sys_content`类型创建新映射。'
- en: '`/home/webdir(/.*)?`: This bit of gibberish is what''s known as a *regular
    expression*. I can''t go into the nitty-gritty details of regular expressions
    here, so suffice it to say that *regular expressions* is a language that we use
    to match text patterns. (And yes, I did mean to say *is* instead of *are*, since
    regular expressions is the name of the overall language.) In this case, I had
    to use this particular regular expression in order to make this `semanage` command
    recursive because `semanage` doesn''t have a `-R` option switch. With this regular
    expression, I''m saying that I want for anything that gets created in this directory
    to have the same SELinux type as the directory itself.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/webdir(/.*)?`：这一堆胡言乱语就是所谓的*正则表达式*。我不能在这里详细介绍正则表达式的细节，所以简单地说*正则表达式*是一种我们用来匹配文本模式的语言。（是的，我故意说*是*而不是*are*，因为正则表达式是整体语言的名称。）在这种情况下，我必须使用这个特定的正则表达式来使这个`semanage`命令递归，因为`semanage`没有`-R`选项开关。通过这个正则表达式，我是在说我希望在这个目录中创建的任何东西都具有与目录本身相同的SELinux类型。'
- en: 'The final step is to do a `restorecon -R` on this directory to ensure that
    the proper labels have been set:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是对该目录执行`restorecon -R`，以确保已设置正确的标签：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Yeah, I know. You're looking at this and saying, "*But, this 'ls -Zd' output
    looks the same as it did after you did the semanage command.*" And, you're right.
    After running the `semanage` command, the type seems to be set correctly. But
    the `semanage-fcontext` man page says to run `restorecon` anyway, so I did.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我知道。你正在看着这个说，“*但是，这个'ls -Zd'输出看起来和你执行semanage命令之后一样*。”而且，你是对的。在运行`semanage`命令之后，类型似乎已经正确设置。但是`semanage-fcontext`手册上说无论如何都要运行`restorecon`，所以我就这么做了。
- en: For more information on how to use `semanage` to manage security contexts, see
    the man page by entering `man semanage-fcontext`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用`semanage`管理安全上下文的更多信息，请参阅手册页，输入`man semanage-fcontext`。
- en: Hands-on lab – SELinux type enforcement
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践实验室 - SELinux类型强制执行
- en: In this lab, you'll install the Apache web server and the appropriate SELinux
    tools. You'll then view the effects of having the wrong SELinux type assigned
    to a web content file.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验室中，你将安装Apache web服务器和适当的SELinux工具。然后，你将查看将错误的SELinux类型分配给web内容文件的影响。
- en: 'Install Apache, along with all the required SELinux tools:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Apache，以及所有必需的SELinux工具：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Activate setroubleshoot by restarting the `auditd` service:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过重新启动`auditd`服务来激活setroubleshoot：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Enable and start the Apache service and open port `80` on the firewall:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用并启动Apache服务，并在防火墙上打开端口`80`：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `/var/www/html` directory, create an `index.html` file with the following
    contents:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/var/www/html`目录中，创建一个带有以下内容的`index.html`文件：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'View the SELinux information about the `index.html` file:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`index.html`文件的SELinux信息：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In your host machine's web browser, navigate to the IP address of the CentOS
    virtual machine. You should be able to view the page.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机机器的web浏览器中，导航到CentOS虚拟机的IP地址。你应该能够查看页面。
- en: 'Induce an SELinux violation by changing the type of the `index.html` file to
    something that''s incorrect:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`index.html`文件的类型更改为不正确的内容来引发SELinux违规：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Go back to your host machine's web browser, and reload the document. You should
    now see a Forbidden message.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到主机的web浏览器，重新加载文档。现在你应该看到一个Forbidden消息。
- en: 'Use `restorecon` to change the file back to its correct type:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`restorecon`将文件更改回正确的类型：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Reload the page in your host machine's web browser. You should now be able to
    view the page.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机机器的web浏览器中重新加载页面。现在你应该能够查看页面了。
- en: Troubleshooting with setroubleshoot
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用setroubleshoot进行故障排除
- en: So, you're now scratching your head and saying, "*When I can't access something
    that I should be able to, how do I know that it's an SELinux problem?*" Ah, I'm
    glad you asked.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你现在正在挠头说，“*当我无法访问我应该能够访问的东西时，我怎么知道这是一个SELinux问题呢？*”啊，我很高兴你问到了。
- en: Viewing setroubleshoot messages
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看setroubleshoot消息
- en: 'Whenever something happens that violates an SELinux rule, it gets logged in
    the `/var/log/audit/audit.log` file. Tools are available that can let you directly
    read that log, but to diagnose SELinux problems, it''s way better to use setroubleshoot.
    The beauty of setroubleshoot is that it takes the cryptic, hard-to-interpret SELinux
    messages from the `audit.log` file and translates them into plain, natural language.
    The messages that it sends to the `/var/log/messages` file even contain suggestions
    about how to fix the problem. To show how this works, let''s go back to our problem
    where a file in the `/var/www/html` directory had been assigned the wrong SELinux
    type. Of course, we knew right away what the problem was because there was only
    one file in that directory and a simple `ls -Z` showed the problem with it. However,
    let''s ignore that for the moment and say that we didn''t know what the problem
    was. By opening the `/var/log/messages` file in `less` and searching for `sealert`,
    we''ll find this message:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每当发生违反SELinux规则的事件时，它都会被记录在`/var/log/audit/audit.log`文件中。有工具可以让你直接读取该日志，但是为了诊断SELinux问题，最好使用setroubleshoot。setroubleshoot的美妙之处在于它将`audit.log`文件中晦涩难懂、难以解释的SELinux消息翻译成通俗易懂的语言。它发送到`/var/log/messages`文件的消息甚至包含了如何解决问题的建议。为了展示这是如何工作的，让我们回到我们的问题，即`/var/www/html`目录中的文件被分配了错误的SELinux类型。当然，我们立刻就知道问题所在，因为那个目录中只有一个文件，简单的`ls
    -Z`就显示了它的问题。然而，暂且不管这个问题，假设我们不知道问题所在。通过在`less`中打开`/var/log/messages`文件并搜索`sealert`，我们会找到这条消息：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The first line of this message tells us what the problem is. It's saying that
    SELinux is preventing us from accessing the `/var/www/html/index.html` file because
    it's set with the wrong type. It then gives us several suggestions on how to fix
    the problem, with the first one being to run the `restorecon` command, as I've
    already shown you how to do.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息的第一行告诉我们问题所在。它说SELinux正在阻止我们访问`/var/www/html/index.html`文件，因为它的类型设置错误。然后给了我们几个修复问题的建议，第一个是运行`restorecon`命令，就像我已经告诉你怎么做了一样。
- en: A good rule-of-thumb to remember when reading these setroubleshoot messages
    is that the first suggestion in the message is normally the one that will fix
    the problem.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这些setroubleshoot消息时要记住的一个好的经验法则是，消息中的第一个建议通常是可以解决问题的。
- en: Using the graphical setroubleshoot utility
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图形setroubleshoot实用程序
- en: 'So far, I''ve only talked about using setroubleshoot on text-mode servers.
    After all, it''s very common to see Linux servers running in text-mode, so all
    of us Linux folk have to be text-mode warriors. But on desktop systems or on servers
    that have a desktop interface installed, there is a graphical utility that will
    automatically alert you when setroubleshoot detects a problem:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只谈到了在文本模式服务器上使用setroubleshoot。毕竟，很常见看到运行在文本模式下的Linux服务器，所以我们所有的Linux用户都必须成为文本模式的战士。但是在桌面系统或安装了桌面界面的服务器上，有一个图形实用程序，当setroubleshoot检测到问题时会自动提醒你：
- en: '![](img/f2530e17-4614-4b86-a18b-1da0df26283a.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2530e17-4614-4b86-a18b-1da0df26283a.png)'
- en: 'Click on that alert icon, and you''ll see this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 点击那个警报图标，你会看到这个：
- en: '![](img/656400bc-80a6-446d-b273-812c6b3b8a6d.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/656400bc-80a6-446d-b273-812c6b3b8a6d.png)'
- en: 'Click the Troubleshoot button, and you''ll see your list of suggestions for
    how to fix the problem:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“故障排除”按钮，你将看到如何解决问题的建议列表：
- en: '![](img/504f1e45-c038-4b24-b932-dc96eec50a48.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/504f1e45-c038-4b24-b932-dc96eec50a48.png)'
- en: As it is often the case with GUI thingies, this is mostly self-explanatory,
    so you shouldn't have any problem with figuring it out.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这些GUI工具都很容易理解，所以你不应该在理解上遇到任何问题。
- en: Troubleshooting in permissive mode
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在宽容模式下进行故障排除
- en: If you're dealing with a simple problem like the one I've just shown you, then
    you can probably assume that you're safe in doing what the first suggestion in
    the setroubleshoot message tells you to do. But there will be times when things
    get a bit more complex, where you might have more than one problem. For times
    like these, you need to use *permissive mode*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到像我刚刚展示的这样简单的问题，那么你可能可以假设setroubleshoot消息中的第一个建议告诉你的是安全的。但是有时候会出现更复杂的情况，可能会有多个问题。在这种情况下，你需要使用*宽容模式*。
- en: When you first install your Red Hat or CentOS system, SELinux is in *enforcing
    mode*, which is the default. This means that SELinux will actually stop actions
    that are in violation of the active SELinux policy. This also means that if you
    have multiple SELinux problems when you try to perform a certain action, SELinux
    will stop the action from taking place after the first violation occurs. When
    it happens, SELinux won't even see the remaining problems, and they won't show
    up in the `messages` log file. If you try to troubleshoot these types of problems
    while in enforcing mode, you'll be like the proverbial dog who chases its own
    tail.  You'll go round and round and will accomplish nothing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次安装Red Hat或CentOS系统时，SELinux处于*强制模式*，这是默认设置。这意味着SELinux实际上会阻止违反活动SELinux策略的操作。这也意味着，如果在尝试执行某个操作时出现多个SELinux问题，SELinux将在第一次违规后停止该操作。当发生这种情况时，SELinux甚至不会看到剩下的问题，并且它们不会出现在`messages`日志文件中。如果你在强制模式下尝试解决这些类型的问题，你就像是追逐自己尾巴的狗一样。你会一直转圈，却一事无成。
- en: In permissive mode, SELinux allows actions that violate policy to occur, but
    it will log them.  By switching to permissive mode and doing something to induce
    the problem that you were seeing, the prohibited actions will take place, but
    setroubleshoot will log all of them in the `messages` file. This way, you'll get
    a better view of what you need to do to get things working properly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在宽容模式下，SELinux允许违反策略的操作发生，但会记录它们。切换到宽容模式并做一些引发你之前看到的问题的操作，被禁止的操作将发生，但setroubleshoot会在`messages`文件中记录所有这些操作。这样，你就能更好地了解需要做什么来使事情正常运行。
- en: 'First, let''s use `getenforce` to verify what our current mode is:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用`getenforce`来验证我们当前的模式是什么：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, let''s temporarily place the system into permissive mode:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们临时将系统置于宽容模式：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When I say *temporarily*, I mean that this will only last until you do a system
    reboot. After a reboot, you''ll be back in enforcing mode. Also, note that a `0`
    after the `setenforce` denotes that I''m setting permissive mode. To get back
    to enforcing mode after you''re done with troubleshooting, replace the `0` with
    a `1`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说“临时”时，我的意思是这只会持续到系统重启。重启后，你将回到强制模式。另外，请注意，在`setenforce`后的`0`表示我正在设置宽容模式。在完成故障排除后返回强制模式，将`0`替换为`1`：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We're now back in enforcing mode.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在又回到了强制模式。
- en: At times, you may need to make permissive mode persist after a system reboot.
    An example of this would be if you ever have to deal with a system that has had
    SELinux disabled for a long period of time. In a case like that, you wouldn't
    want to just put SELinux into enforcing mode and reboot. If you try that, it will
    take forever for the system to properly create the file and directory labels that
    make SELinux work, and the system might lock up before it's done. By placing the
    system into permissive mode first, you'll avoid having the system lock up, although
    it will still take a long time for the relabeling process to complete.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能需要在系统重启后使宽容模式持久化。一个例子是，如果你需要处理一个长时间禁用SELinux的系统。在这种情况下，你不应该只是将SELinux设置为强制模式然后重启。如果你这样做，系统将需要很长时间才能正确创建使SELinux工作的文件和目录标签，而在完成之前系统可能会锁死。首先将系统置于宽容模式，可以避免系统锁死，尽管重新标记过程仍然需要很长时间才能完成。
- en: 'To make permissive mode persistent across system reboots, you''ll edit the
    `selinux` file in the `/etc/sysconfig` directory. Here''s what it looks like by
    default:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要使宽容模式在系统重启后持久化，你需要编辑`/etc/sysconfig`目录中的`selinux`文件。默认情况下，它是这样的：
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The two important things you see here are that SELinux is in enforcing mode,
    and that it''s using the targeted policy. To switch to permissive mode, just change
    the `SELINUX=` line, and save the file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里看到的两个重要信息是SELinux处于强制模式，并且正在使用目标策略。要切换到宽容模式，只需更改`SELINUX=`行，并保存文件：
- en: '[PRE34]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `sestatus` utility shows us lots of cool information about what''s going
    on with SELinux:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`sestatus`实用程序向我们展示了关于SELinux正在发生的许多有趣信息：'
- en: '[PRE35]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The two items that interest us here are current mode and mode from a configuration
    file. By changing the configuration file to permissive, we haven't changed the
    current running mode. So, we're still in enforcing mode. The switch to permissive
    won't happen until I either reboot this machine or until I manually switch by
    issuing a `sudo setenforce 0` command. And of course, you don't want to stay in
    permissive mode forever. As soon as you no longer need permissive mode, change
    the configuration file back to enforcing and do a `sudo setenforce 1` to change
    the running mode.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们感兴趣的两个项目是当前模式和配置文件中的模式。通过将配置文件更改为宽松模式，我们并没有改变当前运行模式。所以，我们仍然处于强制模式。切换到宽松模式要么是在我重新启动这台机器之前，要么是通过发出`sudo
    setenforce 0`命令手动切换。当然，你不希望永远保持在宽松模式。一旦你不再需要宽松模式，将配置文件改回强制模式，并执行`sudo setenforce
    1`来改变运行模式。
- en: Working with SELinux policies
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理SELinux策略
- en: So far, all we've looked at is what happens when we have an incorrect SELinux
    type set on a file and what to do to set the correct type. Another problem we
    may have would come about if we need to allow an action that is prohibited by
    the active SELinux policy.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了当文件上设置了不正确的SELinux类型时会发生什么，以及如何设置正确的类型。我们可能会遇到的另一个问题是，我们需要允许一个被活动SELinux策略禁止的操作。
- en: Viewing the Booleans
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看布尔值
- en: 'Booleans are part of what makes up an SELinux policy, and each Boolean represents
    a binary choice. In SELinux policies, a Boolean either allows something or it
    prohibits something. To see all of the Booleans on your system, run the `getsebool
    -a` command. (It''s a long list, so I''ll only show partial output here.):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值是SELinux策略的一部分，每个布尔值代表一个二进制选择。在SELinux策略中，一个布尔值要么允许某事，要么禁止某事。要查看系统上的所有布尔值，请运行`getsebool
    -a`命令。（这是一个很长的列表，所以我只会在这里显示部分输出。）：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To view more than one Boolean, the `-a` switch is mandatory. If you just happen
    to know the name of the Boolean that you want to see, leave the `-a` out and list
    the Boolean. In keeping with the Apache web server theme that we''ve had going,
    let''s see whether we''re allowing Apache to access files in users'' home directories:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看多个布尔值，`-a`开关是必需的。如果你碰巧知道你想要查看的布尔值的名称，可以不加`-a`，直接列出布尔值。继续我们之前讨论的Apache Web服务器主题，让我们看看是否允许Apache访问用户的主目录中的文件：
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The fact that this Boolean is `off` means that the Apache server daemon isn't
    allowed to access any content within the users' home directories. This is an important
    protection, and you really don't want to change it. Instead, just put web content
    files elsewhere so that you don't have to change this Boolean.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布尔值是`off`，这意味着Apache服务器守护程序不被允许访问用户主目录中的任何内容。这是一个重要的保护，你真的不想改变它。相反，只需将Web内容文件放在其他地方，这样你就不必改变这个布尔值。
- en: 'Most likely, you''ll rarely want to look at the entire list, and you likely
    won''t know the name of the specific Boolean that you want to see. Rather, you''ll
    probably want to filter the output through `grep` in order to look at just certain
    things. For example, to see all of the Booleans that affect a web server, follow
    this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，你很少想要查看整个列表，你可能也不知道你想要查看的具体布尔值的名称。相反，你可能想通过`grep`筛选输出，以便只查看某些内容。例如，要查看影响Web服务器的所有布尔值，请按照以下步骤：
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It's also a rather long list, but scroll down a ways, and you'll find the Boolean
    that you seek.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个相当长的列表，但向下滚动一段时间，你会找到你要找的布尔值。
- en: Configuring the Booleans
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置布尔值
- en: 'Realistically, you''ll likely never have reason to allow users to serve web
    content out of their home directories. It''s much more probable that you''ll set
    up something like a Samba server, which would allow users on Windows machines
    to use their graphical Windows Explorer to access their home directories on Linux
    servers. But if you set up a Samba server and don''t do anything with SELinux,
    users will be complaining about how they don''t see any of their files in their
    home directories of the Samba server. Because you''re the proactive type and you
    want to avoid the pain of listening to complaining users, you''ll surely just
    go ahead and configure SELinux to allow the Samba daemon to access users'' home
    directories. You might not know the exact name of the Boolean, but you can find
    it easily enough, as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可能永远不会有理由允许用户从他们的主目录中提供Web内容。更有可能的是，你会设置类似Samba服务器的东西，这将允许Windows机器上的用户使用他们的图形Windows资源管理器访问Linux服务器上的主目录。但是，如果你设置了Samba服务器并且没有对SELinux做任何操作，用户将抱怨他们在Samba服务器的主目录中看不到任何文件。因为你是积极主动的类型，你不想听到用户的抱怨，你肯定会配置SELinux以允许Samba守护程序访问用户的主目录。你可能不知道具体的布尔值名称，但你可以很容易地找到它，如下所示：
- en: '[PRE39]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Okay, you knew that the Boolean name probably had the word `home` in it, so
    you filtered for that word. About half-way down the list, you see `samba_enable_home_dirs
    --> off`.  You''ll need to change this to `on` to let users access their home
    directories from their Windows machines:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你知道布尔值的名称可能有`home`这个词，所以你筛选了这个词。在列表的中间位置，你会看到`samba_enable_home_dirs -->
    off`。你需要将其更改为`on`，以便让用户从他们的Windows机器访问他们的主目录：
- en: '[PRE40]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Users can now access their home directories as they should be able to, but
    only until you do a system reboot. Without the `-P` option, any changes you make
    with `setsebool` will only be temporary. So, let''s make the change permanent
    with `-P`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以访问他们应该能够访问的主目录，但只有在系统重新启动之前。没有`-P`选项，你用`setsebool`做的任何更改都只是临时的。所以，让我们使用`-P`使更改永久生效：
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Congratulations, you've just made your first change to SELinux policy.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你刚刚对SELinux策略进行了第一次更改。
- en: Protecting your web server
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护你的Web服务器
- en: Look at the output of the `getsebool -a | grep 'http'` command again, and you'll
    see that most of the httpd-related Booleans are turned off by default, with only
    a few turned on. There are two of them that you'll commonly need to turn on when
    setting up a web server.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看`getsebool -a | grep 'http'`命令的输出，您会发现大多数与httpd相关的布尔值默认处于关闭状态，只有少数处于打开状态。在设置Web服务器时，有两个布尔值是您通常需要打开的。
- en: 'If you ever need to set up a website with some sort of PHP-based content management
    system, such as Joomla or Wordpress, you may have to turn on the `httpd_unified`
    Boolean. With this Boolean turned off, the Apache web server won''t be able to
    interact properly with all of the components of the PHP engine:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要设置一个带有某种基于PHP的内容管理系统的网站，例如Joomla或Wordpress，您可能需要打开`httpd_unified`布尔值。如果关闭此布尔值，Apache
    Web服务器将无法与PHP引擎的所有组件正确交互：
- en: '[PRE42]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The other Boolean that you''ll commonly need to turn on is the `httpd_can_sendmail`
    Boolean. If you ever need for a website to send mail out through a form or if
    you need to set up a mail server with a web-based frontend, you''ll definitely
    need to set this to `on`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常需要打开的另一个布尔值是`httpd_can_sendmail`布尔值。如果您需要网站通过表单发送邮件，或者需要设置带有基于Web的前端的邮件服务器，那么您肯定需要将其设置为`on`：
- en: '[PRE43]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'On the other hand, there are some Booleans that are turned on by default, and
    you might want to consider whether you really need them turned on. For example,
    allowing CGI scripts to run on a web server does represent a potential security
    risk. If an intruder were to somehow upload a malicious CGI script to the server
    and run it, much damage could occur as a result. Yet, for some bizarre reason,
    the default SELinux policy allows CGI scripts to run. If you''re absolutely certain
    that nobody who hosts websites on your server will ever need to run CGI scripts,
    you might want to consider turning this Boolean off:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，默认情况下有一些布尔值是打开的，您可能需要考虑是否真的需要打开它们。例如，允许在Web服务器上运行CGI脚本确实代表潜在的安全风险。如果入侵者以某种方式上传了恶意的CGI脚本到服务器并运行它，可能会造成很大的损害。然而，出于某种奇怪的原因，默认的SELinux策略允许运行CGI脚本。如果您绝对确定在您的服务器上托管网站的人永远不需要运行CGI脚本，您可能需要考虑关闭此布尔值：
- en: '[PRE44]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Protecting network ports
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护网络端口
- en: Each network daemon that's running on your system has a specific network port
    or set of network ports assigned to it, on which it will listen.  The `/etc/services`
    file contains the list of common daemons and their associated network ports, but
    it doesn't prevent someone from configuring a daemon to listen on some non-standard
    port. So, without some mechanism to prevent it, some sneaky intruder could potentially
    plant some sort of malware that would cause a daemon to listen on a non-standard
    port, possibly listening for commands from its master.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上运行的每个网络守护程序都有一个特定的网络端口或一组网络端口分配给它，它将在这些端口上监听。`/etc/services`文件包含常见守护程序及其关联的网络端口列表，但它不能阻止某人配置守护程序监听某些非标准端口。因此，如果没有一些机制来阻止它，一些狡猾的入侵者可能会植入某种恶意软件，导致守护程序监听非标准端口，可能会监听来自其主机的命令。
- en: 'SELinux protects against this sort of malicious activity by only allowing daemons
    to listen on certain ports. Use `semanage` to look at the list of allowed ports:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux通过只允许守护程序监听某些端口来防止此类恶意活动。使用`semanage`查看允许端口的列表：
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This is yet another of those very long lists, so I''m only showing partial
    output. However, let''s narrow things down a bit. Let''s say that I only want
    to look at the list of ports on which the Apache web server can listen. For this,
    I''ll use my good friend, `grep`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这又是一个非常长的列表，所以我只显示部分输出。不过，让我们缩小范围。假设我只想查看Apache Web服务器可以监听的端口列表。为此，我将使用我的好朋友`grep`：
- en: '[PRE46]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Several `http` items come up, but I'm only interested in the `http_port_t` item
    because it's the one that affects normal web server operation. We see here that
    SELinux will allow Apache to listen on ports `80`, `81`, `443`, `488`, `8008`,
    `8009`, `8443`, and `9000`. As the Apache server is the most likely daemon for
    which you'd ever have a legitimate reason for adding a non-standard port, let's
    demo with it.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个`http`项目，但我只对`http_port_t`项目感兴趣，因为它会影响正常的Web服务器操作。我们在这里看到SELinux将允许Apache监听端口`80`，`81`，`443`，`488`，`8008`，`8009`，`8443`和`9000`。由于Apache服务器是您可能有合法理由添加非标准端口的最有可能的守护程序，让我们以此为例。
- en: 'First, let''s go into the `/etc/httpd/conf/httpd.conf` file and look at the
    ports on which Apache is currently listening. Search for `Listen`, and you''ll
    see the following line:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们进入`/etc/httpd/conf/httpd.conf`文件，并查看Apache当前正在监听的端口。搜索`Listen`，您会看到以下行：
- en: '[PRE47]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'I don''t have the SSL module installed on this machine, but if I did, I would
    have an `ssl.conf` file in the `/etc/httpd/conf.d` directory with the following
    line:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这台机器上没有安装SSL模块，但如果我安装了，我将在`/etc/httpd/conf.d`目录中有一个`ssl.conf`文件，其中包含以下行：
- en: '[PRE48]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'So for normal, non-encrypted website connections, the default configuration
    only has Apache listening on port `80`. For secure, encrypted website connections,
    Apache listens on port `443`. Now, let''s go into the `httpd.conf` file and change
    `Listen 80` to a port number that SELinux doesn''t allow. For example, port `82`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于正常的非加密网站连接，默认配置只有Apache监听端口`80`。对于安全的加密网站连接，Apache监听端口`443`。现在，让我们进入`httpd.conf`文件，并将`Listen
    80`更改为SELinux不允许的端口号。例如，端口`82`：
- en: '[PRE49]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'After saving the file, I''ll restart Apache to read in the new configuration:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，我将重新启动Apache以读取新的配置：
- en: '[PRE50]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Yes, I have a problem. I''ll look in the `/var/log/messages` file to see if
    setroubleshoot gives me a clue:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我有问题。我将查看`/var/log/messages`文件，看看setroubleshoot是否给了我一些线索：
- en: '[PRE51]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The problem that SELinux is preventing `httpd` from binding to port `82` is
    defined in the first line of the message. The first suggestion we see for fixing
    this is to use `semanage` to add the port to the list of allowed ports. So, let''s
    do that and look at the list of Apache ports:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux阻止`httpd`绑定到端口`82`的问题在消息的第一行中定义。我们看到的第一个修复建议是使用`semanage`将端口添加到允许端口列表中。因此，让我们这样做，并查看Apache端口列表：
- en: '[PRE52]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: It's not clear in the setroubleshoot message, but you need to specify the port
    number that you want to add after the `port -a`.  The `-t http_port_t` specifies
    the type for which you want to add the port, and the `-p tcp` specifies that you
    want to use the TCP protocol.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在setroubleshoot消息中并不清楚，但您需要在`port -a`之后指定要添加的端口号。`-t http_port_t`指定要添加端口的类型，`-p
    tcp`指定要使用TCP协议。
- en: 'Now, for the moment of truth.  Will the Apache daemon start this time? Let''s
    see:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，真相即将揭晓。Apache守护程序这次会启动吗？让我们看看：
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'It works, and we have achieved coolness. But now, I''ve decided that I no longer
    need this oddball port. Deleting it is just as easy as adding it:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 它起作用了，我们已经实现了酷炫。但是现在，我决定不再需要这个古怪的端口。删除它就像添加它一样容易：
- en: '[PRE54]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: All I had to do was to replace the `port -a` with `port -d`.  And of course,
    I still need to go into the `/etc/httpd/conf/httpd.conf` file to change `Listen
    82` back to `Listen 80`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我所要做的就是用`port -d`替换`port -a`。当然，我还需要进入`/etc/httpd/conf/httpd.conf`文件，将`Listen
    82`改回`Listen 80`。
- en: Creating custom policy modules
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义策略模块
- en: Sometimes, you'll run into a problem that you can't fix by either changing the
    type or by setting a Boolean. In times like these, you'll need to create a custom
    policy module, and you'll use the `audit2allow` utility to do that.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您会遇到无法通过更改类型或设置布尔值来解决的问题。在这种情况下，您需要创建一个自定义策略模块，并使用`audit2allow`实用程序来执行此操作。
- en: 'Here''s a screenshot of a problem I had several years ago, when I was helping
    a client set up a Postfix mail server on CentOS 7:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是几年前我遇到的一个问题的屏幕截图，当时我正在帮助客户在CentOS 7上设置Postfix邮件服务器：
- en: '![](img/55240bb0-a151-4c3c-9506-f742ee4855b8.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55240bb0-a151-4c3c-9506-f742ee4855b8.png)'
- en: 'So, for some strange reason that I never understood, SELinux wouldn''t allow
    Dovecot, the Mail Delivery Agent component of the mail server, to read its own
    `dict` file. There''s no Boolean to change and there wasn''t a type problem, so
    setroubleshoot suggested that I create a custom policy module. It''s easy enough
    to do, but you do need to be aware that this won''t work with sudo on your normal
    user account. This is one of those rare times when you''ll just have to go to
    the root user command prompt, and you''ll also need to be in the root user''s
    home directory:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 因为某种我从未理解的奇怪原因，SELinux不允许Dovecot（邮件服务器的邮件传递代理组件）读取自己的`dict`文件。没有布尔值可更改，也没有类型问题，因此setroubleshoot建议我创建一个自定义策略模块。这很容易做到，但您需要知道这在普通用户帐户上使用sudo不起作用。这是那些罕见时刻之一，您只需转到root用户命令提示符，并且还需要在root用户的主目录中：
- en: '[PRE55]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Before you do it, be sure to put SELinux into the permissive mode and then do
    something to induce the SELinux error. This way, you'll be sure that one problem
    isn't masking others.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行此操作之前，请确保将SELinux设置为宽松模式，然后执行某些操作以引发SELinux错误。这样，您就可以确保一个问题不会掩盖其他问题。
- en: 'When you run the command to create the new policy module, be sure to replace
    `mypol` with a custom policy name of your own choosing. In my case, I named the
    module `dovecot_dict`, and the command looked like this:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行命令创建新的策略模块时，请确保用自己选择的自定义策略名称替换`mypol`。在我的情况下，我将模块命名为`dovecot_dict`，命令看起来是这样的：
- en: '[PRE56]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: What I'm doing here is using `grep` to search through the `audit.log` file for
    SELinux messages that contain the word `dict`. I then piped the output of that
    into `audit2allow` and used the `-M` option to create a custom module with the
    name, `dovecot_dict`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里做的是使用`grep`搜索`audit.log`文件中包含单词`dict`的SELinux消息。然后我将该输出传输到`audit2allow`，并使用`-M`选项创建一个名为`dovecot_dict`的自定义模块。
- en: 'After I created the new policy module, I inserted it into the SELinux policy
    like so:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的策略模块后，我将其插入SELinux策略中，如下所示：
- en: '[PRE57]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'There was a also a second problem that required another custom module, but
    I just repeated this procedure to produce another module of a different name.
    After I got all that done, I reloaded the SELinux policy, in order to get my new
    modules to take effect:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 还有第二个问题需要另一个自定义模块，但我只是重复了这个过程以生成另一个不同名称的模块。完成所有这些后，我重新加载了SELinux策略，以使我的新模块生效：
- en: '[PRE58]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: With `semodule`, the `-R` switch stands for reload, rather than recursive, as
    it does with most Linux commands.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`semodule`，`-R`开关代表重新加载，而不是像大多数Linux命令那样递归。
- en: With all that done, I put SELinux back into enforcing mode and exited back to
    my own user account. And, I tested the setup to make sure that I had fixed the
    problem.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，我将SELinux重新设置为强制模式，并退出到自己的用户帐户。然后，我测试了设置以确保我已经解决了问题。
- en: 'Of course, you also want to bear in mind that you don''t want to just modify
    SELinux policy or contexts every time you see an `sealert` message in the log
    files. For example, consider this snippet from the `messages` file of my Oracle
    Linux 7 machine, which I set up mainly to run Docker and Docker containers:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您还要记住，您不希望每次在日志文件中看到`sealert`消息时都修改SELinux策略或上下文。例如，考虑一下我设置主要用于运行Docker和Docker容器的Oracle
    Linux 7机器的`messages`文件中的这段代码：
- en: '[PRE59]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: These messages were caused by an early version of Docker trying to access resources
    on the host machine. As you can see, Docker is trying to access some rather sensitive
    files, and SELinux is preventing Docker from doing so. With early versions of
    Docker and without some sort of Mandatory Access Control, it would have been a
    trivial matter for a normal, unprivileged user to escape from the Docker container
    and have root user privileges on the host system. Naturally, when you see these
    sorts of messages, you don't want to automatically tell SELinux to allow the prohibited
    actions. It just may be that SELinux is preventing something truly bad from taking
    place.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息是由早期版本的Docker尝试访问主机上的资源引起的。正如您所看到的，Docker正在尝试访问一些相当敏感的文件，而SELinux正在阻止Docker这样做。对于早期版本的Docker而言，如果没有某种强制访问控制，普通的非特权用户很容易就能够从Docker容器中逃脱，并在主机系统上拥有root用户权限。当您看到这些消息时，您不希望自动告诉SELinux允许被禁止的操作。这可能是SELinux正在阻止某些真正糟糕的事情发生。
- en: Be sure to get your copy of *The SELinux Coloring Book* at: [https://opensource.com/business/13/11/selinux-policy-guide.](https://opensource.com/business/13/11/selinux-policy-guide)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在以下网址获取您的*SELinux着色书*：[https://opensource.com/business/13/11/selinux-policy-guide.](https://opensource.com/business/13/11/selinux-policy-guide)
- en: Hands-on lab – SELinux Booleans and ports
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践实验 - SELinux布尔值和端口
- en: 'In this lab, you''ll view the effects of having Apache try to listen on an
    unauthorized port:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，您将查看Apache尝试在未经授权的端口上监听的效果：
- en: 'View the ports that SELinux allows the Apache web server daemon to use:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看SELinux允许Apache Web服务器守护程序使用的端口：
- en: '[PRE60]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Open the `/etc/httpd/conf/httpd.conf` file in your favorite text editor. Find
    the line that says `Listen 80` and change it to `Listen 82`. Restart Apache by
    entering the following:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的文本编辑器中打开`/etc/httpd/conf/httpd.conf`文件。找到`Listen 80`的那一行，并将其更改为`Listen
    82`。输入以下内容重新启动Apache：
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'View the error message you receive by entering:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容查看您收到的错误消息：
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add port `82` to the list of authorized ports and restart Apache:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将端口`82`添加到授权端口列表并重新启动Apache：
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Delete the port that you just added:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除您刚刚添加的端口：
- en: '[PRE64]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Go back into the `/etc/httpd/conf/httpd.conf` file, and change `Listen 82` back
    to `Listen 80`. Restart the Apache daemon to return to normal operation.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`/etc/httpd/conf/httpd.conf`文件，并将`Listen 82`改回`Listen 80`。重新启动Apache守护程序以恢复正常操作。
- en: How AppArmor can benefit a systems administrator
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AppArmor如何有益于系统管理员
- en: 'AppArmor is the Mandatory Access Control system that comes installed with the
    SUSE and the Ubuntu families of Linux. Although it''s designed to do pretty much
    the same job as SELinux, its mode of operation is substantially different:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: AppArmor是与SUSE和Ubuntu Linux系列一起安装的强制访问控制系统。尽管它的设计几乎与SELinux完成相同的工作，但其操作模式有很大的不同：
- en: SELinux labels all system processes and all objects such as files, directories,
    or network ports. For files and directories, SELinux stores the labels in their
    respective inodes as extended attributes. (An inode is the basic filesystem component
    that contains all information about a file, except for the file name.)
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux为所有系统进程和文件、目录或网络端口等所有对象打上标签。对于文件和目录，SELinux将标签存储在它们各自的inode中作为扩展属性。（inode是包含有关文件的所有信息的基本文件系统组件，除了文件名。）
- en: AppArmor uses pathname enforcement, which means that you specify the path to
    the executable file that you want for AppArmor to control. This way, there's no
    need to insert labels into the extended attributes of files or directories.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AppArmor使用路径名强制执行，这意味着您要指定要AppArmor控制的可执行文件的路径。这样，就不需要将标签插入文件或目录的扩展属性中。
- en: With SELinux, you have system-wide protection out of the box.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SELinux，您可以立即获得系统范围的保护。
- en: With AppArmor, you have a profile for each individual application.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AppArmor，您可以为每个单独的应用程序创建一个配置文件。
- en: With either SELinux or AppArmor, you might occasionally find yourself having
    to create custom policy modules from scratch, especially if you're dealing with
    either third-party applications or home-grown software. With AppArmor, this is
    easier, because the syntax for writing AppArmor profiles is much easier than the
    syntax for writing SELinux policies. And, AppArmor comes with utilities that can
    help you automate the process.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论是SELinux还是AppArmor，您可能会偶尔发现自己不得不从头开始创建自定义策略模块，特别是如果您正在处理第三方应用程序或自制软件。使用AppArmor会更容易，因为编写AppArmor配置文件的语法比编写SELinux策略的语法要简单得多。而且，AppArmor配备了可以帮助您自动化该过程的实用程序。
- en: Just as SELinux can, AppArmor can help prevent malicious actors from ruining
    your day and can help protect user data.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像SELinux一样，AppArmor可以帮助防止恶意行为者破坏您的一天，并保护用户数据。
- en: So, you see that there are advantages and disadvantages to both SELinux and
    AppArmor, and a lot of Linux administrators have strong feelings about which one
    they prefer. (To avoid being subjected to a flame-war, I'll refrain from stating
    my own preference.) Also, note that even though we're working with an Ubuntu virtual
    machine, the information I present here, other than the Ubuntu-specific package
    installation commands, also works with the SUSE Linux distos.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到SELinux和AppArmor都有优点和缺点，许多Linux管理员对自己更喜欢的那个有着强烈的感受。（为了避免被卷入争论，我将不表达自己的偏好。）另外，请注意，即使我们正在使用Ubuntu虚拟机，我在这里提供的信息，除了特定于Ubuntu的软件包安装命令之外，也适用于SUSE
    Linux发行版。
- en: Looking at AppArmor profiles
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看AppArmor配置文件
- en: 'In the `/etc/apparmor.d` directory, you''ll see the AppArmor profiles for your
    system.  (The SELinux folk say policies, but the AppArmor folk say profiles.):'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/etc/apparmor.d`目录中，您将看到系统的AppArmor配置文件。（SELinux的人说策略，但AppArmor的人说配置文件。）
- en: '[PRE65]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The `sbin.dhclient` file and the `usr.*` files are all AppArmor profiles. You'll
    find a few other profiles in the `lxc` and `lxc-containers` subdirectories. Still,
    though, there's not a whole lot there in the way of application profiles.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`sbin.dhclient`文件和`usr.*`文件都是AppArmor配置文件。您还会在`lxc`和`lxc-containers`子目录中找到其他一些配置文件。不过，在应用程序配置文件方面，这里并没有太多内容。'
- en: 'For some reason, a default installation of OpenSUSE comes with more installed
    profiles than does Ubuntu Server.  To install more profiles on Ubuntu, use the
    following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某种原因，OpenSUSE的默认安装比Ubuntu Server安装了更多的配置文件。要在Ubuntu上安装更多配置文件，请使用以下命令：
- en: '`sudo apt install apparmor-profiles apparmor-profiles-extra`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt install apparmor-profiles apparmor-profiles-extra`'
- en: In the `abstractions` subdirectory, you'll find files that aren't complete profiles,
    but that can be included in complete profiles. Any one of these abstraction files
    can be included in any number of profiles. This way, you don't have to write the
    same code over and over every time you create a profile. Just include an abstraction
    file instead.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在`abstractions`子目录中，您会找到一些不完整的配置文件，但可以包含在完整的配置文件中。任何一个这些抽象文件都可以包含在任意数量的配置文件中。这样，您就不必每次创建配置文件时都重复编写相同的代码。只需包含一个抽象文件即可。
- en: If you're familiar with programming concepts, just think of abstraction files
    as include files by another name.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉编程概念，只需将抽象文件视为另一种包含文件。
- en: 'Here''s a partial listing of the abstraction files:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是抽象文件的部分清单：
- en: '[PRE66]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To get a feel for how AppArmor rules work, let''s peek inside the web-data
    abstraction file:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解AppArmor规则的工作原理，让我们来看看web-data抽象文件的内容：
- en: '[PRE67]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This file is nothing but a list of directories from which the Apache daemon
    is allowed to read files.  Let''s break it down:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件只是一个允许Apache守护程序读取文件的目录列表。让我们来分解一下：
- en: Note that each rule ends with `r,`. This denotes that we want for Apache to
    have read access on each listed directory. Also note that each rule has to end
    with a comma.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，每个规则都以`r,`结尾。这表示我们希望Apache对每个列出的目录具有读取权限。还要注意，每个规则都必须以逗号结尾。
- en: '`/srv/www/htdocs/ r,` means that the listed directory itself has read access
    for Apache.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/srv/www/htdocs/ r,` 意味着列出的目录本身对于Apache具有读取权限。'
- en: '`/srv/www.htdocs/* * r,` the `* *` wildcards make this rule recursive. In other
    words, Apache can read all files in all subdirectories of this specified directory.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/srv/www.htdocs/* * r,` `* *`通配符使此规则递归。换句话说，Apache可以读取指定目录的所有子目录中的所有文件。'
- en: '`# mod_userdir` if installed, this Apache module allows Apache to read web
    content files from a subdirectory that''s within a user''s home directory. The
    next two lines go along with that.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '# mod_userdir 如果安装了，这个Apache模块允许Apache从用户家目录中的子目录读取网页内容文件。接下来的两行与此相关。'
- en: '`@{HOME}/public_html/ r,` and `@{HOME}/public_html/ r,` the `@{HOME}` variable
    allows this rule to work with any user''s home directory. (You''ll see this variable
    defined in the `/etc/apparmor.d/tunables/home` file.)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@{HOME}/public_html/ r,` 和 `@{HOME}/public_html/ r,` `@{HOME}`变量允许此规则与任何用户的家目录一起工作。（您将在`/etc/apparmor.d/tunables/home`文件中看到此变量的定义。）'
- en: Note that there's no specific rule that prohibits Apache from reading from other
    locations. It's just understood that anything that's not listed here is off-limits
    to the Apache web server daemon.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，没有特定的规则禁止Apache从其他位置读取。只是理解到这里未列出的任何内容对于Apache web服务器守护程序来说是禁止的。
- en: 'The `tunables` subdirectory contains files that have predefined variables.
    You can also use this directory to  either define new variables or make profile
    tweaks:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`tunables`子目录包含具有预定义变量的文件。您还可以使用此目录来定义新变量或进行配置文件调整：'
- en: '[PRE68]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Space doesn''t permit me to show you the details of how to write your own profiles
    from scratch, and thanks to the suite of utilities that we''ll look at in the
    next section, you might never need to do that. Still, just to give you a better
    understanding about how AppArmor does what it does, here''s a chart of some example
    rules that you might find in any given profile:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 空间不允许我向您展示如何从头开始编写自己的配置文件的细节，而且由于我们将在下一节中看到的一套实用程序，您可能永远不需要这样做。不过，为了让您更好地了解AppArmor的工作原理，这里有一些示例规则的图表，您可能会在任何给定的配置文件中找到：
- en: '| `/var/run/some_program.pid rw,` | The process will have read and write privileges
    for this process ID file. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `/var/run/some_program.pid rw,` | 进程将对此进程ID文件具有读取和写入权限。 |'
- en: '| `/etc/ld.so.cache r,` | The process will have read privileges for this file.
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `/etc/ld.so.cache r,` | 进程将对此文件具有读取权限。 |'
- en: '| `/tmp/some_program.* l,` | The process will be able to create and delete
    links with the `some_program` name. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `/tmp/some_program.* l,` | 进程将能够创建和删除具有`some_program`名称的链接。 |'
- en: '| `/bin/mount ux` | The process has executable privileges for the `mount` utility,
    which will then run unconstrained. (Unconstrained means, without an AppArmor profile.)
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `/bin/mount ux` | 进程对`mount`实用程序具有可执行权限，然后将无限制地运行。（无限制意味着没有AppArmor配置文件。）
    |'
- en: Working with AppArmor command-line utilities
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AppArmor命令行实用程序
- en: 'Whether or not you have all the AppArmor utilities you need will depend on
    which Linux distro you have. On my OpenSUSE Leap workstation, the utilities were
    there out of the box.  On my Ubuntu Server virtual machine, I had to install them
    myself:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否拥有所需的所有AppArmor实用程序将取决于您使用的Linux发行版。在我的OpenSUSE Leap工作站上，这些实用程序已经预装好了。在我的Ubuntu
    Server虚拟机上，我不得不自己安装它们：
- en: '[PRE69]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'First, let''s look at the status of AppArmor on the Ubuntu machine:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下Ubuntu机器上AppArmor的状态：
- en: '[PRE70]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The first thing to note here is that AppArmor has an enforce mode and a complain
    mode.  The enforce mode does the same job as its enforcing mode counterpart in
    SELinux. It prevents system processes from doing things that the active policy
    doesn't allow, and it logs any violations. The complain mode is the same as the
    permissive mode in SELinux. It allows processes to perform actions that are prohibited
    by the active policy, but it records those actions in either the `/var/log/audit/audit.log`
    file, or the system log file, depending on whether you have `auditd` installed.
    (Unlike the Red Hat-type distros, `auditd` doesn't come installed by default on
    Ubuntu.) You would use the complain mode to either help with troubleshooting or
    to test new profiles.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这里首先要注意的是，AppArmor有强制模式和投诉模式。强制模式与SELinux中的强制模式执行相同的工作。它阻止系统进程执行活动策略不允许的操作，并记录任何违规行为。投诉模式与SELinux中的宽容模式相同。它允许进程执行活动策略禁止的操作，但会记录这些操作，记录在`/var/log/audit/audit.log`文件中，或者系统日志文件中，具体取决于您是否安装了`auditd`。（与红帽类型的发行版不同，`auditd`在Ubuntu上默认情况下不会安装。）您可以使用投诉模式来帮助故障排除或测试新配置文件。
- en: Most of the enforce mode profiles we see here have to do with either network
    management or with `lxc` container management. Two exceptions we see are the two
    profiles for `snapd`, which is the daemon that makes the snap packaging technology
    work. The third exception is for the `mysqld` profile.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的大多数强制模式配置文件都与网络管理或`lxc`容器管理有关。我们看到的两个例外是`snapd`的两个配置文件，它是使snap打包技术工作的守护程序。第三个例外是`mysqld`配置文件。
- en: Snap packages are universal binary files that are designed to work on multiple
    distros. Snap technology is currently available for Ubuntu and Fedora.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Snap软件包是设计用于多个发行版的通用二进制文件。Snap技术目前适用于Ubuntu和Fedora。
- en: Curiously, when you install a daemon package on Ubuntu, you'll sometimes get
    a predefined profile for that daemon and sometimes you won't. Even when a profile
    does come with the package that you've installed, it's sometimes already in the
    enforce mode and sometimes it isn't. For example, if you're setting up a **Domain
    Name Service** (**DNS**) server and you install the `bind9` package for it, you'll
    get an AppArmor profile that's already in enforce mode.  If you're setting up
    a database server and install the `mysql-server` package, you'll also get a working
    profile that's already in the enforce mode.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，当您在Ubuntu上安装守护程序包时，有时会得到该守护程序的预定义配置文件，有时则不会。即使配置文件随您安装的软件包一起提供，有时已经处于强制模式，有时则没有。例如，如果您正在设置**域名服务**（**DNS**）服务器并安装了`bind9`软件包，您将获得一个已经处于强制模式的AppArmor配置文件。如果您正在设置数据库服务器并安装了`mysql-server`软件包，您还将获得一个已经处于强制模式的工作配置文件。
- en: 'But, if you''re setting up a database server and you prefer to install the
    `mariadb-server` instead of `mysql-server`, you''ll get an AppArmor profile that''s
    completely disabled and that can''t be enabled. When you look in the `usr.sbin.mysqld`
    profile file that gets installed with the `mariadb-server` package, you''ll see
    this:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您正在设置数据库服务器并且更喜欢安装`mariadb-server`而不是`mysql-server`，您将获得一个完全禁用且无法启用的AppArmor配置文件。当您查看与`mariadb-server`软件包一起安装的`usr.sbin.mysqld`配置文件时，您会看到这样的内容：
- en: '[PRE71]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Okay, so apparently, AppArmor isn't good for *everything*. (And, whoever wrote
    this needs to take spelling lessons.)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，显然，AppArmor并不适用于*所有*情况。（而且，写这篇文章的人需要上拼写课。）
- en: 'And then, there''s Samba, which is a special case in more ways than one. When
    you install the `samba` package to set up a Samba server, you don''t get any AppArmor
    profiles at all.  For Samba and several other different applications as well,
    you''ll need to install the AppArmor profiles separately:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有Samba，它在很多方面都是一个特例。当您安装`samba`软件包设置Samba服务器时，您根本不会得到任何AppArmor配置文件。对于Samba和其他一些不同的应用程序，您需要单独安装AppArmor配置文件：
- en: '[PRE72]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'When you install these two profile packages, the profiles will all be in the
    complain mode.  That''s okay, because we have a handy utility to put them into
    enforce mode.  Since Samba has two different daemons that we need to protect,
    there are two different profiles that we''ll need to place into enforce mode:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这两个配置文件包时，所有配置文件都将处于投诉模式。这没关系，因为我们有一个方便的实用程序可以将它们置于强制模式。由于Samba有两个不同的守护程序需要保护，因此我们需要将两个不同的配置文件放置到强制模式中：
- en: '[PRE73]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We''ll use `aa-enforce` to activate enforce mode for both of these profiles:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`aa-enforce`来激活这两个配置文件的强制模式：
- en: '[PRE74]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: To use `aa-enforce`, you first need to specify the path to the executable file
    of the process that you want to protect. (Fortunately, you normally won't even
    have to look that up, since the path name is normally part of the profile filename.)
    The last part of the command is the name of the profile. Note that you'll need
    to restart the Samba daemon to get this AppArmor protection to take effect.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`aa-enforce`，首先需要指定要保护的进程的可执行文件的路径。（幸运的是，通常你甚至不需要查找，因为路径名通常是配置文件的一部分。）命令的最后一部分是配置文件的名称。请注意，您需要重新启动Samba守护程序才能使AppArmor保护生效。
- en: 'Placing a profile into other modes is just as easy. All you have to do is to
    replace the `aa-enforce` utility with the utility for the mode that you need to
    use. Here''s a chart of the utilities for the other modes:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置文件放入其他模式同样简单。您只需要用需要使用的模式的实用程序替换`aa-enforce`实用程序。以下是其他模式的实用程序的图表：
- en: '| `aa-audit` | Audit mode is the same as enforce mode, except that allowed
    actions get logged, as well as the actions that have been blocked. (Enforce mode
    only logs actions that have been blocked.) |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `aa-audit` | 审计模式与强制模式相同，只是允许的操作也会被记录，以及被阻止的操作。（强制模式只记录被阻止的操作。）|'
- en: '| `aa-disable` | This completely disables a profile. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `aa-disable` | 这将完全禁用配置文件。|'
- en: '| `aa-complain` | This places a profile into complain mode. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `aa-complain` | 这将配置文件置于投诉模式。|'
- en: Troubleshooting AppArmor problems
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除AppArmor问题
- en: So, I've been here racking my brain for the past several days, trying to come
    up with a good troubleshooting scenario. It turns out that I didn't need to. The
    Ubuntu folk have handed me a good scenario on a silver platter, in the form of
    a buggy Samba profile.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我在过去的几天里一直在这里绞尽脑汁，试图想出一个好的故障排除方案。结果我并不需要。Ubuntu的人民已经为我提供了一个完美的故障排除场景，以有缺陷的Samba配置文件的形式。
- en: 'As you''ve just seen, I used `aa-enforce` to put the two Samba-related profiles
    into enforce mode. But, watch what happens now when I try to restart Samba in
    order to get the profiles to take effect:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你刚刚看到的，我使用`aa-enforce`将两个与Samba相关的配置文件置于强制模式。但是，现在当我尝试重新启动Samba以使配置文件生效时，看看会发生什么：
- en: '[PRE75]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Okay, that''s not good.  Looking at the status for the `smbd` service, I see
    this:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这不太好。查看`smbd`服务的状态，我看到了这个：
- en: '[PRE76]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The important things to see here are all of the places where some form of the
    word fail shows up.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的重要事情是所有出现“失败”一词形式的地方。
- en: 'The original error message said to use `journalctl -xe` to view the log message.
    But, `journalctl` has this bad habit of truncating lines of output at the right
    edge of the screen. So instead, I''ll just use either `less` or `tail` to look
    in the regular `/var/log/syslog` log file:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 原始错误消息说要使用`journalctl -xe`查看日志消息。但是，`journalctl`有一个坏习惯，会在屏幕右侧截断输出行。因此，我将使用`less`或`tail`来查看常规的`/var/log/syslog`日志文件：
- en: '[PRE77]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: So, we see `apparmor=DENIED`. Obviously, Samba is trying to do something that
    the profile doesn't allow. Samba needs to write temporary files to the `/run/samba/msg.lock`
    directory, but it isn't allowed to. I'm guessing that the profile is missing a
    rule that allows that to happen.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到`apparmor=DENIED`。显然，Samba正在尝试执行配置文件不允许的操作。Samba需要将临时文件写入`/run/samba/msg.lock`目录，但它没有被允许。我猜测配置文件缺少一个允许这种情况发生的规则。
- en: 'But, even if this log file entry were to give me no clue at all, I could just
    cheat, using a troubleshooting technique that has served me well for many years.
    That is, I could just copy and paste the error message from the log file into
    my favorite search engine. Pretty much every time I''ve ever done that, I''ve
    found that other people before me have already had the same problem:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使这个日志文件条目给我没有任何线索，我也可以使用一个多年来一直为我服务良好的故障排除技术来作弊。也就是说，我可以将日志文件中的错误消息复制粘贴到我最喜欢的搜索引擎中。几乎每次我这样做，我都发现其他人在我之前已经遇到了同样的问题：
- en: '![](img/2863fea5-dc91-4895-8bdb-503a1a4e85f7.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2863fea5-dc91-4895-8bdb-503a1a4e85f7.png)'
- en: 'Okay, I didn''t paste in the entire error message, but I did paste in enough
    for DuckDuckGo to work with. And, lo and behold, it worked:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我没有粘贴整个错误消息，但我粘贴了足够让DuckDuckGo处理。结果，它奏效了：
- en: '![](img/b67de595-546a-4e65-8351-2ed4f3c5487a.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b67de595-546a-4e65-8351-2ed4f3c5487a.png)'
- en: 'Hmmm, it looks like my profile file might be missing an important line. So,
    I''ll open the `usr.sbin.smbd` file and place this line at the end of the rule
    set:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来我的配置文件可能缺少一行重要的内容。因此，我将打开`usr.sbin.smbd`文件，并将此行放在规则集的末尾：
- en: '[PRE78]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'This line will allow read and write access to everything in the `/run/samba`
    directory. After making the edit, I''ll need to reload this profile because it''s
    already been loaded with `aa-enforce`. For this, I''ll use the `apparmor_parser`
    utility:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这行将允许读写访问`/run/samba`目录中的所有内容。编辑后，我需要重新加载此配置文件，因为它已经被`aa-enforce`加载。为此，我将使用`apparmor_parser`实用程序：
- en: '[PRE79]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'All you need to do is use the `-r` option for reloading and list the name of
    the profile file.  Now, let''s try to restart Samba:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要使用`-r`选项重新加载并列出配置文件的名称。现在，让我们尝试重新启动Samba：
- en: '[PRE80]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: And, it works.  The two Samba profiles are in enforce mode, and Samba finally
    starts up just fine.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，它奏效了。两个Samba配置文件都处于强制模式，Samba终于正常启动了。
- en: The odd part about this is that I had this same problem with both Ubuntu 16.04
    and Ubuntu 17.10\. So, the bug has been there for a long time, and it would seem
    that the Ubuntu folk either don't know about it or don't care to fix it. In a
    way, I hope that it never does get fixed because getting it fixed would ruin a
    perfectly good training demo for me.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，我在Ubuntu 16.04和Ubuntu 17.10都遇到了同样的问题。因此，这个错误已经存在很长时间了，而且似乎Ubuntu的人们要么不知道它，要么不愿意修复它。在某种程度上，我希望它永远不会被修复，因为修复它会破坏我完美的培训演示。
- en: Summary
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the basic principles of Mandatory Access Control
    and compared two different Mandatory Access Control systems. We saw what SELinux
    and AppArmor are and how they can help safeguard your systems from malicious actors.
    We then looked at the basics of how to use them and the basics of how to troubleshoot
    them. We also saw that even though they're both meant to do the same job, they
    work in vastly different ways.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了强制访问控制的基本原则，并比较了两种不同的强制访问控制系统。我们看到了SELinux和AppArmor是什么，以及它们如何帮助保护系统免受恶意行为者的侵害。然后，我们看了如何使用它们的基础知识以及如何对它们进行故障排除的基础知识。我们还看到，尽管它们都是为了完成同样的工作，但它们的工作方式却大不相同。
- en: Whether you're working with AppArmor or with SELinux, you'll always want to
    thoroughly test a new system in either complain or permissive mode before you
    put it into production.  Make sure that what you want to protect gets protected,
    while at the same time, what you want to allow gets allowed. After you place the
    machine into production, don't just assume that you can automatically change a
    policy setting every time you see a policy violation occur. It could be that nothing
    is wrong with your Mandatory Access Control setup and that MAC is just doing its
    job in protecting you from the bad guys.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是使用AppArmor还是SELinux，您都希望在将新系统置于投诉或宽松模式之前对其进行彻底测试，然后再投入生产。确保您想要保护的内容得到保护，同时允许您想要允许的内容得到允许。将机器投入生产后，不要假设您可以在每次看到策略违规时自动更改策略设置。可能是您的强制访问控制设置没有问题，MAC只是在保护您免受坏人的侵害。
- en: There's a lot more to both of these topics than we can cover here. Hopefully,
    though, I've given you enough to whet your appetite and enough to help you out
    in your day-to-day duties.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个主题都有很多内容，我们无法在这里全部涵盖。不过希望我已经给了你足够的启发，足够帮助你在日常工作中。
- en: In the next chapter, we'll look at scanning, auditing, and hardening.  I'll
    see you there.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论扫描、审计和加固。我会在那里见到你。
