["```\nreader@ubuntu:~/scripts/chapter_16$ export word=Script\nreader@ubuntu:~/scripts/chapter_16$ echo ${word}\nScript\nreader@ubuntu:~/scripts/chapter_16$ echo \"You're reading: Learn Linux Shell ${word}ing\"\nYou're reading: Learn Linux Shell Scripting\nreader@ubuntu:~/scripts/chapter_16$ echo \"You're reading: Learn Linux Shell $wording\"\nYou're reading: Learn Linux Shell \n```", "```\nreader@ubuntu:~/scripts/chapter_16$ cp ../chapter_08/interactive-arguments.sh default-interactive-arguments.sh\nreader@ubuntu:~/scripts/chapter_16$ vim default-interactive-arguments.sh \nreader@ubuntu:~/scripts/chapter_16$ cat default-interactive-arguments.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-16\n# Description: Interactive script with default variables.\n# Usage: ./interactive-arguments.sh <name> <location> <food>\n#####################################\n\n# Initialize the variables from passed arguments.\ncharacter_name=${1:-Sebastiaan}\nlocation=${2:-Utrecht}\nfood=${3:-frikandellen}\n\n# Compose the story.\necho \"Recently, ${character_name} was seen in ${location} eating ${food}!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ bash default-interactive-arguments.sh \nRecently, Sebastiaan was seen in Utrecht eating frikandellen!\nreader@ubuntu:~/scripts/chapter_16$ bash default-interactive-arguments.sh '' Amsterdam ''\nRecently, Sebastiaan was seen in Amsterdam eating frikandellen!\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ cat /tmp/default-interactive-arguments.sh \n<SNIPPED>\ncharacter_name=${1-Sebastiaan}\nlocation=${2-Utrecht}\nfood=${3-frikandellen}\n<SNIPPED>\n\nreader@ubuntu:~/scripts/chapter_16$ bash /tmp/default-interactive-arguments.sh '' Amsterdam\nRecently,  was seen in Amsterdam eating frikandellen!\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ cp default-interactive-arguments.sh check-arguments.sh\nreader@ubuntu:~/scripts/chapter_16$ vim check-arguments.sh eader@ubuntu:~/scripts/chapter_16$ cat check-arguments.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-16\n# Description: Script with parameter expansion input checking.\n# Usage: ./check-arguments.sh <name> <location> <food>\n#####################################\n\n# Initialize the variables from passed arguments.\ncharacter_name=${1:?Name not supplied!}\nlocation=${2:?Location not supplied!}\nfood=${3:?Food not supplied!}\n\n# Compose the story.\necho \"Recently, ${character_name} was seen in ${location} eating ${food}!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ bash check-arguments.sh \ncheck-arguments.sh: line 12: 1: Name not supplied!\nreader@ubuntu:~/scripts/chapter_16$ bash check-arguments.sh Sanne\ncheck-arguments.sh: line 13: 2: Location not supplied!\nreader@ubuntu:~/scripts/chapter_16$ bash check-arguments.sh Sanne Alkmaar\ncheck-arguments.sh: line 14: 3: Food not supplied!\nreader@ubuntu:~/scripts/chapter_16$ bash check-arguments.sh Sanne Alkmaar gnocchi\nRecently, Sanne was seen in Alkmaar eating gnocchi!\nreader@ubuntu:~/scripts/chapter_16$ bash check-arguments.sh Sanne Alkmaar ''\ncheck-arguments.sh: line 14: 3: Food not supplied!\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ variable=\"hello\"\nreader@ubuntu:~/scripts/chapter_16$ echo ${#variable}\n5\nreader@ubuntu:~/scripts/chapter_16$ variable=\"hello there\"\nreader@ubuntu:~/scripts/chapter_16$ echo ${#variable}\n11\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ vim acronyms.sh \nreader@ubuntu:~/scripts/chapter_16$ cat acronyms.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-16\n# Description: Verify argument length.\n# Usage: ./acronyms.sh <three-letter-acronym>\n#####################################\n\n# Use full syntax for passed arguments check.\nif [[ ${#*} -ne 1 ]]; then\n  echo \"Incorrect number of arguments!\"\n  echo \"Usage: $0 <three-letter-acronym>\"\n  exit 1\nfi\n\nacronym=$1 # No need to default anything because of the check above.\n\n# Check acronym length using parameter expansion.\nif [[ ${#acronym} -ne 3 ]]; then\n  echo \"Acronym should be exactly three letters!\"\n  exit 2\nfi\n\n# All checks passed, we should be good.\necho \"Your chosen three letter acronym is: ${acronym}. Nice!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ bash acronyms.sh \nIncorrect number of arguments!\nUsage: acronyms.sh <three-letter-acronym>\nreader@ubuntu:~/scripts/chapter_16$ bash acronyms.sh SQL\nYour chosen three letter acronym is: SQL. Nice!\nreader@ubuntu:~/scripts/chapter_16$ bash acronyms.sh SQL DBA\nIncorrect number of arguments!\nUsage: acronyms.sh <three-letter-acronym>\nreader@ubuntu:~/scripts/chapter_16$ bash acronyms.sh TARDIS\nAcronym should be exactly three letters\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ echo \"Hi\"\nHi\nreader@ubuntu:~/scripts/chapter_16$ echo \"Hi\" | sed 's/Hi/Bye/'\nBye\n```", "```\nreader@ubuntu:~$ sentence=\"How much wood would a woodchuck chuck if a woodchuck could chuck wood?\"\nreader@ubuntu:~$ echo ${sentence}\nHow much wood would a woodchuck chuck if a woodchuck could chuck wood?\nreader@ubuntu:~$ echo ${sentence/wood/stone}\nHow much stone would a woodchuck chuck if a woodchuck could chuck wood?\nreader@ubuntu:~$ echo ${sentence//wood/stone}\nHow much stone would a stonechuck chuck if a stonechuck could chuck stone reader@ubuntu:~$ echo ${sentence}\nHow much wood would a woodchuck chuck if a woodchuck could chuck wood?\n```", "```\nreader@ubuntu:~$ sentence_mutated=${sentence//wood/stone}\nreader@ubuntu:~$ echo ${sentence_mutated}\nHow much stone would a stonechuck chuck if a stonechuck could chuck stone?\n```", "```\nreader@ubuntu:~$ sentence=${sentence//wood/stone}\nreader@ubuntu:~$ echo ${sentence}\nHow much stone would a stonechuck chuck if a stonechuck could chuck stone?\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ vim forbidden-word.sh\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-16\n# Description: Blocks the use of the forbidden word!\n# Usage: ./forbidden-word.sh\n#####################################\n\nread -p \"What is your favorite shell? \" answer\n\necho \"Great choice, my favorite shell is also ${answer/zsh/bash}!\"\n\nreader@ubuntu:~/scripts/chapter_16$ bash forbidden-word.sh \nWhat is your favorite shell? bash\nGreat choice, my favorite shell is also bash!\nreader@ubuntu:~/scripts/chapter_16$ bash forbidden-word.sh \nWhat is your favorite shell? zsh\nGreat choice, my favorite shell is also bash!\n```", "```\nreader@ubuntu:/tmp$ touch file.txt\nreader@ubuntu:/tmp$ file=/tmp/file.txt\nreader@ubuntu:/tmp$ echo ${file}\n/tmp/file.txt\n```", "```\nreader@ubuntu:/tmp$ basename ${file}\nfile.txt\nreader@ubuntu:/tmp$ dirname ${file}\n/tmp\n```", "```\nreader@ubuntu:/tmp$ echo ${file#/}\ntmp/file.txt\nreader@ubuntu:/tmp$ echo ${file#*/}\ntmp/file.txt\nreader@ubuntu:/tmp$ echo ${file##/}\ntmp/file.txt\nreader@ubuntu:/tmp$ echo ${file##*/}\nfile.txt\n```", "```\nreader@ubuntu:/tmp$ file=file.txt\nreader@ubuntu:/tmp$ echo ${file%.*}\nfile\n```", "```\nreader@ubuntu:/tmp$ file=/tmp/file.txt\nreader@ubuntu:/tmp$ echo ${file%/*}\n/tmp\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ vim check-backup.sh\nreader@ubuntu:~/scripts/chapter_16$ cat check-backup.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-16\n# Description: Check if daily backup has succeeded.\n# Usage: ./check-backup.sh <file>\n#####################################\n\n# Format the date: yyyymmdd.\nDATE_FORMAT=$(date +%Y%m%d)\n\n# Use basename to remove directory, expansion to remove extension.\nfile=$(basename ${1%%.*}) # Double %% so .tar.gz works too.\n\nif [[ ${file} == \"backup-${DATE_FORMAT}\" ]]; then\n  echo \"Backup with todays date found, all good.\"\n  exit 0 # Successful.\nelse\n  echo \"No backup with todays date found, please double check!\"\n  exit 1 # Unsuccessful.\nfi\n\nreader@ubuntu:~/scripts/chapter_16$ touch /tmp/backup-20181215.tar.gz\nreader@ubuntu:~/scripts/chapter_16$ touch /tmp/backup-20181216.tar.gz\nreader@ubuntu:~/scripts/chapter_16$ bash -x check-backup.sh /tmp/backup-20181216.tar.gz \n++ date +%Y%m%d\n+ DATE_FORMAT=20181216\n++ basename /tmp/backup-20181216\n+ file=backup-20181216\n+ [[ backup-20181216 == backup-20181216 ]]\n+ echo 'Backup with todays date found, all good.'\nBackup with todays date found, all good.\n+ exit 0\nreader@ubuntu:~/scripts/chapter_16$ bash check-backup.sh /tmp/backup-20181215.tar.gz \nNo backup with todays date found, please double check!\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cat yes-no-optimized.sh \n<SNIPPED>\nread -p \"Do you like this question? \" reply_variable\n\n# See if the user responded positively.\nif [[ ${reply_variable,,} = 'y' || ${reply_variable,,} = 'yes' ]]; then\n  echo \"Great, I worked really hard on it!\"\n  exit 0\nfi\n\n# Maybe the user responded negatively?\nif [[ ${reply_variable^^} = 'N' || ${reply_variable^^} = 'NO' ]]; then\n  echo \"You did not? But I worked so hard on it!\"\n  exit 0\nfi\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ string=yes\nreader@ubuntu:~/scripts/chapter_16$ echo ${string}\nyes\nreader@ubuntu:~/scripts/chapter_16$ echo ${string^}\nYes\nreader@ubuntu:~/scripts/chapter_16$ echo ${string^^}\nYES\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ STRING=YES\nreader@ubuntu:~/scripts/chapter_16$ echo ${STRING}\nYES\nreader@ubuntu:~/scripts/chapter_16$ echo ${STRING,}\nyES\nreader@ubuntu:~/scripts/chapter_16$ echo ${STRING,,}\nyes\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ animal=salamander\nreader@ubuntu:~/scripts/chapter_16$ echo ${animal^a}\nsalamander\nreader@ubuntu:~/scripts/chapter_16$ echo ${animal^^a}\nsAlAmAnder\nreader@ubuntu:~/scripts/chapter_16$ echo ${animal^^ae}\nsalamander\nreader@ubuntu:~/scripts/chapter_16$ echo ${animal^^[ae]}\nsAlAmAndEr\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ name=Sebastiaan\nreader@ubuntu:~/scripts/chapter_16$ echo ${name}\nSebastiaan\nreader@ubuntu:~/scripts/chapter_16$ echo ${name~}\nsebastiaan\nreader@ubuntu:~/scripts/chapter_16$ echo ${name~~}\nsEBASTIAAN reader@ubuntu:~/scripts/chapter_16$ echo ${name~~a}\nSebAstiAAn\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ sentence=\"Today is a great day\"\nreader@ubuntu:~/scripts/chapter_16$ echo ${sentence}\nToday is a great day\nreader@ubuntu:~/scripts/chapter_16$ echo ${sentence:0:5}\nToday\nreader@ubuntu:~/scripts/chapter_16$ echo ${sentence:1:6}\noday is\nreader@ubuntu:~/scripts/chapter_16$ echo ${sentence:11}\ngreat day\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ cp acronyms.sh acronym-chant.sh\nreader@ubuntu:~/scripts/chapter_16$ vim acronym-chant.sh\nreader@ubuntu:~/scripts/chapter_16$ cat acronym-chant.sh\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-16\n# Description: Verify argument length, with a chant!\n# Usage: ./acronym-chant.sh <three-letter-acronym>\n#####################################\n<SNIPPED>\n\n# Split the string into three letters using substring expansion.\nfirst_letter=${acronym:0:1}\nsecond_letter=${acronym:1:1}\nthird_letter=${acronym:2:1}\n\n# Print our chant.\necho \"Give me the ${first_letter^}!\"\necho \"Give me the ${second_letter^}!\"\necho \"Give me the ${third_letter^}!\"\n\necho \"What does that make? ${acronym^^}!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_16$ bash acronym-chant.sh Sql\nGive me the S!\nGive me the Q!\nGive me the L!\nWhat does that make? SQL!\nreader@ubuntu:~/scripts/chapter_16$ bash acronym-chant.sh dba\nGive me the D!\nGive me the B!\nGive me the A!\nWhat does that make? DBA!\nreader@ubuntu:~/scripts/chapter_16$ bash acronym-chant.sh USA\nGive me the U!\nGive me the S!\nGive me the A!\nWhat does that make? USA!\n```"]