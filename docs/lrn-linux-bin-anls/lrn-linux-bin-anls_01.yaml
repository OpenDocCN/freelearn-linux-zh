- en: Chapter 1. The Linux Environment and Its Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Linux环境及其工具
- en: In this chapter, we will be focusing on the Linux environment as it pertains
    to our focus throughout this book. Since this book is focused about Linux binary
    analysis, it makes sense to utilize the native environment tools that come with
    Linux and to which everyone has access. Linux comes with the ubiquitous binutils
    already installed, but they can be found at [http://www.gnu.org/software/binutils/](http://www.gnu.org/software/binutils/).
    They contain a huge selection of tools that are handy for binary analysis and
    hacking. This is not another book on using IDA Pro. IDA is hands-down the best
    universal software for reverse engineering of binaries, and I would encourage
    its use as needed, but we will not be using it in this book. Instead, you will
    acquire the skills to hop onto virtually any Linux system and have an idea on
    how to begin hacking binaries with an environment that is already accessible.
    You can therefore learn to appreciate the beauty of Linux as a true hackers' environment
    for which there are many free tools available. Throughout the book, we will demonstrate
    the use of various tools and give a recap on how to use them as we progress through
    each chapter. Meanwhile, however, let this chapter serve as a primer or reference
    to these tools and tips within the Linux environment. If you are already very
    familiar with the Linux environment and its tools for disassembling, debugging,
    and parsing of ELF files, then you may simply skip this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注与本书主题相关的Linux环境。由于本书专注于Linux二进制文件分析，因此利用Linux提供的本地环境工具并且每个人都可以访问是有意义的。Linux已经预装了无处不在的binutils，但是它们也可以在[http://www.gnu.org/software/binutils/](http://www.gnu.org/software/binutils/)找到。它们包含了大量对二进制文件分析和黑客行为有用的工具。这不是另一本关于使用IDA
    Pro的书。IDA是无疑是最好的通用软件，用于反向工程二进制文件，我鼓励根据需要使用它，但是在本书中我们不会使用它。相反，您将学会如何在几乎任何Linux系统上开始使用已经可访问的环境进行二进制文件的黑客行为。因此，您可以学会欣赏Linux作为一个真正的黑客环境，其中有许多免费工具可用。在整本书中，我们将演示各种工具的使用，并随着每一章的进展对如何使用它们进行回顾。然而，让本章作为Linux环境中这些工具和技巧的入门或参考。如果您已经非常熟悉Linux环境及其用于反汇编、调试和解析ELF文件的工具，那么您可以简单地跳过本章。
- en: Linux tools
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux工具
- en: Throughout this book, we will be using a variety of free tools that are accessible
    by anyone. This section will give a brief synopsis of some of these tools for
    you.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用各种任何人都可以访问的免费工具。本节将为您简要介绍其中一些工具。
- en: GDB
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GDB
- en: '**GNU Debugger** (**GDB**) is not only good to debug buggy applications. It
    can also be used to learn about a program''s control flow, change a program''s
    control flow, and modify the code, registers, and data structures. These tasks
    are common for a hacker who is working to exploit a software vulnerability or
    is unraveling the inner workings of a sophisticated virus. GDB works on ELF binaries
    and Linux processes. It is an essential tool for Linux hackers and will be used
    in various examples throughout this book.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GNU调试器（GDB）不仅用于调试有错误的应用程序。它还可以用于了解程序的控制流，改变程序的控制流，并修改代码、寄存器和数据结构。这些任务对于一个正在利用软件漏洞或揭示复杂病毒内部运作的黑客来说是很常见的。GDB适用于ELF二进制文件和Linux进程。它是Linux黑客的必备工具，并将在本书的各个示例中使用。
- en: Objdump from GNU binutils
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自GNU binutils的Objdump
- en: '**Object dump** (**objdump**) is a simple and clean solution for a quick disassembly
    of code. It is great for disassembling simple and untampered binaries, but will
    show its limitations quickly when attempting to use it for any real challenging
    reverse engineering tasks, especially against hostile software. Its primary weakness
    is that it relies on the `ELF` section headers and doesn''t perform control flow
    analysis, which are both limitations that greatly reduce its robustness. This
    results in not being able to correctly disassemble the code within a binary, or
    even open the binary at all if there are no section headers. For many conventional
    tasks, however, it should suffice, such as when disassembling common binaries
    that are not fortified, stripped, or obfuscated in any way. It can read all common
    `ELF` types. Here are some common examples of how to use `objdump`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对象转储（objdump）是一个快速反汇编代码的简单干净的解决方案。它非常适合反汇编简单且未被篡改的二进制文件，但是当尝试用它进行任何真正具有挑战性的逆向工程任务时，特别是针对敌对软件时，它很快就会显示出其局限性。它的主要弱点在于它依赖于`ELF`部分头，并且不执行控制流分析，这两个限制大大降低了它的鲁棒性。这导致无法正确地反汇编二进制文件中的代码，甚至在没有部分头的情况下根本无法打开二进制文件。然而，对于许多常规任务来说，它应该足够了，比如反汇编未加固、剥离或以任何方式混淆的常见二进制文件。它可以读取所有常见的`ELF`类型。以下是一些使用`objdump`的常见示例：
- en: 'View all data/code in every section of an `ELF` file:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看`ELF`文件中每个部分的所有数据/代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'View only program code in an `ELF` file:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅查看`ELF`文件中的程序代码：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'View all symbols:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看所有符号：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will be exploring `objdump` and other tools in great depth during our introduction
    to the `ELF` format in [Chapter 2](part0019_split_000.html#I3QM1-1d4163ae11644cc2802846625b2dc985
    "Chapter 2. The ELF Binary Format"), *The ELF Binary Format*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](part0019_split_000.html#I3QM1-1d4163ae11644cc2802846625b2dc985 "第2章。ELF二进制格式")中深入探讨`objdump`和其他工具，*ELF二进制格式*。
- en: Objcopy from GNU binutils
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自GNU binutils的Objcopy
- en: '**Object copy** (**Objcopy**) is an incredibly powerful little tool that we
    cannot summarize with a simple synopsis. I recommend that you read the manual
    pages for a complete description. `Objcopy` can be used to analyze and modify
    `ELF` objects of any kind, although some of its features are specific to certain
    types of `ELF` objects. `Objcopy` is often times used to modify or copy an `ELF`
    section to or from an `ELF` binary.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对象复制（Objcopy）是一个非常强大的小工具，我们无法用简单的摘要来总结。我建议您阅读手册页以获取完整的描述。`Objcopy`可以用于分析和修改任何类型的`ELF`对象，尽管它的一些功能是特定于某些类型的`ELF`对象的。`Objcopy`通常用于修改或复制`ELF`二进制文件中的`ELF`部分。
- en: 'To copy the `.data` section from an `ELF` object to a file, use this line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`.data`节从一个`ELF`对象复制到一个文件，使用以下命令：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `objcopy` tool will be demonstrated as needed throughout the rest of this
    book. Just remember that it exists and can be a very useful tool for the Linux
    binary hacker.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`objcopy`工具将在本书的其余部分中根据需要进行演示。只需记住它的存在，它可以成为Linux二进制黑客非常有用的工具。'
- en: strace
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: strace
- en: '**System call trace** (**strace**) is a tool that is based on the `ptrace(2)`
    system call, and it utilizes the `PTRACE_SYSCALL` request in a loop to show information
    about the system call (also known as `syscalls`) activity in a running program
    as well as signals that are caught during execution. This program can be highly
    useful for debugging, or just to collect information about what `syscalls` are
    being called during runtime.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用跟踪（strace）是一种基于`ptrace(2)`系统调用的工具，它利用循环中的`PTRACE_SYSCALL`请求来显示运行程序中系统调用（也称为`syscalls`）活动的信息，以及执行过程中捕获的信号。这个程序对于调试非常有用，或者只是收集运行时调用了哪些`syscalls`的信息。
- en: 'This is the `strace` command used to trace a basic program:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于跟踪基本程序的`strace`命令：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `strace` command used to attach to an existing process is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 用于附加到现有进程的`strace`命令如下：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The initial output will show you the file descriptor number of each system
    call that takes a file descriptor as an argument, such as this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 初始输出将显示每个以文件描述符作为参数的系统调用的文件描述符号码，例如：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you want to see all of the data that was being read into file descriptor
    3, you can run the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到所有被读入文件描述符3的数据，你可以运行以下命令：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You may also use `-e write=fd` to see written data. The `strace` tool is a great
    little tool, and you will undoubtedly find many reasons to use it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`-e write=fd`来查看写入的数据。`strace`工具是一个非常好的小工具，您肯定会找到许多使用它的理由。
- en: ltrace
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ltrace
- en: '**library trace** (**ltrace**) is another neat little tool, and it is very
    similar to `strace`. It works similarly, but it actually parses the shared library-linking
    information of a program and prints the library functions being used.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**库跟踪**（ltrace）是另一个非常有用的小工具，它与`strace`非常相似。它的工作方式类似，但它实际上解析了程序的共享库链接信息，并打印正在使用的库函数。'
- en: Basic ltrace command
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的ltrace命令
- en: 'You may see system calls in addition to library function calls with the `-S`
    flag. The `ltrace` command is designed to give more granular information, since
    it parses the dynamic segment of the executable and prints actual symbols/functions
    from shared and static libraries:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-S`标志在库函数调用之外看到系统调用。`ltrace`命令旨在提供更细粒度的信息，因为它解析可执行文件的动态段，并打印来自共享和静态库的实际符号/函数：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ftrace
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ftrace
- en: '**Function trace** (**ftrace**) is a tool designed by me. It is similar to
    `ltrace`, but it also shows calls to functions within the binary itself. There
    was no other tool I could find publicly available that could do this in Linux,
    so I decided to code one. This tool can be found at [https://github.com/elfmaster/ftrace](https://github.com/elfmaster/ftrace).
    A demonstration of this tool is given in the next chapter.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数跟踪**（ftrace）是我设计的一个工具。它类似于`ltrace`，但它还显示了二进制本身内部函数的调用。我在Linux中找不到其他公开可用的工具可以做到这一点，所以我决定编写一个。这个工具可以在[https://github.com/elfmaster/ftrace](https://github.com/elfmaster/ftrace)找到。下一章将演示这个工具。'
- en: readelf
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: readelf
- en: 'The `readelf` command is one of the most useful tools around for dissecting
    `ELF` binaries. It provides every bit of the data specific to `ELF` necessary
    for gathering information about an object before reverse engineering it. This
    tool will be used often throughout the book to gather information about symbols,
    segments, sections, relocation entries, dynamic linking of data, and more. The
    `readelf` command is the Swiss Army knife of `ELF`. We will be covering it in
    depth as needed, during [Chapter 2](part0019_split_000.html#I3QM1-1d4163ae11644cc2802846625b2dc985
    "Chapter 2. The ELF Binary Format"), *The ELF Binary Format*, but here are a few
    of its most commonly used flags:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`readelf`命令是解剖`ELF`二进制文件的最有用的工具之一。它提供了关于`ELF`的每一点数据，这些数据对于在逆向工程之前收集有关对象的信息是必要的。这个工具将在本书中经常使用，以收集有关符号、段、节、重定位条目、数据的动态链接等信息。`readelf`命令是`ELF`的瑞士军刀。我们将根据需要深入讨论它，在[第2章](part0019_split_000.html#I3QM1-1d4163ae11644cc2802846625b2dc985
    "第2章。ELF二进制格式")*ELF二进制格式*中，但以下是它最常用的一些标志：'
- en: 'To retrieve a section header table:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检索节头表：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To retrieve a program header table:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检索程序头表：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To retrieve a symbol table:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检索符号表：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To retrieve the `ELF` file header data:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检索`ELF`文件头数据：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To retrieve relocation entries:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检索重定位条目：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To retrieve a dynamic segment:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检索动态段：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ERESI – The ELF reverse engineering system interface
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ERESI - ELF逆向工程系统接口
- en: 'ERESI project ([http://www.eresi-project.org](http://www.eresi-project.org))
    contains a suite of many tools that are a Linux binary hacker''s dream. Unfortunately,
    many of them are not kept up to date and aren''t fully compatible with 64-bit
    Linux. They do exist for a variety of architectures, however, and are undoubtedly
    the most innovative single collection of tools for the purpose of hacking `ELF`
    binaries that exist today. Because I personally am not really familiar with using
    the ERESI project''s tools, and because they are no longer kept up to date, I
    will not be exploring their capabilities within this book. However, be aware that
    there are two Phrack articles that demonstrate the innovation and powerful features
    of the ERESI tools:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ERESI项目（[http://www.eresi-project.org](http://www.eresi-project.org)）包含许多工具，这些工具是Linux二进制黑客的梦想。不幸的是，其中许多工具没有得到更新，并且与64位Linux不完全兼容。但是，它们确实适用于各种架构，并且无疑是用于黑客`ELF`二进制的最具创新性的工具集。因为我个人对使用ERESI项目的工具并不是很熟悉，而且它们已经不再得到更新，所以我不会在本书中探讨它们的能力。但是，请注意，有两篇Phrack文章展示了ERESI工具的创新和强大功能：
- en: Cerberus ELF interface ([http://www.phrack.org/archives/issues/61/8.txt](http://www.phrack.org/archives/issues/61/8.txt))
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cerberus ELF接口（[http://www.phrack.org/archives/issues/61/8.txt](http://www.phrack.org/archives/issues/61/8.txt)）
- en: Embedded ELF debugging ([http://www.phrack.org/archives/issues/63/9.txt](http://www.phrack.org/archives/issues/63/9.txt))
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式ELF调试（[http://www.phrack.org/archives/issues/63/9.txt](http://www.phrack.org/archives/issues/63/9.txt)）
- en: Useful devices and files
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的设备和文件
- en: Linux has many files, devices, and `/proc` entries that are very helpful for
    the avid hacker and reverse engineer. Throughout this book, we will be demonstrating
    the usefulness of many of these files. Here is a description of some of the commonly
    used ones throughout the book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有许多文件、设备和`/proc`条目对于热衷于黑客和逆向工程师非常有帮助。在本书中，我们将演示许多这些文件的用处。以下是本书中经常使用的一些文件的描述。
- en: /proc/<pid>/maps
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /proc/<pid>/maps
- en: '`/proc/<pid>/maps` file contains the layout of a process image by showing each
    memory mapping. This includes the executable, shared libraries, stack, heap, VDSO,
    and more. This file is critical for being able to quickly parse the layout of
    a process address space and is used more than once throughout this book.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc/<pid>/maps`文件通过显示每个内存映射来包含进程映像的布局。这包括可执行文件、共享库、堆栈、堆、VDSO等。这个文件对于能够快速解析进程地址空间的布局至关重要，并且在本书中多次使用。'
- en: /proc/kcore
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /proc/kcore
- en: The `/proc/kcore` is an entry in the `proc` filesystem that acts as a dynamic
    core file of the Linux kernel. That is, it is a raw dump of memory that is presented
    in the form of an `ELF` core file that can be used by GDB to debug and analyze
    the kernel. We will explore `/proc/kcore` in depth in [Chapter 9](part0084_split_000.html#2G3F81-1d4163ae11644cc2802846625b2dc985
    "Chapter 9. Linux /proc/kcore Analysis"), *Linux /proc/kcore Analysis*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc/kcore`是`proc`文件系统中的一个条目，它充当Linux内核的动态核心文件。也就是说，它是内存的原始转储，以`ELF`核心文件的形式呈现，可以被GDB用于调试和分析内核。我们将在[第9章](part0084_split_000.html#2G3F81-1d4163ae11644cc2802846625b2dc985
    "第9章。Linux /proc/kcore分析") *Linux /proc/kcore分析*中深入探讨`/proc/kcore`。'
- en: /boot/System.map
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /boot/System.map
- en: This file is available on almost all Linux distributions and is very useful
    for kernel hackers. It contains every symbol for the entire kernel.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件几乎在所有Linux发行版上都可以找到，对内核黑客非常有用。它包含整个内核的每个符号。
- en: /proc/kallsyms
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /proc/kallsyms
- en: The `kallsyms` is very similar to `System.map`, except that it is a `/proc`
    entry that means that it is maintained by the kernel and is dynamically updated.
    Therefore, if any new LKMs are installed, the symbols will be added to `/proc/kallsyms`
    on the fly. The `/proc/kallsyms` contains at least most of the symbols in the
    kernel and will contain all of them if specified in the `CONFIG_KALLSYMS_ALL`
    kernel config.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`kallsyms`与`System.map`非常相似，只是它是一个`/proc`条目，这意味着它由内核维护并动态更新。因此，如果安装了任何新的LKM，符号将会即时添加到`/proc/kallsyms`中。`/proc/kallsyms`至少包含内核中的大部分符号，如果在`CONFIG_KALLSYMS_ALL`内核配置中指定，将包含所有符号。'
- en: /proc/iomem
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /proc/iomem
- en: 'The `iomem` is a useful proc entry as it is very similar to `/proc/<pid>/maps`,
    but for all of the system memory. If, for instance, you want to know where the
    kernel''s text segment is mapped in the physical memory, you can search for the
    `Kernel` string and you will see the `code/text` segment, the data segment, and
    the `bss` segment:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`iomem`是一个有用的proc条目，它与`/proc/<pid>/maps`非常相似，但是适用于系统内存的所有部分。例如，如果你想知道内核的文本段在物理内存中的映射位置，你可以搜索`Kernel`字符串，你将看到`code/text`段、数据段和`bss`段：'
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ECFS
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECFS
- en: '**Extended core file snapshot** (**ECFS**) is a special core dump technology
    that was specifically designed for advanced forensic analysis of a process image.
    The code for this software can be found at [https://github.com/elfmaster/ecfs](https://github.com/elfmaster/ecfs).
    Also, [Chapter 8](part0074_split_000.html#26I9K1-1d4163ae11644cc2802846625b2dc985
    "Chapter 8. ECFS – Extended Core File Snapshot Technology"), *ECFS – Extended
    Core File Snapshot Technology*, is solely devoted to explaining what ECFS is and
    how to use it. For those of you who are into advanced memory forensics, you will
    want to pay close attention to this.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展核心文件快照（ECFS）是一种专门为进程映像的高级取证分析而设计的特殊核心转储技术。该软件的代码可以在[https://github.com/elfmaster/ecfs](https://github.com/elfmaster/ecfs)找到。此外，[第8章](part0074_split_000.html#26I9K1-1d4163ae11644cc2802846625b2dc985
    "第8章。ECFS – 扩展核心文件快照技术") *ECFS – 扩展核心文件快照技术*，专门解释了ECFS是什么以及如何使用它。对于那些对高级内存取证感兴趣的人，你会想要仔细关注这一点。
- en: Linker-related environment points
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与链接器相关的环境变量
- en: The dynamic loader/linker and linking concepts are inescapable components involved
    in the process of program linking and execution. Throughout this book, you will
    learn a lot about these topics. In Linux, there are quite a few ways to alter
    the dynamic linker's behavior that can serve the binary hacker in many ways. As
    we move through the book, you will begin to understand the process of linking,
    relocations, and dynamic loading (program interpreter). Here are a few linker-related
    attributes that are useful and will be used throughout the book.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 动态加载器/链接器和链接概念是程序链接和执行过程中不可避免的组成部分。在本书中，你将学到很多关于这些主题的知识。在Linux中，有很多方法可以改变动态链接器的行为，可以为二进制黑客提供很多帮助。随着我们在本书中的学习，你将开始理解链接、重定位和动态加载（程序解释器）的过程。以下是一些与链接器相关的属性，它们是有用的，并将在本书中使用。
- en: The LD_PRELOAD environment variable
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LD_PRELOAD环境变量
- en: The `LD_PRELOAD` environment variable can be set to specify a library path that
    should be dynamically linked before any other libraries. This has the effect of
    allowing functions and symbols from the preloaded library to override the ones
    from the other libraries that are linked afterwards. This essentially allows you
    to perform runtime patching by redirecting shared library functions. As we will
    see in later chapters, this technique can be used to bypass anti-debugging code
    and for userland rootkits.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`LD_PRELOAD`环境变量可以设置为指定在任何其他库之前应动态链接的库路径。这样做的效果是允许预加载库中的函数和符号覆盖之后链接的其他库中的函数和符号。这实质上允许您通过重定向共享库函数来执行运行时修补。正如我们将在后面的章节中看到的，这种技术可以用于绕过反调试代码和用户态
    rootkit。'
- en: The LD_SHOW_AUXV environment variable
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LD_SHOW_AUXV环境变量
- en: This environment variable tells the program loader to display the program's
    auxiliary vector during runtime. The auxiliary vector is information that is placed
    on the program's stack (by the kernel's `ELF` loading routine), with information
    that is passed to the dynamic linker with certain information about the program.
    We will examine this much more closely in [Chapter 3](part0027_split_000.html#PNV61-1d4163ae11644cc2802846625b2dc985
    "Chapter 3. Linux Process Tracing"), *Linux Process Tracing*, but the information
    might be useful for reversing and debugging. If, for instance, you want to get
    the memory address of the VDSO page in the process image (which can also be obtained
    from the `maps` file, as shown earlier) you have to look for `AT_SYSINFO`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个环境变量告诉程序加载器在运行时显示程序的辅助向量。辅助向量是放置在程序堆栈上的信息（由内核的`ELF`加载例程放置），其中包含传递给动态链接器的有关程序的某些信息。我们将在[第3章](part0027_split_000.html#PNV61-1d4163ae11644cc2802846625b2dc985
    "Chapter 3. Linux Process Tracing")中更仔细地研究这一点，*Linux Process Tracing*，但这些信息可能对逆向和调试有用。例如，如果您想获取进程映像中VDSO页面的内存地址（也可以从`maps`文件中获取，如前所示），您必须寻找`AT_SYSINFO`。
- en: 'Here is an example of the auxiliary vector with `LD_SHOW_AUXV`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`LD_SHOW_AUXV`的辅助向量的示例：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The auxiliary vector will be covered in more depth in [Chapter 2](part0019_split_000.html#I3QM1-1d4163ae11644cc2802846625b2dc985
    "Chapter 2. The ELF Binary Format"), *The ELF Binary Format*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助向量将在[第2章](part0019_split_000.html#I3QM1-1d4163ae11644cc2802846625b2dc985 "Chapter 2. The
    ELF Binary Format")中更深入地介绍，*The ELF Binary Format*。
- en: Linker scripts
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接器脚本
- en: Linker scripts are a point of interest to us because they are interpreted by
    the linker and help shape a program's layout with regard to sections, memory,
    and symbols. The default linker script can be viewed with `ld -verbose`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 链接器脚本对我们来说是一个关注点，因为它们由链接器解释，并帮助塑造程序的布局，涉及到节、内存和符号。默认的链接器脚本可以通过`ld -verbose`查看。
- en: 'The `ld` linker program has a complete language that it interprets when it
    is taking input files (such as relocatable object files, shared libraries, and
    header files), and it uses this language to determine how the output file, such
    as an executable program, will be organized. For instance, if the output is an
    `ELF` executable, the linker script will help determine what the layout will be
    and what sections will exist in which segments. Here is another instance: the
    `.bss` section is always at the end of the data segment; this is determined by
    the linker script. You might be wondering how this is interesting to us. Well!
    For one, it is important to have some insights into the linking process during
    compile time. The `gcc` relies on the linker and other programs to perform this
    task, and in some instances, it is important to be able to have control over the
    layout of the executable file. The `ld` command language is quite an in-depth
    language and is beyond the scope of this book, but it is worth checking out. And
    while reverse engineering executables, remember that common segment addresses
    may sometimes be modified, and so can other portions of the layout. This indicates
    that a custom linker script is involved. A linker script can be specified with
    `gcc` using the `-T` flag. We will look at a specific example of using a linker
    script in [Chapter 5](part0049_split_000.html#1ENBI1-1d4163ae11644cc2802846625b2dc985
    "Chapter 5. Linux Binary Protection"), *Linux Binary Protection*.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`ld`链接程序有一个完整的语言，当它接受输入文件（如可重定位目标文件、共享库和头文件）时，它会解释这种语言，并使用这种语言来确定输出文件，如可执行程序，将如何组织。例如，如果输出是一个`ELF`可执行文件，链接器脚本将帮助确定布局和哪些段中存在哪些节。另一个例子是：`.bss`节总是在数据段的末尾；这是由链接器脚本确定的。您可能想知道这对我们来说有什么意义。嗯！首先，重要的是在编译时对链接过程有一些了解。`gcc`依赖于链接器和其他程序来执行这项任务，在某些情况下，能够控制可执行文件的布局是很重要的。`ld`命令语言是一种非常深入的语言，超出了本书的范围，但值得一看。在逆向工程可执行文件时，要记住，常见的段地址有时可能会被修改，布局的其他部分也可能会被修改。这表明涉及自定义链接器脚本。可以使用`gcc`的`-T`标志指定链接器脚本。我们将在[第5章](part0049_split_000.html#1ENBI1-1d4163ae11644cc2802846625b2dc985
    "Chapter 5. Linux Binary Protection")中看一个使用链接器脚本的具体例子，*Linux Binary Protection*。'
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We just touched upon some fundamental aspects of the Linux environment and the
    tools that will be used most commonly in the demonstrations from each chapter.
    Binary analysis is largely about knowing the tools and resources that are available
    for you and how they all fit together. We only briefly covered the tools, but
    we will get an opportunity to emphasize the capabilities of each one as we explore
    the vast world of Linux binary hacking in the following chapters. In the next
    chapter, we will delve into the internals of the ELF binary format and cover many
    interesting topics, such as dynamic linking, relocations, symbols, sections, and
    more.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚简要介绍了Linux环境的一些基本方面和每章演示中最常用的工具。二进制分析在很大程度上是关于了解可用的工具和资源以及它们如何相互配合。我们只是简要介绍了这些工具，但随着我们在接下来的章节中探索Linux二进制黑客的广阔世界，我们将有机会强调每个工具的能力。在下一章中，我们将深入探讨ELF二进制格式的内部，并涵盖许多有趣的主题，如动态链接、重定位、符号、节等。
