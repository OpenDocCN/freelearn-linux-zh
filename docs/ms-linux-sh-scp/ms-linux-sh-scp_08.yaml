- en: Chapter 8. Introducing sed
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。介绍sed
- en: In the previous chapter, we saw that we could make use of `sed` to edit files
    from within our scripts. The `sed` command is the **Stream Editor** and opens
    the file line by line to search or edit the file contents. Historically, this
    goes way back to Unix where systems may not have had enough RAM to open very large
    files. Using `sed` was absolutely required to carry out edits. Even today, we
    will use `sed` to make changes and display data from files with hundreds and thousands
    of entries. It is simpler and easier and more reliable than a human trying to
    do the same thing. Most importantly, as we have seen, we can use `sed` in scripts
    to edit the files automatically, no human interaction is required.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到我们可以利用`sed`在脚本中编辑文件。`sed`命令是**流编辑器**，逐行打开文件以搜索或编辑文件内容。从历史上看，这追溯到Unix，那时系统可能没有足够的RAM来打开非常大的文件。使用`sed`绝对是必不可少的。即使在今天，我们仍然会使用`sed`来对包含数百或数千条记录的文件进行更改和显示数据。这比人类尝试做同样的事情更简单、更容易、更可靠。最重要的是，正如我们所见，我们可以在脚本中使用`sed`自动编辑文件，无需人工干预。
- en: We will start by looking at `grep` and search the files for text. The `re` in
    `grep` command is short for **Regular Expression**. This introduces the power
    of POSIX Compliant Regular Expressions before we look at `sed`. Even though we
    are not looking at scripting in this chapter, we will be covering some very important
    tools that we can use with scripts. In the next chapter, we will see the practical
    implementation of `sed` in scripts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先查看`grep`并搜索文件中的文本。`grep`命令中的`re`是**正则表达式**的缩写。在我们查看`sed`之前，这介绍了POSIX兼容正则表达式的强大功能。即使在本章中我们不涉及脚本编写，我们也将介绍一些非常重要的工具，可以在脚本中使用。在下一章中，我们将看到`sed`在脚本中的实际应用。
- en: 'For the moment, we have enough queued and we will cover the following topics
    in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经排队了足够的内容，我们将在本章中涵盖以下主题：
- en: Using `grep` to display text
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`grep`显示文本
- en: Using regular expressions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式
- en: Understanding the basics of `sed`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`sed`的基础知识
- en: Using grep to display text
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用grep显示文本
- en: Welcome back and welcome to the power of using regular expressions in the command
    line. We will be beginning this journey by looking at the `grep` command. This
    will enable us to grasp some simple concepts of searching through the text before
    moving onto more complex regular expressions and the editing file with `sed`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，欢迎来到在命令行中使用正则表达式的强大之处。我们将通过查看`grep`命令来开始这个旅程。这将使我们能够掌握一些简单的搜索文本的概念，然后再转向更复杂的正则表达式和使用`sed`编辑文件。
- en: '**Global Regular Expression Print** (**grep**), or what we more commonly call
    the command `grep`, is a command line tool used to search globally (across all
    the lines in a file) and print the result to `STDOUT`. The search string is a
    regular expression.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**全局正则表达式打印**（**grep**），或者我们更常用的称为`grep`命令，是一个用于全局搜索（跨文件中的所有行）并将结果打印到`STDOUT`的命令行工具。搜索字符串是一个正则表达式。'
- en: The `grep` command is such a common tool that it has many simple examples and
    numerous occasions where we can use it each day. In the following section, we
    have included some simple and useful examples with explanations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`命令是如此常见的工具，它有许多简单的示例和许多我们每天都可以使用它的场合。在接下来的部分中，我们将包含一些简单而有用的示例，并进行解释。'
- en: Displaying received data on an interface
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在接口上显示接收到的数据
- en: In this example, we will print just the received data from the `eth0` interface.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将仅打印`eth0`接口接收到的数据。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is the interface that is my primary network connection to the Raspberry
    Pi that we are using in this course. If you are uncertain of your interface name,
    you can use the `ifconfig -a` command to display all the interfaces and choose
    the correct interface name on your system. If `ifconfig` is not found, try typing
    the full path `/sbin/ifconfig`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在本课程中使用的树莓派的主要网络连接接口。如果您不确定您的接口名称，可以使用`ifconfig -a`命令显示所有接口，并在您的系统上选择正确的接口名称。如果找不到`ifconfig`，请尝试输入完整路径`/sbin/ifconfig`。
- en: 'Using just the `ifconfig eth0` command, a heap of data can be printed to the
    screen. To show just the packets received, we can isolate the lines that contain
    `RX packets` (`RX` for received). This is where `grep` comes in:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用`ifconfig eth0`命令，就可以将大量数据打印到屏幕上。为了仅显示接收到的数据包，我们可以隔离包含`RX packets`（`RX`表示接收）的行。这就是`grep`发挥作用的地方：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the pipe or vertical bars we can take the output of the `ifconfig` command
    and send it to the input of the `grep` command. In this case, `grep` is searching
    for a very simple regular expression, "RX packet". The search string is case-sensitive,
    so we need to get this right or use the `-i` option with `grep` to run the search
    as case-insensitive, as shown in the following example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管道或竖线，我们可以将`ifconfig`命令的输出发送到`grep`命令的输入。在这种情况下，`grep`正在搜索一个非常简单的正则表达式，即"RX
    packet"。搜索字符串是区分大小写的，因此我们需要正确地获取这个或者使用`grep`的`-i`选项以不区分大小写地运行搜索，如下例所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The case-insensitive search is especially useful when searching for options
    on a configuration file, which often have a mixed-case.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索配置文件选项时，不区分大小写的搜索特别有用，因为配置文件通常是混合大小写的。
- en: 'We can see the result of the initial command in the following screenshot, confirming
    that we have been able to isolate just the single line of output, as shown:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到初始命令的结果，确认我们已经能够隔离出单行输出，如下所示：
- en: '![Displaying received data on an interface](img/00072.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![在接口上显示接收到的数据](img/00072.jpeg)'
- en: Displaying user account data
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示用户帐户数据
- en: 'The local user account database in Linux is the `/etc/passwd` file and this
    is readable by all user accounts. If we want to search for the line that contains
    our own data, we can use either our own login name in the search or use parameter
    expansion and the `$USER` variable. We can see this is the following command example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，本地用户帐户数据库是`/etc/passwd`文件，所有用户帐户都可以读取。如果我们想要搜索包含我们自己数据的行，我们可以在搜索中使用我们自己的登录名，或者使用参数扩展和`$USER`变量。我们可以在以下命令示例中看到这一点：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the input to `grep` comes from the `/etc/passwd` file and we
    search for the value of the `$USER` variable. Again, in this case, it is a simple
    text but it is still the regular expression, just without any operators.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`grep`的输入来自`/etc/passwd`文件，并且我们搜索`$USER`变量的值。同样，在这种情况下，它是一个简单的文本，但仍然是正则表达式，只是没有任何操作符。
- en: 'For completeness, we include the output in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，我们在下面的屏幕截图中包含了输出：
- en: '![Displaying user account data](img/00073.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![显示用户帐户数据](img/00073.jpeg)'
- en: 'We can extend this a little using this type of query as a condition within
    a script. We can use this to check if a user account exists before trying to create
    a new account. To keep the script as simple as possible and to ensure that the
    administrative rights are not required, creating the account will display just
    the prompt and conditional test in the following command-line example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这种类型的查询作为脚本中的条件来扩展一下。我们可以使用这个来检查用户帐户是否存在，然后再尝试创建一个新帐户。为了尽可能简化脚本，并确保不需要管理员权限，创建帐户将仅显示提示和条件测试，如下面的命令行示例所示：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `grep` search now makes use of the `$REPLY` variable populated by `read`.
    If I enter the name `pi`, a message will be displayed and we will exit because
    my user account is also called `pi`. There is no need to display the result from
    `grep`, we are just looking for a return code that is either `true` or `false`.
    To ensure that we do not see any unnecessary output if the user is in the file,
    we redirect the output from `grep` to the special device file `/dev/null`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`搜索现在使用由`read`填充的`$REPLY`变量。如果我输入名称`pi`，将显示一条消息，然后退出，因为我的用户帐户也叫`pi`。没有必要显示`grep`的结果，我们只是在寻找一个返回代码，要么是`true`要么是`false`。为了确保如果用户在文件中，我们不会看到任何不必要的输出，我们将`grep`的输出重定向到特殊设备文件`/dev/null`。'
- en: 'If you want to run this from the command line, you should start a new bash
    shell first. You can do this by simply typing `bash`. In this way, when the `exit`
    command runs it will not log you out but close the newly opened shell. We can
    see this happening and the results when specifying an existing user within the
    following graphic:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要从命令行运行此命令，应首先启动一个新的bash shell。您只需键入`bash`即可。这样，当`exit`命令运行时，它不会将您注销，而是关闭新打开的shell。我们可以看到这种情况发生以及在以下图形中指定现有用户时的结果：
- en: '![Displaying user account data](img/00074.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![显示用户帐户数据](img/00074.jpeg)'
- en: Listing the number of CPUs in a system
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出系统中的CPU数量
- en: 'Another really useful feature is that `grep` can count the matching lines and
    not display them. We can use this to count the number of CPU or CPU cores we have
    on a system. Each core or CPU is listed with a name in the `/proc/cpuinfo` file.
    We can then search for the text `name` and count the output; the `-c` option used
    is shown in the following example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的功能是`grep`可以计算匹配的行数并且不显示它们。我们可以使用这个来计算系统上的CPU或CPU核心的数量。每个核心或CPU在`/proc/cpuinfo`文件中都有一个名称。然后我们搜索文本`name`并计算输出；使用的`-c`选项如下例所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I am using a Raspberry Pi 2 and this has four cores, as shown in the following
    output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用Raspberry Pi 2，它有四个核心，如下面的输出所示：
- en: '![Listing the number of CPUs in a system](img/00075.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![列出系统中的CPU数量](img/00075.jpeg)'
- en: 'If we use the same code on a Raspberry Pi Model B that has a single core, we
    will see the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在具有单个核心的Raspberry Pi Model B上使用相同的代码，我们将看到以下输出：
- en: '![Listing the number of CPUs in a system](img/00076.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![列出系统中的CPU数量](img/00076.jpeg)'
- en: 'We can again make use of this in a script to verify if enough cores are available
    before running a CPU intensive task. To test this from the command line, we can
    use the following code that we execute on the Raspberry Pi with just the single
    core:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次在脚本中使用这个来验证在运行CPU密集任务之前是否有足够的核心可用。要从命令行测试这一点，我们可以在只有单个核心的Raspberry Pi上执行以下代码：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We only run bash at the start to ensure that we are not logged out of the system
    with the exit command. If this was in a script, this will not be required, as
    we will exit the script and not our shell session.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只在开始时运行bash，以确保我们不会因为退出命令而退出系统。如果这是在脚本中，这将是不需要的，因为我们将退出脚本而不是我们的shell会话。
- en: 'By running this on the Model B, we can see the results of the script and also
    the indication that we do not have the required number of cores:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Model B上运行此命令，我们可以看到脚本的结果，还可以看到我们没有所需数量的核心：
- en: '![Listing the number of CPUs in a system](img/00077.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![列出系统中的CPU数量](img/00077.jpeg)'
- en: 'If you had a requirement to run this check in more than one script, then you
    could create a function in a shared script and source the script holding the shared
    functions within the script that requires to be checked:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在多个脚本中运行此检查，则可以在共享脚本中创建一个函数，并在需要进行检查的脚本中引用包含共享函数的脚本：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If a parameter is passed to the function, then it is used as the required number
    of cores; otherwise, we set the value to `2` as the default. If we define this
    as a function in the shell on the Model B Raspberry Pi and display the details
    with the command type, we should see this as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果向函数传递了参数，则将其用作所需的核心数；否则，我们将默认值设置为`2`。如果我们在Model B Raspberry Pi的shell中定义这个作为函数，并使用`type`命令显示详细信息，我们应该会看到如下所示的情况：
- en: '![Listing the number of CPUs in a system](img/00078.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![列出系统中的CPU数量](img/00078.jpeg)'
- en: If we run this on a single-core system and specify the requirement of just the
    single core, we will see that there is no output when we meet the requirement.
    If we do not specify the requirement, then it will default to `2` cores and we
    will fail to meet the requirement and we exit the shell.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在单核系统上运行，并且指定了只有单核的要求，我们会看到当我们满足要求时没有输出。如果我们没有指定要求，那么默认为`2`个核心，我们将无法满足要求并退出shell。
- en: 'We can see the output of the function when run with the argument of `1` and
    then without arguments, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在使用参数`1`运行函数时的输出，然后在没有参数的情况下运行的输出，如下面的屏幕截图所示：
- en: '![Listing the number of CPUs in a system](img/00079.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![列出系统中的CPU数量](img/00079.jpeg)'
- en: We can see how useful even the basics of `grep` can be within the scripts and
    how we can use what we have learned to start creating usable modules to add to
    our scripts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到即使是`grep`的基础知识在脚本中也可以非常有用，以及我们可以利用所学知识开始创建可用的模块以添加到我们的脚本中。
- en: Parsing CSV files
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析CSV文件
- en: We will now look at creating a script to parse or format a CSV file. The formatting
    of the file will add new lines, tabs, and color to the output, so that it is more
    readable. We can then use `grep` to display single items from the CSV file. The
    practical application here is a catalog system based on the CSV files.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看一下创建一个解析或格式化CSV文件的脚本。文件的格式化将添加新行、制表符和颜色到输出中，以使其更可读。然后我们可以使用`grep`来显示CSV文件中的单个项目。这里的实际应用是基于CSV文件的目录系统。
- en: The CSV file
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSV文件
- en: 'The CSV file or list of comma separated values will come from the file tools
    that we have in a current directory. This is a catalog of products that we sell.
    The file contents are shown in the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件或逗号分隔值列表将来自我们当前目录中的名为tools的文件。这是我们销售产品的目录。文件内容显示如下输出：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is just a simple demonstration, so we don''t expect too much data but
    each item in the catalog consists of the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的演示，所以我们不希望有太多数据，但目录中的每个项目都包括以下内容：
- en: Name
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: Price
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格
- en: Units in stock
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存单位
- en: 'We can see that we have a drill which costs $99 and we have five units in stock.
    If we list the file with `cat` it is not very friendly; however, we can write
    a script to display the data in a more appealing way. We can create a new script
    called `$HOME/bin/parsecsv.sh`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有一把钻头，售价为99美元，我们有五个单位库存。如果我们使用`cat`列出文件，它并不友好；但是我们可以编写一个脚本以更吸引人的方式显示数据。我们可以创建一个名为`$HOME/bin/parsecsv.sh`的新脚本：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s works through this file and look at the pertinent steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步进行这个文件，并查看相关的步骤：
- en: '| Element | Meaning |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 含义 |'
- en: '| --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `OLDIFS="$IFS"` | The `IFS` variable stores the file separator and this is
    normally a white space. We can store the old `IFS` so that we can restore it later
    at the end of the script. Ensuring that we return the same environment once the
    script is complete, no matter how the script is run. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `OLDIFS="$IFS"` | `IFS`变量存储文件分隔符，通常是空格。我们可以存储旧的`IFS`，以便在脚本结束时恢复它。确保一旦脚本完成，无论脚本如何运行，都能返回相同的环境。'
- en: '| `IFS=","` | We set the separator to a comma to match what we need with a
    CSV file. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: 我们将分隔符设置为逗号，以匹配CSV文件的需要。
- en: '| `while read product price quantity` | We enter a `while` loop to populate
    three variables that we need: product, price, and quantity. The `while` loop will
    read the input file, line by line, and populate each of the variables. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `while read product price quantity` | 我们进入一个`while`循环以填充我们需要的三个变量：产品、价格和数量。`while`循环将逐行读取输入文件，并填充每个变量。'
- en: '| `echo …` | The `echo` command displays the product name in blue with double
    underscores underneath. The other variables are printed on new lines and tabbed
    in. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `echo …` | `echo`命令以蓝色显示产品名称，并在其下方显示双下划线。其他变量将打印在新行上并进行制表。'
- en: '| `done <"$1"` | This is where we read the input file, which we pass as an
    argument to the script. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `done <"$1"` | 这是我们读取输入文件的地方，我们将其作为脚本的参数传递。 |'
- en: 'The script is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本显示在以下截图中：
- en: '![The CSV file](img/00080.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![CSV文件](img/00080.jpeg)'
- en: 'We can execute the script with the tools catalog file located in the current
    directory using the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令在当前目录中执行工具目录文件的脚本：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To look at how this will display, we can view the partial output from the following
    screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看这将如何显示，我们可以查看以下截图的部分输出：
- en: '![The CSV file](img/00081.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![CSV文件](img/00081.jpeg)'
- en: We are now starting to get the idea that we have a lot of power at the command
    line to format files in a more readable way and a plain text file does not need
    to be plain.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始意识到我们在命令行上有很大的能力以更可读的方式格式化文件，而纯文本文件不需要是单调的。
- en: Isolating catalog entries
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隔离目录条目
- en: 'If we need to search for one entry, then we need more than just one line. The
    entry is in three lines. So, if we search for the hammer, we need to go to the
    hammer line and the two lines that follow. We do this using the `-A` option to
    `grep`. We need to display the matching line and two lines after. This will be
    expressed by the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要搜索一个条目，那么我们需要不止一行。该条目占据了三行。因此，如果我们搜索锤子，我们需要转到锤子行和其后的两行。我们可以使用`grep`的`-A`选项来做到这一点。我们需要显示匹配的行和之后的两行。这将由以下代码表示：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is displayed in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下截图中显示：
- en: '![Isolating catalog entries](img/00082.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![隔离目录条目](img/00082.jpeg)'
- en: Using regular expressions
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正则表达式
- en: So far, we have maintained our use of **regular expressions** (**RE**) to simple
    text but there is, of course, a lot more to learn from them. Although people may
    often think that the RE seems like comic book profanity that you may see in a
    Batman fight, they do have a powerful meaning.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直将**正则表达式**（**RE**）用于简单的文本，但当然还有很多东西可以从中学到。尽管人们经常认为正则表达式看起来像是在蝙蝠侠打斗中可能看到的漫画书亵渎语，但它们确实有强大的含义。
- en: Working with alternate spellings
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用替代拼写
- en: 'To start with, let''s look at some anomalies in spelling. The word color may
    be spelled colour or color depending upon if we were working with UK English or
    US English. This can give rise to issues when searching for the word color, as
    it may be spelled in two ways. Implementing the following command will return
    only the first line containing the word color and not the second line:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下拼写上的一些异常。单词"color"可能会根据我们使用的是英式英语还是美式英语而拼写为"colour"或"color"。这可能会导致搜索"color"这个词时出现问题，因为它可能以两种方式拼写。实施以下命令将仅返回包含单词"color"的第一行，而不是第二行：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we need to return both spellings, then we can use an `RE` operator. We will
    make use of the `?` operator. You should be aware that in an `RE` the `?` operator
    is not the same as in the shell. In an `RE` the `?` operator means that the previous
    character is optional. When running `RE` with extra operators, we may need to
    run `grep -E` or `egrep` for the enhanced RE engine:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要返回两种拼写，那么我们可以使用一个`RE`运算符。我们将使用`?`运算符。您应该知道，在`RE`中，`?`运算符与shell中的不同。在`RE`中，`?`运算符表示前一个字符是可选的。当运行带有额外运算符的`RE`时，我们可能需要运行`grep
    -E`或`egrep`以获得增强的RE引擎：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can see this in operation with a quick look at the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过快速查看以下截图来看到这一点：
- en: '![Working with alternate spellings](img/00083.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用替代拼写](img/00083.jpeg)'
- en: How many words have four consecutive vowels?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有多少单词有四个连续的元音字母？
- en: This ladies and gentlemen is why REs are so important and they are worth persevering
    with. We can also think of some fun games or crossword solvers. The more fun we
    have with REs, the easier they are to use. Many Linux systems include a dictionary
    file located at `/usr/share/dict/words` and we will use this file if it exits
    on your system.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这位女士们先生们，这就是为什么RE如此重要，值得坚持。我们还可以想一些有趣的游戏或填字游戏求解器。我们对RE玩得越开心，使用起来就越容易。许多Linux系统包括一个位于`/usr/share/dict/words`的字典文件，如果您的系统上存在这个文件，我们将使用它。
- en: 'How many words can you think of that have four consecutive vowels? Not sure,
    then let''s search the file with `grep` and REs:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想到有四个连续元音字母的单词有多少？不确定的话，那就让我们用`grep`和RE来搜索文件：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, you can see that we use the square brackets. These have the same meaning
    as within the shell and `OR` the grouped characters, as a list. The resulting
    search is for the letter `a` or `e` or `i` or `o` or `u`. Adding the brace brackets
    at the end enables multipliers. Having just the number `4` in the braces indicates
    that we are looking for four vowels consecutive row.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以看到我们使用了方括号。这与shell中的含义相同，并且`OR`分组字符，作为列表。结果搜索是字母`a`或`e`或`i`或`o`或`u`。在括号末尾添加大括号启用了乘法器。在大括号中只有数字`4`表示我们正在寻找四个连续的元音字母。
- en: 'We can see this demonstrated in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到这一点：
- en: '![How many words have four consecutive vowels?](img/00084.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![有多少单词有四个连续的元音字母？](img/00084.jpeg)'
- en: How cool is this? We will never have unfinished crosswords now and no excuse
    for losing at Scrabble either.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这有多酷？现在我们永远不会有未完成的填字游戏了，也没有借口在Scrabble上输了。
- en: RE anchors
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RE锚点
- en: 'We have already used RE anchors when removing commented lines and blank lines
    with the `clean_file` function. The `^` or carat represents the start of the line
    and the `$` represents the end of the line. If we want to list words that begin
    with `ante` from the dictionary file, we will write the following query:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`clean_file`函数删除注释行和空行时，我们已经使用了RE锚点。`^`或插入符号代表行的开头，`$`代表行的结尾。如果我们想列出从字典文件开始的以`ante`开头的单词，我们将编写以下查询：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result should show anteater, antelope, antenna, and so on. If we want to
    query for words that end with `cord` we will use:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该显示anteater，antelope，antenna等。如果我们想查询以`cord`结尾的单词，我们将使用：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will print a little less and on my system lists the words accord, concord,
    cord, discord, and record.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印少量内容，并在我的系统上列出单词accord，concord，cord，discord和record。
- en: So, even though this only introduces a small amount of what we can achieve with
    regular expressions, we should appreciate what we can gain from knowing just this
    small amount.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使这只是介绍了正则表达式的一小部分，我们也应该欣赏到我们可以从仅知道这么一点点中获得的东西。
- en: Understanding the basics of sed
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解sed的基础知识
- en: Having built a little foundation, we can now start to look at some of the operations
    of `sed`. The commands will be supplied with most Linux systems and are core commands.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立了一点基础之后，我们现在可以开始查看`sed`的一些操作。这些命令将在大多数Linux系统中提供，并且是核心命令。
- en: 'We will dive directly into some simple examples:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接深入一些简单的例子：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `p` operator will print the matched pattern. In this case, we have not
    specified a pattern so we will match everything. Printing the matched lines without
    suppressing `STDOUT` will duplicate lines. The result of this operation is to
    print all the lines in the `passwd` file twice. To suppress `STDOUT`, we use the
    `-n` option:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`p`运算符将打印匹配的模式。在这种情况下，我们没有指定模式，所以我们将匹配所有内容。在不抑制`STDOUT`的情况下打印匹配的行将重复行。这个操作的结果是将`passwd`文件中的所有行都打印两次。要抑制`STDOUT`，我们使用`-n`选项：'
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Brilliant!!We have just reinvented the `cat` command. We can now specifically
    work with just a range of lines:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们刚刚重新发明了`cat`命令。现在我们可以专门处理一系列行：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we have reinvented the `head` command, but we can also specify the range
    in an RE to recreate the `grep` command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经重新发明了`head`命令，但我们也可以在RE中指定范围来重新创建`grep`命令：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can see this demonstrated in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到这一点：
- en: '![Understanding the basics of sed](img/00085.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![理解sed的基础知识](img/00085.jpeg)'
- en: Substituting command
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换命令
- en: We have seen the `p` command for printing the pattern space. We will now look
    at the substitute command or `s`. With this command, we can replace one string
    with another. Again by default, we send the output to the `STDOUT` and do not
    edit the file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了用于打印模式空间的`p`命令。现在我们将看一下替换命令或`s`。通过这个命令，我们可以用另一个字符串替换一个字符串。同样，默认情况下，我们将输出发送到`STDOUT`，并且不编辑文件。
- en: 'To replace the default shell of the user `pi`, we can use the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要替换用户`pi`的默认shell，我们可以使用以下命令：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We continue the earlier instance using the `p` command to print the matched
    pattern and use the `-n` option to suppress `STDOUT`. We search for lines beginning
    with `pi`. This represents the username. We then issue the `s` command to substitute
    text in those matched lines. This takes two arguments, the first is the text to
    search for and the second represents the text used to replace the original. In
    this case, we look for `bash` and replace it with `sh`. This is simple and does
    work but it may not be reliable in the long term. We can see the output in the
    following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续使用`p`命令来打印匹配的模式，并使用`-n`选项来抑制`STDOUT`。我们搜索以`pi`开头的行。这代表用户名。然后我们使用`s`命令来替换这些匹配的行中的文本。这需要两个参数，第一个是要搜索的文本，第二个代表用于替换原始文本的文本。在这种情况下，我们搜索`bash`并将其替换为`sh`。这很简单，确实有效，但从长远来看可能不太可靠。我们可以在下面的截图中看到输出：
- en: '![Substituting command](img/00086.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![替换命令](img/00086.jpeg)'
- en: 'We must emphasize that currently we are not editing the file and just displaying
    it to the screen. The original `passwd` file remains untouched and we can run
    this as a standard user. I mentioned in the previous example that the search may
    be less than reliable as the string we are searching for is `bash`. This is very
    short and perhaps it can be included elsewhere on a matched line. Potentially,
    someone''s last name may be "Tabash", which includes the string `bash`. We can
    extend the search to look for `/bin/bash` and replace it with `/bin/sh`. However,
    this introduces another problem, which is, the default delimiter is the forward
    slash so we will have to escape each forward slash we use in the search and replace
    string, which is:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须强调，目前我们并没有编辑文件，只是将其显示在屏幕上。原始的`passwd`文件保持不变，我们可以以标准用户身份运行这个命令。我在前面的例子中提到，搜索可能不太可靠，因为我们要搜索的字符串是`bash`。这个字符串非常短，也许它可以在匹配的行中的其他地方被包含。可能某人的姓氏是"Tabash"，其中包含字符串`bash`。我们可以扩展搜索以查找`/bin/bash`并将其替换为`/bin/sh`。然而，这引入了另一个问题，即默认分隔符是斜杠，所以我们必须转义我们在搜索和替换字符串中使用的每个斜杠，即：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This is an option but it is not a tidy option. A better solution is to know
    that the first delimiter we use defines the delimiters. In other words, you can
    use any character as a delimiter. Using the `@` symbol may be a good idea in this
    scenario, as it does not appear in either the search or the replace string:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个选择，但不是一个整洁的选择。更好的解决方案是知道我们使用的第一个分隔符定义了分隔符。换句话说，您可以使用任何字符作为分隔符。在这种情况下，使用`@`符号可能是一个好主意，因为它既不出现在搜索字符串中，也不出现在替换字符串中：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We now have a more reliable search and a readable command line to work with,
    which is always a good thing. We replace just the first occurrence on each line
    of `/bin/bash` with `/bin/sh`. If we need to replace more than the first occurrence,
    we add the `g` command for global at the end:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个更可靠的搜索和可读的命令行，这总是一件好事。我们只替换每行的第一个出现的`/bin/bash`为`/bin/sh`。如果我们需要替换不止第一个出现，我们在最后加上`g`命令以进行全局替换：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In our case, it is not required but it is good to know.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这并不是必需的，但了解这一点是很好的。
- en: Editing the file
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑文件
- en: If we want to edit the file we can use the `-i` option. We will need permissions
    to work with the file but we can make a copy of the file to work with, so we don't
    harm any system file or require additional access.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要编辑文件，我们可以使用`-i`选项。我们需要有权限来处理文件，但我们可以复制文件以便处理，这样就不会损害任何系统文件或需要额外的访问权限。
- en: 'We can copy the `passwd` file locally:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`passwd`文件复制到本地：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We finish with the `cd` command to ensure that we are working in the home directory
    and the local `passwd` file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`cd`命令结束，以确保我们在家目录和本地`passwd`文件中工作。
- en: 'The `-i` option is used to run an in-place update. We will not need the `-n`
    option or the `p` command when editing the file. As such, the command is as simple
    as the following example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`-i`选项用于进行原地更新。在编辑文件时，我们将不需要`-n`选项或`p`命令。因此，命令就像下面的例子一样简单：'
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There will be no output to the command but the file will now reflect the change.
    The following screenshot shows the command usage:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 命令不会有任何输出，但文件现在将反映出更改。下面的截图显示了命令的使用：
- en: '![Editing the file](img/00087.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![编辑文件](img/00087.jpeg)'
- en: 'We should make a backup before we make the change by appending a string directly
    after the `-i` option and without any spaces. This is shown in the following example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行更改之前，我们应该备份文件，直接在`-i`选项后附加一个字符串，不加任何空格。这在下面的例子中显示：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If we want to see this, we can reverse the search and replace strings:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要查看这个，我们可以反转搜索和替换字符串：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will set the local `passwd` file to be the same as it was before and we
    will have a `passwd.bak` with the previous set of changes. This keeps us safe
    with a rollback option if we need it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使本地的`passwd`文件与之前一样，并且我们将有一个`passwd.bak`，其中包含之前的一系列更改。这样如果需要，我们就有了一个回滚选项，可以确保安全。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Another great chapter that you have firmly under your belt and I hope this was
    really useful to you. Although, we want to concentrate on using `sed`, we started
    with how powerful `grep` can be both inside and outside our scripts. This led
    us to the Regular Expressions before taking a look at just a few of the possibilities
    of `sed`. Although, we have only just touched `sed`, we will start extending this
    in the next chapter were we will expand upon what we have learned. This will take
    the form of scripting Apache Virtual Hosts by first extracting commented data
    from the current configuration, uncommenting and writing it to a template. We
    can then use the template to create new Virtual Hosts. The workhorse of all these
    operations will be `sed` and `sed` scripts.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个你牢牢掌握的伟大章节，我希望这对你真的很有用。虽然我们想集中使用`sed`，但我们从`grep`的强大之处开始，无论是在脚本内部还是外部。这使我们在查看`sed`的可能性之前先了解了正则表达式。虽然我们只是初步接触了`sed`，但我们将在下一章中开始扩展这一点，我们将扩展我们所学到的知识。这将以从当前配置中提取注释数据开始，取消注释并将其写入模板的形式进行。然后我们可以使用模板来创建新的虚拟主机。所有这些操作的工作马是`sed`和`sed`脚本。
