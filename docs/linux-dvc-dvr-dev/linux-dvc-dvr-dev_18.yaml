- en: RTC Drivers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RTC驱动程序
- en: '**Real Time Clock** (**RTC** ) are devices used to tracks absolute time in
    nonvolatile memory, which may be internal to the processor, or externally connected
    through the I2C or SPI bus.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**实时时钟**（**RTC**）是用于在非易失性存储器中跟踪绝对时间的设备，可以是内部到处理器，也可以是通过I2C或SPI总线外部连接的。'
- en: 'One may use an RTC to do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用RTC执行以下操作：
- en: Read and set the absolute clock, and generate interrupts during clock updates
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和设置绝对时钟，并在时钟更新期间生成中断
- en: Generate periodic interrupts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成周期性中断
- en: Set alarms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置闹钟
- en: 'RTCs and the system clock have different purposes. The former is a hardware
    clock that maintains absolute time and date in a nonvolatile manner, whereas the
    last is a software clock maintained by the kernel and used to implement the `gettimeofday(2)`
    and `time(2)` system calls, as well as setting timestamps on files, and so on.
    The system clock reports seconds and microseconds from a start point, defined
    to be the POSIX epoch: `1970-01-01 00:00:00 +0000 (UTC)` .'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: RTC和系统时钟有不同的目的。前者是硬件时钟，以非易失性方式维护绝对时间和日期，而后者是由内核维护的软件时钟，用于实现`gettimeofday(2)`和`time(2)`系统调用，以及在文件上设置时间戳等。系统时钟报告从起始点开始的秒和微秒，定义为POSIX纪元：`1970-01-01
    00:00:00 +0000 (UTC)`。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing RTC framework API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍RTC框架API
- en: Describing such driver's architecture, along with a dummy driver example
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述此类驱动程序的架构，以及一个虚拟驱动程序示例
- en: Dealing with alarms
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理闹钟
- en: Managing RTC devices from user space, either through the sysfs interface, or
    using the hwclock tool
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户空间管理RTC设备，可以通过sysfs接口或使用hwclock工具
- en: RTC framework data structures
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RTC框架数据结构
- en: There are three main data structures used by the RTC framework on Linux systems.
    They are `strcut rtc_time` , `struct rtc_device` , and `struct rtc_class_ops`
    structures. The former is an opaque structure that represents a given date and
    time; the second structure represents the physical RTC device; and the last one
    represents a set of operations exposed by the driver and used by the RTC core
    to read/update a device's date/time/alarm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统上，RTC框架使用三种主要数据结构。它们是`strcut rtc_time`，`struct rtc_device`和`struct rtc_class_ops`结构。前者是表示给定日期和时间的不透明结构；第二个结构表示物理RTC设备；最后一个表示驱动程序公开的一组操作，并由RTC核心用于读取/更新设备的日期/时间/闹钟。
- en: 'The only header needed to pull RTC functions from within your driver is :'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从驱动程序中提取RTC函数所需的唯一标头是：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The same file contains all of the three structures enumerated in the preceding
    section:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个文件包含了前一节中列举的三个结构：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This structure is similar to the `struct tm` in `<time.h>` , used to pass time.
    The next structure is `struct rtc_device,` which represent the chip in the kernel:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构类似于`<time.h>`中的`struct tm`，用于传递时间。下一个结构是`struct rtc_device`，它代表内核中的芯片：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following are the meanings of the elements of the structure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结构的元素的含义：
- en: '`dev` : This is the device structure.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`：这是设备结构。'
- en: '`owner` : This is the module that owns this RTC device. Using `THIS_MODULE`
    will be enough.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`owner`：这是拥有此RTC设备的模块。使用`THIS_MODULE`就足够了。'
- en: '`id` : This is the global index given to the RTC device by the kernel `/dev/rtc<id>`
    .'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：这是内核为RTC设备分配的全局索引`/dev/rtc<id>`。'
- en: '`name` : This is the name given to the RTC device.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是给RTC设备的名称。'
- en: '`ops` : This is a set of operations (like read/set time/alarm) exposed by this
    RTC device to be managed by the core or from user space.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ops`：这是由RTC设备公开的一组操作（如读取/设置时间/闹钟），由核心或用户空间管理。'
- en: '`ops_lock` : This is a mutex used internally by the kernel to protect ops functions
    call.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ops_lock`：这是内核内部使用的互斥锁，用于保护ops函数调用。'
- en: '`cdev` : This is the char device associated to this RTC, `/dev/rtc<id>` .'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cdev`：这是与此RTC相关联的字符设备，`/dev/rtc<id>`。'
- en: 'The next important structure is `struct rtc_class_ops` , which is a set of
    functions used as callback to perform standard and limited on the RTC device.
    It is the communication interface between top-layer and bottom-layer RTC drivers:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要的结构是`struct rtc_class_ops`，它是一组用作回调的函数，用于在RTC设备上执行标准和有限的操作。它是顶层和底层RTC驱动程序之间的通信接口：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All of the hooks in the preceding code are given a `struct device` structure
    as parameter, which is the same as the one embedded in the `struct rtc_device`
    structure. This means that from within these hooks, one can access the RTC device
    itself at any given time, using the `to_rtc_device()` macro, which is built on
    top of the `container_of()` macro.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，所有的钩子都以`struct device`结构作为参数，这与嵌入在`struct rtc_device`结构中的结构相同。这意味着从这些钩子中，可以随时访问RTC设备，使用`to_rtc_device()`宏，该宏建立在`container_of()`宏之上。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `open()` , `release()` , and `read_callback()` hooks are internally called
    by the kernel when the `open()` , `close()` , or `read()` functions are called
    on the device from user space.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户空间对设备调用`open()`，`release()`和`read_callback()`函数时，内核会内部调用这些钩子。
- en: '`read_time()` is a driver function that reads the time from the device and
    fills the `struct rtc_time` output argument. This function should return `0` on
    success, or else the negative error code.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_time()`是一个从设备读取时间并填充`struct rtc_time`输出参数的驱动程序函数。此函数应在成功时返回`0`，否则返回负错误代码。'
- en: '`set_time()` is a driver function that updates the device''s time according
    to the `struct rtc_time` structure given as the input parameter. Return parameter''s
    remarks are the same as the `read_time` function.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_time()`是一个驱动程序函数，根据输入参数给定的`struct rtc_time`结构更新设备的时间。返回参数的备注与`read_time`函数相同。'
- en: If your device supports an alarm feature, `read_alarm()` and `set_alarm()` should
    be provided by the driver to read/set the alarm on the device. The `struct rtc_wkalrm`
    will be described later in the chapter. `alarm_irq_enable()` should be provided
    too, to enable the alarm.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的设备支持闹钟功能，驱动程序应提供`read_alarm()`和`set_alarm()`来读取/设置设备上的闹钟。`struct rtc_wkalrm`将在后面的章节中描述。还应提供`alarm_irq_enable()`来启用闹钟。
- en: RTC API
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RTC API
- en: 'An RTC device is represented in the kernel as an instance of the `struct rtc_device`
    structure. Unlike other kernel framework devices registrations(where the device
    is given as parameter to the registering function), the RTC device is built by
    the core, and registered first before the `rtc_device` structure gets returned
    to the driver. The device is built and registered with the kernel using the `rtc_device_register()`
    function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: RTC设备在内核中表示为`struct rtc_device`结构的实例。与其他内核框架设备注册不同（其中设备作为参数提供给注册函数），RTC设备由核心构建并首先注册，然后`rtc_device`结构返回给驱动程序。使用`rtc_device_register()`函数将设备与内核构建和注册：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One can see the meaning of each parameter of the functions, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到每个函数的每个参数的含义如下：
- en: '`name` : This is your RTC device name. It could be the chip''s name, for example:
    ds1343.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是您的RTC设备名称。它可以是芯片的名称，例如：ds1343。'
- en: '`dev` : This is the parent device, used for device model purposes. For chips
    sitting on I2C or SPI buses, for example, `dev` could be set with `spi_device.dev`
    , or `i2c_client.dev` .'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`：这是父设备，用于设备模型的目的。例如，对于位于I2C或SPI总线上的芯片，`dev`可以使用`spi_device.dev`或`i2c_client.dev`进行设置。'
- en: '`ops` : This is your RTC ops, filled according to the features the RTC has,
    or those your driver can support.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ops`：这是您的RTC操作，根据RTC具有的功能或驱动程序可以支持的功能进行填充。'
- en: '`owner` : This is the module to which this RTC device belongs. In most cases,
    `THIS_MODULE` is enough.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`owner`：这是此RTC设备所属的模块。在大多数情况下，`THIS_MODULE`就足够了。'
- en: 'The registration should be performed in the `probe` function, and obviously,
    one can use the resource-managed version of this function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注册应该在`probe`函数中执行，显然，可以使用此函数的资源管理版本：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Both functions return a pointer on a `struct rtc_device` structure built by
    the kernel on success, or a pointer error on which you should use `IS_ERR` and
    `PTR_ERR` macros.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数在成功时返回由内核构建的`struct rtc_device`结构的指针，或者返回一个指针错误，您应该使用`IS_ERR`和`PTR_ERR`宏。
- en: 'Associated reverse operations are `rtc_device_unregister()` and `devm_ rtc_device_unregister()`
    :'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的反向操作是`rtc_device_unregister()`和`devm_ rtc_device_unregister()`：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Reading and setting time
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和设置时间
- en: The driver is responsible for providing functions to read and set the device's
    time. These are the least an RTC driver can provide. When it comes to reading,
    the read callback function is given a pointer to an allocated/zeroed `struct rtc_time`
    structure, which the driver has to fill. Therefore, RTCs almost always store/restitute
    time in **Binary Coded Decimal** (**BCD** ), where each quartet (series of 4 bits)
    represents a number between 0 and 9 (rather than between 0 and 15). The kernel
    provides two macros, `bcd2bin()` and `bin2bcd()` , to convert respectively from
    BCD-encoding to decimal, or from decimal to BCD. The next things you should pay
    attention to are some `rtc_time` fields, which have some boundaries requirements,
    and where some translation must be done. Data is read in BCD from the device,
    and should be converted using `bcd2bin()` .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序负责提供用于读取和设置设备时间的函数。这是RTC驱动程序可以提供的最少功能。在读取方面，读取回调函数被给予一个已分配/清零的`struct rtc_time`结构的指针，驱动程序必须填充该结构。因此，RTC几乎总是以**二进制编码十进制**（**BCD**）存储/恢复时间，其中每个四位数（4位的一系列）代表0到9之间的数字（而不是0到15之间的数字）。内核提供了两个宏，`bcd2bin()`和`bin2bcd()`，分别用于将BCD编码转换为十进制，或将十进制转换为BCD。接下来您应该注意的是一些`rtc_time`字段，它们具有一些边界要求，并且需要进行一些转换。数据以BCD形式从设备中读取，应使用`bcd2bin()`进行转换。
- en: 'Since the `struct rtc_time` structure is complex, the kernel provides the `rtc_valid_tm()`
    helper, in order to validate a given `rtc_time` structure, and which returns `0`
    on success, meaning the structure represents a valid date/time:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`struct rtc_time`结构比较复杂，内核提供了`rtc_valid_tm()`辅助函数，以验证给定的`rtc_time`结构，并在成功时返回`0`，表示该结构表示一个有效的日期/时间：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following sample describes an RTC-read operation callback:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例描述了RTC读取操作的回调：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following header is necessary prior to using BCD-conversion functions:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用BCD转换函数之前，需要以下标头：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When it comes to the `set_time` function, a pointer to a `struct rtc_time`
    is given as an input parameter. This parameter is already filled with values to
    be stored in the RTC chip. Unfortunately, these are decimal-encoded, and should
    be converted into BCD prior to being sent to the chip. `bin2bcd` does the conversion.
    The same attention should be paid to some fields of the `struct rtc_time` structure.
    The following is a pseudo-code describing a generic `set_time` function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`set_time`函数中，输入参数是指向`struct rtc_time`的指针。该参数已经填充了要存储在RTC芯片中的值。不幸的是，这些值是十进制编码的，应在发送到芯片之前转换为BCD。`bin2bcd`进行转换。对`struct
    rtc_time`结构的一些字段也应该引起注意。以下是描述通用`set_time`函数的伪代码：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: RTC's epoch differs from the POSIX epoch, which is only used for the system
    clock. If the year according to the RTC's epoch and the year register is less
    than 1970, it is assumed to be 100 years later, that is, between 2000 and 2069.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: RTC的纪元与POSIX纪元不同，后者仅用于系统时钟。如果根据RTC的纪元和年寄存器的年份小于1970年，则假定它比实际时间晚100年，即在2000年至2069年之间。
- en: Driver example
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序示例
- en: 'One can summarize the preceding concepts in a simple and fake driver, which
    simply registers an RTC device on the system:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用一个简单的虚拟驱动程序总结前面的概念，该驱动程序只是在系统上注册一个RTC设备：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Playing with alarms
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作闹钟
- en: 'RTC alarms are programmable events to be triggered by the device at a given
    time. An RTC alarm is represented as an instance of the `struct rtc_wkalarm` structure:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: RTC闹钟是设备在特定时间触发的可编程事件。RTC闹钟表示为`struct rtc_wkalarm`结构的实例：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The driver should provide `set_alarm()` and `read_alarm()` operations, to set
    and read time at which the alarm should occur, as well as `alarm_irq_enable()`
    , which is a function used to enable/disable the alarm. When the `set_alarm()`
    function is invoked, it is given as an input parameter, a pointer to a `struct
    rtc_wkalrm` , whose `.time` field contains the time the alarm must be set to.
    It is up to the driver to extract each value in a correct manner (using `bin2dcb()`
    if necessary), and write it into the device in appropriate registers. `rtc_wkalrm.enabled`
    tell if the alarm should be enabled right after it has been set. If true, the
    driver must enable the alarm in the chip. The same is true for `read_alarm()`
    that is given a pointer to `struct rtc_wkalrm` , but as an output parameter this
    time. The driver has to fill the structure with data read from the device.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序应提供`set_alarm()`和`read_alarm()`操作，以设置和读取警报应发生的时间，以及`alarm_irq_enable()`，这是一个用于启用/禁用警报的函数。当调用`set_alarm()`函数时，它将作为输入参数给出一个指向`struct
    rtc_wkalrm`的指针，其中的`.time`字段包含必须设置警报的时间。由驱动程序以正确的方式提取每个值（如有必要，使用`bin2dcb()`），并将其写入适当的寄存器中。`rtc_wkalrm.enabled`告诉警报设置后是否应启用警报。如果为true，则驱动程序必须在芯片中启用警报。对于`read_alarm()`也是如此，它给出了一个指向`struct
    rtc_wkalrm`的指针，但这次作为输出参数。驱动程序必须使用从设备中读取的数据填充结构。
- en: '`{read | set}_alarm()` and `{read | set}_time()` functions behave the same
    way, except that each pair of functions reads/stores data from/into different
    sets of registers in the device.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`{read | set}_alarm()`和`{read | set}_time()`函数的行为方式相同，只是每对函数从/存储数据到设备的不同寄存器集。'
- en: 'Prior to report alarm event to the system, it is mandatory to connect the RTC
    chip to an IRQ line of the SoC. It relies on INT line of the RTC driven low when
    the alarm occur. Depending on the manufacturer, the line remains low until a status
    register get read, or a special bit get cleared:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在向系统报告警报事件之前，必须将RTC芯片连接到SoC的IRQ线上。它依赖于RTC的INT线在警报发生时被拉低。根据制造商，该线保持低电平，直到读取状态寄存器或清除特殊位为止：
- en: '![](img/Image00037.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00037.jpg)'
- en: 'At this point we can use a generic IRQ API, such as `request_threaded_irq()`
    , in order to register the alarm IRQ''s handler. From within the IRQ handler,
    it is important to inform the kernel about the RTC IRQ event, using the `rtc_update_irq()`
    function:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以使用通用的IRQ API，例如`request_threaded_irq()`，以注册警报IRQ的处理程序。在IRQ处理程序内部，重要的是使用`rtc_update_irq()`函数通知内核有关RTC
    IRQ事件：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`rtc` : This is the rtc device that raised the IRQ'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rtc`：这是引发IRQ的RTC设备'
- en: '`num` : This shows how many IRQs are being reported (usually one)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num`：显示正在报告的IRQ数量（通常为一个）'
- en: '`events` : This is a mask of `RTC_IRQF` with one or more of `RTC_PF` , `RTC_AF`
    , `RTC_UF`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events`：这是带有一个或多个`RTC_PF`，`RTC_AF`，`RTC_UF`的`RTC_IRQF`掩码'
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That function can be called from any context, atomic or not. The IRQ handler
    could look as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数可以从任何上下文中调用，无论是原子的还是非原子的。IRQ处理程序可能如下所示：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Keep in mind that RTC devices that have the alarm feature can be used as a
    wake-up source. That said, the system can be woken up from suspend mode whenever
    the alarm triggers. This feature relies on the interrupt raised by the RTC device.
    One declares a device as being wake-up source using the `device_init_wakeup()`
    function. The IRQ that actually wakes the system up must be registered with the
    power management core too, using the `dev_pm_set_wake_irq()` function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，具有警报功能的RTC设备可以用作唤醒源。也就是说，每当警报触发时，系统都可以从挂起模式唤醒。此功能依赖于RTC设备引发的中断。使用`device_init_wakeup()`函数声明设备为唤醒源。实际唤醒系统的IRQ也必须使用电源管理核心注册，使用`dev_pm_set_wake_irq()`函数：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will not discuss power management in detail in this book. The idea is just
    to give you an overview of how RTC devices may improve your system. The driver
    `drivers/rtc/rtc-ds1343.c` may help to implement such functions. Let us put everything
    together by writing a fake `probe` function for an SPI foo RTC device:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在本书中详细讨论电源管理。想法只是为了让您了解RTC设备如何改进您的系统。驱动程序`drivers/rtc/rtc-ds1343.c`可能有助于实现这些功能。让我们通过为SPI
    foo RTC设备编写一个虚假的`probe`函数来将所有内容放在一起：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: RTCs and user space
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RTC和用户空间
- en: On Linux systems, there are two kernel options one needs to care about in order
    to properly manage RTCs from user space. These are `CONFIG_RTC_HCTOSYS` and `CONFIG_RTC_HCTOSYS_DEVICE`
    .
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统中，为了正确地从用户空间管理RTC，有两个内核选项需要关注。这些选项是`CONFIG_RTC_HCTOSYS`和`CONFIG_RTC_HCTOSYS_DEVICE`。
- en: '`CONFIG_RTC_HCTOSYS` includes the code file `drivers/rtc/hctosys.c` in kernel
    build process, which sets system time from the RTC on startup and resume. Once
    this option is enabled, the system time will be set using the value read from
    the specified RTC device. RTC devices should be specified in `CONFIG_RTC_HCTOSYS_DEVICE`
    :'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONFIG_RTC_HCTOSYS`在内核构建过程中包括代码文件`drivers/rtc/hctosys.c`，该文件在启动和恢复时从RTC设置系统时间。启用此选项后，系统时间将使用从指定RTC设备读取的值进行设置。RTC设备应在`CONFIG_RTC_HCTOSYS_DEVICE`中指定：'
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, we tell the kernel to set the system time from the
    RTC, and we specify that the RTC to use is `rtc0` .
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们告诉内核从RTC设置系统时间，并指定要使用的RTC为`rtc0`。
- en: The sysfs interface
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sysfs接口
- en: 'The kernel code responsible for instantiating RTC attributes in sysfs is defined
    in `drivers/rtc/rtc-sysfs.c` , in the kernel source tree. Once registered, an
    RTC device will create a `rtc<id>` directory under `/sys/class/rtc` . That directory
    contains a set of read-only attributes, among which the most important are:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 负责在sysfs中实例化RTC属性的内核代码在内核源树中的`drivers/rtc/rtc-sysfs.c`中定义。一旦注册，RTC设备将在`/sys/class/rtc`目录下创建一个`rtc<id>`目录。该目录包含一组只读属性，其中最重要的是：
- en: '`date` : This file prints the current date of the RTC interface:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`：此文件打印RTC接口的当前日期：'
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`time` : This prints the current time of this RTC:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time`：打印此RTC的当前时间：'
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`hctosys` : This attribute indicates whether the RTC device is the one specified
    in `CONFIG_RTC_HCTOSYS_DEVICE` , meaning that this RTC is used to set system time
    on startup and resume. Read `1` as true, and `0` as false:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hctosys`：此属性指示RTC设备是否是`CONFIG_RTC_HCTOSYS_DEVICE`中指定的设备，这意味着此RTC用于在启动和恢复时设置系统时间。将`1`读为true，将`0`读为false：'
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`dev` : This attribute shows the device''s major and minor. Read as major:minor:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`：此属性显示设备的主要和次要。读作major:minor：'
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`since_epoch` : This attribute will print the number of seconds elapsed since
    the UNIX epoch (since January 1rst 1970):'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`since_epoch`：此属性将打印自UNIX纪元（1970年1月1日）以来经过的秒数：'
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The hwclock utility
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hwclock实用程序
- en: '**Hardware clock** (**hwclock** ) is a tool used to access RTC devices. The
    `man hwclock` command will probably be much more meaningful than everything discussed
    in this section. That said, let us write some commands, to set hwclock RTC from
    the system clock:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**硬件时钟**（**hwclock**）是用于访问RTC设备的工具。`man hwclock`命令可能比本节讨论的所有内容更有意义。也就是说，让我们写一些命令，从系统时钟设置hwclock
    RTC：'
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding example assumes the host has a network connection on which it
    can access an NTP server. It is also possible to set the system time manually:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子假设主机有一个可以访问NTP服务器的网络连接。也可以手动设置系统时间：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If not given as argument, `hwclock` assumes the RTC device file is `/dev/rtc`
    , which is actually a symbolic link to the real RTC device:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有作为参数给出，`hwclock`假定RTC设备文件是`/dev/rtc`，实际上这是一个指向真实RTC设备的符号链接：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced you to the RTC framework and its API. Its reduced set
    of functions and data structures make it the most lightweight framework, and easy
    to master. Using skills described in this chapter, you will be able to develop
    a driver for most of the existing RTC chips, and even go further and handle such
    devices from the user space, easily setting up date and time, as well as alarms.
    The next chapter, PWM drivers, has nothing common with this one, but is a must-know
    for embedded engineers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了RTC框架及其API。其减少的功能和数据结构使其成为最轻量级的框架，并且易于掌握。使用本章描述的技能，您将能够为大多数现有的RTC芯片开发驱动程序，甚至可以进一步处理这些设备，轻松设置日期和时间以及闹钟。下一章，PWM驱动程序，与本章没有任何共同之处，但对于嵌入式工程师来说是必须了解的。
