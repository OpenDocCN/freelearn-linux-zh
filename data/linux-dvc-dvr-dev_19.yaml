- en: PWM Drivers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM驱动程序
- en: '**Pulse Wide Modulation** (**PWM** ) operates like a switch that constantly
    cycles on and off. It is a hardware feature used to control servomotors, for voltage
    regulation, and so on. The most well-known applications of PWM are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**脉冲宽度调制**（**PWM**）类似于不断循环开关。它是一种用于控制舵机、电压调节等的硬件特性。PWM最著名的应用包括：'
- en: Motor speed control
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机速度控制
- en: Light dimming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调光
- en: Voltage regulation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电压调节
- en: 'Now, let us introduce PWM with a simple following figure:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过以下简单的图介绍PWM：
- en: '![](img/Image00038.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00038.jpg)'
- en: 'The preceding figure describes a complete PWM cycle, introducing some terms
    we need to clarify prior to getting deeper into the kernel PWM framework:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图描述了完整的PWM周期，介绍了我们需要在深入研究内核PWM框架之前澄清的一些术语：
- en: '`Ton` : This is the duration during which the signal is high.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ton`：这是信号高电平的持续时间。'
- en: '`Toff` : This is the duration during which the signal is low.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Toff`：这是信号低电平的持续时间。'
- en: '`Period` : This is the duration of a complete PWM cycle. It represents the
    sum of `Ton` and `Toff` of the PWM signal.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`周期`：这是完整PWM周期的持续时间。它代表PWM信号的`Ton`和`Toff`的总和。'
- en: '`Duty cycle` : It is represented as a percentage of the time signal that remains
    on during the period of the PWM signal.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`占空比`：它表示信号在PWM信号周期内保持开启的时间的百分比。'
- en: 'Different formulas are detailed as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的公式详细说明如下：
- en: 'PWM period: ![](img/Image00039.gif)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWM周期：![](img/Image00039.gif)
- en: 'Duty cycle: ![](img/Image00040.gif)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 占空比：![](img/Image00040.gif)
- en: You can find details about PWM at [https://en.wikipedia.org/wiki/Pulse-width_modulation](https://en.wikipedia.org/wiki/Pulse-width_modulation)
    .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://en.wikipedia.org/wiki/Pulse-width_modulation](https://en.wikipedia.org/wiki/Pulse-width_modulation)找到有关PWM的详细信息。
- en: 'The Linux PWM framework has two interfaces:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Linux PWM框架有两个接口：
- en: '**Controller interface** : The one that exposes the PWM line. It is the PWM
    chip, that is, the producer.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制器接口**：公开PWM线的接口。它是PWM芯片，即生产者。'
- en: '**Consumer interface** : The device consuming PWM lines exposed by the controller.
    Drivers of such devices use helper functions exported by the controller by means
    of a generic PWM framework.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**消费者接口**：由控制器公开的使用PWM线的设备。此类设备的驱动程序使用控制器导出的辅助函数，通过通用PWM框架。'
- en: 'Either the consumer or producer interface depends on the following header file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者或生产者接口取决于以下头文件：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this chapter, we will deal with:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理：
- en: PWM driver architecture and data structures, for both controller and consumer,
    along with a dummy driver
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWM驱动程序架构和数据结构，用于控制器和消费者，以及一个虚拟驱动程序
- en: Instantiating PWM devices and controllers in the device tree
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备树中实例化PWM设备和控制器
- en: Requesting and consuming PWM devices
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求和使用PWM设备
- en: Using PWM from user space through sysfs interface
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过sysfs接口从用户空间使用PWM
- en: PWM controller driver
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM控制器驱动程序
- en: As you need `struct gpio_chip` when writing GPIO-controller drivers and `struct
    irq_chip` when writing IRQ-controller drivers, a PWM controller is represented
    in the kernel as an instance of `struct pwm_chip` structure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写GPIO控制器驱动程序时需要`struct gpio_chip`，在编写IRQ控制器驱动程序时需要`struct irq_chip`，PWM控制器在内核中表示为`struct
    pwm_chip`结构的实例。
- en: '![](img/Image00041.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00041.jpg)'
- en: PWM controller and devices
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PWM控制器和设备
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is the meaning of each elements in the structure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结构中每个元素的含义：
- en: '`dev` : This represents the device associated with this chip.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`：这代表与此芯片关联的设备。'
- en: '`Ops` : This is a data structure providing callback functions this chip exposes
    to consumer drivers.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ops`：这是一个数据结构，提供此芯片向消费者驱动程序公开的回调函数。'
- en: '`Base` : This is the number of the first PWM controlled by this chip. If `chip->base
    < 0` then, the kernel will dynamically assign a base.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Base`：这是由此芯片控制的第一个PWM的编号。如果`chip->base < 0`，则内核将动态分配一个基数。'
- en: '`can_sleep` : This should be set to `true` by the chip driver if `.config()`
    , `.enable()` , or `.disable()` operations of the ops field may sleep.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`can_sleep`：如果ops字段的`.config()`、`.enable()`或`.disable()`操作可能休眠，则由芯片驱动程序设置为`true`。'
- en: '`npwm` : This is the number of PWM channels (devices) this chip provide.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npwm`：这是此芯片提供的PWM通道（设备）的数量。'
- en: '`pwms` : This is an array of PWM devices of this chip, allocated by the framework,
    to consumer drivers.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pwms`：这是由框架分配给此芯片的PWM设备数组，供消费者驱动程序使用。'
- en: '`of_xlate` : This is an optional callback to request a PWM device given a DT
    PWM specifier. If not defined, it will be set to `of_pwm_simple_xlate` by the
    PWM core, which will force `of_pwm_n_cells` to `2` as well.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of_xlate`：这是一个可选的回调，用于根据DT PWM指定器请求PWM设备。如果未定义，PWM核心将将其设置为`of_pwm_simple_xlate`，同时将`of_pwm_n_cells`强制设置为`2`。'
- en: '`of_pwm_n_cells` : This is the number of cells expected in the DT for a PWM
    specifier.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of_pwm_n_cells`：这是DT中PWM指定器预期的单元数。'
- en: 'PWM controller/chip adding and removal rely on two basic functions, `pwmchip_add()`
    and `pwmchip_remove()` . Each function should be given a filled in `struct pwm_chip`
    structure as an argument. Their respective prototypes are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PWM控制器/芯片的添加和移除依赖于两个基本函数，`pwmchip_add()`和`pwmchip_remove()`。每个函数都应该以填充的`struct
    pwm_chip`结构作为参数。它们各自的原型如下：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Unlike other framework removal functions that do not have return values, `pwmchip_remove()`
    has a return value. It returns `0` on success, or `-EBUSY` if the chip has a PWM
    line still in use (still requested).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架移除函数不返回值不同，`pwmchip_remove()`具有返回值。它在成功时返回`0`，如果芯片仍在使用（仍在请求），则返回`-EBUSY`。
- en: Each PWM driver must implement some hooks through the `struct pwm_ops` field,
    which is used by the PWM core or the consumer interface in order to configure
    and make full use of its PWM channels. Some of them are optional.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个PWM驱动程序必须通过`struct pwm_ops`字段实现一些钩子，该字段由PWM核心或消费者接口使用，以配置和充分利用其PWM通道。其中一些是可选的。
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let us see what each element in the structure means:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结构中的每个元素的含义：
- en: '`request` : This is an optional hook that, if provided, is executed during
    a PWM channel request.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request`：这是一个可选的钩子，如果提供，将在请求PWM通道时执行。'
- en: '`free` : This is the same as request, ran during PWM freeing.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`free`：这与请求相同，在PWM释放时运行。'
- en: '`config` : This is the PMW configuration hook. It configures duty cycles and
    period length for this PWM.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：这是PMW配置钩子。它配置了这个PWM的占空比和周期长度。'
- en: '`set_polarity` : This hook configures the polarity of this PWM.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_polarity`：这个钩子配置了PWM的极性。'
- en: '`Enable` : This enables the PWM line, starting output toggling.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Enable`：这启用PWM线，开始输出切换。'
- en: '`Disable` : This disables the PWM line, stopping output toggling.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Disable`：这禁用PWM线，停止输出切换。'
- en: '`Apply` : This atomically applies a new PWM config. The state argument should
    be adjusted with the real hardware config.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Apply`：这个原子地应用一个新的PWM配置。状态参数应该根据实际的硬件配置进行调整。'
- en: '`get_state` : This returns the current PWM state. This function is only called
    once per PWM device when the PWM chip is registered.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_state`：这返回当前PWM状态。当PWM芯片注册时，每个PWM设备只调用一次这个函数。'
- en: '`Owner` : This is the module that owns this chip, usually `THIS_MODULE` .'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Owner`：这是拥有这个芯片的模块，通常是`THIS_MODULE`。'
- en: In the `probe` function of the PWM controller driver, it is good practice to
    retrieve DT resources, initialize hardware, fill a `struct pwm_chip` and its `struct
    pwm_ops` , and then, add the PWM chip with the `pwmchip_add` function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在PWM控制器驱动的`probe`函数中，最好的做法是检索DT资源，初始化硬件，填充`struct pwm_chip`和它的`struct pwm_ops`，然后使用`pwmchip_add`函数添加PWM芯片。
- en: Driver example
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动示例
- en: 'Now let us summarize things by writing a dummy driver for a PWM controller,
    which has three channels:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过编写一个虚拟PWM控制器的虚拟驱动来总结一下事情，它有三个通道：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: PWM controller binding
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM控制器绑定
- en: While binding the PWM controller from within the DT, the most important property
    is `#pwm-cells` . It represents the number of cells used to represent a PWM device
    of this controller. If you remember, in the `struct pwm_chip` structure, the `of_xlate`
    hook is used to translate a given PWM specifier. If the hook has not been set,
    `pwm-cells` here must be set to 2, else, it should be set with the same value
    as `of_pwm_n_cells` . The following is an example of a PWM controller node in
    the DT, for an i.MX6 SoC.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在DT中绑定PWM控制器时，最重要的属性是`#pwm-cells`。它表示用于表示该控制器的PWM设备的单元格数。如果记得，在`struct pwm_chip`结构中，`of_xlate`钩子用于翻译给定的PWM说明符。如果没有设置这个钩子，这里的`pwm-cells`必须设置为2，否则，它应该与`of_pwm_n_cells`的值相同。以下是i.MX6
    SoC设备树中PWM控制器节点的示例。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On the other hand, the node that corresponds to our fake-pwm driver looks like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，对应我们的虚拟PWM驱动的节点如下：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: PWM consumer interface
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM消费者接口
- en: 'A consumer is the device that actually uses PWM channels. A PWM channel is
    represented in the kernel as an instance of `struct pwm_device` structure:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者是实际使用PWM通道的设备。在内核中，PWM通道表示为`struct pwm_device`结构的实例：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Label` : This is the name of this PWM device'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Label`：这是这个PWM设备的名称'
- en: '`Flags` : This represents the flags associated with the PWM device'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flags`：这代表与PWM设备相关的标志'
- en: '`hwpw` : This is a relative index of the PWM device, local to the chip'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hwpw`：这是PWM设备的相对索引，局部于芯片'
- en: '`pwm` : This is a system global index of the PWM device'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pwm`：这是PWM设备的系统全局索引'
- en: '`chip` : This is a PWM chip, the controller providing this PWM device'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chip`：这是一个PWM芯片，提供这个PWM设备的控制器'
- en: '`chip_data` : This is chip-private data associated with this PWM device'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chip_data`：这是与这个PWM设备关联的芯片私有数据'
- en: 'Since kernel v4.7, the structure changed into:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 自内核v4.7以来，结构已更改为：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`args` : This represents the board-dependent PWM arguments attached to this
    PWM device, which are usually retrieved from the PWM lookup table or device tree.
    PWM arguments represent the initial configuration that users want to use on this
    PWM device rather than the current PWM hardware state.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`：这代表与这个PWM设备相关的依赖于板的PWM参数，通常从PWM查找表或设备树中检索。PWM参数代表用户想要在这个PWM设备上使用的初始配置，而不是当前的PWM硬件状态。'
- en: '`state` : This represents the current PWM channel state.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`状态`：这代表了当前PWM通道的状态。'
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Over Linux evolutions, the PWM framework faced several changes. These changes
    concern the way one requests PWM devices from within the consumer side. We can
    split the consumer interface into two parts, or more precisely into two versions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Linux的发展，PWM框架面临了几次变化。这些变化涉及到从消费者端请求PWM设备的方式。我们可以将消费者接口分为两部分，或者更准确地说是两个版本。
- en: '**The legacy version** , where you use `pwm_request()` and `pwm_free()` in
    order to request a PWM device and free it after usage.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**传统版本**，在这个版本中使用`pwm_request()`和`pwm_free()`来请求一个PWM设备，并在使用后释放它。'
- en: '**The new and recommended API** , using `pwm_get()` and `pwm_put()` functions.
    The former is given the consumer device along with the channel name as arguments
    to request the PWM device, and the second is given the PWM device to be freed
    as a parameter. Managed variants of these functions, `devm_pwm_get()` and `devm_pwm_put()`
    , also exist.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**新的和推荐的API**，使用`pwm_get()`和`pwm_put()`函数。前者给定了消费者设备和通道名称作为参数来请求PWM设备，后者给定了要释放的PWM设备作为参数。这些函数的托管变体`devm_pwm_get()`和`devm_pwm_put()`也存在。'
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`pwm_request()` /`pwm_get()` and `pwm_free()` /`pwm_put()` cannot be called
    from an atomic context, since the PWM core make use of mutexes, which may sleep.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwm_request()`/`pwm_get()`和`pwm_free()`/`pwm_put()`不能在原子上下文中调用，因为PWM核心使用互斥锁，可能会休眠。'
- en: 'After being requested, a PWM has to be configured using:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求后，必须使用以下方式配置PWM：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To start/stop toggling the PWM output, use `pwm_enable()` /`pwm_disable()` .
    Both functions take a pointer to a `struct pwm_device` as a parameter, and are
    all wrappers around hooks exposed by the controller through the `pwm_chip.pwm_ops`
    field.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始/停止切换PWM输出，使用`pwm_enable()`/`pwm_disable()`。这两个函数都以`struct pwm_device`的指针作为参数，并且都是通过`pwm_chip.pwm_ops`字段公开的钩子的包装器。
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`pwm_enable()` returns `0` on success, or a negative error code on failure.
    A good example of a PWM consumer driver is `drivers/leds/leds-pwm.c` in the kernel
    source tree. The following is an example of consumer code, driving a PWM led:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwm_enable（）`在成功时返回`0`，在失败时返回负错误代码。一个很好的PWM消费者驱动程序的例子是内核源树中的`drivers/leds/leds-pwm.c`。以下是一个PWM
    led的消费者代码示例：'
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: PWM clients binding
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM客户端绑定
- en: 'PWM devices can be assigned to the consumer from:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: PWM设备可以从以下分配给消费者：
- en: Device tree
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备树
- en: ACPI
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACPI
- en: Static lookup tables, in board `init` file.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态查找表，在板`init`文件中。
- en: This book will only deal with DT binding, as it is the recommended method. When
    binding a PWM consumer (client) to its driver, you need to provide the phandle
    of the controller to which it is linked.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将仅处理DT绑定，因为这是推荐的方法。当将PWM消费者（客户端）绑定到其驱动程序时，您需要提供其链接的控制器的phandle。
- en: It is recommended you give the name `pwms` to PWM properties; since PWM devices
    are named resources, you can provide an optional property `pwm-names,` containing
    a list of strings to name each of the PWM devices listed in the `pwms` property.
    In case no `pwm-names` property is given, the name of the user node will be used
    as fallback.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您将PWM属性命名为`pwms`；由于PWM设备是命名资源，您可以提供一个可选的属性`pwm-names`，其中包含一个字符串列表，用于为`pwms`属性中列出的每个PWM设备命名。如果没有给出`pwm-names`属性，则将使用用户节点的名称作为回退。
- en: Drivers for devices that use more than a single PWM device can use the `pwm-names`
    property to map the name of the PWM device requested by the `pwm_get()` call to
    an index into the list given by the `pwms` property.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个PWM设备的设备的驱动程序可以使用`pwm-names`属性将`pwm_get（）`调用请求的PWM设备的名称映射到`pwms`属性给出的列表中的索引。
- en: 'The following example describes a PWM-based backlight device, which is an excerpt
    from the kernel documentation on PWM device binding (see *Documentation/devicetree/bindings/pwm/pwm.txt*
    ):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例描述了基于PWM的背光设备，这是PWM设备绑定的内核文档的摘录（请参阅*Documentation/devicetree/bindings/pwm/pwm.txt*）：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The PWM-specifier typically encodes the chip-relative PWM number and the PWM
    period in nanoseconds. With the line as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: PWM规范通常编码芯片相对PWM编号和以纳秒为单位的PWM周期。使用以下行：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`0` corresponds to the PWM index relative to the controller, and `5000000`
    represents the period in nanoseconds. Note that in the preceding example, specifying
    the `pwm-names` is redundant because the name `backlight` would be used as a fallback
    anyway. Therefore, the driver would have to call:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`0`对应于相对于控制器的PWM索引，`5000000`表示以纳秒为单位的周期。请注意，在前面的示例中，指定`pwm-names`是多余的，因为名称`backlight`无论如何都将用作回退。因此，驱动程序必须调用：'
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The PWM-specifier typically encodes the chip-relative PWM number and the PWM
    period in nanoseconds.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: PWM规范通常编码芯片相对PWM编号和以纳秒为单位的PWM周期。
- en: Using PWMs with the sysfs interface
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用sysfs接口的PWM
- en: 'The PWM core `sysfs` root path is `/sys/class/pwm/` . It is the user space
    way to manage PWM device. Each PWM controller/chip added to the system creates
    a `pwmchipN` directory entry under the `sysfs` root path, where `N` is the base
    of the PWM chip. The directory contains the following files:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: PWM核心`sysfs`根路径为`/sys/class/pwm/`。这是管理PWM设备的用户空间方式。系统中添加的每个PWM控制器/芯片都会在`sysfs`根路径下创建一个`pwmchipN`目录条目，其中`N`是PWM芯片的基础。该目录包含以下文件：
- en: '`npwm` : This is a reads only file printing the number of PWM channels that
    this chip supports'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npwm`：这是一个只读文件，打印此芯片支持的PWM通道数'
- en: '`Export` : This is a write-only file allowing to export a PWM channel for use
    with `sysfs` (this functionality is equivalent to GPIO sysfs interface)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`导出`：这是一个只写文件，允许将PWM通道导出供`sysfs`使用（此功能等效于GPIO sysfs接口）'
- en: '`Unexport` : Unexports a PWM channel from `sysfs` (write-only)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`取消导出`：从`sysfs`中取消导出PWM通道（只写）'
- en: 'The PWM channels are numbered using an index from 0 to `pwm<n-1>` . These numbers
    are local to the chip. Each PWM channel exportation creates a `pwmX` directory
    in the `pwmchipN` , which is the same directory as the one containing the `export`
    file used. **X** is the number of the channel that was exported. Each channel
    directory contains the following files:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: PWM通道使用从0到`pwm<n-1>`的索引编号。这些数字是相对于芯片的。每个PWM通道导出都会在`pwmchipN`中创建一个`pwmX`目录，该目录与使用的`export`文件相同。**X**是导出的通道号。每个通道目录包含以下文件：
- en: '`Period` : This is a readable/writable file to get/set the total period of
    the PWM signal. Value is in nanoseconds.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`周期`：这是一个可读/可写文件，用于获取/设置PWM信号的总周期。值以纳秒为单位。'
- en: '`duty_cycle` : This is a readable/writable file to get/set the duty cycle of
    the PWM signal. It represents the active time of the PWM signal. Value is in nanoseconds
    and must always be less than the period.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duty_cycle`：这是一个可读/可写文件，用于获取/设置PWM信号的占空比。它表示PWM信号的活动时间。值以纳秒为单位，必须始终小于周期。'
- en: '`Polarity` : This is a readable/writable file to use only if the chip of this
    PWM device supports polarity inversion. It is better to change the polarity only
    when this PWM is not enabled. Accepted values are string *normal* or *inversed*
    .'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`极性`：这是一个可读/可写文件，仅在此PWM设备的芯片支持极性反转时使用。最好只在此PWM未启用时更改极性。接受的值为字符串*normal*或*inversed*。'
- en: '`Enable` : This is a readable/writable file, to enable (start toggling)/disable
    (stop toggling) the PWM signal. Accepted values are:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`启用`：这是一个可读/可写文件，用于启用（开始切换）/禁用（停止切换）PWM信号。接受的值为：'
- en: '0: disabled'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0：已禁用
- en: '1: enabled'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1：已启用
- en: 'The following is an example of using PWM from user space through the `sysfs`
    interface:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过`sysfs`接口从用户空间使用PWM的示例：
- en: 'Enable PWM:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用PWM：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Set PWM period:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置PWM周期：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Set PWM duty cycle: The value of the duty cycle must be less than the value
    of PWM period:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置PWM占空比：占空比的值必须小于PWM周期的值：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Disable PWM:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用PWM：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The complete PWM framework API and sysfs description is available in the *Documentation/pwm.txt*
    file, in the kernel source tree.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的PWM框架API和sysfs描述可在内核源树中的*Documentation/pwm.txt*文件中找到。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By the end of this chapter, you are armed for any PWM controller, whether it
    is memory mapped, or externally sitting on a bus. The API described in this chapter
    will be sufficient to write as well as to enhance a controller driver as a consumer
    device driver. If you are not comfortable with the PWM kernel side yet, you can
    fully use the user space sysfs interface. That said, in the next chapter, we will
    discuss about regulators, which sometimes are driven by PWM. So, please hold on,
    we are almost done.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将具备处理任何PWM控制器的能力，无论它是内存映射的还是外部连接在总线上的。本章描述的API将足以编写和增强控制器驱动程序作为消费者设备驱动程序。如果您对PWM内核端还不熟悉，可以完全使用用户空间sysfs接口。话虽如此，在下一章中，我们将讨论有时由PWM驱动的调节器。所以，请稍等，我们快要完成了。
