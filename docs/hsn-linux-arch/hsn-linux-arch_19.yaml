- en: Design Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计最佳实践
- en: To wrap up this book, our final chapter will talk about the different best practices
    that you will have to follow in order to design a resilient and failure-proof
    solution. Even though this is the last chapter of this book, it will help you
    as a starting point for what things to consider when, for example, migrating to
    the cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 总结这本书时，我们的最后一章将讨论你必须遵循的不同最佳实践，以设计一个具有弹性和防故障的解决方案。尽管这是本书的最后一章，但它将作为一个起点，帮助你考虑在迁移到云端时需要考虑哪些事项。
- en: 'We will be covering the basics of subjects such the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题的基础知识：
- en: Moving to the cloud
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移到云端
- en: Container design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器设计
- en: Continuous integration pipelines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成流水线
- en: Continuous deployment pipelines
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署流水线
- en: Automated testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: The topics and practices that we will be covering in this chapter are no where
    near extensive and we will be giving a 10,000 feet overview. With these basics,
    you can start to reinforce your knowledge in each area to make the ultimate design
    decisions for your customers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖的主题和实践远非详尽，我们将进行一个宏观概述。有了这些基础知识，你可以开始加强你在每个领域的知识，为你的客户做出最终的设计决策。
- en: Designing for the occasion
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据场合设计
- en: In our previous chapters, we learned everything we needed for very specific
    solutions. Here, we will be talking about generalities, the basic rules or recommendations
    you need to follow or at least try to adhere to for every design you create. But
    don't be confused by what I’m going to say next; best practices per se do not
    exist. Every solution will have its own identity, its own goals, and its own unique
    characteristics. Always try to satisfy the situation you are in and the business
    needs of your customer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学到了针对非常具体的解决方案所需的一切。在这里，我们将讨论一般性的内容，你需要遵循或至少尝试遵循的基本规则或建议，以便你创建的每个设计。但不要被我接下来要说的所困惑；最佳实践本身并不存在。每个解决方案都将有其自己的特性、目标和独特的特点。始终努力满足你所处的情况和客户的业务需求。
- en: 'Many solutions, though, will have to comply with certain industry standards,
    as they may handle sensitive information. In these types of scenarios, we already
    have a very well-defined set of rules and policies that our designs have to satisfy.
    This breaks our statement that all designs are different, but again, these are
    very specific scenarios for very specific industries. Some of the standards that
    we need to comply with when dealing with sensitive data are the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多解决方案将不得不遵守某些行业标准，因为它们可能处理敏感信息。在这些类型的场景中，我们已经有了一套非常明确定义的规则和政策，我们的设计必须满足这些规则。这打破了我们所有设计都是不同的说法，但再次强调，这些是非常特定的行业的非常特定的场景。在处理敏感数据时，我们需要遵守的一些标准包括：
- en: '**Health Insurance Portability and Accountability Act** (**HIPAA**)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《健康保险可携带性和责任法案》（HIPAA）
- en: '**Payment Card Industry Data Security Standards** (**PCI-DSS**)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《支付卡行业数据安全标准》（PCI-DSS）
- en: '**The General Data Protection Regulation** (**GDPR**)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《通用数据保护条例》（GDPR）
- en: These standards are fixed no matter what, locally and internationally, and regulated
    by their respective authorities. But not all design patterns or ways to comply
    with certain solution requirements are as clear as these ones.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标准是固定的，无论是在本地还是国际上，并由各自的管理机构监管。但并非所有的设计模式或满足特定解决方案要求的方式都像这些那样清晰明了。
- en: 'As a solutions architect, you will find yourself in many scenarios that will
    help you expand your portfolio and apply it in different solutions. Every design
    you create is only as strong as its weakest link. When you are designing, always
    try to see how you can break your design:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案架构师，你将发现自己处于许多场景中，这将帮助你扩展你的作品集并将其应用于不同的解决方案。你创建的每个设计只有其最薄弱的环节才能够强大。在设计时，始终尝试看看你如何能够打破你的设计：
- en: Where does it have points of failure?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在哪些地方存在故障点？
- en: Where does it have bottlenecks?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在哪些地方存在瓶颈？
- en: Will my servers be able to handle the load?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的服务器能够承受负荷吗？
- en: These are a few examples of some questions you need to ask yourself. We need
    to shape our way of thinking and ask ourselves the question *why?* more often.
    Why are we doing what we are doing this way, or that way? It is crucial to question
    ourselves about every decision we make.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是你需要问自己的一些问题的几个例子。我们需要塑造我们的思维方式，并更经常地问自己“为什么？”为什么我们要以这种方式或那种方式做某事？质疑我们所做的每一个决定是至关重要的。
- en: Changing our way of thinking is the best thing we can do, as nowadays technologies
    are evolving faster than ever before. Technologies might change over the years,
    and what we implemented today might be totally unusable tomorrow, but our way
    of thinking will allow us to adapt and analyze from all the points necessary for
    us to be successful.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 改变我们的思维方式是我们可以做的最好的事情，因为现在的技术发展速度比以往任何时候都要快。技术可能会随着时间的推移而发生变化，而我们今天实施的东西明天可能完全无法使用，但我们的思维方式将使我们能够适应并从所有必要的角度进行分析，以便我们取得成功。
- en: 'Every situation and environment will be different, but at the time of writing
    we can say that you will be dealing with two major types of environments:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每种情况和环境都是不同的，但在撰写本文时，我们可以说你将会处理两种主要类型的环境：
- en: On-premises/bare metal environments
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地/裸金属环境
- en: Cloud environments
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云环境
- en: In this chapter, we will be going through the basic considerations that you
    will need to deal with when you're working in these environments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论你在这些环境中工作时需要处理的基本考虑因素。
- en: On-premises environments
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地环境
- en: Linux is adaptable; it can run pretty much anywhere. It wouldn't surprise me
    if I found the Linux kernel on a lawn mower in the next few years. In a world
    where IT is becoming more and more relevant for our daily lives, alongside the
    rise of the Internet of Things, the presence of Linux has spiked like never before.
    Therefore, as Linux architects, we need to be prepared to design with almost everything.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是适应性强的；它几乎可以在任何地方运行。如果未来几年我在割草机上发现Linux内核，我也不会感到惊讶。在IT变得越来越重要的当今世界，随着物联网的兴起，Linux的存在前所未有地增加。因此，作为Linux架构师，我们需要准备几乎可以应对任何情况的设计。
- en: 'In an on-premises environment, we are most probably facing two scenarios:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地环境中，我们很可能面临两种情况：
- en: Bare metal server
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 裸金属服务器
- en: '**Virtual machines** (**VMs**)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机**（**VMs**）'
- en: Both of them will be very different, as the options that we will have to make
    our solution more resilient will vary.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 两者将非常不同，因为我们将有各种选项来使我们的解决方案更具弹性。
- en: Bare metal server
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 裸金属服务器
- en: Bare metal servers are perfect for workloads that require a considerable amount
    of resources to run. Small workloads will not be efficiently placed on a single
    server; for instance, a small web application that will not be serving a lot of
    user requests has no place on a 64-core 1 TB of RAM physical server. It's a waste
    of resources and a terrible economic decision. Most of the time, 90% of this server
    would be totally idle, wasting precious resources that could be used for something
    else. These types of applications should be put into a VM or containerized altogether.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 裸金属服务器非常适合需要大量资源运行的工作负载。小型工作负载不适合放在单个服务器上；例如，一个不会提供大量用户请求的小型网络应用在64核1TB内存的物理服务器上没有位置。这是对资源的浪费和糟糕的经济决策。大部分时间，这台服务器的90%将是完全空闲的，浪费了宝贵的资源，可以用于其他用途。这些类型的应用应该放入虚拟机或完全容器化。
- en: The first thing that we should understand before moving or creating an infrastructure
    on bare metal are the resource requirements of the application for which you are
    building the infrastructure for.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在将基础架构移至裸金属上或在裸金属上创建基础架构之前，我们应该了解所构建基础架构的应用程序的资源需求。
- en: 'Systems that require lots of resources for data processing and high-performance
    computing will take full advantage of the resources available. Solutions such
    as the following ones are examples of what to run on bare metal servers:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 需要大量资源进行数据处理和高性能计算的系统将充分利用可用资源。以下解决方案是裸金属服务器上运行的示例：
- en: Type 1/ Type 2 Hypervisors (**Kernel-based Virtual Machine** (**KVM**), **Linux
    containers** (**LXC**), XEN)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Type 1/ Type 2虚拟化监控器（**基于内核的虚拟机**（**KVM**），**Linux容器**（**LXC**），XEN）
- en: Linux for SAP HANA
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux用于SAP HANA
- en: Apache Hadoop
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Hadoop
- en: Linux for Oracle DB
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux用于Oracle DB
- en: Large MongoDB deployments for memory caching
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模的MongoDB部署用于内存缓存
- en: '**High-performance computing** (**HPC**)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能计算**（**HPC**）'
- en: In-house applications that specify that their memory requirements exceed the
    hundreds of GB or hundreds of CPU cores are all better served on a bare metal
    server where RAM/CPU will not be consumed on any other overhead process that is
    not part of the workload that you design that server for.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 内部应用程序规定其内存需求超过数百GB或数百CPU核心的所有应用程序都更适合在裸金属服务器上运行，因为RAM/CPU不会被用于不属于您为其设计服务器的工作负载的任何其他开销过程。
- en: Virtual machines
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟机
- en: Hypervisors are also better on bare metal servers; since they are going to be
    sharing their resources across multiple hosted VMs, they require large quantities
    of resources. One thing to note is that some of the resources of the hypervisor
    will be consumed by the hypervisor itself, which creates a resource overhead on
    hardware interrupts and other operations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化监控器在裸金属服务器上也更好；因为它们将在多个托管的虚拟机之间共享资源，所以需要大量资源。需要注意的一点是，监控器的一些资源将被监控器本身消耗，这会在硬件中断和其他操作上产生资源开销。
- en: Sometimes, when building physical servers, we focus a lot on the CPU cores that
    our application will need. With hypervisors, CPU time is served to VMs on priority
    or a first-come-first-served basis to the available core; depending on how it
    is configured, the CPU resource is shared across the running VMs. On the contrary,
    RAM memory is not shared across the VMs, and we need to be careful in the resource
    balancing that we are implementing. Deploying a server with the necessary CPU
    cores but with enough RAM that can satisfy any period of contention that we can
    face is something to take into account. With hundreds of VMs running on a single
    host, we can run out of memory really quickly and start swapping, and this is
    a situation that we want to avoid.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在构建物理服务器时，我们会非常关注应用程序所需的CPU核心。对于虚拟化监控器，CPU时间优先分配给虚拟机，或者按照可用核心的先到先服务的原则分配给虚拟机；根据配置方式，CPU资源在运行的虚拟机之间共享。相反，RAM内存不会在虚拟机之间共享，我们需要在实施资源平衡时小心谨慎。部署具有必要CPU核心但具有足够RAM的服务器，可以满足我们可能面临的任何争用期的需求是需要考虑的。在单个主机上运行数百个虚拟机时，我们可能会很快耗尽内存并开始交换，这是我们要避免的情况。
- en: With resource provisioning, we also need to take into account that if we are
    running a cluster of hypervisors, there can be situations when one of the cluster
    nodes needs to go into maintenance or go down because of an unexpected failure.
    Scenarios such as this are the reason we should always leave some resources to
    be able to manage additional unexpected workloads from VMs that might failover
    due to the aforementioned reasons.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源配置方面，我们还需要考虑的是，如果我们运行一组虚拟化监控器，可能会出现集群节点需要进行维护或由于意外故障而宕机的情况。正是因为这样的情况，我们应该始终留出一些资源，以便能够处理由于上述原因可能发生故障转移的虚拟机的额外意外工作负载。
- en: When dealing with hypervisors, you have to be careful, as you will not be running
    just a single workload per physical host. The number and the VMs themselves will
    always vary, unless you have some type of affinity rule configured. Things such
    as how much network bandwidth your network interface cards support are of utmost
    relevance. Depending on the amount of resources of the host hypervisor, tens or
    hundreds of VMs will be sharing the same network hardware to perform their I/O.
    Here is where deciding, for example, whether a 10 GbE network card instead of
    a 1 GbE network card is required.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理虚拟化程序时，你必须小心，因为你不会只在一个物理主机上运行单个工作负载。虚拟机的数量和虚拟机本身将始终变化，除非你配置了某种亲和规则。诸如你的网络接口卡支持多少网络带宽之类的事情至关重要。根据主机虚拟化程序的资源量，数十甚至数百个虚拟机将共享相同的网络硬件来执行它们的I/O。例如，这就是决定是否需要10GbE网络卡而不是1GbE网络卡的地方。
- en: One more thing to take into consideration when picking the network interfaces
    of your physical host is the type of storage you will be using; for example, if
    you are considering a **network filesystem **(**NFS**) solution or an iSCSI solution,
    you have to keep in mind that, many times, they will be sharing the same interfaces
    such as the ones for the regular network traffic. If you know the infrastructure
    you are designing will have a very congested network and require a good storage
    performance, it is better to have another approach, such as choosing a fibre channel
    storage area network, with its own dedicated hardware just for storage I/O.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择物理主机的网络接口时，还有一件事需要考虑，那就是你将使用的存储类型；例如，如果你正在考虑使用**网络文件系统**（NFS）解决方案或iSCSI解决方案，你必须记住，很多时候它们将共享与常规网络流量相同的接口。如果你知道你正在设计的基础架构将有非常拥挤的网络并且需要良好的存储性能，最好选择另一种方法，比如选择一个拥有专门用于存储I/O的独立硬件的光纤通道存储区域网络。
- en: Network segmentation is crucial for virtualized environments, management traffic,
    application network traffic, and storage network traffic, which should always
    be segmented. You can achieve this in several ways, such as by provisioning dedicated
    network interface cards for each purpose or via VLAN tagging. Each hypervisor
    will have its own set of tools to achieve segmentation, but the idea behind it
    is the same.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 网络分割对于虚拟化环境、管理流量、应用程序网络流量和存储网络流量至关重要，这些流量应始终进行分割。你可以通过多种方式实现这一点，比如为每个目的分配专用的网络接口卡，或者通过VLAN标记。每个虚拟化程序都有自己的一套工具来实现分割，但其背后的思想是相同的。
- en: Cloud environments
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云环境
- en: 'Working with **cloud environments** creates a wide number of options for designing
    IT solutions. Independently from the cloud provider, you will be able to select
    from services such as these:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与**云环境**合作为设计IT解决方案提供了大量选择。无论云服务提供商如何，你都可以从这些服务中进行选择：
- en: '**Infrastructure as a Service** (**IaaS**)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即服务**（IaaS）'
- en: '**Platform as a Service** (**PaaS**)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台即服务**（PaaS）'
- en: '**Software as a Service** (**SaaS**)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件即服务**（SaaS）'
- en: Your choice will depend on the maturity of your customer in cloud architecture
    models. But before we can even talk about design patterns or best practices for
    cloud environments, we need to talk about how you perform the migration of your
    on-premises environment to the cloud or how you can start adopting the cloud as
    the infrastructure for your customer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你的选择将取决于你的客户在云架构模型方面的成熟度。但在我们甚至能谈论云环境的设计模式或最佳实践之前，我们需要讨论如何将你的本地环境迁移到云端，或者你如何开始将云作为客户基础架构的一部分。
- en: The journey to the cloud
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通往云的旅程
- en: These migration strategies are adopted from Gartner research. Gartner also calls
    out a fifth strategy called **replace** with SaaS.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些迁移策略源自Gartner的研究。Gartner还提出了第五种策略，称为**用SaaS替代**。
- en: 'The following research paper is discussed in this section:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了以下研究论文：
- en: '*Devise an Effective Cloud Computing Strategy by Answering Five Key Questions, *Gartner,
    David W Cearley, November 2015, refreshed June 23, 2017.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过回答五个关键问题制定有效的云计算策略，*Gartner，David W Cearley，2015年11月，更新于2017年6月23日。'
- en: 'When migrating to the cloud, we don''t have to see the cloud as a destination,
    but rather as a journey. As cheesy as it sounds, it is like that. Every customer’s
    path to the cloud will be different; some paths will be easy and others will be
    painfully hard. It will all depend on what led the customer to take the decision
    to move and how they are deciding to move their infrastructure. Some customers
    might decide not only to move their infrastructure to an IaaS model but also take
    advantage of the move and modernize some of the workloads into a PaaS or even
    a serverless model. Each path will require a different level of preparation, regardless
    of which one they choose. A typical transition can look as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移到云端时，我们不必把云看作目的地，而是看作一个旅程。尽管听起来有点俗套，但确实如此。每个客户通往云的道路都会不同；有些道路会很容易，而其他一些则会非常艰难。这将取决于是什么促使客户做出迁移决定，以及他们决定如何迁移他们的基础架构。一些客户可能决定不仅将基础架构迁移到IaaS模型，还要利用这次迁移，将一些工作负载现代化为PaaS甚至无服务器模型。无论选择哪种道路，每条道路都需要不同程度的准备工作。典型的过渡可能如下所示：
- en: '![](img/3a2d9429-d251-4d44-b863-922c08de6c9b.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a2d9429-d251-4d44-b863-922c08de6c9b.png)'
- en: Each step will require a higher degree of changes to be implemented on the applications
    or infrastructure to migrate.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每一步都需要对应用程序或基础架构进行更大程度的变更。
- en: We can see the aforementioned steps as part of a greater journey that begins
    with the assessment of the assets to migrate.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将上述步骤视为一个更大旅程的一部分，该旅程始于对要迁移的资产的评估。
- en: Let's explore each step of the migration in more detail.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨迁移的每一步。
- en: Assessing
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: In this step, we will evaluate which workloads we want to migrate. After identifying
    the candidates for migration, we should always run an inventory of our VMs or
    physical servers and calculate what the **total cost of ownership** (**TCO**)
    of maintaining the infrastructure is. Things such as hardware cost, support maintenance
    contracts, electricity bills, and even space rental come into play here. This
    will help us to understand how much we will be saving in an eventual migration
    to the cloud. This data is crucial to convince management and any C-level decision
    makers that may have any doubts about the benefits in cost of migrating infrastructure
    to a cloud provider.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将评估我们想要迁移的工作负载。在确定迁移候选项后，我们应该始终对我们的虚拟机或物理服务器进行清点，并计算维护基础设施的**总拥有成本**（**TCO**）。硬件成本、支持维护合同、电费，甚至空间租金等都会在这里起作用。这将帮助我们了解在迁移到云上时我们将节省多少成本。这些数据对于说服管理层和任何可能对将基础设施迁移到云服务提供商的成本优势产生疑虑的C级决策者至关重要。
- en: 'The ideal scenario to begin a migration is to look for smaller applications
    that don’t require an entire infrastructure to be migrated in order for them to
    be put into production. Applications with few dependencies are perfect to begin
    your assessment. Dependencies such as which servers we need to migrate together,
    and network requirements for our application such as ports and IP operational
    ranges are to be taken into consideration. Questions such as the following will
    help us to prepare for a successful migration:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 开始迁移的理想情况是寻找那些不需要整个基础架构迁移就可以投入生产的较小的应用程序。具有少量依赖关系的应用程序是开始评估的完美选择。需要考虑的依赖关系包括需要一起迁移的服务器、应用程序的网络需求（如端口和IP操作范围）。以下问题将帮助我们为成功迁移做好准备：
- en: Is my Linux distribution endorsed by the cloud provider I am migrating to?
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用的Linux发行版是否得到我要迁移到的云服务提供商的认可？
- en: Am I running the Kernel version that's supported by my cloud provider?
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我是否正在运行云服务提供商支持的内核版本？
- en: Do I have to install any additional kernel modules?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我是否需要安装任何额外的内核模块？
- en: Does my cloud provider require any type of agent running on my OS?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的云服务提供商是否需要在我的操作系统上运行任何类型的代理？
- en: With these questions answered, we can start performing the actual migration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些问题的答案，我们可以开始执行实际的迁移。
- en: Migrating
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移
- en: 'When migrating our infrastructure to the cloud, there are four basic ways of
    doing it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在将基础架构迁移到云上时，有四种基本的方法：
- en: '**Lift and shift**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提取和迁移**'
- en: '**Refactor**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**'
- en: '**Rearchitect**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新架构**'
- en: '**Rebuild**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重建**'
- en: Each of these methods will take advantage of different services and different
    features of the cloud. Choosing which method to use will depend on many things,
    such as how quickly you need to migrate, how much effort you are willing to undergo
    to migrate, and whether you want to take advantage of the migration and modernize
    your workloads as you migrate.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的每一种都将利用云的不同服务和不同功能。选择使用哪种方法将取决于许多因素，例如您需要多快迁移、您愿意为迁移付出多少努力，以及您是否希望在迁移过程中利用迁移并使您的工作负载现代化。
- en: Lift and shift
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取和迁移
- en: This method is literally a rehost, as you will be moving your on-premises physical
    servers or VMs into VMs in your cloud provider. This method is the easiest and
    quickest of all the methods, because you will be moving your environment and your
    applications as you have them on-premises. No code changes or re-architecture
    of your applications is required for this method. Here, you will only be taking
    advantage of the IaaS advantages of the cloud provider of your choice.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法实际上是重新托管，因为您将把您的本地物理服务器或虚拟机迁移到您云服务提供商的虚拟机中。这种方法是所有方法中最简单和最快的，因为您将按照本地环境将您的环境和应用程序迁移过去。对于这种方法，不需要进行代码更改或重新架构您的应用程序。在这里，您只需要利用您选择的云服务提供商的IaaS优势。
- en: Things such as the agility of having resources at your disposal if you need
    to increment storage or compute on demand and the lack of hardware maintenance
    and administration will be things to take advantage of in this model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要按需增加存储或计算资源的灵活性，以及无需硬件维护和管理，都是这种模式中可以利用的优势。
- en: Refactor
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构
- en: With **refactor**, your applications require minimal to no code changes. With
    this method, we can exploit a mix of IaaS and PaaS features. Migrating a three-tier
    web application into a managed middleware and into a managed database is a perfect
    example of this migration model.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**重构**，您的应用程序需要最少或不需要任何代码更改。通过这种方法，我们可以利用IaaS和PaaS功能的混合。将三层Web应用程序迁移到托管中间件和托管数据库是这种迁移模型的完美示例。
- en: With a managed database or managed middleware, we don't have to worry about
    things such as OS management, database engine installation and administration,
    framework updates, security patches, and even configuring additional instances
    for load balancing, as it is all taken care of for us. We just need to upload
    our code and select the framework that we need for it to run. We still can run
    monolithic applications, and very little code changes are required; the main purpose
    of this method is to migrate by taking things such as management and configuration off
    our shoulders, thus increasing the agility of our workloads.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用托管数据库或托管中间件，我们无需担心诸如操作系统管理、数据库引擎安装和管理、框架更新、安全补丁，甚至为负载平衡配置额外实例等问题，因为这一切都已经为我们处理好了。我们只需要上传我们的代码并选择我们需要运行的框架。我们仍然可以运行单片应用程序，只需要进行很少的代码更改；这种方法的主要目的是通过摆脱管理和配置等事务来进行迁移，从而增加我们工作负载的灵活性。
- en: Rearchitecting
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新架构
- en: '**Rearchitecting** while migrating does involve heavy changes in our applications,
    but this stage is where we modernize our business.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新架构**在迁移时确实涉及对我们的应用程序进行重大更改，但这个阶段是我们现代化业务的阶段。'
- en: We can find ourselves taking apart a monolithic application and breaking it
    into microservices by taking advantage of technologies such as containers and
    Kubernetes. We will be making our applications more portable, scalable, agile,
    and ready to be delivered via methodologies such as DevOps. With microservices,
    containers, and the automation that DevOps brings to the table, you will not only
    have a faster delivery of your applications to production, but you will also be
    using the compute resources on which your application will run more efficiently.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过利用容器和Kubernetes等技术，将一个庞大的应用程序拆分成微服务。我们将使我们的应用程序更具可移植性、可扩展性、灵活性，并准备通过DevOps等方法交付。有了微服务、容器和DevOps带来的自动化，你不仅可以更快地将应用程序交付到生产环境，还可以更有效地利用应用程序运行的计算资源。
- en: Rearchitecting might not be easy, nor is it the quickest way to migrate your
    workloads to the cloud, but it will give you a substantial advantage and cost
    savings in the long run.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重新架构可能并不容易，也不是将工作负载迁移到云的最快方式，但从长远来看，它将为您带来实质性的优势和成本节约。
- en: Rebuild
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重建
- en: Rearchitecting requires major code changes, but this last migration model is
    all about taking advantage of the movement to the cloud and create what are called
    **cloud-native applications**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重新架构需要进行重大的代码更改，但这种迁移模型的最终目标是充分利用迁移到云的机会，并创建所谓的**云原生应用**。
- en: Cloud-native applications are those that take advantage of cloud services such
    as PaaS and SaaS applications that are designed to be run on the cloud. Some of
    them can even be entirely run on serverless computing. Serverless computing is
    to run code directly on a cloud service, or consume an API or a service that is
    already provided by the cloud provider. Combining several services that consume
    one another and work on a common goal or result are what we call cloud-native
    applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用是利用PaaS和SaaS等云服务的应用程序，这些应用程序旨在在云上运行。其中一些甚至可以完全在无服务器计算上运行。无服务器计算是直接在云服务上运行代码，或者使用云提供商已经提供的API或服务。将几个相互消耗并共同努力实现共同目标或结果的服务组合在一起，这就是我们所说的云原生应用。
- en: 'The whole idea behind moving to the cloud is to save: save economically, save
    in maintenance, save time to recovery by moving into a more resilient and elastic
    platform. But we will not always automatically take advantage of all the benefits
    of it. After moving, we still have some terrain to cover in order to have our
    new cloud workloads completely optimized.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移到云的整个理念是为了节省：在经济上节省，在维护上节省，在通过迁移到更具弹性和韧性的平台上节省恢复时间。但我们并不总是能自动地充分利用所有这些好处。迁移后，我们仍然需要做一些工作，以使我们的新云工作负载完全优化。
- en: Optimizing
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化
- en: Maybe if you had moved your infrastructure via a lift and shift, the move might
    have been easy, and whatever workload was running on that VM is probably already
    in production with not many changes, if any at all. The problem is that your VMs
    are still the same size as they were on your on-premises environment. You are
    still having that VM use a small percentage of its actual total compute resources.
    In the cloud, this is wasting money, as you are paying for the hours that the
    VM is running, but the price that you pay for those hours is based on the total
    amount of resources of that VM, whether you are using 100% of them or not.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 也许如果您通过搬迁和转移来迁移您的基础设施，那么这个过程可能会很容易，而且在那个虚拟机上运行的任何工作负载可能已经在生产环境中，几乎没有任何变化。问题在于，您的虚拟机仍然与在本地环境中一样大。您仍然让虚拟机只使用其实际总计算资源的一小部分。在云中，这是在浪费金钱，因为您支付虚拟机运行的时间，但您支付这些时间的价格是基于该虚拟机的总资源量，无论您是否使用了其中的100%。
- en: This stage is where we actually start performing appropriate sizings and optimizing
    our infrastructure to actually use what we really need to actually take advantage
    of the elasticity of the cloud. All cloud providers have tools and services that
    you can use to monitor the resource consumption of your VM and other services.
    With these tools, we can easily identify and address our sizing requirements in
    a way that is cost-efficient.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段是我们实际开始进行适当的大小调整和优化我们的基础设施，以实际使用我们真正需要的资源，以充分利用云的弹性。所有云服务提供商都有工具和服务，您可以使用这些工具来监视虚拟机和其他服务的资源消耗。有了这些工具，我们可以轻松地识别和解决我们的大小需求，以一种成本有效的方式。
- en: The elasticity of the cloud not only allows us to size our resources on demand,
    without having to wait for the IT operations team to allocate or buy new hardware
    in the case that we run out resources in our hypervisors or dedicated physical
    servers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 云的弹性不仅允许我们根据需求调整资源，而且无需等待IT运维团队在我们的虚拟化主机或专用物理服务器资源不足时分配或购买新硬件。
- en: We can also provision extra VMs or instances of the service that we are consuming
    on demand, based on resource thresholds that we establish. Requests to these resources
    are automatically load balanced to our extra instances so that we only have to
    pay for those extra resources on periods of resource contention.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以根据我们设定的资源阈值按需为我们正在使用的服务提供额外的虚拟机或实例。对这些资源的请求会自动地负载均衡到我们的额外实例，这样我们只需要在资源争用期间支付额外的资源。
- en: Optimizing is not all about reducing VM sizes for a better price. Other areas
    that we can optimize are management and time to market. Adopting things such as
    PaaS and SaaS can help us achieve this.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 优化并不仅仅是为了获得更好的价格而减少虚拟机的大小。我们可以优化的其他领域包括管理和上市时间。采用PaaS和SaaS等方法可以帮助我们实现这一点。
- en: Once our applications are running on VMs on the cloud, we can easily start transitioning
    to these more managed services. Managed services help us forget about OS maintenance
    or middleware configurations, and our developers can spend more time actually
    developing and deploying applications rather than fighting with the operations
    team about an update that a library requires to be able to run the latest version
    of the production app, which eventually takes us a faster time to market and less
    money and time spent in management or operating system support contracts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的应用程序在云上的虚拟机上运行，我们可以轻松地开始过渡到这些更受管理的服务。受管理的服务帮助我们忘记操作系统的维护或中间件配置，我们的开发人员可以花更多时间实际开发和部署应用程序，而不是与运维团队争论库需要更新以使最新版本的生产应用程序运行，这最终使我们的上市时间更快，管理或操作系统支持合同的花费更少。
- en: Faster time to market, less management, and fewer conflicts between operations
    and development are the things that DevOps is all about. We have mentioned DevOps
    in several stages of the migrate phase, but let's take a deeper look into what
    DevOps is and what it's trying to accomplish on a closer level.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更快的上市时间，更少的管理，以及运维和开发之间更少的冲突，这就是DevOps所关注的。我们在迁移阶段的几个阶段中提到了DevOps，但让我们更深入地了解一下DevOps是什么，以及它试图在更接近的层面上实现什么。
- en: DevOps
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps
- en: In synthesis, DevOps is the combination of development and operations. It is
    the union and collaboration between these two IT groups—developers and system
    administrators—that make DevOps possible. Notice that we said collaboration*;* it
    is important to understand that collaboration is the core of DevOps. There is
    not authority behind DevOps, like there is for the scrum framework, for example.
    On the contrary, it has no standard, but it follows a set practices born from
    a cultural exchange between these two groups, to achieve shorter development cycles
    and increased deployment frequency with agile methodologies.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 综合而言，DevOps是开发和运维的结合。它是开发人员和系统管理员之间的联合和协作，使得DevOps成为可能。请注意我们说的是协作；重要的是要理解协作是DevOps的核心。与Scrum框架等有权威的方法不同，DevOps没有标准，但它遵循一套实践，这些实践源自这两个团队之间的文化交流，以实现更短的开发周期和更频繁的部署，采用敏捷方法。
- en: 'You will frequently see the term DevOps misused in different ways, for example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会看到DevOps这个术语被错误使用，例如：
- en: '**Position (DevOps Engineer)**: The nature of DevOps is collaboration across
    the operations and developer teams, and therefore DevOps is not a position or
    a specific team that does DevOps.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**职位（DevOps工程师）**：DevOps的性质是跨运维和开发团队的协作，因此DevOps不是一个职位或一个专门从事DevOps的团队。'
- en: '**Set of tools**: The tools that are used to help achieve the goals behind
    DevOps are also confused. Kubernetes, Docker, and Jenkins are all often confused
    with DevOps, but they are only the means to an end.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一套工具**：用于帮助实现DevOps背后目标的工具也经常被混淆。Kubernetes、Docker和Jenkins经常被误解为DevOps，但它们只是达到目的的手段。'
- en: '**Standard**: As we mentioned previously, the DevOps movement does not have
    any authority regulating its practices and flow; it is the people who are implementing
    and following a basic set of practices and adapting it to suit its own business
    needs.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准**：正如我们之前提到的，DevOps运动没有任何管理其实践和流程的权威；实施和遵循一套基本实践，并根据自身业务需求进行调整的是人们。'
- en: We now know that DevOps is a cultural movement, and that brings us more frequent
    development cycles, frequency, and integration between operations and development.
    Now, let's understand the problems behind the benefits of adopting DevOps.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道DevOps是一种文化运动，这给我们带来了更频繁的开发周期、频率和运维与开发之间的整合。现在，让我们了解采用DevOps的好处背后的问题。
- en: Monolithic waterfalls
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体瀑布
- en: 'The traditional method of developing software applications is called a **waterfall**.
    A waterfall is a linear sequential way of doing software; basically, you go only
    in one direction. It was adopted by software engineering from manufacturing and
    construction industries. The waterfall model steps are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的软件应用程序开发方法称为**瀑布**。瀑布是一种线性顺序的软件开发方式；基本上，你只能朝一个方向前进。它是从制造业和建筑业中被软件工程采用的。瀑布模型的步骤如下：
- en: Requirements
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需求
- en: Design
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计
- en: Implementation
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施
- en: Verification
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证
- en: Maintenance
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 维护
- en: The main problem is that due to the fact that this methodology was invented
    for manufacturing and construction, it is not agile at all. In these industries,
    every change or every problem that you face might cost you a lot, so all the precautions
    before moving on to the next stage have to be taken into consideration. Because
    of this, each stage takes quite a while, and therefore the time to market is reduced
    significantly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题在于，由于这种方法是为制造业和建筑业而发明的，它根本不具备敏捷性。在这些行业中，你面临的每一个变化或问题都可能让你付出很大的代价，因此在进入下一个阶段之前，必须考虑所有的预防措施。因此，每个阶段都需要相当长的时间，因此上市时间大大缩短。
- en: With this methodology, before even starting to create the application, developers
    have to design all the features, and time is spent talking and planning before
    even a line of code is written. These type of scenarios make a lot of sense for
    the origins of this methodology, because if you are building a skyscraper or a
    residential home, you want to know how it will be designed and structured before
    even starting the construction itself. In software development, the quicker you
    get feedback, the quicker you can adapt and make the changes that are necessary
    to fit the needs of your customer. With waterfall, feedback isn't provided until
    the very end, when the product is almost ready and changes are more difficult
    to implement.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，在甚至开始创建应用程序之前，开发人员必须设计所有的特性，并且在编写一行代码之前就花费了大量时间进行讨论和规划。这种情况对这种方法的起源来说是有意义的，因为如果你正在建造一座摩天大楼或者一座住宅，你希望在开始建造之前就知道它将如何设计和结构。在软件开发中，你获得反馈越快，就能越快地适应并进行必要的更改以满足客户的需求。在瀑布模型中，直到产品几乎准备好并且更改更难实施时才提供反馈。
- en: Waterfall in its own nature is monolithic and bulky, even though we have different
    teams working on different features of the product, and in the end all these features
    are compiled together to deliver a single big instance of a release. With this
    type of monolith, if there’s a **quality assurance** (**QA**) team, they have
    to test all the features of that release. This takes a lot of time and increases
    the time to market the product even more. The worst case would be that a change
    is needed or a bug gets through QA into production. A rollback will imply the
    full release with all its features together instead of just the one with the bug,
    bringing a lot of risk to the table when it comes to big releases.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型本质上是庞大而笨重的，即使我们有不同的团队在产品的不同特性上工作，最终所有这些特性都会被编译在一起，以交付一个单一的大版本。对于这种类型的单体应用，如果有质量保证（QA）团队，他们必须测试该版本的所有特性。这需要很长时间，甚至会进一步增加产品上市的时间。最糟糕的情况是需要进行更改或者一个错误通过了QA进入生产。回滚将意味着整个版本的发布，而不仅仅是带有错误的版本，这在进行大版本发布时会带来很大的风险。
- en: Agile solutions to monolithic problems
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷解决庞大的问题
- en: With waterfall, we realize too late that things that we thought that are going
    to work didn’t work as planned in the installation stage, or even later in the
    production stage. Performing those changes implied a whole lot of steps, and course
    correction was slow and painful.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型让我们太晚才意识到我们认为会起作用的事情在安装阶段或者甚至在生产阶段并没有按计划进行。进行这些更改涉及很多步骤，而且调整速度缓慢而痛苦。
- en: Software evolves quickly, and the needs of our clients might change in the middle
    of the design. That’s why we need a more agile and flexible methodology other
    than waterfall. The quicker we get feedback, the quicker we can adapt and deliver
    the exact expectations of our customers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 软件发展迅速，客户的需求可能会在设计过程中发生变化。这就是为什么我们需要比瀑布模型更敏捷和灵活的方法。我们获得反馈越快，就能越快地适应并交付客户的确切期望。
- en: This is exactly what the **Agile** methodology is for. Agile seeks to deliver
    the software in multiple releases, each one going through a set of tests and feedback
    in order to obtain it more quickly and make changes and course correction in a
    quicker and more agile way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是敏捷方法的用途。敏捷旨在通过多次发布软件，每次都经过一系列测试和反馈，以便更快地获得并以更敏捷的方式进行更改和调整。
- en: Agile was a game changer, but it generated conflicts between **operations**
    and **developers**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷是一个改变游戏规则的方法，但它在运维和开发之间产生了冲突。
- en: Deploying releases more frequently can be unstandardized and different every
    time, if a different engineer performs the deployment. Let's say you have a deployment
    at night. If the person who is deploying in the morning is a different engineer
    than the one that performed the last deployment, they could have a completely
    different way of deploying the code to production. These types of things generate
    discrepancy and can cause problem. For example, if something happens and it needs
    to be rolled back, a different person rolling it back might not know what the
    steps that were taken in deployment were in order to roll back the changes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 部署更频繁可能会变得不规范，并且每次都会有所不同，如果不同的工程师执行部署。比如说你在晚上部署，第二天早上负责部署的人和上次部署的工程师可能会有完全不同的部署方式。这种情况会产生差异，并可能导致问题。例如，如果发生了什么事情需要回滚，负责回滚的人可能不知道部署时采取的步骤，以便回滚更改。
- en: With these releases, system availability can be affected unpredictably. Operations
    engineers are measured by the stability of the systems that they are managing,
    and it's in their interest to keep it that way. Deploying unpredictable changes
    to production is something that they want to avoid. Developers, on the other hand,
    are measured by how quickly they can put their new changes, features, and releases
    into production. You can see how these two teams have completely opposite goals,
    and they almost have to fight each other to fulfil them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些发布可能会不可预测地影响系统的可用性。运维工程师的绩效评估是他们管理的系统的稳定性，他们有兴趣保持系统的稳定。将不可预测的更改部署到生产环境是他们想要避免的。另一方面，开发人员的绩效评估是他们能够多快地将新的更改、功能和发布投入生产。你可以看到这两个团队有完全相反的目标，他们几乎必须互相斗争来实现这些目标。
- en: Different goals across teams isolates each team from another. This creates silos,
    and throws the problem or app over the fence. This develops into a non-collaborative
    working environment, where everybody blames one another and things move at an
    even slower pace, instead of solving the problem.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 团队之间不同的目标使每个团队都处于孤立状态。这会产生信息孤岛，并把问题或应用程序抛到另一个团队那里。这会导致非协作的工作环境，每个人都互相指责，事情进展得更慢，而不是解决问题。
- en: Continuous culture for CI/CD
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续的CI/CD文化
- en: So far, I feel that you have noticed that we haven't talked about any tools
    to make DevOps possible. This is because tools will not solve all these types
    of problems. They will help you and your customers enforce the DevOps culture,
    but they are not what makes DevOps possible.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我觉得你已经注意到我们还没有谈论任何使DevOps成为可能的工具。这是因为工具不会解决所有这些类型的问题。它们将帮助您和您的客户强化DevOps文化，但并不是使DevOps成为可能的原因。
- en: 'Standardization and testing before we deliver our product is essential to Agile
    and DevOps, and tools will help us achieve these two goals. Let’s take a look
    into the Agile workflow and the DevOps workflow:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们交付产品之前进行标准化和测试对于敏捷和DevOps至关重要，工具将帮助我们实现这两个目标。让我们来看看敏捷工作流程和DevOps工作流程：
- en: 'Here is a look at the Agile workflow:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是敏捷工作流程的概述：
- en: '![](img/aee6ce74-5f90-4690-97e0-50ba754b576a.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aee6ce74-5f90-4690-97e0-50ba754b576a.png)'
- en: 'Here is how it compares to DevOps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与DevOps的比较：
- en: '![](img/1e4a7937-d1ea-4444-9564-fb1766d52748.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4a7937-d1ea-4444-9564-fb1766d52748.png)'
- en: It is very clear that both go hand in hand and that they overlap each other,
    as they seek the same goals. DevOps has extra steps, such as operate and monitor,
    which take place after the deployment of the code. These steps are very self-explanatory;
    monitor consists of monitoring our application in production, checking its behavior
    regarding whether it presents any bugs, of whether it is using all the resources
    that were allocated to it. Operate the hardware, VM, or PaaS where it was deployed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，它们两者是相辅相成的，它们彼此重叠，因为它们追求相同的目标。DevOps有额外的步骤，比如操作和监控，这些步骤发生在代码部署之后。这些步骤非常直观；监控包括监视我们的应用在生产环境中的行为，检查它是否存在任何错误，或者它是否正在使用分配给它的所有资源。操作硬件、虚拟机或PaaS的部署位置。
- en: The idea behind **continuous deployment** (**CD**) and **continuous integration**
    (**CI**) is to bring us standardization and the means for us to make sure that
    changes and releases make it into production as quickly as possible with the least
    possible failures. If a failure happens, we can revert quickly and easily as well.
    The whole point of CI/CD is to automate manual processes, and many companies still
    compile releases manually and still send emails to operations with the binaries
    and instructions on how to deploy their code. To achieve CI/CD, we have tools
    that will help us automate the whole build, test, deploy, and release cycle.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续部署**（CD）和**持续集成**（CI）的理念是为了给我们带来标准化和确保变更和发布尽快进入生产并且失败最少的手段。如果发生故障，我们也可以快速轻松地回滚。CI/CD的整个目的是自动化手动流程，许多公司仍然手动编译发布，并且通过电子邮件发送二进制文件和部署代码的说明给运维人员。为了实现CI/CD，我们有工具可以帮助我们自动化整个构建、测试、部署和发布周期。'
- en: A typical pipeline of CI/CD is triggered by a commit to a Git repository, which
    then triggers an automated build process that usually generates an artifact or
    a drop, which triggers automated testing and automated deployment of the application.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的CI/CD流水线是由对Git存储库的提交触发的，然后触发自动化构建过程，通常生成一个构件或一个发布，然后触发应用程序的自动化测试和自动化部署。
- en: Let's take a look at some of the different open source tools, with a brief explanation
    of each and to which stage of the DevOps cycle it belongs to.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些不同的开源工具，对每个工具进行简要解释，并说明它属于DevOps周期的哪个阶段。
- en: 'This is nowhere near an extensive list, and the explanations are a brief summary
    of their purpose:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这还远远不是一个详尽的清单，解释只是它们用途的简要总结：
- en: '**Code**:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '**Git**: A version control system that allows developers to have a distributed
    repository of their code and track changes across the development cycle.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：一个版本控制系统，允许开发人员拥有他们的代码分布式存储库，并跟踪开发周期中的变更。'
- en: '**GitHub, GitLab, Bitbucket**: These three are Git type repositories instead
    of tools. However, they are worth the mentioning, as they are the most used public
    and private repositories of Git that are used in the industry.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub、GitLab、Bitbucket**：这三个都是Git类型的存储库而不是工具。然而，它们值得一提，因为它们是行业中最常用的公共和私有Git存储库。'
- en: '**Apache subversion** (**SVN**): This is another versioning system. Although
    it is no longer as popular as it was since the release of Git, it is worth mentioning
    that it exists, as you might run into it in legacy environments.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache子版本**（SVN）：这是另一个版本控制系统。尽管自从Git发布以来它不再像以前那样受欢迎，但它值得一提，因为您可能会在传统环境中遇到它。'
- en: '**Build**:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：'
- en: '**Docker**: Docker, as we discussed in the [Chapter 14](70b68225-f724-4ff8-a1bf-84c77ad23a2b.xhtml),
    *Getting Your Hands Salty*, is a tool you can use to build your container images,
    independent of which language your application is written in. Docker uses **Buildkit**
    under the hood, which can also be used as a standalone product to build the docker
    images.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：Docker，正如我们在[第14章](70b68225-f724-4ff8-a1bf-84c77ad23a2b.xhtml)中讨论的那样，*Getting
    Your Hands Salty*，是一个工具，您可以使用它来构建您的容器镜像，而不受应用程序使用的语言的限制。Docker在底层使用**Buildkit**，它也可以作为一个独立产品用于构建Docker镜像。'
- en: '**Apache ant**: This tool was the first one to replace the famous Unix build
    binary that was made for Java applications. It uses `xml` to define the steps
    of the build. This tool is mainly for Java applications.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Ant**：这个工具是第一个取代为Java应用程序制作的著名Unix构建二进制文件的工具。它使用`xml`来定义构建的步骤。这个工具主要用于Java应用程序。'
- en: '**Apache Maven**: Apache Maven is also another Java build tool, but it came
    to fix problems such as dependency management that Apache Ant lacked.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Maven**：Apache Maven也是另一个Java构建工具，但它解决了Apache Ant缺乏的依赖管理等问题。'
- en: '**Gradle**: Grade was built on the basis of Apache Ant and Apache Maven, but
    Gradle uses it''s own specific language based on Groovy for defining the steps
    that are required. Gradle is the most modular of all, and mostly all functionalities
    are added through plugins.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gradle**：Gradle是基于Apache Ant和Apache Maven构建的，但Gradle使用自己基于Groovy的特定语言来定义所需的步骤。Gradle是最模块化的，几乎所有功能都是通过插件添加的。'
- en: '**Grunt**: This is the Ant or Maven equivalent of JavaScript; it automates
    and runs tasks such as linting, unit testing, minification, and compilation. Grunt
    is highly modular, as there are thousands of plugins available.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grunt**：这是JavaScript的Ant或Maven等效工具；它自动化并运行任务，如linting、单元测试、最小化和编译。Grunt高度模块化，因为有成千上万的插件可用。'
- en: '**Test**:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：'
- en: '**Selenium**: This is mainly a web application tester that can be run against
    of most modern-day web browsers. With Selenium, you don''t necessarily need to
    know a test programming language as it offers an IDE and the option to use several
    of the most popular programming languages.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium**：这主要是一个Web应用程序测试工具，可以运行在大多数现代Web浏览器上。使用Selenium，您不一定需要了解测试编程语言，因为它提供了一个IDE和使用几种最流行的编程语言的选项。'
- en: '**Apache JMeter**: This is basically a load performance tool that generates
    a heavy load on servers to test static and dynamic content so that you can analyse
    its performance on different load types.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache JMeter**：这基本上是一个负载性能工具，它在服务器上生成大量负载，以测试静态和动态内容，以便您可以分析其在不同负载类型下的性能。'
- en: '**Appium**: On the other hand, Appium not only tests web applications, but
    it can also perform tests on mobile and desktop apps.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Appium**：另一方面，Appium不仅可以测试Web应用程序，还可以对移动和桌面应用程序进行测试。'
- en: '**Release, Deploy, Manage, Orchestrate, Operate**:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布、部署、管理、编排、操作**：'
- en: '**Jenkins**: This is probably the most used tool in the DevOps culture. Jenkins
    is an automation server that makes all the steps possible via triggers that call
    the automation of the build and the release process, as well as any automated
    testing that is configured in the pipelines.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**：这可能是DevOps文化中使用最广泛的工具。Jenkins是一个自动化服务器，通过调用构建和发布过程的自动化触发器，以及在管道中配置的任何自动化测试，使所有步骤都成为可能。'
- en: '**Ansible**: This is mostly a configuration management tool, but it can also
    help us release our applications via its modularity and provides an easy way of
    developing your own playbooks to run against a set of servers.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible**：这主要是一个配置管理工具，但它也可以通过其模块化帮助我们发布我们的应用程序，并提供一种便捷的方式来开发您自己的playbooks以运行在一组服务器上。'
- en: '**Puppet**: This is another configuration management tool that helps us maintain
    configurations and manage package patch installations on our environment servers.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Puppet**：这是另一个配置管理工具，它帮助我们维护配置并管理环境服务器上的软件包补丁安装。'
- en: '**Helm**: Look at Helm as the `yum` or the `apt` of Kubernetes: on its own,
    it is unable to automate any deployment process, but with the help of tools such
    as Jenkins, you can use it to deploy your own custom charts to Kubernetes, as
    well as keep a release history if a rollback is needed.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm**：将Helm视为Kubernetes的`yum`或`apt`：它本身无法自动化任何部署过程，但借助诸如Jenkins之类的工具，您可以使用它将自定义图表部署到Kubernetes，并在需要回滚时保留发布历史。'
- en: '**Monitor**:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Monitor**：'
- en: '**Nagios**: This is the classical monitoring centralized tool that monitors
    everything from system performance to the status of services and much more.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nagios**：这是经典的监控集中工具，监控从系统性能到服务状态等各种内容。'
- en: '**Prometheus**: A project under the umbrella of the cloud native computing
    foundation. It allows us to create our own metrics and alerting.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus**：这是云原生计算基金会旗下的一个项目。它允许我们创建自己的指标和警报。'
- en: '**Fluentbit**: This allows you to collect multiple logs and/or data and send
    it to multiple destinations for log gathering or processing.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fluentbit**：这允许您收集多个日志和/或数据，并将其发送到多个目的地以进行日志收集或处理。'
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This being the last chapter, we wrapped up with some considerations when designing
    solutions. In this chapter, we went through what we should have in mind when dealing
    with different scenarios.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一章，我们总结了在设计解决方案时需要考虑的一些因素。在本章中，我们介绍了在处理不同场景时应该牢记的事项。
- en: Knowing where and how we'll be deploying our solutions helps us have an idea
    of what sort of requirements might be in place; for example, certain industries
    will have hard requirements that can't be ignored, such as HIPAA, PCI, and GDPR.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 了解我们将在哪里以及如何部署我们的解决方案有助于我们了解可能存在的要求类型；例如，某些行业将有无法忽视的硬性要求，如HIPAA、PCI和GDPR。
- en: Then, we spoke about deploying on-premises solutions and how different workloads
    are better for bare metal and what considerations to have when implementing in
    VMs.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们谈到了部署本地解决方案以及不同的工作负载对裸金属的更好适用性，以及在实施虚拟机时需要考虑的因素。
- en: We touched on how moving to the cloud is not as simple as clicking on a portal
    and waiting, but rather how it is a journey, since it allows for the modernization
    of workloads given the plethora of options available in the cloud.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到了如何转移到云端并不像点击一个门户网站然后等待那样简单，而是一个旅程，因为它允许根据云端提供的众多选项对工作负载进行现代化。
- en: Also, we mentioned that there are different methods for migrating existing workloads,
    such as lift and shift, refactor, rearchitect, and rebuild.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们提到了迁移现有工作负载的不同方法，如提升和转移、重构、重新架构和重建。
- en: Lastly, we described how DevOps is helping shape the industry by unifying the
    development and operations aspects and how this ties with how CI/CD has changed
    how software is deployed and used.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们描述了DevOps如何通过统一开发和运营方面来帮助塑造行业，以及这如何与CI/CD改变了软件部署和使用方式相关联。
- en: Questions
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is HIPAA?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HIPAA是什么？
- en: What workloads are preferred to run on bare metal?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些工作负载更适合在裸金属上运行？
- en: Should hypervisors run on bare metal?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟化监视器应该在裸金属上运行吗？
- en: Do VMs share resources?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟机共享资源吗？
- en: What is network segmentation?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是网络分割？
- en: What is lift and shift?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是提升和转移？
- en: What is refactor?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是重构？
- en: What is Rearchitect?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是重新架构？
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Production of Large Computer Programs**: [http://sunset.usc.edu/csse/TECHRPTS/1983/usccse83-501/usccse83-501.pdf](http://sunset.usc.edu/csse/TECHRPTS/1983/usccse83-501/usccse83-501.pdf)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**大型计算机程序的生产**：[http://sunset.usc.edu/csse/TECHRPTS/1983/usccse83-501/usccse83-501.pdf](http://sunset.usc.edu/csse/TECHRPTS/1983/usccse83-501/usccse83-501.pdf)'
- en: '**Managing the development of large software systems**: [http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf](http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 管理大型软件系统的开发：[http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf](http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf)
- en: '**Azure Migration Center**: [https://azure.microsoft.com/en-gb/migration/get-started/](https://azure.microsoft.com/en-gb/migration/get-started/)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 迁移中心：[https://azure.microsoft.com/en-gb/migration/get-started/](https://azure.microsoft.com/en-gb/migration/get-started/)
- en: '**3 Journeys for Migrating a Data Center to Cloud IaaS**: [https://www.gartner.com/smarterwithgartner/3-journeys-for-migrating-a-data-center-to-cloud-iaas/](https://www.gartner.com/smarterwithgartner/3-journeys-for-migrating-a-data-center-to-cloud-iaas/)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据中心迁移到云 IaaS 的 3 条路径：[https://www.gartner.com/smarterwithgartner/3-journeys-for-migrating-a-data-center-to-cloud-iaas/](https://www.gartner.com/smarterwithgartner/3-journeys-for-migrating-a-data-center-to-cloud-iaas/)
