["```\nUsage: ./kdress vmlinuz_input vmlinux_output <system.map>\n\n$ ./kdress /boot/vmlinuz-`uname -r` vmlinux /boot/System.map-`uname -r`\n[+] vmlinux has been successfully extracted\n[+] vmlinux has been successfully instrumented with a complete ELF symbol table.\n```", "```\n$ readelf -s vmlinux | grep sys_call_table\n 34214: ffffffff81801460  4368 OBJECT  GLOBAL DEFAULT    4 sys_call_table\n 34379: ffffffff8180c5a0  2928 OBJECT  GLOBAL DEFAULT    4 ia32_sys_call_table\n```", "```\n$ sudo gdb -q vmlinux /proc/kcore\nReading symbols from vmlinux...\n[New process 1]\nCore was generated by `BOOT_IMAGE=/vmlinuz-3.16.0-49-generic root=/dev/mapper/ubuntu--vg-root ro quiet'.\n#0  0x0000000000000000 in ?? ()\n(gdb) print &sys_call_table\n$1 = (<data variable, no debug info> *) 0xffffffff81801460 <sys_call_table>\n(gdb) x/gx &sys_call_table\n0xffffffff81801460 <sys_call_table>:  0xffffffff811d5260\n(gdb) x/5i 0xffffffff811d5260\n   0xffffffff811d5260 <sys_read>:  data32 data32 data32 xchg %ax,%ax\n   0xffffffff811d5265 <sys_read+5>:  push   %rbp\n   0xffffffff811d5266 <sys_read+6>:  mov    %rsp,%rbp\n   0xffffffff811d5269 <sys_read+9>:  push   %r14\n   0xffffffff811d526b <sys_read+11>:mov    %rdx,%r14\n```", "```\n$ sudo grep sys_write /proc/kallsyms\nffffffff811d5310 T sys_write\n$ grep _write /usr/include/x86_64-linux-gnu/asm/unistd_64.h\n#define __NR_write 1\n$ sudo gdb -q vmlinux /proc/kcore\n(gdb) x/gx &sys_call_table+1\n0xffffffff81801464 <sys_call_table+4>:  0x811d5310ffffffff\n```", "```\n#define SYSCALL_NR __NR_write\n\nstatic char syscall_code[7];\nstatic char new_syscall_code[7] =\n\"\\x68\\x00\\x00\\x00\\x00\\xc3\"; // push $addr; ret\n\n// our new version of sys_write\nint new_syscall(long fd, void *buf, size_t len)\n{\n        printk(KERN_INFO \"I am the evil sys_write!\\n\");\n\n        // Replace the original code back into the first 6\n        // bytes of sys_write (remove trampoline)\n\n        memcpy(\n       sys_call_table[SYSCALL_NR], syscall_code,\n                sizeof(syscall_code)\n        );\n\n        // now we invoke the original system call with no trampoline\n        ((int (*)(fd, buf, len))sys_call_table[SYSCALL_NR])(fd, buf, len);\n\n        // Copy the trampoline back in place!\n        memcpy(\n                sys_call_table[SYSCALL_NR], new_syscall_code,\n                sizeof(syscall_code)\n        );\n}\n\nint init_module(void)\n{\n        // patch trampoline code with address of new sys_write\n        *(long *)&new_syscall_code[1] = (long)new_syscall;\n\n        // insert trampoline code into sys_write\n        memcpy(\n                syscall_code, sys_call_table[SYSCALL_NR],\n                sizeof(syscall_code)\n        );\n        memcpy(\n                sys_call_table[SYSCALL_NR], new_syscall_code,\n                sizeof(syscall_code)\n        );\n        return 0;\n}\n\nvoid cleanup_module(void)\n{\n        // remove infection (trampoline)\n        memcpy(\n                sys_call_table[SYSCALL_NR], syscall_code,\n                sizeof(syscall_code)\n        );\n}\n```", "```\npush $address\nret\n```", "```\nmovl $addr, %eax\njmp *%eax\n```", "```\njmp offset\n```", "```\n$ sudo grep sys_write /proc/kallsyms\n0xffffffff811d5310\n$ sudo gdb -q vmlinux /proc/kcore\nReading symbols from vmlinux...\n[New process 1]\nCore was generated by `BOOT_IMAGE=/vmlinuz-3.16.0-49-generic root=/dev/mapper/ubuntu--vg-root ro quiet'.\n#0  0x0000000000000000 in ?? ()\n(gdb) x/3i 0xffffffff811d5310\n   0xffffffff811d5310 <sys_write>:  data32 data32 data32 xchg %ax,%ax\n   0xffffffff811d5315 <sys_write+5>:  push   %rbp\n   0xffffffff811d5316 <sys_write+6>:  mov    %rsp,%rbp\n```", "```\n(gdb) x/i system_call_fastpath+19\n0xffffffff8176ea86 <system_call_fastpath+19>:  \ncallq  *-0x7e7feba0(,%rax,8)\n\n```", "```\ncall *sys_call_table(,%rax,8)\n\n```", "```\ntarget_address = address_of_call + offset + 5\n```", "```\nif ((long)vfs_ops->readdir >= KERNEL_MIN_ADDR &&\n    (long)vfs_ops->readdir < KERNEL_MAX_ADDR)\n        pointer_is_valid = 1;\nelse\n        pointer_is_valid = 0;\n```", "```\n$ readelf -S vmlinux | grep alt\n  [23] .altinstructions  PROGBITS         ffffffff81e64528  01264528\n  [24] .altinstr_replace PROGBITS         ffffffff81e6a480  0126a480\n```", "```\nstruct alt_instr {\n   s32 instr_offset;      /* original instruction */\n   s32 repl_offset;       /* offset to replacement instruction */\n   u16 cpuid;             /* cpuid bit set for replacement */\n   u8  instrlen;          /* length of original instruction */\n   u8  replacementlen;    /* length of new instruction, <= instrlen */\n};\n```", "```\n# ./textify vmlinux /proc/kcore -s sys_call_table\nkernel Detective 2014 - Bitlackeys.org\n[+] Analyzing kernel code/data for symbol sys_call_table in range [0xffffffff81801460 - 0xffffffff81802570]\n[+] No code modifications found for object named 'sys_call_table'\n\n# ./textify vmlinux /proc/kcore -a\nkernel Detective 2014 - Bitlackeys.org\n[+] Analyzing kernel code of entire text segment. [0xffffffff81000000 - 0xffffffff81773da4]\n[+] No code modifications have been detected within kernel memory\n```", "```\n$ objdump -t infected.lkm\n00000040 g     F .text  0000001b evil\n...\n00000040 g     F .text  0000001b init_module\n```", "```\n# ./kcore_ecfs kcore.img\n\n# readelf -S kcore.img\nhere are 6 section headers, starting at offset 0x60404afc:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .note             NULL             0000000000000000  000000e8\n       0000000000001a14  000000000000000c           0    48     0\n  [ 2] .kernel           PROGBITS         ffffffff81000000  01001afc\n       0000000001403000  0000000000000000 WAX       0     0     0\n  [ 3] .bss              PROGBITS         ffffffff81e77000  00000000\n       0000000000169000  0000000000000000  WA       0     0     0\n  [ 4] .modules          PROGBITS         ffffffffa0000000  01404afc\n       000000005f000000  0000000000000000 WAX       0     0     0\n  [ 5] .shstrtab         STRTAB           0000000000000000  60404c7c\n       0000000000000026  0000000000000000           0     0     0\n\n# readelf -s kcore.img | grep sys_call_table\n 34214: ffffffff81801460  4368 OBJECT 4 sys_call_table\n 34379: ffffffff8180c5a0  2928 OBJECT 4 ia32_sys_call_table\n```"]