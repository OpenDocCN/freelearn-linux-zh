["```\nstruct snd_soc_dai_link {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0const char *stream_name;\n\u00a0\u00a0\u00a0\u00a0const char *cpu_name;\n\u00a0\u00a0\u00a0\u00a0struct device_node *cpu_of_node;\n\u00a0\u00a0\u00a0\u00a0const char *cpu_dai_name;\n\u00a0\u00a0\u00a0\u00a0const char *codec_name;\n\u00a0\u00a0\u00a0\u00a0struct device_node *codec_of_node;\n\u00a0\u00a0\u00a0\u00a0const char *codec_dai_name;\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai_link_component *codecs;\n\u00a0\u00a0\u00a0\u00a0unsigned int num_codecs;\n\u00a0\u00a0\u00a0\u00a0const char *platform_name;\n\u00a0\u00a0\u00a0\u00a0struct device_node *platform_of_node;\n\u00a0\u00a0\u00a0\u00a0int id;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_pcm_stream *params;\n\u00a0\u00a0\u00a0\u00a0unsigned int num_params;\n\u00a0\u00a0\u00a0\u00a0unsigned int dai_fmt;\n\u00a0\u00a0\u00a0\u00a0enum snd_soc_dpcm_trigger trigger[2];\n\u00a0\u00a0/* codec/machine specific init - e.g. add machine controls */\n\u00a0\u00a0\u00a0\u00a0int (*init)(struct snd_soc_pcm_runtime *rtd);\n\u00a0\u00a0\u00a0\u00a0/* machine stream operations */\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_ops *ops;\n\u00a0\u00a0\u00a0\u00a0/* For unidirectional dai links */\n\u00a0\u00a0\u00a0\u00a0unsigned int playback_only:1;\n\u00a0\u00a0\u00a0\u00a0unsigned int capture_only:1;\n\u00a0\u00a0\u00a0\u00a0/* Keep DAI active over suspend */\n\u00a0\u00a0\u00a0\u00a0unsigned int ignore_suspend:1;\n[...]\n\u00a0\u00a0\u00a0\u00a0/* DPCM capture and Playback support */\n\u00a0\u00a0\u00a0\u00a0unsigned int dpcm_capture:1;\n\u00a0\u00a0\u00a0\u00a0unsigned int dpcm_playback:1;\n\u00a0\u00a0\u00a0\u00a0struct list_head list; /* DAI link list of the soc card */\n};\n```", "```\nif (link->platform_name && link->platform_of_node)\n\u00a0\u00a0\u00a0\u00a0==> Error\nif (link->cpu_name && link->cpu_of_node)\n\u00a0\u00a0\u00a0\u00a0==> Eror\nif (!link->cpu_dai_name && !(link->cpu_name || \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0link->cpu_of_node))\n\u00a0\u00a0\u00a0\u00a0==> Error\n```", "```\nssi1: ssi@2028000 {\n\u00a0\u00a0\u00a0\u00a0#sound-dai-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0compatible = \"fsl,imx6q-ssi\", \"fsl,imx51-ssi\";\n\u00a0\u00a0\u00a0\u00a0reg = <0x02028000 0x4000>;\n\u00a0\u00a0\u00a0\u00a0interrupts = <0 46 IRQ_TYPE_LEVEL_HIGH>;\n\u00a0\u00a0\u00a0\u00a0clocks = <&clks IMX6QDL_CLK_SSI1_IPG>,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<&clks IMX6QDL_CLK_SSI1>;\n\u00a0\u00a0\u00a0\u00a0clock-names = \"ipg\", \"baud\";\n\u00a0\u00a0\u00a0\u00a0dmas = <&sdma 37 1 0>, <&sdma 38 1 0>;\n\u00a0\u00a0\u00a0\u00a0dma-names = \"rx\", \"tx\";\n\u00a0\u00a0\u00a0\u00a0fsl,fifo-depth = <15>;\n\u00a0\u00a0\u00a0\u00a0status = \"disabled\";\n};\n&i2c0{\n\u00a0\u00a0\u00a0\u00a0sgtl5000: codec@0a {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compatible = \"fsl,sgtl5000\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#sound-dai-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0x0a>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clocks = <&audio_clock>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VDDA-supply = <&reg_3p3v>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VDDIO-supply = <&reg_3p3v>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VDDD-supply = <&reg_1p5v>;\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\nsound {\n\u00a0\u00a0\u00a0\u00a0compatible = \"fsl,imx51-babbage-sgtl5000\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"fsl,imx-audio-sgtl5000\";\n\u00a0\u00a0\u00a0\u00a0model = \"imx51-babbage-sgtl5000\";\n\u00a0\u00a0\u00a0\u00a0ssi-controller = <&ssi1>;\n\u00a0\u00a0\u00a0\u00a0audio-codec = <&sgtl5000>;\n\u00a0\u00a0\u00a0\u00a0[...]\n};\n```", "```\nstatic int imx_sgtl5000_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0struct device_node *np = pdev->dev.of_node;\n\u00a0\u00a0\u00a0\u00a0struct device_node *ssi_np, *codec_np;\n\u00a0\u00a0\u00a0\u00a0struct imx_sgtl5000_data *data = NULL;\n\u00a0\u00a0\u00a0\u00a0int int_port, ext_port; int ret;\n[...]\n\u00a0\u00a0\u00a0\u00a0ssi_np = of_parse_phandle(pdev->dev.of_node, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ssi-controller\", 0);\n\u00a0\u00a0\u00a0\u00a0codec_np = of_parse_phandle(pdev->dev.of_node, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"audio-codec\", 0);\n\u00a0\u00a0\u00a0\u00a0if (!ssi_np || !codec_np) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&pdev->dev, \"phandle missing or invalid\\n\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = -EINVAL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto fail;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);\n\u00a0\u00a0\u00a0\u00a0if (!data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = -ENOMEM;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto fail;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0data->dai.name = \"HiFi\";\n\u00a0\u00a0\u00a0\u00a0data->dai.stream_name = \"HiFi\";\n\u00a0\u00a0\u00a0\u00a0data->dai.codec_dai_name = \"sgtl5000\";\n\u00a0\u00a0\u00a0\u00a0data->dai.codec_of_node = codec_np;\n\u00a0\u00a0\u00a0\u00a0data->dai.cpu_of_node = ssi_np;\n\u00a0\u00a0\u00a0\u00a0data->dai.platform_of_node = ssi_np;\n\u00a0\u00a0\u00a0\u00a0data->dai.init = &imx_sgtl5000_dai_init;\n\u00a0\u00a0\u00a0\u00a0data->card.dev = &pdev->dev;\n\u00a0\u00a0\u00a0\u00a0[...]\n};\n```", "```\nstatic const struct snd_soc_dapm_widget sgtl5000_dapm_widgets[] = {\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INPUT(\"LINE_IN\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INPUT(\"MIC_IN\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"HP_OUT\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"LINE_OUT\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_SUPPLY(\"Mic Bias\", SGTL5000_CHIP_MIC_CTRL, 8, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mic_bias_event,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_POST_PMU | \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PRE_PMD),\n[...]\n};\n```", "```\nstatic const struct snd_soc_dapm_widget imx_sgtl5000_dapm_widgets[] = { \n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_MIC(\"Mic Jack\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_LINE(\"Line In Jack\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_HP(\"Headphone Jack\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_SPK(\"Line Out Jack\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_SPK(\"Ext Spk\", NULL),\n};\n```", "```\nsound {\n\u00a0\u00a0\u00a0\u00a0compatible = \"fsl,imx51-babbage-sgtl5000\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"fsl,imx-audio-sgtl5000\";\n\u00a0\u00a0\u00a0\u00a0model = \"imx51-babbage-sgtl5000\";\n\u00a0\u00a0\u00a0\u00a0ssi-controller = <&ssi1>;\n\u00a0\u00a0\u00a0\u00a0audio-codec = <&sgtl5000>;\n\u00a0\u00a0\u00a0\u00a0audio-routing = \"MIC_IN\", \"Mic Jack\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Mic Jack\", \"Mic Bias\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Headphone Jack\", \"HP_OUT\";\n[...]\n};\n```", "```\nint snd_soc_of_parse_card_name(struct snd_soc_card *card,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *prop);\n```", "```\nstatic const struct snd_soc_dapm_widget rk_dapm_widgets[] = {\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_HP(\"Headphone\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_MIC(\"Headset Mic\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_MIC(\"Int Mic\", NULL),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_SPK(\"Speaker\", NULL),\n};\n/* Connection to the codec pin */\nstatic const struct snd_soc_dapm_route rk_audio_map[] = {\n\u00a0\u00a0\u00a0\u00a0{\"IN34\", NULL, \"Headset Mic\"},\n\u00a0\u00a0\u00a0\u00a0{\"Headset Mic\", NULL, \"MICBIAS\"},\n\u00a0\u00a0\u00a0\u00a0{\"DMICL\", NULL, \"Int Mic\"},\n\u00a0\u00a0\u00a0\u00a0{\"Headphone\", NULL, \"HPL\"},\n\u00a0\u00a0\u00a0\u00a0{\"Headphone\", NULL, \"HPR\"},\n\u00a0\u00a0\u00a0\u00a0{\"Speaker\", NULL, \"SPKL\"},\n\u00a0\u00a0\u00a0\u00a0{\"Speaker\", NULL, \"SPKR\"},\n};\nstatic struct snd_soc_card snd_soc_card_rk = {\n\u00a0\u00a0\u00a0\u00a0.name = \"ROCKCHIP-I2S\",\n\u00a0\u00a0\u00a0\u00a0.owner = THIS_MODULE,\n[...]\n\u00a0\u00a0\u00a0\u00a0.dapm_widgets = rk_dapm_widgets,\n\u00a0\u00a0\u00a0\u00a0.num_dapm_widgets = ARRAY_SIZE(rk_dapm_widgets),\n\u00a0\u00a0\u00a0\u00a0.dapm_routes = rk_audio_map,\n\u00a0\u00a0\u00a0\u00a0.num_dapm_routes = ARRAY_SIZE(rk_audio_map),\n\u00a0\u00a0\u00a0\u00a0.controls = rk_mc_controls,\n\u00a0\u00a0\u00a0\u00a0.num_controls = ARRAY_SIZE(rk_mc_controls),\n};\n```", "```\nstruct snd_soc_ops {\n\u00a0\u00a0\u00a0\u00a0int (*startup)(struct snd_pcm_substream *);\n\u00a0\u00a0\u00a0\u00a0void (*shutdown)(struct snd_pcm_substream *);\n\u00a0\u00a0\u00a0\u00a0int (*hw_params)(struct snd_pcm_substream *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_pcm_hw_params *);\n\u00a0\u00a0\u00a0\u00a0int (*hw_free)(struct snd_pcm_substream *);\n\u00a0\u00a0\u00a0\u00a0int (*prepare)(struct snd_pcm_substream *);\n\u00a0\u00a0\u00a0\u00a0int (*trigger)(struct snd_pcm_substream *, int);\n};\n```", "```\nint snd_soc_dai_set_fmt(struct snd_soc_dai *dai, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int fmt)\nint snd_soc_dai_set_pll(struct snd_soc_dai *dai, int pll_id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int source, unsigned int freq_in,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq_out)\nint snd_soc_dai_set_sysclk(struct snd_soc_dai *dai, int clk_id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq, int dir)\nint snd_soc_dai_set_clkdiv(struct snd_soc_dai *dai,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int div_id, int div)\n```", "```\nstatic int foo_hw_params(struct snd_pcm_substream *substream,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_pcm_hw_params *params)\n{\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_pcm_runtime *rtd = substream->private_data;\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *codec_dai = rtd->codec_dai;\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *cpu_dai = rtd->cpu_dai;\n\u00a0\u00a0\u00a0\u00a0unsigned int pll_out = 24000000;\n\u00a0\u00a0\u00a0\u00a0int ret = 0;\n\u00a0\u00a0\u00a0\u00a0/* set the cpu DAI configuration */\n\u00a0\u00a0\u00a0\u00a0ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_I2S |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAIFMT_NB_NF | \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAIFMT_CBM_CFM);\n\u00a0\u00a0\u00a0\u00a0if (ret < 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0/* set codec DAI configuration */\n\u00a0\u00a0\u00a0\u00a0ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAIFMT_NB_NF | \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAIFMT_CBM_CFM);\n\u00a0\u00a0\u00a0\u00a0if (ret < 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0/* set the codec PLL */\n\u00a0\u00a0\u00a0\u00a0ret = snd_soc_dai_set_pll(codec_dai, WM8994_FLL1, 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pll_out, params_rate(params) * 256);\n\u00a0\u00a0\u00a0\u00a0if (ret < 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0/* set the codec system clock */\n\u00a0\u00a0\u00a0\u00a0ret = snd_soc_dai_set_sysclk(codec_dai, WM8994_SYSCLK_FLL1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0params_rate(params) * 256, SND_SOC_CLOCK_IN);\n\u00a0\u00a0\u00a0\u00a0if (ret < 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstruct snd_soc_card {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0struct module *owner;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* callbacks */\n\u00a0\u00a0\u00a0\u00a0int (*set_bias_level)(struct snd_soc_card *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_context *dapm,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enum snd_soc_bias_level level);\n\u00a0\u00a0\u00a0\u00a0int (*set_bias_level_post)(struct snd_soc_card *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_context *dapm,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enum snd_soc_bias_level level);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* CPU <--> Codec DAI links\t*/\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai_link *dai_link;\n\u00a0\u00a0\u00a0\u00a0int num_links;\n\u00a0\u00a0\u00a0\u00a0const struct snd_kcontrol_new *controls;\n\u00a0\u00a0\u00a0\u00a0int num_controls;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dapm_widget *dapm_widgets;\n\u00a0\u00a0\u00a0\u00a0int num_dapm_widgets;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dapm_route *dapm_routes;\n\u00a0\u00a0\u00a0\u00a0int num_dapm_routes;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dapm_widget *of_dapm_widgets;\n\u00a0\u00a0\u00a0\u00a0int num_of_dapm_widgets;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dapm_route *of_dapm_routes;\n\u00a0\u00a0\u00a0\u00a0int num_of_dapm_routes;\n[...]\n};\n```", "```\nint devm_snd_soc_register_card(struct device *dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_card *card);\n```", "```\nstatic const struct snd_soc_dapm_widget rk_dapm_widgets[] = { \n\u00a0\u00a0\u00a0\u00a0[...]\n};\nstatic const struct snd_soc_dapm_route rk_audio_map[] = {\n\u00a0\u00a0\u00a0\u00a0[...]\n};\nstatic const struct snd_kcontrol_new rk_mc_controls[] = {\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_PIN_SWITCH(\"Headphone\"),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_PIN_SWITCH(\"Headset Mic\"),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_PIN_SWITCH(\"Int Mic\"),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_PIN_SWITCH(\"Speaker\"),\n};\nstatic const struct snd_soc_ops rk_aif1_ops = {\n\u00a0\u00a0\u00a0\u00a0.hw_params = rk_aif1_hw_params,\n};\nstatic struct snd_soc_dai_link rk_dailink = {\n\u00a0\u00a0\u00a0\u00a0.name = \"max98090\",\n\u00a0\u00a0\u00a0\u00a0.stream_name = \"Audio\",\n\u00a0\u00a0\u00a0\u00a0.codec_dai_name = \"HiFi\",\n\u00a0\u00a0\u00a0\u00a0.ops = &rk_aif1_ops,\n\u00a0\u00a0\u00a0\u00a0/* set max98090 as slave */\n\u00a0\u00a0\u00a0\u00a0.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAIFMT_CBS_CFS,\n};\n```", "```\nstatic struct snd_soc_card snd_soc_card_rk = {\n\u00a0\u00a0\u00a0\u00a0.name = \"ROCKCHIP-I2S\",\n\u00a0\u00a0\u00a0\u00a0.owner = THIS_MODULE,\n\u00a0\u00a0\u00a0\u00a0.dai_link = &rk_dailink,\n\u00a0\u00a0\u00a0\u00a0.num_links = 1,\n\u00a0\u00a0\u00a0\u00a0.dapm_widgets = rk_dapm_widgets,\n\u00a0\u00a0\u00a0\u00a0.num_dapm_widgets = ARRAY_SIZE(rk_dapm_widgets),\n\u00a0\u00a0\u00a0\u00a0.dapm_routes = rk_audio_map,\n\u00a0\u00a0\u00a0\u00a0.num_dapm_routes = ARRAY_SIZE(rk_audio_map),\n\u00a0\u00a0\u00a0\u00a0.controls = rk_mc_controls,\n\u00a0\u00a0\u00a0\u00a0.num_controls = ARRAY_SIZE(rk_mc_controls),\n};\n```", "```\nstatic int snd_rk_mc_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0int ret = 0;\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_card *card = &snd_soc_card_rk;\n\u00a0\u00a0\u00a0\u00a0struct device_node *np = pdev->dev.of_node;\n[...]\n\u00a0\u00a0\u00a0\u00a0card->dev = &pdev->dev;\n\u00a0\u00a0\u00a0\u00a0/* Assign codec, cpu and platform node */\n\u00a0\u00a0\u00a0\u00a0rk_dailink.codec_of_node = of_parse_phandle(np,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"rockchip,audio-codec\", 0);\n\u00a0\u00a0\u00a0\u00a0rk_dailink.cpu_of_node = of_parse_phandle(np,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"rockchip,i2s-controller\", 0);\n\u00a0\u00a0\u00a0\u00a0rk_dailink.platform_of_node = rk_dailink.cpu_of_node;\n[...]\n\u00a0\u00a0\u00a0\u00a0ret = snd_soc_of_parse_card_name(card, \"rockchip,model\");\n\u00a0\u00a0\u00a0\u00a0ret = devm_snd_soc_register_card(&pdev->dev, card);\n[...]\n}\n```", "```\nsound {\n\u00a0\u00a0\u00a0\u00a0compatible =\"simple-audio-card\";\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,name =\"VF610-Tower-Sound-Card\";\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,format =\"left_j\";\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,bitclock-master = <&dailink0_master>;\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,frame-master = <&dailink0_master>;\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,widgets =\"Microphone\",\"Microphone Jack\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Headphone\",\"Headphone Jack\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Speaker\",\"External Speaker\";\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,routing = \"MIC_IN\",\"Microphone Jack\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Headphone Jack\",\"HP_OUT\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"External Speaker\",\"LINE_OUT\";\n\u00a0\u00a0\u00a0\u00a0simple-audio-card,cpu {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sound-dai = <&sh_fsi20>;\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0dailink0_master: simple-audio-card,codec {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sound-dai = <&ak4648>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clocks = <&osc>;\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\ndata->dai.name = \"S/PDIF PCM\";\ndata->dai.stream_name = \"S/PDIF PCM\";\ndata->dai.codecs->dai_name = \"snd-soc-dummy-dai\";\ndata->dai.codecs->name = \"snd-soc-dummy\";\ndata->dai.cpus->of_node = spdif_np;\ndata->dai.platforms->of_node = spdif_np;\ndata->dai.playback_only = true;\ndata->dai.capture_only = true;\nif (of_property_read_bool(np, \"spdif-out\"))\n\u00a0\u00a0\u00a0\u00a0data->dai.capture_only = false;\nif (of_property_read_bool(np, \"spdif-in\"))\n\u00a0\u00a0\u00a0\u00a0data->dai.playback_only = false;\nif (data->dai.playback_only && data->dai.capture_only) {\n\u00a0\u00a0\u00a0\u00a0dev_err(&pdev->dev, \"no enabled S/PDIF DAI link\\n\");\n\u00a0\u00a0\u00a0\u00a0goto end;\n}\n```"]