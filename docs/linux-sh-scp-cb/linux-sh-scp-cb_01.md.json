["```\nusername@hostname$\n\n```", "```\nroot@hostname#\n\n```", "```\n#!/bin/bash\n```", "```\n$ sh script.sh # Assuming script is in the current directory.\n\n```", "```\n$ sh /home/path/script.sh # Using full path of script.sh.\n\n```", "```\n$ chmod a+x script.sh\n\n```", "```\n$ ./script.sh #./ represents the current directory\n\n```", "```\n$ /home/path/script.sh # Full path of the script is used\n\n```", "```\n$ /bin/bash script.sh\n\n```", "```\n$ cmd1 ; cmd2\n\n```", "```\n$ cmd1\n$ cmd2\n\n```", "```\n$ echo \"Welcome to Bash\"\nWelcome to Bash\n\n```", "```\n$ echo Welcome to Bash\nWelcome to Bash\n\n```", "```\n$ echo 'text in quote'\n\n```", "```\n$ echo \"cannot include exclamation - ! within double quotes\"\n\n```", "```\nbash: !: event not found error\n\n```", "```\n$ echo Hello world !\n\n```", "```\n$ echo 'Hello world !'\n\n```", "```\n$ echo \"Hello world \\!\" #Escape character \\ prefixed.\n\n```", "```\n$ printf \"Hello world\"\n\n```", "```\n#!/bin/bash \n#Filename: printf.sh\n\nprintf  \"%-5s %-10s %-4s\\n\" No Name  Mark \nprintf  \"%-5s %-10s %-4.2f\\n\" 1 Sarath 80.3456 \nprintf  \"%-5s %-10s %-4.2f\\n\" 2 James 90.9989 \nprintf  \"%-5s %-10s %-4.2f\\n\" 3 Jeff 77.564\n```", "```\nNo    Name       Mark\n1     Sarath     80.35\n2     James      91.00\n3     Jeff       77.56\n\n```", "```\necho -e \"1\\t2\\t3\"\n123\n\n```", "```\necho -e \"\\e[1;31m This is red text \\e[0m\"\n\n```", "```\necho -e \"\\e[1;42m Green Background \\e[0m\"\n\n```", "```\ncat /proc/$PID/environ\n\n```", "```\n$ pgrep gedit\n12501\n\n```", "```\n$ cat /proc/12501/environ\nGDM_KEYBOARD_LAYOUT=usGNOME_KEYRING_PID=1560USER=slynuxHOME=/home/slynux\n\n```", "```\n$ cat /proc/12501/environ  | tr '\\0' '\\n'\n\n```", "```\nvar=value\n```", "```\nvar=\"value\" #Assignment of value to variable var.\n\necho $var\n```", "```\necho ${var}\n```", "```\nvalue\n\n```", "```\n#!/bin/bash\n#Filename :variables.sh\nfruit=apple\ncount=5\necho \"We have $count ${fruit}(s)\"\n```", "```\nWe have 5 apple(s)\n\n```", "```\nHTTP_PROXY=http://192.168.0.2:3128\nexport HTTP_PROXY\n\n```", "```\n$ echo $PATH\n/home/slynux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n\n```", "```\nexport PATH=\"$PATH:/home/user/bin\"\n\n```", "```\n$ PATH=\"$PATH:/home/user/bin\"\n$ export PATH\n\n$ echo $PATH\n/home/slynux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/user/bin\n\n```", "```\nlength=${#var}\n\n```", "```\n$ var=12345678901234567890\n$ echo ${#var} \n20\n\n```", "```\necho $SHELL\n\n```", "```\necho $0\n\n```", "```\n$ echo $SHELL\n/bin/bash\n\n$ echo $0\nbash\n\n```", "```\nif [ $UID -ne 0 ]; then\necho Non root user. Please run as root.\nelse\necho \"Root user\"\nfi\n```", "```\n    $ cat ~/.bashrc | grep PS1\n    PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ '\n\n    ```", "```\n    slynux@localhost: ~$ PS1=\"PROMPT>\"\n    PROMPT> Type commands here # Prompt string changed.\n\n    ```", "```\n#!/bin/bash\nno1=4;\nno2=5;\n```", "```\nlet result=no1+no2\necho $result\n```", "```\n    $ let no1++\n\n    ```", "```\n    $ let no1--\n\n    ```", "```\n    let no+=6\n    let no-=6\n\n    ```", "```\n    result=$[ no1 + no2 ]\n    ```", "```\n    result=$[ $no1 + 5 ]\n    ```", "```\n    result=$(( no1 + 50 ))\n    ```", "```\n    result=`expr 3 + 4`\n    result=$(expr $no1 + 5)\n    ```", "```\n    echo \"4 * 0.56\" | bc\n    2.24\n\n    no=54; \n    result=`echo \"$no * 1.5\" | bc`\n    echo $result\n    81.0\n    ```", "```\n        echo \"scale=2;3/8\" | bc\n        0.37\n\n        ```", "```\n        #!/bin/bash\n        Description: Number conversion\n\n        no=100\n        echo \"obase=2;$no\" | bc\n        1100100\n        no=1100100\n        echo \"obase=10;ibase=2;$no\" | bc\n        100\n        ```", "```\n        echo \"sqrt(100)\" | bc #Square root\n        echo \"10^10\" | bc #Square\n        ```", "```\n$ echo \"This is a sample text 1\" > temp.txt\n\n```", "```\n$ echo \"This is sample text 2\" >> temp.txt\n\n```", "```\n$ cat temp.txt\nThis is sample text 1\nThis is sample text 2\n\n```", "```\n$ ls +\nls: cannot access +: No such file or directory\n\n```", "```\n$ ls + > out.txt \nls: cannot access +: No such file or directory \n\n```", "```\n$ ls + 2> out.txt # works\n\n```", "```\n$ cmd 2>stderr.txt 1>stdout.txt\n\n```", "```\n$ cmd 2>&1 output.txt\n\n```", "```\n$ cmd &> output.txt \n\n```", "```\n$ echo a1 > a1 \n$ cp a1 a2 ; cp a2 a3;\n$ chmod 000 a1  #Deny all permissions\n\n```", "```\n$ cat a*\ncat: a1: Permission denied\na1\na1\n\n```", "```\n$ cat a* 2> err.txt #stderr is redirected to err.txt\na1\na1\n\n$ cat err.txt\ncat: a1: Permission denied\n\n```", "```\n$ some_command 2> /dev/null\n\n```", "```\n$ cat a* | tee out.txt | cat -n\ncat: a1: Permission denied\n 1a1\n 2a1\n\n```", "```\n$ cat out.txt\na1\na1\n\n```", "```\n$ cat a* | tee \u2013a out.txt | cat \u2013n.\n\n```", "```\n$ cmd1 | cmd2 | cmd -\n\n```", "```\n$ echo who is this | tee -\nwho is this\nwho is this\n\n```", "```\n$ cat file | cmd\n$ cmd1 | cmd2\n\n```", "```\n$ cmd < file\n\n```", "```\n#!/bin/bash\ncat <<EOF>log.txt\nLOG FILE HEADER\nThis is a test log file\nFunction: System statistics\nEOF\n\n```", "```\n$ cat log.txt\nLOG FILE HEADER\nThis is a test log file\nFunction: System statistics\n\n```", "```\n$ exec 3<input.txt # open for reading with descriptor number 3\n\n```", "```\n$ echo this is a test line > input.txt\n$ exec 3<input.txt\n\n```", "```\n$ cat <&3\nthis is a test line\n\n```", "```\n$ exec 4>output.txt # open for writing\n\n```", "```\n$ exec 4>output.txt\n$ echo newline >&4\n$ cat output.txt\nnewline\n\n```", "```\n$ exec 5>>input.txt\n\n```", "```\n$ exec 5>>input.txt\n$ echo appended line >&5\n$ cat input.txt \nnewline\nappended line\n\n```", "```\narray_var=(1 2 3 4 5 6)\n#Values will be stored in consecutive locations starting from index 0.\n```", "```\narray_var[0]=\"test1\"\narray_var[1]=\"test2\"\narray_var[2]=\"test3\"\narray_var[3]=\"test4\"\narray_var[4]=\"test5\"\narray_var[5]=\"test6\"\n```", "```\n$ echo ${array_var[0]}\ntest1\nindex=5\n$ echo ${array_var[$index]}\ntest6\n\n```", "```\n$ echo ${array_var[*]}\ntest1 test2 test3 test4 test5 test6\n\n```", "```\n$ echo ${array_var[@]}\ntest1 test2 test3 test4 test5 test6\n\n```", "```\n$ echo ${#array_var[*]}\n6\n```", "```\n$ declare -A ass_array\n\n```", "```\n    $ ass_array=([index1]=val1 [index2]=val2)\n\n    ```", "```\n    $ ass_array[index1]=val1\n    $ ass_array[index2]=val2\n\n    ```", "```\n$ declare -A fruits_value\n$ fruits_value=([apple]='100dollars' [orange]='150 dollars')\n\n```", "```\n$ echo \"Apple costs ${fruits_value[apple]}\"\nApple costs 100 dollars\n\n```", "```\n$ echo ${!array_var[*]}\n\n```", "```\n$ echo ${!array_var[@]}\n\n```", "```\n$ echo ${!fruits_value[*]}\norange apple\n\n```", "```\n$ alias new_command='command sequence'\n\n```", "```\n$ alias install='sudo apt-get install'\n\n```", "```\n$ echo 'alias cmd=\"command seq\"' >> ~/.bashrc\n\n```", "```\nalias rm='cp $@ ~/backup; rm $@'\n\n```", "```\n$ \\command\n```", "```\ntput cols\ntput lines\n```", "```\ntput longname\n\n```", "```\ntput cup 100 100\n\n```", "```\ntput setb no\n\n```", "```\ntput setf no\n\n```", "```\ntput bold\n\n```", "```\ntput smul\ntput rmul\n\n```", "```\ntput ed\n\n```", "```\n#!/bin/sh\n#Filename: password.sh\necho -e \"Enter password: \"\nstty -echo\nread password\nstty echo\necho\necho Password read.\n```", "```\n$ date\nThu May 20 23:09:04 IST 2010\n\n```", "```\n$ date +%s\n1290047248\n\n```", "```\n$ date --date \"Thu Nov 18 08:07:21 IST 2010\" +%s\n1290047841\n\n```", "```\n$ date --date \"Jan 20 2001\" +%A\nSaturday\n\n```", "```\n$ date \"+%d %B %Y\"\n20 May 2010\n\n```", "```\n# date -s \"Formatted date string\"\n\n```", "```\n# date -s \"21 June 2009 11:01:22\"\n\n```", "```\n#!/bin/bash\n#Filename: time_take.sh\nstart=$(date +%s)\ncommands;\nstatements;\n\nend=$(date +%s)\ndifference=$(( end - start))\necho Time taken to execute commands is $difference seconds.\n```", "```\n#!/bin/bash\n#Filename: sleep.sh\necho -n Count:\ntput sc\n\ncount=0;\nwhile true;\ndo\nif [ $x -lt 40 ];\nthen let count++;\nsleep 1;\ntput rc\ntput ed\necho -n $count;\nelse exit 0;\nfi\ndone\n```", "```\n$ bash -x script.sh\n\n```", "```\n#!/bin/bash\n#Filename: debug.sh\nfor i in {1..6}\ndo\nset -x\necho $i\nset +x\ndone\necho \"Script executed\"\n```", "```\n#!/bin/bash\nfunction DEBUG()\n{\n[ \"$_DEBUG\" == \"on\" ] && $@ || :\n}\n\nfor i in {1..10}\ndo\nDEBUG echo $i\ndone\n```", "```\n$ _DEBUG=on ./script.sh\n\n```", "```\nfunction fname()\n{\nstatements;\n}\n```", "```\nfname()\n{\nstatements;\n}\n```", "```\n$ fname ; # executes function\n\n```", "```\nfname arg1 arg2 ; # passing args\n\n```", "```\nfname()\n{\n  echo $1, $2; #Accessing arg1 and arg2\n  echo \"$@\"; # Printing all arguments as list at once\n  echo \"$*\"; # Similar to $@, but arguments taken as single entity\n  return 0; # Return value\n}\n```", "```\nexport -f fname\n\n```", "```\ncmd; \necho $?;\n\n```", "```\n#!/bin/bash\n#Filename: success_test.sh\nCMD=\"command\" #Substitute with command for which you need to test exit status\n$CMD\nif [ $? \u2013eq 0 ];\nthen\necho \"$CMD executed successfully\"\nelse\necho \"$CMD terminated unsuccessfully\"\nfi\n```", "```\n$ command -p -v -k 1 file\n```", "```\n$ command -pv -k 1 file\n```", "```\n$ command -vpk 1 file\n```", "```\n$ command file -pvk 1\n```", "```\n$ cmd1 | cmd2 | cmd3 \n\n```", "```\n$ ls | cat -n > out.txt\n\n```", "```\ncmd_output=$(COMMANDS)\n```", "```\ncmd_output=$(ls | cat -n)\necho $cmd_output\n\n```", "```\ncmd_output=`COMMANDS`\n```", "```\ncmd_output=`ls | cat -n`\necho $cmd_output\n\n```", "```\npwd;\n(cd /bin; ls);\npwd;\n```", "```\n$ cat text.txt\n1\n2\n3\n\n$ out=$(cat text.txt)\n$ echo $out\n1 2 3 # Lost \\n spacing in 1,2,3 \n\n$ out=\"$(cat tex.txt)\"\n$ echo $out\n1\n2\n3\n\n```", "```\n$ read -n 2 var\n$ echo $var\n\n```", "```\nread -s var\n```", "```\nread -p \"Enter input:\"  var\n```", "```\nread -t timeout var\n```", "```\n$ read -t 2 var\n#Read the string that is typed within 2 seconds into variable var.\n\n```", "```\nread -d delim_charvar\n```", "```\n$ read -d \":\" var\nhello:#var is set to hello\n\n```", "```\ndata=\"name,sex,rollno,location\"\n#To read each of the item in a variable, we can use IFS.\noldIFS=$IFS\nIFS=, now,\nfor item in $data;\ndo\necho Item: $item\ndone\n\nIFS=$oldIFS\n```", "```\nItem: name\nItem: sex\nItem: rollno\nItem: location\n\n```", "```\n#!/bin/bash\n#Description: Illustration of IFS\nline=\"root:x:0:0:root:/root:/bin/bash\" \noldIFS=$IFS;\nIFS=\":\"\ncount=0\nfor item in $line;\ndo\n\n[ $count -eq 0 ]  && user=$item;\n[ $count -eq 6 ]  && shell=$item;\nlet count++\ndone;\nIFS=$oldIFS\necho $user\\'s shell is $shell;\n```", "```\nroot's shell is /bin/bash\n\n```", "```\nfor var in list;\ndo\ncommands; # use $var\ndone\nlist can be a string, or a sequence.\n```", "```\nfor i in {a..z}; do actions; done;\n```", "```\nfor((i=0;i<10;i++))\n{\ncommands; # Use $i\n}\n```", "```\nwhile condition\ndo\ncommands;\ndone\n```", "```\nx=0;\nuntil [ $x -eq 9 ]; # [ $x -eq 9 ] is the condition\ndo let x++; echo $x;\ndone\n```", "```\nif condition;\nthen\ncommands;\nfi\n```", "```\nif condition; \nthen\ncommands;\nelif condition; \nthen\n    commands\nelse\n    commands\nfi\n```", "```\n[ condition ] && action; # action executes if condition is true.\n[ condition ] || action; # action executes if condition is false.\n\n```", "```\n[ $var -eq 0 ] or [ $var -eq 0 ]\n```", "```\n[ $var -eq 0 ]  # It returns true when $var equal to 0.\n[ $var -ne 0 ] # It returns true when $var not equals 0\n```", "```\n[ $var1 -ne 0 -a $var2 -gt 2 ]  # using AND -a\n[ $var -ne 0 -o var2 -gt 2 ] # OR -o\n```", "```\nfpath=\"/etc/passwd\"\nif [ -e $fpath ]; then\necho File exists; \nelse\necho Does not exist; \nfi\n```", "```\nif [[ -n $str1 ]] && [[ -z $str2 ]] ;\nthen\ncommands;\nfi\n```", "```\nstr1=\"Not empty \"\nstr2=\"\"\nif [[ -n $str1 ]] && [[ -z $str2 ]];\nthen\necho str1 is non-empty and str2 is empty string.\nfi\n```", "```\nstr1 is non-empty and str2 is empty string.\n\n```", "```\nif  [ $var -eq 0 ]; then echo \"True\"; fi\ncan be written as\nif  test $var -eq 0 ; then echo \"True\"; fi\n```"]