- en: Chapter 1. Linux and E-mail Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Linux和电子邮件基础知识
- en: If you are one of those thousands of system administrators who manage the networks
    and computers of small to medium-sized companies and you are thinking of hosting
    your own e-mail service, this book is for you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是成千上万的系统管理员之一，负责管理中小型公司的网络和计算机，并且正在考虑托管自己的电子邮件服务，那么这本书就是为你准备的。
- en: We will start with the most basic components of an e-mail system. Together those
    components will allow your users to send or receive mail to or from anyone on
    the Internet. This might be all you need, but many companies also want to provide
    their users with an accessible webmail service that people can use from home or
    when they are on the road. Another feature that many people unfortunately cannot
    be without today is proper protection against viruses spread via e-mail as well
    as the filtering of spam messages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从电子邮件系统的最基本组件开始。这些组件将允许你的用户向互联网上的任何人发送或接收邮件。这可能是你所需要的全部，但许多公司还希望为他们的用户提供一个可访问的网络邮件服务，人们可以在家里或在外出时使用。今天许多人不幸无法没有的另一个功能是有效防范通过电子邮件传播的病毒以及垃圾邮件的过滤。
- en: We will also cover the most important aspects of security to prevent unauthorized
    or malicious use of the server. We will then discuss how to retain an archive
    of all e-mails received or sent by the server. Finally, we shall describe a process
    to backup and restore the server to protect all messages against data loss.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将涵盖安全性的最重要方面，以防止未经授权或恶意使用服务器。然后，我们将讨论如何保留服务器接收或发送的所有电子邮件的存档。最后，我们将描述一种备份和恢复服务器的过程，以保护所有消息免受数据丢失。
- en: This book will cover the major features of the software in question, which will
    give you a solid foundation to work from.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将介绍所讨论软件的主要特性，这将为你提供一个坚实的基础。
- en: By the end of this book, you will have a functioning e-mail server suitable
    for most small companies.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书结束时，你将拥有一个适合大多数小公司的运行良好的电子邮件服务器。
- en: As the technical platform for our endeavor, we have chosen the GNU/Linux operating
    system and a proven selection of free software tools that will help us achieve
    the goal of a secure and reliable e-mail server for smaller companies. The tools
    we have chosen are widely known and used, written by software professionals, and
    are supported by a large community of users.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们努力的技术平台，我们选择了GNU/Linux操作系统和一组经过验证的免费软件工具，这些工具将帮助我们实现为中小企业提供安全可靠的电子邮件服务器的目标。我们选择的工具是广为人知和使用的，由软件专业人员编写，并得到了大量用户的支持。
- en: In this very first chapter of the book, we start with what you need to know
    before you even start working on your server.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一章中，我们将从你在开始处理服务器之前需要了解的内容开始。
- en: We discuss the advantages and disadvantages of running your own e-mail server.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们讨论了运行自己的电子邮件服务器的优缺点。
- en: Guidance is given for choosing the appropriate hardware and network connection
    needed for the server.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供了选择服务器所需的适当硬件和网络连接的指导。
- en: We give a brief introduction to the protocol used for exchanging mail over the
    Internet and the main protocols available to allow users to access their e-mails.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们对用于在互联网上交换邮件的协议进行了简要介绍，以及允许用户访问他们的电子邮件的主要协议。
- en: In order to correctly route e-mail, we discuss the configuration options required
    on the server connected to the Internet.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了正确路由电子邮件，我们讨论了连接到互联网的服务器上所需的配置选项。
- en: Finally, we provide a brief introduction to backup e-mail servers.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们简要介绍备用电子邮件服务器。
- en: By the end of this chapter, you will have a basic understanding of the main
    components required to run an e-mail server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将对运行电子邮件服务器所需的主要组件有基本的了解。
- en: Why manage your own e-mail server
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要管理自己的电子邮件服务器
- en: Most **Internet Service Providers** (**ISP**s) already give customers the ability
    to send and receive e-mail on their servers, so why would we want to own and manage
    it by ourselves? As you are after all reading this book, you may already have
    your reasons, but let us examine this question and some possible answers to it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数互联网服务提供商（ISP）已经为客户提供了在他们的服务器上发送和接收电子邮件的能力，那么为什么我们要自己拥有和管理它呢？毕竟，你正在阅读这本书，你可能已经有了自己的理由，但让我们来探讨这个问题以及一些可能的答案。
- en: The most important reason for hosting and managing your own e-mail server is
    control. For many organizations, e-mail is an important part of the Information
    Technology infrastructure. Keeping control over your e-mail has many advantages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 托管和管理自己的电子邮件服务器最重要的原因是控制。对于许多组织来说，电子邮件是信息技术基础设施的重要组成部分。保持对你的电子邮件的控制有许多优点。
- en: If a company has offices in multiple places, you have full freedom when choosing
    how to connect them. A virtual private network between the offices, Transport
    Layer Security (TLS) connections between the offices, a single server for all
    offices, one server per office, and so on.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一家公司在多个地方设有办事处，你在选择如何连接它们时有完全的自由。办事处之间的虚拟专用网络，办事处之间的传输层安全（TLS）连接，所有办事处的单一服务器，每个办事处一个服务器，等等。
- en: By keeping your own messaging in-house, you can send messages to each other
    without having them travel across unsecured lines to and from the ISP. This also
    gives you a more reliable service if your Internet connection fails, and it avoids
    unnecessary latencies.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在内部保留自己的消息，你可以相互发送消息，而无需让它们在未加密的线路上往返于ISP之间。如果你的互联网连接失败，这也会为你提供更可靠的服务，并避免不必要的延迟。
- en: You are not dependent on the competence of the provider's staff. If you manage
    your own server and need to solve a difficult problem or implement a custom solution
    for something, you can. Or if necessary, you can hire a consultant to help you.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不依赖于提供商员工的能力。如果你管理自己的服务器并需要解决一个困难的问题或为某事实施自定义解决方案，你可以。或者在必要时，你可以雇佣顾问来帮助你。
- en: If the provider goes bankrupt, all of your data resides safely in your server
    room and on your backup media.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供商破产，你所有的数据都安全地存放在你的服务器房间和备份介质上。
- en: You are not subject to the limitations that our provider may set regarding,
    say, use of disk space or the maximum size of messages.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不受我们的提供商可能设置的限制，比如磁盘空间的使用或消息的最大大小。
- en: You can implement any policies for message archiving, antispam, or antivirus
    that you choose.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以实施任何您选择的消息归档、反垃圾邮件或反病毒策略。
- en: More control requires more responsibility and more knowledge, and that is where
    this book comes in.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的控制需要更多的责任和知识，这就是本书的用武之地。
- en: These hopefully compelling arguments aside, there are also downsides to hosting
    your own e-mail server. This is a task that requires a certain level of knowledge
    and commitment, and so should not be undertaken by everyone. With your own server,
    you are not only responsible for the service you provide to your users, but you
    also have a responsibility towards the whole Internet community. An ill-configured
    e-mail server can help worms and spam to spread, which is not only is a disservice
    to the community but can also get your server blacklisted. Even though a properly
    set up server can run for years without requiring much maintenance, you must keep
    yourself reasonably updated and be prepared to act upon new threats that may arise.
    This is not meant to scare you off, but just to make you think carefully before
    embarking on this project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些令人信服的论点之外，自己托管电子邮件服务器也有缺点。这是一项需要一定水平的知识和承诺的任务，因此不应该由每个人来承担。拥有自己的服务器，您不仅对提供给用户的服务负责，还对整个互联网社区负有责任。配置不良的电子邮件服务器可以帮助蠕虫和垃圾邮件传播，这不仅对社区是一种伤害，还可能使您的服务器被列入黑名单。即使一个正确设置的服务器可以长时间运行而不需要太多维护，您也必须保持自己合理更新，并准备应对可能出现的新威胁。这并不是要吓唬您，而是要在着手这个项目之前仔细考虑。
- en: What you need to host an e-mail server
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要托管电子邮件服务器的内容
- en: Your server needs to be available through a permanent Internet connection with
    a fixed IP address. In theory, it is possible to run an e-mail server with a non-fixed
    (dynamic) IP address but it will not be reliable when the IP address is changed,
    and you will risk losing messages. With a dynamic IP address, you will also face
    a bigger risk of being put on one of the blacklists for dynamic IP address ranges.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您的服务器需要通过固定IP地址的永久互联网连接可用。理论上，可以使用非固定（动态）IP地址运行电子邮件服务器，但当IP地址更改时，它将不可靠，并且您将面临丢失消息的风险。使用动态IP地址，您还将面临更大的风险，可能会被列入动态IP地址范围的黑名单之一。
- en: If you are serious about running an e-mail server, get a decent business-class
    Internet connection. These are relatively inexpensive these days, and investing
    in one will save a lot of trouble later on. E-mail traffic does not depend on
    high bandwidth, so the capacity of a simple DSL line should be more than adequate.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认真考虑运行电子邮件服务器，请获取一个体面的商业级互联网连接。如今这些相对便宜，投资其中将会在以后节省很多麻烦。电子邮件流量不依赖于高带宽，因此简单的DSL线路的容量应该是足够的。
- en: Even though you will need a fixed IP address, you do not necessarily need a
    public IP address dedicated to the mail server. If your company only has a few
    external IP addresses and uses private RFC 1918 addresses (`192.168.x.y`) on the
    inside with a **Network Address Translation** ( **NAT**) router, this is not a
    problem. The NAT router connects the private network to the rest of the world,
    and it is possible to set up the router to forward the ports required by the e-mail
    services to the internal e-mail server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您需要固定IP地址，也不一定需要专用于邮件服务器的公共IP地址。如果您的公司只有几个外部IP地址，并且在内部使用私有RFC 1918地址（`192.168.x.y`）并且使用**网络地址转换**（**NAT**）路由器，这不是问题。NAT路由器将私有网络连接到世界其他地方，并且可以设置路由器以将电子邮件服务所需的端口转发到内部电子邮件服务器。
- en: The next table shows which TCP ports are most likely to be used for this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了最有可能用于此目的的TCP端口。
- en: '| Port | Service |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 端口 | 服务 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `25` | Simple Mail Transfer Protocol (SMTP) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `25` | 简单邮件传输协议（SMTP） |'
- en: '| `110` | Post Office Protocol (POP) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `110` | 邮局协议（POP） |'
- en: '| `143` | Internet Message Access Protocol (IMAP) |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `143` | 互联网消息访问协议（IMAP） |'
- en: '| `993` | IMAP over TLS |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `993` | TLS上的IMAP |'
- en: If employees want to access their messages from home or from the road, all that
    is required is to make sure that no firewall is blocking access to the required
    ports, and that the NAT router (if any) forwards these ports correctly. If users
    want to send messages via the e-mail server, some extra configuration will be
    necessary to allow the host to perform authentication to prevent unregistered
    users sending e-mail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果员工想要从家里或外出时访问他们的消息，只需确保没有防火墙阻止访问所需的端口，并且NAT路由器（如果有）正确地转发这些端口即可。如果用户想通过电子邮件服务器发送消息，则需要一些额外的配置，以允许主机执行身份验证，以防止未注册用户发送电子邮件。
- en: Sizing the hardware of your e-mail server
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整电子邮件服务器的硬件规模
- en: When choosing a computer to use as an e-mail server, a lot of people have misconceptions
    regarding the hardware required to perform this task well. The constantly increasing
    performance of computers seems to lead people into thinking that they really need
    the latest and most buzzword-compliant stuff, even if they only want to handle
    a few thousand messages per day.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一台计算机作为电子邮件服务器时，很多人对执行这项任务所需的硬件存在误解。计算机性能不断增加似乎让人们认为他们真的需要最新和最符合时髦词汇的东西，即使他们只想处理几千封邮件。
- en: Although a certain expertise is required to assess the hardware needs for an
    organization, common sense goes a long way. For a company with 100 users, a reasonably
    high upper limit for the number of messages per day would be 5,000\. That would
    allow each user to send or receive 50 messages every day. Even if we say that
    each and every message is sent within the eight hours of the working day, on an
    average, the system will not have to cope with more than 10 messages per minute.
    It is reasonable that a modern computer can receive and act upon a single e-mail
    message, often only a few kilobytes in size, in less than six seconds.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管评估组织的硬件需求需要一定的专业知识，但常识也很重要。对于拥有100个用户的公司，每天的消息数量的合理上限可能是5,000条。这将允许每个用户每天发送或接收50条消息。即使我们假设每条消息都是在工作日的八个小时内发送的，系统平均每分钟处理的消息数量也不会超过10条。现代计算机可以在不到六秒的时间内接收并处理一封电子邮件，通常每封邮件的大小只有几千字节。
- en: This little back-of-the-envelope exercise is obviously very rough and does not,
    for example, take into account the fact that messages typically do not arrive
    uniformly distributed in time, but it is still a pretty good way of estimating.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的估算显然很粗糙，例如没有考虑到消息通常不是均匀分布在时间上，但这仍然是一个相当不错的估算方法。
- en: Let us now take a deeper look into what to think about when choosing the server.
    For an e-mail server that does not perform any content scanning (viruses, spam,
    and so on), the performance is typically not bound by the CPU but by the I/O performance,
    specifically the seek time of the hard disk(s) and the quality and configuration
    of the I/O controller. Throwing more CPU horsepower at the problem will not help.
    Modern computers are relatively better equipped CPU wise than I/O wise, so investing
    in a multiple gigahertz multi-core CPU configuration is probably useless. For
    any reasonably modern 1 GHz-class PC, a handful of messages per second is no problem.
    That load equates to almost 20,000 messages every hour.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更深入地看一下在选择服务器时要考虑什么。对于一个不执行任何内容扫描（病毒、垃圾邮件等）的电子邮件服务器，性能通常不受CPU的限制，而是受I/O性能的限制，特别是硬盘的寻道时间和I/O控制器的质量和配置。增加CPU的性能对问题没有帮助。现代计算机在CPU方面的装备相对较好，因此投资于多个千兆赫多核CPU配置可能是没有用的。对于任何合理现代的1
    GHz级PC，每秒处理几条消息都不是问题。这个负载相当于每小时接近20,000条消息。
- en: Adding content scanning will probably increase the CPU load quite a lot, and
    the I/O system will also require more power to keep up. Still, one or two messages
    per second should not place a noticeable load on the system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 添加内容扫描可能会显著增加CPU负载，I/O系统也需要更多的能力来跟上。但是，每秒一两条消息不应该对系统造成明显的负载。
- en: What we have been discussing so far is just the e-mail server. All it does is
    receive messages and deliver them to other hosts or local mailboxes. When choosing
    a server, you should not forget that people are going to want to read their e-mail
    too. This service is provided by additional server software. Just like the message
    handling software, the key requirement is I/O and not CPU. The number of users
    of the system is by itself an irrelevant figure; what is important are the usage
    patterns. How often will the users poll their mailboxes? If 100 users poll their
    mailboxes once every five minutes, on average there will be one every three seconds.
    Checking if a mailbox has any new messages, takes a fraction of a second, so the
    burden will not be significant.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的只是电子邮件服务器。它所做的只是接收消息并将其传递给其他主机或本地邮箱。在选择服务器时，你不应忘记人们也会想要阅读他们的电子邮件。这项服务是由额外的服务器软件提供的。就像消息处理软件一样，关键要求是I/O而不是CPU。系统用户的数量本身是一个无关紧要的数字；重要的是使用模式。用户多久会轮询他们的邮箱？如果100个用户平均每五分钟轮询一次邮箱，那么平均每三秒就会有一个用户。检查邮箱是否有新消息只需要一小部分时间，所以负担不会很大。
- en: The final, and arguably the hardest thing to consider, is disk storage. Using
    the expected traffic numbers, we can make some rough estimates. Let us assume
    80% of our messages are under 1 KB, 15% have document attachments of 200 KB with
    the remainder being videos and other large files of 1 MB. Therefore, using a 200
    day working year, that equates to a storage requirement of approximately 80 GB
    per year. A typical 1 TB disk drive would have the capacity for more than 12 years
    messages assuming no messages are deleted.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，也可以说是最难考虑的是磁盘存储。使用预期的流量数字，我们可以做一些粗略的估算。假设我们的消息中80%小于1 KB，15%带有200 KB的文档附件，其余是视频和其他1
    MB的大文件。因此，使用一个200天的工作年，大约需要80 GB的存储空间。一个典型的1 TB硬盘驱动器可以容纳超过12年的消息，假设没有消息被删除。
- en: These guidelines may appear vague and non specific, but it is impossible to
    give exact figures. The performance one would expect from a given piece of hardware
    depends on so many factors that trying to give anything but general guidelines
    would be misleading. Use common sense and simple back-of-the-envelope calculations;
    do not buy the fanciest server you can find unless you are sure you really need
    it, but also do not use any old abandoned desktop machine you can find. Even if
    the performance of the old desktop machine may suffice, the components may be
    old and the service agreement or warranty may be out of date.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指导可能看起来模糊而不具体，但是给出确切的数字是不可能的。从给定的硬件中期望的性能取决于很多因素，试图给出除了一般性指导之外的任何东西都会产生误导。使用常识和简单的估算；除非你确定真的需要，不要购买你能找到的最花哨的服务器，但也不要使用你能找到的任何旧的废弃台式机。即使旧台式机的性能可能足够，但组件可能已经过时，服务协议或保修可能已经过期。
- en: 'Main e-mail protocols: SMTP, POP, and IMAP'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要的电子邮件协议：SMTP、POP和IMAP
- en: Why are we discussing basic network communication protocols in this book? Are
    we not running advanced software? Indeed we are, but knowing one's way around
    the protocols cannot only assist debugging a possibly non-working system but also
    increases the understanding of a mail system's behavior. We will start with a
    rather non-technical overview of the protocols, after which we will focus on the
    protocol details.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们在这本书中讨论基本的网络通信协议？难道我们不是在运行高级软件吗？确实是，但了解协议的使用方式不仅可以帮助调试可能不工作的系统，还可以增加对邮件系统行为的理解。我们将从对协议的非技术概述开始，然后专注于协议的细节。
- en: Overview
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: In the UNIX environment, traditional mail applications did not use any network
    protocol at all. They have instead accessed the locally stored mailbox files directly
    through the file system. Typically, the inbox of each user is stored in a single
    file in either the `/var/mail` or the `/var/spool/mail` directory with the same
    name as that of the user (for example, `/var/spool/mail/joe`). The focus of this
    book is to discuss Linux based e-mail solutions for a small office where users
    do not wish to log on to a central server with a terminal application in order
    to access their mail, so local mail storage will be covered only briefly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在UNIX环境中，传统的邮件应用程序根本不使用任何网络协议。它们通过文件系统直接访问本地存储的邮箱文件。通常，每个用户的收件箱存储在`/var/mail`或`/var/spool/mail`目录中的单个文件中，文件名与用户的名称相同（例如，`/var/spool/mail/joe`）。本书的重点是讨论Linux基于的小型办公室的电子邮件解决方案，用户不希望使用终端应用程序登录到中央服务器以访问他们的邮件，因此本地邮件存储将只简要涵盖。
- en: The most important protocol in Internet mailing is the **Simple Mail Transfer
    Protocol** (**SMTP**). Its purpose is to transport e-mail messages between two
    systems. Both these computers may either be servers, or one of them may be a client
    machine on which the user runs the mail application—Outlook, Thunderbird, Eudora,
    or whatever. To collect new messages, the end user does not utilize SMTP. This
    is where the **Post Office Protocol** (**POP**) and the **Internet Message Access
    Protocol** (**IMAP**) come in.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网邮件中最重要的协议是**简单邮件传输协议**（**SMTP**）。它的目的是在两个系统之间传输电子邮件消息。这两台计算机可以是服务器，也可以是用户运行邮件应用程序的客户端机器，如Outlook、Thunderbird、Eudora等。用户不使用SMTP来收集新消息。这就是**邮局协议**（**POP**）和**互联网消息访问协议**（**IMAP**）的用武之地。
- en: Some proprietary systems such as Microsoft Exchange and Lotus Notes use their
    own protocols to access messages, and we will not discuss them here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一些专有系统，如Microsoft Exchange和Lotus Notes，使用自己的协议来访问消息，我们在这里不讨论它们。
- en: POP protocol
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POP协议
- en: POP is the older and more widely used protocol of the two. It focuses on giving
    the users access to their inboxes, from which the users can download the new messages
    to their local computers and then delete them from the server. POP servers are
    not meant to be used for permanent storage of messages. The POP services of some
    Internet providers even prohibit users from leaving messages on the server after
    they have been downloaded once. The chief disadvantage of POP is that it only
    provides an intermediary storage medium and the users must store their messages
    permanently someplace else (for example, on their local hard drives). This is
    not only impractical for users who want to access their e-mail messages from multiple
    locations, but it is also a hassle for the System Administrator who may have to
    implement a backup solution for the users' messages on their local hard drives.
    POP also does not have any notion of providing multiple folders for every user;
    with POP a user can access his/her inbox only.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: POP是这两种协议中更古老、更广泛使用的协议。它专注于让用户访问他们的收件箱，用户可以将新消息下载到本地计算机，然后从服务器上删除它们。POP服务器不适用于永久存储消息。一些互联网服务提供商的POP服务甚至禁止用户在下载一次后将消息留在服务器上。POP的主要缺点是它只提供一个中间存储介质，用户必须将他们的消息永久存储在其他地方（例如，他们的本地硬盘上）。这不仅对于想要从多个位置访问他们的电子邮件消息的用户来说是不切实际的，而且对于系统管理员来说也是一种麻烦，因为他们可能需要为用户在本地硬盘上的消息实施备份解决方案。POP也没有提供为每个用户提供多个文件夹的概念；使用POP，用户只能访问他/她的收件箱。
- en: IMAP protocol
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IMAP协议
- en: IMAP is meant as an access method to a first class mail store, that is, it is
    designed to allow the user to store the messages permanently on the server. This
    solves the System Administrator's backup problem and allows the user to access
    all messages from any place in the world (firewall restrictions aside). IMAP also
    has a more widespread implementation of TLS-secured connections, making IMAP safe
    to use in hostile environments. To improve performance and allow users to work
    with their mailboxes while not being connected to the mail server, most mail applications
    with IMAP support caching the downloaded mailboxes and messages in the local hard
    drive.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: IMAP被设计为访问一流邮件存储的方法，即它旨在允许用户永久地将消息存储在服务器上。这解决了系统管理员的备份问题，并允许用户从世界上的任何地方访问所有消息（除了防火墙限制）。IMAP还有更广泛的TLS安全连接实现，使得在敌对环境中使用IMAP更加安全。为了提高性能并允许用户在未连接到邮件服务器时使用他们的邮箱，大多数支持IMAP的邮件应用程序会在本地硬盘上缓存下载的邮箱和消息。
- en: Unlike POP, IMAP supports multiple folders and stores message state information
    (whether or not the message has been read, replied to, or deleted) on the server.
    This means that a user accessing their message store from different locations,
    with possibly different e-mail clients, will be presented with a consistent, up-to-date
    view of their messages. IMAP also supports server-side searching, so the client
    application does not need to download all the messages to search for an e-mail.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与POP不同，IMAP支持多个文件夹，并在服务器上存储消息状态信息（消息是否已读、已回复或已删除）。这意味着用户可以从不同位置访问他们的消息存储，可能使用不同的电子邮件客户端，但仍会看到一致、最新的消息视图。IMAP还支持服务器端搜索，因此客户端应用程序不需要下载所有消息来搜索电子邮件。
- en: The SMTP protocol
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMTP协议
- en: SMTP is a line-oriented text protocol that runs over TCP, which makes it trivial
    to decode SMTP transcripts and to initiate SMTP sessions using the regular telnet
    client found on just about any computer. An SMTP client starts a session by connecting
    to port 25 on the SMTP server. After the server has greeted the client, the client
    must respond by saying hello, or actually `HELO` or `EHLO`, followed by the client's
    hostname. If the server accepts the cordial greeting, the client may begin the
    first mail transaction.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP是一种基于行的文本协议，运行在TCP上，这使得解码SMTP传输并使用几乎任何计算机上找到的常规telnet客户端启动SMTP会话变得微不足道。
    SMTP客户端通过连接到SMTP服务器上的端口25开始会话。 服务器问候客户端后，客户端必须通过说hello或实际上是`HELO`或`EHLO`，然后是客户端的主机名来做出回应。
    如果服务器接受了友好的问候，客户端可以开始第一次邮件事务。
- en: An SMTP mail transaction consists of three parts—a sender, one or more recipients,
    and the actual message contents. The sender is specified with the `MAIL FROM`
    command, each recipient with an `RCPT TO` command, and the start of the message
    contents with a `DATA` command. If the server accepts the message, the client
    may continue with additional transactions or issue the `QUIT` command to terminate
    the SMTP session.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP邮件事务由三部分组成-发件人、一个或多个收件人和实际消息内容。 发件人由`MAIL FROM`命令指定，每个收件人由`RCPT TO`命令指定，消息内容的开始由`DATA`命令指定。
    如果服务器接受消息，客户端可以继续进行其他事务或发出`QUIT`命令来终止SMTP会话。
- en: Let's be less abstract and look at an actual SMTP session to illustrate the
    protocol. The bold face print represents what the client sends to the server.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们少些抽象，看一个实际的SMTP会话来说明协议。 粗体打印表示客户端发送给服务器的内容。
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This example shows a host that claims to be named `gw.example.net` connecting
    to an SMTP server that calls itself `mail.example.com`. Because the server's first
    response contains ESMTP, the client decides to try **Enhanced SMTP** (**ESMTP**)
    and greets the server with `EHLO` instead of `HELO`. The server accepts this greeting
    and responds with a list of the supported ESMTP extensions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子显示了一个自称为`gw.example.net`的主机连接到一个自称为`mail.example.com`的SMTP服务器。 因为服务器的第一个响应包含ESMTP，客户端决定尝试**增强SMTP**（**ESMTP**），并用`EHLO`而不是`HELO`向服务器打招呼。
    服务器接受了这个问候，并用支持的ESMTP扩展列表做出了回应。
- en: Together with the sender address, the client sends the `SIZE` attribute to indicate
    the size of the message to the server. This is allowed because the server has
    stated that it supports the `SIZE` extension. If the size specified by the client
    exceeds the message size limit set by the server, the message can be rejected
    at once rather than after the whole message has been received and the server can
    assess the size.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了发件人地址，客户端还向服务器发送`SIZE`属性，以指示消息的大小。 这是允许的，因为服务器已经声明支持`SIZE`扩展。 如果客户端指定的大小超过服务器设置的消息大小限制，消息可以立即被拒绝，而不是在接收整个消息后再进行大小评估。
- en: 'An SMTP message can obviously have more than one recipient. This has a few
    consequences that must be remembered while implementing a mail system and inventing
    policies. In the previous example, the mail server accepts the first two recipients
    but rejects the third one. As two recipients have been accepted by the server,
    the client will try to send the message contents. Here the message is accepted
    by the server and queued for delivery (`250 Ok: queued as B059D3C2B`), which means
    that the SMTP server has taken over the responsibility for the delivery of the
    message to the accepted recipients. If the message cannot be delivered, the server
    will send a non-delivery message (bounce) back to the sender. The server could
    also have chosen to reject the whole message. If so, it would have rejected it
    for all recipients and not delivered it at all. In other words, in response to
    the message contents the server must either reject the message for all recipients
    or accept it for all recipients.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'SMTP消息显然可以有多个收件人。 这带来了一些必须在实施邮件系统和制定政策时记住的后果。 在前面的示例中，邮件服务器接受了前两个收件人，但拒绝了第三个收件人。
    由于服务器已接受了两个收件人，客户端将尝试发送消息内容。 在这里，消息被服务器接受并排队等待传递（`250 Ok: queued as B059D3C2B`），这意味着SMTP服务器已经承担了将消息传递给接受的收件人的责任。
    如果消息无法传递，服务器将向发件人发送一个非传递消息（弹回）。 服务器也可以选择拒绝整个消息。 如果是这样，它将拒绝所有收件人的消息，根本不传递。 换句话说，在消息内容的响应中，服务器必须要么拒绝所有收件人的消息，要么接受所有收件人的消息。'
- en: It is vital to understand the difference between the envelope and the header.
    The envelope of a message consists of the information given in the `MAIL FROM`
    and `RCPT TO` commands, that is, the sender and recipient information that are
    used to deliver the message. An SMTP server pays no attention what so ever to
    the `From, To`, and `Cc` message headers. In our example the `To` header contains
    just a single address with no other relation to the actual recipient addresses
    than the domain, but that is just a coincidence. Bounces are always sent to the
    envelope sender address, in this case `jack@example.net`. The sender address of
    bounce messages is the empty sender address, often called the null sender. However
    tempting it may be for some people, the null sender address must not be blocked.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解信封和标题之间的区别。 一封邮件的信封由`MAIL FROM`和`RCPT TO`命令中给出的信息组成，即用于传递消息的发件人和收件人信息。
    SMTP服务器根本不关心`From, To`和`Cc`消息头。 在我们的示例中，`To`标题只包含一个地址，与实际收件人地址之间没有其他关系，但这只是一个巧合。
    弹回消息始终发送到信封发件人地址，本例中为`jack@example.net`。 弹回消息的发件人地址是空发件人地址，通常称为空发件人。 无论有多大诱惑，都不应该阻止空发件人地址。
- en: So far, we have not commented on the numerical codes given by the server at
    the beginning of each line. Each number has a specific meaning and it is important
    to learn the correct interpretation of the first digit.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有评论服务器在每行开头给出的数字代码。 每个数字都有特定的含义，学习正确解释第一个数字是很重要的。
- en: '| Digit | Meaning |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | 含义 |'
- en: '| --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `2` | Server has accepted the previous command and is awaiting your next
    command. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `2` | 服务器已接受上一个命令，并正在等待您的下一个命令。'
- en: '| `3` | Used only in response to the `DATA` command, and means that the server
    is ready to accept the message contents. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `3` | 仅在响应`DATA`命令时使用，并表示服务器已准备好接受消息内容。'
- en: '| `4` | Temporary error: The request cannot be performed at the moment, but
    it may be successfully serviced later. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `4` | 临时错误：请求目前无法执行，但可能稍后可以成功服务。'
- en: '| `5` | Permanent error: The request will never be accepted. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: 永久错误：请求将永远不会被接受。
- en: In SMTP, error conditions can be either temporary or permanent. Both `4` and
    `5` are used to signal errors. A client that receives a temporary error designated
    by `4` should disconnect, keep the message in the queue, and retry at a later
    time. Typical temporary error conditions include a full mail queue disk, a server
    configuration error that must be resolved before messages can be accepted, or
    a temporary DNS lookup error. Permanent errors are indicated by the first digit
    being `5` and mean that the request will never be accepted, so a client will have
    to remove the message from the queue and send a bounce to the sender telling him
    or her that the message could not be delivered.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在SMTP中，错误条件可以是临时的或永久的。`4`和`5`都用于表示错误。接收到由`4`指定的临时错误的客户端应断开连接，将消息保留在队列中，并在稍后重试。典型的临时错误条件包括完整的邮件队列磁盘，必须在消息可以被接受之前解决的服务器配置错误，或者临时的DNS查找错误。永久错误由第一个数字为`5`表示，意味着请求将永远不会被接受，因此客户端必须从队列中删除消息，并向发件人发送一个告诉他或她消息无法被送达的反弹。
- en: There is a lot more to SMTP than this quick introduction has covered. For further
    reading there are a number of documents that cover Internet networking related
    topics known as **Request for Comments** (**RFC**). RFCs are memorandums published
    by the **Internet Engineering Task Force** (**IETF**), which are generally adopted
    as standards. For SMTP the most important ones are **RFC 821** (Simple Mail Transfer
    Protocol) and **RFC 822** (Standard for the format of ARPA Internet text messages).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP还有很多内容没有在这个简短的介绍中涵盖。有许多涵盖互联网相关主题的文档，称为**请求评论**（**RFC**）。RFC是由**互联网工程任务组**（**IETF**）发布的备忘录，通常被采纳为标准。对于SMTP，最重要的是**RFC
    821**（简单邮件传输协议）和**RFC 822**（ARPA互联网文本消息格式标准）。
- en: E-mail and DNS
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件和DNS
- en: The **Domain Name System** (**DNS**) plays an important role in e-mailing. The
    DNS is used by both, e-mail clients and e-mail servers. Even if you do not intend
    to maintain your own DNS server, a thorough understanding of DNS's role in e-mailing
    is a necessity for the mail server operator. This section assumes that the reader
    has basic knowledge of how DNS works in general.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 域名系统（DNS）在电子邮件中扮演着重要角色。DNS被电子邮件客户端和电子邮件服务器使用。即使您不打算维护自己的DNS服务器，对DNS在电子邮件中的作用有一个深入的了解对于邮件服务器操作员来说是必要的。本节假定读者对DNS的一般工作原理有基本的了解。
- en: DNS record types used by e-mail applications
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子邮件应用程序使用的DNS记录类型
- en: In many networking scenarios, only two DNS record types are used—the **A record**
    and **PTR record**. These map hostnames to IP addresses and IP addresses to hostnames
    respectively. These record types are also used for e-mail, but there is also a
    third DNS record type that is uniquely available for e-mail.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多网络场景中，只使用两种DNS记录类型 - **A记录**和**PTR记录**。这些分别将主机名映射到IP地址和IP地址映射到主机名。这些记录类型也用于电子邮件，但还有第三种DNS记录类型专门用于电子邮件。
- en: How does an SMTP server discover to which host a message for a certain domain
    should be delivered? The recipient domain is, not surprisingly, used as the key
    in one or more DNS lookups. The first lookup that is made is for the mail-specific
    **MX record**—the **mail exchanger** record type. The MX entry allows the DNS
    operator to specify the hostname or hostnames of servers that can receive mail
    for a certain domain. For example, `MX` records can be used to specify that messages
    to someone at `example.com` should be sent to `mail.example.com`. If the recipient
    domain does not have an `MX` record, an attempt is made to find an `A` record
    for the recipient domain. If the `A` record lookup succeeds, the mail will be
    delivered to the host. If both the `MX` and `A` lookups do not return any results,
    the message is deemed undeliverable and is returned to the sender.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP服务器如何发现某个域的消息应该发送到哪个主机？收件人域通常作为一个或多个DNS查找中的键。首先进行的查找是邮件特定的MX记录 - 邮件交换器记录类型。MX条目允许DNS操作员指定可以接收某个域邮件的服务器的主机名或主机名。例如，`MX`记录可用于指定发送给`example.com`的消息应该发送到`mail.example.com`。如果收件人域没有`MX`记录，则尝试查找收件人域的`A`记录。如果`A`记录查找成功，则邮件将被发送到主机。如果`MX`和`A`查找都没有返回任何结果，则消息被视为无法送达，并返回给发件人。
- en: 'There are two good reasons to having `MX` records:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个很好的理由拥有`MX`记录：
- en: Firstly, it might not be desirable to be forced to map the `A` record of a domain
    to the mail server. For example, Company Inc. with the WWW address [http://www.example.com/](http://www.example.com/)
    wants to allow visitors to use the shorter[http://example.com/](http://example.com/)
    URL, but does not want to run the web server application on the mail server (or
    vice versa).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，强制将域的“A”记录映射到邮件服务器可能并不理想。例如，公司Inc.的WWW地址[http://www.example.com/](http://www.example.com/)希望允许访问者使用更短的[http://example.com/](http://example.com/)
    URL，但不希望在邮件服务器上运行Web服务器应用程序（或反之亦然）。
- en: The more important reason is that the result of an `MX` lookup not only contains
    a list of hostnames, but rather a list of (hostname, priority) tuples. The priority
    field is an integer describing the priority of the hostname within the list. The
    absolute magnitude of the priority number does not matter, but it is used in relation
    to the priority of any other hostnames to create an ordered list of hostnames
    to try when delivering a message. The list is in ascending order, so the hostname
    with the lowest priority number will be contacted first. If two hostnames have
    equal priority, they will be tried in random order.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更重要的原因是MX查找的结果不仅包含主机名列表，而是包含（主机名，优先级）元组的列表。优先级字段是一个整数，描述了列表中主机名的优先级。优先级数的绝对大小并不重要，但它与其他主机名的优先级相关，以创建在投递消息时尝试的主机名的有序列表。列表按升序排列，因此优先级数最低的主机名将首先被联系。如果两个主机名具有相同的优先级，它们将以随机顺序尝试。
- en: Equal-priority `MX` records can be used as a very crude form of load balancing
    between two or more servers. This is also possible with `A` records that map to
    multiple IP addresses. A hierarchy of backup mail servers with different priorities
    can be set up for a domain using `MX` records that cannot be made to happen with
    `A` records. Let us look at a constructed example of an organization that uses
    a lot of mail servers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 相同优先级的MX记录可以用作两个或多个服务器之间非常粗糙的负载平衡形式。这也可以通过映射到多个IP地址的A记录来实现。使用MX记录可以为域设置具有不同优先级的备份邮件服务器的层次结构，而这是无法通过A记录实现的。让我们看一个使用大量邮件服务器的组织的构造示例。
- en: '| Priority | Hostname |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: 优先级 主机名
- en: '| --- | --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '--- ---'
- en: '| `10` | `mx1.example.com` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: 10 mx1.example.com
- en: '| `10` | `mx2.example.com` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: 10 mx2.example.com
- en: '| `20` | `mx3.example.com` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: 20 mx3.example.com
- en: '| `30` | `mx4.example.com` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: 30 mx4.example.com
- en: If this DNS configuration is set for the domain `example.com`, SMTP servers
    are expected to try to deliver messages for `example.com` to `mx1.example.com`
    or `mx2.example.com` first. If both connections fail, `mx3.example.com` should
    be tried, and if even that server does not respond in a timely way, `mx4.example.com`
    is the last resort. Should that fail too, the message is kept and delivery is
    retried at a later time.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为域example.com设置了这个DNS配置，SMTP服务器应该首先尝试将example.com的消息投递到mx1.example.com或mx2.example.com。如果两个连接都失败，应该尝试mx3.example.com，如果甚至该服务器没有及时响应，mx4.example.com是最后的选择。如果那也失败了，消息将被保留，并在以后重试投递。
- en: Backup mail servers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份邮件服务器
- en: Having a backup mail server that can receive messages if the primary server
    is unavailable sounds like a really good idea, but today's reliable Internet connections
    together with spam, worms, and other rubbish have for the most part made backup
    mail servers unnecessary and often even harmful. The rationale for having a backup
    server is that it can receive messages while your primary server is down, and
    then deliver them to the primary server when it is up again. However, the advantage
    of this is very small, as all SMTP servers are required to queue undeliverable
    messages for at least five days before they are returned to the sender. Granted,
    by having a backup server it is possible to store unavailable messages for longer
    time than five days. However, if the main SMTP server is unavailable for longer
    than five days at a stretch then there are probably bigger problems than a few
    lost messages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个备份邮件服务器，如果主服务器不可用，可以接收消息听起来是一个非常好的主意，但是如今可靠的互联网连接以及垃圾邮件、蠕虫和其他垃圾大部分情况下使得备份邮件服务器不再必要，甚至经常是有害的。拥有备份服务器的理由是它可以在主服务器宕机时接收消息，然后在主服务器恢复正常时将其投递给主服务器。然而，这样做的优势非常小，因为所有的SMTP服务器都要求至少将无法投递的消息队列保存五天，然后再返回给发件人。当然，通过备份服务器可以将不可用消息保存更长时间，但是如果主SMTP服务器连续不可用超过五天，那么可能存在比丢失几条消息更大的问题。
- en: Because a backup mail server typically does not have the same spam-thwarting
    configuration as the primary server, spammers often specifically target backup
    servers in order to bypass the stricter rules of the primary server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因为备份邮件服务器通常没有与主服务器相同的垃圾邮件阻挡配置，所以垃圾邮件发送者通常会专门针对备份服务器，以绕过主服务器的更严格规则。
- en: 'Another strong reason to avoid backup mail servers is that they typically do
    not perform recipient validation. This means that they do not know which recipient
    addresses are valid for the domains they act as backup servers for. This requires
    a backup server to accept all messages for the backed-up domains and attempt to
    deliver them to the primary server. The primary server will reject invalid recipients,
    causing the backup server to bounce such message back to the sender. This is known
    as backscatter and is bad for two reasons:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 避免备份邮件服务器的另一个重要原因是它们通常不执行收件人验证。这意味着它们不知道哪些收件人地址对它们充当备份服务器的域是有效的。这要求备份服务器接受备份域的所有消息，并尝试将它们投递到主服务器。主服务器将拒绝无效的收件人，导致备份服务器将这样的消息反弹给发件人。这被称为回溯，有两个坏处：
- en: Sender addresses are often spoofed, so the bounces may be sent to an innocent
    bystander.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发件人地址经常被伪造，因此反弹的消息可能会发送给无辜的旁观者。
- en: It may fill the mail queue with bounced messages that cannot be delivered because
    the receiving server is unavailable.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会填满邮件队列，因为无法将消息投递到接收服务器不可用。
- en: A busy server that does not perform recipient validation and is hit heavily
    with spam may have thousands or tens of thousands of undeliverable messages residing
    in the queue.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个繁忙的服务器，如果不执行收件人验证并且受到大量垃圾邮件攻击，可能会在队列中存放成千上万封无法投递的消息。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by discussing why you should even consider hosting
    your own e-mail server. Then, we looked at some questions that need to be answered
    before starting work with the server—the kind of network connection, computer
    power and disk space requirements that are expected.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先讨论了为什么您甚至应该考虑托管自己的电子邮件服务器。然后，我们看了一些在开始使用服务器之前需要回答的问题——网络连接类型、计算机性能和磁盘空间需求等。
- en: To manage an e-mail server successfully, an understanding of the network communication
    protocols used is important. We gave an overview of POP and IMAP, and delved more
    deeply into the most important of them all, SMTP.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功管理电子邮件服务器，了解所使用的网络通信协议是很重要的。我们概述了POP和IMAP，并更深入地探讨了其中最重要的SMTP。
- en: Finally, we looked at the vital role that the DNS plays in routing messages
    to the correct server or a backup server if one is available.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了DNS在将消息路由到正确的服务器或备用服务器（如果有的话）中所起的关键作用。
