- en: '*Chapter 12*: Leveraging the NVMEM Framework'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：利用NVMEM框架'
- en: The `drivers/misc/`, where most of the time each one had to implement its own
    API to handle identical functionalities, either for kernel users or to expose
    its content to user space. It turned out that these drivers seriously lacked abstraction
    code. Moreover, the increasing support for the number of these devices in the
    kernel led to a lot of code duplication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`drivers/misc/`，在大多数情况下，每个驱动程序都必须实现自己的API来处理相同的功能，无论是为内核用户还是向用户空间公开其内容。结果表明，这些驱动程序严重缺乏抽象代码。此外，内核对这些设备的支持不断增加，导致了大量的代码重复。'
- en: The introduction of this framework in the kernel aims at solving these previously
    mentioned issues. It also introduces DT representation for consumer devices to
    get the data they require (MAC addresses, SoC/revision ID, part numbers, and so
    on) from the NVMEM. We will begin this chapter by introducing NVMEM data structures,
    which are mandatory to walk through the framework, and then we will look at the
    NVMEM provider drivers, where we will learn how to expose the NVMEM memory region
    to consumers. Finally, we will learn about NVMEM consumer drivers, to leverage
    the content exposed by the providers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在内核中引入此框架的目的是解决先前提到的这些问题。它还为消费者设备引入了DT表示，以从NVMEM获取它们需要的数据（MAC地址、SoC/修订ID、零件号等）。我们将从介绍NVMEM数据结构开始本章，这是必须了解该框架的内容，然后我们将看看NVMEM提供者驱动程序，学习如何将NVMEM内存区域暴露给消费者。最后，我们将学习NVMEM消费者驱动程序，以利用提供者公开的内容。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing the NVMEM data structures and APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍NVMEM数据结构和API
- en: Writing the NVMEM provider driver
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写NVMEM提供者驱动程序
- en: NVMEM consumer driver APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVMEM消费者驱动API
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are prerequisites for this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件：
- en: C programming skills
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C编程技能
- en: Kernel programming and device driver development skills
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核编程和设备驱动程序开发技能
- en: Linux kernel v4.19.X sources, available at [https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/refs/tags](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/refs/tags)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux内核v4.19.X源码，可在[https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/refs/tags](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/refs/tags)获取
- en: Introducing NVMEM data structures and APIs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍NVMEM数据结构和API
- en: NVMEM is a small framework with a reduced set of APIs and data structures. In
    this section, we will introduce those APIs and data structures, as well as the
    concept of a **cell**, which is the base of this framework.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NVMEM是一个具有减少API和数据结构集的小型框架。在本节中，我们将介绍这些API和数据结构，以及**cell**的概念，这是该框架的基础。
- en: 'NVMEM is based on the producer/consumer pattern, just like the clock framework
    described in [*Chapter 4*](B10985_04_ePub_AM.xhtml#_idTextAnchor047), *Storming
    the Common Clock Framework*. There is a single driver for the NVMEM device, exposing
    the device cells so that they can be accessed and manipulated by consumer drivers.
    While the NVMEM device driver must include `<linux/nvmem-provider.h>`, consumers
    have to include `<linux/nvmem-consumer.h>`. This framework has only a few data
    structures, among which is `struct nvmem_device`, which looks as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: NVMEM基于生产者/消费者模式，就像[*第4章*](B10985_04_ePub_AM.xhtml#_idTextAnchor047)中描述的时钟框架一样，*Storming
    the Common Clock Framework*。NVMEM设备只有一个驱动程序，公开设备单元格，以便消费者驱动程序可以访问和操作它们。虽然NVMEM设备驱动程序必须包括`<linux/nvmem-provider.h>`，但消费者必须包括`<linux/nvmem-consumer.h>`。该框架只有少量数据结构，其中包括`struct
    nvmem_device`，其外观如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This structure actually abstracts the real NVMEM hardware. It is created and
    populated by the framework upon device registration. That said, its fields are
    actually set with a complete copy of the fields in `struct nvmem_config`, which
    is described as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构实际上抽象了真实的NVMEM硬件。它是由框架在设备注册时创建和填充的。也就是说，它的字段实际上是使用`struct nvmem_config`中字段的完整副本设置的，该结构描述如下：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This structure is the runtime configuration of the NVMEM device, providing either
    information on it or the helper functions to access its data cells. Upon device
    registration, most of its fields are used to populate the newly created `nvmem_device`
    structure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构是NVMEM设备的运行时配置，提供有关它的信息或访问其数据单元的辅助函数。在设备注册时，大多数字段都用于填充新创建的`nvmem_device`结构。
- en: 'The meanings of the fields in the structure are described as follows (knowing
    these are used to build the underlying `struct nvmem_device`):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结构中字段的含义如下（了解这些用于构建底层`struct nvmem_device`）：
- en: '`dev` is the parent device.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`是父设备。'
- en: '`name` is an optional name for this NVMEM device. It is used with `id` filled
    to build the full device name. The final NVMEM device name will be `<name><id>`.
    It is better to append `-` in the name so that the full name can have this pattern:
    `<name>-<id>`. This is what is used in the PCF85363 driver. If omitted, `nvmem<id>`
    will be used as the default name.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`是此NVMEM设备的可选名称。它与填充的`id`一起用于构建完整的设备名称。最终的NVMEM设备名称将是`<name><id>`。最好在名称中添加`-`，以便完整名称可以具有此模式：`<name>-<id>`。这是PCF85363驱动程序中使用的方法。如果省略，将使用`nvmem<id>`作为默认名称。'
- en: '`id` is an optional ID for this NVMEM device. It is ignored if `name` is `NULL`.
    If set to `-1`, the kernel will take care of providing a unique ID to the device.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`是此NVMEM设备的可选ID。如果`name`为`NULL`，则会被忽略。如果设置为`-1`，内核将负责为设备提供唯一的ID。'
- en: '`owner` is the module that owns this NVMEM device.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`owner`是拥有此NVMEM设备的模块。'
- en: '`cells` is an array of predefined NVMEM cells. It is optional.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cells`是预定义的NVMEM单元格数组。这是可选的。'
- en: '`ncells` is the number of elements in cells.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ncells`是单元格中元素的数量。'
- en: '`read_only` marks this device as read-only.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_only`将此设备标记为只读。'
- en: '`root_only` tells whether this device is accessible only to the root.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root_only`指示此设备是否仅对root可访问。'
- en: '`reg_read` and `reg_write` are the underlying callbacks used by the framework
    to read and write data, respectively. They are defined as follows:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_read`和`reg_write`是框架用于分别读取和写入数据的基础回调。它们的定义如下：'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`size` represents the size of the device.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`表示设备的大小。'
- en: '`word_size` is the minimum read/write access granularity for this device. `stride`
    is the minimum read/write access stride. Its principle has already been explained
    in previous chapters.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`word_size`是此设备的最小读/写访问粒度。`stride`是最小读/写访问跨距。其原理已在前几章中解释过。'
- en: '`priv` is context data passed to read/write callbacks. It could, for example,
    be a bigger structure wrapping this NVMEM device.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`priv`是传递给读/写回调的上下文数据。例如，它可以是包装此NVMEM设备的更大结构。'
- en: Previously, we used the term `struct nvmem_cell_info` structure for the provider,
    and `struct nvmem_cell` for the consumer. From within the NVMEM core code, the
    kernel uses `nvmem_cell_info_to_nvmem_cell()` to switch from the former structure
    to the second one.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们在提供者方面使用了`struct nvmem_cell_info`结构，而在消费者方面使用了`struct nvmem_cell`。在NVMEM核心代码中，内核使用`nvmem_cell_info_to_nvmem_cell()`从前一个结构切换到第二个结构。
- en: 'These structures are introduced as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结构如下引入：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The other data structure, that is, `struct nvmem_cell`, looks like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个数据结构`struct nvmem_cell`如下所示：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, the preceding two data structures share almost the same properties.
    Let’s look at their meanings, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，前两个数据结构几乎具有相同的属性。让我们看看它们的含义，如下所示：
- en: '`name` is the name of the cell.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`是单元的名称。'
- en: '`offset` is the offset (where it starts) of the cell from within the whole
    hardware data registers.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`偏移量`是单元从整个硬件数据寄存器中的偏移量（开始位置）。'
- en: '`bytes` is the size (in bytes) of the data cells, starting from `offset`.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bytes`是从`offset`开始的数据单元的大小（以字节为单位）。'
- en: A cell may have bit-level granularity. For these cells, `bit_offset` should
    be set in order to specify the bit offset from within the cell, and `nbits` should
    be defined according to the size (in bits) of the region of interest.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元可以具有位级粒度。对于这些单元，应设置`bit_offset`以指定单元内的位偏移，并且应根据感兴趣区域的大小（以位为单位）定义`nbits`。
- en: '`nvmem` is the NVMEM device to which this cell belongs.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nvmem`是此单元所属的NVMEM设备。'
- en: '`node` is used to track the cell system-wide. This field ends up in the `nvmem_cells`
    list, which holds all the cells available on the system, regardless of the NVMEM
    device they belong to. This global list is actually protected by a mutex, `nvmem_cells_mutex`,
    both statically defined in `drivers/nvmem/core.c`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node`用于跟踪整个单元系统。此字段最终出现在`nvmem_cells`列表中，该列表保存系统上所有可用的单元，而不管它们属于哪个NVMEM设备。这个全局列表实际上由`drivers/nvmem/core.c`中静态定义的互斥体`nvmem_cells_mutex`保护。'
- en: 'To clarify the preceding explanation, let’s take as an example a cell with
    the following config:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清前面的解释，让我们以以下配置为例的单元：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, if we consider `.nbits` and `.bit_offset` as both
    equal to `0`, it means we are interested in the whole data region of the cell,
    which is 1 byte-sized in our case. But what if we are interested only in bits
    2 to 4 (3 bits, actually)? The structure would be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，如果我们将`.nbits`和`.bit_offset`都等于`0`，这意味着我们对单元的整个数据区域感兴趣，在我们的情况下是1字节大小。但是如果我们只对位2到4（实际上是3位）感兴趣呢？结构将如下所示：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Important note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The preceding examples are only for pedagogical purposes. Even though you can
    have predefined cells in the driver code, it is recommended that you rely on the
    device tree to declare the cells, as we will see later in the chapter, in the
    *Device tree bindings for NVMEM providers* section, to be precise.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子仅用于教学目的。即使您可以在驱动程序代码中预定义单元，也建议您依赖设备树声明单元，正如我们稍后在章节中将看到的那样，*NVMEM提供程序的设备树绑定*部分。
- en: Neither the consumer nor the provider driver should create instances of `struct
    nvmem_cell`. The NVMEM core internally handles this, either when the producer
    provides an array of cell info, or when the consumer requests a cell.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者驱动程序和提供者驱动程序都不应创建`struct nvmem_cell`的实例。NVMEM核心在生产者提供单元信息数组时，或者在消费者请求单元时，内部处理这一点。
- en: So far, we have gone through the data structures and APIs provided by this framework.
    However, NVMEM devices can be accessed either from the kernel or user space. Moreover,
    in the kernel, there must be a driver exposing the device storage in order to
    have other drivers accessing it. This is the producer/consumer design, where the
    provider driver is the producer, and the other driver is the consumer. Right now,
    let’s start with the provider (aka the producer) part of this framework.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了该框架提供的数据结构和API。但是，NVMEM设备可以从内核或用户空间访问。此外，在内核中，必须有一个暴露设备存储的驱动程序，以便其他驱动程序访问它。这是生产者/消费者设计，其中提供者驱动程序是生产者，而其他驱动程序是消费者。现在，让我们从该框架的提供者（又名生产者）部分开始。
- en: Writing the NVMEM provider driver
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写NVMEM提供程序驱动程序
- en: 'The provider is the one exposing the device memory so that other drivers (the
    consumers) can access it. The main tasks of these drivers are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者是暴露设备内存以便其他驱动程序（消费者）可以访问的人。这些驱动程序的主要任务如下：
- en: Providing suitable NVMEM configuration with respect to the device’s datasheet,
    along with the routines allowing you to access the memory
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与设备数据表相关的适当的NVMEM配置，以及允许您访问内存的例程
- en: Registering the device with the system
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向系统注册设备
- en: Providing device tree binding documentation
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供设备树绑定文档
- en: That is all the provider has to do. Most (the rest) of the mechanism/logic is
    handled by the NVMEM framework’s code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是提供者必须做的全部。大多数（其余）机制/逻辑由NVMEM框架的代码处理。
- en: NVMEM device (un)registration
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NVMEM设备（取消）注册
- en: 'Registering/unregistering the NVMEM device is actually part of the provider-side
    driver, which can use the `nvmem_register()`/`nvmem_unregister()` functions, or
    their managed versions, `devm_nvmem_register()`/`devm_nvmem_unregister()`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注册/注销NVMEM设备实际上是提供方驱动程序的一部分，它可以使用`nvmem_register()`/`nvmem_unregister()`函数或其托管版本`devm_nvmem_register()`/`devm_nvmem_unregister()`：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Upon registration, the `/sys/bus/nvmem/devices/dev-name/nvmem` binary entry
    will be created. In these interfaces, the `*config` parameter is the NVMEM config
    describing the NVMEM device that has to be created. The `*dev` parameter is only
    for the managed version and represents the device using the NVMEM device. On the
    success path, these functions return a pointer to `nvmem_device`, or return `ERR_PTR()`
    on error otherwise.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，将创建`/sys/bus/nvmem/devices/dev-name/nvmem`二进制条目。在这些接口中，`*config`参数是描述要创建的NVMEM设备的NVMEM配置。`*dev`参数仅适用于托管版本，并表示使用NVMEM设备的设备。在成功路径上，这些函数返回一个指向`nvmem_device`的指针，否则在出错时返回`ERR_PTR()`。
- en: On the other hand, unregistration functions accept the pointer to the NVMEM
    device created on the success path of the registration function. They return `0`
    upon successful unregistration and a negative error otherwise.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，注销函数接受在注册函数成功路径上创建的NVMEM设备的指针。在成功注销时返回`0`，否则返回负错误。
- en: NVMEM storage in RTC devices
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RTC设备中的NVMEM存储
- en: 'There are many `include/linux/rtc.h`, you will notice that there are NVMEM-related
    fields, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多`include/linux/rtc.h`中，您会注意到以下与NVMEM相关的字段：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note the following in the preceding structure excerpt:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意前面结构摘录中的以下内容：
- en: '`nvmem` abstracts the underlying hardware memory.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nvmem` 抽象了底层硬件内存。'
- en: '`nvram_old_abi` is a Boolean that tells whether the NVMEM of this RTC is to
    be registered using the old (and now deprecated) NVRAM ABI, which uses `/sys/class/rtc/rtcx/device/nvram`
    to expose the memory. This field should be set to `true` only if you have existing
    applications (that you do not want to break) using this old ABI interface. New
    drivers should not set this.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nvram_old_abi` 是一个布尔值，告诉我们是否要使用旧的（现在已弃用）NVRAM ABI来注册此RTC的NVMEM，该ABI使用`/sys/class/rtc/rtcx/device/nvram`来公开内存。只有在您有现有应用程序（您不想破坏）使用这个旧的ABI接口时，才应将此字段设置为`true`。新驱动程序不应设置此字段。'
- en: '`nvram` is actually the binary attribute for the underlying memory, used by
    the RTC framework only for old ABI support; that is, if `nvram_old_abi` is `true`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nvram` 实际上是底层内存的二进制属性，仅由RTC框架用于旧ABI支持；也就是说，如果`nvram_old_abi`为`true`。'
- en: 'The RTC-related NVMEM framework API can be enabled through the `RTC_NVMEM`
    kernel config option. This API is defined in `drivers/rtc/nvmem.c`, and exposes
    both `rtc_nvmem_register()` and `rtc_nvmem_unregister()`, respectively, for RTC-NVMEM
    registration and unregistration. These are described as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: RTC相关的NVMEM框架API可以通过`RTC_NVMEM`内核配置选项启用。此API在`drivers/rtc/nvmem.c`中定义，并分别公开了`rtc_nvmem_register()`和`rtc_nvmem_unregister()`，用于RTC-NVMEM注册和注销。它们的描述如下：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`rtc_nvmem_register()` returns `0` on success. It accepts a valid RTC device
    as its first parameter. This has an impact on the code. It means the RTC’s NVMEM
    should be registered only after the actual RTC device has been successfully registered.
    In other words, `rtc_nvmem_register()` is to be called only after `rtc_register_device()`
    has succeeded. The second argument should be a pointer to a valid `nvmem_config`
    object. Moreover, as we have already seen, this config can be declared in the
    stack since all its fields are entirely copied for building the `nvmem_device`
    structure. The opposite is `rtc_nvmem_unregister()`, which unregisters the NVMEM.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`rtc_nvmem_register()` 在成功时返回`0`。它接受一个有效的RTC设备作为其第一个参数。这对代码有影响。这意味着只有在实际的RTC设备成功注册后，RTC的NVMEM才应该被注册。换句话说，只有在`rtc_register_device()`成功后才应该调用`rtc_nvmem_register()`。第二个参数应该是一个指向有效的`nvmem_config`对象的指针。此外，正如我们已经看到的，这个配置可以在堆栈中声明，因为它的所有字段都被完全复制以构建`nvmem_device`结构。相反的是`rtc_nvmem_unregister()`，它取消注册NVMEM。'
- en: 'Let’s summarize this with an excerpt of the `probe` function of the DS1307
    RTC driver, `drivers/rtc/rtc-ds1307.c`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过DS1307 RTC驱动程序的`probe`函数的摘录来总结一下，`drivers/rtc/rtc-ds1307.c`：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code first registers the RTC with the kernel prior to registering
    the NVMEM device, giving an NVMEM config that corresponds to the RTC’s storage
    space. The preceding is RTC-related and not generic. Other NVMEM devices must
    have their driver expose callbacks to which the NVMEM framework will forward any
    read/write requests, either from user space or internally from within the kernel
    itself. The next section explains how this is done.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码首先在注册NVMEM设备之前将RTC注册到内核，提供与RTC存储空间相对应的NVMEM配置。前面是与RTC相关的，而不是通用的。其他NVMEM设备必须让其驱动程序公开回调，NVMEM框架将把任何来自用户空间或内核内部的读/写请求转发给这些回调。下一节将解释如何实现这一点。
- en: Implementing NVMEM read/write callbacks
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现NVMEM读/写回调
- en: 'In order for the kernel and other frameworks to be able to read/write data
    from/to the NVMEM device and its cells, each NVMEM provider must expose a couple
    of callbacks allowing those read/write operations. This mechanism allows hardware-independent
    consumer code, so any reading/writing request from the consumer side is redirected
    to the underlying provider’s read/write callback. The following are the read/write
    prototypes that every provider must conform to:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使内核和其他框架能够从NVMEM设备和其单元中读取/写入数据，每个NVMEM提供程序必须公开一对回调，允许进行这些读/写操作。这种机制允许硬件无关的消费者代码，因此来自消费者端的任何读/写请求都会被重定向到底层提供程序的读/写回调。以下是每个提供程序必须符合的读/写原型：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These are independent of the underlying bus that the NVMEM device is behind.
    `nvmem_reg_read_t` is for reading data from the NVMEM device. `priv` is the user
    context provided in the NVMEM config, `offset` is where reading should start,
    `val` is an output buffer where the read data has to be stored, and `bytes` is
    the size of the data to be read (the number of bytes, actually). This function
    should return the number of successful bytes read on success, and a negative error
    code on error.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与NVMEM设备所在的底层总线无关。`nvmem_reg_read_t` 用于从NVMEM设备读取数据。`priv` 是NVMEM配置中提供的用户上下文，`offset`
    是读取应该开始的位置，`val` 是读取数据必须存储的输出缓冲区，`bytes` 是要读取的数据的大小（实际上是字节数）。该函数应在成功时返回成功读取的字节数，并在出错时返回负错误代码。
- en: On the other hand, `nvmem_reg_write_t` is for writing purposes. `priv` has the
    same meaning as for reading, `offset` is where writing should start at, `val`
    is a buffer containing the data to be written, and `bytes` is the number of bytes
    in data in `val`, which should be written. `bytes` is not necessarily the size
    of `val`. This function should return the number of bytes written successfully
    on success, and a negative error code on error.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`nvmem_reg_write_t` 用于写入目的。`priv` 的含义与读取相同，`offset` 是写入应该从哪里开始的地方，`val`
    是包含要写入的数据的缓冲区，`bytes` 是 `val` 中数据的字节数，应该被写入。`bytes` 不一定是 `val` 的大小。此函数应在成功时返回成功写入的字节数，并在出错时返回负错误代码。
- en: Now that we have seen how to implement provider read/write callbacks, let’s
    see how we can extend the provider capabilities with the device tree.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何实现提供者读/写回调，让我们看看如何通过设备树扩展提供者的功能。
- en: Device tree bindings for NVMEM providers
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NVMEM 提供者的设备树绑定
- en: The NVMEM data provider does not have any bindings particularly. It should be
    described with respect to its parent bus DT binding. This means, for example,
    that if it is an I2C device, it should be described (in respect to the I2C binding)
    as a child of the node that represents the I2C bus that it sits behind. However,
    there is an optional `read-only` property that makes the device read-only. Moreover,
    each child node will be considered as a data cell (a memory region in the NVMEM
    device).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: NVMEM 数据提供者没有特定的绑定。它应该根据其父总线 DT 绑定进行描述。这意味着，例如，如果它是一个 I2C 设备，它应该（相对于 I2C 绑定）被描述为坐在代表其后面的
    I2C 总线节点的子节点。但是，还有一个可选的 `read-only` 属性，使设备成为只读。此外，每个子节点都将被视为数据单元（NVMEM 设备中的内存区域）。
- en: 'Let’s consider the following MMIO NVMEM device along with its child nodes for
    explanation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下 MMIO NVMEM 设备以及其子节点以进行解释：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'According to the properties defined in the child nodes, the NVMEM framework
    builds the appropriate `nvmem_cell` structures and inserts them into the system-wide
    `nvmem_cells` list. The following are the possible properties for data cell bindings:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据子节点中定义的属性，NVMEM 框架构建适当的 `nvmem_cell` 结构，并将它们插入到系统范围的 `nvmem_cells` 列表中。以下是数据单元绑定的可能属性：
- en: '`reg`: This property is mandatory. It is a two-cell property, describing the
    offset in bytes (the first cell in the property) and the size in bytes (the second
    cell of the property) of the data region within the NVMEM device.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg`：此属性是强制性的。它是一个双单元属性，描述了 NVMEM 设备中数据区域的字节偏移量（属性的第一个单元）和字节大小（属性的第二个单元）。'
- en: '`bits`: This is an optional two-cell property that specifies the offset (possible
    values from `0`-`7`) in bits and the number of bits within the address range specified
    by the `reg` property.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bits`：这是一个可选的双单元属性，指定位偏移量（可能的值为 `0`-`7`）和由 `reg` 属性指定的地址范围内的位数。'
- en: 'Having defined the data cells from within the provider node, these can be assigned
    to consumers using the `nvmem-cells` property, which is a list of phandles to
    NVMEM providers. Moreover, there should be an `nvmem-cell-names` property too,
    whose main purpose is to name each data cell. This assigned name can therefore
    be used to look for the appropriate data cell using the consumer APIs. The following
    is an example assignment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供者节点内定义数据单元后，可以使用 `nvmem-cells` 属性将其分配给消费者，该属性是指向 NVMEM 提供者的句柄列表。此外，还应该有一个
    `nvmem-cell-names` 属性，其主要目的是为每个数据单元命名。因此，分配的名称可以用于使用消费者 API 查找适当的数据单元。以下是一个示例分配：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The full NVMEM device tree binding is available in `Documentation/devicetree/bindings/nvmem/nvmem.txt`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 NVMEM 设备树绑定可在 `Documentation/devicetree/bindings/nvmem/nvmem.txt` 中找到。
- en: We just came across the implementation of drivers (the so-called producers)
    that expose the storage of the NVMEM device. Though it is not always the case,
    there may be other drivers in the kernel that would need access to the storage
    exposed by the producer (aka the provider). The next section will describe these
    drivers in detail.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚了解了实现驱动程序（所谓的生产者）的存储的情况。虽然这并不总是这样，但内核中可能有其他驱动程序需要访问生产者（也称为提供者）提供的存储。下一节将详细描述这些驱动程序。
- en: NVMEM consumer driver APIs
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NVMEM 消费者驱动程序 API
- en: 'NVMEM consumers are drivers who access the storage exposed by the producer.
    These drivers can pull the NVMEM consumer API by including `<linux/nvmem-consumer.h>`,
    which will bring the following cell-based APIs in:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: NVMEM 消费者是访问生产者提供的存储的驱动程序。这些驱动程序可以通过包含 `<linux/nvmem-consumer.h>` 来调用 NVMEM
    消费者 API，这将带来以下基于单元的 API：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `devm_`-prefixed APIs are resource-managed versions, which are to be used
    whenever possible.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`devm_` 前缀的 API 是受资源管理的版本，应尽可能使用。'
- en: That being said, the consumer interface entirely depends on the ability of the
    producer to expose (part of) its cells so that they can be accessed by others.
    As discussed previously, this capability of providing/exposing cells should be
    done via the device tree. `devm_nvmem_cell_get()` serves to grab a given cell
    with respect to the name assigned through the `nvmem-cell-names` property. The
    `nvmem_cell_read` API always reads the whole cell size (that is, `nvmem_cell->bytes`)
    if possible. Its third parameter, `len`, is an output parameter holding the actual
    number of `nvmem_config.word_size` (actually, it holds `1` most of the time, which
    means a single byte) being read.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，消费者接口完全取决于生产者公开（部分）单元的能力，以便其他人可以访问它们。如前所述，提供/公开单元的能力应通过设备树完成。`devm_nvmem_cell_get()`
    用于根据通过 `nvmem-cell-names` 属性分配的名称获取给定单元。`nvmem_cell_read` API 总是读取整个单元大小（即 `nvmem_cell->bytes`），如果可能的话。它的第三个参数
    `len` 是一个输出参数，保存实际读取的 `nvmem_config.word_size` 的数量（实际上，大部分时间它保存 `1`，这意味着一个字节）。
- en: 'On successful read, the content pointed to by `len` will be equal to the number
    of bytes in the cell: `*len = nvmem_cell->bytes`. `nvmem_cell_read_u32()`, on
    the other side, reads a cell value as `u32`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 成功读取后，`len` 指向的内容将等于单元格中的字节数：`*len = nvmem_cell->bytes`。另一方面，`nvmem_cell_read_u32()`
    以 `u32` 的形式读取单元格的值。
- en: 'The following is the code that grabs the cells allocated to the `tempmon` node
    described in the previous section, and reads their content as well:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在前一节中描述的`tempmon`节点分配的单元，并读取它们的内容的代码：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we have gone through both the consumer and producer aspects of this framework.
    Often, drivers need to expose their services to user space. The NVMEM framework
    (just like other Linux kernel frameworks) can transparently handle exposing NVMEM
    services to user space. The next section explains this in detail.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经介绍了这个框架的消费者和生产者方面。通常，驱动程序需要将它们的服务暴露给用户空间。NVMEM框架（就像其他Linux内核框架一样）可以透明地处理将NVMEM服务暴露给用户空间。下一节将详细解释这一点。
- en: NVMEM in user space
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户空间中的NVMEM
- en: 'The NVMEM user space interface relies on `sysfs`, as most of the kernel frameworks
    do. Each NVMEM device registered with the system has a directory entry created
    in `/sys/bus/nvmem/devices`, along with an `nvmem` binary file (on which you can
    use `hexdump` or even `echo`) created in that directory, which represents the
    device’s memory. The full path has the following pattern: `/sys/bus/nvmem/devices/<dev-name>X/nvmem`.
    In this path pattern, `<dev-name>` is the `nvmem_config.name` name provided by
    the producer driver. The following code excerpt shows how the NVMEM core constructs
    the `<dev-name>X` pattern:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: NVMEM用户空间接口依赖于`sysfs`，就像大多数内核框架一样。系统中注册的每个NVMEM设备在`/sys/bus/nvmem/devices`中创建一个目录条目，以及在该目录中创建一个`nvmem`二进制文件（您可以使用`hexdump`或`echo`），代表设备的内存。完整路径遵循以下模式：`/sys/bus/nvmem/devices/<dev-name>X/nvmem`。在这个路径模式中，`<dev-name>`是生产驱动程序提供的`nvmem_config.name`名称。以下代码摘录显示了NVMEM核心如何构造`<dev-name>X`模式：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code says if `nvmem_config->id == -1`, then `X` in the pattern
    is omitted and only `nvmem_config->name` is used to name the `sysfs` directory
    entry. If `nvmem_config->id != -1` and `nvmem_config->name` is set, it will be
    used along with the `nvmem_config->id` field set by the driver (which is `X` in
    the pattern). However, if `nvmem_config->name` is not set by the driver, the core
    will use the `nvmem` string along with an ID that has been generated (which is
    `X` in the pattern).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码表示，如果`nvmem_config->id == -1`，那么模式中的`X`将被省略，只使用`nvmem_config->name`来命名`sysfs`目录条目。如果`nvmem_config->id
    != -1`并且设置了`nvmem_config->name`，它将与驱动程序设置的`nvmem_config->id`字段一起使用（这是模式中的`X`）。但是，如果驱动程序没有设置`nvmem_config->name`，核心将使用`nvmem`字符串以及已生成的ID（这是模式中的`X`）。
- en: Important note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Whatever cells are defined, the NVMEM framework exposes the full register space
    via the NVMEM binary, not the cells. Accessing the cells from user space requires
    knowing their offsets and size in advance.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 无论定义了什么单元，NVMEM框架都通过NVMEM二进制文件而不是单元来暴露完整的寄存器空间。从用户空间访问单元需要预先知道它们的偏移量和大小。
- en: 'NVMEM content can then be read in user space, thanks to the `sysfs` interface,
    using either `hexdump` or the simple `cat` command. For example, assuming we have
    an I2C EEPROM sitting on I2C number 2 at address 0x55 registered on the system
    as an NVMEM device, its `sysfs` path would be `/sys/bus/nvmem/devices/2-00550/nvmem`.
    The following is how you can write/read some content:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，NVMEM内容可以在用户空间中使用`sysfs`接口进行读取，可以使用`hexdump`或简单的`cat`命令。例如，假设我们在系统上注册了一个I2C
    EEPROM，它位于I2C编号2的地址0x55处，作为NVMEM设备注册，其`sysfs`路径将是`/sys/bus/nvmem/devices/2-00550/nvmem`。以下是如何写入/读取一些内容：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we have seen how the NVMEM registers are exposed to user space. Though this
    section is short, we have covered enough to leverage this framework from user
    space.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了NVMEM寄存器是如何暴露给用户空间的。虽然本节内容很短，但我们已经涵盖了足够的内容来从用户空间利用这个框架。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went through the NVMEM framework implementation in the Linux
    kernel. We introduced its APIs from the producer side as well as from the consumer
    side, and also discussed how to use it from user space. I have no doubt that these
    devices have their place in the embedded world.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Linux内核中NVMEM框架的实现。我们从生产者和消费者方面介绍了其API，并讨论了如何从用户空间使用它。我毫不怀疑这些设备在嵌入式世界中有它们的位置。
- en: In the next chapter, we will address the issue of reliability by means of watchdog
    devices, discussing how to set up these devices and writing their Linux kernel
    drivers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过看门狗设备来解决可靠性问题，讨论如何设置这些设备并编写它们的Linux内核驱动程序。
