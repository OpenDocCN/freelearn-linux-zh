- en: Chapter 9. Debugging Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。调试脚本
- en: This chapter shows how to debug Bash shell scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何调试Bash shell脚本。
- en: Programming in any language, be it C, Java, FORTRAN, COBOL*, or Bash can be
    a lot of fun. However, what is often not fun is when something goes wrong, and
    when it takes an inordinate amount of time to find the problem and then solve
    it. This chapter will attempt to show the reader how to avoid some of the more
    common syntax and logic errors, and also how to find them when they occur.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何语言进行编程，无论是C、Java、FORTRAN、COBOL*还是Bash，都可能非常有趣。然而，通常不有趣的是当出现问题时，需要花费大量时间找到问题并解决问题。本章将尝试向读者展示如何避免一些常见的语法和逻辑错误，以及在出现这些错误时如何找到它们。
- en: '*COBOL: Okay, I have to say that programming in COBOL was never fun!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*COBOL：好吧，我必须说，在COBOL中编程从来都不是一件有趣的事情！'
- en: 'The topics covered are in the chapter are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题是：
- en: How to prevent some common syntax and logic errors.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何防止一些常见的语法和逻辑错误。
- en: The shell debugging commands such as `set -x` and `set -v`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: shell调试命令，如`set -x`和`set -v`。
- en: The other ways to set up debugging.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他设置调试的方法。
- en: How redirection can be used to debug in real time.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用重定向实时调试。
- en: Syntax errors
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法错误
- en: 'Nothing can be so frustrating than to be on a roll when coding your script
    or program and then have a syntax error pop up. In some cases the solution is
    so easy you find and solve it right away. In other cases it can take minutes or
    even hours. Here are a few pointers:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本或程序时，遇到语法错误弹出来可能会让人非常沮丧。在某些情况下，解决方案非常简单，您可以立即找到并解决它。在其他情况下，可能需要花费几分钟甚至几个小时。以下是一些建议：
- en: When coding a loop put the whole `while...do...done` structure in first. It
    is sometimes really easy to forget the ending `done` statement, especially if
    the code spans more than a page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编写循环时，首先放入整个`while...do...done`结构。有时很容易忘记结束的`done`语句，特别是如果代码跨越了一页以上。
- en: 'Take a look at *Script 1*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 看看*脚本1*：
- en: Chapter 9 - Script 1
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章-脚本1
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here is the output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 9 - Script 1](img/B07040_09_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![第9章-脚本1](img/B07040_09_01.jpg)'
- en: Look at this real closely, it says the error is at **line 26**. Wow, how can
    that be, when the file has only has 25 lines in it? The simple answer is that's
    just the way the Bash interpreter handles this type of situation. If you have
    not already found the bug it's actually at line 12\. This is where the `done`
    statement should have been and by omitting it I intentionally caused the error.
    Now imagine if this had been a really long script. Depending on the circumstances
    it could take a long time to find the line that caused the problem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看，它说错误出现在**第26行**。哇，怎么可能，当文件只有25行时？简单的答案是这就是Bash解释器处理这种情况的方式。如果您还没有找到错误，实际上是在第12行。这就是应该出现`done`语句的地方，我故意省略了它，导致了错误。现在想象一下，如果这是一个非常长的脚本。根据情况，可能需要很长时间才能找到导致问题的行。
- en: 'Now take a look at *Script 2*, which is just *Script 1* with some additional
    `echo` statements:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看*脚本2*，它只是*脚本1*，带有一些额外的`echo`语句：
- en: Chapter 9 - Script 2
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章-脚本2
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the output:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 9 - Script 2](img/B07040_09_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![第9章-脚本2](img/B07040_09_02.jpg)'
- en: You can see that the `echo` statement `Start of x loop` was displayed. However,
    the second one, `Start of y loop` was not displayed. This gives you a good idea
    that the error is somewhere before the 2nd `echo` statement. In this case it is
    right before, but don't expect to be that lucky every time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到“echo”语句“x循环的开始”已显示。但是，第二个“y循环的开始”没有显示。这让你很清楚，错误出现在第二个“echo”语句之前的某个地方。在这种情况下，就在前面，但不要指望每次都那么幸运。
- en: Automatic backups
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动备份
- en: Now for a bit of free programming advice, making automatic backups of files
    was mentioned in [Chapter 4](ch04.html "Chapter 4. Creating and Calling Subroutines"),
    *Creating and Calling Subroutines*. I strongly suggest you use something like
    this when you are writing anything that is even slightly complicated. There is
    nothing more frustrating than to be working on your program or script and have
    it going pretty well, only to make a few changes and have it fail in some bizarre
    fashion. You had it working a few minutes ago and then wham! It has a fault and
    you can't figure out what change caused it. If you don't have a numbered backup
    you could literally spend hours (maybe days) trying to find the bug. I have seen
    people spend hours backing out every change until the problem was found. Yes,
    I have done it too.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在给出一些免费的编程建议，备份文件的自动备份在[第4章](ch04.html "第4章。创建和调用子例程")中提到过，*创建和调用子例程*。我强烈建议在编写任何稍微复杂的东西时使用类似的方法。没有什么比在编写程序或脚本时工作得很顺利，只是做了一些更改，然后以一种奇怪的方式失败更令人沮丧的了。几分钟前它还在工作，然后砰！它出现了故障，您无法弄清楚是什么更改导致了它。如果您没有编号的备份，您可能会花费几个小时（也许是几天）来寻找错误。我见过人们花费数小时撤消每个更改，直到找到问题。是的，我也这样做过。
- en: Obviously if you have a numbered backup you can simply go back and find the
    latest one that doesn't have the fault. You can then diff the two versions and
    probably find the error really fast. Without a numbered backup, well you are on
    your own. Don't do what I did and wait 2 years or more before realizing all of
    this.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果您有编号的备份，只需返回并找到最新的没有故障的备份。然后您可以对比两个版本，可能会非常快地找到错误。如果没有编号的备份，那么您就自己解决了。不要像我一样等待2年或更长时间才意识到所有这些。
- en: More syntax errors
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多的语法错误
- en: 'A fundamental problem with shell scripts is syntax errors don''t usually show
    up until the line with the problem is parsed by the interpreter. Here''s a common
    error that I still find myself doing more than I should. See if you can locate
    the problem by just reading the script:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Shell脚本的一个基本问题是，语法错误通常直到解释器解析具有问题的行时才会显示出来。以下是一个我经常犯的常见错误。看看你能否通过阅读脚本找到问题：
- en: Chapter 9 - Script 3
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章-脚本3
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 9 - Script 3](img/B07040_09_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![第9章-脚本3](img/B07040_09_03.jpg)'
- en: Did you find my mistake? When I code an `if...elif...else` statement, I tend
    to copy and paste the first `if` statement. I then prepend `elif` to the next
    statement but forget to remove the `if`. This gets me almost every time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你找到我的错误了吗？当我编写`if...elif...else`语句时，我倾向于复制并粘贴第一个`if`语句。然后我在下一个语句前加上`elif`，但忘记删除`if`。这几乎每次都会让我犯错。
- en: Look at how I ran this script. I started first with just the name of the script
    to invoke the `Usage` clause. You may find it interesting that the syntax error
    was not reported by the interpreter. That's because it never got down to that
    line. This can be a real problem with scripts, as it may run for days, weeks,
    or even years before running a part of code that has a syntax error in it and
    then failing. Keep this in mind when writing and testing your scripts.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我是如何运行这个脚本的。我首先只用脚本的名称来调用`Usage`子句。你可能会发现有趣的是，解释器没有报告语法错误。那是因为它从来没有执行到那一行。这可能是脚本的一个真正问题，因为它可能运行数天、数周，甚至数年，然后在有语法错误的代码部分运行并失败。在编写和测试脚本时请记住这一点。
- en: 'Here is another quick example of a classic syntax error (classic in the sense
    that I just now made it again):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个经典语法错误的快速示例（经典是指我刚刚再次犯了这个错误）：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When run it outputs this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时输出如下：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Can you find my mistake? If not look again. I forgot the `do` statement after
    the `for` statement. Bad Jim!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你能找到我的错误吗？如果找不到，请再看一遍。我忘了在`for`语句后加上`do`语句。糟糕的Jim！
- en: One of the easiest things to do wrong in a script is to forget the `$` in front
    of a variable. This is particularly so if you code in other languages such as
    C or Java, because you don't prepend a `$` to variables in those languages. The
    only real advice I can give here is if your script just doesn't seem to be doing
    anything right check all of your variables for the `$`. But be careful you don't
    go too far and start adding them where they don't belong!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中最容易出错的事情之一是忘记在变量前加上`$`。如果你在其他语言如C或Java中编码，特别容易出错，因为在这些语言中你不需要在变量前加上`$`。我能给出的唯一真正的建议是，如果你的脚本似乎做不对任何事情，请检查所有的变量是否有`$`。但要小心，不要过度添加它们！
- en: Logic errors
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑错误
- en: Now let's talk about logic errors. These can be very hard to diagnose, and unfortunately
    I don't have any magical ways to avoid those. There are some things that can be
    pointed out however to help track them down.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈逻辑错误。这些很难诊断，不幸的是我没有任何神奇的方法来避免这些错误。然而，有一些事情可以指出来，以帮助追踪它们。
- en: A common problem with coding is what is called off by 1 errors. This was caused
    when computer language designers in the sixties decided to number things starting
    at 0 instead of 1\. Computers will happily start counting anywhere you want them
    to and never complain at all, but most humans tend to do better when they start
    counting at 1\. Most of my peers would probably disagree with this, but since
    I was the one who always had to fix their off by 1 defects I stand by my comments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 编码中的一个常见问题是所谓的1偏差错误。这是由于计算机语言设计者在六十年代决定从0开始编号事物而引起的。计算机可以愉快地从任何地方开始计数，而且从不抱怨，但大多数人类在从1开始计数时通常做得更好。我的大多数同行可能会不同意这一点，但由于我总是不得不修复他们的1偏差缺陷，我坚持我的看法。
- en: 'Let''s look at the following very simple script:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下以下非常简单的脚本：
- en: Chapter 9 - Script 4
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章 - 脚本4
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And the output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Chapter 9 - Script 4](img/B07040_09_04.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![第9章 - 脚本4](img/B07040_09_04.jpg)'
- en: 'Look at the subtle differences between the two loops:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下两个循环之间的微妙差异：
- en: In the `x` loop the counting was started at `0`.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`x`循环中，计数从`0`开始。
- en: '`x` was incremented while it was less than `5`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`在小于`5`的情况下递增。'
- en: The value of `x` after the loop was `5`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环后`x`的值为`5`。
- en: The var `maxx`, which is supposed to equal the number of iterations, is set
    to `x`.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`maxx`，它应该等于迭代次数，被设置为`x`。
- en: In the y loop the counting was started at `1`.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`y`循环中，计数从`1`开始。
- en: '`y` was incremented while it was less than or equal to `5`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`在小于或等于`5`的情况下递增。'
- en: The value of `y` after the loop was `6`.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环后`y`的值为`6`。
- en: The var `maxy`, which is supposed to equal the number of iterations, is set
    to `y-1`.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`maxy`，它应该等于迭代次数，被设置为`y-1`。
- en: If you already understand the above perfectly you will probably never have a
    problem with 1 off errors and that's great.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完全理解了上面的内容，你可能永远不会遇到1偏差错误的问题，那太好了。
- en: For the rest of us I suggest looking over this very carefully until you get
    it just right.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们其他人，我建议你仔细看一下，直到你完全理解为止。
- en: Using set to debug scripts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用set调试脚本
- en: You can use the `set` commands to help with debugging your scripts. There are
    two common options to `set`, `x` and `v`. Here is a description of each.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`set`命令来帮助调试你的脚本。`set`有两个常见的选项，`x`和`v`。以下是每个选项的描述。
- en: Note that a `-` activates the set while a `+` deactivates it. If that sounds
    backwards to you it is because it is backwards.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`-`激活`set`，而`+`则取消激活。如果这对你来说听起来很反常，那是因为它确实是反常的。
- en: 'Use:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用：
- en: '`set -x`: to display the expanded trace before running the command'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set -x`：在运行命令之前显示扩展的跟踪'
- en: '`set -v`: to display the input line as it is parsed'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set -v`：显示解析输入行'
- en: 'Take a look at *Script 5* which shows what `set -x` does:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下*脚本5*，它展示了`set -x`的作用：
- en: Chapter 9 - Script 5 and Script 6
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章 - 脚本5和脚本6
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Chapter 9 - Script 5 and Script 6](img/B07040_09_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![第9章 - 脚本5和脚本6](img/B07040_09_05.jpg)'
- en: If this looks a little strange at first don't worry, it gets easier the more
    you look at it. In essence, the lines that start with a `+` are the expanded source
    code lines, and the lines without a `+` are the output of the script.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一开始看起来有点奇怪，不要担心，你看得越多就会变得更容易。实质上，以`+`开头的行是扩展的源代码行，而没有`+`的行是脚本的输出。
- en: 'Look at the first two lines. It shows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下前两行。它显示：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first line shows the expanded command and the second the output.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行显示了扩展的命令，第二行显示了输出。
- en: 'You can also use the `set -v` option. Here is a screenshot of *Script 6* which
    is just *Script 5* but with `set -v` this time:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`set -v`选项。这是*Script 6*的屏幕截图，它只是*Script 5*，但这次使用了`set -v`：
- en: '![Chapter 9 - Script 5 and Script 6](img/B07040_09_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![第9章 - 脚本5和脚本6](img/B07040_09_06.jpg)'
- en: You can see the output is quite a bit different.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到输出有很大的不同。
- en: Note that with the `set` commands you can turn them on and off at any point
    you want in the script. This is so you can limit the output to just the areas
    of the code you are interested in.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`set`命令，您可以在脚本中的任何时候打开和关闭它们。这样可以将输出限制为您感兴趣的代码区域。
- en: 'Let''s look at an example of this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: Chapter 9 - Script 7
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章 - 脚本7
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And the output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 和输出：
- en: '![Chapter 9 - Script 7](img/B07040_09_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![第9章 - 脚本7](img/B07040_09_07.jpg)'
- en: Notice how the debugging was explicitly turned off at the beginning of the script
    even though it is off by default. This is a good way to keep track of when it
    is off and when it is on. Look at the output closely and see how the debug statements
    don't start displaying until the second loop with the array. Then it is turned
    off before running the last two lines.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管默认情况下关闭了调试，但在脚本开头明确关闭了调试。这是一个很好的方法，可以跟踪何时关闭和何时打开调试。仔细查看输出，看看调试语句直到第二个循环与数组开始显示。然后在运行最后两行之前关闭它。
- en: The output when using the `set` commands can be pretty hard to look at sometimes
    and so this is a good way to limit what you have to wade through to get to the
    lines of interest.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`set`命令时的输出有时可能很难看，因此这是限制您必须浏览以找到感兴趣的行的好方法。
- en: There is another debugging technique that I use quite frequently. In many cases
    I think it is superior to using the `set` commands as the display does not get
    quite as cluttered. You may recall in [Chapter 6](ch06.html "Chapter 6. Automating
    Tasks with Scripts"), *Automating Tasks with Scripts*, that we were able to display
    output to other terminals. This is a very handy feature.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种调试技术，我经常使用。在许多情况下，我认为它优于使用`set`命令，因为显示不会变得太混乱。您可能还记得在[第6章](ch06.html "第6章。使用脚本自动化任务")中，*使用脚本自动化任务*，我们能够将输出显示到其他终端。这是一个非常方便的功能。
- en: 'The following script shows how to display output in another terminal. A subroutine
    is used for convenience:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本显示了如何在另一个终端中显示输出。一个子例程用于方便：
- en: Chapter 9 - Script 8
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章 - 脚本8
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And the output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 和输出：
- en: '![Chapter 9 - Script 8](img/B07040_09_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![第9章 - 脚本8](img/B07040_09_08.jpg)'
- en: Remember to quote the parameter to `p1` in case it contains blank characters.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 记得引用`p1`的参数，以防它包含空格字符。
- en: This subroutine might be a bit of overkill to use for debugging but it captures
    many of the concepts previously discussed in this book. This approach can also
    be used in a script to display information in multiple terminals. We will go over
    that in the next chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个子例程可能有点过度使用于调试，但它涵盖了本书中之前讨论的许多概念。这种方法也可以用于在脚本中在多个终端中显示信息。我们将在下一章中讨论这一点。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'When writing to a terminal if you get a message similar to this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当写入终端时，如果收到类似于此的消息：
- en: '`./script8: line 26: /dev/pts/99: Permission denied`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: './script8: 第26行：/dev/pts/99：权限被拒绝'
- en: It probably means the terminal has not been opened yet. Also remember to put
    your terminal device strings into a variable because those tend to change after
    a reboot. Something like `TTY=/dev/pts/35` is a good idea.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能意味着终端尚未打开。还要记住将终端设备字符串放入变量中，因为这些在重新启动后往往会更改。像`TTY=/dev/pts/35`这样的东西是个好主意。
- en: A great time to use this debugging technique is when writing a form script as
    we did in [Chapter 5](ch05.html "Chapter 5. Creating Interactive Scripts"), *Creating
    Interactive Scripts*. So, let's take a look at that script again and put this
    new subroutine to use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种调试技术的好时机是在编写表单脚本时，就像我们在[第5章](ch05.html "第5章。创建交互式脚本")中所做的那样，*创建交互式脚本*。因此，让我们再次看一下该脚本，并使用这个新的子例程。
- en: Chapter 9 - Script 9
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章 - 脚本9
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output from the debug terminal (`dev/pts/35`):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是调试终端的输出（`dev/pts/35`）：
- en: '![Chapter 9 - Script 9](img/B07040_09_09.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![第9章 - 脚本9](img/B07040_09_09.jpg)'
- en: By having the debug information display in another terminal it is much easier
    to see what is happening in the code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在另一个终端中显示调试信息，更容易看到代码中发生了什么。
- en: You can put the `p1` routine where ever you think the problem might be. Labeling
    which subroutine is being used can also help locate if the problem is in a subroutine
    or in the main code body.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`p1`例程放在您认为问题可能出现的任何地方。标记正在使用的子例程也可以帮助确定问题是在子例程中还是在主代码体中。
- en: When your script is completed and ready for use, you don't have to remove the
    calls to the `p1` routine unless you really want to. You can just code a `return
    0` at the top of the routine.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的脚本完成并准备好使用时，您不必删除对`p1`例程的调用，除非您真的想这样做。您只需在例程顶部编写`return 0`。
- en: I use this approach when debugging shell scripts or C programs and it has always
    worked very well for me.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我在调试shell脚本或C程序时使用这种方法，它对我来说总是非常有效。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we explained how to prevent some common syntax and logic errors.
    The shell debugging commands `set -x` and `set -v` were also described. Using
    redirection to send the output from a script to another terminal was also shown
    as a way to debug in real time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了如何防止一些常见的语法和逻辑错误。还描述了shell调试命令`set -x`和`set -v`。还展示了使用重定向将脚本的输出发送到另一个终端以实时调试的方法。
- en: In the next chapter we will talk about scripting best practices. This includes
    making careful backups of your work and selecting a good text editor. A way to
    help you be more productive using the command line by using environment variables
    and aliases will also be discussed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论脚本编写的最佳实践。这包括仔细备份您的工作并选择一个好的文本编辑器。还将讨论使用环境变量和别名来帮助您更有效地使用命令行的方法。
