["```\n    sudo apt update &&sudo apt upgrade\n    ```", "```\n    sudo apt install build-essential git curl openssh-server \\\n    ebtablesethtoolsocat\n    ```", "```\n    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash \n    ```", "```\n    sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg\n    ```", "```\n    curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | \n    sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg> /dev/null\n    sudo apt-add-repository \\\n    \u00a0\u00a0https://packages.microsoft.com/repos/azure-cli\n    curl -L https://packages.microsoft.com/keys/microsoft.asc \\\n    \u00a0\u00a0| sudo apt-key add -\n    sudo apt update \n    sudo apt install azure-cli\n    ```", "```\n    sudo snap install --classic powershell\n    sudo snap install --classic vscode\n    ```", "```\n    curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n    curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list\n    sudo apt update\n    sudo apt install -y powershell\n    ```", "```\n    admin123@kubes:~$ pwsh\n    ```", "```\n    sudo pwsh -Command \"Install-Module PowerShellGet -Force\"\n    sudo pwsh -Command \"Install-Module -Name AzureRM.Netcore \\\n     -AllowClobber\"\n    sudo chown -R $USER ~/.local/\n    ```", "```\n    curl -sSL https://get.docker.com/ | sudo sh\n    sudo usermod -aG docker $USER\n    ```", "```\n    Sudo systemctl stop docker.service\n    ```", "```\nsudo -i\naz login\naz aks install-cli\n```", "```\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.3/bin/linux/amd64/kubectl\n```", "```\nchmod +x ./kubectl\n```", "```\nSudo mv ./kubectl /usr/local/bin/kubectl\n```", "```\nkubectl version\n```", "```\nkubectl completion bash > ~/.kube/completion.bash.inc\nprintf\"\n # Kubectl shell completion\n source '$HOME/.kube/completion.bash.inc'\n\">> $HOME/.bash_profile\nsource $HOME/.bash_profile\n```", "```\nsudo -i\nkubectl completion zsh>\"${fpath[1]}/_kubectl\"\nexit\nsource <(kubectl completion zsh)\n```", "```\nsudo apt install zshnpm fonts-powerline\nzsh # and create a .zshrc file with option 0 \nnpm install spaceship-prompt\nchsh -s /bin/zsh\n```", "```\naz group create --location eastus--name MyKubernetes\n```", "```\naz aks create --resource-group MyKubernetes \\\n\u00a0\u00a0--name Cluster01 \\\n\u00a0\u00a0--node-count 1 --generate-ssh-keys \n```", "```\naz aks list\n```", "```\naz aks browse --name Cluster01 --resource-group MyKubernetes\n```", "```\naz aks get-credentials --resource-group MyKubernetes \\\n --name Cluster01\n```", "```\nkubectl config get-contexts\n```", "```\nkubectl cluster-info\n```", "```\nkubectl get nodes\n```", "```\nKubectl createnginx --image=nginx --port=80\n```", "```\nkubectl get deployment\n```", "```\nkubectl get pods\n```", "```\nkubectl explain pods/nginx-57867cc648-dkv28\n```", "```\nkubectl delete pod nginx-57867cc648-dkv28 \n```", "```\nkubectl get services\n```", "```\nkubectl describe services/kubernetes\n```", "```\nkubectl delete deployment nginx\n```", "```\nkubectl run nginx --image=nginx\n```", "```\nkubectl expose pod <pod name> --port=80 --target-port=80 \\\n\u00a0\u00a0--type=LoadBalancer\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n\u00a0\u00a0name: myweb\nspec:\nrestartPolicy: Never\n\u00a0\u00a0volumes:\n\u00a0\u00a0- name: logger\nemptyDir: {}\n\u00a0\u00a0containers:\n\u00a0\u00a0- name: nginx\n\u00a0\u00a0\u00a0\u00a0image: nginx\nvolumeMounts:\n\u00a0\u00a0\u00a0\u00a0- name: logger\nmountPath: /var/log/nginx\nreadOnly: false\n\u00a0\u00a0- name: logmachine\n\u00a0\u00a0\u00a0\u00a0image: ubuntu\nvolumeMounts:\n\u00a0\u00a0\u00a0\u00a0- name: logger\nmountPath: /var/log/nginxmachine\n```", "```\nkubectl exec myweb -c nginxfindmnt | grep logger\n```", "```\ncd /tmp\nwget https://storage.googleapis.com/kubernetes-helm/\\\n\u00a0\u00a0helm-v2.9.1-linux-amd64.tar.gz\nsudo tar xf helm-v2.9.1-linux-amd64.tar.gz --strip=1 -C \\\n\u00a0\u00a0/usr/local/bin linux-amd64/helm\n```", "```\nbrew install kubernetes-helm\n```", "```\nhelm init\n```", "```\nhelm version\n```", "```\nkubectl create serviceaccount \\\n\u00a0\u00a0--namespace kube-system tiller\n```", "```\nkubectl create clusterrolebinding tiller-cluster-rule \\\n\u00a0\u00a0--clusterrole=cluster-admin \\\n\u00a0\u00a0--serviceaccount=kube-system:tiller\n```", "```\nhelm init --service-account tiller --upgrade\n```", "```\nhelm repo add azure \\\n\u00a0\u00a0https://kubernetescharts.blob.core.windows.net/azure\n```", "```\nhelm repo list\n```", "```\nhelm repo update\n```", "```\nhelm search wordpress\n```", "```\nhelm install stable/wordpress\n```", "```\nhelm ls\n```", "```\nhelm status contrasting-chicken\n```", "```\nhelm delete <NAME>\n```", "```\nhelm inspect stable/wordpress\n```", "```\nimage:\n\u00a0\u00a0registry: docker.io\n\u00a0\u00a0repository: bitnami/wordpress\n\u00a0\u00a0tag: 4-ol-7\nwordpressUsername: linuxstar01\nwordpressEmail: linuxstar01@example.com\nwordpressFirstName: Kamesh\nwordpressLastName: Ganesan\nwordpressBlogName: Linux on Azure \u2013 2nd Edition!\n```", "```\nhelm install stable/wordpress -f custom.yaml\n```", "```\nkubectl get pod\n```", "```\nkubectl describe pod <podname>\n```", "```\nhelm delete stable/wordpress\nkubectl scale sts --all --replicas=0\nkubectl delete pod --all\nkubectl delete sts --all --cascade=false\n```", "```\nhelm create myhelm\ncd myhelm\n```", "```\napiVersion: v1\nappVersion: 1.15.2\ndescription: My First Nginx Helm\nname: myhelm\nversion: 0.1.0\nmaintainers:\n- name: Kamesh Ganesan\n\u00a0\u00a0\u00a0\u00a0email: kameshg@example.com\n\u00a0\u00a0\u00a0\u00a0url: http://packtpub.com\n```", "```\nhelm lint\n```", "```\nhelm install --dry-run --debug ../myhelm\n```", "```\nhelm install ../myhelm\n```", "```\nhelm upgrade <name> ../myhelm\n```", "```\nhelm rollback <RELEASE> <REVISION>\n```", "```\ndraft pack list\nAvailable Packs:\n\u00a0\u00a0github.com/Azure/draft/clojure\n\u00a0\u00a0github.com/Azure/draft/csharp\n\u00a0\u00a0github.com/Azure/draft/erlang\n\u00a0\u00a0github.com/Azure/draft/go\n\u00a0\u00a0github.com/Azure/draft/gradle\n\u00a0\u00a0github.com/Azure/draft/java\n\u00a0\u00a0github.com/Azure/draft/javascript\n\u00a0\u00a0github.com/Azure/draft/php\n\u00a0\u00a0github.com/Azure/draft/python\n\u00a0\u00a0github.com/Azure/draft/ruby\n\u00a0\u00a0github.com/Azure/draft/rust\n\u00a0\u00a0github.com/Azure/draft/swift\n```", "```\ncd /tmp\nwget https://azuredraft.blob.core.windows.net/draft/\\\n\u00a0\u00a0draft-v0.15.0-linux-amd64.tar.gz\nsudo tar xf draft-v0.15.0-linux-amd64.tar.gz --strip=1 \\\n\u00a0\u00a0-C /usr/local/bin linux-amd64/draft\n```", "```\nbrew tap azure/draft && brew install draft\n```", "```\ndraft init\n```", "```\ndraft version\n```", "```\naz acr create --resource-group MyKubernetes --name LinuxStarACR --sku Basic\n```", "```\naz acr login --name LinuxStarACR\n```", "```\ndraft config set registry LinuxStarACR\n```", "```\naz acr login --name LinuxStarACR\n```", "```\nexport AKS_SP_ID=$(azaks show \\\n --resource-group <resource group> \\\n --name <Kubernetes Cluster>\n --query \"servicePrincipalProfile.clientId\" -o tsv)\nexport ACR_RESOURCE_ID=$(azacr show \\\n --resource-group <resource group>\\\n --name <ACR Name> --query \"id\" -o tsv)\naz role assignment create --assignee $AKS_SP_ID --scope $ACR_RESOURCE_ID --role contributor \n```", "```\nvar http = require('http');\nvar server = http.createServer(function(req, res) {\nres.writeHead(200);\nres.end('Hello World!');\n});\nserver.listen(8080);\n```", "```\nnpminit\n```", "```\nname: (mynode)\nversion: (1.0.0) 0.0.1\ndescription: My first Node App\nentry point: (mynode.js)\ntest command: node mynode.js\ngit repository:\nkeywords: webapp\nauthor: Kamesh Ganesan\nlicense: (ISC)\n```", "```\ndraft create\n```", "```\ndraft up\n```", "```\nkubectl logs <Pod Name>\n```", "```\n{\n\"name\": \"mynode\",\n\"version\": \"0.0.2\",\n\"description\": \"My first Node App\",\n\"main\": \"mynode.js\",\n\"scripts\": {\n\"start\": \"node mynode.js\",\n\"test\": \"echo \\\"Error: no test specified\\\"& exit 1\"\n\u00a0\u00a0},\n\"keywords\": [\n\"webapp\"\n\u00a0\u00a0],\n\"author\": \"Kamesh Ganesan\",\n\"license\": \"ISC\"\n}\n```", "```\ndraft update\n```", "```\ndraft connect\n```", "```\ncurl localhost:39053\n```", "```\ndraft delete\n```", "```\nkubectl run nginx --image=nginx\n```", "```\nkubectl edit deployment/nginx\n```", "```\nkubectl rollout status deployment nginx\nkubectl rollout history deployment nginx\n```", "```\nkubectl describe deployment nginx\n```", "```\nkubectl set image deployment/nginxnginx=nginx:1.17.5 --record\n```", "```\nkubectl scale deployment nginx --replicas=3\n```", "```\nkubectl get pods -o wide\n```", "```\nkubectl expose deployment nginx --type=LoadBalancer \\\n --name=nginx-lb --port 80\nkubectl get services\n```", "```\ngit clone https://github.com/kubernetes-incubator/metrics-server.git \nkubectl create -f metrics-server/deploy/1.8+/\n```", "```\nkubectl autoscale deployment nginx --cpu-percent=50 --min=3 --max=10\n```", "```\nazaks scale --name Cluster01 \\\n\u00a0\u00a0--resource-group MyKubernetes \\\n\u00a0\u00a0--node-count 2\nkubectl get nodes\n```", "```\nkubectl get hpa\n```", "```\naz aks list --query \"[].kubernetesVersion\"\n```", "```\naz aks get-versions --location eastus --output table | egrep \"^1.13.12\"\n```", "```\naz aks upgrade --resource-group MyKubernetes\n\u00a0\u00a0--name Cluster01 \\\n\u00a0\u00a0--kubernetes-version 1.14.8 --yes --no-wait\n```", "```\naz storage account create --resource-group MyKubernetes \\\n --name mystorageest1 \u2013sku Standard_LRS\n```", "```\n    kind: StorageClass\n    apiVersion: storage.k8s.io/v1\n    metadata:\n    \u00a0\u00a0name: storageforapp\n    provisioner: kubernetes.io/azure-disk\n    parameters:\n    storageaccounttype: Standard_LRS\n     location: eastus\n     kind: shared\n    ```", "```\n    kubectlapply -f storageclass.yaml\n    ```", "```\n    kind: PersistentVolumeClaim\n    apiVersion: v1\n    metadata:\n    \u00a0\u00a0name: claim-storage-for-app\n    \u00a0\u00a0annotations:\n    volume.beta.kubernetes.io/storage-class: storageforapp\n    spec:\n    accessModes:\n    \u00a0\u00a0- ReadWriteOnce\n    \u00a0\u00a0resources:\n    \u00a0\u00a0\u00a0\u00a0requests:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0storage: 5Gi\n    ```", "```\n    kubectlapply -f persistentvolume.yaml\n    ```", "```\n    kubectl get sc\n    ```", "```\n    kind: Pod\n    apiVersion: v1\n    metadata:\n    \u00a0\u00a0name: my-web\n    spec:\n    \u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0- name: nginx\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: nginx\n    volumeMounts:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- mountPath: \"/var/www/html\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: volume\n    \u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0- name: volume\n    persistentVolumeClaim:\n    claimName: claim-storage-for-app\n    ```", "```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n\u00a0\u00a0name: azurefile\nprovisioner: kubernetes.io/azure-file\nmountOptions:\n\u00a0\u00a0- dir_mode=0888\n\u00a0\u00a0- file_mode=0888\n\u00a0\u00a0- uid=1000\n\u00a0\u00a0- gid=1000\n\u00a0\u00a0- mfsymlinks\n\u00a0\u00a0- nobrl\n\u00a0\u00a0- cache=none\nparameters:\nskuName: Standard_LRS\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n\u00a0\u00a0name: azurefile\nspec:\naccessModes:\n\u00a0\u00a0\u00a0\u00a0- ReadWriteMany\nstorageClassName: azurefile\n\u00a0\u00a0resources:\n\u00a0\u00a0\u00a0\u00a0requests:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0storage: 5Gi\n```"]