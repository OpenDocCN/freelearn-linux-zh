- en: Input Devices Drivers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入设备驱动程序
- en: Input devices are devices by which one can interact with the system. Such devices
    are buttons, keyboards, touchscreens, mouse, and so on. They work by sending events,
    caught and broadcasted over the system by the input core. This chapter will explain
    each structure used by input core to handle input devices. That being said, we
    will see how one can manage events from the user space.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 输入设备是可以与系统交互的设备。这些设备是按钮、键盘、触摸屏、鼠标等。它们通过发送事件来工作，由输入核心捕获并广播到系统中。本章将解释输入核心用于处理输入设备的每个结构。也就是说，我们将看到如何从用户空间管理事件。
- en: 'In this chapter, we will cover following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Input core data structures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入核心数据结构
- en: Allocating and registering input devices, and well as polled devices family
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配和注册输入设备，以及轮询设备系列
- en: Generating and reporting events to the input core
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成并向输入核心报告事件
- en: Input device from user space
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户空间的输入设备
- en: Writing a driver example
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写驱动程序示例
- en: Input device structures
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入设备结构
- en: 'First of all, the main file to include in order to interface with the input
    subsystem is `linux/input.h` :'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要与输入子系统进行接口的主文件是 `linux/input.h`：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Whatever type of input device it is, whatever type of event it sends, an input
    device is represented in the kernel as an instance of `struct input_dev` :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论输入设备的类型是什么，它发送的事件的类型是什么，输入设备在内核中都表示为 `struct input_dev` 的实例：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The meaning of the fields are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 字段的含义如下：
- en: '`name` represents the name of the device.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 表示设备的名称。'
- en: '`phys` is the physical path to the device in the system hierarchy.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phys` 是设备在系统层次结构中的物理路径。'
- en: '`evbit` is a bitmap of types of events supported by the device. Some types
    of areas are as follows:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`evbit` 是设备支持的事件类型的位图。一些类型的区域如下：'
- en: '`EV_KEY` for devices supporting sending key events (keyboards, button, and
    so on)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EV_KEY` 用于支持发送键事件（键盘、按钮等）的设备。'
- en: '`EV_REL` for device supporting sending relative positions (mouse, digitizers,
    and so on)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EV_REL` 用于支持发送相对位置的设备（鼠标、数字化器等）'
- en: '`EV_ABS` for device supporting sending absolute positions(joystick)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EV_ABS` 用于支持发送绝对位置（游戏手柄）的设备'
- en: The list of events is available in the kernel source in the `include/linux/input-event-codes.h`
    file. One uses the `set_bit()` macro in order to set the appropriate bit depending
    on our input device capabilities. Of course a device can support more than one
    type of event. For example, a mouse will set both `EV_KEY` and `EV_REL` .
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 事件列表在内核源代码中的 `include/linux/input-event-codes.h` 文件中可用。我们使用 `set_bit()` 宏来根据我们的输入设备功能设置适当的位。当然，设备可以支持多种类型的事件。例如，鼠标将同时设置
    `EV_KEY` 和 `EV_REL`。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`keybit` is for an `EV_KEY` type enabled device, a bitmap of keys/buttons that
    this device exposes. For example, `BTN_0` , `KEY_A` , `KEY_B` , and so on. The
    complete list of keys/buttons is in the `include/linux/input-event-codes.h` file.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keybit` 用于启用 `EV_KEY` 类型的设备，是该设备公开的键/按钮的位图。例如，`BTN_0`，`KEY_A`，`KEY_B`等。键/按钮的完整列表在
    `include/linux/input-event-codes.h` 文件中。'
- en: '`relbit` is for an `EV_REL` type enabled device, a bitmap of relative axes
    for the device. For example, `REL_X` , `REL_Y` , `REL_Z` , `REL_RX` , and so on.
    Have a look at `include/linux/input-event-codes.h` for the complete list.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relbit` 用于启用 `EV_REL` 类型的设备，是设备的相对轴的位图。例如，`REL_X`，`REL_Y`，`REL_Z`，`REL_RX`等。请查看
    `include/linux/input-event-codes.h` 获取完整列表。'
- en: '`absbit` is for an `EV_ABS` type enabled device, bitmap of absolute axes for
    the device. For example, `ABS_Y` , `ABS_X` , and so on. Have a look at the same
    previous file for the complete list.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absbit` 用于启用 `EV_ABS` 类型的设备，是设备的绝对轴的位图。例如，`ABS_Y`，`ABS_X`等。请查看相同的先前文件以获取完整列表。'
- en: '`mscbit` is for `EV_MSC` type enabled device, a bitmap of miscellaneous events
    supported by the device.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mscbit` 用于启用 `EV_MSC` 类型的设备，是设备支持的各种杂项事件的位图。'
- en: '`repeat_key` stores the key code of the last key pressed; used to implement
    software auto repeat.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat_key` 存储最后按下的键的键码；用于实现软件自动重复。'
- en: '`rep` , current values for auto repeat parameters (delay, rate).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rep`，自动重复参数（延迟、速率）的当前值。'
- en: '`absinfo` is an array of `&struct input_absinfo` elements holding information
    about absolute axes (current value, min, max, flat, fuzz, resolution). You should
    use the `input_set_abs_params()` function in order to set those values.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absinfo` 是一个 `&struct input_absinfo` 元素的数组，其中包含有关绝对轴的信息（当前值、最小值、最大值、平坦值、模糊值、分辨率）。您应该使用
    `input_set_abs_params()` 函数来设置这些值。'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`min` and `max` specify lower and upper bound values. `fuzz` indicates the
    expected noise on the specified channel of the specified input device. The following
    is an example in which we set each channel''s bound only:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min` 和 `max` 指定了较低和较高的边界值。`fuzz` 表示指定输入设备的指定通道上的预期噪音。以下是一个示例，我们仅设置每个通道的边界：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`key` reflects the current state of the device''s keys/buttons.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` 反映了设备键/按钮的当前状态。'
- en: '`open` is a method called when the very first user calls `input_open_device()`
    . Use this method to prepare the device, such as interrupt request, polling thread
    start, and so on.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open` 是在第一个用户调用 `input_open_device()` 时调用的方法。使用此方法来准备设备，例如中断请求、轮询线程启动等。'
- en: '`close` is called when the very last user calls `input_close_device()` . Here
    you can stop polling (which consumes lot of resource).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close` 在最后一个用户调用 `input_close_device()` 时被调用。在这里，您可以停止轮询（这会消耗大量资源）。'
- en: '`users` stores the number of users (input handlers) that opened this device.
    It is used by `input_open_device()` and `input_close_device()` to make sure that
    `dev->open()` is only called when the first user opens the device and `dev->close()`
    is called when the very last user closes the device.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users` 存储了打开此设备的用户（输入处理程序）的数量。它被 `input_open_device()` 和 `input_close_device()`
    使用，以确保只有在第一个用户打开设备时才调用 `dev->open()`，并且在最后一个用户关闭设备时调用 `dev->close()`。'
- en: '`dev` is the struct device associated with this device (for device model).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev` 是与此设备关联的设备结构（用于设备模型）。'
- en: '`num_vals` is the number of values queued in the current frame.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_vals` 是当前帧中排队的值的数量。'
- en: '`max_vals` is the maximum number of values queued in a frame.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_vals` 是在一个帧中排队的值的最大数量。'
- en: '`Vals` is the array of values queued in the current frame.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vals` 是当前帧中排队的值的数组。'
- en: '`devres_managed` indicates that devices are managed with `devres` framework
    and needs not be explicitly unregistered or freed.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devres_managed` 表示设备由 `devres` 框架管理，不需要显式取消注册或释放。'
- en: Allocating and registering an input device
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配和注册输入设备
- en: 'Prior to the registering and sending the event with an input device, it should
    be allocated with the `input_allocate_device()` function. In order to free the
    previously allocated memory for a non-registered input device, `input_free_device()`
    function should be used. If the device has already been registered, `input_unregister_device()`
    should be used instead. Like every function where memory allocation is needed,
    we can use a resource-managed version of functions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册并向输入设备发送事件之前，应使用 `input_allocate_device()` 函数为其分配内存。为了释放先前为未注册的输入设备分配的内存，应使用
    `input_free_device()` 函数。如果设备已经注册，应改用 `input_unregister_device()`。像每个需要内存分配的函数一样，我们可以使用函数的资源管理版本：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Device allocation may sleep and therefore must not be called in the atomic context
    or with a spinlock held.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 设备分配可能会休眠，因此不能在原子上下文中调用，也不能在持有自旋锁时调用。
- en: 'The following is an excerpt of the `probe` function of an input device siting
    on the I2C bus:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个位于 I2C 总线上的输入设备的 `probe` 函数的摘录：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Polled input device sub-class
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轮询输入设备子类
- en: Polled input devices is a special type of input device, which relies on polling
    to sense device state changes, whereas the generic input device type relies on
    IRQ to sense change and send events to the input core.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 轮询输入设备是一种特殊类型的输入设备，它依赖轮询来感知设备状态的变化，而通用输入设备类型依赖于 IRQ 来感知变化并将事件发送到输入核心。
- en: 'A polled input device is described in the kernel as an instance of `struct
    input_polled_dev` structure, which is a wrapper around the generic `struct input_dev`
    structure:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 内核中描述了一个轮询输入设备，它是 `struct input_polled_dev` 结构的一个实例，它是通用 `struct input_dev`
    结构的一个包装器：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following are the meanings of elements in this structure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构中元素的含义如下：
- en: '`private` is the driver''s private data.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private` 是驱动程序的私有数据。'
- en: '`open` is an optional method that prepares a device for polling (enabled the
    device and maybe flushes device state).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open` 是一个可选的方法，用于准备设备进行轮询（启用设备，可能刷新设备状态）。'
- en: '`close` is an optional method that is called when the device is no longer being
    polled. It is used to put devices into the low power mode.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close` 是一个可选的方法，当设备不再被轮询时调用。它用于将设备置于低功耗模式。'
- en: '`poll` is a mandatory method called whenever the device needs to be polled.
    It is called at the frequency of `poll_interval` .'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll` 是一个强制性的方法，每当需要轮询设备时都会调用。它以 `poll_interval` 的频率调用。'
- en: '`poll_interval` is the frequency at which the `poll()` method should be called.
    Defaults to 500 msec unless overridden when registering the device.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll_interval` 是应调用 `poll()` 方法的频率。默认为 500 毫秒，除非在注册设备时被覆盖。'
- en: '`poll_interval_max` specifies the upper bound for the poll interval. Defaults
    to the initial value of `poll_interval` .'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll_interval_max` 指定了轮询间隔的上限。默认为 `poll_interval` 的初始值。'
- en: '`poll_interval_min` specifies the lower bound for the poll interval. Defaults
    to 0.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poll_interval_min` 指定了轮询间隔的下限。默认为 0。'
- en: '`input` is the input device around which the polled device is built. It must
    be properly initialized by the driver (ID, name, bits). Polled input device just
    provides an interface to use polling instead of IRQ, to sense device state change.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input` 是轮询设备构建的输入设备。它必须由驱动程序正确初始化（ID、名称、位）。轮询输入设备只提供了一个接口，用于使用轮询而不是 IRQ 来感知设备状态变化。'
- en: 'Allocating/freeing the `struct input_polled_dev` structure is done using `input_allocate_polled_device()`
    and `input_free_polled_device()` . You should take care of initializing mandatory
    fields of the `struct input_dev` embedded in it. Polling interval should be set
    too, otherwise, it defaults to 500 msec. One can use resource manage version too.
    Both prototypes are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `input_allocate_polled_device()` 和 `input_free_polled_device()` 来分配/释放 `struct
    input_polled_dev` 结构。您应该注意初始化其中嵌入的 `struct input_dev` 的强制性字段。轮询间隔也应该设置，否则默认为 500
    毫秒。也可以使用资源管理版本。两个原型如下：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For resource-managed devices, the field `input_dev->devres_managed` will be
    set to true by the input core.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于资源管理的设备，输入核心将设置字段 `input_dev->devres_managed` 为 true。
- en: 'After allocation and proper fields initialization, the polled input device
    can be registered using `input_register_polled_device()` , which returns 0 on
    success. The reverse operation (unregister) is done with the `input_unregister_polled_device()`
    function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配和正确初始化字段之后，可以使用 `input_register_polled_device()` 注册轮询输入设备，成功时返回 0。反向操作（取消注册）使用
    `input_unregister_polled_device()` 函数完成：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A typical example of the `probe()` function for such a device looks as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的设备的 `probe()` 函数的典型示例如下：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is how our `struct my_struct` structure looks:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的 `struct my_struct` 结构的样子：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And following is how the `open` function looks:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `open` 函数的样子：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `open` method is used to prepare resources needed by the device. We do not
    really need this method for this example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`open` 方法用于准备设备所需的资源。对于这个例子，我们实际上不需要这个方法。'
- en: Generating and reporting an input event
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成和报告输入事件
- en: Device allocation and registration are essential, but they are not the main
    goal of an input device driver, which is designed to report even to the input
    core. Depending on the type of event your device can support, the kernel provides
    appropriate APIs to report them to the core.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设备分配和注册是必不可少的，但它们不是输入设备驱动程序的主要目标，输入设备驱动程序旨在向输入核心报告。根据设备支持的事件类型，内核提供了适当的API来将它们报告给核心。
- en: 'Given an `EV_XXX` capable device, the corresponding report function would be
    `input_report_xxx()` . The following table shows a mapping between the most important
    event types and their report functions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个支持 `EV_XXX` 的设备，相应的报告函数将是 `input_report_xxx()` 。以下表格显示了最重要的事件类型及其报告函数之间的映射关系：
- en: '| **Event type** | **Report function** | **Code example** |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **事件类型** | **报告函数** | **代码示例** |'
- en: '| `EV_KEY` | `input_report_key()` | `input_report_key(poll_dev->input, BTN_0,
    gpiod_get_value(ms-> reset_btn_desc) & 1)` ; |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `EV_KEY` | `input_report_key()` | `input_report_key(poll_dev->input, BTN_0,
    gpiod_get_value(ms-> reset_btn_desc) & 1)` ; |'
- en: '| `EV_REL` | `input_report_rel()` | `input_report_rel(nunchuk->input, REL_X,
    (nunchuk->report.joy_x - 128)/10)` ; |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `EV_REL` | `input_report_rel()` | `input_report_rel(nunchuk->input, REL_X,
    (nunchuk->report.joy_x - 128)/10)` ; |'
- en: '| `EV_ABS` | `input_report_abs()` | `input_report_abs(bma150->input, ABS_X,
    x_value)` ;`input_report_abs(bma150->input, ABS_Y, y_value)` ;`input_report_abs(bma150->input,
    ABS_Z, z_value)` ; |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `EV_ABS` | `input_report_abs()` | `input_report_abs(bma150->input, ABS_X,
    x_value)` ;`input_report_abs(bma150->input, ABS_Y, y_value)` ;`input_report_abs(bma150->input,
    ABS_Z, z_value)` ; |'
- en: 'Their respective prototypes are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的原型如下：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The list of available report functions can be found in `include/linux/input.h`
    in the kernel source file. They all have the same skeleton:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可用报告函数的列表可以在内核源文件 `include/linux/input.h` 中找到。它们都具有相同的框架：
- en: '`dev` is the input device responsible for the event.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev` 是负责事件的输入设备。'
- en: '`code` represents the event code, for example,`REL_X` or `KEY_BACKSPACE` .
    The complete list is in `include/linux/input-event-codes.h` .'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code` 表示事件代码，例如 `REL_X` 或 `KEY_BACKSPACE` 。完整的列表在 `include/linux/input-event-codes.h`
    中。'
- en: '`value` is the value the event carries. For `EV_REL` event type, it carries
    the relative change. For a `EV_ABS` (joysticks and so on.) event type, it contains
    an absolute new value. For `EV_KEY` event type, it should be set to `0` for key
    release, `1` for key press, and `2` for auto repeat.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` 是事件携带的值。对于 `EV_REL` 事件类型，它携带相对变化。对于 `EV_ABS`（如摇杆等）事件类型，它包含绝对的新值。对于
    `EV_KEY` 事件类型，应设置为 `0` 表示按键释放，`1` 表示按键按下，`2` 表示自动重复。'
- en: 'After all changes have been reported, the driver should call `input_sync()`
    on the input device, in order to indicate that this event is complete. The input
    subsystem will collect these into a single packet and send it through `/dev/input/event<X>`
    , which is the character device representing our `struct input_dev` on the system,
    and where `<X>` is the interface number assigned to the driver by the input core:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在报告了所有更改之后，驱动程序应调用 `input_sync()` 来指示输入设备此事件已完成。输入子系统将这些事件收集到一个数据包中，并通过 `/dev/input/event<X>`
    发送，这是表示系统上的 `struct input_dev` 的字符设备，其中 `<X>` 是输入核心分配给驱动程序的接口号：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let us see an example, which is an excerpt of the `bma150` digital acceleration
    sensors drivers in `drivers/input/misc/bma150.c` :'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，这是 `drivers/input/misc/bma150.c` 中 `bma150` 数字加速传感器驱动程序的摘录：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding sample, `input_sync()` tells the core to consider the three
    reports as the same event. It makes sense since the position has three axes (X,
    Y, Z) and we do not want X, Y, or Z to be reported separately.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`input_sync()` 告诉核心将这三个报告视为同一事件。这是有道理的，因为位置有三个轴（X、Y、Z），我们不希望 X、Y 或 Z
    分别报告。
- en: 'The best place to report the event is inside the `poll` function for a polled
    device, or inside the IRQ routine (threaded part or not) for an IRQ enabled device.
    If you perform some operations that may sleep, you should process your report
    inside the threaded part of the IRQ handled:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 报告事件的最佳位置是在轮询设备的 `poll` 函数中，或者在启用了 IRQ 的设备的 IRQ 例程（线程部分或非线程部分）中。如果执行了可能休眠的操作，应在
    IRQ 处理的线程部分内处理报告：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: User space interface
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户空间接口
- en: 'Every registered input device is represented by a `/dev/input/event<X>` char
    device, from which we can read the event from the user space. An application reading
    this file will receive event packets in the `struct input_event` format:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个注册的输入设备都由 `/dev/input/event<X>` 字符设备表示，我们可以从用户空间读取该设备的事件。读取此文件的应用程序将以 `struct
    input_event` 格式接收事件数据包：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let us see the meaning of each element in the structure:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结构中每个元素的含义：
- en: '`time` is the timestamp, it returns the time at which the event happened.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time` 是时间戳，它返回事件发生的时间。'
- en: '`type` is the event type. For example, `EV_KEY` for a key press or release,
    `EV_REL` for relative moment, or `EV_ABS` for an absolute one. More types are
    defined in `include/linux/input-event-codes.h` .'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` 是事件类型。例如，`EV_KEY` 表示按键按下或释放，`EV_REL` 表示相对移动，`EV_ABS` 表示绝对移动。更多类型在 `include/linux/input-event-codes.h`
    中定义。'
- en: '`code` is the event code, for example: `REL_X` or `KEY_BACKSPACE` , again a
    complete list is in `include/linux/input-event-codes.h` .'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code` 是事件代码，例如：`REL_X` 或 `KEY_BACKSPACE` ，完整的列表在 `include/linux/input-event-codes.h`
    中。'
- en: '`value` is the value that the event carries. For `EV_REL` event type, it carries
    the relative change. For an `EV_ABS` (joysticks and so on) event type, it contains
    the absolute new value. For `EV_KEY` event type, it should be set to `0` for key
    release, `1` for keypress and `2` for auto repeat.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` 是事件携带的值。对于 `EV_REL` 事件类型，它携带相对变化。对于 `EV_ABS`（如摇杆等）事件类型，它包含绝对的新值。对于
    `EV_KEY` 事件类型，应设置为 `0` 表示按键释放，`1` 表示按键按下，`2` 表示自动重复。'
- en: 'A user space application can use blocking and non-blocking reads, but also
    `poll()` or `select()` system calls in order to get notified of events after opening
    this device. Following is an example with `select()` system call, with the complete
    source code provided in the book source repository:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间应用程序可以使用阻塞和非阻塞读取，还可以使用 `poll()` 或 `select()` 系统调用来在打开此设备后接收事件通知。以下是一个使用
    `select()` 系统调用的示例，完整的源代码在书籍源代码库中提供：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Putting it all together
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: So far, we have described structures used when writing drivers for input devices,
    and how they can be managed from the user space.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经描述了在编写输入设备驱动程序时使用的结构，以及它们如何可以从用户空间进行管理。
- en: Allocate a new input device, according to its type, polled or not, using `input_allocate_polled_device()`
    or `input_allocate_device()` .
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据其类型，轮询或非轮询，使用`input_allocate_polled_device()`或`input_allocate_device()`分配新的输入设备。
- en: 'Fill in the mandatory fields or not (if necessary):'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写强制字段或不填写（如果有必要）：
- en: Specify type of event the device supports by using `set_bit()` helper macro
    on the `input_dev.evbit` field
  id: totrans-106
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在`input_dev.evbit`字段上使用`set_bit()`辅助宏指定设备支持的事件类型
- en: Depending on event type, `EV_REL` , `EV_ABS` , `EV_KEY` or other, indicate code
    this device can report using either `input_dev.relbit` , `input_dev.absbit` ,
    `input_dev.keybit` , or other.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据事件类型，`EV_REL`、`EV_ABS`、`EV_KEY`或其他，指定此设备可以报告的代码，使用`input_dev.relbit`、`input_dev.absbit`、`input_dev.keybit`或其他。
- en: Specify `input_dev.dev` in order to set up a proper device tree
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定`input_dev.dev`以设置正确的设备树
- en: Fill `abs_` info if necessary
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如有必要，填写`abs_`信息
- en: 'For polled device, indicate at which interval the `poll()` function should
    be called:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于轮询设备，请指定应调用`poll()`函数的间隔：
- en: Write your `open()` function if necessary, in which you should prepare and set
    up resource used by the device. This function is called only once. In this function,
    setup GPIO, request interrupt if needed, initialize the device.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有必要，请编写您的`open()`函数，在其中应准备和设置设备使用的资源。此函数仅调用一次。在此函数中，设置GPIO，如有需要请求中断，初始化设备。
- en: Write your `close()` function, in which you will release and deallocate what
    you have done in the `open()` function. For example, free GPIO, IRQ, put device
    to power saving mode.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写您的`close()`函数，在其中释放和释放`open()`函数中完成的内容。例如，释放GPIO，IRQ，将设备置于省电模式。
- en: Pass either your `open()` or `close()` function (or both) to `input_dev.open`
    and `input_dev.close` fields.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的`open()`或`close()`函数（或两者）传递给`input_dev.open`和`input_dev.close`字段。
- en: Register your device using `input_register_polled_device()` if polled, or `input_register_device()`
    if not.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是轮询的，请使用`input_register_polled_device()`注册您的设备，如果不是，请使用`input_register_device()`。
- en: In your IRQ function (threaded or not) or in your `poll()` function, gather
    and report events depending on their types, using either `input_report_key()`
    , `input_report_rel()` , `input_report_abs()` or other, and then, call `input_sync()`
    on the input device to indicate the end of frame (the report is complete).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的IRQ函数（线程化或非线程化）或`poll()`函数中，根据事件类型收集和报告事件，使用`input_report_key()`、`input_report_rel()`、`input_report_abs()`或其他，并在输入设备上调用`input_sync()`以指示帧结束（报告完成）。
- en: 'The usual way is to use classic input devices if no IRQ is provided, or else
    fall back to polled device:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的方法是，如果没有提供IRQ，则使用经典输入设备，否则回退到轮询设备：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To see how to manage such devices from the user space, please refer to the example
    provided within the source of the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 查看如何从用户空间管理这些设备，请参考书籍源代码中提供的示例。
- en: Driver examples
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序示例
- en: 'One can summarize thing in the two following drivers. The first one is a polled
    input device, based on a GPIO non-mapped to IRQ. The polled input core will poll
    the GPIO to sense any change. This driver is configured to send 0 key code. Each
    GPIO state corresponds either to key press or key release:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可以总结以下两个驱动程序。第一个是基于未映射到IRQ的GPIO的轮询输入设备。轮询输入核心将轮询GPIO以检测任何变化。此驱动程序配置为发送0键代码。每个GPIO状态对应于按键按下或释放：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This second driver sends events to the input core according to the IRQ on which
    the button''s GPIO is mapped. When using IRQ to sense key press or release, it
    is a good practice to trig the interrupt on edge change:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这第二个驱动程序根据按钮的GPIO映射到的IRQ向输入核心发送事件。当使用IRQ来检测按键按下或释放时，最好在边缘变化时触发中断：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For both examples, when a device matches the module, a node will be created
    in `/dev/input` directory. The node corresponds to `event0` in our example. One
    can use `udevadm` tool in order to display information about the device:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个示例，当设备与模块匹配时，将在`/dev/input`目录中创建一个节点。该节点对应于我们示例中的`event0`。可以使用`udevadm`工具来显示有关设备的信息：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The tool that actually allows us to print the event key to the screen is `evtest`
    , given the path of the input device:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实际允许我们将事件键打印到屏幕的工具是`evtest`，给定输入设备的路径：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Since the second module is based on IRQ, one can easily check if the IRQ request
    succeeded, and how many time it has been fired:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于第二个模块是基于IRQ的，可以轻松检查IRQ请求是否成功，并且它已被触发了多少次：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, one can successively push/release the button, and check whether the
    GPIO''s state changed or not:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以连续按下/释放按钮，并检查GPIO的状态是否发生了变化：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter described the whole input framework, and highlighted the difference
    between polled and interrupt driven input devices. By the end of this chapter,
    you have the necessary knowledge to write a driver for any input driver, whatever
    its type, and whatever input event it supports. The user space interface was discussed
    too, with a sample provided. The next chapter discusses another important framework,
    the RTC, which is the key element of time management in PC as well as embedded
    devices.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了整个输入框架，并突出了轮询和中断驱动输入设备之间的区别。在本章结束时，您将具备为任何输入驱动程序编写驱动程序的必要知识，无论其类型和支持的输入事件如何。还讨论了用户空间接口，并提供了示例。下一章将讨论另一个重要的框架，即RTC，它是PC和嵌入式设备中时间管理的关键元素。
