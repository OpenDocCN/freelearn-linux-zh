- en: Chapter 6. Automating Tasks with Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用脚本自动化任务
- en: This chapter shows how to automate various tasks using scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用脚本自动化各种任务。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: How to create a script to automate a task.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个自动化任务的脚本。
- en: The proper way to use cron to run the script automatically at specific times.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cron在特定时间自动运行脚本的正确方法。
- en: How to use `ZIP` and `TAR` to perform compressed backups.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`ZIP`和`TAR`进行压缩备份。
- en: Source code examples.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码示例。
- en: The reader will learn how to create automated scripts.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 读者将学习如何创建自动化脚本。
- en: We talked about the `sleep` command in [Chapter 3](ch03.html "Chapter 3. Using
    Loops and the sleep Command"), *Using Loops and the sleep Command*. It can be
    used to create an automated script (that is, one that runs at a specific time
    with no user intervention) as long as a few guidelines are followed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。使用循环和sleep命令")*使用循环和sleep命令*中谈到了`sleep`命令。只要遵循一些准则，它可以用来创建一个自动化脚本（即在特定时间运行而无需用户干预），。
- en: 'This very simple script will reinforce what we covered in [Chapter 3](ch03.html
    "Chapter 3. Using Loops and the sleep Command") *Using Loops and the sleep Command*
    about using the `sleep` command for automation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个非常简单的脚本将强化我们在[第3章](ch03.html "第3章。使用循环和sleep命令")*使用循环和sleep命令*中所讨论的关于使用`sleep`命令进行自动化的内容：
- en: Chapter 6 - Script 1
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 - 脚本1
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you run this on your system and wait a few days you will start to see the
    date slip a little. This is because the `sleep` command inserts a delay into the
    script, it does not mean that it is going to run the script at the same time every
    day.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你的系统上运行它并等几天，你会发现日期会有所偏移。这是因为`sleep`命令在脚本中插入了延迟，这并不意味着它会每天在同一时间运行脚本。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The following script shows this problem in a bit more detail. Note that this
    is an example of what not to do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本更详细地展示了这个问题。请注意，这是一个不应该做的例子。
- en: Chapter 6 - Script 2
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章 - 脚本2
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first thing you will notice is that this script will run until it is either
    manually terminated with *Ctrl* + *C* or the `kill` command (or when the machine
    goes down for whatever reason). It is common for automated scripts to just run
    forever.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到的第一件事是，这个脚本会一直运行，直到它被手动终止，或者使用`kill`命令终止（或者机器因为任何原因而关闭）。自动化脚本通常会一直运行。
- en: 'The `date` command, as run without any parameters, returns something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`date`命令在没有任何参数的情况下返回类似这样的东西：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So now all we have to do is use `grep` to match that time. Unfortunately, there
    is a very subtle problem here. It has been verified that it is possible for this
    to miss from time to time. For example, if the time has just changed to 3:00 am
    and the program is now in the sleep it might already be 3:01 when it wakes up.
    In my early days in computing I had seen code like this all the time in my jobs
    and never gave it a single thought. When some important backups were missed one
    day my team was asked to figure out what was going on and we discovered this issue.
    A quick fix for this would be to change the seconds to 59, however, a better way
    is to use cron which will be shown later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要使用`grep`来匹配那个时间。不幸的是，这里有一个非常微妙的问题。已经验证可能会偶尔漏掉。例如，如果时间刚刚变成凌晨3点，程序现在在休眠中，当它醒来时可能已经是3:01了。在我早期的计算机工作中，我经常看到这样的代码，从来没有想过。当有一天重要的备份被错过时，我的团队被要求找出问题所在，我们发现了这个问题。一个快速的解决方法是将秒数改为59，但更好的方法是使用cron，这将在本章后面展示。
- en: Notice the `-q` option to `grep`, this simply tells it to suppress any output.
    Feel free to take this out if you want, especially when first writing the script.
    Also notice that `grep` returns `0` when a match is found, non-zero otherwise.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`grep`的`-q`选项，这只是告诉它抑制任何输出。如果你愿意，可以在编写脚本时去掉这个选项。还要注意，`grep`在找到匹配时返回`0`，否则返回非零值。
- en: 'With all this said let''s look at some simple automated scripts. I have been
    running the following on my Linux systems since 1996:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，让我们来看一些简单的自动化脚本。我从1996年开始在我的Linux系统上运行以下脚本：
- en: Chapter 6 - Script 3
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章 - 脚本3
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And the output on my system:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在我的系统上的输出：
- en: '![Chapter 6 - Script 3](img/B07040_06_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![第6章 - 脚本3](img/B07040_06_01.jpg)'
- en: I ran it just three times, however, it would go forever. Before running this
    on your system let's talk about that `PROVIDER` environment variable. I have several
    scripts on my system that deal with the Internet and I found myself constantly
    changing providers. It didn't take too long to realize that this was a great time
    to use an env var, hence `PROVIDER`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我只运行了三次，但它可以一直运行。在你的系统上运行之前，让我们谈谈`PROVIDER`环境变量。我的系统上有几个处理互联网的脚本，我发现自己不断地更改提供者。很快我意识到这是一个很好的时机来使用一个环境变量，因此是`PROVIDER`。
- en: 'This is in my `/root/.bashrc and /home/guest1/.bashrc` files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在我的`/root/.bashrc`和`/home/guest1/.bashrc`文件中的：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Substitute yours as needed. Notice too that when a failure occurs it is being
    written to the screen and to a file. Since the `>>` append operator is being used
    the file might eventually get rather large so plan accordingly if your connection
    is not very stable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要替换你自己的。还要注意，当发生故障时，它会被写入屏幕和文件中。由于使用了`>>`追加操作符，文件可能最终会变得相当大，所以如果你的连接不太稳定，要做好相应的计划。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be careful they you do not ping or otherwise access a company site too many
    times in a short time frame. This could be detected and your access might be denied.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 小心，不要在短时间内多次ping或以其他方式访问公司网站。这可能会被检测到，你的访问可能会被拒绝。
- en: 'Here is a script that detects when a user has either logged on or off your
    system:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个脚本，用于检测用户何时登录或退出系统：
- en: Chapter 6 - Script 4
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章 - 脚本4
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s the output (adjusted for length):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出（根据长度调整）：
- en: '![Chapter 6 - Script 4](img/B07040_06_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![第6章 - 脚本4](img/B07040_06_02.jpg)'
- en: This script checks the output from the `who` command to see if it has changed
    since the last run. If so it takes the appropriate action. If you have a `beep`
    command or equivalent on your system this is a good place to use it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本检查 `who` 命令的输出，看看自上次运行以来是否有变化。如果有变化，它会采取适当的行动。如果你的系统上有 `beep` 命令或等效命令，这是一个很好的使用场景。
- en: 'Take a look at this statement:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下这个陈述：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This needs some clarification as we have not covered it yet. Those back-tick
    characters mean to run the command(s) inside and put the result into the variable.
    In this case, the `who` command is piped into the `wc -l` command to count the
    number of lines. This value is then put into the `currusers` variable. If this
    sounds a bit complicated don't worry, it will be covered in greater detail in
    the next chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一些澄清，因为我们还没有涵盖它。那些反引号字符表示在其中运行命令，并将结果放入变量中。在这种情况下，`who` 命令被管道传递到 `wc -l`
    命令中以计算行数。然后将这个值放入 `currusers` 变量中。如果这听起来有点复杂，不用担心，下一章将更详细地介绍。
- en: The remainder of the script should already be clear as we have covered this
    before. If you decide to run something like this on your system just remember
    that it will trigger every time a new terminal is opened.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的其余部分应该已经很清楚了，因为我们之前已经涵盖过这部分。如果你决定在你的系统上运行类似的东西，只需记住，它将在每次打开新终端时触发。
- en: Cron
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cron
- en: Okay, now for some real fun. If you have been using Linux for even just a short
    amount of time you are probably already aware of cron. This is a daemon, or background
    process, that executes commands at specific times.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在来玩点真正的东西。即使你只是短时间使用 Linux，你可能已经意识到了 cron。这是一个守护进程，或者说是后台进程，它在特定的时间执行命令。
- en: Cron reads a file called `crontab` once a minute to determine if a command needs
    to be run.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Cron 每分钟读取一个名为 `crontab` 的文件，以确定是否需要运行命令。
- en: For the examples in this chapter we will focus on the `crontab` for a guest
    account only (not for root).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，我们将只关注访客账户的 `crontab`（而不是 root 的）。
- en: 'Using my `guest1` account here is what it would look like the first time it
    is run. It would be a good idea to follow along on your system under a guest account:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我的 `guest1` 账户，第一次运行时会是这个样子。在你的系统上以访客账户跟着做可能是个好主意：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That makes sense as we have not created a `crontab` file for `guest1` yet. It
    is not meant to be edited directly and so the `crontab -e` command is used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有道理的，因为我们还没有为 `guest1` 创建 `crontab` 文件。它不是用来直接编辑的，所以使用 `crontab -e` 命令。
- en: Run `crontab -e` under a guest account on your system now.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在你的系统上以访客账户运行 `crontab -e`。
- en: 'Here is a screenshot of how it appears on my system when using vi:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在使用 vi 时在我的系统上的样子的屏幕截图：
- en: '![Cron](img/B07040_06_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Cron](img/B07040_06_03.jpg)'
- en: 'As you can see the `crontab` command creates a temporary file. It is unfortunate
    that this file comes up empty as they should have provided a template. Let''s
    add one now. Copy and paste the following text into the file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`crontab` 命令创建了一个临时文件。不幸的是，这个文件是空的，因为他们应该提供一个模板。现在让我们添加一个。将以下文本复制并粘贴到文件中：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Substitute `guest1` for your user name. This now gives us an idea of what goes
    where.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `guest1` 替换为你的用户名。现在我们知道了应该放在哪里。
- en: 'To this file add the following line:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中添加以下行：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `*` means to match everything in the field. So in essence this line will
    fire once a minute.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` 表示匹配字段中的所有内容。因此，这行实际上每分钟触发一次。'
- en: We are using the redirection operator to write the output from the `echo` command
    to another terminal. Substitute yours as appropriate.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用重定向运算符将 `echo` 命令的输出写入另一个终端。根据需要替换你自己的。
- en: 'Try the above on your system. Remember you must save the file first, and you
    should see this output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上尝试上述操作。记住，你必须先保存文件，然后你应该看到这个输出：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This means the addition was successful. Now wait for the next minute to come
    around. You should see the current date show up in the other terminal.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着添加成功了。现在等待下一分钟到来。你应该在另一个终端看到当前日期显示出来。
- en: 'We can now see the basics of cron. Here are a few quick pointers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到 cron 的基础知识。以下是一些快速提示：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is just a very small subset of how the date and times can be set in cron.
    For more information consult the `man` pages for cron and `crontab`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是 cron 中日期和时间设置的一个非常小的子集。要了解更多信息，请参考 cron 和 `crontab` 的 `man` 页面。
- en: 'One thing that needs to be mentioned is the `PATH` for a user''s cron. It does
    not source the user''s `.bashrc` file. You can verify this by adding the following
    line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的一件事是用户的 cron 的 `PATH`。它不会源自用户的 `.bashrc` 文件。你可以通过添加以下行来验证这一点：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On my CentOS 6.8 system it shows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的 CentOS 6.8 系统上显示为：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To get around this problem you can source your `.bashrc` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你可以源自你的 `.bashrc` 文件：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This should now show the real path. The `EDITOR` env var was mentioned in [Chapter
    2](ch02.html "Chapter 2. Working with Variables"), *Working with Variables*. If
    you want `crontab` to use a different text editor you can set `EDITOR` to the
    path/name of the one you want.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该显示真实路径。`EDITOR` 环境变量在[第2章](ch02.html "第2章。变量处理")中提到，*变量处理*。如果你想让 `crontab`
    使用不同的文本编辑器，你可以将 `EDITOR` 设置为你想要的路径/名称。
- en: 'For example, on my system I have this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我的系统上，我有这个：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So when I run `crontab -e` I get this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行 `crontab -e` 时，我得到这个：
- en: '![Cron](img/B07040_06_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Cron](img/B07040_06_04.jpg)'
- en: Another thing that should be mentioned is if you make a mistake when using `crontab`
    in some cases it will tell you when you attempt to save the file. But it cannot
    check everything so be careful. Also, if a command gets an error `crontab` will
    use the mail system to notify the user. So, with this in mind you may need to
    run the `mail` command from time to time when using cron.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事需要提到的是，如果在使用 `crontab` 时出现错误，有些情况下它会在你尝试保存文件时告诉你。但它无法检查所有内容，所以要小心。此外，如果一个命令出现错误，`crontab`
    将使用邮件系统通知用户。因此，记住这一点，当使用 cron 时，你可能需要不时地运行 `mail` 命令。
- en: Now that we have looked at the basics let's create a backup script that uses
    the `zip` command. If you are not familiar with `zip` don't worry, this will get
    you up to speed quickly. On a Linux system most people just use the `tar` command,
    however, if you know how `zip` works you can share files with Windows users more
    easily.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了基础知识，让我们创建一个使用`zip`命令的备份脚本。如果你不熟悉`zip`，不用担心，这会让你迅速掌握。在Linux系统上，大多数人只使用`tar`命令，然而，如果你知道`zip`的工作原理，你可以更容易地与Windows用户共享文件。
- en: 'In a directory under a guest account run these commands on your system. As
    usual I used `/home/guest1/LinuxScriptingBook`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个访客账户的目录下，在你的系统上运行这些命令。像往常一样，我使用了`/home/guest1/LinuxScriptingBook`：
- en: 'Make a `work` directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`work`目录：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change to it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到它：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create some temporary files, and/or copy a few existing files to this directory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一些临时文件，和/或将一些现有文件复制到这个目录：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Get a listing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个列表：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Zip them up:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 把它们压缩起来：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Get another listing:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再获取一个列表：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There is now file `work1.zip` in that directory. The syntax to create a `zip`
    file is:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在那个目录中有一个名为`work1.zip`的文件。创建`zip`文件的语法是：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To unzip it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要解压缩它：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To view (or list) the contents of a `zip` file without extracting it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看（或列出）`zip`文件的内容而不解压缩它：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is also a good way to ensure that the `.zip` file was created properly,
    because unzip will report an error if it cannot read the file. Note that the `zip`
    command not only creates a `.zip` file but it also compresses the data. This makes
    for smaller backup files.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '这也是确保`.zip`文件正确创建的好方法，因为如果无法读取文件，解压缩会报错。请注意，`zip`命令不仅创建了一个`.zip`文件，还压缩了数据。这样可以生成更小的备份文件。 '
- en: 'Here''s a short script that uses `zip` to back up some files:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用`zip`备份一些文件的简短脚本：
- en: Chapter 6 - Script 5
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章 - 脚本5
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And the output on my system:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上的输出：
- en: '![Chapter 6 - Script 5](img/B07040_06_05.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![第6章 - 脚本5](img/B07040_06_05.jpg)'
- en: This is a really simple script, however it shows the basics of using the `zip`
    command to backup some files.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的脚本，但它展示了使用`zip`命令备份一些文件的基础知识。
- en: 'Suppose we wanted to run this every day at midnight. Assuming `script5` was
    located under `/tmp`, the `crontab` entry would be the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想每天在午夜运行这个命令。假设`script5`位于`/tmp`下，`crontab`的条目将如下：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this case we did not have to source the `/home/guest1/.bashrc` file. Also
    notice that any errors get sent to the User's mail account. The zip command can
    do a whole lot more than just this, for example it can recurse into directories.
    For more information consult the man pages.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不需要源`/home/guest1/.bashrc`文件。还要注意，任何错误都会发送到用户的邮件账户。`zip`命令不仅可以做到这一点，例如它可以递归到目录中。要了解更多信息，请参考man手册。
- en: 'Now let''s talk about the Linux `tar` command. It is used more frequently than
    the `zip` command and is better at getting all files, even hidden ones. Referring
    back to the `/tmp/work directory`, here is how you would use `tar` to back it
    up. It is assumed the files are still there from the previous script:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈Linux的`tar`命令。它比`zip`命令更常用，更擅长获取所有文件，甚至是隐藏的文件。回到`/tmp/work`目录，这是你如何使用`tar`来备份它的。假设文件仍然存在于上一个脚本中：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There is now file `work1.gz` under the `/tmp` directory. It is a compressed
    archive of the contents of all the files under `/tmp/work`, including the `.zip`
    file we created earlier.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`/tmp`目录下有一个名为`work1.gz`的文件。它是`/tmp/work`目录下所有文件的压缩存档，包括我们之前创建的`.zip`文件。
- en: 'The syntax for tar is a little cryptic at first but you will get used to it.
    Some of the features available in tar are:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: tar的语法一开始可能有点晦涩，但你会习惯的。tar中可用的一些功能包括：
- en: '| Parameter | Feature |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 特性 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `c` | create an archive |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 创建一个归档 |'
- en: '| `x` | extract an archive |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `x` | 提取一个归档 |'
- en: '| `v` | use the verbose option |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `v` | 使用详细选项 |'
- en: '| `z` | use gunzip style compression (.gz) |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `z` | 使用gunzip风格的压缩（.gz） |'
- en: '| `f` | the filename to create/extract |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `f` | 要创建/提取的文件名 |'
- en: Note that if you do not include the `z` option the file will not be compressed.
    By convention the file extension would then just be tar. Note that the user controls
    the actual name of the file, not the `tar` command.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果不包括`z`选项，文件将不会被压缩。按照惯例，文件扩展名将只是tar。请注意，用户控制文件的实际名称，而不是`tar`命令。
- en: 'Okay so now we have a compressed `tar-gz file` (or archive). Here is how to
    un-compress and extract the files. We will do this under `/home/guest1`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们有一个压缩的`tar-gz文件`（或存档）。这是如何解压缩和提取文件的方法。我们将在`/home/guest1`下进行操作：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using tar to backup a system is really convenient. It''s also a great way to
    configure a new machine with your personal files. For example, I routinely back
    up the following directories on my primary system:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用tar备份系统真的很方便。这也是配置新机器使用你的个人文件的好方法。例如，我经常备份主系统上的以下目录：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: These files are then auto-copied to an external USB drive. Remember that tar
    automatically recurses into directories and also gets every file, including hidden
    ones. Tar also has many other options that control how the archive is created.
    One of the most common options is to exclude certain directories.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件然后自动复制到外部USB驱动器。请记住，tar会自动递归到目录中，并获取每个文件，包括隐藏的文件。Tar还有许多其他选项，可以控制如何创建存档。最常见的选项之一是排除某些目录。
- en: For example, when backing up `/home/guest1` there is really no reason to include
    the `.cache`, `Cache`, `.thumbnails`, and so on directories.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当备份`/home/guest1`时，真的没有理由包括`.cache`、`Cache`、`.thumbnails`等目录。
- en: The option to exclude directories is `--exclude=<directory name>` and that is
    shown in the next script.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 排除目录的选项是`--exclude=<目录名>`，在下一个脚本中显示。
- en: 'Here are the backup programs that I use on my primary Linux system. It is two
    scripts, one to schedule the backup and one to actually perform the work. I mainly
    did this so that I could make changes to the actual backup script without turning
    off the scheduler script. The first thing that needs to be set up is the `crontab`
    entry. Here is what it looks like on my system:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我在主要Linux系统上使用的备份程序。这是两个脚本，一个用于安排备份，另一个用于实际执行工作。我主要是这样做的，以便我可以对实际备份脚本进行更改而不关闭调度程序脚本。需要设置的第一件事是`crontab`条目。这是我系统上的样子：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will create the file `/tmp/backup-cron.txt` at approximately 3 am every
    day.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在每天凌晨3点左右创建文件`/tmp/backup-cron.txt`。
- en: 'Note that the following scripts must be run as root:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以下脚本必须以root身份运行：
- en: Chapter 6 - Script 6
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章-脚本6
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There''s a lot of information here so we will go through it line by line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多信息，所以我们将逐行进行解释：
- en: The script first sets up the variables, clears the screen, and displays the
    name of the script.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本首先设置变量，清除屏幕，并显示脚本的名称。
- en: The `DR` variable is assigned to my USB external drive (`wd1`) which is a symbolic
    link.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DR`变量分配给我的USB外部驱动器（`wd1`），它是一个符号链接。'
- en: A check is then performed using the `file` command to ensure that `/wd1` has
    been mounted. If it has not, the `file` command will return broken symbolic link,
    `grep` will trigger on this, and the script will abort.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`file`命令执行检查，以确保`/wd1`已挂载。如果没有，`file`命令将返回损坏的符号链接，`grep`将触发此操作，脚本将中止。
- en: If the drive is mounted then the loop is entered. The existence of the file
    is checked every minute to see if it is time to begin the backup.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果驱动器已挂载，则进入循环。每分钟检查文件的存在以查看是否是开始备份的时间。
- en: When the file is found the `backup1` script (see next) is run. The output from
    it is sent to both the screen and the file using the `tee` command.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到文件后，将运行`backup1`脚本（见下文）。它的输出将使用`tee`命令发送到屏幕和文件。
- en: 'The date format specifier `''+%Y%m%d''` shows the date in this format: YYYYMMDD'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期格式说明符`'+%Y%m%d'`以YYYYMMDD格式显示日期
- en: I check the files in the `/data/mainlogs` directory from time to time to make
    sure my backups are being created correctly with no errors.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我不时检查`/data/mainlogs`目录中的文件，以确保我的备份正确创建且没有错误。
- en: The following script is used to backup my system. The logic here is the current
    day backups are stored on the hard drive in the `$TDIR` directory. They are also
    copied to a numbered directory on the external drive. These go into directories
    numbered 1 through 7\. When the last one is reached it starts back at 1 again.
    This way there are always 7 days of backups available on the external drive.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本用于备份我的系统。这里的逻辑是当前的每日备份存储在`$TDIR`目录中的硬盘上。它们也被复制到外部驱动器上的编号目录中。这些目录从1到7编号。当达到最后一个时，它会重新从1开始。这样，外部驱动器上始终有7天的备份可用。
- en: 'This script must also be run as root:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本也必须以root身份运行：
- en: Chapter 6 - Script 7
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章-脚本7
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is a bit more complicated than the previous scripts so let''s go through
    it line by line:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这比以前的脚本要复杂一些，所以让我们逐行进行解释：
- en: The `RUNDIR` variable holds the starting directory for the scripts.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUNDIR`变量保存脚本的起始目录。'
- en: The `DR` variable points to the external backup drive.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DR`变量指向外部备份驱动器。'
- en: The drive is checked to insure it is mounted.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查驱动器以确保它已挂载。
- en: The current date is appended to the `datelog.txt` file.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前日期被附加到`datelog.txt`文件。
- en: The `TDIR` variable is the target directory for the backups.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TDIR`变量是备份的目标目录。'
- en: A `cd` is performed to that directory and the return code is checked. On error
    the script exits with a `250`.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行`cd`到该目录并检查返回代码。出现错误时，脚本将以`250`退出。
- en: The backups from the previous day are deleted.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除前一天的备份。
- en: It now goes back to the `/` directory to perform the tar backups.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它返回到`/`目录执行tar备份。
- en: Notice that several directories are excluded from the `guest1` directory.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`guest1`目录中排除了几个目录。
- en: The `cd $RUNDIR` puts it back into the starting directory.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd $RUNDIR`将其放回到起始目录。'
- en: The `T=`filenum1`` gets the value from that file and puts it into the `T` variable.
    This is a counter for which directory to use next on the external drive.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T=`filenum1``从该文件获取值并将其放入`T`变量中。这是用于在外部驱动器上下一个目录的计数器。'
- en: '`BACKDIR` is set to the old backups and then they are removed.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BACKDIR`设置为旧备份，然后它们被删除。'
- en: Control returns again to the starting directory, and the current backups are
    copied to the appropriate directory on the external drive.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制再次返回到起始目录，并将当前备份复制到外部驱动器上的适当目录。
- en: The version of the program is displayed again so that it can be easily found
    on a cluttered screen.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序的版本再次显示，以便在杂乱的屏幕上轻松找到。
- en: Control goes to the backup directory, the `pwd` displays the name, and then
    the contents of the directory are displayed.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制转到备份目录，`pwd`显示名称，然后显示目录的内容。
- en: The `T` variable is incremented by 1\. If it is greater than 7 it is set back
    to 1.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T`变量递增1。如果大于7，则设置回1。'
- en: And finally the updated `T` variable is written back to the `filenum1` file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新后的`T`变量被写回`filenum1`文件。
- en: This script should serve as a good starting point for whatever backup process
    you want to develop. Note that the `scp` command can be used to copy files directly
    to another computer without user intervention. This will be covered in [Chapter
    10](ch10.html "Chapter 10. Scripting Best Practices"), *Scripting Best Practices*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本应该作为您想要开发的任何备份过程的良好起点。请注意，`scp`命令可用于在没有用户干预的情况下直接将文件复制到另一台计算机。这将在[第10章](ch10.html
    "第10章。脚本最佳实践")中介绍，*脚本最佳实践*。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We described how to create a script to automate a task. The proper way to use
    cron to run a script automatically at a specific time was covered. The archive
    commands `zip` and `tar` were discussed to show how to perform compressed backups.
    A full scheduler and backup script were also included and discussed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述了如何创建一个脚本来自动化一个任务。我们讨论了如何使用cron在特定时间自动运行脚本的正确方法。我们讨论了存档命令`zip`和`tar`，以展示如何执行压缩备份。我们还包括并讨论了完整的调度程序和备份脚本。
- en: In the next chapter we will show how to read and write files in a script.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示如何在脚本中读写文件。
