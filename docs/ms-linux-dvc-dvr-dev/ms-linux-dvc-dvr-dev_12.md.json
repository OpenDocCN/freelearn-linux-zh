["```\n$ cat /sys/devices/system/cpu/cpuidle/current_governor_ro menu\n```", "```\n$ ls /sys/devices/system/cpu/cpu0/cpuidle/\nstate0 state1 state2 state3 state4 state5 state6 state7 state8\n$ ls /sys/devices/system/cpu/cpu0/cpuidle/state0/\nabove below desc disable latency name power residency time usage\n```", "```\n# echo 0 > /sys/devices/system/cpu/cpu2/online\n```", "```\n# grep processor /proc/cpuinfo\nprocessor\t: 0\nprocessor\t: 1\nprocessor\t: 3\nprocessor\t: 4\nprocessor\t: 5\nprocessor\t: 6\nprocessor\t: 7\n```", "```\n# echo 1 > /sys/devices/system/cpu/cpu2/online\n```", "```\n$ cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\nperformance powersave\n```", "```\n$ cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\npowersave\n```", "```\n$ echo userspace > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n```", "```\n$ cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 800031\n```", "```\n$ cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies\n275000 500000 600000 800031\n```", "```\n$ echo 275000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed\n```", "```\n$ ls /sys/class/thermal/\ncooling_device0\u00a0\u00a0cooling_device4 cooling_device8\u00a0\u00a0thermal_zone3\u00a0\u00a0thermal_zone7\ncooling_device1\u00a0\u00a0cooling_device5 thermal_zone0\u00a0\u00a0\u00a0\u00a0thermal_zone4\ncooling_device2\u00a0\u00a0cooling_device6 thermal_zone1\u00a0\u00a0\u00a0\u00a0thermal_zone5\ncooling_device3\u00a0\u00a0cooling_device7 thermal_zone2\u00a0\u00a0\u00a0\u00a0thermal_zone6\n```", "```\n# cat /sys/power/state\nfreeze mem disk standby\n```", "```\n$ echo freeze > /sys/power/state\n```", "```\n$ echo standby > /sys/power/state\n```", "```\n# echo mem > /sys/power/state\n```", "```\n$ cat /sys/power/mem_sleep\n[s2idle] deep\n```", "```\n/* No value returned means no alarms are set */\n$ cat /sys/class/rtc/rtc0/wakealarm\n/* Set the wakeup alarm for 20s */\n# echo +20 > /sys/class/rtc/rtc0/wakealarm\n/* Now Suspend system to RAM */ # echo mem > /sys/power/state\n```", "```\n$ echo disk > /sys/power/state\n```", "```\n$ cat /sys/power/disk\n[platform] shutdown reboot suspend test_resume\n```", "```\n$ echo reboot > /sys/power/disk \n# echo disk > /sys/power/state\n```", "```\nstruct device {\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0struct device *parent;\n\u00a0\u00a0\u00a0\u00a0struct bus_type *bus;\n\u00a0\u00a0\u00a0\u00a0struct device_driver *driver;\n\u00a0\u00a0\u00a0\u00a0struct dev_pm_info power;\n\u00a0\u00a0\u00a0\u00a0struct dev_pm_domain *pm_domain;\n}\n```", "```\nstruct dev_pm_ops {\n\u00a0\u00a0\u00a0\u00a0int (*prepare)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0void (*complete)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*suspend)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*resume)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*freeze)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*thaw)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*poweroff)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*restore)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0int (*suspend_noirq)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*resume_noirq)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*freeze_noirq)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*thaw_noirq)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*poweroff_noirq)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*restore_noirq)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*runtime_suspend)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*runtime_resume)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*runtime_idle)(struct device *dev);\n};\n```", "```\nstruct dev_pm_ops {\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0int (*runtime_suspend)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*runtime_resume)(struct device *dev);\n\u00a0\u00a0\u00a0\u00a0int (*runtime_idle)(struct device *dev);\n};\n```", "```\n#define SET_RUNTIME_PM_OPS(suspend_fn, resume_fn, idle_fn) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.runtime_suspend = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.runtime_resume = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.runtime_idle = idle_fn,\n```", "```\nstatic const struct dev_pm_ops bh1780_dev_pm_ops = {\n\u00a0\u00a0\u00a0\u00a0SET_SYSTEM_SLEEP_PM_OPS(pm_runtime_force_suspend,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pm_runtime_force_resume)\n\u00a0\u00a0\u00a0\u00a0SET_RUNTIME_PM_OPS(bh1780_runtime_suspend,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bh1780_runtime_resume, NULL)\n};\n[...]\nstatic struct i2c_driver bh1780_driver = {\n\u00a0\u00a0\u00a0\u00a0.probe = bh1780_probe,\n\u00a0\u00a0\u00a0\u00a0.remove = bh1780_remove,\n\u00a0\u00a0\u00a0\u00a0.id_table = bh1780_id,\n\u00a0\u00a0\u00a0\u00a0.driver = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.name = \u201cbh1780\u201d,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pm = &bh1780_dev_pm_ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.of_match_table = of_match_ptr(of_bh1780_match),\n\u00a0\u00a0\u00a0\u00a0},\n};\nmodule_i2c_driver(bh1780_driver);\n```", "```\nstatic int bh1780_probe(struct i2c_client *client,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct i2c_device_id *id)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* Power up the device */ [...]\n\u00a0\u00a0\u00a0\u00a0pm_runtime_get_noresume(&client->dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_set_active(&client->dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_enable(&client->dev);\n\u00a0\u00a0\u00a0\u00a0ret = bh1780_read(bh1780, BH1780_REG_PARTID);\n\u00a0\u00a0\u00a0\u00a0dev_info(&client->dev, \u201cAmbient Light Sensor, Rev : %lu\\n\u201d,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(ret & BH1780_REVMASK));\n\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0* As the device takes 250 ms to even come up with a fresh\n\u00a0\u00a0\u00a0\u00a0\u00a0* measurement after power-on, do not shut it down \u00a0\u00a0\u00a0\u00a0\u00a0* unnecessarily.\n\u00a0\u00a0\u00a0\u00a0\u00a0* Set autosuspend to five seconds.\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0pm_runtime_set_autosuspend_delay(&client->dev, 5000);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_use_autosuspend(&client->dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_put(&client->dev);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0ret = iio_device_register(indio_dev);\n\u00a0\u00a0\u00a0\u00a0if (ret)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto out_disable_pm; return 0;\nout_disable_pm:\n\u00a0\u00a0\u00a0\u00a0pm_runtime_put_noidle(&client->dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_disable(&client->dev); return ret;\n}\n```", "```\nstatic int bh1780_read_raw(struct iio_dev *indio_dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct iio_chan_spec const *chan,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int *val, int *val2, long mask)\n{\n\u00a0\u00a0\u00a0\u00a0struct bh1780_data *bh1780 = iio_priv(indio_dev);\n\u00a0\u00a0\u00a0\u00a0int value;\n\u00a0\u00a0\u00a0\u00a0switch (mask) {\n\u00a0\u00a0\u00a0\u00a0case IIO_CHAN_INFO_RAW:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch (chan->type) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case IIO_LIGHT:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pm_runtime_get_sync(&bh1780->client->dev);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = bh1780_read_word(bh1780, BH1780_REG_DLOW);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value < 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return value;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pm_runtime_mark_last_busy(&bh1780->client->dev); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pm_runtime_put_autosuspend(&bh1780->client->dev);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*val = value;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return IIO_VAL_INT;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -EINVAL;\n\u00a0\u00a0\u00a0\u00a0case IIO_CHAN_INFO_INT_TIME:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*val = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*val2 = BH1780_INTERVAL * 1000;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return IIO_VAL_INT_PLUS_MICRO;\n\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -EINVAL;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```\nstatic int bh1780_remove(struct i2c_client *client)\n{\n\u00a0\u00a0\u00a0\u00a0int ret;\n\u00a0\u00a0\u00a0\u00a0struct iio_dev *indio_dev = i2c_get_clientdata(client);\n\u00a0\u00a0\u00a0\u00a0struct bh1780_data *bh1780 = iio_priv(indio_dev);\n\u00a0\u00a0\u00a0\u00a0iio_device_unregister(indio_dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_get_sync(&client->dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_put_noidle(&client->dev);\n\u00a0\u00a0\u00a0\u00a0pm_runtime_disable(&client->dev);\n\u00a0\u00a0\u00a0\u00a0ret = bh1780_write(bh1780, BH1780_REG_CONTROL, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BH1780_POFF);\n\u00a0\u00a0\u00a0\u00a0if (ret < 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&client->dev, \u201cfailed to power off\\n\u201d);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\n\u201cprepare \u2014> Suspend \u2014> suspend_late \u2014> suspend_noirq\u201d\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|---------- Wakeup ----------|\n\u201cresume_noirq \u2014> resume_early \u2014> resume -> complete\u201d\n```", "```\n#define SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.suspend = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.resume = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.freeze = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.thaw = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.poweroff = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.restore = resume_fn,\n```", "```\n#define SET_NOIRQ_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.suspend_noirq = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.resume_noirq = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.freeze_noirq = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.thaw_noirq = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.poweroff_noirq = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.restore_noirq = resume_fn,\n```", "```\n#define SET_LATE_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.suspend_late = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.resume_early = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.freeze_late = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.thaw_early = resume_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.poweroff_late = suspend_fn, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.restore_early = resume_fn,\n```", "```\n#define SIMPLE_DEV_PM_OPS(name, suspend_fn, resume_fn) \\\nconst struct dev_pm_ops name = { \\\n\u00a0\u00a0\u00a0\u00a0SET_SYSTEM_SLEEP_PM_OPS(suspend_fn, resume_fn) \\\n}\n```", "```\nstruct wakeup_source {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0struct list_head entry;\n\u00a0\u00a0\u00a0\u00a0spinlock_t lock;\n\u00a0\u00a0\u00a0\u00a0struct wake_irq *wakeirq;\n\u00a0\u00a0\u00a0\u00a0struct timer_list timer;\n\u00a0\u00a0\u00a0\u00a0unsigned long timer_expires;\n\u00a0\u00a0\u00a0\u00a0ktime_t total_time;\n\u00a0\u00a0\u00a0\u00a0ktime_t max_time;\n\u00a0\u00a0\u00a0\u00a0ktime_t last_time;\n\u00a0\u00a0\u00a0\u00a0ktime_t start_prevent_time;\n\u00a0\u00a0\u00a0\u00a0ktime_t prevent_sleep_time;\n\u00a0\u00a0\u00a0\u00a0unsigned long event_count;\n\u00a0\u00a0\u00a0\u00a0unsigned long active_count;\n\u00a0\u00a0\u00a0\u00a0unsigned long relax_count;\n\u00a0\u00a0\u00a0\u00a0unsigned long expire_count;\n\u00a0\u00a0\u00a0unsigned long wakeup_count;\n\u00a0\u00a0\u00a0\u00a0bool active:1;\n\u00a0\u00a0\u00a0\u00a0bool autosleep_enabled:1;\n};\n```", "```\nstatic int imx_snvs_pwrkey_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0error = devm_request_irq(&pdev->dev, pdata->irq,\n\u00a0\u00a0\u00a0\u00a0imx_snvs_pwrkey_interrupt, 0, pdev->name, pdev);\n\u00a0\u00a0\u00a0\u00a0pdata->wakeup = of_property_read_bool(np, \u201cwakeup-source\u201d); \n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0device_init_wakeup(&pdev->dev, pdata->wakeup);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\nstatic int\n\u00a0\u00a0\u00a0\u00a0maybe_unused imx_snvs_pwrkey_suspend(struct device *dev)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0if (device_may_wakeup(&pdev->dev))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enable_irq_wake(pdata->irq);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\nstatic int maybe_unused imx_snvs_pwrkey_resume(struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device *dev)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0if (device_may_wakeup(&pdev->dev))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0disable_irq_wake(pdata->irq);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstatic SIMPLE_DEV_PM_OPS(imx_snvs_pwrkey_pm_ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imx_snvs_pwrkey_suspend,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imx_snvs_pwrkey_resume);\nstatic struct platform_driver imx_snvs_pwrkey_driver = {\n\u00a0\u00a0\u00a0\u00a0.driver = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.name = \u201csnvs_pwrkey\u201d,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pm\u00a0\u00a0\u00a0= &imx_snvs_pwrkey_pm_ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.of_match_table = imx_snvs_pwrkey_ids,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0.probe = imx_snvs_pwrkey_probe,\n};\n```", "```\nstatic irqreturn_t imx_snvs_pwrkey_interrupt(int irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *dev_id)\n{\n\u00a0\u00a0\u00a0\u00a0struct platform_device *pdev = dev_id;\n\u00a0\u00a0\u00a0\u00a0struct pwrkey_drv_data *pdata = platform_get_drvdata(pdev);\n\u00a0\u00a0\u00a0\u00a0pm_wakeup_event(pdata->input->dev.parent, 0);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0return IRQ_HANDLED;\n}\n```", "```\nvoid pm_wakeup_event(struct device *dev, unsigned int msec)\n```", "```\n# cat /sys/kernel/debug/wakeup_sources\n```", "```\n#ls /sys/devices/.../power/wake*\nwakeup wakeup_active_count\u00a0\u00a0wakeup_last_time_ms autosuspend_delay_ms wakeup_abort_count\u00a0\u00a0wakeup_count\twakeup_max_time_ms wakeup_active wakeup_expire_count\twakeup_total_time_ms\n```"]