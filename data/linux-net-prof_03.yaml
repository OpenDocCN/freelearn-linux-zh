- en: '*Chapter 2*: Basic Linux Network Configuration and Operations – Working with
    Local Interfaces'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：基本Linux网络配置和操作-处理本地接口'
- en: In this chapter, we'll explore how to display and configure local interfaces
    and routes on your Linux host. As much as possible we'll discuss both the new
    and legacy commands for performing these operations. This will include displaying
    and modifying IP addressing, local routes, and other interface parameters. Along
    the way, we'll discuss how IP addresses and subnet addresses are constructed using
    a binary approach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在Linux主机上显示和配置本地接口和路由。尽可能地，我们将讨论执行这些操作的新旧命令。这将包括显示和修改IP地址、本地路由和其他接口参数。在此过程中，我们将讨论如何使用二进制方法构建IP地址和子网地址。
- en: This chapter should give you a solid foundation for topics we cover in the later
    chapters, troubleshooting networking problems, hardening our host, and installing
    secure services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章应该为我们在后续章节中涵盖的主题，如故障排除网络问题、加固我们的主机和安装安全服务，奠定坚实的基础。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Working with your network settings – two sets of commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理网络设置-两组命令
- en: Displaying interface IP information
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示接口IP信息
- en: IPv4 addresses and subnet masks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv4地址和子网掩码
- en: Assigning an IP address to an interface
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为接口分配IP地址
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this and every other chapter, as we discuss various commands, you are encouraged
    to try them on your own computer. The commands in this book are all illustrated
    on Ubuntu Linux, version 20 (a Long-Term Support version), but should for the
    most part be identical or very similar on almost any Linux distribution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和其他每一章中，当我们讨论各种命令时，鼓励您在自己的计算机上尝试。本书中的命令都是在Ubuntu Linux 20版（长期支持版）上演示的，但在几乎任何Linux发行版上，这些命令应该基本相同或非常相似。
- en: Working with your network settings – two sets of commands
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理网络设置-两组命令
- en: For most of the Linux lifespan that people are familiar with, **ifconfig** (**interface
    config**) and related commands have been a mainstay of the Linux operating system,
    so much so that now that it's deprecated in most distributions, it still *rolls
    off the fingers* of many system and network administrators.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数人熟悉的Linux寿命中，**ifconfig**（接口配置）和相关命令一直是Linux操作系统的主要组成部分，以至于现在在大多数发行版中已经被弃用，但仍然是许多系统和网络管理员的常用命令。
- en: Why were these old network commands replaced? There are several reasons. Some
    new hardware (in particular, InfiniBand network adapters) are not well supported
    by the old commands. In addition, as the Linux kernel has changed over the years,
    the operation of the old commands has become less and less consistent over time,
    but pressure around backward compatibility made resolving this difficult.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要替换这些旧的网络命令？有几个原因。一些新硬件（特别是InfiniBand网络适配器）不受旧命令的良好支持。此外，随着Linux内核多年来的变化，旧命令的操作随着时间的推移变得越来越不一致，但是在向后兼容性方面的压力使得解决这个问题变得困难。
- en: The old commands are in the `net-tools` software package, and the new commands
    are in the `iproute2` software package. New administrators should focus on the
    new commands, but familiarity with the old commands is still a good thing to maintain.
    It's still very common to find old computers running Linux, machines that might
    never be updated that still use the old commands. For this reason, we'll cover
    both toolsets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 旧命令在`net-tools`软件包中，新命令在`iproute2`软件包中。新管理员应该专注于新命令，但熟悉旧命令仍然是一件好事。仍然很常见的是发现运行Linux的旧计算机，这些机器可能永远不会更新，仍然使用旧命令。因此，我们将涵盖两种工具集。
- en: The lesson to be learned from this is that in the Linux world, change is constant.
    The old commands are still available but are not installed by default.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教训是，在Linux世界中，变化是不断的。旧命令仍然可用，但不是默认安装的。
- en: 'To install the legacy commands, use this command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装旧命令，请使用此命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You may notice a few things in this `install` command and its output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到`install`命令及其输出中的一些内容：
- en: '`sudo`: The `sudo` command was used – `/etc/sudoers`. By default, in most distributions,
    the `userid` defined during the installation of the operating system is automatically
    included in that file. Additional users or groups can be added using the `visudo`
    command.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo`：使用了`sudo`命令-`/etc/sudoers`。在大多数发行版中，默认情况下，在安装操作系统时定义的`userid`会自动包含在该文件中。可以使用`visudo`命令添加其他用户或组。'
- en: Why was `sudo` used? Installing software or changing network parameters and
    many other system operations require elevated rights – on a multi-user corporate
    system, you wouldn't want people who weren't administrators to be making these
    changes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么使用`sudo`？安装软件或更改网络参数以及许多其他系统操作都需要提升的权限-在多用户企业系统上，您不希望非管理员的人进行这些更改。
- en: So, if `sudo` is so great, why don't we run everything as root? Mainly because
    this is a security issue. Of course, everything will work if you have root privileges.
    However, any mistakes and typos can have disastrous results. Also, if you are
    running with the right privileges and happen to execute some malware, the malware
    will then have those same privileges, which is certainly less than ideal! If anyone
    asks, yes, Linux malware definitely exists and has sadly been with the operating
    system almost from the start.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果`sudo`如此强大，为什么我们不以root身份运行所有操作呢？主要是因为这是一个安全问题。当然，如果您拥有root权限，一切都会正常工作。但是，任何错误和打字错误都可能导致灾难性的结果。此外，如果您以正确的权限运行并且碰巧执行了一些恶意软件，那么恶意软件将具有相同的权限，这显然不理想！如果有人问，是的，Linux恶意软件确实存在，并且从一开始就一直存在于操作系统中。
- en: '`apt`: The `apt` command was used – `apt` is the default installer on Ubuntu,
    Debian, and related distributions, but the package management application will
    vary between distributions. In addition to the `apt` and its equivalents, installing
    from downloaded files is still supported. Debian, Ubuntu, and related distributions
    use `deb` files, while many other distributions use `rpm` files. This is summarized
    as follows:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apt`：使用`apt`命令 - `apt`是Ubuntu、Debian和相关发行版上的默认安装程序，但不同发行版之间的软件包管理应用程序会有所不同。除了`apt`及其等效命令外，仍然支持从下载文件进行安装。Debian、Ubuntu和相关发行版使用`deb`文件，而许多其他发行版使用`rpm`文件。总结如下：'
- en: '![](img/Table_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_1.jpg)'
- en: 'So, now that we have a boatload of new commands to look at, how do we get more
    information on these? The `man` (for manual) command has documentation for most
    commands and operations in Linux. The `man` command for `apt`, for instance, can
    be printed using the `man apt` command; the output is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们有了一大堆新命令要看，我们如何获取更多关于它们的信息呢？`man`（手册）命令在Linux中有大多数命令和操作的文档。例如，`apt`的`man`命令可以使用`man
    apt`命令打印；输出如下：
- en: '![Figure 2.1 – apt man page'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 - apt man页面'
- en: '](img/B16336_02_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_02_001.jpg)'
- en: Figure 2.1 – apt man page
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 - apt man页面
- en: As we introduce new commands in this book, take a minute to review them using
    the `man` command – this book is meant more to guide you in your journey, not
    as a replacement for the actual operating system documentation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中介绍新命令时，花点时间使用`man`命令进行复习 - 本书更多是为了指导你的旅程，而不是替代实际操作系统文档。
- en: Now that we've talked about the modern and legacy tools, and then installed
    the legacy `net-tools` commands, what are these commands, and what do they do?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了现代和传统工具，然后安装了传统的`net-tools`命令，那么这些命令是什么，它们是做什么的呢？
- en: Displaying interface IP information
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示接口IP信息
- en: Displaying interface information is a common task on a Linux workstation. This
    is especially true if your host adapter is set to be automatically configured,
    for instance using **Dynamic Host Configuration Protocol** (**DHCP**) or IPv6
    autoconfiguration.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux工作站上显示接口信息是一个常见的任务。特别是如果你的主机适配器被设置为自动配置，例如使用**动态主机配置协议**（**DHCP**）或IPv6自动配置。
- en: As we discussed, there are two sets of commands to do this. The `ip` command
    allows us to display or configure your host's network parameters on new operating
    systems. On old versions, you will find that the `ifconfig` command is used.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论过的，有两组命令可以做到这一点。`ip`命令允许我们在新操作系统上显示或配置主机的网络参数。在旧版本中，你会发现使用`ifconfig`命令。
- en: 'The `ip` command will allow us to display or update IP addresses, routing information,
    and other networking information. For instance, to display current IP address
    information, use the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`ip`命令将允许我们显示或更新IP地址、路由信息和其他网络信息。例如，要显示当前IP地址信息，请使用以下命令：'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `ip` command supports `ip addr` or even `ip a` will give you the same results:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`ip`命令支持`ip addr`或甚至`ip a`都会给你相同的结果：'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You''ll see that even the simplest of commands will sometimes return much more
    information that you might want. For instance, you''ll see both `-4` or `-6` to
    the command-line options:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，即使是最简单的命令有时也会返回比你想要的更多的信息。例如，你会看到命令行选项中的`-4`或`-6`：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this output, you'll see that the `loopback` interface (a logical, internal
    interface) has an IP address of `127.0.0.1`, and the Ethernet interface `ens33`
    has an IP address of `192.168.122.182`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中，你会看到`loopback`接口（一个逻辑的内部接口）的IP地址是`127.0.0.1`，以及以太网接口`ens33`的IP地址是`192.168.122.182`。
- en: 'Now would be an excellent time to type `man ip` and review the various operations
    that we can do with this command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个绝佳的时机输入`man ip`并复习我们可以使用这个命令做的各种操作：
- en: '![Figure 2.2 – ip man page'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 - ip man页面'
- en: '](img/B16336_02_002.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_02_002.jpg)'
- en: Figure 2.2 – ip man page
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 - ip man页面
- en: The `ifconfig` command has very similar functions to the `ip` command, but as
    we noted, it is seen mostly on old versions of Linux. The legacy commands have
    all grown organically, with features bolted on as needed. This has landed us in
    a state in which as more complex things are being displayed or configured, the
    syntax becomes less and less consistent. The more modern commands were designed
    from the ground up for consistency.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`ifconfig`命令与`ip`命令有非常相似的功能，但正如我们所指出的，它主要出现在旧版本的Linux上。传统命令都是有机地发展起来的，功能都是按需添加的。这导致我们处于一个状态，随着显示或配置更复杂的事物，语法变得越来越不一致。而更现代的命令是从头开始设计的，以保持一致性。'
- en: 'Let''s duplicate our efforts using the legacy command; to display the interface
    IP, just type `ifconfig`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用传统命令来重复我们的努力；要显示接口IP，只需输入`ifconfig`：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, mostly the same information is displayed in a slightly different
    format. If you review the `man` page for both commands, you'll see that the options
    are more consistent in the `imp` command, and there isn't as much IPv6 support
    – for instance, natively you can't select an IPv4 or IPv6 only display.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，基本上是以稍微不同的格式显示相同的信息。如果你查看这两个命令的`man`页面，你会发现`ip`命令的选项更一致，并且没有太多的IPv6支持
    - 例如，原生情况下你无法选择只显示IPv4或IPv6。
- en: Displaying routing information
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示路由信息
- en: 'In the modern network commands, we''ll use the exact same `ip` command to display
    our routing information. And, as you''d expect, the command is `ip route`, which
    can be shortened to anything up to `ip r`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网络命令中，我们将使用完全相同的`ip`命令来显示我们的路由信息。而且，正如你所期望的，命令是`ip route`，可以缩写为`ip r`：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: From this output, we see that we have a *default route* pointing to `192.168.122.1`.
    The default route is just that – if a packet is being sent to a destination that
    isn't in the routing table, the host will send that packet to its default gateway.
    The routing table will always prefer the "most specific" route – the route that
    most closely matches the destination IP. If there is no match, then the most specific
    route goes to the default gateway, which routes to `0.0.0.0 0.0.0.0` (in other
    words, the "if it doesn't match anything else" route). The host assumes that the
    default gateway IP belongs to a router, which will (hopefully) then know where
    to send that packet next.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个输出中，我们看到我们有一个指向`192.168.122.1`的*默认路由*。默认路由就是这样 - 如果一个数据包被发送到不在路由表中的目的地，主机将把该数据包发送到其默认网关。路由表总是会优先选择“最具体”的路由
    - 最接近目的地IP的路由。如果没有匹配，那么最具体的路由就会走向默认网关，它的路由是`0.0.0.0 0.0.0.0`（换句话说，如果它不匹配其他任何东西的路由）。主机假设默认网关IP属于路由器，然后（希望）知道下一步该把该数据包发送到哪里。
- en: We also see a route to `169.254.0.0/16`. This is called a **Link-Local Address**
    as defined in the RFC 3927\. **RFC** stands for **Request for Comment**, which
    serves as part of the informal peer review process that internet standards use
    as they are developed. The list of published RFCs is maintained by the **IETF**
    (**Internet Engineering Task Force**), at https://www.ietf.org/standards/rfcs/.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了到`169.254.0.0/16`的路由。这被称为**链路本地地址**，在RFC 3927中定义。**RFC**代表**请求评论**，它作为互联网标准在开发过程中使用的非正式同行评审的一部分。已发布的RFC列表由**IETF**（**互联网工程任务组**）维护，网址为https://www.ietf.org/standards/rfcs/。
- en: Link-Local Addresses only operate in the current subnet – if a host does not
    have a statically configured IP address, and DHCP does not assign and address,
    it will use the first two octets defined in the RFC (`169.254`), then compute
    the last two octets, semi-randomly assigning them. After a Ping/ARP test (we'll
    discuss ARP in [*Chapter 3*](B16336_03_Final_NM_ePub.xhtml#_idTextAnchor053),
    *Using Linux and Linux Tools for Network Diagnostics*) to ensure that this computed
    address is in fact available, the host is ready to communicate. This address is
    supposed to only communicate with other LLA addresses on the same network segment,
    typically using broadcast and multicast protocols such as ARP, Alljoyn, and so
    on to "find" each other. Just for clarity, these addresses are almost never used
    on real networks, they're the address that gets used if there is absolutely no
    other alternative. And just for confusion, Microsoft calls these addresses something
    different – **Automatic Private Internet Protocol Addressing** (**APIPA**).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 链路本地地址只在当前子网中运行 - 如果主机没有静态配置的IP地址，并且DHCP没有分配地址，它将使用RFC中定义的前两个八位字节（`169.254`），然后计算最后两个八位字节，将它们随机分配。经过Ping/ARP测试（我们将在[*第3章*](B16336_03_Final_NM_ePub.xhtml#_idTextAnchor053)中讨论ARP，*使用Linux和Linux工具进行网络诊断*），以确保这个计算出的地址实际上是可用的，主机就准备好进行通信了。这个地址只能与同一网络段上的其他LLA地址通信，通常使用广播和多播协议，如ARP，Alljoyn等来“找到”彼此。为了澄清，这些地址几乎从不在真实网络中使用，它们是在绝对没有其他选择的情况下使用的地址。为了混淆，微软将这些地址称为不同的东西
    - **自动私有互联网协议地址**（**APIPA**）。
- en: Finally, we see a route to the local subnet, in this case `192.168.122.0/24`.
    This is called a **connected route** (since it's connected to that interface).
    This tells the host that no routing is needed to communicate with other hosts
    in its own subnet.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了到本地子网的路由，这种情况下是`192.168.122.0/24`。这被称为**连接路由**（因为它连接到该接口）。这告诉主机在自己的子网中与其他主机通信时不需要进行路由。
- en: This set of routes is very common in simple networks – a default gateway, a
    local segment, and that's it. In many operating systems you won't see the `169.254.0.0`
    subnet unless the host is actually using a link-local address.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这组路由在简单网络中非常常见 - 默认网关，本地段，就是这样。在许多操作系统中，除非主机实际上使用链路本地地址，否则你不会看到`169.254.0.0`子网。
- en: 'On the legacy side, there are multiple ways to show the current set of routes.
    The typical command is `netstat –rn` for *network status*, show routes, and numeric
    display. However, `route` is a command all to itself (we''ll see why later on
    in this chapter):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统方面，有多种方法可以显示当前的路由集。典型的命令是`netstat -rn`用于*网络状态*，显示路由和数字显示。然而，`route`是一个独立的命令（我们稍后会看到为什么）：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These show the same information, but now we have two additional commands – `netstat`
    and `route`. The legacy set of network tools tends to have a separate, unique
    command for every purpose, and in this case, we're seeing two of them with quite
    a bit of overlap. Knowing all of these commands and keeping their differing syntax
    straight can be a challenge for someone new to Linux. The `ip` set of commands
    makes this much simpler!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些显示了相同的信息，但现在我们有了两个额外的命令 - `netstat`和`route`。传统的网络工具集往往为每个目的都有一个单独的命令，并且在这种情况下，我们看到了其中两个命令有相当大的重叠。对于新手来说，了解所有这些命令并保持它们不同的语法是一项挑战。`ip`命令集使这变得简单得多！
- en: No matter which set of tools you end up using, you now have the basics to establish
    and check IP addressing and routing, which, between them, will get you basic connectivity
    for your host.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您最终使用哪种工具集，现在您都具备了建立和检查IP寻址和路由的基础知识，这将为您的主机提供基本的连接性。
- en: IPv4 addresses and subnet masks
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv4地址和子网掩码
- en: In the previous section, we discussed IP addresses briefly, but let's discuss
    them in a bit more detail. What IPv4 allows you to do is to address each device
    in a *subnet* uniquely by assigning each device an address and a subnet mask.
    For instance, in our example the IPv4 address is `192.168.122.182`. Each *octet*
    in an IPv4 address can range from `0-255`, and the subnet mask is `/24`, which
    is also commonly represented as `255.255.255.0`. This seems complicated until
    we break things down to a binary representation. `255` in binary is `11111111`
    (8 bits), and 3 of those groupings makes 24 bits. So, what our address and mask
    representation is saying is that, when masked, the network portion of the address
    is `192.168.122.0`, and the host portion of the address is `182` and can range
    from `1-254`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们简要讨论了IP地址，但让我们更详细地讨论一下。IPv4允许您通过为每个设备分配一个地址和子网掩码来唯一地寻址*子网*中的每个设备。例如，在我们的示例中，IPv4地址是`192.168.122.182`。IPv4地址中的每个*八位组*的范围可以是`0-255`，子网掩码是`/24`，通常表示为`255.255.255.0`。直到我们将事情分解为二进制表示，这似乎很复杂。`255`的二进制是`11111111`（8位），其中有3个这样的分组组成24位。因此，我们的地址和掩码表示的含义是，当进行掩码处理时，地址的网络部分是`192.168.122.0`，地址的主机部分是`182`，范围是`1-254`。
- en: 'Breaking this down:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 分解如下：
- en: '![](img/Table_2.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_2.jpg)'
- en: 'What if we needed a larger subnet? We can simply slide that mask over a few
    bits to the left. For instance, for a 20 bit subnet mask, we have the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要一个更大的子网怎么办？我们只需将掩码向左移动几位。例如，对于20位子网掩码，我们有以下内容：
- en: '![](img/Table_3.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_3.jpg)'
- en: This makes the third octet of the mask `0b11110000` (note the shorthand `0b`
    for "binary"), which translates to `240` in decimal. This *masks* the third octet
    of the network to `0b01110000` or `112`. This increases the range of addresses
    for our hosts to `0-15` (`0 – 0b1111`) in the third octet, and `0-255` (`0 – 0b11111111`)
    in the fourth, or `3824` (15 x 255 – 1) in total (we'll get to the `-1` in the
    next section).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得掩码的第三个八位组为`0b11110000`（注意简写的`0b`表示“二进制”），在十进制中转换为`240`。这将第三个八位组的网络掩码为`0b01110000`或`112`。这将我们的主机地址范围增加到第三个八位组的`0-15`（`0
    – 0b1111`），第四个八位组的`0-255`（`0 – 0b11111111`），或者总共`3824`（15 x 255 – 1）（我们将在下一节讨论“-1”）。
- en: You can see that keeping a calculator app that does binary to decimal conversions
    is a handy thing for a networking professional! Be sure it does hexadecimal (`base
    16`) as well; we'll dive into that in a few minutes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，保留一个可以进行二进制到十进制转换的计算器应用对于网络专业人员来说是一个方便的事情！确保它也可以进行十六进制（`16进制`）转换；我们将在几分钟内深入探讨这一点。
- en: Now that we've got the knack of working with addresses and subnet masks in decimal
    and especially binary, let's expand on that and explore how it can be used to
    illustrate other addressing concepts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了十进制和特别是二进制中的地址和子网掩码的处理技巧，让我们扩展一下，并探讨如何用它来说明其他寻址概念。
- en: Special-purpose addresses
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定用途地址
- en: There are a few *special purpose* addresses that we'll need to cover to further
    explore how IP addresses work in a local subnet. First of all, if all the host
    *bits* in an address are set to `1`, that is called the **broadcast** address.
    If you send information to the broadcast address, it is sent to and read by all
    network interfaces in the subnet.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些需要涵盖的*特殊用途*地址，以进一步探讨IP地址在本地子网中的工作方式。首先，如果地址中的所有主机*位*都设置为`1`，那就是**广播**地址。如果您向广播地址发送信息，它将发送到子网中的所有网络接口并被所有网络接口读取。
- en: 'So, in our two examples, the broadcast for the `/24` network would be as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的两个例子中，`/24`网络的广播如下：
- en: '![](img/Table_4.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_4.jpg)'
- en: In other words, we have a broadcast address of `192.168.122.255`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们有一个广播地址为`192.168.122.255`。
- en: 'The broadcast for the `/20` network is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`/20`网络的广播如下：'
- en: '![](img/Table_5.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_5.jpg)'
- en: Or, we can convert back to decimal for a broadcast address of `192.168.127.255`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以转换回十进制，得到广播地址为`192.168.127.255`。
- en: 'Moving the border between the network and host portions of the IPv4 address
    brings the concepts of **address class** to mind. When converted to binary, the
    first few bytes define what is called the **classful** subnet mask for that address.
    In most operating systems, if you set the IP address in a GUI, this classful subnet
    mask is what is often filled in by default. These binary-to-subnet mask assignments
    work out to be the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将IPv4地址的网络和主机部分之间的边界移动会让人想起**地址类**的概念。当转换为二进制时，前几个字节定义了该地址的所谓**类别**子网掩码。在大多数操作系统中，如果您在GUI中设置IP地址，通常会默认填入这个类别子网掩码。这些二进制到子网掩码的分配如下：
- en: '![](img/Table_6.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_6.jpg)'
- en: What this defines is the default classful subnet masks for networks. We'll dig
    deeper into this in the next two sections.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了网络的默认类别子网掩码。我们将在接下来的两节中深入探讨这一点。
- en: From all of this, you can see why most administrators use `255.255.255.0` or
    `255.255.0.0`. Any other choice turns into confusion each time you add a new member
    to the team, with the potential for errors in server or workstation configurations.
    Plus, "doing math" every time you need to set or interpret a network address doesn't
    appeal to most people.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从所有这些内容中，您可以看到为什么大多数管理员使用`255.255.255.0`或`255.255.0.0`。任何其他选择都会在每次添加新成员时变得混乱，并可能导致服务器或工作站配置错误。此外，每次需要设置或解释网络地址时都要“做数学”并不吸引大多数人。
- en: 'The second type of special address, which we just touched on, is **multicast**
    addresses. A multicast address is used to include several devices in a conversation.
    For instance, you might use a multicast address to send an identical video stream
    to a number of network-attached displays, or if you were setting up a conference
    call or meeting in a voice/video application. Multicast addresses local to a network
    take the following form:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚触及的第二种特殊地址是**多播**地址。多播地址用于将多个设备包括在一个对话中。例如，您可以使用多播地址将相同的视频流发送到多个网络连接的显示器，或者如果您正在设置语音/视频应用中的电话会议或会议。本地网络的多播地址采用以下形式：
- en: '![](img/Table_7.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_7.jpg)'
- en: 'The last 11 bits (3+8) usually form "well-known addresses" for various multicast
    protocols. Some commonly seen multicast addresses are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的11位（3+8）通常形成各种多播协议的“众所周知的地址”。一些常见的多播地址如下：
- en: '![](img/Table_8.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_8.jpg)'
- en: The full list of well know, registered multicast addresses is maintained by
    the **IANA** (**Internet Assigned Numbers Authority**), at https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xhtml.
    While this may seem comprehensive, vendors will often create their own multicast
    addresses in this address space.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 已知的完整注册的多播地址列表由**IANA**（**互联网编号分配机构**）维护，网址为https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xhtml。虽然这可能看起来很全面，但供应商通常会在这个地址空间中创建自己的多播地址。
- en: This serves as a basic introduction to multicast addressing – it's much more
    complex than this, to the point where entire books are devoted to the design,
    implementation, and theory behind it. What we've covered is enough to get the
    general idea, though enough to get started.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是多播地址的基本介绍——它比这复杂得多，甚至有整本书专门讨论它的设计、实施和理论。我们所讨论的足以让你有一个大致的概念，足以开始。
- en: With broadcast and multicast addresses covered, let's discuss the IP address
    "families" that are most likely used in your environment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在广播和多播地址已经涵盖的情况下，让我们讨论在你的环境中最有可能使用的IP地址“家族”。
- en: Private addresses – RFC 1918
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私有地址——RFC 1918
- en: The other set of special addresses is the RFC 1918 address space. RFC 1918 describes
    a list of IP subnets that are allocated for internal use within an organization.
    These addresses are not valid for use on the public internet, so must be translated
    using **Network Address Translation** (**NAT**) before traffic to or from them
    can be routed over the public internet.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组特殊地址是RFC 1918地址空间。RFC 1918描述了一系列为组织内部使用而分配的IP子网。这些地址不能在公共互联网上使用，因此必须在将流量路由到它们或从它们路由到公共互联网之前使用**网络地址转换**（**NAT**）进行转换。
- en: 'The RFC1918 addresses are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: RFC1918地址如下：
- en: '`10.0.0.0/8` (Class A)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.0/8`（A类）'
- en: '`172.16.0.0` to `172.31.0.0 / 16` (Class B) (this can be summarized as `172.16.0.0/12`)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`172.16.0.0`到`172.31.0.0 / 16`（B类）（这可以总结为`172.16.0.0/12`）'
- en: '`192.168.0.0/16` (Class C)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.0.0/16`（C类）'
- en: These addresses give organizations a large IP space to use internally, all of
    which are guaranteed to not conflict with anything on the public internet.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些地址为组织提供了一个大的IP空间供内部使用，所有这些地址都保证不会与公共互联网上的任何内容发生冲突。
- en: For an interesting exercise, you can use these RFC 1918 subnets to verify the
    default address class, by translating the first octet of each to binary, then
    comparing them to the table in the last section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个有趣的练习，你可以使用这些RFC 1918子网来验证默认地址类，方法是将每个子网的第一个八位转换为二进制，然后将它们与最后一节中的表进行比较。
- en: 'The RFC 1918 specification is fully documented here: https://tools.ietf.org/html/rfc1918.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 1918规范在这里完全记录：https://tools.ietf.org/html/rfc1918。
- en: Now that we've covered off the binary aspects of IP addressing and subnet masks,
    as well as the various special IP address groups, I'm sure that you're tired of
    theory and math and want to get back to playing with the command line of your
    Linux host! Good news, we still need to cover the bits and bytes of addressing
    for IPv6 (IP version 6). Even better news, it will be in an appendix, so that
    we can get you to a keyboard that much sooner!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了IP地址和子网掩码的二进制方面，以及各种特殊的IP地址组，我相信你已经厌倦了理论和数学，想要回到与Linux主机的命令行玩耍！好消息是，我们仍然需要讨论IPv6（IP版本6）的寻址位和字节。更好的消息是，它将在附录中，这样我们就可以让你尽快到键盘上！
- en: Now that we've got a firm grasp on displaying IP parameters and a good understanding
    of IP addressing, let's configure an IP interface for use.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经牢固掌握了显示IP参数并对IP地址有了很好的理解，让我们配置一个IP接口以供使用。
- en: Assigning an IP address to an interface
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为接口分配IP地址
- en: 'Assigning a permanent IPv4 address is something that you will likely need to
    do on almost every server that you build. Luckily, it''s pretty simple to do.
    In the new command set, we''ll use the `nmcli` command (`manual`. We''ll display
    the network connections in `nmcli` format:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 分配永久的IPv4地址是你可能需要在构建的每台服务器上做的事情。幸运的是，这很简单。在新的命令集中，我们将使用`nmcli`命令（`manual`）。我们将以`nmcli`格式显示网络连接：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our connection name is `Wired connection 1`. We don''t need to type this each
    time, though; we can do tab completion on this by typing `Wi` then pressing *Tab*
    to complete the name. Also, keep in mind that `nmcli` will allow shortened command
    clauses, so we can use `mod` for `modify`, `con` for `connection`, and so on.
    Let''s go forward with our sequence of commands (note how the parameters are shortened
    in the last command):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的连接名称是`有线连接1`。不过，我们不需要每次都输入这个，我们可以通过输入`Wi`然后按*Tab*来完成名称的选项。另外，请记住`nmcli`将允许缩短命令子句，所以我们可以使用`mod`代替`modify`，`con`代替`connection`等等。让我们继续我们的命令序列（注意最后一个命令中参数是如何缩短的）：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the legacy approach, all of our changes are done by editing files. And
    just for fun, the filenames and locations will change from distribution to distribution.
    The most common edits and files are shown here.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统方法，我们所有的更改都是通过编辑文件完成的。而且仅仅是为了好玩，文件名和位置会因发行版而异。这里显示了最常见的编辑和文件。
- en: 'To change the DNS servers, edit `/etc/resolv.conf` and change the `nameserver`
    line to reflect the desired server IP:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改DNS服务器，请编辑`/etc/resolv.conf`并更改`nameserver`行以反映所需的服务器IP：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To change the IP address, subnet mask, and so on, edit the `/etc/sysconfig/network-scripts/ifcfg-eth0`
    file and update the values as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改IP地址、子网掩码等，编辑`/etc/sysconfig/network-scripts/ifcfg-eth0`文件，并按以下方式更新值：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If your default gateway is on this interface, you can add this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的默认网关在这个接口上，你可以添加这个：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Again, note that on different distributions, the files to edit may vary, and
    note especially that **this approach is not backward compatible**. On modern Linux
    systems, this approach of editing the base files for network changes mostly no
    longer works.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，在不同的发行版上，要编辑的文件可能会有所不同，特别要注意**这种方法不向后兼容**。在现代Linux系统上，编辑基本文件进行网络更改的方法基本上不再适用。
- en: Now that we know how to assign an IP address to an interface, let's learn how
    to adjust routing on our host.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何为接口分配IP地址，让我们学习如何在主机上调整路由。
- en: Adding a route
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加路由
- en: 'To add a temporary static route, the `ip` command is our go-to again. In this
    example, we tell our host to route to `192.168.122.10` to get to the `10.10.10.0/24`
    network:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加临时静态路由，`ip`命令再次是我们的首选。在这个例子中，我们告诉我们的主机路由到`192.168.122.10`以到达`10.10.10.0/24`网络：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also add the `egress` network interface to use for this by tacking `dev
    <devicename>` on the end of that `ip route add` command.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加`egress`网络接口以在`ip route add`命令的末尾添加`dev <devicename>`。
- en: This just adds a temporary route, though, which will not survive if the host
    is restarted or if the network processes are restarted. You can add a permanent
    static route by using the `nmcli` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是添加了一个临时路由，如果主机重新启动或网络进程重新启动，它将无法保存。您可以使用`nmcli`命令添加永久静态路由。
- en: 'First, we''ll display the network connections in `nmcli` format:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将以`nmcli`格式显示网络连接：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we''ll add the route to `10.10.11.0/24` via `192.168.122.11` to the `Wired
    connection 1` connection using `nmcli`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`nmcli`为`Wired connection 1`连接添加路由到`10.10.11.0/24`通过`192.168.122.11`：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Again, let''s save our `nmcli` changes:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，让我们保存我们的`nmcli`更改：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, looking at our routing table, we see both of our static routes:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查看我们的路由表，我们看到了我们的两个静态路由：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'However, if we reload, we see that our temporary route is now gone, and the
    permanent one is in place:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们重新加载，我们会发现我们的临时路由现在已经消失，永久路由已经生效：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With the basics of adding routes completed, let's take a look at getting that
    same task done on an older Linux host, using the legacy `route` commands.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了添加路由的基础知识后，让我们看看如何在旧的Linux主机上，使用传统的`route`命令完成同样的任务。
- en: Adding a route using legacy approaches
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用传统方法添加路由
- en: 'First, to add a route, use this command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要添加路由，请使用以下命令：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To make this route permanent, things get complicated – permanent routes are
    stored in files, and the filenames and locations will be different depending on
    the distribution, which is why the consistency of the `iproute2/nmcli` commands
    makes things so much easier on modern systems.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这个路由永久生效，事情变得复杂-永久路由存储在文件中，文件名和位置会因发行版而异，这就是为什么`iproute2/nmcli`命令的一致性在现代系统上如此方便。
- en: 'On an older Debian/Ubuntu distribution, a common method is to edit the `/etc/network/interfaces`
    file and add the following line:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧的Debian/Ubuntu发行版上，一个常见的方法是编辑`/etc/network/interfaces`文件并添加以下行：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or, on an older Redhat family distribution, edit the `/etc/sysconfig/network-scripts/route-<device
    name>` file and add the following line:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在旧的Redhat系列发行版上，编辑`/etc/sysconfig/network-scripts/route-<device name>`文件并添加以下行：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Or, to just add the routes as commands, edit the `/etc/rc.local` file – this
    approach will work on just about any Linux system, but is considered to be less
    elegant, mainly because it''s the last place the next administrator will look
    for the setting (since it''s not a proper network settings file). The `rc.local`
    file simply executes on system startup and runs whatever commands are in it. In
    this case, we''ll add our `route add` command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，只需将路由作为命令添加，编辑`/etc/rc.local`文件-这种方法在几乎任何Linux系统上都可以工作，但通常被认为不够优雅，主要是因为它是下一个管理员会查找设置的最后一个地方（因为它不是一个正确的网络设置文件）。`rc.local`文件只会在系统启动时执行，并运行其中的任何命令。在这种情况下，我们将添加我们的`route
    add`命令：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: At this point, we're well on our way to setting up networking on our Linux host.
    We've set the IP address, subnet mask, and routes. Particularly in troubleshooting
    or initial setup, though, it's common to have to disable or enable an interface;
    we'll cover that next.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经在我们的Linux主机上设置了网络。我们已经设置了IP地址、子网掩码和路由。尤其是在故障排除或初始设置时，常常需要禁用或启用接口；我们接下来会涵盖这个内容。
- en: Disabling and enabling an interface
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用和启用接口
- en: 'In the new command "world," we use the – you guessed it `– ip` command. Here,
    we''ll "bounce" the interface, bringing it down then back up again:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的命令“世界”中，我们使用-你猜对了-`ip`命令。在这里，我们将“弹跳”接口，先将其关闭，然后再次打开：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the old command set, use `ifconfig` to disable or enable an interface:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧的命令集中，使用`ifconfig`来禁用或启用接口：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When executing interface commands, always keep in mind that you don't want to
    *cut off the branch that you are sitting on*. If you are connected remotely (using
    `ssh` for instance), if you change `ip` addressing or routes, or disable an interface,
    you can easily lose your connection to the host at that point.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行接口命令时，始终要记住，你不想*砍掉你坐在的树枝*。如果你是远程连接的（例如使用`ssh`），如果你改变了`ip`地址或路由，或者禁用了一个接口，你很容易在那一点上失去与主机的连接。
- en: At this point, we've got most tasks covered that you'll need to configure your
    Linux host in a modern network. A big part of network administration though is
    diagnosing and setting configurations to accommodate special cases, for instance
    – adjusting settings to optimize traffic, where smaller or larger packet sizes
    might be needed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经涵盖了大部分你需要在现代网络中配置你的Linux主机的任务。然而，网络管理的一个重要部分是诊断和设置配置以适应特殊情况，例如-调整设置以优化流量，可能需要较小或较大的数据包大小。
- en: Setting the MTU on an interface
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在接口上设置MTU
- en: 'One operation that is more and more common in modern systems is setting the
    **Message Transfer Unit** (**MTU**). This is the size of the largest **Protocol
    Datagram Unit** (**PDU**, also called a **frame** in most networks) that the interface
    will send or receive. On Ethernet, the default MTU is 1,500 bytes, which works
    out to a maximum packet size of 1,500 bytes. The maximum packet size for a media
    is generally called the **Maximum Segment Size** (**MSS**). For Ethernet, the
    three values are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代系统中越来越常见的一项操作是设置**消息传输单元**（**MTU**）。这是接口将发送或接收的最大**协议数据报单元**（**PDU**，在大多数网络中也称为**帧**）的大小。在以太网上，默认的MTU为1,500字节，这相当于最大数据包大小为1,500字节。媒体的最大数据包大小通常称为**最大段大小**（**MSS**）。对于以太网，这三个值如下：
- en: '![Table 2.1 – Relating frame size, MTU, packet size, and MSS for Ethernet'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![表2.1 - 以太网的帧大小、MTU、数据包大小和MSS的关系'
- en: '](img/Table_10.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_10.jpg)'
- en: Table 2.1 – Relating frame size, MTU, packet size, and MSS for Ethernet
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.1 - 以太网的帧大小、MTU、数据包大小和MSS的关系
- en: Why would we need to change this? 1,500 is a nice compromise for packet size
    in that it's small enough that in the event of an error, that error is quickly
    detected, and the amount of retransmitted data is relatively small. However, in
    data centers especially there are a few exceptions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要改变这个？ 1,500是数据包大小的一个不错的折衷方案，因为它足够小，以至于在出现错误时，错误会被快速检测到，并且需要重新传输的数据量相对较小。然而，特别是在数据中心，有一些例外情况。
- en: 'When dealing with storage traffic, in particular iSCSI, large frame sizes are
    desired so that the packet size can accommodate more data. In these cases, the
    MTU is usually set to somewhere in the range of 9,000 (often called a **jumbo
    packet**). These networks are most often deployed on 1 Gbps, 10 Gbps, or faster
    networks. You''ll also see larger packets used in traffic to accommodate backups
    or virtual machine migration (for instance: VMotion in VMware or Live Migration
    in Hyper-V).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理存储流量，特别是iSCSI时，希望使用较大的帧大小，以便数据包大小可以容纳更多数据。在这些情况下，MTU通常设置在9,000左右（通常称为**巨型数据包**）。这些网络通常部署在1
    Gbps、10 Gbps或更快的网络上。您还会看到更大的数据包用于适应备份或虚拟机迁移（例如：VMware中的VMotion或Hyper-V中的Live Migration）。
- en: At the other end of the spectrum, you'll also often see situations where smaller
    packets are needed. This is particularly important as not all hosts will detect
    this well, and many applications will set the **DF** (**Don't Fragment**) bit
    in their traffic. In that situation, you might see a 1,500-byte packet set with
    DF on a medium that might only support a 1,380-byte packet – in that case, the
    application will simply fail, and often the error messages won't be helpful in
    troubleshooting. Where might you see this? Any link that involves packets being
    encapsulated will usually involve this – tunnels or VPN solutions, for instance.
    These will reduce the frame size (and resulting packet size) by the overhead caused
    by encapsulation, which is usually pretty easy to compute. Satellite links are
    another common situation. They'll often default to 512-byte frames – in those
    situations, the sizes will be published by the service provider.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一端，您也经常会看到需要较小数据包的情况。这是特别重要的，因为并非所有主机都会很好地检测到这一点，许多应用程序会在其流量中设置**DF**（**不分段**）位。在这种情况下，您可能会看到在可能只支持1,380字节数据包的介质上设置了一个1,500字节的数据包
    - 在这种情况下，应用程序将简单地失败，并且错误消息通常不会对故障排除有所帮助。您可能会在哪里看到这种情况？涉及封装数据包的任何链路通常都会涉及到这一点 -
    例如隧道或VPN解决方案。这些将通过封装引起的开销减少帧大小（和结果数据包大小），这通常很容易计算。卫星链路是另一种常见情况。它们通常默认为512字节的帧
    - 在这些情况下，大小将由服务提供商发布。
- en: 'Setting the MTU is as simple as you might think – we''ll use `nmcli` again
    for this. Note in this example that we''re shortening the command-line arguments
    for `nmcli`, and we''re saving the configuration change at the end – the MTU is
    changed immediately after the last command. Let''s set the MTU to `9000` to optimize
    iSCSI traffic:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 设置MTU就像你想的那样简单 - 我们将再次使用`nmcli`。请注意，在此示例中，我们缩短了`nmcli`的命令行参数，并且我们在最后保存了配置更改
    - MTU在最后一个命令之后立即更改。让我们将MTU设置为`9000`以优化iSCSI流量：
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With our MTU set, what else can we do with the `nmcli` command?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了我们的MTU，`nmcli`命令还能做什么？
- en: More on the nmcli command
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有关nmcli命令的更多信息
- en: 'The `nmcli` command can also be called interactively, and changes can be made
    in a real-time interpreter, or shell. To enter this shell for an Ethernet interface,
    use the `nmcli connection edit type ethernet` command. In the shell, the `print`
    command lists all of the `nmcli` parameters that can be changed for that interface
    type. Note that this output is broken up into logical groups – we''ve edited this
    (very lengthy) output to show many of the settings you might need to adjust, edit,
    or troubleshoot in various situations:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`nmcli`命令也可以以交互方式调用，并且可以在实时解释器或shell中进行更改。要进入以太网接口的shell，请使用`nmcli connection
    edit type ethernet`命令。在shell中，`print`命令列出了可以为该接口类型更改的所有`nmcli`参数。请注意，此输出被分成了逻辑组
    - 我们已编辑此（非常冗长）输出，以显示您可能需要在各种情况下调整、编辑或故障排除的许多设置：'
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'These are common Ethernet options:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是常见的以太网选项：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'These are common IPv4 options:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是常见的IPv4选项：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: (IPv6 options would go here, but have been removed to keep this listing readable.)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: （IPv6选项将在此处列出，但已删除以保持此列表的可读性。）
- en: 'These are the proxy settings:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是代理设置：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As noted, the listing is somewhat abbreviated. We've shown the settings that
    you are most likely going to have to check or adjust in various setup or troubleshooting
    situations. Run the command on your own station to see the full listing.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，列表有些简略。我们展示了您可能需要在各种设置或故障排除情况下检查或调整的设置。在您自己的站点上运行该命令以查看完整的列表。
- en: As we've illustrated, the `nmcli` command allows us to adjust several interface
    parameters either interactively or from the command line. The command-line interface
    in particular allows us to adjust network settings in scripts, allowing us to
    scale up, adjusting settings on dozens, hundreds, or thousands of stations at
    a time.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所示，`nmcli`命令允许我们交互式地或从命令行调整多个接口参数。特别是命令行界面允许我们在脚本中调整网络设置，从而可以一次性调整数十、数百甚至数千个站点的设置。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With this chapter behind us, you should have a firm understanding of IP addressing
    from a binary perspective. With this, you should understand subnet addressing
    and masking, as well as broadcast and multicast addressing. You also have a good
    grasp of the various IP address classes. With all of this in hand, you should
    be able to display or set IP addresses and routes on a Linux host using a variety
    of different commands. Other interface manipulations should also be easily accomplished,
    such as setting the MTU on an interface.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，您应该对IP地址有一个坚实的理解，从二进制的角度来看。通过这个，您应该理解子网寻址和掩码，以及广播和组播寻址。您还对各种IP地址类有了很好的掌握。有了这些，您应该能够使用各种不同的命令在Linux主机上显示或设置IP地址和路由。其他接口操作也应该很容易实现，比如在接口上设置MTU。
- en: 'With these skills in hand, you are well prepared to embark on our next topic:
    using Linux and Linux tools for network diagnostics.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些技能，您就准备好开始我们下一个话题了：使用Linux和Linux工具进行网络诊断。
- en: Questions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里有一些问题供您测试对本章材料的了解。您将在*附录*的*评估*部分找到答案。
- en: What purpose does the default gateway serve?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认网关有什么作用？
- en: For a `192.168.25.0/24` network, what are the subnet mask and broadcast address?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`192.168.25.0/24`网络，子网掩码和广播地址是什么？
- en: For this same network, how is the broadcast address used?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于同一网络，广播地址是如何使用的？
- en: For this same network, what are the possible host addresses?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于同一网络，可能的主机地址是什么？
- en: If you needed to statically set the speed and duplex of an Ethernet interface,
    what command would you use?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要静态设置以太网接口的速度和双工模式，您会使用什么命令？
- en: Further reading
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'RFC 1918 – Address Allocation for Private Internets: [https://tools.ietf.org/html/rfc1918](https://https://tools.ietf.org/html/rfc1918%0D)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RFC 1918 – 专用互联网地址分配: [https://tools.ietf.org/html/rfc1918](https://https://tools.ietf.org/html/rfc1918%0D)'
- en: 'RFC 791 – Internet Protocol: [https://tools.ietf.org/html/rfc791](https://https://tools.ietf.org/html/rfc791)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RFC 791 – 互联网协议: [https://tools.ietf.org/html/rfc791](https://https://tools.ietf.org/html/rfc791)'
