["```\nreader@ubuntu:~/scripts/chapter_09$ vim return-code.sh\nreader@ubuntu:~/scripts/chapter_09$ cat return-code.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-29\n# Description: Teaches us how to grab a return code.\n# Usage: ./return-code.sh\n#####################################\n\n# Run a command that should always work:\nmktemp\nmktemp_rc=$?\n\n# Run a command that should always fail:\nmkdir /home/\nmkdir_rc=$?\n\necho \"mktemp returned ${mktemp_rc}, while mkdir returned ${mkdir_rc}!\"\n\nreader@ubuntu:~/scripts/chapter_09$ bash return-code.sh \n/tmp/tmp.DbxKK1s4aV\nmkdir: cannot create directory \u2018/home\u2019: File exists\nmktemp returned 0, while mkdir returned 1!\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim functional-check.sh\nreader@ubuntu:~/scripts/chapter_09$ cat functional-check.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-29\n# Description: Introduces functional checks.\n# Usage: ./functional-check.sh\n#####################################\n\n# Create a directory.\nmkdir /tmp/temp_dir\nmkdir_rc=$?\n\n# Use test to check if the directory was created.\ntest -d /tmp/temp_dir\ntest_rc=$?\n\n# Check out the return codes:\necho \"mkdir resulted in ${mkdir_rc}, test resulted in ${test_rc}.\"\n\nreader@ubuntu:~/scripts/chapter_09$ bash functional-check.sh \nmkdir resulted in 0, test resulted in 0.\nreader@ubuntu:~/scripts/chapter_09$ bash functional-check.sh \nmkdir: cannot create directory \u2018/tmp/temp_dir\u2019: File exists\nmkdir resulted in 1, test resulted in 0.\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim test-shorthand.sh\nreader@ubuntu:~/scripts/chapter_09$ cat test-shorthand.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-29\n# Description: Write faster tests with the shorthand!\n# Usage: ./test-shorthand.sh\n#####################################\n\n# Test if the /tmp/ directory exists using the full command:\ntest -d /tmp/\ntest_rc=$?\n\n# Test if the /tmp/ directory exists using the simple shorthand:\n[ -d /tmp/ ]\nsimple_rc=$?\n\n# Test if the /tmp/ directory exists using the extended shorthand:\n[[ -d /tmp/ ]]\nextended_rc=$?\n\n# Print the results.\necho \"The return codes are: ${test_rc}, ${simple_rc}, ${extended_rc}.\"\n\nreader@ubuntu:~/scripts/chapter_09$ bash test-shorthand.sh \nThe return codes are: 0, 0, 0.\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cp test-shorthand.sh test-shorthand-variable.sh\nreader@ubuntu:~/scripts/chapter_09$ vim test-shorthand-variable.sh \nreader@ubuntu:~/scripts/chapter_09$ cat test-shorthand-variable.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-29\n# Description: Write faster tests with the shorthand, now even better \n# with a CONSTANT!\n# Usage: ./test-shorthand-variable.sh\n#####################################\n\nDIRECTORY=/tmp/\n\n# Test if the /tmp/ directory exists using the full command:\ntest -d ${DIRECTORY}\ntest_rc=$?\n\n# Test if the /tmp/ directory exists using the simple shorthand:\n[ -d ${DIRECTORY} ]\nsimple_rc=$?\n\n# Test if the /tmp/ directory exists using the extended shorthand:\n[[ -d ${DIRECTORY} ]]\nextended_rc=$?\n\n# Print the results.\necho \"The return codes are: ${test_rc}, ${simple_rc}, ${extended_rc}.\"\n\nreader@ubuntu:~/scripts/chapter_09$ bash test-shorthand-variable.sh \nThe return codes are: 0, 0, 0.\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ bash -x test-shorthand-variable.sh \n+ DIRECTORY=/tmp/\n+ test -d /tmp/\n+ test_rc=0\n+ '[' -d /tmp/ ']'\n+ simple_rc=0\n+ [[ -d /tmp/ ]]\n+ extended_rc=0\n+ echo 'The return codes are: 0, 0, 0.'\nThe return codes are: 0, 0, 0.\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim if-then-exit.sh \nreader@ubuntu:~/scripts/chapter_09$ cat if-then-exit.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-30\n# Description: Use the if-then-exit construct.\n# Usage: ./if-then-exit.sh\n#####################################\n\nFILE=/tmp/random_file.txt\n\n# Check if the file exists.\nif [[ ! -f ${FILE} ]]; then \n  echo \"File does not exist, stopping the script!\"\n  exit 1\nfi\n\n# Print the file content.\ncat ${FILE}\n\nreader@ubuntu:~/scripts/chapter_09$ bash -x if-then-exit.sh\n+ FILE=/tmp/random_file.txt\n+ [[ ! -f /tmp/random_file.txt ]]\n+ echo 'File does not exist, stopping the script!'\nFile does not exist, stopping the script!\n+ exit 1\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim if-then-exit-rc.sh\nreader@ubuntu:~/scripts/chapter_09$ cat if-then-exit-rc.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-30\n# Description: Use return codes to stop script flow.\n# Usage: ./if-then-exit-rc.sh\n#####################################\n\n# Create a new top-level directory.\nmkdir /temporary_dir\nmkdir_rc=$?\n\n# Test if the directory was created successfully.\nif [[ ${mkdir_rc} -ne 0 ]]; then\n  echo \"mkdir did not successfully complete, stop script execution!\"\n  exit 1\nfi\n\n# Create a new file in our temporary directory.\ntouch /temporary_dir/tempfile.txt\n\nreader@ubuntu:~/scripts/chapter_09$ bash if-then-exit-rc.sh\nmkdir: cannot create directory \u2018/temporary_dir\u2019: Permission denied\nmkdir did not successfully complete, stop script execution!\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cp if-then-exit-rc.sh if-then-exit-rc-improved.sh\nreader@ubuntu:~/scripts/chapter_09$ vim if-then-exit-rc-improved.sh\nreader@ubuntu:~/scripts/chapter_09$ cat if-then-exit-rc-improved.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-30\n# Description: Use return codes to stop script flow.\n# Usage: ./if-then-exit-rc-improved.sh\n#####################################\n\n# Create a new top-level directory.\nmkdir /temporary_dir\n\n# Test if the directory was created successfully.\nif [[ $? -ne 0 ]]; then\n  echo \"mkdir did not successfully complete, stop script execution!\"\n  exit 1\nfi\n\n# Create a new file in our temporary directory.\ntouch /temporary_dir/tempfile.txt\n\nreader@ubuntu:~/scripts/chapter_09$ bash if-then-exit-rc-improved.sh \nmkdir: cannot create directory \u2018/temporary_dir\u2019: Permission denied\nmkdir did not successfully complete, stop script execution!\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cp if-then-exit.sh if-then-else.sh\nreader@ubuntu:~/scripts/chapter_09$ vim if-then-else.sh \nreader@ubuntu:~/scripts/chapter_09$ cat if-then-else.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-30\n# Description: Use the if-then-else construct.\n# Usage: ./if-then-else.sh\n#####################################\n\nFILE=/tmp/random_file.txt\n\n# Check if the file exists.\nif [[ ! -f ${FILE} ]]; then \n  echo \"File does not exist, stopping the script!\"\n  exit 1\nelse\n  cat ${FILE} # Print the file content.\nfi\n\nreader@ubuntu:~/scripts/chapter_09$ bash if-then-else.sh \nFile does not exist, stopping the script!\nreader@ubuntu:~/scripts/chapter_09$ touch /tmp/random_file.txt\nreader@ubuntu:~/scripts/chapter_09$ bash -x if-then-else.sh \n+ FILE=/tmp/random_file.txt\n+ [[ ! -f /tmp/random_file.txt ]]\n+ cat /tmp/random_file.txt\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cp if-then-else.sh if-then-else-proper.sh\nreader@ubuntu:~/scripts/chapter_09$ vim if-then-else-proper.sh \nreader@ubuntu:~/scripts/chapter_09$ cat if-then-else-proper.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-30\n# Description: Use the if-then-else construct, now properly.\n# Usage: ./if-then-else-proper.sh file-name\n#####################################\n\nfile_name=$1\n\n# Check if the file exists.\nif [[ -f ${file_name} ]]; then \n  cat ${file_name} # Print the file content.\nelse\n  echo \"File does not exist, stopping the script!\"\n  exit 1\nfi\n\nreader@ubuntu:~/scripts/chapter_09$ bash -x if-then-else-proper.sh /home/reader/textfile.txt \n+ FILE=/home/reader/textfile.txt\n+ [[ -f /home/reader/textfile.txt ]]\n+ cat /home/reader/textfile.txt\nHi, this is some text.\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim empty-file.sh \nreader@ubuntu:~/scripts/chapter_09$ cat empty-file.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-02\n# Description: Make sure the file given as an argument is empty.\n# Usage: ./empty-file.sh <file-name>\n#####################################\n\n# Grab the first argument.\nfile_name=$1\n\n# If the file exists, overwrite it with the always empty file \n# /dev/null; otherwise, touch it.\nif [[ -f ${file_name} ]]; then\n  cp /dev/null ${file_name}\nelse\n  touch ${file_name}\nfi\n\n# Check if either the cp or touch worked correctly.\nif [[ $? -ne 0 ]]; then\n  echo \"Something went wrong, please check ${file_name}!\"\n  exit 1\nelse\n  echo \"Succes, file ${file_name} is now empty.\"\nfi\n\nreader@ubuntu:~/scripts/chapter_09$ bash -x empty-file.sh /tmp/emptyfile\n+ file_name=/tmp/emptyfile\n+ [[ -f /tmp/emptyfile ]]\n+ touch /tmp/emptyfile\n+ [[ 0 -ne 0 ]]\n+ echo 'Succes, file /tmp/emptyfile is now empty.'\nSucces, file /tmp/emptyfile is now empty.\nreader@ubuntu:~/scripts/chapter_09$ bash -x empty-file.sh /tmp/emptyfile\n+ file_name=/tmp/emptyfile\n+ [[ -f /tmp/emptyfile ]]\n+ cp /dev/null /tmp/emptyfile\n+ [[ 0 -ne 0 ]]\n+ echo 'Succes, file /tmp/emptyfile is now empty.'\nSucces, file /tmp/emptyfile is now empty.\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim true-false.sh \nreader@ubuntu:~/scripts/chapter_09$ cat true-false.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-02\n# Description: Shows the logical AND and OR (&& and ||).\n# Usage: ./true-false.sh\n#####################################\n\n# Check out how an exit status of 0 affects the logical operators:\ntrue && echo \"We get here because the first part is true!\"\ntrue || echo \"We never see this because the first part is true :(\"\n\n# Check out how an exit status of 1 affects the logical operators:\nfalse && echo \"Since we only continue after && with an exit status of 0, this is never printed.\"\nfalse || echo \"Because we only continue after || with a return code that is not 0, we see this!\"\n\nreader@ubuntu:~/scripts/chapter_09$ bash -x true-false.sh \n+ true\n+ echo 'We get here because the first part is true!'\nWe get here because the first part is true!\n+ true\n+ false\n+ false\n+ echo 'Because we only continue after || with a return code that is not 0, we see this!'\nBecause we only continue after || with a return code that is not 0, we see this!\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim logical-or.sh\nreader@ubuntu:~/scripts/chapter_09$ cat logical-or.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-02\n# Description: Use the logical OR for error handling.\n# Usage: ./logical-or.sh\n#####################################\n\n# This command will surely fail because we don't have the permissions needed:\ncat /etc/shadow || exit 123\n\nreader@ubuntu:~/scripts/chapter_09$ cat /etc/shadow\ncat: /etc/shadow: Permission denied\nreader@ubuntu:~/scripts/chapter_09$ echo $?\n1\nreader@ubuntu:~/scripts/chapter_09$ bash logical-or.sh \ncat: /etc/shadow: Permission denied\nreader@ubuntu:~/scripts/chapter_09$ echo $?\n123\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim file-create.sh \nreader@ubuntu:~/scripts/chapter_09$ cat file-create.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-01\n# Description: Create a file with contents with this script.\n# Usage: ./file-create.sh <directory_name> <file_name> <file_content>\n#####################################\n\n# We need exactly three arguments, check how many have been passed to \n# the script.\nif [[ $# -ne 3 ]]; then\n  echo \"Incorrect usage!\"\n  echo \"Usage: $0 <directory_name> <file_name> <file_content>\"\n  exit 1\nfi\n# Arguments are correct, lets continue.\n\n# Save the arguments into variables.\ndirectory_name=$1\nfile_name=$2\nfile_content=$3\n\n# Create the absolute path for the file.\nabsolute_file_path=${directory_name}/${file_name}\n\n# Check if the directory exists; otherwise, try to create it.\nif [[ ! -d ${directory_name} ]]; then\n  mkdir ${directory_name} || { echo \"Cannot create directory, exiting script!\"; exit 1; }\nfi\n\n# Try to create the file, if it does not exist.\nif [[ ! -f ${absolute_file_path} ]]; then\n  touch ${absolute_file_path} || { echo \"Cannot create file, exiting script!\"; exit 1; }\nfi\n\n# File has been created, echo the content to it.\necho ${file_content} > ${absolute_file_path}\n\nreader@ubuntu:~/scripts/chapter_09$ bash -x file-create.sh /tmp/directory/ newfile \"Hello this is my file\"\n+ [[ 3 -ne 3 ]]\n+ directory_name=/tmp/directory/\n+ file_name=newfile\n+ file_content='Hello this is my file'\n+ absolute_file_path=/tmp/directory//newfile\n+ [[ ! -d /tmp/directory/ ]]\n+ mkdir /tmp/directory/\n+ [[ ! -f /tmp/directory//newfile ]]\n+ touch /tmp/directory//newfile\n+ echo Hello this is my file\nreader@ubuntu:~/scripts/chapter_09$ cat /tmp/directory/newfile \nHello this is my file\n```", "```\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-01\n# Description: Create a file with contents with this script.\n# Usage: ./file-create.sh <directory_name> <file_name> <file_content>\n#####################################\n...\n```", "```\n...\n# We need exactly three arguments, check how many have been passed to the script.\nif [[ $# -ne 3 ]]; then\n  echo \"Incorrect usage!\"\n  echo \"Usage: $0 <directory_name> <file_name> <file_content>\"\n  exit 1\nfi\n# Arguments are correct, lets continue.\n...\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ bash file-create.sh 1 2 3 4 5\nIncorrect usage!\nUsage: file-create.sh <directory_name> <file_name> <file_content>\n```", "```\n...\n# Save the arguments into variables.\ndirectory_name=$1\nfile_name=$2\nfile_content=$3\n\n# Create the absolute path for the file.\nabsolute_file_path=${directory_name}/${file_name}\n...\n```", "```\n...\n# Check if the directory exists; otherwise, try to create it.\nif [[ ! -d ${directory_name} ]]; then\n  mkdir ${directory_name} || { echo \"Cannot create directory, exiting script!\"; exit 1; }\nfi\n\n# Try to create the file, if it does not exist.\nif [[ ! -f ${absolute_file_path} ]]; then\n  touch ${absolute_file_path} || { echo \"Cannot create file, exiting script!\"; exit 1; }\nfi\n\n# File has been created, echo the content to it.\necho ${file_content} > ${absolute_file_path}\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim log-copy.sh \nreader@ubuntu:~/scripts/chapter_09$ cat log-copy.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-02\n# Description: Copy dpkg.log to a local directory.\n# Usage: ./log-copy.sh\n#####################################\n\n# Create the directory in which we'll store the file.\nif [[ ! -d dpkg ]]; then\n  mkdir dpkg || { echo \"Cannot create the directory, stopping script.\"; exit 1; }\nfi\n\n# Copy the log file to our new directory.\ncp /var/log/dpkg.log dpkg || { echo \"Cannot copy dpkg.log to the new directory.\"; exit 1; }\n\nreader@ubuntu:~/scripts/chapter_09$ ls -l dpkg\nls: cannot access 'dpkg': No such file or directory\nreader@ubuntu:~/scripts/chapter_09$ bash log-copy.sh \nreader@ubuntu:~/scripts/chapter_09$ ls -l dpkg\ntotal 632\n-rw-r--r-- 1 reader reader 643245 Oct  2 19:39 dpkg.log\nreader@ubuntu:~/scripts/chapter_09$ cd /tmp\nreader@ubuntu:/tmp$ ls -l dpkg\nls: cannot access 'dpkg': No such file or directory\nreader@ubuntu:/tmp$ bash /home/reader/scripts/chapter_09/log-copy.sh \nreader@ubuntu:/tmp$ ls -l dpkg\ntotal 632\n-rw-r--r-- 1 reader reader 643245 Oct  2 19:39 dpkg.log\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cp log-copy.sh log-copy-improved.sh\nreader@ubuntu:~/scripts/chapter_09$ vim log-copy-improved.sh \nreader@ubuntu:~/scripts/chapter_09$ cat log-copy-improved.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-02\n# Description: Copy dpkg.log to a local directory.\n# Usage: ./log-copy-improved.sh\n#####################################\n\n# Change directory to the script location.\ncd $(dirname $0)\n\n# Create the directory in which we'll store the file.\nif [[ ! -d dpkg ]]; then\n  mkdir dpkg || { echo \"Cannot create the directory, stopping script.\"; exit 1; }\nfi\n\n# Copy the log file to our new directory.\ncp /var/log/dpkg.log dpkg || { echo \"Cannot copy dpkg.log to the new directory.\"; exit 1; }\n\nreader@ubuntu:~/scripts/chapter_09$ cd /tmp/\nreader@ubuntu:/tmp$ rm -rf /tmp/dpkg/\nreader@ubuntu:/tmp$ rm -rf /home/reader/scripts/chapter_09/dpkg/\nreader@ubuntu:/tmp$ bash -x /home/reader/scripts/chapter_09/log-copy-improved.sh \n++ dirname /home/reader/scripts/chapter_09/log-copy-improved.sh\n+ cd /home/reader/scripts/chapter_09\n+ [[ ! -d dpkg ]]\n+ mkdir dpkg\n+ cp /var/log/dpkg.log dpkg\nreader@ubuntu:/tmp$ ls -l dpkg\nls: cannot access 'dpkg': No such file or directory\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ vim yes-no.sh \nreader@ubuntu:~/scripts/chapter_09$ cat yes-no.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-01\n# Description: Dealing with yes/no answers.\n# Usage: ./yes-no.sh\n#####################################\n\nread -p \"Do you like this question? \" reply_variable\n\n# See if the user responded positively.\nif [[ ${reply_variable} = 'y' || ${reply_variable} = 'Y' || ${reply_variable} = 'yes' || ${reply_variable} = 'YES' || ${reply_variable} = 'Yes' ]]; then\n  echo \"Great, I worked really hard on it!\"\n  exit 0\nfi\n\n# Maybe the user responded negatively?\nif [[ ${reply_variable} = 'n' || ${reply_variable} = 'N' || ${reply_variable} = 'no' || ${reply_variable} = 'NO' || ${reply_variable} = 'No' ]]; then\n  echo \"You did not? But I worked so hard on it!\"\n  exit 0\nfi\n\n# If we get here, the user did not give a proper response.\necho \"Please use yes/no!\"\nexit 1\n\nreader@ubuntu:~/scripts/chapter_09$ bash yes-no.sh \nDo you like this question? Yes\nGreat, I worked really hard on it!\nreader@ubuntu:~/scripts/chapter_09$ bash yes-no.sh \nDo you like this question? n\nYou did not? But I worked so hard on it!\nreader@ubuntu:~/scripts/chapter_09$ bash yes-no.sh \nDo you like this question? maybe \nPlease use yes/no!\n```", "```\nreader@ubuntu:~/scripts/chapter_09$ cp yes-no.sh yes-no-optimized.sh\nreader@ubuntu:~/scripts/chapter_09$ vim yes-no-optimized.sh \nreader@ubuntu:~/scripts/chapter_09$ cat yes-no-optimized.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-01\n# Description: Dealing with yes/no answers, smarter this time!\n# Usage: ./yes-no-optimized.sh\n#####################################\n\nread -p \"Do you like this question? \" reply_variable\n\n# See if the user responded positively.\nif [[ ${reply_variable,,} = 'y' || ${reply_variable,,} = 'yes' ]]; then\n  echo \"Great, I worked really hard on it!\"\n  exit 0\nfi\n\n# Maybe the user responded negatively?\nif [[ ${reply_variable^^} = 'N' || ${reply_variable^^} = 'NO' ]]; then\n  echo \"You did not? But I worked so hard on it!\"\n  exit 0\nfi\n\n# If we get here, the user did not give a proper response.\necho \"Please use yes/no!\"\nexit 1\n\nreader@ubuntu:~/scripts/chapter_09$ bash yes-no-optimized.sh \nDo you like this question? YES\nGreat, I worked really hard on it!\nreader@ubuntu:~/scripts/chapter_09$ bash yes-no-optimized.sh \nDo you like this question? no\nYou did not? But I worked so hard on it!\n```"]