- en: '*Chapter 8*: Working with WSL Distros'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：使用WSL发行版'
- en: In [*Chapter 2*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023), *Installing
    and Configuring the Windows Subsystem for Linux*, in the *Introducing the wsl
    command* section, we saw how we can use the `wsl` command to list the **distributions**
    (**distros**) that we have installed, run commands in them, and terminate them
    as needed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023)中，*安装和配置Windows子系统Linux*，在*介绍wsl命令*部分，我们看到了如何使用`wsl`命令列出我们安装的**发行版**（**distros**），在其中运行命令，并根据需要终止它们。
- en: We will revisit distros in this chapter, this time looking at them from more
    of a distro management perspective. In particular, we will look at how you can
    use the `export` and `import` commands to back up a distro or copy it to another
    machine. We will also look at how you can quickly create a new distro based on
    a Docker container image to enable you to easily create your own distros ready
    with any dependencies installed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重新讨论发行版，这次从发行版管理的角度来看。特别是，我们将看看如何使用`export`和`import`命令备份发行版或将其复制到另一台机器。我们还将看看如何快速创建一个基于Docker容器映像的新发行版，以便您可以轻松创建自己的发行版，并安装任何依赖项。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主要内容：
- en: Exporting and importing a WSL distro
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出和导入WSL发行版
- en: Creating and running a custom distro
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和运行自定义发行版
- en: We'll start the chapter by looking at how to export and import WSL distros.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从介绍如何导出和导入WSL发行版开始本章。
- en: Exporting and importing a WSL distro
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出和导入WSL发行版
- en: If you have invested time in setting up a WSL distro, you may wish to be able
    to copy it to another machine. This could be because you are replacing or reinstalling
    your machine, or maybe you have multiple machines and want to copy a configured
    distro to a second machine rather than setting up the distro from scratch. In
    this section, we will look at how to export a distro to an archive file that can
    be copied to another machine and imported.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您花费了时间设置WSL发行版，您可能希望能够将其复制到另一台机器上。这可能是因为您正在更换或重新安装计算机，或者您拥有多台计算机，希望将配置好的发行版复制到第二台计算机上，而不是从头开始设置发行版。在本节中，我们将介绍如何将发行版导出为可以复制到另一台机器并导入的存档文件。
- en: Let's start by preparing the distro for exporting.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先准备要导出的发行版。
- en: Preparing for exporting
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备导出
- en: Before we export a distro, we want to make sure that the default user for the
    distro is set in the `/etc/wsl.conf` file inside the distro (you can read more
    about `wsl.conf` in [*Chapter 2*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023),
    *Installing and Configuring the Windows Subsystem for Linux*, in the *Introducing
    wsl.conf and .wslconfig* section). By doing this, we can ensure that WSL still
    uses the correct default user for our distro after we have imported it later.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出发行版之前，我们要确保发行版的默认用户在发行版内的`/etc/wsl.conf`文件中设置正确（您可以在[*第2章*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023)中的*安装和配置Windows子系统Linux*，*介绍wsl.conf和.wslconfig*部分了解更多关于`wsl.conf`的信息）。通过这样做，我们可以确保在导入发行版后，WSL仍然使用正确的默认用户。
- en: 'Open up a terminal in your WSL distro and run `cat /etc/wsl.conf` to inspect
    the contents of the file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在WSL发行版中打开终端并运行`cat /etc/wsl.conf`以检查文件的内容：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At the end of this output, you can see the `[user]` section with the `default=stuart`
    entry. If you don''t have the default user entry (or you don''t have a `wsl.conf`),
    then you can use your favorite editor to ensure that there is an entry similar
    to this (with the correct username). Alternatively, you can run the following
    command to add a user (assuming your `wsl.conf` doesn''t have a `[user]` section):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在此输出的末尾，您可以看到带有`default=stuart`条目的`[user]`部分。如果您没有默认用户条目（或者没有`wsl.conf`文件），那么您可以使用您喜欢的编辑器确保有一个类似于此的条目（带有正确的用户名）。或者，您可以运行以下命令添加一个用户（假设您的`wsl.conf`没有`[user]`部分）：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command uses `echo` to output the `[user]` section with the default set
    to the current user. It embeds the result of calling `whoami` to get the current
    username. The whole command is wrapped and executed using `sudo` to ensure it
    has the necessary permissions to write to the file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用`echo`输出带有默认设置为当前用户的`[user]`部分。它嵌入了调用`whoami`获取当前用户名的结果。整个命令被包装并使用`sudo`执行，以确保具有写入文件所需的权限。
- en: With this preparation complete, let's look at how to export the distro.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 准备工作完成后，让我们看看如何导出发行版。
- en: Performing the export
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行导出
- en: 'To export the distro, we will use the `wsl` command to export the contents
    of a distro to a file on disk. To do this, we run `wsl --export`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要导出发行版，我们将使用`wsl`命令将发行版的内容导出到磁盘上的文件中。为此，我们运行`wsl --export`：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we specify the name of the distro we want to export (`Ubuntu-18.04`)
    followed by the path to where we want the export to be saved (`c:\temp\Ubuntu-18.04.tar`).
    The export will take a few moments to complete, depending on the size of the distro
    and the amount of content within it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们指定了要导出的发行版的名称（`Ubuntu-18.04`），然后是我们要保存导出文件的路径（`c:\temp\Ubuntu-18.04.tar`）。导出过程将根据发行版的大小和其中的内容量而需要一些时间来完成。
- en: 'During the export process, the distro is unavailable for use, as shown with
    the `wsl --list` command (executed in a separate terminal instance):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出过程中，发行版无法使用，如使用`wsl --list`命令（在单独的终端实例中执行）所示：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this output, you can see that the state of the `Ubuntu-18.04` distro is shown
    as `Converting`. Once the export command completes, the distro will be in the
    `Stopped` state.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在此输出中，您可以看到`Ubuntu-18.04`发行版的状态显示为`Converting`。一旦导出命令完成，该发行版将处于`Stopped`状态。
- en: 'The exported file is an archive in the **TAR** format (originally short for
    **Tape Archive**) that is common to Linux. If you open the TAR file (for example,
    in an application such as 7-zip from [https://www.7-zip.org/](https://www.7-zip.org/)),
    you can see the contents:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的文件是一个以**TAR**格式（最初是**Tape Archive**的缩写）创建的存档文件，这在Linux中很常见。如果您打开TAR文件（例如，在诸如[https://www.7-zip.org/](https://www.7-zip.org/)的应用程序中），您可以看到其中的内容：
- en: '![Figure 8.1 – A screenshot showing the exported TAR open in 7-zip'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.1 - 展示在 7-zip 中打开的导出的 TAR 的屏幕截图'
- en: '](img/B16412_Figure_8.1.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_Figure_8.1.jpg)'
- en: Figure 8.1 – A screenshot showing the exported TAR open in 7-zip
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 - 展示在 7-zip 中打开的导出的 TAR 的屏幕截图
- en: In this screenshot, you can see that the exported TAR file contains the familiar
    folders of a Linux system. You can drill down to folders such as `/home/stuart`
    and export individual files if you wish to.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，您可以看到导出的 TAR 文件包含了一个 Linux 系统的熟悉文件夹。您可以深入到诸如 `/home/stuart` 的文件夹中，并导出单个文件（如果您希望这样做）。
- en: Now that we have an exported file for our distro, let's look at how to import
    it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个导出的发行版文件，让我们看看如何导入它。
- en: Performing the import
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行导入
- en: Once you have the export file for your distro, you can copy it to the new machine
    (assuming you are transferring the distro) or leave it in the same place if you
    are using the export/import to create a copy of a distro.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了发行版的导出文件，您可以将其复制到新机器（假设您正在传输发行版），或者如果您使用导出/导入来创建发行版的副本，则可以将其保留在同一位置。
- en: 'To perform the import, we will use the following `wsl` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行导入，我们将使用以下 `wsl` 命令：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, this time we use the `--import` switch. After that, we pass
    the following three parameters:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这次我们使用了 `--import` 开关。之后，我们传递以下三个参数：
- en: '`Ubuntu-18.04-Copy`: This is the name for the new distro that will be created
    by the import.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ubuntu-18.04-Copy`：这是将由导入创建的新发行版的名称。'
- en: '`C:\wsl-distros\Ubuntu-18.04-Copy`: This is the path where the state for the
    new distro will be stored on disk. Distros installed via the Store are installed
    in folders under `$env:LOCALAPPDATA\Packages` and you can use this path if you
    prefer to keep your imported distros in a similar location.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\wsl-distros\Ubuntu-18.04-Copy`：这是新发行版的状态将存储在磁盘上的路径。通过商店安装的发行版将安装在 `$env:LOCALAPPDATA\Packages`
    下的文件夹中，如果您希望将导入的发行版保存在类似位置的路径下，您可以使用此路径。'
- en: '`C:\temp\Ubuntu-18.04.tar`: The path to the TAR file with the exported distro
    that we want to import.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\temp\Ubuntu-18.04.tar`：要导入的已导出发行版的 TAR 文件的路径。'
- en: 'As with the export, the import process can take a while if there is a lot of
    content. We can see the state by running `wsl` in another terminal instance:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与导出一样，如果内容很多，导入过程可能需要一些时间。我们可以通过在另一个终端实例中运行 `wsl` 来查看状态：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this output, we can see that the new distro (`Ubuntu-18.04-Copy`) shows as
    being in the `Installing` state during the import. Once the `import` command is
    complete, the new distro is ready to use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在此输出中，我们可以看到新的发行版（`Ubuntu-18.04-Copy`）在导入过程中显示为 `Installing` 状态。一旦 `import`
    命令完成，新的发行版就可以使用了。
- en: As you've seen here, by exporting a distro to a TAR file that can be imported,
    you have a way to create a clone of a distro on your machine, for example, to
    test some other applications without affecting the original distro. By copying
    the TAR file between machines, it also gives you a way to copy distros that you
    have configured between machines to reuse them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里看到的，通过将发行版导出为可以导入的 TAR 文件，您可以在您的计算机上创建发行版的副本，例如，测试一些其他应用程序而不影响原始发行版。通过在计算机之间复制
    TAR 文件，它还可以让您复制已配置的发行版以便在计算机之间重用它们。
- en: Next, we'll take a look at how you can create your own distro.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何创建自己的发行版。
- en: Creating and running a custom distro
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和运行自定义发行版
- en: If you work across multiple projects, each with their own sets of tools, and
    you like to keep the dependencies separate, then running a distro for each project
    might be appealing. The technique we've just seen for exporting and importing
    distros gives you a way to achieve this by making a copy of a starting distro.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在多个项目中工作，每个项目都有自己的工具集，并且您希望保持依赖关系的分离，那么为每个项目运行一个发行版可能是有吸引力的。我们刚刚看到的导出和导入发行版的技术可以通过复制起始发行版来实现这一点。
- en: In this section, we will look at an alternative approach using Docker images.
    There is a large range of images published on Docker Hub, including images that
    have various developer toolsets installed. As we will see in this section, this
    can be a quick way to get a distro installed for working with a new toolset. In
    [*Chapter 10*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125), *Visual Studio
    Code and Containers*, we will see an alternative approach, using containers directly
    to encapsulate your development dependencies.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍使用 Docker 镜像的另一种方法。Docker Hub 上发布了大量的镜像，包括安装了各种开发工具集的镜像。正如我们将在本节中看到的，这可以是一种快速安装发行版以使用新工具集的方法。在[*第
    10 章*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125)中，*Visual Studio Code 和容器*，我们将看到另一种方法，直接使用容器来封装您的开发依赖项。
- en: Before we get started, it is worth noting that there is another approach to
    building a custom distro for WSL, but that is a more involved process and doesn't
    fit the scenario for this section. It is also the route to publish a Linux distro
    to the Store – details can be found at [https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro](https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，值得注意的是，还有另一种构建用于 WSL 的自定义发行版的方法，但这是一个更复杂的过程，并且不适用于本节的场景。这也是发布 Linux 发行版到商店的途径
    - 详细信息可以在[https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro](https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro)找到。
- en: In this section, we will look at how to use containers to set up a distro ready
    for working with .NET Core (but this process will work for any tech stack that
    you can find a container image for). We will use Docker Hub to find the image
    we want to use as the base for our new WSL distro and then configure a running
    container so that it will work smoothly with WSL. Once we have the container set
    up, we will export it to a TAR file that can be imported as we saw in the previous
    section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何使用容器设置一个准备好与 .NET Core 一起工作的发行版（但是这个过程适用于任何您可以找到容器镜像的技术栈）。我们将使用
    Docker Hub 找到我们想要用作新 WSL 发行版基础的镜像，然后配置一个正在运行的容器，以便它能够与 WSL 无缝配合。一旦我们设置好容器，我们将导出它为一个可以像前一节中所见那样导入的
    TAR 文件。
- en: Let's get started by finding the image we want to use.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始找到我们想要使用的镜像。
- en: Finding and pulling the container image
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找和拉取容器镜像
- en: 'The first step is to find the container we want to use as a starting point.
    After searching for `dotnet` on Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)),
    we can scroll down to find the images from Microsoft, which will lead us to this
    page ([https://hub.docker.com/_/microsoft-dotnet-core](https://hub.docker.com/_/microsoft-dotnet-core)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是找到我们想要用作起点的容器。在Docker Hub上搜索`dotnet`后（[https://hub.docker.com/](https://hub.docker.com/)），我们可以向下滚动以找到来自Microsoft的镜像，这将引导我们到这个页面（[https://hub.docker.com/_/microsoft-dotnet-core](https://hub.docker.com/_/microsoft-dotnet-core)）：
- en: '![Figure 8.2 – A screenshot of the .NET images page on Docker Hub'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 - Docker Hub上.NET镜像页面的截图'
- en: '](img/B16412_Figure_8.2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_Figure_8.2.jpg)'
- en: Figure 8.2 – A screenshot of the .NET images page on Docker Hub
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 - Docker Hub上.NET镜像页面的截图
- en: As you can see in this screenshot, there are a number of images available for
    .NET. For this chapter, we will use the .NET 5.0 image, and the SDK image in particular,
    as we want to be able to test building applications (rather than just running
    applications that the runtime images are designed for).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这个截图中所看到的，有许多可用的.NET镜像。在本章中，我们将使用.NET 5.0镜像，特别是SDK镜像，因为我们希望能够测试构建应用程序（而不仅仅是运行为运行时镜像设计的应用程序）。
- en: 'By clicking through to the `dotnet/sdk` page, we can find the image tag we
    need to use to pull and run the image:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击`dotnet/sdk`页面，我们可以找到我们需要使用的镜像标签来拉取和运行镜像：
- en: '![Figure 8.3 – A screenshot showing the .NET 5.0 SDK image tag on Docker Hub'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 - Docker Hub上显示.NET 5.0 SDK镜像标签的截图'
- en: '](img/B16412_Figure_8.3.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_Figure_8.3.jpg)'
- en: Figure 8.3 – A screenshot showing the .NET 5.0 SDK image tag on Docker Hub
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 - Docker Hub上显示.NET 5.0 SDK镜像标签的截图
- en: As this screenshot shows, we can run `docker pull mcr.microsoft.com/dotnet/sdk:5.0`
    to pull the image to our local machine.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个截图所示，我们可以运行`docker pull mcr.microsoft.com/dotnet/sdk:5.0`将镜像拉取到我们的本地机器上。
- en: Now that we have found the image we want to use as the starting point for a
    new distro, there are a few steps to get it ready to use with WSL. Let's see what
    these are.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到了要用作新发行版起点的镜像，接下来有几个步骤来准备它以便与WSL一起使用。让我们看看这些步骤是什么。
- en: Configuring a container ready for WSL
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置一个准备用于WSL的容器
- en: 'Before we can export the image that we just pulled from Docker Hub, we need
    to make a few tweaks so that it fits in cleanly with WSL:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以导出刚从Docker Hub拉取的镜像之前，我们需要进行一些调整，以使其与WSL完全兼容：
- en: 'To start, we will create a running container from the image:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将从镜像创建一个正在运行的容器：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first thing to set up will be a user for WSL to use:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要设置的是WSL要使用的用户：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we add the `/etc/wsl.conf` file to tell WSL to use the user that we just
    created:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加`/etc/wsl.conf`文件以告诉WSL使用我们刚创建的用户：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We could do additional configuration at this stage (and we will look at some
    examples in the *Taking it further* section later in this chapter), but for now
    the basic preparations are complete, so let's convert the container to a WSL distro.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们可以进行额外的配置（我们将在本章后面的“进一步操作”部分中看到一些示例），但是现在基本的准备工作已经完成，所以让我们将容器转换为WSL发行版。
- en: Converting the container to a WSL distro
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将容器转换为WSL发行版
- en: In the first section of this chapter, we saw how we can export a WSL distro
    to a TAR file and then import that TAR file as a new distro (on the same or a
    different machine).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一节中，我们看到了如何将WSL发行版导出为TAR文件，然后将该TAR文件作为新的发行版导入（在同一台或不同的机器上）。
- en: Fortunately for us, Docker provides a way to export containers to a TAR file
    that is compatible with the format that WSL uses. In this section, we will take
    the container that we just configured and use the export/import process to convert
    it to a WSL distro.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Docker提供了一种将容器导出为与WSL使用的格式兼容的TAR文件的方法。在本节中，我们将采用刚刚配置的容器，并使用导出/导入过程将其转换为WSL发行版。
- en: 'Before we export, let''s quit the container:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出之前，让我们退出容器：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This output shows running the `exit` command to exit from the `bash` instance
    in the container. This causes the container process to exit and the container
    is no longer running. By running `docker ps -a`, we can see a list of all containers
    (including those that are stopped), and we can see the container we have been
    working with listed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出显示了运行`exit`命令以退出容器中的`bash`实例。这会导致容器进程退出，容器不再运行。通过运行`docker ps -a`，我们可以看到所有容器的列表（包括已停止的容器），并且我们可以看到我们一直在使用的容器被列出。
- en: 'Next, we can export the Docker container to a TAR file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将Docker容器导出为一个TAR文件：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we are using the `docker export` command. The `-o` switch provides the
    path for the output TAR file, and the final argument is the name of the container
    we want to export (`dotnet`).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`docker export`命令。`-o`开关提供输出TAR文件的路径，最后一个参数是我们要导出的容器的名称（`dotnet`）。
- en: 'Once this command completes (which may take a while), we have the TAR file
    ready to import with the `wsl` command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个命令完成（可能需要一些时间），我们就可以使用`wsl`命令导入准备好的TAR文件：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `import` command is the same as in the earlier section. The first argument
    is the name of the distro we want to create, `dotnet5`; the second specifies where
    WSL should store the distro; and finally, we give the path to the TAR file we
    want to import.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`命令与前面的部分相同。第一个参数是我们要创建的发行版的名称，`dotnet5`；第二个参数指定WSL应该存储发行版的位置；最后，我们给出要导入的TAR文件的路径。'
- en: Once this is complete, we have created a new WSL distro and we are ready to
    run it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们创建了一个新的WSL发行版，准备运行它。
- en: Running the new distro
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行新的发行版
- en: 'Now that we''ve created a new distro, we can take it for a test. Let''s start
    up a new instance of `bash` in the distro and check what user we are running as:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个新的发行版，我们可以进行测试。让我们在发行版中启动一个新的`bash`实例，并检查我们正在以哪个用户身份运行：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we start `bash` in the `dotnet5` distro we just created and run `whoami`.
    This shows that we are running as the `stuart` user that we created and configured
    in the container before importing it as a distro.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在刚刚创建的`dotnet5`发行版中启动`bash`，并运行`whoami`。这表明我们正在以我们在导入发行版之前在容器中创建和配置的`stuart`用户身份运行。
- en: 'Now we can test running `dotnet`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试运行`dotnet`：
- en: 'To start, let''s create a new web app with `dotnet new`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们用`dotnet new`创建一个新的Web应用程序：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we can change directory to the new web app and run it with `dotnet run`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以切换到新的Web应用程序目录，并使用`dotnet run`运行它：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, this approach gives us a nice way to quickly create a new, separate
    WSL distro and this can be used to split up different dependencies across projects.
    This approach can also be used to create temporary distros to try out previews
    without installing them in your main distro. In this case, you can use `wsl --unregister
    dotnet5` to delete the distro when you are finished with it and free up the disk
    space.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这种方法为我们提供了一种快速创建新的、独立的WSL发行版的好方法，这可以用来在项目之间拆分不同的依赖关系。这种方法还可以用来创建临时发行版，以尝试预览而不在主要发行版中安装它们。在这种情况下，您可以使用`wsl
    --unregister dotnet5`来删除发行版，并释放磁盘空间。
- en: The process we used here required us to execute some steps interactively, which
    is fine in many situations. If you find yourself repeating these steps, you may
    wish to make them more automated, and we will look at that next.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的过程要求我们交互地执行一些步骤，在许多情况下这是可以接受的。如果您发现自己重复执行这些步骤，您可能希望将它们更加自动化，我们将在下一步中看看如何做到这一点。
- en: Taking it a step further
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步的步骤
- en: So far, we've seen how we can work with Docker interactively to set up a container
    that can be exported as a TAR and then imported as a WSL distro. In this section,
    we will look at how to automate this process, and as part of the automation, we
    will add in some extra steps to refine the image preparation that we performed
    previously.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用Docker交互式地设置一个可以导出为TAR文件并作为WSL发行版导入的容器。在本节中，我们将看看如何自动化这个过程，并作为自动化的一部分，我们将添加一些额外的步骤来完善之前执行的镜像准备工作。
- en: The basis for the automation of the container configuration is the `Dockerfile`
    that we saw in [*Chapter 7*](B16412_07_Final_JC_ePub.xhtml#_idTextAnchor082),
    *Working with Containers in WSL*, in the *Introducing Dockerfiles* section. We
    can use a `Dockerfile` to build an image, then we can follow the previous steps
    to run a container from the image and export the file system to a TAR file that
    can be imported as a WSL distro.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 容器配置自动化的基础是我们在[*第7章*](B16412_07_Final_JC_ePub.xhtml#_idTextAnchor082)中看到的`Dockerfile`，即在*在WSL中使用容器*一节中的*介绍Dockerfile*部分。我们可以使用`Dockerfile`来构建镜像，然后我们可以按照之前的步骤运行一个容器从镜像中导出文件系统到一个可以作为WSL发行版导入的TAR文件中。
- en: Let's start with the `Dockerfile`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`Dockerfile`开始。
- en: Creating the Dockerfile
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Dockerfile
- en: 'The `docker build` command allows us to pass a `Dockerfile` to automate the
    steps to build a container image. A starting point for this `Dockerfile` is shown
    here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker build`命令允许我们传递一个`Dockerfile`来自动化构建容器镜像的步骤。这里显示了一个`Dockerfile`的起点：'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this `Dockerfile`, we specify the starting image in the `FROM` step (the
    same `dotnet/sdk` image we used previously) before using a couple of `ARG` statements
    to allow the `USERNAME` and `PASSWORD` to be passed in. After this, we `RUN` a
    number of commands to configure the image. Typically, in a `Dockerfile`, you would
    see these commands concatenated as a single `RUN` step to help reduce the number
    and size of the layers, but here, we''re just going to export the full file system,
    so it doesn''t matter. Let''s take a look at the commands:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`Dockerfile`中，我们在`FROM`步骤中指定了起始镜像（之前使用的`dotnet/sdk`镜像），然后使用了一些`ARG`语句来允许传递`USERNAME`和`PASSWORD`。之后，我们使用`RUN`运行了一系列命令来配置镜像。通常，在一个`Dockerfile`中，您会看到这些命令被连接为一个单独的`RUN`步骤，以帮助减少层数和大小，但在这里，我们只是要导出完整的文件系统，所以无所谓。让我们看一下这些命令：
- en: We have `useradd`, which we used previously to create our user and here we use
    it with the `USERNAME` argument value.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有`useradd`，之前我们用它来创建用户，这里我们使用它和`USERNAME`参数值。
- en: The `passwd` command expects the user to input the password twice, so we use
    `echo` to output the password twice with a line break between and pass this to
    `passwd`. We call `bash` to run this so that we can use `\n` to escape the line
    breaks.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passwd`命令要求用户输入密码两次，所以我们使用`echo`在两次密码之间输出一个换行，并将其传递给`passwd`。我们调用`bash`来运行这个命令，这样我们就可以使用`\n`来转义换行符。'
- en: We use `echo` again to set the `/etc/wsl.conf` content to configure the default
    user for WSL.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们再次使用`echo`来将`/etc/wsl.conf`的内容设置为配置WSL的默认用户。
- en: We call `usermod` to allow the user to run `sudo` by adding the user to the
    `sudo`ers group.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们调用`usermod`将用户添加到`sudo`ers组，以允许用户运行`sudo`。
- en: Then, we use `apt-get` to install the `sudo` utility.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用`apt-get`来安装`sudo`实用程序。
- en: As you can see, this list covers the steps that we previously ran manually plus
    a couple of others to set up `sudo` to make the environment feel a bit more natural.
    You can add any other steps you want here, and this `Dockerfile` can be reused
    for other Debian-based images by changing the `FROM` image.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个列表涵盖了我们之前手动运行的步骤以及一些其他步骤，以设置`sudo`以使环境感觉更加自然。您可以在这里添加任何其他步骤，并且这个`Dockerfile`可以通过更改`FROM`镜像来重用于其他基于Debian的镜像。
- en: Next, we can use Docker to build an image from the `Dockerfile`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用Docker从`Dockerfile`构建一个镜像。
- en: Creating the TAR file
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建TAR文件
- en: 'Now that we have a `Dockerfile`, we need to call Docker to build the image
    and create the TAR file. We can use the following commands to do this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个`Dockerfile`，我们需要调用Docker来构建镜像并创建TAR文件。我们可以使用以下命令来完成这个过程：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This set of commands perform the required steps to create the TAR file from
    the `Dockerfile`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这组命令执行了从`Dockerfile`创建TAR文件所需的步骤：
- en: Run `docker build` specifying the image name to create (`dotnet-test`), the
    input `Dockerfile`, and the values for each `ARG` we defined. This is where you
    can set the username and password you want to use.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`docker build`，指定要创建的镜像名称（`dotnet-test`），输入的`Dockerfile`，以及我们定义的每个`ARG`的值。在这里，您可以设置要使用的用户名和密码。
- en: Create a container from the image with `docker run`. We have to do this to be
    able to export the container file system. Docker does have a `save` command but
    that saves images complete with their layers and this isn't the format that we
    need to import to WSL.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker run`从镜像创建一个容器。我们必须这样做才能导出容器文件系统。Docker确实有一个`save`命令，但它保存的是包含层的完整镜像，而这不是我们需要导入到WSL的格式。
- en: Run `docker export` to export the container file system to a TAR file.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`docker export`将容器文件系统导出为一个TAR文件。
- en: Delete the container with `docker rm` to free space and make it easy to rerun
    the commands.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker rm`删除容器以释放空间并使重新运行命令变得容易。
- en: 'At this point, we have the TAR file and we can run `wsl --import` as we saw
    in the previous section to create our new WSL distro:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了TAR文件，我们可以像在前一节中看到的那样运行`wsl --import`来创建我们的新WSL发行版：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will create a `chapter-08-dotnet` distro with the specified user and configuration
    that we applied in the `Dockerfile`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`chapter-08-dotnet`的发行版，其中包含我们在`Dockerfile`中应用的指定用户和配置。
- en: 'With these scriptable commands, it becomes easy to create new distros. You
    can add steps to the `Dockerfile` to add other applications or configurations.
    For example, if you are going to be working with Azure in that distro, you might
    want to install the Azure CLI for convenience by adding the following line to
    your `Dockerfile`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些可脚本化的命令，创建新的发行版变得很容易。您可以在`Dockerfile`中添加步骤来添加其他应用程序或配置。例如，如果您打算在该发行版中使用Azure，您可能希望通过将以下行添加到您的`Dockerfile`来方便地安装Azure
    CLI：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This `RUN` command is based on the install instructions in the Azure CLI documentation
    ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`RUN`命令是基于Azure CLI文档中的安装说明（[https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest)）。
- en: In this way, you can easily script the creation of new WSL distros configured
    for your needs. This is a powerful tool in your toolkit whether you plan to keep
    them around for a long time or just treat them as temporary, disposable environments.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以轻松地脚本化创建根据您需求配置的新WSL发行版。无论您计划长时间保留它们还是将它们视为临时的可丢弃环境，这都是您工具包中的强大工具。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you've seen how to use the WSL `export` and `import` commands.
    These commands allow you to copy your distros to other machines, or to back up
    and restore your distros when you reinstall your machine. They also provide a
    way to clone your distros if you want to experiment or work in a copy of a distro
    without affecting the original.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了如何使用WSL的`export`和`import`命令。这些命令允许您将发行版复制到其他计算机，或在重新安装计算机时备份和恢复发行版。它们还提供了一种克隆发行版的方法，如果您想要进行实验或在副本中工作而不影响原始发行版。
- en: You also saw how to build new distros using *containers*. This provides a productive
    way to set up new distros to work in or to quickly test applications without affecting
    your original distros. It can also be a great way to set up per-project distros
    if you have different technology stacks between projects and want to have some
    isolation between their dependencies. Being able to create these distros in a
    scripted way helps to boost productivity if you find yourself using this multi-distro
    approach.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您还看到了如何使用*容器*构建新的发行版。这提供了一种有效的方式来设置新的发行版，以便在其中工作，或者快速测试应用程序而不影响原始发行版。如果您在项目之间具有不同的技术堆栈，并且希望在它们的依赖之间有一些隔离，那么这也可以是设置每个项目发行版的好方法。能够以脚本方式创建这些发行版有助于提高生产力，如果您发现自己使用这种多发行版方法。
- en: As we progress with scripting the creation of these environments through the
    use of Dockerfiles, we move closer to working with containers. We will explore
    how to continue on this journey and use containers directly for development work
    in [*Chapter 10*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125), *Visual Studio
    Code and Containers*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们通过使用Dockerfile脚本化创建这些环境的进展，我们越来越接近与容器一起工作。我们将在[*第10章*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125)中探索如何继续这个旅程，并直接使用容器进行开发工作，*Visual
    Studio Code和容器*。
- en: Before that, the next chapter will introduce Visual Studio Code, a powerful
    and free editor from Microsoft, and explore how it allows us to work with source
    code in WSL.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，下一章将介绍Visual Studio Code，这是一款功能强大且免费的微软编辑器，并探索它如何允许我们在WSL中处理源代码。
