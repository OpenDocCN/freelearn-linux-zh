- en: Chapter 9. Automating Apache Virtual Hosts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。自动化Apache虚拟主机
- en: Now that we have seen a little of the stream editor, `sed`, we can put this
    knowledge into practice. In [Chapter 8](part0056_split_000.html#1LCVG2-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 8. Introducing sed"), *Introducing sed,* we became used to some of the
    capabilities of `sed`; however, this represents just a small amount of the power
    enclosed in the editor. In this chapter, we are going to exercise `sed` a little
    more and expose ourselves to some practical uses of the tool, especially when
    using our bash scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一些流编辑器`sed`，我们可以将这些知识付诸实践。在[第8章](part0056_split_000.html#1LCVG2-747571d9b4814e1dbffcdef2eb0dec8d
    "第8章。介绍sed")中，*介绍sed*，我们已经习惯了`sed`的一些功能；然而，这只是编辑器中所包含的一小部分功能。在本章中，我们将更多地使用`sed`，并且在使用我们的bash脚本时，暴露自己于工具的一些实际用途。
- en: In this journey, we will use `sed` to help us automate the creation of Apache
    name-based Virtual Hosts. The Apache hosts are practical users of `sed` that we
    demonstrated but more importantly, we will use `sed` to search for selected lines
    in the main configuration. We will then uncomment those lines and save them as
    a template. Having created the template, we will create new configurations from
    it. The concept that we demonstrate with Apache can be applied in many different
    situations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将使用`sed`来帮助我们自动创建基于名称的Apache虚拟主机。Apache主机是我们演示的`sed`的实际用户，但更重要的是，我们将使用`sed`来搜索主配置中的选定行。然后我们将取消注释这些行并将它们保存为模板。创建了模板后，我们将从中创建新的配置。我们在Apache中演示的概念可以应用于许多不同的情况。
- en: 'We will find that using `sed` in our shell scripts will allow us to easily
    extract template data from the main configuration and adjust to the needs of the
    Virtual Host. In this way, we will be able to extend the knowledge of both `sed`
    and shell scripting. In this chapter, we are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发现，在我们的shell脚本中使用`sed`将允许我们轻松地从主配置中提取模板数据，并根据虚拟主机的需要进行调整。通过这种方式，我们将能够扩展对`sed`和shell脚本的知识。在本章中，我们将涵盖以下主题：
- en: Apache HTTPD Virtual Hosts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTPD虚拟主机
- en: Extracting template information
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取模板信息
- en: Creating hosts automatically
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动创建主机
- en: Prompting during host creation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主机创建过程中提示
- en: Apache name-based Virtual Hosts
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于名称的Apache虚拟主机
- en: For the demonstration, we will be working with the `httpd.conf` file from an
    Apache 2.2 HTTPD Server taken from a CentOS 6.6 host. To be perfectly honest,
    we are far more interested in the configuration file, as Red Hat or CentOS supply
    it, than the actual configuration changes that we will make. Our purpose is to
    learn how we can extract data from the system-supplied file and create a template
    from it. We can apply this to Apache configuration files or any other text data
    file. It is the methodology, we are not looking at the actual result.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将使用从CentOS 6.6主机中获取的Apache 2.2 HTTPD服务器的`httpd.conf`文件。坦率地说，我们对配置文件更感兴趣，因为Red
    Hat或CentOS提供它，而不是我们将进行的实际配置更改。我们的目的是学习如何从系统提供的文件中提取数据并创建模板。我们可以将此应用于Apache配置文件或任何其他文本数据文件。这是方法论，我们不关注实际结果。
- en: 'To have some understanding of what we are trying to do, we must first look
    at the /`etc/httpd/conf/httpd.conf` file that is shipped with Enterprise Linux
    6, that is, CentOS, Red Hat Enterprise Linux, or Scientific Linux. The following
    screenshot shows the virtual host section of the file that we are interested in:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对我们要做的事情有一些了解，我们必须首先查看随Enterprise Linux 6一起提供的`/etc/httpd/conf/httpd.conf`文件，即CentOS、Red
    Hat Enterprise Linux或Scientific Linux。以下截图显示了我们感兴趣的文件的虚拟主机部分。
- en: '![Apache name-based Virtual Hosts](img/00088.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![基于名称的Apache虚拟主机](img/00088.jpeg)'
- en: Looking at these lines, we can see that they are commented and this is all a
    part of a monolithic `httpd.conf`. While creating Virtual Hosts, we normally preferred
    separate configurations for each of our potential Virtual Hosts. We need to be
    able to extract this data from the main file and at the same time uncomment it.
    We can then save this uncommented data as a template.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 看着这些行，我们可以看到它们被注释了，这都是一个单一的`httpd.conf`的一部分。在创建虚拟主机时，我们通常更喜欢为每个潜在的虚拟主机单独配置。我们需要能够从主文件中提取这些数据，并同时取消注释。然后我们可以将这些取消注释的数据保存为模板。
- en: Using this template, we will create new configuration files that represent different
    named `hosts` that we need to have running on one instance of Apache. This enables
    us to host `sales.example.com` and `marketing.example.com` on the single server.
    Both sales and marketing will have their own configuration and websites independent
    from each other. Additionally, it will also be very easy to add additional sites
    that we need with the template we create. It becomes the task of the main web
    server to read the incoming HTTP header requests to the server and direct them
    to the correct site based on the domain name used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个模板，我们将创建新的配置文件，代表我们需要在一个Apache实例上运行的不同命名的`hosts`。这使我们能够在单个服务器上托管`sales.example.com`和`marketing.example.com`。销售和营销将拥有各自独立的配置和网站。此外，使用我们创建的模板也很容易添加我们需要的其他站点。主要的Web服务器的任务是读取传入的HTTP头请求，并根据使用的域名将其定向到正确的站点。
- en: Our first task then will be to extract the data present between the opening
    and closing `VirtualHost` tags, uncomment it and save this to a template. This
    will only need to be done once and will not be a part of our main script to create
    the Virtual Hosts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个任务是提取在开放和关闭`VirtualHost`标签之间的数据，取消注释并保存到模板中。这只需要做一次，不会成为创建虚拟主机的主要脚本的一部分。
- en: Creating the Virtual Hosts template
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建虚拟主机模板
- en: As we are not going to test the Virtual Hosts we create, we will make a copy
    of the `httpd.conf` file and work with that locally in our home directory. This
    is a good practice while developing the scripts so as not to impact the working
    configuration. The `httpd.conf` file that I am working with should be able to
    be downloaded with other script resources referred to in the script from the publisher.
    Alternatively, you can copy it from your Enterprise Linux 6 host with Apache installed.
    Make sure that the `httpd.conf` file is copied to your home directory and that
    you are working in your home directory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不打算测试我们创建的虚拟主机，我们将复制`httpd.conf`文件并在本地家目录中使用。在开发脚本时，这是一个很好的做法，以免影响工作配置。我正在使用的`httpd.conf`文件应该能够从发布者引用的其他脚本资源中下载。或者，您可以从安装了Apache的企业Linux
    6主机上复制它。确保将`httpd.conf`文件复制到您的家目录，并且您正在家目录中工作。
- en: First steps
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步
- en: The very first step in creating the template is to isolate the lines that we
    need. In our case, this will be the lines included in the sample virtual host
    definition that we saw in the earlier screenshot. This includes the opening and
    closing tag for the `VirtualHost` and everything in between. We can use line numbers
    for this; however, this probably will not be reliable, as we will need to assume
    that nothing has changed in the file for the line numbers to be consistent. For
    completeness, we will show this before moving onto a more reliable mechanism.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板的第一步是隔离我们需要的行。在我们的情况下，这将是在之前的屏幕截图中看到的示例虚拟主机定义中包括的行。这包括`VirtualHost`的开放和关闭标签以及中间的所有内容。我们可以使用行号来实现这一点；但是，这可能不太可靠，因为我们需要假设文件中的内容没有发生变化，行号才能保持一致。为了完整起见，我们将在转向更可靠的机制之前展示这一点。
- en: 'First, we will remind ourselves of how we can print the whole file with `sed`.
    This is important, as in the next step we will filter the display and show only
    the lines that we want:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将回顾一下如何使用`sed`打印整个文件。这很重要，因为在下一步中，我们将过滤显示并仅显示我们想要的行：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `-n` option is used to suppress the standard output and the `sed` command
    within the quotes is `p`, it is used to display the pattern match. As we have
    not filtered anything here, the matched pattern is the complete file. If we were
    to use line numbers to filter, we could add line numbers easily with `sed`, as
    shown in the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-n`选项来抑制标准输出，引号内的`sed`命令是`p`，用于显示模式匹配。由于我们在这里没有过滤任何内容，匹配的模式就是整个文件。如果我们要使用行号进行过滤，可以使用`sed`轻松添加行号，如下命令所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'From the following screenshot, we can see that in this system we need to work
    with just lines, from `1003` to `1009`; however, I do stress again that these
    numbers may vary from file to file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下屏幕截图中，我们可以看到在这个系统中，我们需要处理的行是从`1003`到`1009`；但是，我再次强调，这些数字可能会因文件而异：
- en: '![First steps](img/00089.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![第一步](img/00089.jpeg)'
- en: Isolating lines
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隔离行
- en: 'To display these lines encased with the tags, we can add a number range to
    `sed`. This is easily achieved by adding those numbers to `sed`, as shown in the
    following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示这些带有标签的行，我们可以在`sed`中添加一个数字范围。通过将这些数字添加到`sed`中，可以轻松实现这一点，如下命令所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the range of line specified, we have easily been able to isolate the lines
    that we required and the only lines that are now displayed are those of the Virtual
    Host definition. We can see this in the following screenshot, which displays both
    the command and the output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定行范围，我们已经成功地隔离了我们需要的行，现在显示的只有虚拟主机定义的行。我们可以在以下屏幕截图中看到这一点，其中显示了命令和输出：
- en: '![Isolating lines](img/00090.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![隔离行](img/00090.jpeg)'
- en: The issue that we face while hard coding in the line numbers is that we lose
    flexibility. These line numbers relate to this file and maybe only this file.
    We will always need to check the correct line numbers in the file that relate
    to the file we are working with. This could be an issue if the lines were not
    conveniently at the end of the file and we will have to scroll back to try and
    locate the correct lines number. To overcome these issues, instead of using line
    numbers we can implement a search for the opening and closing tags directly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬编码行号时面临的问题是我们失去了灵活性。这些行号与这个文件相关，可能只与这个文件相关。我们将始终需要检查与我们正在处理的文件相关的文件中的正确行号。如果行不方便地位于文件的末尾，我们将不得不向后滚动以尝试找到正确的行号。为了克服这些问题，我们可以实现对开放和关闭标签的直接搜索，而不是使用行号。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We are no longer using the starting number and ending number but the more reliable
    starting regular expression and closing regular expression. The opening regular
    expression looks for the line that begins with `#<VirtualHost`. The ending regular
    expression is searching for the closing tag. However, we need to protect the `/VirtualHost`
    with an escape character. By looking at the end `RE`, we see that it translates
    to lines that begin with `#\/VirtualHost`, with the escaped forward slash.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再使用起始号码和结束号码，而是更可靠的起始正则表达式和结束正则表达式。开头的正则表达式寻找以`#<VirtualHost`开头的行。结束的正则表达式正在寻找关闭标签。但是，我们需要用转义字符保护`/VirtualHost`。通过查看结束的正则表达式，我们看到它转换为以`#\/VirtualHost`开头的行，带有转义的斜杠。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you recall from [Chapter 8](part0056_split_000.html#1LCVG2-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 8. Introducing sed"), *Introducing sed*, we specify the lines that begin
    with a specified character by using the carat (`^`).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得[第8章](part0056_split_000.html#1LCVG2-747571d9b4814e1dbffcdef2eb0dec8d
    "第8章。介绍sed")中的内容，*介绍sed*，我们可以使用插入符(`^`)指定以指定字符开头的行。
- en: 'By looking at the following screenshot we can now isolate the required lines
    more reliably and without knowing the lines numbers. This is more desirable across
    edited files, which will differ in their line numbering:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看以下屏幕截图，我们现在可以更可靠地隔离所需的行，而无需知道行号。这在编辑过的文件中更可取，这些文件的行号会有所不同：
- en: '![Isolating lines](img/00091.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![隔离行](img/00091.jpeg)'
- en: sed script files
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sed脚本文件
- en: Isolating the lines was only the first step! We still have to uncomment the
    lines and then save the result as a template. Although we can write this as one
    single `sed` command string, we can already see that it will be awkwardly long,
    difficult to read, and edit. Thankfully, the `sed` command does have the option
    to read its commands from an input file often known as a script. We use the `-f`
    option with `sed` to specify the file we want to read as our control. For more
    details on all of the options of `sed,` the main page is extensive.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离行只是第一步！我们仍然需要取消注释这些行，然后将结果保存为模板。虽然我们可以将其写成一个单独的`sed`命令字符串，但我们已经看到它会非常冗长，难以阅读和编辑。幸运的是，`sed`命令确实有从输入文件（通常称为脚本）读取命令的选项。我们使用`-f`选项与`sed`一起指定要读取的文件作为我们的控制。有关`sed`的所有选项的更多详细信息，请参阅主页。
- en: We have already seen that we can correctly isolate the correct lines from the
    file. So, the first line of the script configures the lines that we will work
    with. We implement the brace brackets `{}` to define a code block immediately
    after the selected lines. A code block is one or more commands that we want to
    run on a given selection.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到我们可以正确地从文件中隔离出正确的行。因此，脚本的第一行配置了我们要处理的行。我们使用大括号`{}`来定义所选行后面的代码块。代码块是我们想要在给定选择上运行的一个或多个命令。
- en: 'In our case, the first command will be to remove the comment and the second
    command will be to write the pattern space to a new file. The `sed` script should
    look like the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，第一个命令将是删除注释，第二个命令将是将模式空间写入新文件。`sed`脚本应该如下例所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can save this file as `$HOME/vh.sed`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此文件保存为`$HOME/vh.sed`。
- en: 'In the first line, we select the lines to work with, as we have previously
    seen and then open the code block with the left brace. In line 2, we use the substitute
    command, `s`. This looks for lines that start with a comment or `#`. We replace
    the comment with an empty string. There are no characters or spaces between the
    middle and end forward slash. In English, we are uncommenting the line but to
    the code this is replacing the `#` with an empty string. The final line of code
    uses the `write` command, `w`, to save this to `template.txt`. To help you see
    this, we have included the following screenshot of the `vh.sed` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们选择要处理的行，就像我们之前看到的那样，然后用左大括号打开代码块。在第2行，我们使用替换命令`s`。这将查找以注释或`#`开头的行。我们用空字符串替换注释。中间和结束的斜杠之间没有字符或空格。用英语来说，我们是在取消注释该行，但对于代码来说，这是用空字符串替换`#`。代码的最后一行使用`write`命令`w`将其保存到`template.txt`。为了帮助您看到这一点，我们已经包含了`vh.sed`文件的以下截图：
- en: '![sed script files](img/00092.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![sed脚本文件](img/00092.jpeg)'
- en: 'We can see all of our efforts come to fruition now by ensuring that we are
    in the same directory as the `httpd.conf` and `vh.sed` files that are executing
    the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们所有的努力都得到了成果，只要确保我们在执行以下命令的`httpd.conf`和`vh.sed`文件所在的同一目录中：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We have now created the `template.txt` file within our working directory. This
    is the isolated uncommented text from the `httpd.conf` file. In simple terms,
    we have extracted the seven correct lines from over 1000 lines of text in milliseconds,
    removed the comment, and saved the result as a new file. The `template.txt` file
    is displayed in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在我们的工作目录中创建了`template.txt`文件。这是从`httpd.conf`文件中隔离出的取消注释文本。简单来说，我们从数千行文本中提取了七行正确的文本，删除了注释，并将结果保存为新文件。`template.txt`文件显示在以下截图中：
- en: '![sed script files](img/00093.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![sed脚本文件](img/00093.jpeg)'
- en: Now, we have a template file that we can begin to work with to create Virtual
    Host definitions. Even though its Apache that we have been looking at, the same
    idea of uncommenting the text or removing the first character of selected lines
    can apply to many situations, so take this as an idea of what `sed` can do.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个模板文件，可以开始使用它来创建虚拟主机定义。即使我们一直在看Apache，取消注释文本或删除所选行的第一个字符的相同想法也可以适用于许多情况，因此将其视为`sed`可以做什么的一个想法。
- en: Automating Virtual Host creation
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动创建虚拟主机
- en: 'After having created the template, we can now use this to create Virtual Host
    configurations. In the simplest terms, we need to replace the `dummy-host.example.com`
    URL with `sales.example.com` or `marketing.example.com` URL. Of course we have
    to also create the `DocumentRoot` directory, the directory where the web pages
    will be and also add some basic content. When we use a script to run through the
    process nothing will be forgotten and the edits will be accurate every time. The
    basics of the script will be as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了模板之后，我们现在可以使用它来创建虚拟主机配置。简单来说，我们需要将`dummy-host.example.com` URL替换为`sales.example.com`或`marketing.example.com`
    URL。当然，我们还需要创建`DocumentRoot`目录，这是网页所在的目录，并添加一些基本内容。当我们使用脚本运行整个过程时，不会遗漏任何内容，每次编辑都将准确无误。脚本的基本内容如下：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we ignore the shebang as the first line, we should know this by now. We
    can start our explanation in line 2 of the script:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们忽略第一行的shebang，我们现在应该知道了。我们可以从脚本的第2行开始解释：
- en: '| Line | Meaning |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 行 | 意思 |'
- en: '| --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `WEBDIR=/www/docs/` | We initialize the `WEDIR` variable that we store in
    the path to the directory that will hold the different websites. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `WEBDIR=/www/docs/` | 我们初始化`WEDIR`变量，将其存储在将容纳不同网站的目录的路径中。 |'
- en: '| `CONFDIR=/etc/httpd/conf.d` | We initialize the `CONFDIR` variable that we
    will use to store the newly created Virtual Host configuration file. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `CONFDIR=/etc/httpd/conf.d` | 我们初始化`CONFDIR`变量，用于存储新创建的虚拟主机配置文件。 |'
- en: '| `TEMPLATE=$HOME/template.txt` | We initialize the variable that we will use
    for the template. This should point to the path of your template. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `TEMPLATE=$HOME/template.txt` | 我们初始化将用于模板的变量。这应该指向您的模板路径。 |'
- en: '| `[ -d $CONFDIR ] &#124;&#124; mkdir -p "$CONFDIR"` | On a working EL6 host,
    this directory will exist and is included in the main configuration. If we are
    running this as a pure test, then we can create a directory to prove that we can
    create the correct configurations within the target directory. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `[ -d $CONFDIR ] &#124;&#124; mkdir -p "$CONFDIR"` | 在一个工作的EL6主机上，这个目录将存在并包含在主配置中。如果我们将其作为纯测试运行，那么我们可以创建一个目录来证明我们可以在目标目录中创建正确的配置。|'
- en: '| `sed s/dummy-host.example.com/$1/ $TEMPLATE >$CONFDIR/$1.conf` | The `sed`
    command works as an engine in the script running the search and replace operations.
    Using the substitute command in `sed`, we search for the dummy text and replace
    it with the argument passed to the script. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `sed s/dummy-host.example.com/$1/ $TEMPLATE >$CONFDIR/$1.conf` | `sed`命令作为脚本中运行搜索和替换操作的引擎。使用`sed`中的替换命令，我们搜索虚拟文本并用传递给脚本的参数替换它。|'
- en: '| `mkdir -p $WEBDIR/$1` | Here, we create the correct subdirectory to house
    the websites for the new Virtual Host. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `mkdir -p $WEBDIR/$1` | 在这里，我们创建正确的子目录来存放新虚拟主机的网站。|'
- en: '| `echo "New site for $1" > $WEBDIR/$1/index.html` | In this final step, we
    create a basic holding page for the website. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `echo "New site for $1" > $WEBDIR/$1/index.html` | 在最后一步中，我们为网站创建一个基本的临时页面。|'
- en: 'We can create this script as `$HOME/bin/vhost.sh`. This is illustrated in the
    following screenshot. Don''t forget to add the execute permission:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此脚本创建为`$HOME/bin/vhost.sh`。如下截图所示。不要忘记添加执行权限：
- en: '![Automating Virtual Host creation](img/00094.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![自动化虚拟主机创建](img/00094.jpeg)'
- en: 'To create the sales Virtual Host and web page, we can run the script as shown
    in the following example. We will be running the script directly as the root user.
    Alternatively, you may choose to make use of the `sudo` command within the script:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建销售虚拟主机和网页，我们可以按照以下示例运行脚本。我们将直接以root用户身份运行脚本。或者，您也可以选择在脚本中使用`sudo`命令：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now see how easily we can create Virtual Hosts using a well-crafted
    script. The configuration file for the Virtual Host will be created in the `/etc/httpd/conf.d/`
    directory and will be named `sales.example.com.conf`. The file will look similar
    to the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到，使用精心制作的脚本可以轻松创建虚拟主机。虚拟主机的配置文件将在`/etc/httpd/conf.d/`目录中创建，并命名为`sales.example.com.conf`。该文件将类似于以下截图：
- en: '![Automating Virtual Host creation](img/00095.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![自动化虚拟主机创建](img/00095.jpeg)'
- en: 'The website content must have been created in the /`www/docs/sales.example.com`
    directory. This will be a simple holding page that proves the point that we can
    do this from the script. Using the following command, we can list the content
    or the base directory that we use to house each site:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 网站内容必须已经创建在`/www/docs/sales.example.com`目录中。这将是一个简单的临时页面，证明我们可以从脚本中做到这一点。使用以下命令，我们可以列出用于存放每个站点的内容或基本目录：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `-R` option allows for the recursive listing. We have used the `/www/docs`
    directory purely as this is set in the original Virtual Host definition that we
    extracted. You may prefer to use `/var/www` or something similar if working in
    a live environment rather than creating the new directory at the root of your
    file system. It will be a simple matter of editing the template that we created
    and that too could be done with `sed` at the time of template creation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`-R`选项允许递归列出。我们纯粹使用`/www/docs`目录，因为这是我们提取的原始虚拟主机定义中设置的。如果在实际环境中工作，您可能更喜欢使用`/var/www`或类似的内容，而不是在文件系统根目录创建新目录。编辑我们创建的模板将是一件简单的事情，也可以在模板创建时使用`sed`完成。'
- en: Prompting for data during site creation
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在站点创建过程中提示数据
- en: We can now use the script to create the Virtual Hosts and the content but we
    have not allowed for any customization other than the Virtual Host name. Of course,
    this is important. After all it is this Virtual Host name that is used in the
    configuration itself as well as in setting the website directory and the configuration
    file name.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用脚本来创建虚拟主机和内容，但除了虚拟主机名称之外，我们还没有允许任何定制。当然，这很重要。毕竟，正是这个虚拟主机名称在配置本身以及设置网站目录和配置文件名中使用。
- en: It is possible that we could allow additional options to be specified during
    the Virtual Host creation. We will use `sed` to insert the data as required. The
    `sed` command `i` is to insert data before the selection and `a` to append after
    the selection.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以允许在虚拟主机创建过程中指定附加选项。我们将使用`sed`根据需要插入数据。`sed`命令`i`用于在选择之前插入数据，`a`用于在选择之后追加数据。
- en: For our example, we will add a host restriction to allow only the local network
    access to the website. We are more interested in inserting data into the file
    rather than what we are doing with the specific HTTP configuration file. Within
    the script that we will be adding `read` prompts in the script and inserting a
    `Directory` block into the configuration.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将添加主机限制，只允许本地网络访问网站。我们更感兴趣的是将数据插入文件中，而不是我们在特定HTTP配置文件中所做的事情。在脚本中，我们将添加`read`提示，并在配置中插入`Directory`块。
- en: 'To try and explain what we are trying to do, we should see something similar
    to the following when executing the script. You can see this from the text that
    we are creating for the marketing site and adding in restrictions as to who can
    access the site:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试解释我们要做的事情，当执行脚本时，我们应该看到类似于以下内容。您可以从我们为营销站点创建的文本中看到这一点，并添加对谁可以访问站点的限制：
- en: '![Prompting for data during site creation](img/00096.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![在站点创建过程中提示数据](img/00096.jpeg)'
- en: As you can see, we can ask two questions, but if needed, more of them can be
    added to support customization; the idea being that the additional customization
    should be accurate and reliable in the same way as the script creation was. You
    may also choose to elaborate the questions with sample answers, so that the user
    knows how the network address should be formatted.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们可以提出两个问题，但如果需要，可以添加更多问题以支持定制；其想法是，额外的定制应该像脚本创建一样准确可靠。您还可以选择用示例答案详细说明问题，以便用户知道网络地址应该如何格式化。
- en: 'To aide script creation, we will copy the original `vhost.sh` to `vhost2.sh`.
    We can tidy up a few items in the script to allow for easier expansion and then
    add in the additional prompts. The new script will look similar to the following
    code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助脚本创建，我们将原始的`vhost.sh`复制到`vhost2.sh`。我们可以整理脚本中的一些项目，以便更容易扩展，然后添加额外的提示。新脚本将类似于以下代码：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that we are not running too many checks in the script. This is to
    keep our focus on the elements that we are adding rather than a robust script.
    In your own environment, once you have the script working the way you want you
    may need to implement more checks to ensure the script reliability.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在脚本中没有运行太多检查。这是为了让我们专注于添加的元素而不是一个健壮的脚本。在您自己的环境中，一旦脚本按您希望的方式工作，您可能需要实施更多的检查以确保脚本的可靠性。
- en: As you can see, we have a few more lines. The `WEBDIR` variable has been adjusted
    to contains the full path to the directory and in a similar way we have added
    a new variable `CONFFILE`, so that we can make a reference to the file directly.
    If the answer to the first prompt is `n` and the user wants no additional customization,
    the script will exit. If they answer anything other than `n` for No, the script
    will continue and prompt the network to grant access. We can then use `sed` to
    edit the existing configuration and insert the new directory block. This will
    default to deny access but allow from the `localhost` and `NETWORK` variables.
    We refer to the `localhost` as `127.0.0.1` in the code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有更多的行。`WEBDIR`变量已经调整为包含目录的完整路径，类似地，我们添加了一个新变量`CONFFILE`，以便我们可以直接引用文件。如果对第一个提示的答案是`n`，并且用户不需要额外的定制，脚本将退出。如果他们对“否”回答任何其他答案，脚本将继续并提示网络授予访问权限。然后我们可以使用`sed`来编辑现有配置并插入新的目录块。这将默认拒绝访问，但允许`localhost`和`NETWORK`变量。我们在代码中将`localhost`称为`127.0.0.1`。
- en: 'To simplify the code for better understanding, the pseudo-code will look like
    the following example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化代码以便更好地理解，伪代码将如下例所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Where `SearchText` represents the line in the file before which we want to insert
    our text. Also, `NewText` represents the new line or lines that will be added
    before the `SearchText`. The `i` command directly following the `SearchText` dictates
    that we are inserting text. Using the `a` command to append will mean that the
    text we add will be added after the `SearchText`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`SearchText`代表我们要在其前插入文本的文件中的行。此外，`NewText`代表将在`SearchText`之前添加的新行或多行。直接跟在`SearchText`后面的`i`命令表示我们正在插入文本。使用`a`命令进行追加意味着我们添加的文本将在`SearchText`之后添加。
- en: 'We can see the resulting configuration file for `marketing.example.com`, as
    we have created it with the additional **Directory** block added in the following
    screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`marketing.example.com`的结果配置文件，因为我们已经创建了它，并在以下截图中添加了额外的**Directory**块：
- en: '![Prompting for data during site creation](img/00097.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![在站点创建期间提示数据](img/00097.jpeg)'
- en: We can see that we have added the new block above the closing `VirtualHost`
    tag. In the script, this is the `SearchText` that we use. The **Directory** block
    we add replaces the `NewText` in the pseudo-code. When we look at it, it appears
    more complex as we have embedded the new lines with `\n` and formatted the file
    for easier reading with the line continuation character `\`. Again, we have to
    emphasize that this edit was easy and accurate once the script is created.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经在关闭的`VirtualHost`标签上方添加了新块。在脚本中，这是我们使用的`SearchText`。我们添加的**Directory**块替换了伪代码中的`NewText`。当我们看它时，它看起来更复杂，因为我们使用`\n`嵌入了新行，并使用行继续字符`\`格式化文件以便更容易阅读。再次强调，一旦脚本创建完成，这种编辑是容易和准确的。
- en: 'For completeness, we include the screenshot of the script `vhost2.sh` in the
    following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，我们在以下截图中包括了脚本`vhost2.sh`的截图：
- en: '![Prompting for data during site creation](img/00098.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![在站点创建期间提示数据](img/00098.jpeg)'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how we can extend `sed` into some very cool scripts
    that have allowed us to extract data from files, uncomment selected lines and
    write new configurations. Not stopping at that we also saw how we could use `sed`
    with script that inserts new lines into existing files. I thought that `sed` will
    very quickly become your friend and we have created some powerful scripts to support
    the learning experience.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何将`sed`扩展到一些非常酷的脚本中，这些脚本使我们能够从文件中提取数据，取消注释选定的行并编写新的配置。我们还看到了如何使用`sed`与脚本，将新行插入现有文件中。我认为`sed`很快就会成为您的朋友，我们已经创建了一些强大的脚本来支持学习体验。
- en: You may already know this but `sed` has a big brother `awk`. In the next chapter,
    we are going to see how we can use `awk` to extract data from files.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经知道这一点，但`sed`有一个大哥`awk`。在下一章中，我们将看到如何使用`awk`从文件中提取数据。
