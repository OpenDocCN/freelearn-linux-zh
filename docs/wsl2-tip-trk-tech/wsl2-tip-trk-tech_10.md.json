["```\n$ cat /etc/wsl.conf\n[network]\ngenerateHosts = true\ngenerateResolvConf = true\n[user]\ndefault=stuart\n```", "```\nsudo bash -c \"echo -e '\\n[user]\\ndefault=$(whoami)' >> /etc/wsl.conf\"\n```", "```\nwsl --export Ubuntu-18.04 c:\\temp\\Ubuntu-18.04.tar\n```", "```\nPS C:\\> wsl --list --verbose\n\u00a0\u00a0NAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0STATE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VERSION\n* Ubuntu-20.04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\n\u00a0\u00a0Legacy\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n\u00a0\u00a0Ubuntu-18.04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Converting\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\nPS C:\\>\n```", "```\nwsl --import Ubuntu-18.04-Copy C:\\wsl-distros\\Ubuntu-18.04-Copy C:\\temp\\Ubuntu-18.04.tar\n```", "```\nPS C:\\ > wsl --list --verbose\n\u00a0\u00a0NAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0STATE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VERSION\n* Ubuntu-20.04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\n\u00a0\u00a0Legacy\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n\u00a0\u00a0Ubuntu-18.04-Copy\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Installing\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\n\u00a0\u00a0Ubuntu-18.04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stopped\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\nPS C:\\Users\\stuar>\n```", "```\n    dotnet to make it easier to refer to it later. We also passed the -it switches to start the container with interactive access \u2013 note the final line in the previous output showing that we're at a shell prompt inside the container.\n    ```", "```\n    useradd command to create a new user called stuart (but feel free to pick a different name!) and the -m switch ensures that the user home directory is created. After that, we use the passwd command to set a password for the user.\n    ```", "```\n    echo command to set the file content, but you can use your favorite terminal text editor if you prefer. After writing the file, we dump it out to show the contents \u2013 be sure to set the value of the default property to match the user you created here.\n    ```", "```\nroot@62bdd6b50070:/# exit\nexit\nPS C:\\> docker ps -a\nCONTAINER ID\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IMAGE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0COMMAND\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATED\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0STATUS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PORTS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NAMES\n62bdd6b50070\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mcr.microsoft.com/dotnet/sdk:5.0\u00a0\u00a0\u00a0\"bash\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a052 minutes ago\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Exited (0) 7 seconds ago \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dotnet\n```", "```\ndocker export -o c:\\temp\\dotnet.tar dotnet\n```", "```\nwsl --import dotnet5 C:\\wsl-distros\\dotnet5 C:\\temp\\dotnet.tar --version 2\n```", "```\nPS C:\\> wsl -d dotnet5 bash\nstuart@wfhome:/mnt/c$ whoami\nstuart\nstuart@wfhome:/mnt/c$ \n```", "```\n    stuart@wfhome:~$ dotnet new webapp --name new-web-app\n    The template \"ASP.NET Core Web App\" was created successfully.\n    This template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore/5.0-third-party-notices for details.\n    Processing post-creation actions...\n    Running 'dotnet restore' on new-web-app/new-web-app.csproj...\n    \u00a0\u00a0Determining projects to restore...\n    \u00a0\u00a0Restored /home/stuart/new-web-app/new-web-app.csproj (in 297 ms).\n    Restore succeeded.\n    ```", "```\n    stuart@wfhome:~$ cd new-web-app/\n    stuart@wfhome:~/new-web-app$ dotnet run\n    warn: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[35]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0No XML encryptor configured. Key {d4a5da2e-44d5-4bf7-b8c9-ae871b0cdc42} may be persisted to storage in unencrypted form.\n    info: Microsoft.Hosting.Lifetime[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Now listening on: https://localhost:5001\n    info: Microsoft.Hosting.Lifetime[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Now listening on: http://localhost:5000\n    info: Microsoft.Hosting.Lifetime[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Content root path: /home/stuart/new-web-app\n    ^Cinfo: Microsoft.Hosting.Lifetime[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Application is shutting down...\n    ```", "```\nFROM mcr.microsoft.com/dotnet/sdk:5.0\nARG USERNAME\nARG PASSWORD\nRUN useradd -m ${USERNAME}\nRUN bash -c 'echo -e \"${PASSWORD}\\n${PASSWORD}\\n\" | passwd ${USERNAME}'\nRUN bash -c 'echo -e \"[user]\\ndefault=${USERNAME}\" > /etc/wsl.conf'\nRUN usermod -aG sudo ${USERNAME}\nRUN apt-get update && apt-get -y install sudo \n```", "```\ndocker build -t dotnet-test -f Dockerfile --build-arg USERNAME=stuart --build-arg PASSWORD=ticONUDavE .\ndocker run --name dotnet-test-instance dotnet-test\ndocker export -o c:\\temp\\chapter-08-dotnet.tar dotnet-test-instance\ndocker rm dotnet-test-instance\n```", "```\nwsl --import chapter-08-dotnet c:\\wsl-distros\\chapter-08-dotnet c:\\temp\\chapter-08-dotnet.tar\n```", "```\nRUN\u00a0\u00a0curl -sL https://aka.ms/InstallAzureCLIDeb | bash\n```"]