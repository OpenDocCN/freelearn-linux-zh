["```\ngit clone https://github.com/PacktPublishing/Linux-Kernel-Programming\n```", "```\n$ arm-linux-gnueabihf-gcc\narm-linux-gnueabihf-gcc: fatal error: no input files\ncompilation terminated.\n$ \n```", "```\ncd <dest-dir>/ch5/cross\n```", "```\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-\n```", "```\n$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make -C /lib/modules/5.4.0-llkd01/build/ M=/home/llkd/book_llkd/Linux-Kernel-Programming/ch5/cross modules\nmake[1]: Entering directory '/home/llkd/kernels/linux-5.4'\n  CC [M]  /home/llkd/book_llkd/Linux-Kernel-Programming/ch5/cross/helloworld_lkm.o\narm-linux-gnueabihf-gcc: error: unrecognized command line option \u2018-fstack-protector-strong\u2019\nscripts/Makefile.build:265: recipe for target '/home/llkd/book_llkd/Linux-Kernel-Programming/ch5/cross/helloworld_lkm.o' failed\n[...]\nmake: *** [all] Error 2\n$ \n```", "```\n# ch5/cross/Makefile:\n# To support cross-compiling for kernel modules:\n# For architecture (cpu) 'arch', invoke make as:\n# make ARCH=<arch> CROSS_COMPILE=<cross-compiler-prefix> \nifeq ($(ARCH),arm)\n  # *UPDATE* 'KDIR' below to point to the ARM Linux kernel source tree on \n  # your box\n  KDIR ?= ~/rpi_work/kernel_rpi/linux\nelse ifeq ($(ARCH),arm64)\n  # *UPDATE* 'KDIR' below to point to the ARM64 (Aarch64) Linux kernel \n  # source tree on your box\n  KDIR ?= ~/kernel/linux-4.14\nelse ifeq ($(ARCH),powerpc)\n  # *UPDATE* 'KDIR' below to point to the PPC64 Linux kernel source tree  \n  # on your box\n  KDIR ?= ~/kernel/linux-4.9.1\nelse\n  # 'KDIR' is the Linux 'kernel headers' package on your host system; this \n  # is usually an x86_64, but could be anything, really (f.e. building \n  # directly on a Raspberry Pi implies that it's the host)\n  KDIR ?= /lib/modules/$(shell uname -r)/build\nendif\n\nPWD          := $(shell pwd)\nobj-m        += helloworld_lkm.o\nEXTRA_CFLAGS += -DDEBUG\n\nall:\n    @echo\n    @echo '--- Building : KDIR=${KDIR} ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} EXTRA_CFLAGS=${EXTRA_CFLAGS} ---'\n    @echo\n    make -C $(KDIR) M=$(PWD) modules\n[...]\n```", "```\n$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- \n--- Building : KDIR=~/rpi_work/kernel_rpi/linux ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- EXTRA_CFLAGS=-DDEBUG ---\n\nmake -C ~/rpi_work/kernel_rpi/linux M=/home/llkd/booksrc/ch5/cross modules\nmake[1]: Entering directory '/home/llkd/rpi_work/kernel_rpi/linux'\n\nERROR: Kernel configuration is invalid.\n include/generated/autoconf.h or include/config/auto.conf are missing.\n Run 'make oldconfig && make prepare' on kernel src to fix it.\n\n WARNING: Symbol version dump ./Module.symvers\n is missing; modules will have no dependencies and modversions.\n[...]\nmake: *** [all] Error 2\n$ \n```", "```\n$ cd ~/rpi-work/kernel_rpi/linux $ make ARCH=arm bcmrpi_defconfig\n#\n# configuration written to .config\n#\n$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- oldconfig\nscripts/kconfig/conf --oldconfig Kconfig\n#\n# configuration written to .config\n#\n$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- prepare\nscripts/kconfig/conf --silentoldconfig Kconfig\n CHK include/config/kernel.release\n UPD include/config/kernel.release\n WRAP arch/arm/include/generated/asm/bitsperlong.h\n WRAP arch/arm/include/generated/asm/clkdev.h\n [...]\n$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-\n CHK include/config/kernel.release\n CHK include/generated/uapi/linux/version.h\n CHK include/generated/utsrelease.h\n [...]\n HOSTCC scripts/recordmcount\n HOSTCC scripts/sortextable\n [...]\n$\n```", "```\n$ ls -l\ntotal 12\n-rw-rw-r-- 1 llkd llkd 1456 Mar 18 17:48 helloworld_lkm.c\n-rw-rw-r-- 1 llkd llkd 6470 Jul  6 17:30 Makefile\n$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- --- Building : KDIR=~/rpi_work/kernel_rpi/linux ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- EXTRA_CFLAGS=-DDEBUG ---\n\nmake -C ~/rpi_work/kernel_rpi/linux M=/home/llkd/booksrc/ch5/cross modules\nmake[1]: Entering directory '/home/llkd/rpi_work/kernel_rpi/linux' \n WARNING: Symbol version dump ./Module.symvers\n is missing; modules will have no dependencies and modversions.\n\nBuilding for: ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- EXTRA_CFLAGS= -DDEBUG\n CC [M] /home/llkd/book_llkd/Linux-Kernel-Programming/ch5/cross/helloworld_lkm.o\n\u200b  Building modules, stage 2.\n  MODPOST 1 modules\n  CC /home/llkd/booksrc/ch5/cross/helloworld_lkm.mod.o\n  LD [M] /home/llkd/booksrc/ch5/cross/helloworld_lkm.ko\nmake[1]: Leaving directory '/home/llkd/rpi_work/kernel_rpi/linux'\n$ file ./helloworld_lkm.ko \n./helloworld_lkm.ko: ELF 32-bit LSB relocatable, ARM, EABI5 version 1 (SYSV), BuildID[sha1]=17...e, not stripped\n$\n```", "```\n$ sudo insmod ./helloworld_lkm.ko insmod: ERROR: could not insert module ./helloworld_lkm.ko: Invalid module format $ \n```", "```\nrpi ~ $ cat /proc/version \nLinux version 4.19.75-v7+ (dom@buildbot) (gcc version 4.9.3 (crosstool-NG crosstool-ng-1.22.0-88-g8460611)) #1270 SMP Tue Sep 24 18:45:11 BST 2019\nrpi ~ $ modinfo ./helloworld_lkm.ko \nfilename: /home/pi/./helloworld_lkm.ko\nversion: 0.1\nlicense: Dual MIT/GPL\ndescription: LLKD book:ch5/cross: hello, world, our first Raspberry Pi LKM\nauthor: Kaiwan N Billimoria\nsrcversion: 7DDCE78A55CF6EDEEE783FF\ndepends: \nname: helloworld_lkm\nvermagic: 5.4.51-v7+ SMP mod_unload modversions ARMv7 p2v8 \nrpi ~ $ \n```", "```\n$ dmesg |tail -n2 [ 296.130074] helloworld_lkm: no symbol version for module_layout\n[ 296.130093] helloworld_lkm: version magic '5.4.51-v7+ mod_unload modversions ARMv6 p2v8 ' should be '4.19.75-v7+ SMP mod_unload modversions ARMv7 p2v8 ' $ \n```", "```\nrpi $ cat /boot/config.txt\n[...]\n# KNB: enable the UART (for the adapter cable: USB To RS232 TTL UART \n# PL2303HX Converter USB to COM)\nenable_uart=1\n# KNB: select the kernel to boot from via kernel=xxx\n#kernel=kernel7.img.orig\nkernel=zImage\nrpi $ \n```", "```\n// ch5/min_sysinfo/min_sysinfo.c\n[ ... ]\nvoid llkd_sysinfo(void)\n{\n    char msg[128];\n\n    memset(msg, 0, strlen(msg));\n    snprintf(msg, 47, \"%s(): minimal Platform Info:\\nCPU: \", __func__);\n\n    /* Strictly speaking, all this #if... is considered ugly and should be\n     * isolated as far as is possible */\n#ifdef CONFIG_X86\n#if(BITS_PER_LONG == 32)\n    strncat(msg, \"x86-32, \", 9);\n#else\n    strncat(msg, \"x86_64, \", 9);\n#endif\n#endif\n#ifdef CONFIG_ARM\n    strncat(msg, \"ARM-32, \", 9);\n#endif\n#ifdef CONFIG_ARM64\n    strncat(msg, \"Aarch64, \", 10);\n#endif\n#ifdef CONFIG_MIPS\n    strncat(msg, \"MIPS, \", 7);\n#endif\n#ifdef CONFIG_PPC\n    strncat(msg, \"PowerPC, \", 10);\n#endif\n#ifdef CONFIG_S390\n    strncat(msg, \"IBM S390, \", 11);\n#endif\n\n#ifdef __BIG_ENDIAN\n    strncat(msg, \"big-endian; \", 13);\n#else\n    strncat(msg, \"little-endian; \", 16);\n#endif\n\n#if(BITS_PER_LONG == 32)\n    strncat(msg, \"32-bit OS.\\n\", 12);\n#elif(BITS_PER_LONG == 64)\n    strncat(msg, \"64-bit OS.\\n\", 12);\n#endif\n    pr_info(\"%s\", msg);\n\n  show_sizeof();\n /* Word ranges: min & max: defines are in include/linux/limits.h */\n [ ... ]\n}\nEXPORT_SYMBOL(lkdc_sysinfo);\n```", "```\n$ cd ch5/min_sysinfo\n$ make\n[...]\n$ sudo insmod ./min_sysinfo.ko \n$ dmesg\n[...]\n[29626.257341] min_sysinfo: inserted\n[29626.257352] llkd_sysinfo(): minimal Platform Info:\n              CPU: x86_64, little-endian; 64-bit OS.\n$ \n```", "```\n$ sudo insmod ./min_sysinfo.ko\n$ dmesg\n[...]\n[    80.428363] min_sysinfo: inserted\n[    80.428370] llkd_sysinfo(): minimal Platform Info:\n               CPU: ARM-32, little-endian; 32-bit OS.\n$\n```", "```\n$ make [tab][tab] all        clean      help       install     sa_cppcheck    sa_gcc    \ntarxz-pkg  checkpatch code-style indent      sa             sa_flawfinder sa_sparse $ make sa_flawfinder \nmake clean\nmake[1]: Entering directory '/home/llkd/llkd_book/Linux-Kernel-Programming/ch5/min_sysinfo'\n\n--- cleaning ---\n\n[...]\n\n--- static analysis with flawfinder ---\n\nflawfinder *.c\nFlawfinder version 1.31, (C) 2001-2014 David A. Wheeler.\nNumber of rules (primarily dangerous function names) in C/C++ ruleset: 169\nExamining min_sysinfo.c\n\nFINAL RESULTS:\n\nmin_sysinfo.c:60: [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.\n\n[...]\n\nmin_sysinfo.c:138: [1] (buffer) strlen:\n  Does not handle strings that are not \\0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n[...]\n```", "```\n// include/linux/module.h\n[...]\n/*\n * The following license idents are currently accepted as indicating free\n * software modules\n *\n * \"GPL\"                       [GNU Public License v2 or later]\n * \"GPL v2\"                    [GNU Public License v2]\n * \"GPL and additional rights\" [GNU Public License v2 rights and more]\n * \"Dual BSD/GPL\"              [GNU Public License v2\n *                              or BSD license choice]\n * \"Dual MIT/GPL\"              [GNU Public License v2\n *                              or MIT license choice]\n * \"Dual MPL/GPL\"              [GNU Public License v2\n *                              or Mozilla license choice]\n *\n * The following other idents are available\n *\n * \"Proprietary\" [Non free products]\n *\n * There are dual licensed components, but when running with Linux it is the GPL that is relevant so this is a non issue. Similarly LGPL linked with GPL is a GPL combined work.\n *\n * This exists for several reasons\n * 1\\. So modinfo can show license info for users wanting to vet their setup is free\n * 2\\. So the community can ignore bug reports including proprietary modules\n * 3\\. So vendors can do likewise based on their own policies\n */\n#define MODULE_LICENSE(_license) MODULE_INFO(license, _license)\n[...]\n```", "```\n$ ls <...>/linux-5.4/LICENSES/\ndeprecated/ dual/ exceptions/ preferred/\n```", "```\nobj-m      := projx.o\nprojx-objs := prj1.o prj2.o prj3.o\n```", "```\nobj-m                 += lowlevel_mem_lib.o\nlowlevel_mem_lib-objs := lowlevel_mem.o ../../klib_llkd.o\n```", "```\nstatic int my_glob = 5;\nstatic long my_foo(int key)\n{ [...]\n}\n```", "```\nint my_glob = 5;\nEXPORT_SYMBOL(my_glob);\n\nlong my_foo(int key)\n{ [...]\n}\nEXPORT_SYMBOL(my_foo);\n```", "```\n// kernel/irq/manage.c\nint request_threaded_irq(unsigned int irq, irq_handler_t handler,\n                         irq_handler_t thread_fn, unsigned long irqflags,\n                         const char *devname, void *dev_id)\n{\n    struct irqaction *action;\n[...]\n    return retval;\n}\nEXPORT_SYMBOL(request_threaded_irq);\n```", "```\n// kernel/sched/fair.c\nstatic struct task_struct *\npick_next_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)\n{\n        struct cfs_rq *cfs_rq = &rq->cfs;\n[...]\n        if (new_tasks > 0)\n                goto again;\n        return NULL;\n}\n```", "```\n$ lsmod | grep vbox\nvboxnetadp             28672  0\nvboxnetflt             28672  1\nvboxdrv               479232  3 vboxnetadp,vboxnetflt\n$ \n```", "```\nlsmod | awk '$3 > 0 {print $0}'\n```", "```\n// ch5/modstacking/core_lkm.c\n#define pr_fmt(fmt) \"%s:%s(): \" fmt, KBUILD_MODNAME, __func__\n#include <linux/init.h>\n#include <linux/module.h>\n\n#define MODNAME     \"core_lkm\"\n#define THE_ONE     0xfedface\nMODULE_LICENSE(\"Dual MIT/GPL\");\n\nint exp_int = 200;\nEXPORT_SYMBOL_GPL(exp_int);\n\n/* Functions to be called from other LKMs */\nvoid llkd_sysinfo2(void)\n{\n[...]\n}\nEXPORT_SYMBOL(llkd_sysinfo2);\n\n#if(BITS_PER_LONG == 32)\nu32 get_skey(int p)\n#else // 64-bit\nu64 get_skey(int p)\n#endif\n{\n#if(BITS_PER_LONG == 32)\n    u32 secret = 0x567def;\n#else // 64-bit\n    u64 secret = 0x123abc567def;\n#endif\n    if (p == THE_ONE)\n        return secret;\n    return 0;\n}\nEXPORT_SYMBOL(get_skey);\n[...]\n```", "```\n// ch5/modstacking/user_lkm.c\n#define pr_fmt(fmt) \"%s:%s(): \" fmt, KBUILD_MODNAME, __func__\n#define MODNAME \"user_lkm\"\n\n#if 1\nMODULE_LICENSE(\"Dual MIT/GPL\");\n#else\nMODULE_LICENSE(\"MIT\");\n#endif\n\nextern void llkd_sysinfo2(void);\nextern long get_skey(int);\nextern int exp_int;\n\n/* Call some functions within the 'core' module */\nstatic int __init user_lkm_init(void)\n{\n#define THE_ONE 0xfedface\n     pr_info(\"%s: inserted\\n\", MODNAME);\n     u64 sk = get_skey(THE_ONE);\n     pr_debug(\"%s: Called get_skey(), ret = 0x%llx = %llu\\n\",\n             MODNAME, sk, sk);\n     pr_debug(\"%s: exp_int = %d\\n\", MODNAME, exp_int);\n llkd_sysinfo2();\n     return 0;\n}\n\nstatic void __exit user_lkm_exit(void)\n{\n    pr_info(\"%s: bids you adieu\\n\", MODNAME);\n}\nmodule_init(user_lkm_init);\nmodule_exit(user_lkm_exit);\n```", "```\nobj-m     := core_lkm.o\nobj-m     += user_lkm.o\n```", "```\n$ make\n\n--- Building : KDIR=/lib/modules/5.4.0-llkd02-kasan/build ARCH= CROSS_COMPILE= EXTRA_CFLAGS=-DDEBUG ---\n\nmake -C /lib/modules/5.4.0-llkd02-kasan/build M=/home/llkd/booksrc/ch5/modstacking modules\nmake[1]: Entering directory '/home/llkd/kernels/linux-5.4'\n  CC [M] /home/llkd/booksrc/ch5/modstacking/core_lkm.o\n  CC [M] /home/llkd/booksrc/ch5/modstacking/user_lkm.o\n  [...]\n  Building modules, stage 2.\n  MODPOST 2 modules\n  CC [M] /home/llkd/booksrc/ch5/modstacking/core_lkm.mod.o\n  LD [M] /home/llkd/booksrc/ch5/modstacking/core_lkm.ko\n  CC [M] /home/llkd/booksrc/ch5/modstacking/user_lkm.mod.o\n  LD [M] /home/llkd/booksrc/ch5/modstacking/user_lkm.ko\nmake[1]: Leaving directory '/home/llkd/kernels/linux-5.4'\n$ ls *.ko\ncore_lkm.ko  user_lkm.ko\n$ \n```", "```\n$ sudo dmesg -C\n$ sudo insmod ./user_lkm.ko \ninsmod: ERROR: could not insert module ./user_lkm.ko: Unknown symbol in module\n$ dmesg \n[13204.476455] user_lkm: Unknown symbol exp_int (err -2)\n[13204.476493] user_lkm: Unknown symbol get_skey (err -2)\n[13204.476531] user_lkm: Unknown symbol llkd_sysinfo2 (err -2)\n$ \n```", "```\n$ sudo insmod ./core_lkm.ko \n$ dmesg \n[...]\n[19221.183494] core_lkm: inserted\n$ sudo insmod ./user_lkm.ko \n$ dmesg \n[...]\n[19221.183494] core_lkm:core_lkm_init(): inserted\n[19242.669208] core_lkm:core_lkm_init(): /home/llkd/book_llkd/Linux-Kernel-Programming/ch5/modstacking/core_lkm.c:get_skey():100: I've been called\n[19242.669212] user_lkm:user_lkm_init(): inserted\n[19242.669217] user_lkm:user_lkm:user_lkm_init(): Called get_skey(), ret = 0x123abc567def = 20043477188079\n[19242.669219] user_lkm:user_lkm_init(): exp_int = 200\n[19242.669223] core_lkm:llkd_sysinfo2(): minimal Platform Info:\n CPU: x86_64, little-endian; 64-bit OS.\n$ \n```", "```\n$ lsmod | egrep \"core_lkm|user_lkm\"\nuser_lkm               20480  0\ncore_lkm               16384  1 user_lkm\n$ \n```", "```\n$ sudo rmmod core_lkm \nrmmod: ERROR: Module core_lkm is in use by: user_lkm\n$ \n```", "```\n$ sudo rmmod user_lkm core_lkm \n$ dmesg \n[...]\n CPU: x86_64, little-endian; 64-bit OS.\n[19489.717265] user_lkm:user_lkm_exit(): bids you adieu\n[19489.732018] core_lkm:core_lkm_exit(): bids you adieu\n$ \n```", "```\n#if 1\nMODULE_LICENSE(\"Dual MIT/GPL\");\n#else\nMODULE_LICENSE(\"MIT\");\n#endif\n```", "```\nint exp_int = 200;\nEXPORT_SYMBOL_GPL(exp_int);\n```", "```\n$ make\n[...]\nBuilding for: kver=5.4.0-llkd01 ARCH=x86 CROSS_COMPILE= EXTRA_CFLAGS=-DDEBUG\n  Building modules, stage 2.\n  MODPOST 2 modules\nFATAL: modpost: GPL-incompatible module user_lkm.ko uses GPL-only symbol 'exp_int'\n[...]\n$ \n```", "```\n$ sudo insmod ./min_sysinfo.ko\n[...]\n$ cd ../modstacking ; sudo insmod ./core_lkm.ko\ninsmod: ERROR: could not insert module ./core_lkm.ko: Invalid module format\n$ dmesg\n[...]\n[32077.823472] core_lkm: exports duplicate symbol llkd_sysinfo2 (owned by min_sysinfo)\n$ sudo rmmod min_sysinfo\n$ sudo insmod ./core_lkm.ko * # now it's ok*\n```", "```\n#define pr_fmt(fmt) \"%s:%s():%d: \" fmt, KBUILD_MODNAME, __func__, __LINE__\n[ ... ]\nfunc_x() { \n    pr_debug(\"At 1\\n\");\n    [...]\n    while (<cond>) {\n        pr_debug(\"At 2: j=0x%x\\n\", j); \n        [...] \n }\n [...]\n}\n```", "```\nstatic int debug_level;     /* will be init to zero */\nfunc_x() { \n    if (debug_level >= 1) pr_debug(\"At 1\\n\");\n    [...]\n    while (<cond>) {\n        if (debug_level >= 2) \n            pr_debug(\"At 2: j=0x%x\\n\", j); \n        [...] \n    }\n [...]\n}\n```", "```\nsudo insmod modparams1.ko mp_debug_level=2\n```", "```\n// ch5/modparams/modparams1/modparams1.c\n[ ... ]\n/* Module parameters */\nstatic int mp_debug_level;\nmodule_param(mp_debug_level, int, 0660);\nMODULE_PARM_DESC(mp_debug_level,\n\"Debug level [0-2]; 0 => no debug messages, 2 => high verbosity\");\n\nstatic char *mp_strparam = \"My string param\";\nmodule_param(mp_strparam, charp, 0660);\nMODULE_PARM_DESC(mp_strparam, \"A demo string parameter\");\n```", "```\ncd <booksrc>/ch5/modparams/modparams1\nmake\n$ modinfo -p ./modparams1.ko \nparm:          mp_debug_level:Debug level [0-2]; 0 => no debug messages, 2 => high verbosity (int)\nparm:          mp_strparam:A demo string parameter (charp)\n$ \n```", "```\nsudo dmesg -C\nsudo insmod ./modparams1.ko \ndmesg \n[42724.936349] modparams1: inserted\n[42724.936354] module parameters passed: mp_debug_level=0 mp_strparam=My string param\n```", "```\nsudo rmmod modparams1 \nsudo insmod ./modparams1.ko mp_debug_level=2 mp_strparam=\\\"Hello modparams1\\\"\n$ dmesg \n[...]\n[42734.162840] modparams1: removed\n[42766.146876] modparams1: inserted\n[42766.146880] module parameters passed: mp_debug_level=2 mp_strparam=Hello modparams1\n$ \n```", "```\nmodule_param(mp_debug_level, int, 0660);\n```", "```\n$ ls /sys/module/modparams1/\ncoresize   holders/    initsize  initstate  notes/  parameters/  refcnt sections/  srcversion  taint     uevent     version\n$ ls -l /sys/module/modparams1/parameters/\ntotal 0\n-rw-rw---- 1 root root 4096 Jan  1 17:39 mp_debug_level\n-rw-rw---- 1 root root 4096 Jan  1 17:39 mp_strparam\n$ \n```", "```\n$ cat /sys/module/modparams1/parameters/mp_debug_level \ncat: /sys/module/modparams1/parameters/mp_debug_level: Permission denied\n$ sudo cat /sys/module/modparams1/parameters/mp_debug_level\n[sudo] password for llkd: \n2\n```", "```\n$ sudo bash -c \"echo 0 > /sys/module/modparams1/parameters/mp_debug_level\"\n$ sudo cat /sys/module/modparams1/parameters/mp_debug_level \n0\n```", "```\nmodule_param(mp_debug_level, int, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP);\n```", "```\n$ make checkpatch\n[ ... ]\ncheckpatch.pl: /lib/modules/<ver>/build//scripts/checkpatch.pl --no-tree -f *.[ch]\n[ ... ]\nWARNING: Symbolic permissions 'S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP' are not preferred. Consider using octal permissions '0660'.\n #29: FILE: modparams1.c:29:\n +module_param(mp_debug_level, int, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP);\n```", "```\n// include/linux/moduleparam.h\n[...]\n * Standard types are:\n * byte, short, ushort, int, uint, long, ulong\n * charp: a character pointer\n * bool: a bool, values 0/1, y/n, Y/N.\n * invbool: the above, only sense-reversed (N = true).\n```", "```\nstatic int control_freak;\nmodule_param(control_freak, int, 0660);\nMODULE_PARM_DESC(control_freak, \"Set to the project's control level [1-5]. MANDATORY\");\n```", "```\nstatic int __init modparams2_init(void)\n{\n    pr_info(\"%s: inserted\\n\", OUR_MODNAME);\n    if (mp_debug_level > 0)\n        pr_info(\"module parameters passed: \"\n                \"mp_debug_level=%d mp_strparam=%s\\n control_freak=%d\\n\",\n                mp_debug_level, mp_strparam, control_freak);\n\n    /* param 'control_freak': if it hasn't been passed (implicit guess), \n     * or is the same old value, or isn't within the right range,\n     * it's Unacceptable!  :-)\n     */\n    if ((control_freak < 1) || (control_freak > 5)) {\n        pr_warn(\"%s: Must pass along module parameter\"\n              \" 'control_freak', value in the range [1-5]; aborting...\\n\",\n              OUR_MODNAME);\n        return -EINVAL;\n    }\n    return 0; /* success */\n}\n```", "```\n// drivers/md/dm-bufio.c\n[...]\nmodule_param_named(current_allocated_bytes, dm_bufio_current_allocated, ulong, S_IRUGO);\nMODULE_PARM_DESC(current_allocated_bytes, \"Memory currently used by the cache\");\n```", "```\nsudo insmod <path/to/>dm-bufio.ko current_allocated_bytes=4096 ...\n```", "```\nProvided an annotation for module parameters that specify hardware\nparameters (such as io ports, iomem addresses, irqs, dma channels, fixed\ndma buffers and other types).\n\nThis will enable such parameters to be locked down in the core parameter\nparser for secure boot support.  [...]\n```", "```\ndouble temp;\n[... processing ...]\ntemp = temp / 1000.0;\nprintk(KERN_INFO \"temperature is %.3f degrees C\\n\", temp);\n```", "```\n// ch5/fp_in_kernel/fp_in_kernel.c\nstatic double num = 22.0, den = 7.0, mypi;\nstatic int __init fp_in_lkm_init(void)\n{\n    [...]\n    kernel_fpu_begin();\n    mypi = num/den;\n    kernel_fpu_end();\n#if 1\n    pr_info(\"%s: PI = %.4f = %.4f\\n\", OURMODNAME, mypi, num/den);\n#endif\n    return 0;     /* success */\n}\n```", "```\ninstall:\n make -C $(KDIR) M=$(PWD) modules_install\n```", "```\ncd <...>/ch5/min_sysinfo\n```", "```\nmake && sudo make install   \n```", "```\n$ cd <...>/ch5/min_sysinfo\n$ make                *<-- ensure it's first built 'locally'   \n               generating the min_sysinfo.ko kernel module object*\n[...]\n$ sudo make install Building for: KREL= ARCH= CROSS_COMPILE= EXTRA_CFLAGS=-DDEBUG\nmake -C /lib/modules/5.4.0-llkd01/build M=<...>/ch5/min_sysinfo modules_install\nmake[1]: Entering directory '/home/llkd/kernels/linux-5.4'\n INSTALL <...>/ch5/min_sysinfo/min_sysinfo.ko\n DEPMOD  5.4.0-llkd01\nmake[1]: Leaving directory '/home/llkd/kernels/linux-5.4'\n$ ls -l /lib/modules/5.4.0-llkd01/extra/\ntotal 228\n-rw-r--r-- 1 root root 232513 Dec 30 16:23 min_sysinfo.ko\n$ \n```", "```\n$ sudo depmod --dry-run | grep min_sysinfo\nextra/min_sysinfo.ko:\nalias symbol:lkdc_sysinfo2 min_sysinfo\nalias symbol:lkdc_sysinfo min_sysinfo\n$ \n```", "```\n$ cat /etc/modules-load.d/min_sysinfo.conf \n# Auto load kernel module for LLKD book: ch5/min_sysinfo\nmin_sysinfo\n$\n```", "```\n[... system boots up ...]\n\n$ lsmod | grep min_sysinfo\nmin_sysinfo         16384  0\n$ dmesg | grep -C2 min_sysinfo\n[...]\n[ 2.395649] min_sysinfo: loading out-of-tree module taints kernel.\n[ 2.395667] min_sysinfo: module verification failed: signature and/or required key missing - tainting kernel\n[ 2.395814] min_sysinfo: inserted\n[ 2.395815] lkdc_sysinfo(): minimal Platform Info:\n               CPU: x86_64, little-endian; 64-bit OS.\n$\n```", "```\n// ch5/min_sysinfo/Makefile\n[ ... ]\ninstall:\n    @echo\n    @echo \"--- installing ---\"\n    @echo \" [First, invoke the 'make' ]\"\n    make\n    @echo\n    @echo \" [Now for the 'sudo make install' ]\"\n    sudo make -C $(KDIR) M=$(PWD) modules_install\n sudo depmod\n```", "```\noptions <module-name> <parameter-name>=<value>\n```", "```\n# Ubuntu #62691, enable MPU for snd-cmipci\noptions snd-cmipci mpu_port=0x330 fm_port=0x388\n```", "```\nsudo modprobe min_sysinfo\n```", "```\n$ cd <...>/ch5/modstacking\n$ make && sudo make install\n[...]\n$ ls -l /lib/modules/5.4.0-llkd01/extra/\ntotal 668K\n-rw-r--r-- 1 root root 218K Jan 31 08:41 core_lkm.ko\n-rw-r--r-- 1 root root 228K Dec 30 16:23 min_sysinfo.ko\n-rw-r--r-- 1 root root 217K Jan 31 08:41 user_lkm.ko\n$ \n```", "```\n$ grep user_lkm /lib/modules/5.4.0-llkd01/* 2>/dev/null\n/lib/modules/5.4.0-llkd01/modules.dep:extra/user_lkm.ko: extra/core_lkm.ko\nBinary file /lib/modules/5.4.0-llkd01/modules.dep.bin matches\n$\n```", "```\nmodule_blacklist=  [KNL] Do not load a comma-separated list of\n                        modules.  Useful for debugging problem modules.\n```", "```\ndebug           [KNL] Enable kernel debugging (events log level).\n[...]\ninitcall_debug  [KNL] Trace initcalls as they are executed. Useful\n                      for working out where the kernel is dying during\n                      startup.\n[...]\nignore_loglevel [KNL] Ignore loglevel setting - this will print /all/\n                      kernel messages to the console. Useful for  \n                      debugging. We also add it as printk module \n                      parameter, so users could change it dynamically, \n                      usually by /sys/module/printk/parameters/ignore_loglevel.\n```", "```\ndmesg_restrict\n/proc/sys/kernel/dmesg_restrict (since Linux 2.6.37)\n The value in this file determines who can see kernel syslog contents. A  value of 0 in this file imposes no restrictions. If the value is 1, only privileged users can read the kernel syslog. (See syslog(2) for more details.) Since Linux 3.4, only users with the CAP_SYS_ADMIN capability may change the value in this file.\n```", "```\n$ cat /proc/sys/kernel/dmesg_restrict\n0\n```", "```\nkptr_restrict\n/proc/sys/kernel/kptr_restrict (since Linux 2.6.38)\n The value in this file determines whether kernel addresses are exposed via /proc files and other interfaces. A value of 0 in this file imposes no restrictions. If the value is 1, kernel pointers printed using the %pK format specifier will be replaced with zeros unless the user has the CAP_SYSLOG capability. If the value is 2, kernel pointers printed using the %pK format specifier will be replaced with zeros regardless of the user's capabilities. The initial default value for this file was 1, but the default was changed to 0 in Linux 2.6.39\\. Since Linux 3.4, only users with the CAP_SYS_ADMIN capability can change the value in this file.\n```", "```\n$ cat /proc/sys/kernel/kptr_restrict \n1\n```", "```\nconfig MODULE_SIG\n bool \"Module signature verification\"\n depends on MODULES\n select SYSTEM_DATA_VERIFICATION\n help\n  Check modules for valid signatures upon load: the signature is simply  \n  appended to the module. For more information see  \n  <file:Documentation/admin-guide/module-signing.rst>. Note that this  \n  option adds the OpenSSL development packages as a kernel build   \n  dependency so that the signing tool can use its crypto library.\n\n !!!WARNING!!! If you enable this option, you MUST make sure that the  \n module DOES NOT get stripped after being signed. This includes the\n debuginfo strip done by some packagers (such as rpmbuild) and\n inclusion into an initramfs that wants the module size reduced\n```", "```\n$ grep MODULE_SIG /boot/config-5.4.0-58-generic \nCONFIG_MODULE_SIG_FORMAT=y\nCONFIG_MODULE_SIG=y\n# CONFIG_MODULE_SIG_FORCE is not set\nCONFIG_MODULE_SIG_ALL=y\n[ ... ] \n```", "```\n$ cat /proc/sys/kernel/modules_disabled\n0 \n```", "```\n/proc/sys/kernel/modules_disabled (since Linux 2.6.31)\n A toggle value indicating if modules are allowed to be loaded in an otherwise modular kernel. This toggle defaults to off (0), but can be set true (1). Once true, modules can be neither loaded nor unloaded, and the toggle cannot be set back to false. The file is present only if the kernel is built with the CONFIG_MODULES option enabled.\n```", "```\n<kernel-src>/scripts/checkpatch.pl --no-tree -f <filename>.c\n```"]