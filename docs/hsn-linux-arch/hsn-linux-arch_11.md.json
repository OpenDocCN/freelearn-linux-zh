["```\nrpm --import https://packages.microsoft.com/keys/microsoft.asc\n```", "```\ncat << EOF > /etc/yum.repos.d/azure-cli.repo\n[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\nEOF\n```", "```\nyum install azure-cli\n```", "```\naz login\n```", "```\naz configure --defaults location=eastus group=Kube_Deploy\n```", "```\naz group create -n \u201cKube_Deploy\u201d\n```", "```\n<design picture>\n```", "```\n192.168.0.0/24\n```", "```\n10.20.0.0/24\n```", "```\n10.30.0.0/16\n```", "```\naz network vnet create -n kube-node-vnet \\\n --address-prefix 192.168.0.0/16 \\\n --subnet-name node-subnet \\\n --subnet-prefix 192.168.0.0/24\n```", "```\naz network public-ip create -n kube-api-pub-ip \\\n --allocation-method Static \\\n --sku Standard\n```", "```\naz network public-ip show -n kube-api-pub-ip --query \"ipAddress\"\n```", "```\naz network nsg create -n kube-nsg\n```", "```\naz network vnet subnet update -n node-subnet \\\n --vnet-name kube-node-vnet \\\n --network-security-group kube-nsg\n```", "```\nssh-keygen\n```", "```\naz vm create -n management-vm \\\n --admin-username <USERNAME> \\\n --size Standard_B1s \\\n --image CentOS \\\n --vnet-name kube-node-vnet \\\n --subnet node-subnet \\\n --private-ip-address 192.168.0.99 \\\n --nsg kube-nsg \\\n --ssh-key-value ~/.ssh/id_rsa.pub\n```", "```\naz network nsg rule create --nsg-name kube-nsg \\\n -n mgmt_ssh_allow \\\n --direction Inbound \\\n --priority 100 \\\n --access Allow \\\n --description \"Allow SSH From Home\" \\\n --destination-address-prefixes '192.168.0.99' \\\n --destination-port-ranges 22 \\\n --protocol Tcp \\\n --source-address-prefixes '<YOUR IP>' \\\n --source-port-ranges '*' \\\n --direction Inbound\n```", "```\naz vm show -d -n management-vm --query publicIps\n```", "```\nssh <username>@<public ip> -i <path to private key>\n```", "```\naz vm availability-set create -n control-plane \\\n --platform-fault-domain-count 3 \\\n --platform-update-domain-count 3\n```", "```\nMGMT_KEY=$(ssh <username>@<public ip> cat ~/.ssh/id_rsa.pub)\n```", "```\n\nfor i in 1 2 3; do\naz vm create -n kube-controller-${i} \\\n --admin-username <USERNAME> \\\n --availability-set control-plane \\\n --size Standard_B2s \\\n --image CentOS \\\n --vnet-name kube-node-vnet \\\n --subnet node-subnet \\\n --private-ip-address 192.168.0.1${i} \\\n --public-ip-address \"\" \\\n --nsg kube-nsg \\\n --ssh-key-value ${MGMT_KEY};\ndone\n\n```", "```\n\nfor i in 1 2; do\naz vm create -n kube-node-${i} \\\n --admin-username <USERNAME>\\\n --size Standard_B2s \\\n --image CentOS \\\n --vnet-name kube-node-vnet \\\n --subnet node-subnet \\\n --private-ip-address 192.168.0.2${i} \\\n --public-ip-address \"\" \\\n --nsg kube-nsg \\\n --ssh-key-value ${MGMT_KEY}\ndone\n\n```", "```\njohndoe@management-vm$ sudo yum install git gcc \n\njohndoe@management-vm$ sudo wget -O golang.tgz  https://dl.google.com/go/go1.11.1.linux-amd64.tar.gz \n\njohndoe@management-vm$ sudo tar -C /usr/local -xzvf golang.tgz\n```", "```\njohndoe@management-vm$ sudo cat << EOF > /etc/profile.d/paths.sh\nexport PATH=$PATH:/usr/local/go/bin:/usr/local/bin\nexport GOPATH=/usr/local/\nEOF\n```", "```\njohndoe@management-vm$ sudo source /etc/profile.d/paths.sh\n```", "```\njohndoe@management-vm$ go get -u github.com/cloudflare/cfssl/cmd/cfssl\n\njohndoe@management-vm$ go get -u github.com/cloudflare/cfssl/cmd/cfssljson\n```", "```\njohndoe@management-vm$ mkdir ~/certs\n```", "```\njohndoe@management-vm$ cd ~/certs\n\njohndoe@management-vm$ cat << EOF > ca-config.json\n{\n \"signing\": {\n \"default\": {\n \"expiry\": \"8760h\"\n },\n \"profiles\": {\n \"kubernetes\": {\n \"usages\": [\n \"signing\",\n \"key encipherment\",\n \"server auth\",\n \"client auth\"\n ],\n \"expiry\": \"8760h\"\n }\n }\n }\n}\nEOF\n```", "```\njohndoe@management-vm$ cat << EOF > ca-csr.json \n{\n \"CN\": \"Kubernetes\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"Kubernetes\",\n \"OU\": \"CA\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n```", "```\njohndoe@management-vm$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca\n```", "```\njohndoe@management-vm$ ls\nca-config.json  ca.csr ca-csr.json  ca-key.pem ca.pem\n```", "```\njohndoe@management-vm$ mkdir ~/certs/admin/\n\njohndoe@management-vm$ cd ~/certs/admin/\n```", "```\njohndoe@management-vm$ cat << EOF > admin-csr.json \n{\n \"CN\": \"admin\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"system:masters\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n```", "```\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -profile=kubernetes \\\n admin-csr.json | cfssljson -bare admin\n```", "```\njohndoe@management-vm$ mkdir ~/certs/kubelet/\n\njohndoe@management-vm$ cd ~/certs/kubelet/\n```", "```\njohndoe@management-vm$ cat << EOF > kube-node-1-csr.json\n{\n \"CN\": \"system:node:kube-node-1\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"system:nodes\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n```", "```\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -hostname=192.168.0.21,kube-node-1 \\\n -profile=kubernetes \\\n kube-node-1-csr.json | cfssljson -bare kube-node-1\n```", "```\njohndoe@management-vm$ mkdir ~/certs/control-plane/\n\njohndoe@management-vm$ cd ~/certs/control-plane/\n```", "```\njohndoe@management-vm$ cat << EOF > kube-controller-manager-csr.json\n{\n \"CN\": \"system:kube-controller-manager\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"system:kube-controller-manager\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -profile=kubernetes \\\n kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n```", "```\njohndoe@management-vm$ cat << EOF > kube-proxy-csr.json\n{\n \"CN\": \"system:kube-proxy\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"system:node-proxier\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -profile=kubernetes \\\n kube-proxy-csr.json | cfssljson -bare kube-proxy\n```", "```\njohndoe@management-vm$ cat << EOF > kube-scheduler-csr.json\n{\n \"CN\": \"system:kube-scheduler\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"system:kube-scheduler\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -profile=kubernetes \\\n kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n```", "```\njohndoe@management-vm$ mkdir ~/certs/api/\n\njohndoe@management-vm$ cd ~/certs/api/\n```", "```\njohndoe@management-vm$API_HOSTNAME=10.20.0.1,192.168.0.11,kube-controller-1,192.168.0.12,kube-controller-2,<PUBLIC_IP>,127.0.0.1,localhost,kubernetes.default\n```", "```\njohndoe@management-vm$ cat << EOF > kubernetes-csr.json \n{\n \"CN\": \"kubernetes\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"Kubernetes\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -hostname=${API_HOSTNAME} \\\n -profile=kubernetes \\\n kubernetes-csr.json | cfssljson -bare kubernetes\n```", "```\njohndoe@management-vm$ cat << EOF > service-account-csr.json \n{\n \"CN\": \"service-accounts\",\n \"key\": {\n \"algo\": \"rsa\",\n \"size\": 2048\n },\n \"names\": [\n {\n \"C\": \"US\",\n \"L\": \"New York\",\n \"O\": \"Kubernetes\",\n \"OU\": \"Kubernetes\",\n \"ST\": \"NY\"\n }\n ]\n}\nEOF\n\njohndoe@management-vm$ cfssl gencert \\\n -ca=../ca.pem \\\n -ca-key=../ca-key.pem \\\n -config=../ca-config.json \\\n -profile=kubernetes \\\n service-account-csr.json | cfssljson -bare service-account\n```", "```\njohndoe@management-vm$ cd ~/certs/kubelets\n\njohndoe@management-vm$ scp ../ca.pem \\\nkube-node-1.pem \\\nkube-node-1-key.pem \\\njohndoe@kube-node-1:~/\n```", "```\njohndoe@management-vm$ cd ~/certs/api\n\njohndoe@management-vm$ scp ../ca.pem \\\n../ca-key.pem \\\nkubernetes.pem \\\nkubernetes-key.pem \\\nservice-account.pem \\\nservice-account-key.pem \\\njohndoe@kube-controller-1:~/\n```", "```\njohndoe@management-vm$ sudo cat << EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n```", "```\njohndoe@management-vm$sudo yum install kubectl\n```", "```\njohndoe@management-vm$ mkdir ~/kubeconfigs\n\njohndoe@management-vm$ cd ~/kubeconfigs\n```", "```\njohndoe@management-vm$ kubectl config set-cluster kubernetes \\\n --certificate-authority=../certs/ca.pem \\\n --embed-certs=true \\\n --server=https://127.0.0.1:6443 \\\n --kubeconfig=kube-controller-manager.kubeconfig\n\njohndoe@management-vm$ kubectl config set-credentials \\\nsystem:kube-controller-manager \\\n --client-certificate=../certs/control-plane/kube-controller-manager.pem \\\n --client-key=../certs/control-plane/kube-controller-manager-key.pem \\\n --embed-certs=true \\\n --kubeconfig=kube-controller-manager.kubeconfig\n\njohndoe@management-vm$ kubectl config set-context default \\\n --cluster=kubernetes \\\n --user=system:kube-controller-manager \\\n --kubeconfig=kube-controller-manager.kubeconfig\n\njohndoe@management-vm$ kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig\n```", "```\njohndoe@management-vm$ kubectl config set-cluster kubernetes \\\n --certificate-authority=../certs/ca.pem \\\n --embed-certs=true \\\n --server=https://127.0.0.1:6443 \\\n --kubeconfig=kube-scheduler.kubeconfig\n\njohndoe@management-vm$ kubectl config set-credentials system:kube-scheduler \\\n --client-certificate=../certs/control-plane/kube-scheduler.pem \\\n --client-key=../certs/control-plane/kube-scheduler-key.pem \\\n --embed-certs=true \\\n --kubeconfig=kube-scheduler.kubeconfig\n\njohndoe@management-vm$ kubectl config set-context default \\\n --cluster=kubernetes \\\n --user=system:kube-scheduler \\\n --kubeconfig=kube-scheduler.kubeconfig\n\njohndoe@management-vm$ kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig\n```", "```\njohndoe@management-vm$ for i in 1 2; do\nkubectl config set-cluster kubernetes \\\n--certificate-authority=../certs/ca.pem \\\n--embed-certs=true \\\n--server=https://<KUBE_API_PUBLIC_IP>:6443 \\\n--kubeconfig=kube-node-${i}.kubeconfig\n\nkubectl config set-credentials system:node:kube-node-${i} \\\n--client-certificate=../certs/kubelets/kube-node-${i}.pem \\\n--client-key=../certs/kubelets/kube-node-${i}-key.pem \\\n--embed-certs=true \\\n--kubeconfig=kube-node-${i}.kubeconfig\n\nkubectl config set-context default \\\n--cluster=kubernetes \\\n--user=system:node:kube-node-${i} \\\n--kubeconfig=kube-node-${i}.kubeconfig\n\nkubectl config use-context default --kubeconfig=kube-node-${i}.kubeconfig\ndone\n```", "```\n johndoe@management-vm$ kubectl config set-cluster kubernetes \\\n --certificate-authority=../certs/ca.pem \\\n --embed-certs=true \\\n --server=https://<PUBLIC_IP>:6443 \\\n --kubeconfig=kube-proxy.kubeconfig\n\njohndoe@management-vm$ kubectl config set-credentials system:kube-proxy \\\n --client-certificate=../certs/controllers/kube-proxy.pem \\\n --client-key=../certs/controllers/kube-proxy-key.pem \\\n --embed-certs=true \\\n --kubeconfig=kube-proxy.kubeconfig\n\njohndoe@management-vm$ kubectl config set-context default \\\n --cluster=kubernetes \\\n --user=system:kube-proxy \\\n --kubeconfig=kube-proxy.kubeconfig\n\njohndoe@management-vm$ kubectl config use-context default \\ --kubeconfig=kube-proxy.kubeconfig\n```", "```\njohndoe@management-vm$ kubectl config set-cluster kubernetes \\\n --certificate-authority=../certs/ca.pem \\\n --embed-certs=true \\\n --server=https://127.0.0.1:6443 \\\n --kubeconfig=admin.kubeconfig\n\njohndoe@management-vm$ kubectl config set-credentials admin \\\n --client-certificate=../certs/admin/admin.pem \\\n --client-key=../certs/admin/admin-key.pem \\\n --embed-certs=true \\\n --kubeconfig=admin.kubeconfig\n\njohndoe@management-vm$ kubectl config set-context default \\\n --cluster=kubernetes \\\n --user=admin \\\n --kubeconfig=admin.kubeconfig\n\njohndoe@management-vm$ kubectl config use-context default \\ --kubeconfig=admin.kubeconfig\n```", "```\njohndoe@management-vm$ scp kube-node-1.kubeconfig kube-proxy.kubeconfig johndoe@kube-node-1:~/\n```", "```\njohndoe@management-vm$ scp admin.kubeconfig kube-controller-manager.kubeconfig \\\nkube-scheduler.kubeconfig johndoe@kube-controller-1:~/\n```", "```\njohndoe@kube-controller-1$ wget -O etcd.tgz \\ \nhttps://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz\n\njohndoe@kube-controller-1$ tar xzvf etcd.tgz\n\njohndoe@kube-controller-1$ sudo mv etcd-v3.3.10-linux-amd64/etcd* /usr/local/bin/\n\njohndoe@kube-controller-1$ sudo mkdir -p /etc/etcd /var/lib/etcd\n```", "```\njohndoe@kube-controller-1$ cp /home/johndoe/ca.pem \\\n/home/johndoe/kubernetes-key.pem \\\n/home/johndoe/kubernetes.pem /etc/etcd\n```", "```\njohndoe@kube-controller-1$ ETCD_NAME=$(hostname)\n\njohndoe@kube-controller-1$ I_IP=192.168.0.11\n```", "```\nI_CLUSTER=kube-controller-1=https://192.168.0.11:2380,kube-controller-2=https://192.168.0.12:2380,kube-controller-3=https://192.168.0.13:2380\n```", "```\njohndoe@kube-controller-1$sudo cat << EOF | sudo tee /etc/systemd/system/etcd.service\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nExecStart=/usr/local/bin/etcd \\\\\n --name ${ETCD_NAME} \\\\\n --cert-file=/etc/etcd/kubernetes.pem \\\\\n --key-file=/etc/etcd/kubernetes-key.pem \\\\\n --peer-cert-file=/etc/etcd/kubernetes.pem \\\\\n --peer-key-file=/etc/etcd/kubernetes-key.pem \\\\\n --trusted-ca-file=/etc/etcd/ca.pem \\\\\n --peer-trusted-ca-file=/etc/etcd/ca.pem \\\\\n --peer-client-cert-auth \\\\\n --client-cert-auth \\\\\n --initial-advertise-peer-urls https://${I_IP}:2380 \\\\\n --listen-peer-urls https://${I_IP}:2380 \\\\\n --listen-client-urls https://${I_IP}:2379,https://127.0.0.1:2379 \\\\\n --advertise-client-urls https://${I_IP}:2379 \\\\\n --initial-cluster-token etcd-cluster-0 \\\\\n --initial-cluster ${I_CLUSTER} \\\\\n --initial-cluster-state new \\\\\n --data-dir=/var/lib/etcd\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-controller-1$ systemctl daemon-reload && \\\nsystemctl enable etcd && \\\nsystemctl start etcd && \\\nsystemctl status etcd\n```", "```\njohndoe@kube-controller-3$ ETCDCTL_API=3 etcdctl member list \\\n--endpoints=https://127.0.0.1:2379 \\\n--cacert=/etc/etcd/ca.pem \\\n--cert=/etc/etcd/kubernetes.pem \\\n--key=/etc/etcd/kubernetes-key.pem\n```", "```\njohndoe@management-vm$ CRYPT_KEY=$(head -c 32 /dev/urandom | base64)\n```", "```\njohndoe@management-vm$ cat << EOF > crypt-config.yml\nkind: EncryptionConfig\napiVersion: v1\nresources:\n - resources:\n - secrets\n providers:\n - aescbc:\n keys:\n - name: key1\n secret: ${CRYPT_KEY}\n - identity: {}\nEOF\n```", "```\njohndoe@management-vm$ for i in 1 2 3; do\nscp crypt-config.yml johndoe@kube-controller-${i}:~/\ndone\n```", "```\njohndoe@management-vm$ ssh johndoe@kube-controller-1\n\njohndoe@kube-controller-1$ wget \"https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kube-apiserver\" \\\n\"https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl[\"](https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl)\n```", "```\njohndoe@kube-controller-1$ sudo mkdir -p /etc/kubernetes/config\n\njohndoe@kube-controller-1$ sudo chmod +x kube*\n\njohndoe@kube-controller-1$ sudo mv kube-apiserver kubectl /usr/local/bin/\n```", "```\njohndoe@kube-controller-1$ sudo mkdir -p /var/lib/kubernetes/\n\njohndoe@kube-controller-1$ sudo cp /home/johndoe/ca.pem \\\n/home/johndoe/ca-key.pem \\\n/home/johndoe/kubernetes-key.pem \\\n/home/johndoe/kubernetes.pem \\\n/home/johndoe/service-account-key.pem \\\n/home/johndoe/service-account.pem \\\n/home/johndoe/crypt-config.yml \\\n/var/lib/kubernetes/\n```", "```\njohndoe@kube-controller-1$ I_IP=192.168.0.11\n\njohndoe@kube-controller-1$ CON1_IP=192.168.0.11\n\njohndoe@kube-controller-1$ CON2_IP=192.168.0.12\n\njohndoe@kube-controller-1$ CON2_IP=192.168.0.13\n```", "```\njohndoe@kube-controller-1$ sudo cat << EOF | sudo tee /etc/systemd/system/kube-apiserver.service\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nExecStart=/usr/local/bin/kube-apiserver \\\\\n --advertise-address=${I_IP} \\\\\n --allow-privileged=true \\\\\n --apiserver-count=3 \\\\\n --audit-log-maxage=30 \\\\\n --audit-log-maxbackup=3 \\\\\n --audit-log-maxsize=100 \\\\\n --audit-log-path=/var/log/audit.log \\\\\n --authorization-mode=Node,RBAC \\\\\n --bind-address=0.0.0.0 \\\\\n --client-ca-file=/var/lib/kubernetes/ca.pem \\\\\n --enable-admission-plugins=Initializers,NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\\\\n --enable-swagger-ui=true \\\\\n --etcd-cafile=/var/lib/kubernetes/ca.pem \\\\\n --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\\\\n --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\\\\n --etcd-servers=https://$CON1_IP:2379,https://$CON2_IP:2379 \\\\\n --event-ttl=1h \\\\\n --experimental-encryption-provider-config=/var/lib/kubernetes/crypt-config.yml \\\\\n --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\\\\n --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\\\\n --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\\\\n --kubelet-https=true \\\\\n --runtime-config=api/all \\\\\n --service-account-key-file=/var/lib/kubernetes/service-account.pem \\\\\n --service-cluster-ip-range=10.20.0.0/24 \\\\\n --service-node-port-range=30000-32767 \\\\\n --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\\\\n --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\\\\n --v=2 \\\\\n --kubelet-preferred-address-types=InternalIP,InternalDNS,Hostname,ExternalIP,ExternalDNS\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-controller-1$ wget \"https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kube-controller-manager\"\n\njohndoe@kube-controller-1$sudo chmod +x kube-controller-manager\n\njohndoe@kube-controller-1$sudo mv kube-controller-manager /usr/local/bin/\n```", "```\njohndoe@kube-controller-1$ sudo cp \\\n/home/johndoe/kube-controller-manager.kubeconfig /var/lib/kubernetes/\n\njohndoe@kube-controller-1$ cat << EOF | sudo tee \\ /etc/systemd/system/kube-controller-manager.service\n[Unit]\nDescription=Kubernetes Controller Manager\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nExecStart=/usr/local/bin/kube-controller-manager \\\\\n --address=0.0.0.0 \\\\\n --cluster-cidr=10.30.0.0/16 \\\\\n --cluster-name=kubernetes \\\\\n --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\\\\n --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\\\\n --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \\\\\n --leader-elect=true \\\\\n --root-ca-file=/var/lib/kubernetes/ca.pem \\\\\n --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \\\\\n --service-cluster-ip-range=10.20.0.0/24 \\\\\n --use-service-account-credentials=true \\\\\n --v=2\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-controller-1$ wget \\\n\"https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kube-scheduler\"\n\njohndoe@kube-controller-1$ chmod +x kube-scheduler\n\njohndoe@kube-controller-1$ sudo mv kube-scheduler /usr/local/bin/\n```", "```\njohndoe@kube-controller-1$sudo cp /home/johndoe/kube-scheduler.kubeconfig /var/lib/kubernetes/\n```", "```\njohndoe@kube-controller-1$sudo cat << EOF | sudo tee /etc/kubernetes/config/kube-scheduler.yml\napiVersion: componentconfig/v1alpha1\nkind: KubeSchedulerConfiguration\nclientConnection:\n kubeconfig: \"/var/lib/kubernetes/kube-scheduler.kubeconfig\"\nleaderElection:\n leaderElect: true\nEOF\n```", "```\njohndoe@kube-controller-1$ sudo cat << EOF | sudo tee /etc/systemd/system/kube-scheduler.service\n[Unit]\nDescription=Kubernetes Scheduler\nDocumentation=https://github.com/kubernetes/kubernetes\n[Service]\nExecStart=/usr/local/bin/kube-scheduler \\\\\n --config=/etc/kubernetes/config/kube-scheduler.yml \\\\\n --v=2\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-controller-1$ sudo systemctl daemon-reload\n\njohndoe@kube-controller-1$ sudo systemctl enable kube-apiserver kube-controller-manager kube-scheduler\n\njohndoe@kube-controller-1$ sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler\n\njohndoe@kube-controller-1$ sudo systemctl status kube-apiserver kube-controller-manager kube-scheduler\n```", "```\njohndoe@kube-controller-1$ mkdir /home/johndoe/.kube/\n\njohndoe@kube-controller-1$ cat /home/johndoe/admin.kubeconfig > /home/johndoe/.kube/config\n\njohndoe@kube-controller-1$ kubectl get cs\n```", "```\nNAME                       STATUS     MESSAGE              ERROR\ncontroller-manager         Healthy     ok\nscheduler                  Healthy     ok\netcd-0                     Healthy     {\"health\": \"true\"}\netcd-1                     Healthy     {\"health\": \"true\"}\netcd-2                     Healthy     {\"health\": \"true\"}\n```", "```\njohndoe@kube-controller-1$ cat << EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n annotations:\n rbac.authorization.kubernetes.io/autoupdate: \"true\"\n labels:\n kubernetes.io/bootstrapping: rbac-defaults\n name: system:kube-apiserver-to-kubelet\nrules:\n - apiGroups:\n - \"\"\n resources:\n - nodes/proxy\n - nodes/stats\n - nodes/log\n - nodes/spec\n - nodes/metrics\n verbs:\n - \"*\"\nEOF\n```", "```\njohndoe@kube-controller-1$ cat << EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n name: system:kube-apiserver\n namespace: \"\"\nroleRef:\n apiGroup: rbac.authorization.k8s.io\n kind: ClusterRole\n name: system:kube-apiserver-to-kubelet\nsubjects:\n - apiGroup: rbac.authorization.k8s.io\n kind: User\n name: kubernetes\nEOF\n```", "```\naz network lb create -n kube-lb \\\n--sku Standard \\\n--public-ip-address kube-api-pub-ip\n```", "```\njohndoe@kube-controller-1$ sudo yum install epel-release && yum install nginx\n```", "```\nserver {\n listen 80;\n server_name kubernetes.default.svc.cluster.local;\n\n location /healthz {\n proxy_pass https://127.0.0.1:6443/healthz;\n proxy_ssl_trusted_certificate /var/lib/kubernetes/ca.pem;\n }\n}\n```", "```\njohndoe@kube-controller-1$ sudo yum install policycoreutils-python\n```", "```\njohndoe@kube-controller-1$ sudo semanage port -a -t http_port_t -p tcp 6443\n```", "```\njohndoe@kube-controller-1$ sudo systemctl daemon-reload && \\\nsystemctl enable nginx --now\n```", "```\njohndoe@kube-controller-1$ curl -v http://localhost/healthz\n```", "```\n* About to connect() to localhost port 80 (#0)\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 80 (#0)\n> GET /healthz HTTP/1.1\n> User-Agent: curl/7.29.0\n> Host: localhost\n> Accept: */* < HTTP/1.1 200 OK\n< Server: nginx/1.12.2\n< Date: Sun, 28 Oct 2018 05:44:35 GMT\n< Content-Type: text/plain; charset=utf-8\n< Content-Length: 2\n< Connection: keep-alive\n<\n* Connection #0 to host localhost left intact\nOk\n```", "```\naz network nsg rule create --nsg-name kube-nsg \\\n -n pub_https_allow \\\n --direction Inbound \\\n --priority 110 \\\n --access Allow \\\n --description \"Allow HTTPS\" \\\n --destination-address-prefixes '*' \\\n --destination-port-ranges 6443 \\\n --protocol Tcp \\\n --source-address-prefixes '*' \\\n --source-port-ranges '*' \\\n --direction Inbound\n```", "```\n{\n \"major\": \"1\",\n \"minor\": \"12\",\n \"gitVersion\": \"v1.12.0\",\n \"gitCommit\": \"0ed33881dc4355495f623c6f22e7dd0b7632b7c0\",\n \"gitTreeState\": \"clean\",\n \"buildDate\": \"2018-09-27T16:55:41Z\",\n \"goVersion\": \"go1.10.4\",\n \"compiler\": \"gc\",\n \"platform\": \"linux/amd64\"\n}\n```", "```\njohndoe@management-vm$ ssh johndoe@kube-node-1\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n```", "```\njohndoe@kube-node-1$ sudo yum install -y kubectl socat conntrack ipset libseccomp\n```", "```\njohndoe@kube-node-1$ wget \\\nhttps://github.com/kubernetes-sigs/cri-tools/releases/download/v1.12.0/crictl-v1.12.0-linux-amd64.tar.gz \\\nhttps://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubelet \\\nhttps://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz \\\nhttps://github.com/opencontainers/runc/releases/download/v1.0.0-rc5/runc.amd64 \\\nhttps://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kube-proxy \\\nhttps://github.com/containerd/containerd/releases/download/v1.1.2/containerd-1.1.2.linux-amd64.tar.gz\n```", "```\njohndoe@kube-node-1$ sudo mkdir -p \\\n/etc/cni/net.d \\\n/opt/cni/bin \\\n/var/lib/kube-proxy \\\n/var/lib/kubelet \\\n/var/lib/kubernetes \\\n/var/run/kubernetes\n```", "```\njohndoe@kube-node-1$ mv runc.amd64 runc\n```", "```\njohndoe@kube-node-1$ chmod +x kube-proxy kubelet runc\n```", "```\njohndoe@kube-node-1$ sudo mv kube-proxy kubelet runc /usr/local/bin/\n```", "```\njohndoe@kube-node-1$ tar xvzf crictl-v1.12.0-linux-amd64.tar.gz\n\njohndoe@kube-node-1$ sudo mv crictl /usr/local/bin/\n\njohndoe@kube-node-1$ sudo tar xvzf cni-plugins-amd64-v0.6.0.tgz -C /opt/cni/bin/\n\njohndoe@kube-node-1$ tar xvzf containerd-1.1.2.linux-amd64.tar.gz\n\njohndoe@kube-node-1$ sudo mv ./bin/* /bin/\n```", "```\njohndoe@kube-node-1$ sudo mkdir -p /etc/containerd/\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF | sudo tee /etc/containerd/config.toml\n[plugins]\n[plugins.cri.containerd]\nsnapshotter = \"overlayfs\"\n[plugins.cri.containerd.default_runtime]\nruntime_type = \"io.containerd.runtime.v1.linux\"\nruntime_engine = \"/usr/local/bin/runc\"\nruntime_root = \"\"\nEOF\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF | sudo tee /etc/systemd/system/containerd.service\n[Unit]\nDescription=containerd container runtime\nDocumentation=https://containerd.io\nAfter=network.target\n\n[Service]\nExecStartPre=/sbin/modprobe overlay\nExecStart=/bin/containerd\nRestart=always\nRestartSec=5\nDelegate=yes\nKillMode=process\nOOMScoreAdjust=-999\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-node-1$ sudo mv /home/johndoe/${HOSTNAME}-key.pem /home/johndoe/${HOSTNAME}.pem /var/lib/kubelet/\n\njohndoe@kube-node-1$ sudo mv /home/johndoe/${HOSTNAME}.kubeconfig /var/lib/kubelet/kubeconfig\n\njohndoe@kube-node-1$ sudo mv /home/johndoe/ca.pem /var/lib/kubernetes/\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n anonymous:\n enabled: false\n webhook:\n enabled: true\n x509:\n clientCAFile: \"/var/lib/kubernetes/ca.pem\"\nauthorization:\n mode: Webhook\nclusterDomain: \"cluster.local\"\nclusterDNS: \n - \"10.20.0.10\"\nruntimeRequestTimeout: \"15m\"\ntlsCertFile: \"/var/lib/kubelet/${HOSTNAME}.pem\"\ntlsPrivateKeyFile: \"/var/lib/kubelet/${HOSTNAME}-key.pem\"\nEOF\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF | sudo tee /etc/systemd/system/kubelet.service\n[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=containerd.service\nRequires=containerd.service\n\n[Service]\nExecStart=/usr/local/bin/kubelet \\\\\n --config=/var/lib/kubelet/kubelet-config.yaml \\\\\n --container-runtime=remote \\\\\n --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\\\\n --image-pull-progress-deadline=2m \\\\\n --kubeconfig=/var/lib/kubelet/kubeconfig \\\\\n --network-plugin=cni \\\\\n --register-node=true \\\\\n --v=2 \\\\\n --hostname-override=${HOSTNAME} \\\\\n --allow-privileged=true\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-node-1$ sudo mv /home/johndoe/kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nclientConnection:\n kubeconfig: \"/var/lib/kube-proxy/kubeconfig\"\nmode: \"iptables\"\nclusterCIDR: \"10.30.0.0/16\"\nEOF\n```", "```\njohndoe@kube-node-1$ sudo cat << EOF | sudo tee /etc/systemd/system/kube-proxy.service\n[Unit]\nDescription=Kubernetes Kube Proxy\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nExecStart=/usr/local/bin/kube-proxy \\\\\n --config=/var/lib/kube-proxy/kube-proxy-config.yaml\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```\njohndoe@kube-node-1$ sudo systemctl daemon-reload && \\\nsystemctl enable containerd kubelet kube-proxy && \\\nsystemctl start containerd kubelet kube-proxy && \\\nsystemctl status containerd kubelet kube-proxy\n```", "```\nfor i in 1 2; do \naz network nic update \\\n-n $(az vm show --name kube-node-${i} --query [networkProfile.networkInterfaces[*].id] --output tsv | sed 's:.*/::') \\\n--ip-forwarding true\ndone\n```", "```\njohndoe@kube-node-1$ sudo sysctl net.ipv4.conf.all.forwarding=1\n\njohndoe@kube-node-1$ sudo echo \"net.ipv4.conf.all.forwarding=1\" | tee -a /etc/sysctl.conf\n```", "```\njohndoe@management-vm$ kubectl config set-cluster kube \\\n --certificate-authority=/home/johndoe/certs/ca.pem \\\n --embed-certs=true \\\n --server=https://104.45.174.96:6443\n\njohndoe@management-vm$ kubectl config set-credentials admin \\\n --client-certificate=/home/johndoe/certs/admin/admin.pem \\\n --client-key=~/certs/admin/admin-key.pem\n\njohndoe@management-vm$ kubectl config set-context kube \\\n --cluster=kube \\\n --user=admin\n\njohndoe@management-vm$ kubectl config use-context kube\n```", "```\njohndoe@management-vm$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')&env.IPALLOC_RANGE=10.30.0.0/16\"\n```", "```\njohndoe@management-vm$ kubectl create -f https://raw.githubusercontent.com/dsalamancaMS/CoreDNSforKube/master/coredns.yaml\n```", "```\njohndoe@management-vm$  kubectl get pods -n kube-system\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: nginx-deployment\n labels:\n app: nginx\nspec:\n replicas: 3\n selector:\n matchLabels:\n app: nginx\n template:\n metadata:\n labels:\n app: nginx\n spec:\n containers:\n - name: nginx\n image: nginx:1.7.9\n ports:\n - containerPort: 80\n```"]