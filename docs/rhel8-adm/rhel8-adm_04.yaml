- en: '*Chapter 3*: Basic Commands and Simple Shell Scripts'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*：基本命令和简单的shell脚本'
- en: Once you have your first **Red Hat Enterprise Linux (RHEL)** system running,
    you want to start using it, practicing, and getting comfortable with it. In this
    chapter, we will review the basics of logging into the system, navigating through
    it, and getting to know the basics in terms of its administration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的第一个**Red Hat Enterprise Linux (RHEL)**系统运行起来，您就想开始使用它，练习并熟悉它。在本章中，我们将回顾登录系统、浏览系统和了解其管理基础知识的基础知识。
- en: The set of commands and practices described in this chapter will be used on
    many occasions when managing systems, so it is important to study them with care.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述的一套命令和实践将在管理系统时经常使用，因此重要的是要仔细学习它们。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Logging in as a user and managing multi-user environments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以用户身份登录和管理多用户环境
- en: Changing users with the su command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用su命令切换用户
- en: Using the command line, environment variables, and navigating through the filesystem
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行、环境变量和浏览文件系统
- en: Understanding I/O redirection in the command line
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解命令行中的I/O重定向
- en: Filtering output with grep and sed
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用grep和sed过滤输出
- en: Listing, creating, copying, and moving files and directories, links, and hard
    links
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单、创建、复制和移动文件和目录、链接和硬链接
- en: Using tar and gzip
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用tar和gzip
- en: Creating basic shell scripts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本的shell脚本
- en: Using system documentation resources
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系统文档资源
- en: Logging in as a user and managing multi-user environments
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以用户身份登录和管理多用户环境
- en: '**Login** is the process during which a user identifies themselves in the system,
    usually by providing a **username** and **password**, a couple of pieces of information
    often referred to as *credentials*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**登录**是用户在系统中识别自己的过程，通常是通过提供**用户名**和**密码**来完成的，这两个信息通常被称为*凭据*。'
- en: The system can be accessed in many ways. The initial case for this, which we
    are covering here, is how a user accesses it when they install a physical machine
    (such as a laptop) or via the virtualization software interface. In this case,
    we are accessing the system through a *console*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统可以以多种方式访问。我们在这里讨论的初始情况是，当用户安装物理机器（如笔记本电脑）或通过虚拟化软件界面访问时，用户如何访问系统。在这种情况下，我们通过*控制台*访问系统。
- en: 'During installation, the user was created with an assigned password, and no
    graphical interface was installed. We will access the system in this case via
    its *text console*. The first thing we are going to do is to log in to the system
    using it. Once we start the machine and the boot process is completed, we will
    enter, by default, the multi-user text mode environment in which we are being
    requested to provide our **login**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，用户被创建并分配了密码，并且没有安装图形界面。在这种情况下，我们将通过其*文本控制台*访问系统。我们要做的第一件事是使用它登录系统。一旦启动机器并完成引导过程，我们将默认进入多用户文本模式环境，其中我们被要求提供我们的**登录**：
- en: '![Figure 3.1 – Login process, username request'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 - 登录过程，用户名请求'
- en: '](img/B16799_03_001.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_03_001.jpg)'
- en: Figure 3.1 – Login process, username request
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 - 登录过程，用户名请求
- en: 'The blinking cursor will let us know that we are ready to enter our username,
    in this case `user`, and then press *Enter*. A line requesting the password will
    appear:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 闪烁的光标将告诉我们，我们已经准备好输入我们的用户名，这里是`user`，然后按*Enter*。会出现一个要求输入密码的行：
- en: '![Figure 3.2 – Login process, password request'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 - 登录过程，密码请求'
- en: '](img/B16799_03_002.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_03_002.jpg)'
- en: Figure 3.2 – Login process, password request
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 - 登录过程，密码请求
- en: 'We may now type the user''s password to complete the log in and, by pressing
    *Enter* on your keyboard, start a session. Note that no character will be displayed
    on screen when typing the password to avoid eavesdropping on it. This would be
    the session running:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以输入用户的密码来完成登录，并通过键盘上的*Enter*键开始一个会话。请注意，在输入密码时屏幕上不会显示任何字符，以避免窃听。这将是正在运行的会话：
- en: '![Figure 3.3 – Login process, login completed, session running'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 - 登录过程，登录完成，会话运行'
- en: '](img/B16799_03_003.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_03_003.jpg)'
- en: Figure 3.3 – Login process, login completed, session running
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 - 登录过程，登录完成，会话运行
- en: Now we are fully logged in to the system with the *credentials* for the user
    named `user`. This will define what we can do in the system, which files we can
    access, and even how much disk space we have assigned.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完全以名为`user`的用户的*凭据*完全登录到系统。这将决定我们在系统中可以做什么，我们可以访问哪些文件，甚至我们分配了多少磁盘空间。
- en: The console can have more than one session. To make that possible, we have different
    terminals through which we can log in. The default terminal can be reached by
    simultaneously pressing the *Ctrl + Alt + F1* keys. In our case, nothing will
    happen as we are already in that terminal. We could move to the second terminal
    by pressing *Ctrl + Alt + F2*, to the third one by pressing *Ctrl + Alt + F3*,
    and so on for the rest of the terminals (by default, six are allocated). This
    way, we can run different commands in different terminals.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台可以有多个会话。为了实现这一点，我们有不同的终端可以登录。默认终端可以通过同时按下*Ctrl + Alt + F1*键来到达。在我们的情况下，什么也不会发生，因为我们已经在那个终端上了。我们可以通过按*Ctrl
    + Alt + F2*来到第二个终端，按*Ctrl + Alt + F3*来到第三个终端，以此类推，直到剩下的终端（默认情况下分配了六个）。这样，我们可以在不同的终端中运行不同的命令。
- en: Using the root account
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用root账户
- en: Regular users will not be able to make changes to the system, such as creating
    new users or adding new software to the whole system. To do so, we need a user
    with administrative privileges and for that, the default user is `root`. This
    user always exists in the system and its identifier (`0`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户无法对系统进行更改，比如创建新用户或向整个系统添加新软件。为此，我们需要一个具有管理权限的用户，而默认用户就是`root`。这个用户始终存在于系统中，其标识符为`0`。
- en: 'In the previous installation, we have configured the root password, making
    the account accessible through the console. To use it by logging in the system,
    we only need to type, in one of the terminals shown, right next to `root`, then
    hit *Enter*, and then provide its `root`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的安装中，我们已经配置了root密码，使得可以通过控制台访问该账户。要在系统中使用它，我们只需要在显示的终端之一中输入`root`，然后按下*Enter*，然后提供其`root`：
- en: '![Figure 3.4 – Login process, login completed as root'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 - 登录过程，以root用户完成登录'
- en: '](img/B16799_03_004.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_03_004.jpg)'
- en: Figure 3.4 – Login process, login completed as root
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 - 登录过程，以root用户完成登录
- en: Using and understanding the command prompt
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用和理解命令提示符
- en: The command line that appears once we have logged in and are waiting for our
    commands to be typed and run is called the **command prompt**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们登录并等待输入和运行命令的命令行出现，就称为**命令提示符**。
- en: In its default configuration, it will show the *username* and *hostname* between
    brackets to let us know with which user we are working. Next, we see the path,
    in this case `~`, which is the shortcut for the `/home/user` for `user`, and `/root`
    for `root`)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在其默认配置中，它将在括号之间显示*用户名*和*主机名*，以便让我们知道我们正在使用哪个用户。接下来，我们看到路径，这里是`~`，它是`/home/user`的快捷方式，对于`user`用户，以及`/root`对于`root`用户）
- en: 'The last part and, probably the most important one, is the symbol before the
    prompt:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个部分，也可能是最重要的部分，是提示符前面的符号：
- en: The `$` symbol is used for regular uses with no administrative privileges.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$`符号用于没有管理权限的常规用户。'
- en: The `#` symbol is used for root or once a user has acquired administrative privileges.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#`符号用于root或一旦用户获得管理权限。'
- en: Important note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be careful when using a prompt with the `#` sign as you will be running as an
    administrator and the system will, very likely, not stop you from damaging it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用带有`#`符号的提示符时要小心，因为您将以管理员身份运行，系统很可能不会阻止您损坏它。
- en: Once we have identified ourselves in the system, we are logged in and have a
    running session. It is time to learn how to change from one user to the other
    in the next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在系统中标识了自己，我们就已经登录并有了一个运行的会话。现在是时候学习如何在下一节中从一个用户切换到另一个用户了。
- en: Changing users with the su command
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用su命令切换用户
- en: As we have entered a **multi-user system**, it is logical to think that we will
    be able to change between users. Even when this can be done easily by opening
    a session for each, sometimes we want to act as other users in the same session
    we are in.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经进入了一个**多用户系统**，因此可以合理地认为我们将能够在用户之间切换。即使可以通过为每个用户打开会话来轻松完成此操作，但有时我们希望在同一个会话中以其他用户的身份行事。
- en: To do so, we can use the `su` tool. The name of the tool is usually referred
    to as **Substitute User**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以使用`su`工具。该工具的名称通常被称为**替代用户**。
- en: Let's use that last session in which we logged in as `root` and turn ourselves
    into the `user` user.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用上次以`root`登录的会话，并将自己转换为`user`用户。
- en: 'Before doing so, we can always ask which user I am logged in with by running
    the `whoami` command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之前，我们可以通过运行`whoami`命令来询问我当前登录的用户是谁：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we can make the change from `root` to `user`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从`root`切换到`user`：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we have a session as the `user` user. We could finish this session by using
    the `exit` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个`user`用户的会话。我们可以使用`exit`命令结束此会话：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you may have seen, when we are logged in as `root`, we can act as any user
    without knowing its password. But how can we impersonate `root`? We can do so
    by running the `su` command and specifying the `root` user. In this case, the
    root user''s password will be requested:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经看到的，当我们以`root`登录时，我们可以像任何用户一样行事，而无需知道其密码。但是我们如何冒充`root`呢？我们可以通过运行`su`命令并指定`root`用户来做到这一点。在这种情况下，将要求输入root用户的密码：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As `root` is the user with the ID `0` and the most important one, when running
    `su` without specifying the user we want to turn to, it will default to turning
    ourselves into `root`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`root`是ID为`0`且最重要的用户，因此在运行`su`而不指定要转换的用户时，它将默认转换为`root`：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each user can define several options in their own environment, such as, for
    example, their preferred editor. If we want to fully impersonate the other user
    and take their preferences (or `-` after the `su` command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都可以在自己的环境中定义多个选项，例如他们喜欢的编辑器。如果我们想完全冒充其他用户并采用他们的偏好（或在`su`命令后加上`-`：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also, we can switch from `root` to `user`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以从`root`切换到`user`：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can observe, it behaves as if a new login was done, but within the same
    session. Now, let's move on to managing the permissions for the different users
    in the system, as addressed in the next section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所观察到的，它的行为就像进行了新的登录，但在同一个会话中。现在，让我们继续管理系统中不同用户的权限，如下一节所述。
- en: Understanding users, groups, and basic permissions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解用户、组和基本权限
- en: 'Multi-user environments are defined by being able to handle more than one user
    simultaneously. But in order to be able to administer the system resources, there
    are two capabilities that help with the tasks:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多用户环境的定义在于能够同时处理多个用户。但是为了能够管理系统资源，有两种能力可以帮助完成任务：
- en: '**Groups**: Can aggregate users and provide permission for them in blocks.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：可以聚合用户并以块为它们提供权限。'
- en: Each user has a *primary group*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都有一个*主要组*。
- en: By default, a group is created for each user and assigned to it as a primary
    with the same name as the username.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，为每个用户创建一个组，并将其分配为与用户名相同的主要组。
- en: '`ugo`).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ugo`）。'
- en: The whole system comes with a set of permissions assigned by default to each
    file and directory. Be careful when changing them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 整个系统都有一组默认分配给每个文件和目录的权限。在更改它们时要小心。
- en: 'There is a principle in UNIX that Linux inherited that is: *everything is a
    file*. Even when there may be some corner cases to this principle, it stays true
    on almost any occasion. It means that a disk is represented as a file in the system
    (in other words, like `/dev/sdb` mentioned in the installation), a process can
    be represented as a file (under `/proc`) and many other components in the system
    are represented as files.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX中有一个原则，Linux继承了它，那就是：*一切皆为文件*。即使可能有一些特例，这个原则在几乎任何情况下都是正确的。这意味着磁盘在系统中表示为文件（换句话说，就像安装中提到的`/dev/sdb`），进程可以表示为文件（在`/proc`下），系统中的许多其他组件都表示为文件。
- en: This means that, when assigning permissions to files, we can also assign permissions
    to many other components and capabilities implemented by them by virtue of the
    fact that, in Linux, everything is represented as a file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在分配文件权限时，我们也可以分配给许多其他组件和功能的权限，因为在Linux中，一切都表示为文件。
- en: Tip
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '**POSIX** stands for **Portable Operating System Interface** and is a family
    of standards specified by the IEEE Computer Society: [https://en.wikipedia.org/wiki/POSIX](https://en.wikipedia.org/wiki/POSIX).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**POSIX**代表**可移植操作系统接口**，是由IEEE计算机学会指定的一系列标准：[https://en.wikipedia.org/wiki/POSIX](https://en.wikipedia.org/wiki/POSIX)。'
- en: Users
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: 'Users are a way of providing security limits to people as well as programs
    running in a system. There are three types of users:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用户是为人们以及在系统中运行的程序提供安全限制的一种方式。有三种类型的用户：
- en: '**Regular users**: Assigned to individuals to perform their job. They have
    restrictions applied to them.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通用户**：分配给个人执行其工作的用户。他们受到了限制。'
- en: '**Superuser**: Also referred to as ''''root." This is the main administrative
    account in the system and has full access to it.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超级用户**：也称为''''root''''。这是系统中的主管理帐户，对其拥有完全访问权限。'
- en: '**System users**: These are user accounts usually assigned to running processes
    or ''''daemons'''' to limit their reach within the system. System users are not
    intended to log in to the system.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统用户**：这些是通常分配给运行进程或''''守护进程''''的用户帐户，以限制它们在系统中的范围。系统用户不打算登录到系统。'
- en: Users have a number called the **UID (User Id)** that the system uses to internally
    identify each one of them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用户有一个称为**UID（用户ID）**的数字，系统用它来内部识别每个用户。
- en: 'We previously used the `whoami` command to reveal which user we were working
    with, but to get more information, we will use the `id` command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用`whoami`命令来显示我们正在使用的用户，但是为了获取更多信息，我们将使用`id`命令：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also check on the information related to other user accounts in the
    system, even to get info about `root`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看系统中其他用户帐户的相关信息，甚至获取`root`的信息：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s take a look at the information we have received for `user` by running
    `id`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行`id`来查看我们收到的有关`user`的信息：
- en: '`uid=1000(user)`: The user ID is the numeric identifier of the user in the
    system. In this case, it is `1000`. Identifiers of 1000 and above are used in
    RHEL for regular users, whereas 999 and below are reserved for system users.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uid=1000(user)`：用户ID是系统中用户的数字标识符。在这种情况下，它是`1000`。在RHEL中，1000及以上的标识符用于普通用户，而999及以下的标识符保留给系统用户。'
- en: '`gid=1000(user)`: The group ID is the numeric identifier for the principal
    group assigned to the user.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gid=1000(user)`：组ID是分配给用户的主要组的数字标识符。'
- en: '`groups=1000(user),10(wheel)`: These are the groups that the user belongs to,
    in this case, ''''user'''' with `sudo` tool (to be explained later).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups=1000(user),10(wheel)`：这些是用户所属的组，在这种情况下，''''user''''使用`sudo`工具（稍后将解释）。'
- en: '`context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023`: This is the
    SELinux context for the user. It will define several restrictions in the system
    by using **SELinux** (to be explained in depth in [*Chapter 10*](B16799_10_Final_SK_ePub.xhtml#_idTextAnchor143),
    *Keeping Your System Hardened with SELinux*).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023`：这是用户的SELinux上下文。它将使用**SELinux**在系统中定义多个限制（在[*第10章*](B16799_10_Final_SK_ePub.xhtml#_idTextAnchor143)中将深入解释，*使用SELinux保护系统*）。'
- en: 'ID-related data is stored in the system in the `/etc/passwd` file. Please note
    that this file is very sensitive and is better managed by using the tools related
    to it. In case we want to edit it, we will do so by using `vipw`, a tool that
    will ensure (among other things) that only one admin is editing the file at any
    one time. The `/etc/passwd` file contains the info of each user per line. This
    is the line for `user`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与ID相关的数据存储在系统中的`/etc/passwd`文件中。请注意，该文件非常敏感，最好使用与之相关的工具进行管理。如果我们想要编辑它，我们将使用`vipw`，这是一个工具，将确保（除其他事项外）只有一个管理员在任何时候编辑文件。`/etc/passwd`文件包含每个用户的信息。这是`user`的行：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Each field is separated by a colon, `:` in each line. Let''s review what they
    mean:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字段在每行中由冒号`:`分隔。让我们来看看它们的含义：
- en: '`user`: The username assigned to the user.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：分配给用户的用户名。'
- en: '`x`: The field for the encrypted password. In this case, it shows as `x` because
    it has moved to `/etc/shadow`, which is not directly accessible by regular users,
    to make the system more secure.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：加密密码的字段。在这种情况下，它显示为`x`，因为它已经移动到`/etc/shadow`，普通用户无法直接访问，以使系统更安全。'
- en: '`1000` (first one): *The UID* value.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1000`（第一个）：*UID*值。'
- en: '`1000` (second one): *The GID* value.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1000`（第二个）：*GID*值。'
- en: '`user`: A description of the account.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：帐户的描述。'
- en: '`/home/user`: The home directory assigned to the user. This will be the default
    directory (or folder if you prefer) that the user will work on and where their
    preferences will be stored.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/user`：分配给用户的主目录。这将是用户将要工作的默认目录（或者如果你愿意的话，文件夹），以及他们的偏好设置将被存储的地方。'
- en: '`/bin/bash`: The command interpreter for the user. Bash is the default interpreter
    in RHEL. Other alternatives, such as `tcsh,` `zsh`, or `fish` are available to
    be installed in RHEL.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/bin/bash`：用户的命令解释器。Bash是RHEL中的默认解释器。其他替代品，如`tcsh`，`zsh`或`fish`可在RHEL中安装。'
- en: Groups
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组
- en: '`/srv/finance` directory. When the finance team has a new hire, in order to
    provide them with access to that folder, we only need to add the user assigned
    to this person to the `finance` group (this also works if someone leaves the team;
    we will only have to remove their account from the `finance` group).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`/srv/finance`目录。当财务团队有新员工时，为了让他们能够访问该文件夹，我们只需要将分配给这个人的用户添加到`finance`组中（如果有人离开团队，我们只需要从`finance`组中删除他们的帐户）。'
- en: Groups have a number called the **GID** that the system uses to identify them
    internally.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 组有一个称为**GID**的数字，系统用它来在内部识别它们。
- en: 'The data for groups is stored in the system in the `/etc/group` file. To edit
    this file in a way that ensures consistency and avoids corruption, we must use
    the `vigr` tool. The file contains one group per line with different fields separated
    by a colon, `:`. Let''s take a look at the line for the `wheel` group:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 组的数据存储在系统中的`/etc/group`文件中。为了以确保一致性并避免损坏的方式编辑此文件，我们必须使用`vigr`工具。文件中每行包含一个组，不同字段用冒号`:`分隔。让我们看一下`wheel`组的行：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s review what each field means:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下每个字段的含义：
- en: '`wheel`: This is the name of the group. In this case, this group is special
    as it is configured to be used, by default, as the one to provide admin privileges
    to regular users.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wheel`：这是组的名称。在这种情况下，这个组是特殊的，因为它被配置为默认情况下用作为普通用户提供管理员特权的组。'
- en: '`x`: This is the group password field. It''s currently obsolete and should
    always contain `x`. It is kept for compatibility purposes.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：这是组密码字段。它目前已经过时，应始终包含`x`。它保留用于兼容性目的。'
- en: '`10`: This is the GID value for the group itself.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10`：这是组本身的GID值。'
- en: '`user`: This is the list of the users belonging to that group (separated by
    commas, such as `user1`, `user2`, and `user3`).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：这是属于该组的用户列表（用逗号分隔，如`user1`，`user2`和`user3`）。'
- en: 'The types of groups are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 组的类型如下：
- en: '**Primary group**: This is the group assigned to the files newly created by
    the user.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要组**：这是用户新创建的文件分配的组。'
- en: '**Private group**: This is a specific group, with the same name as the user,
    that is created for each user. When adding a new user account, a private group
    will be automatically created for it. It is very common that the ''''primary group''''
    and ''''private group'''' are one and the same.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有组**：这是一个特定的组，与用户同名，为每个用户创建。添加新用户帐户时，将自动为其创建一个私有组。很常见的是''''主要组''''和''''私有组''''是一样的。'
- en: '`wheel` group for enabling admin privileges to users, or the `cdrom` group
    for providing access to CDs and DVD devices in the system.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wheel`组用于为用户启用管理员特权，或者`cdrom`组用于在系统中提供对CD和DVD设备的访问。'
- en: File permissions
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件权限
- en: To review `root`. We will use the `ls` command to list files and we will review
    the permissions associated with them. We will learn more on how to change permissions
    in [*Chapter 5*](B16799_05_Final_SK_ePub.xhtml#_idTextAnchor081), *Securing Systems
    with Users, Groups, and Permissions*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`root`。我们将使用`ls`命令列出文件，并查看与它们关联的权限。我们将在[*第5章*](B16799_05_Final_SK_ePub.xhtml#_idTextAnchor081)中学习如何更改权限，*使用用户、组和权限保护系统*。
- en: 'Once logged in to the system as `root`, we can run the `ls` command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦以`root`身份登录系统，我们可以运行`ls`命令：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This shows the files present in the *root user home directory*, represented
    by `~`. In this case, it shows the *kickstart* file created by *Anaconda* that
    we reviewed in the previous chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了*root用户主目录*中存在的文件，用`~`表示。在这种情况下，它显示了在上一章中我们审查过的*Anaconda*创建的*kickstart*文件。
- en: 'We could get the long version of the list by appending the `-l` option to `ls`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`ls`后附加`-l`选项来获取列表的长版本：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We see the following in the output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在输出中看到以下内容：
- en: '`total 4`: This is the total space, in kilobytes, occupied in the disk by the
    files (note that we are using 4K blocks, so every file under that size will occupy
    a minimum of 4K).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`total 4`：这是文件在磁盘上占用的总空间，以千字节为单位（请注意，我们使用的是4K块，因此每个小于该大小的文件将占用至少4K）。'
- en: '`-rw-------.`: These are the permissions assigned to the file.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-rw-------.`：这些是分配给文件的权限。'
- en: 'The structure of the permissions can be seen in the following diagram:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 权限的结构可以在以下图表中看到：
- en: '![Figure 3.5 – Linux permissions structure'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 - Linux权限结构'
- en: '](img/B16799_03_005.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_03_005.jpg)'
- en: Figure 3.5 – Linux permissions structure
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 - Linux权限结构
- en: 'The first character is for the *special permissions* that the file may have.
    If it is a regular file, and has no special permission (as in this case), it will
    appear as `-`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符是文件可能具有的*特殊权限*。如果它是一个常规文件，并且没有特殊权限（就像在这种情况下），它将显示为`-`：
- en: Directories will appear with `d`. Consider that in Linux, everything is a file,
    and directories are a file with special permissions.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录将显示为`d`。请考虑在Linux中，一切都是文件，目录是具有特殊权限的文件。
- en: Links, usually symbolic links, will appear with a `l`. These behave like a shortcut
    to a file from a different directory.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接，通常是符号链接，将显示为`l`。这些行为类似于从不同目录的文件的快捷方式。
- en: Special permissions to run a file as a different user or group, called `s`.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊权限以不同的用户或组身份运行文件，称为`s`。
- en: A special permission so that the owner can only remove or rename the file, called
    the `t`.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个特殊权限，使所有者只能删除或重命名文件，称为`t`。
- en: 'The next three characters, `rw-`, are the permissions for the *owner*:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个字符`rw-`是*所有者*的权限：
- en: The first one, `r`, is the read permission assigned.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个字符`r`是分配的读权限。
- en: The second one, `w`, is the write permission assigned.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个字符`w`是分配的写权限。
- en: The third one, `x`, not present and shown as `-`, is the executable permission.
    Note that executable permission for directories means being able to enter them.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个字符`x`，不存在并显示为`-`，是可执行权限。请注意，对于目录的可执行权限意味着能够进入它们。
- en: The next three characters, `---`, are for the *group* permissions and work the
    same way as the owner permission. In this case, no group access is granted.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个字符`---`是*组*权限，与所有者权限的工作方式相同。在这种情况下，没有授予组访问权限。
- en: 'The final three characters, `---`, are the permissions for *others*, which
    means users and/or groups do not show as the ones assigned to the file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个字符`---`是*其他人*的权限，这意味着用户和/或组不会显示为分配给文件的权限：
- en: '`1`: This indicates the number of **links** (hard links) to this file. This
    is intended, among other things, so that we do not delete a file used in another
    folder.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`: 这表示对该文件的**链接**（硬链接）的数量。这是为了防止我们删除另一个文件夹中使用的文件等目的。'
- en: '`root`: This indicates the (first-time) owner of the file.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`: 这表示文件的（第一次）所有者。'
- en: '`root`: This indicates the (second-time) group assigned to the file.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`: 这表示文件分配给的（第二次）组。'
- en: '`1393`: This indicates the size in bytes.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1393`: 这表示以字节为单位的大小。'
- en: '`Dec 7 16:45`: This indicates the date and time that the file was last modified.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dec 7 16:45`: 这表示文件上次修改的日期和时间。'
- en: '`anaconda-ks.cfg`: This indicates the filename.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anaconda-ks.cfg`: 这表示文件名。'
- en: 'When we list a directory (referred to in other systems as *folder*), the output
    will show the contents of the directory itself. We can list the info for the directory
    itself with the `-d` `option`. Let''s now take a look at `/etc`, the directory
    that stores the system-wide configuration:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们列出一个目录（在其他系统中称为*文件夹*）时，输出将显示目录本身的内容。我们可以使用`-d` `option`列出目录本身的信息。现在让我们来看看`/etc`，这个存储系统范围配置的目录：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, it's quite easy to obtain information pertaining to files and
    directories in the system. Let's now learn more about the command line and how
    to navigate the filesystem, in order to move around the system easily, in the
    next section.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，很容易获取有关系统中文件和目录的信息。现在让我们在下一节中学习更多关于命令行以及如何在文件系统中导航，以便轻松地在系统中移动。
- en: Using the command line, environment variables, and navigating through the filesystem
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行、环境变量和浏览文件系统
- en: As we have seen before, once we *log in* to the system, we have access to the
    command line. It's important to navigate the command line and the filesystem well
    in order to feel comfortable in the environment and make the most of it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，一旦我们登录系统，我们就可以访问命令行。熟练地浏览命令行和文件系统对于在环境中感到舒适并充分利用它至关重要。
- en: Command line and environment variables
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行和环境变量
- en: 'The command line is provided by a program also known as *interpreter* or **shell**.
    It will behave differently depending on which shell we use, but in this section,
    we will cover the most widespread shell used in Linux and the one provided by
    default in RHEL: **bash**.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行由一个程序提供，也称为*解释器*或**shell**。它的行为取决于我们使用的shell，但在本节中，我们将介绍Linux中最常用的shell，也是RHEL默认提供的shell：**bash**。
- en: 'A simple trick to know which shell you are using is to run the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 知道你正在使用哪个shell的一个简单技巧是运行以下命令：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `echo` command will show on screen the content of whatever we give to it.
    Some content needs to be *substituted* or *interpreted*, like environment variables.
    The content to be substituted starts with the `$` symbol. In this case, we are
    telling the system to `echo` the content of the `SHELL` variable. Let''s use it
    for other variables:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo`命令将在屏幕上显示我们给它的内容。有些内容需要*替换*或*解释*，比如环境变量。需要替换的内容以`$`符号开头。在这种情况下，我们告诉系统`echo`变量`SHELL`的内容。让我们用它来处理其他变量：'
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'These are **environment variables** that can be customized for every user.
    Let''s now check these for a different user:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可以为每个用户自定义的**环境变量**。现在让我们为另一个用户检查这些：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, you can always refer to `$USER` and it will be substituted with
    the current user, or to `$HOME` and it will be substituted by the directory dedicated
    to the user, also known as the **home directory**.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你可以随时引用`$USER`，它将被当前用户替换，或者引用`$HOME`，它将被替换为用户专用的目录，也称为**主目录**。
- en: 'These are some of the most common and important *environment variables*:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些最常见和重要的*环境变量*：
- en: '![](img/B16799_03_Table_01.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16799_03_Table_01.jpg)'
- en: The `~/.bashrc` file is the one that should be edited in order to change these
    values for the current user.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`~/.bashrc`文件应该被编辑以更改当前用户的这些值。'
- en: Navigating the filesystem
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览文件系统
- en: Now it's time to move ourselves into the `/`. The rest of the content of the
    system will hang from that folder and any other disk or device to be accessed
    will be assigned a directory to be accessed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们自己移动到`/`了。系统的其余内容将悬挂在那个文件夹下，任何其他磁盘或设备都将被分配一个目录以供访问。
- en: Important note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The *root directory* and the *home directory* for the *root user* are two different
    things. The *root user* has assigned, by default, the home directory, `/root`,
    whereas the *root directory* is the mother of all directories in the system and
    is represented by `/`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 根目录和root用户的主目录是两回事。root用户默认分配了主目录`/root`，而根目录是系统中所有目录的母目录，用`/`表示。
- en: 'We can see which directory we are in by running the `pwd` command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行`pwd`命令来查看我们所在的目录：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can change directory by using the `cd` command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`cd`命令来更改目录：
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you already know, there is a `~`. We can use this shortcut to go to it:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，有一个`~`。我们可以使用这个快捷方式去到它：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Some shortcuts for directories include the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一些目录的快捷方式包括以下内容：
- en: '**"~":** This is the home of the current user.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**"~":** 这是当前用户的主目录。'
- en: '**".":** This is the current directory.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**".":** 这是当前目录。'
- en: '**"..":** This is the parent directory.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**"..":** 这是父目录。'
- en: '**"-":** This is the directory used previously.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**"-":** 这是先前使用的目录。'
- en: More details on managing files and directories in Linux and RHEL are available
    in the *Listing, creating, copying, and moving files and directories, links, and
    hard links* section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Linux和RHEL中管理文件和目录的更多详细信息，请参阅*列出、创建、复制和移动文件和目录、链接和硬链接*部分。
- en: Bash autocomplete
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash自动补全
- en: Shortcuts are a faster way to reach commonly used directories or relative references
    to the current working directory. However, bash includes some capabilities to
    reach other directories in a fast way, which is called **autocompletion**. It
    relies on the *Tab* key (the one with two opposing arrows at the very left of
    your keyboard, right above *Caps Lock*).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷方式是到达常用目录或当前工作目录的相对引用的更快方式。但是，bash包括一些快速到达其他目录的功能，这称为**自动补全**。它依赖于*Tab*键（键盘最左边具有两个相对箭头的键，在*Caps
    Lock*上方）。
- en: 'When reaching a folder or a file, we can hit *Tab* to complete its name. For
    example, if we want to go to the `/boot/grub2` folder, we type the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当到达一个文件夹或文件时，我们可以按*Tab*键来完成它的名称。例如，如果我们想进入`/boot/grub2`文件夹，我们输入以下内容：
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, when we hit the *Tab* key, this will autocomplete it to `/boot/`, even
    adding the final `/` as it is a directory:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们按下*Tab*键时，它会自动补全为`/boot/`，甚至添加最终的`/`，因为它是一个目录：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we type the first letter of the directory we want to go to, `grub2`, which
    is `g`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们输入我们想要进入的目录`grub2`的第一个字母，即`g`：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, when we hit the *Tab* key, this will autocomplete it to `/boot/grub2/`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们按下*Tab*键时，它会自动补全为`/boot/grub2/`：
- en: '[PRE23]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now we can hit *Enter* and go there.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以按*Enter*键并进入那里。
- en: 'If we press *Tab + Tab* (pressing *Tab* twice during complete), this will show
    a list of available targets to complete, for example:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按下*Tab + Tab*（在完成期间按两次*Tab*），这将显示可用目标的列表，例如：
- en: '[PRE24]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It can also be used to complete commands. We can type a letter, for example,
    `h`, hit *Tab + Tab*, and this will show all the commands starting with `h`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以用于完成命令。我们可以输入一个字母，例如`h`，按下*Tab + Tab*，这将显示所有以`h`开头的命令：
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This capability can be extended to help complete other parts of our commands
    by installing the `bash-completion` package:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这种能力可以通过安装`bash-completion`软件包来扩展，以帮助完成我们命令的其他部分：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Previous commands
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以前的命令
- en: There is a way to recover the last commands run, which is referred to as **history**,
    in case you want to re-run them again. Just press the *up arrow* key (the one
    with an arrow pointing up) and the previous commands will appear on screen.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以恢复最后运行的命令，这被称为**历史记录**，以防您想要再次运行它们。只需按下*向上箭头*键（带有向上箭头的键）即可，以及以前的命令将出现在屏幕上。
- en: 'If there are too many commands in your history, you can search through them
    quickly by running the `history` command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的历史记录中有太多命令，您可以通过运行`history`命令快速搜索它们：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can run any of those commands again by using the `!` command. Just run
    `!` with the number of the command and it will run again:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`!`命令再次运行任何这些命令。只需使用命令的编号运行`!`，它将再次运行：
- en: '[PRE28]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The command `!!` will run the very last command again, no matter which number.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`!!`将再次运行最后一个命令，无论编号如何。
- en: Now it is time to enjoy your superfast command line. Let's learn more on the
    structure of directories in Linux, to know where to go in order to find things,
    in the next section.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候享受您的超快命令行了。让我们在下一节中更多地了解Linux中目录的结构，以便知道去哪里查找东西。
- en: Filesystem hierarchy
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统层次结构
- en: 'Linux has a standard, maintained by the *Linux Foundation*, that defines the
    **filesystem hierarchy** and is used in almost every Linux distribution, including
    *RHEL*. This standard is known as **FHS**, or **Filesystem Hierarchy Standard**.
    Let''s review here the most important folders in the standard and the system itself:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有一个由*Linux基金会*维护的标准，定义了**文件系统层次结构**，几乎在每个Linux发行版中都使用，包括*RHEL*。这个标准被称为**FHS**，或**文件系统层次结构标准**。让我们在这里回顾一下标准中最重要的文件夹和系统本身：
- en: '![](img/B16799_03_Table_02.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16799_03_Table_02.jpg)'
- en: Tip
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Previous versions of RHEL used to have `/bin` for the essential binaries and
    `/usr/bin` for the non-essential ones. Now, the content of both resides in `/usr/bin`.
    They also used `/var/lock` and `/var/run` for what is running in `/run`. In addition,
    they used to have `/lib` for the essential libraries and `/usr/lib` for the non-essential
    ones, which were consolidated into a single directory, `/usr/lib`. And last but
    not least, `/sbin` is the directory for the essential super-user binaries, and
    `/usr/sbin` is the directory for the non-essential ones merged under `/usr/sbin`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL的早期版本用于将`/bin`用于基本二进制文件和`/usr/bin`用于非基本二进制文件。现在，两者的内容都驻留在`/usr/bin`中。他们还使用`/var/lock`和`/var/run`来运行`/run`中的内容。此外，他们过去用于将`/lib`用于基本库和`/usr/lib`用于非基本库，这些都合并到一个目录`/usr/lib`中。最后但并非最不重要的是，`/sbin`是基本超级用户二进制文件的目录，`/usr/sbin`是合并到`/usr/sbin`下的非基本二进制文件的目录。
- en: When partitioning, we may well be asking ourselves, where does the disk space
    go?
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在分区时，我们可能会问自己，磁盘空间去哪了？
- en: 'These are the allocation values for a ''''minimal'''' installation of RHEL
    8 and the recommendations:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是RHEL 8''最小''安装的分配值和建议：
- en: '![](img/B16799_03_Table_03.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16799_03_Table_03.jpg)'
- en: It's important to become familiar with the main directories in the system in
    order to make the best of them. It is recommended to navigate through the different
    system directories and look at what's in them in order to become comfortable with
    the structure. In the next section, we will look at how to perform redirections
    on the command line to learn more about command and file interaction.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉系统中的主要目录是很重要的，以便充分利用它们。建议浏览不同的系统目录，并查看其中的内容，以便熟悉结构。在下一节中，我们将学习如何在命令行上执行重定向，以了解更多关于命令和文件交互的内容。
- en: Understanding I/O redirection in the command line
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解命令行中的I/O重定向
- en: We have already run several commands to ascertain information about the system,
    such as listing files with `ls`, and we have got some information, **output**,
    from the running command, including, for example, filenames and file sizes. That
    information, or *output*, can be useful, and we want to be able to work with it,
    store it, and manage it properly.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经运行了几个命令来确定系统的信息，例如使用`ls`列出文件，并且我们从运行的命令中得到了一些信息，**输出**，包括文件名和文件大小。该信息或*输出*可能很有用，我们希望能够正确地处理、存储和管理它。
- en: 'When talking about command *output* and also **input**, there are three sources
    or targets for them that need to be understood:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论命令*输出*和**输入**时，有三个需要理解的来源或目标：
- en: '**STDOUT**: Also known as **Standard Output**, this is where commands will
    put their regular messages to provide information on what they are doing. In a
    terminal, on an interactive shell (like the ones we are using so far), this output
    will show on screen. This will be the main output managed by us.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STDOUT**：也称为**标准输出**，这是命令将其常规消息放置以提供有关其正在执行的操作的信息的地方。在终端上，在交互式shell（就像我们迄今为止使用的那样），此输出将显示在屏幕上。这将是我们管理的主要输出。'
- en: '**STDERR**: Also known as **Standard Error**, this is where the commands will
    put their error messages to be processed. In our interactive shells, this output
    will also be shown on screen together with the standard output unless we specifically
    redirect it.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STDERR**：也称为**标准错误**，这是命令将其错误消息放置在其中以进行处理的地方。在我们的交互式shell中，除非我们明确重定向它，否则此输出也将显示在屏幕上，同时显示标准输出。'
- en: '**STDIN**: Also known as **Standard Input**, this is where the commands get
    data to be processed.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STDIN**：也称为**标准输入**，这是命令获取要处理的数据的地方。'
- en: We will mention these in the next paragraphs to better understand them.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一段中提到这些，以更好地理解它们。
- en: 'The way in which command input and output is used requires the following operators:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输入和输出的使用方式需要以下运算符：
- en: '`|`: A **pipe** operator is used to get the output from one command and make
    it the input of the next command. It *pipes* data from one command to another.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`|`：**管道**运算符用于获取一个命令的输出并将其作为下一个命令的输入。它将数据从一个命令传输到另一个命令。'
- en: '`>`: A **redirect** operator is used to put the output of a command into a
    file. If the file exists, it will be overwritten.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>`：**重定向**运算符用于将命令的输出放入文件中。如果文件存在，它将被覆盖。'
- en: '`<`: **Reverse redirect** can be applied to use a file as input to a command.
    Using it won''t delete the file used as input.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<`：**反向重定向**可以应用于使用文件作为命令的输入。使用它不会删除用作输入的文件。'
- en: '`>>`: A **redirect and add** operator is used to append the output of a command
    into a file. If the file does not exist, it will be created with the output provided
    to it.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>>`：**重定向并添加**运算符用于将命令的输出附加到文件中。如果文件不存在，它将使用提供给它的输出创建文件。'
- en: '`2>`: A **redirect STDERR** operator will only redirect the output sent to
    the error message handler. (Note, no space should be included between ''''2''''
    and ''''>'''' in order for this to work!)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2>`：**重定向STDERR**运算符将仅重定向发送到错误消息处理程序的输出。（注意，为了使其工作，''''2''''和''''>''''之间不应包含空格！）'
- en: '`1>`: A **redirect STDOUT** operator will only redirect the output sent to
    the standard output and not to the error message handler.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1>`：**重定向STDOUT**运算符将仅重定向发送到标准输出而不是错误消息处理程序的输出。'
- en: '`>&2`: A **redirect to STDERR** operator will redirect the output to the standard
    error handler.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>&2`：**重定向到STDERR**运算符将输出重定向到标准错误处理程序。'
- en: '`>&1`: A **redirect to STDOUT** operator will redirect the output to the standard
    output handler.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>&1`：**重定向到STDOUT**运算符将输出重定向到标准输出处理程序。'
- en: To better understand these, we will go through a number of examples in this
    section and the following one.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这些，我们将在本节和下一节中进行一些示例。
- en: 'Let''s get a list of files and put it in a file. First, we list the files in
    `/var`, using the `-m` option to separate entries with commas:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出文件并将其放入文件中。首先，我们使用`-m`选项列出`/var`中的文件，用逗号分隔条目：
- en: '[PRE29]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we run the command again, redirecting the output to the `/root/var-files.txt`
    file:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们再次运行命令，将输出重定向到`/root/var-files.txt`文件中：
- en: '[PRE30]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As we can see, no output is shown on screen, but we will be able to find the
    new file in the current working directory, in this case, `/root`, the newly created
    file:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，屏幕上没有显示任何输出，但是我们将能够在当前工作目录中找到新文件，即`/root`中的新创建的文件：
- en: '[PRE31]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To see the content of the file on screen, we use the `cat` command, intended
    to concatenate the output for several files, but regularly used for this purpose:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要在屏幕上查看文件的内容，我们使用`cat`命令，用于连接几个文件的输出，但通常用于此目的：
- en: '[PRE32]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can also add to this file the content of `/var/lib`. First, we can list
    it:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将`/var/lib`的内容添加到此文件中。首先，我们可以列出它：
- en: '[PRE33]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, to append this content to the `/root/var-files.txt` file, we use the `>>`
    operator:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要将这些内容附加到`/root/var-files.txt`文件中，我们使用`>>`运算符：
- en: '[PRE34]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `/root/var-files.txt` file now contains both the comma-separated list for
    `/var` and for `/var/lib`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`/root/var-files.txt`文件现在包含了`/var`和`/var/lib`的逗号分隔列表。'
- en: 'Now we can try to list a non-existing directory to see an error being printed:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试列出一个不存在的目录以查看错误消息的打印：
- en: '[PRE35]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output we see is an error, and it is treated differently by the system
    than the regular messages. We can try to redirect the output to a file:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的输出是一个错误，并且系统对其进行了不同的处理，而不是常规消息。我们可以尝试将输出重定向到文件：
- en: '[PRE36]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We see that using the standard redirect, with a command providing an error
    message, will show the error message, via `STDERR`, on screen and create an empty
    file. This is because the file contains the output of the common information messages
    which are shown via `STDOUT`. We can still capture the output of the error, redirecting
    `STDERR`, by using `2>`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，使用标准重定向，使用命令提供错误消息，将在屏幕上显示错误消息，并创建一个空文件。这是因为文件包含了通过`STDOUT`显示的常规信息消息的输出。我们仍然可以通过使用`2>`捕获错误的输出，重定向`STDERR`：
- en: '[PRE37]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now we can redirect the standard output and the error output independently.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以独立重定向标准输出和错误输出。
- en: 'Now we want to count the number of files and directories in `/var`. For that,
    we are going to use the `wc` command, which stands for *word count,* with the
    option `-w` to focus on only counting words. To do so, we will redirect the output
    of `ls` to it by using a *pipe* represented by `|`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要计算`/var`中文件和目录的数量。为此，我们将使用`wc`命令，该命令代表*单词计数*，并使用`-w`选项仅计算单词数。为此，我们将使用`|`表示的*管道*将`ls`的输出重定向到它：
- en: '[PRE38]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can also use it to count the entries in `/etc`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用它来计算`/etc`中的条目：
- en: '[PRE39]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Pipes, `|`, are great for reusing the output of one command, and sending it
    to another command to process that output. Now we know more about using the more
    common operators to redirect input and output. There are several ways to process
    that output and we will see more examples in the next section.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 管道`|`非常适合重用一个命令的输出，并将其发送到另一个命令以处理该输出。现在我们更了解如何使用更常见的运算符来重定向输入和输出。有几种处理输出的方法，我们将在下一节中看到更多示例。
- en: Filtering output with grep and sed
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用grep和sed过滤输出
- en: The `grep` command is heavily used (and commonly mistyped) in system administration.
    It helps when finding a pattern in a line, whether in a file or via **standard
    input** (**STDIN**).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`命令在系统管理中被广泛使用（并且常常被输入错误）。它有助于在一行中找到模式，无论是在文件中还是通过**标准输入**（**STDIN**）。'
- en: 'Let''s do a recursive search of the files in `/usr` with `find` and put it
    in `/root/usr-files.txt`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`/usr`中的文件进行递归搜索，并将其放在`/root/usr-files.txt`中：
- en: '[PRE40]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As you can see, it''s a file 1.9 MB in size, and it isn''t easy to go through
    it. There is a utility in the system called `gzip` and we want to know which files
    in `/usr` contain the `gzip` pattern. To do so, we run the following command:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个大小为1.9 MB的文件，很难浏览。系统中有一个名为`gzip`的实用程序，我们想知道`/usr`中的哪些文件包含`gzip`模式。为此，我们运行以下命令：
- en: '[PRE41]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As you can see, we have found all the files with `gzip` under the `/usr` directory
    by creating a file with all the content and searching though it with `grep`. Could
    we do the same without creating the file? Sure we can, by using a *pipe*. We can
    redirect the output of `find` to `grep` and get the same output:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经通过创建一个包含所有内容的文件并使用`grep`搜索到了`/usr`目录下的所有包含`gzip`的文件。我们可以在不创建文件的情况下做同样的事情吗？当然可以，通过使用*管道*。我们可以将`find`的输出重定向到`grep`并获得相同的输出：
- en: '[PRE42]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In this command, the standard output from `find` was sent to `grep` to process
    it. We can even count the number of instances of files with `wc`, but this time
    using the `-l` option to count the lines:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，`find`的标准输出被发送到`grep`进行处理。我们甚至可以使用`-l`选项计算文件的实例数，但这次使用`wc`来计算行数：
- en: '[PRE43]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We have now concatenated two pipes, one to filter the output and another one
    to count it. We will find ourselves doing this kind of plumbing often when searching
    for, and finding, information in the system.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经连接了两个管道，一个用于过滤输出，另一个用于计数。当在系统中搜索和查找信息时，我们经常会发现自己这样做。
- en: 'Some very common options for `grep` are as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`的一些非常常见的选项如下：'
- en: '`-i`: for **ignore-case**. This will match the pattern whether it''s uppercase
    or lowercase or a combination thereof.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`：用于**忽略大小写**。这将匹配无论是大写还是小写或二者的组合的模式。'
- en: '`-v`: for **invert match**. This will show all entries that do not match the
    pattern being searched for.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`：用于**反转匹配**。这将显示所有不匹配搜索模式的条目。'
- en: '`-r`: for **recursive**. We can tell grep to search for a pattern in all the
    files within a directory, while going through all of them (if we have permission).'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -r：用于**递归**。我们可以告诉grep在目录中的所有文件中搜索模式，同时浏览所有文件（如果我们有权限）。
- en: 'There is a way to also filter columns in the output provided. Let''s say we
    have a list of files in our home directory, and we want to see the size of it.
    We run the following command:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种方法可以过滤输出中的列。假设我们有一个文件列表在我们的主目录中，并且我们想看到它的大小。我们运行以下命令：
- en: '[PRE44]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let''s say we only want the size, which is the fifth column, of the content
    that has `files` in its name. We can use `awk` for that:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想要包含其名称中有`files`的内容的大小，即第五列。我们可以使用`awk`来实现：
- en: '[PRE45]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `awk` tool will help us to filter according to the correct column. It is
    very useful for finding identifiers in processes or for getting a specific list
    of data in from a long output.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`工具将帮助我们根据正确的列进行过滤。它非常有用，可以在长输出中找到进程中的标识符或获取特定的数据列表。'
- en: Tip
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Consider that `awk` is super powerful in processing output and that we will
    use the minimal capability for it.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑`awk`在处理输出方面非常强大，我们将使用其最小功能。
- en: 'We could replace the separator with `-F` and get a list of available users
    in the system:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`-F`替换分隔符，并获取系统中可用用户的列表：
- en: '[PRE46]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `awk` and `grep` tools are very common processing tools in the life of a
    Linux sysadmin, and it is important to understand them well in order to manage
    the output provided by the system. We have applied the base knowledge to filter
    the output received by row and column. Let's now move on to how to manage files
    in a system so that we can better handle the stored output we have just generated.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`和`grep`工具是Linux系统管理员生活中非常常见的处理工具，重要的是要充分理解它们，以便管理系统提供的输出。我们已经应用了基本知识来过滤按行和列接收的输出。现在让我们继续学习如何管理系统中的文件，以便更好地处理我们刚刚生成的存储输出。'
- en: Listing, creating, copying, and moving files and directories, links, and hard
    links
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出、创建、复制和移动文件和目录、链接和硬链接
- en: It is important to know how to **manage files and directories** (also known
    as folders) in a system from the command line. It will serve as a basis for managing
    and copying important data such as configuration files or data files.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道如何从命令行管理文件和目录（也称为文件夹）。这将作为管理和复制重要数据（如配置文件或数据文件）的基础。
- en: Directories
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: 'Let''s start by creating a directory to keep some working files. We can do
    so by running `mkdir`, short for **make directory**:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个目录来保存一些工作文件。我们可以通过运行`mkdir`来实现，缩写为**make directory**：
- en: '[PRE47]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Folders can be deleted with the `rmdir` command, short for **remove directory**:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`rmdir`命令删除文件夹，缩写为**remove directory**：
- en: '[PRE48]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'However, `rmdir` will only delete empty directories:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`rmdir`只会删除空目录：
- en: '[PRE49]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'How can we delete a directory and all the other files and directories it contains
    using the remove (`rm`) command? First, let''s just create and remove a single
    file, `var-files.txt`:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用删除（`rm`）命令删除目录及其包含的所有其他文件和目录？首先，让我们创建并删除一个单个文件`var-files.txt`：
- en: '[PRE50]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To remove a full directory branch, including its contents, we may use the `-r`
    option, short for **recursive**:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 删除完整的目录分支，包括其中的内容，我们可以使用`-r`选项，简称**递归**：
- en: '[PRE51]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Important note
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be very careful when using recursive mode when deleting as there is neither
    a recovery command for it nor a trash bin to keep files that have been removed
    in the command line.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除时使用递归模式时要非常小心，因为它既没有恢复命令，也没有垃圾箱来保存在命令行中已删除的文件。
- en: 'Let''s take a look at the review table:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看复习表：
- en: '![](img/B16799_03_Table_04.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16799_03_Table_04.jpg)'
- en: Now that we know how to create and delete directories in a Linux system, let's
    start copying and moving content.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在Linux系统中创建和删除目录，让我们开始复制和移动内容。
- en: Copying and moving
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制和移动
- en: 'Now, let''s copy some files to play with them using the `cp` (for `awk` examples
    copied to our home directory:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们复制一些文件来玩，使用`cp`（例如将`awk`示例复制到我们的主目录中：
- en: '[PRE52]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To copy more than one file at the same time, we have used `*` sign. This works
    in a way in which specifying the files one by one, we can just type `*` for everything.
    We can also type the initial characters and then `*`, so let''s try it by copying
    some more files using globbing, first:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时复制多个文件，我们使用了`*`符号。这样可以通过逐个指定文件的方式，只需输入`*`即可。我们还可以输入初始字符，然后加上`*`，所以让我们尝试使用通配符复制一些更多的文件，首先：
- en: '[PRE53]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You will see that running `ls TR*` shows only those files that start with `TR`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到运行`ls TR*`只显示以`TR`开头的文件：
- en: '[PRE54]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'It will work the same way with the file ending:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 它将以相同的方式处理文件结尾：
- en: '[PRE55]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As you can see, it shows only those files ending in `.md`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它只显示以`.md`结尾的文件。
- en: 'We can copy a full branch of files and directories with the *recursive* option
    for `cp`, which is `-r`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-r`选项复制完整的文件和目录分支，用于`cp`：
- en: '[PRE56]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The recursive option is very useful for copying complete branches. We could
    also move directories or files easily with the `mv` command. Let''s put all our
    new directories together into a newly created directory called `docs`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 递归选项对于复制完整分支非常有用。我们也可以使用`mv`命令轻松移动目录或文件。让我们将所有新目录放在一个新创建的名为`docs`的目录中：
- en: '[PRE57]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You can see that with `mv`, you do not need to use the recursive option to
    manage a full branch of files and directories. It can also be used to rename files
    and/or directories:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，使用`mv`时，您无需使用递归选项来管理文件和目录的完整分支。它也可以用于重命名文件和/或目录：
- en: '[PRE58]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'There is a special command for creating empty files, which is `touch`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个专门用于创建空文件的命令，即`touch`：
- en: '[PRE59]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'When applied to an existing file or folder, it will update its access time
    to the current one:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于现有文件或文件夹时，它将更新其访问时间为当前时间：
- en: '[PRE60]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let''s check the review table:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下复习表：
- en: '![](img/B16799_03_Table_05.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16799_03_Table_05.jpg)'
- en: Now we know how to copy, delete, rename, and move files and directories, even
    full directory branches. Let's now take a look at a different way to work with
    them – links.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何复制、删除、重命名和移动文件和目录，甚至是完整的目录分支。现在让我们来看看另一种处理它们的方式——链接。
- en: Symbolic and hard links
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号链接和硬链接
- en: 'We can have the same file in two places using **links**. There are two types
    of links:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**链接**在两个位置拥有相同的文件。有两种类型的链接：
- en: '**Hard links**: There will be two entries (or more) to the same file in the
    filesystem. The content will be written once to disk. Hard links, for the same
    file, cannot be created in two different filesystems. Hard links cannot be created
    for directories.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬链接**：文件系统中将有两个（或更多）指向相同文件的条目。内容将一次写入磁盘。对于同一文件，不能在两个不同的文件系统中创建硬链接。目录不能创建硬链接。'
- en: '**Symbolic links**: A symbolic link is created pointing to a file or directory
    in any place in the system.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**符号链接**：创建指向系统中任何位置的文件或目录的符号链接。'
- en: Both are created using the `ln`, for *link*, utility.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都是使用`ln`，表示*链接*，实用程序创建的。
- en: 'Let''s now create hard links:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建硬链接：
- en: '[PRE61]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Check the increasing number of references to the file (in bold in the previous
    example).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 检查文件的引用数量增加（在上一个示例中加粗显示）。
- en: 'Now let''s create a symbolic link to a directory with `ln -s` (*s for symbolic*):'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个指向目录的符号链接，使用`ln -s`（*s代表符号*）：
- en: '[PRE62]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Check how the symbolic link created is treated as a different type when listing
    it, as it starts with `l` for *link* (in bold in the previous example) instead
    of `d` for *directory* (also in bold in the previous example).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 检查符号链接创建时如何被视为不同类型，因为它以`l`开头，表示*链接*（在上一个示例中加粗显示），而不是以`d`开头，表示*目录*（在上一个示例中也加粗显示）。
- en: Tip
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: When in doubt as to what to use, be it a hard link or a symbolic link, use the
    symbolic link as the default choice.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不确定使用硬链接还是符号链接，使用符号链接作为默认选择。
- en: 'Let''s check the review table:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下复习表：
- en: '![](img/B16799_03_Table_06.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16799_03_Table_06.jpg)'
- en: As you can see, creating links and symbolic links is super simple and can help
    in having access to the same file or directory from different locations. In the
    next section, we will cover how to pack and compress a set of files and directories.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，创建链接和符号链接非常简单，并且可以帮助从不同位置访问相同的文件或目录。在下一节中，我们将介绍如何打包和压缩一组文件和目录。
- en: Using tar and gzip
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tar和gzip
- en: Sometimes, we want to pack a full directory, including files, into a single
    file for backup purposes or simply to share it more easily. The command that can
    help aggregate files into one is `tar`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望将完整的目录（包括文件）打包成一个文件，以便进行备份，或者只是为了更轻松地共享它。可以帮助将文件聚合成一个的命令是`tar`。
- en: 'First, we need to install `tar`:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装`tar`：
- en: '[PRE63]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We can try by creating, as `root`, a backup of the `/etc` directory branch:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试创建一个`root`的`/etc`目录分支的备份：
- en: '[PRE64]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Let''s check the options used:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查所使用的选项：
- en: '`-c`: Short for create. TAR can put files together but also unpack them.'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`：代表创建。TAR可以将文件放在一起，也可以解压缩它们。'
- en: '`-f`: Short for file. We specify that the next parameter will be working with
    a file.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：代表文件。我们指定下一个参数将使用文件。'
- en: 'We can try to unpack it:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试解压缩它：
- en: '[PRE65]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Let''s check the new option used:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下所使用的新选项：
- en: '`-x`: for extraction. It unpacks a TAR file.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`：用于提取。它解压缩一个TAR文件。'
- en: Please realize that we created a directory called `tmp` to work on and that
    we pointed to the parent directory of `tmp` by using the `..` shortcut (which
    refers to the parent directory to the current working directory).
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们创建了一个名为`tmp`的目录来工作，并且我们使用`..`快捷方式指向了`tmp`的父目录（它指的是当前工作目录的父目录）。
- en: 'Let''s `gzip` to compress a file. We can copy `/etc/services` and compress
    it:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`gzip`来压缩一个文件。我们可以复制`/etc/services`并对其进行压缩：
- en: '[PRE66]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Please note that when using `gzip`, this will compress the specified file, adding
    the `.gz` extension to it and the original file will not be kept. Also, be aware
    that the newly created file is 1/5 of the size of the original file.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`gzip`时，这将压缩指定的文件，并向其添加`.gz`扩展名，原始文件将不会被保留。还要注意，新创建的文件大小是原始文件的五分之一。
- en: 'To recover it, we can run `gunzip`:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复它，我们可以运行`gunzip`：
- en: '[PRE67]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now we can combine the two of them, packing and compressing them:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将两者结合起来，打包并压缩它们：
- en: '[PRE68]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This way, we pack and compress in two steps.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以分两步进行打包和压缩。
- en: 'The `tar` command is smart enough to be able to perform packing and compression
    in a single step:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`tar`命令足够智能，能够在单个步骤中执行打包和压缩：'
- en: '[PRE69]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Let''s check the new option:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下新选项：
- en: '`-z`: This compresses the newly created tar file with `gzip`. It is also applicable
    to decompress.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-z`：这将使用`gzip`压缩新创建的tar文件。它也适用于解压缩。'
- en: 'We may want to review that same option while decompressing:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望在解压缩时审查相同的选项：
- en: '[PRE70]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: As you can see, it's very easy to pack and compress files using `tar` and `gzip`.
    There are other available compression methods with higher rations, such as `bzip2`
    or `xz`, that you may want to try, too. Now, let's move on to combine all the
    commands that we have learned into a powerful way to automate – by creating shell
    scripts.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，使用`tar`和`gzip`非常容易打包和压缩文件。还有其他可用的压缩方法，如`bzip2`或`xz`，具有更高的压缩比，您可能也想尝试。现在，让我们继续将我们学到的所有命令组合成一种强大的自动化方式——通过创建shell脚本。
- en: Creating basic shell scripts
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的shell脚本
- en: As a system administrator, or sysadmin, there will be times when you want to
    run a series of commands more than once. You can do this manually by running each
    command every time; however, there is a more efficient way to do so, by creating
    a **s****hell script**.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统管理员，或者sysadmin，有时您想要多次运行一系列命令。您可以通过每次运行每个命令来手动执行此操作；但是，有一种更有效的方法可以这样做，即创建一个**s****hell脚本**。
- en: A shell script is nothing more than a text file with a list of commands to be
    run, and a reference to the shell that will interpret it.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: shell脚本只不过是一个包含要运行的命令列表的文本文件，并引用将解释它的shell。
- en: 'In this book, we will not cover how to use a **text editor**; however, we will
    provide three recommendations for text editors in Linux that could help:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们不会涵盖如何使用**文本编辑器**；但是，我们将提供三种在Linux中使用的文本编辑器的建议，这可能会有所帮助：
- en: '**Nano**: This is probably the easiest text editor to use for beginners. Lean,
    simple, and straightforward, you may want to start by installing it and giving
    it a try.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nano**：这可能是最适合初学者使用的最简单的文本编辑器。精简，简单，直接，您可能希望开始安装并尝试使用它。'
- en: '**Vi** or **Vim**: Vi is the default text editor available in RHEL, included
    even in the minimal install, and in many Linux distributions. Even if you are
    not going to use it every day, it''s good to familiarize yourselves with the basics
    of it as it will be present in almost any Linux system you will use. **Vim** stands
    for **vi-improved**.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vi**或**Vim**：Vi是RHEL中默认的文本编辑器，甚至在最小安装中也包括在内，并且在许多Linux发行版中都有。即使您不会每天使用它，熟悉它的基础知识也是很好的，因为它几乎会出现在您将使用的任何Linux系统中。**Vim**代表**vi-improved**。'
- en: '**Emacs**: This is probably the most advanced and complex text editor ever.
    It can do everything and beyond, including reading emails or helping with a bit
    of psychoanalysis via **Emacs Doctor**.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Emacs**：这可能是有史以来最先进和复杂的文本编辑器。它可以做任何事情，甚至包括阅读电子邮件或通过**Emacs Doctor**进行一些心理分析。'
- en: 'We can create our first shell script by editing a new file called `hello.sh`
    with the following line as its content:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过编辑一个名为`hello.sh`的新文件并将以下行作为其内容来创建我们的第一个shell脚本：
- en: '[PRE71]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then we can run it by using the `bash` **command interpreter** with the following
    line:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用`bash`**命令解释器**运行它，使用以下命令：
- en: '[PRE72]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'There is a different way to do this where we do not need to type `bash`. We
    can add an initial line referencing the interpreter, so the file content for `hello.sh`
    looks like this:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种不需要输入`bash`的方法。我们可以添加一个引用解释器的初始行，因此`hello.sh`的文件内容如下：
- en: '[PRE73]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now we are changing the permissions so as to make it executable:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在更改权限以使其可执行：
- en: '[PRE74]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'And we run it just like this:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们就像这样运行它：
- en: '[PRE75]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: We have created our first shell script. Congratulations!
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了我们的第一个shell脚本。恭喜！
- en: Tip
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The commands, in order to be run in any working directory, must be in the path,
    as stated by the `$PATH` variable. If our command (or shell script) is not in
    one of the directories specified in the path, we will specify the running directory,
    in this case, using the `.` shortcut for the current directory and the `/` separator.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在任何工作目录中运行命令，命令必须在路径中，如`$PATH`变量所述。如果我们的命令（或shell脚本）不在路径中指定的目录之一中，我们将指定运行目录，在这种情况下，使用`.`当前目录的快捷方式和`/`分隔符。
- en: 'Let''s use some variables in it. We can define a variable by simply putting
    the name of it and the value we want for it. Let''s try replacing the word `world`
    with a variable. To use it, we prepend the `$` symbol to the name of the variable
    and it will be used. The script will look like this:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在其中使用一些变量。我们可以通过简单地放置变量的名称和我们想要的值来定义一个变量。让我们尝试用一个变量替换单词`world`。要使用它，我们在变量的名称前面加上`$`符号，它将被使用。脚本将如下所示：
- en: '[PRE76]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'We can run the script, obtaining the same output as before:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行脚本，获得与之前相同的输出：
- en: '[PRE77]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: To have more clarity, when using the value of the variable, we will put the
    name of it between curly braces, `{`''and ''`}`, and take this as a good practice.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰，当使用变量的值时，我们将把它的名称放在大括号之间，`{`''和''`}`，并将其视为一种良好的做法。
- en: 'The previous script will look like this:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的脚本将如下所示：
- en: '[PRE78]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Now we know how to create a basic script, but we may want to have a deeper control
    of it by using some programmatic capabilities, starting with loops. Let's go for
    it!
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何创建一个基本脚本，但是我们可能想通过使用一些编程能力来更深入地控制它，从循环开始。让我们开始吧！
- en: for loops
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for循环
- en: What if we want to run the same command over a list of places? That's what a
    `for` **loop** is used for. It can help iterate over a set of elements, such as
    a list or a counter, for example.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想对一系列位置运行相同的命令怎么办？这就是`for`**循环**的用途。它可以帮助迭代一组元素，例如列表或计数器。
- en: 'The `for` loop syntax is as follows:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环语法如下：'
- en: '`for`: To specify the iteration'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`：指定迭代'
- en: '`do`: To specify the action'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do`：指定操作'
- en: '`done`: To close the loop'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`done`：结束循环'
- en: 'We can define a space-separated list to try it and iterate through it with
    our first `for` loop:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义一个以空格分隔的列表来尝试并用我们的第一个`for`循环来迭代它：
- en: '[PRE79]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Let''s run it. The output will look like this:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行它。输出将如下所示：
- en: '[PRE80]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Using the `for` loop can be very interesting when `$(` and `)`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环时，可以非常有趣，当`$(`和`)`。
- en: Tip
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Backticks, `'`, can also be used to run a command and get its output as a list,
    but we will stick to the previous expression for clarity.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 反引号，`'`，也可以用于运行命令并将其输出作为列表，但为了清晰起见，我们将坚持使用先前的表达式。
- en: 'One example of the external command to be used can be `ls`. Let''s create the
    `txtfiles.sh` script with the following content:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以使用的外部命令的例子可以是`ls`。让我们创建`txtfiles.sh`脚本，内容如下：
- en: '[PRE81]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Make it executable and run it:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 使其可执行并运行：
- en: '[PRE82]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: You see how we can now iterate over a set of files, including, for example,
    changing their names, finding and replacing content in them, or simply making
    a specific backup of a selection of files.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 您看，我们现在可以迭代一组文件，包括，例如，更改它们的名称，查找和替换其中的内容，或者仅对一组文件进行特定的备份。
- en: We've seen several ways in which to iterate a list with the `for` loop, which
    can be very useful when it comes to automating tasks. Now, let's move on to another
    programmatic capability in scripts – conditionals.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了使用`for`循环迭代列表的几种方法，当涉及自动化任务时，这可能非常有用。现在，让我们继续学习脚本中的另一个编程能力——条件语句。
- en: if conditionals
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句
- en: Sometimes, we may want to execute something different for one of the elements
    in a list, or if a `if` conditional for this.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望对列表中的一个元素执行不同的操作，或者对此使用`if`条件。
- en: 'The `if` conditional syntax is `if`: to specify the condition.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`条件语法是`if`：指定条件。'
- en: Conditions are usually specified between brackets, `[` and `]`.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 条件通常在括号之间指定，`[`和`]`。
- en: '`then`: To specify the action'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`then`：指定操作'
- en: '`fi`: To close the loop'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fi`：结束循环'
- en: 'Let''s change our previous `hello.sh` script to say `hello to Madrid` in Spanish,
    like this:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将之前的`hello.sh`脚本改成用西班牙语说`hello to Madrid`，就像这样：
- en: '[PRE83]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Then, run it:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行它：
- en: '[PRE84]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'We have a problem; it only says `hello to Madrid`. What happens if we want
    to run the previous code on the ones not matching the condition? That''s when
    we extend the conditional using `else` for the items that do not match. The syntax
    is as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个问题；它只说`hello to Madrid`。如果我们想对不符合条件的项目运行先前的代码会发生什么？这时我们使用`else`来扩展条件。语法如下：
- en: '`else`: This is used as a `then` element when the condition is *not* matched.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else`：当条件*不*匹配时，这被用作`then`元素。'
- en: 'And now we have an example of a conditional using `else`:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个使用`else`的条件语句的示例：
- en: '[PRE85]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'And now we can run it:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行它：
- en: '[PRE86]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: As you see, it's simple to use the conditionals in a script and provide a lot
    of control on the conditions under which a command is run. We now need to control
    when something may not be running correctly. That's what the exit codes (or error
    codes) are for. Let's go for it!
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在脚本中使用条件语句很简单，并且可以在运行命令的条件下提供很多控制。现在我们需要控制当某些情况可能无法正确运行时。这就是退出代码（或错误代码）的用途。让我们开始吧！
- en: Exit codes
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 退出代码
- en: When a program is run, it provides an `$?`.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行程序时，它会提供一个`$?`。
- en: 'Let''s take a look at it by running `ls hello.sh`:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行`ls hello.sh`来看一下：
- en: '[PRE87]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: When the program runs OK, the *exit code* is zero, `0`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序正常运行时，*退出代码*为零，`0`。
- en: 'What happens when we try to list a file that doesn''t exist (or run any other
    command incorrectly, or that is having issues)? Let''s try listing a `nonexistent`
    file:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试列出一个不存在的文件（或运行任何其他命令不正确或出现问题）时会发生什么？让我们尝试列出一个`nonexistent`文件：
- en: '[PRE88]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: You see, the *exit code* is different to zero. We will go to the documentation
    and check the number associated with it to understand the nature of the issue.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 您看，*退出代码*不等于零。我们将查看文档并检查与之关联的数字，以了解问题的性质。
- en: When running a command in a script, check for the exit code and act accordingly.
    Let's now review where to find further information on the commands, such as exit
    codes or other options, in the next section.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中运行命令时，检查退出代码并相应地采取行动。现在让我们回顾一下在下一节中找到有关命令的更多信息的地方，比如退出代码或其他选项。
- en: Using system documentation resources
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用系统文档资源
- en: 'The system includes resources to help you while working with it and guide you
    to improve your sysadmin skills. This is referred to as the **system documentation**.
    Let''s check three different resources available by default in your RHEL installation:
    man pages, info pages, and other documents.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 系统包括资源，可在使用系统时帮助您并指导您提高系统管理员技能。这被称为**系统文档**。让我们检查默认情况下在您的RHEL安装中可用的三种不同资源：man页面、info页面和其他文档。
- en: Man pages
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Man页面
- en: The most common resource used to obtain documentation is `man`.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 获取文档的最常用资源是`man`。
- en: 'Almost any utility installed in the system has a man page to help you use it
    (in other words, specifying all the options for the tools and what do they do).
    You can run `man tar` and check the output:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中安装的几乎所有实用程序都有man页面来帮助您使用它（换句话说，指定工具的所有选项以及它们的作用）。您可以运行`man tar`并检查输出：
- en: '[PRE89]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: You can see in it (navigate with the *arrow* keys, space bar, and/or *Page Up*
    and *Page Down*) and exit it by hitting the letter `q` (for *quit*).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在其中查看（使用*箭头*键、空格键和/或*Page Up*和*Page Down*进行导航），并通过按字母`q`（表示*退出*）退出。
- en: 'There are sections in the `man` page on related topics. It is pretty simple
    to search those by using the `apropos` command. Let''s see this for `tar`:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`man`页面中有相关主题的章节。使用`apropos`命令很容易搜索这些内容。让我们以`tar`为例看看：'
- en: '[PRE90]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: As you can see, it matches not only `tar` but also `start`. This isn't perfect,
    but it can provide helpful information related to tar, such as `gpgtar`.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它不仅匹配`tar`还匹配`start`。这并不完美，但它可以提供与tar相关的有用信息，比如`gpgtar`。
- en: 'Man pages have a section. As you can see in the previous example, for `tar`,
    there are manual pages in two sections, one for the command-line utility (section
    1), and one for the archiving format (section 5):'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 手册页面有一个章节。正如你在前面的例子中看到的，对于`tar`，有两个章节的手册页面，一个是命令行实用程序（第1节），另一个是存档格式（第5节）：
- en: '[PRE91]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'We can access the page in section 5 to understand the format by running the
    following command:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令访问第5节的页面以了解格式：
- en: '[PRE92]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Now we can see the `tar format` page:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到`tar格式`页面：
- en: '[PRE93]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: You can see that manual pages are a great resource for learning more about the
    typical commands being used. This is also a fantastic resource as regards the
    **Red Hat Certified System Administrator** exam. One recommendation is to review
    all man pages for the commands shown previously in this chapter, as well as for
    the forthcoming chapters. Consider man pages the main information resource in
    the system. Let's now review other information resources available.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到手册页面是了解更多关于典型命令的绝佳资源。这也是**Red Hat认证系统管理员**考试的绝佳资源。建议是查看本章中先前显示的所有命令的man页面，以及即将到来的章节。考虑man页面是系统中的主要信息资源。现在让我们回顾其他可用的信息资源。
- en: Info pages
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息页面
- en: '**Info pages** are usually more descriptive than man pages and are more interactive.
    They help more in getting started on a topic.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '**Info页面**通常比man页面更具描述性，而且更具交互性。它们更有助于开始一个主题。'
- en: 'We can try to get `info` for the `ls` command by running the following:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试通过运行以下命令获取`ls`命令的`info`：
- en: '[PRE94]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'We can see the info page for it:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它的信息页面：
- en: '[PRE95]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Info pages can *redirect to other topics, shown underlined,* and these can be
    followed by putting the cursor over them and hitting *Enter*.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 信息页面可以*重定向到其他主题，以下划线显示*，可以将光标放在上面并按*Enter*进行跟踪。
- en: As with man pages, press `q` to quit.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 与man页面一样，按`q`退出。
- en: Please take some time to review the info pages for the main topics covered in
    this chapter (in several cases, info pages will not be available, but the ones
    that are could be very valuable).
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 请花一些时间查看本章涵盖的主要主题的信息页面（在许多情况下，信息页面将不可用，但那些可用的可能非常有价值）。
- en: What if we do not find a man or info page for a topic? Let's cover this in the
    next section.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们找不到一个主题的man或info页面怎么办？让我们在下一节中讨论这个问题。
- en: Other documentation resources
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他文档资源
- en: For other documentation resources, you can go to the `/usr/share/doc` directory.
    There, you will find other documents that come with the tools installed in the
    system.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他文档资源，您可以转到`/usr/share/doc`目录。在那里，您会找到随系统安装的工具附带的其他文档。
- en: 'Let''s see how many items we have:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们有多少项：
- en: '[PRE96]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: You can see that there are 219 directories available under `/usr/share/doc`.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在`/usr/share/doc`目录下有219个可用目录。
- en: 'As a good example, let''s enter the `bash` directory:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个很好的例子，让我们进入`bash`目录：
- en: '[PRE97]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Then, let''s take a look at the `INTRO` file using `less` to read it (remember,
    you use `q` to quit):'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们使用`less`来查看`INTRO`文件（记住，使用`q`退出）：
- en: '[PRE98]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: This is a good read for a better understanding of bash. Now you have a lot of
    documentation resources that you will be able to be use during your daily tasks
    as well as in the **RHCSA** exam.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更好地理解bash的好读物。现在您有很多文档资源，您将能够在日常任务中以及在**RHCSA**考试中使用。
- en: Summary
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have learned in this chapter how to log in to a system with a user and with
    `root`, understanding the basics of permissions and security. We are now also
    more comfortable using the command line with autocomplete, navigating through
    the directories and files, packing, and unpacking them, redirecting command output
    and parsing it, and even automating processes with shell scripts. More importantly,
    we have a way to obtain information on what we are doing (or want to do) available
    in any RHEL system with the included documentation. These skills are the basis
    of the upcoming chapters. Don't hesitate to revisit this chapter if you feel stuck
    or if your progress is not as fast as you thought.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用用户和`root`登录系统，了解权限和安全性的基础知识。我们现在也更熟悉使用命令行自动完成、浏览目录和文件、打包和解包它们、重定向命令输出和解析它，甚至使用shell脚本自动化进程。更重要的是，我们有一种方法可以在任何RHEL系统中获取我们正在做的（或想要做的）信息，这些信息包含在包含的文档中。这些技能是即将到来的章节的基础。如果您感到困惑，或者您的进展不如您所想的那么快，请不要犹豫重新阅读本章。
- en: Now, it is time to extend your knowledge to encompass more advanced topics in
    the upcoming chapters. In the following chapter, you will be getting used to the
    *tools for regular operations*, in which you will review the most common actions
    taken when managing a system. Enjoy!
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候扩展您的知识，涵盖即将到来的章节中更高级的主题。在接下来的章节中，您将开始习惯*常规操作工具*，您将回顾在管理系统时所采取的最常见操作。享受吧！
