- en: Chapter 3. Using Loops and the sleep Command
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用循环和sleep命令
- en: This chapter shows how to use loops to perform iterative operations. It also
    shows how to create a delay in a script. The reader will learn how to use loops
    and the sleep command in a script.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何使用循环执行迭代操作。它还展示了如何在脚本中创建延迟。读者将学习如何在脚本中使用循环和`sleep`命令。
- en: 'Topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Standard `for`, `while`, and `until` loops.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的`for`、`while`和`until`循环。
- en: Nesting of loops, and how not to get confused.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环的嵌套，以及如何避免混淆。
- en: Introduce the `sleep` command and how it is used to cause a delay in a script.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`sleep`命令以及它在脚本中如何用于造成延迟。
- en: Go over a common pitfall of using `sleep`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论使用`sleep`的一个常见陷阱。
- en: Using loops
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用循环
- en: One of the most important features of any programming language is the ability
    to perform a task, or tasks, a number of times and then stop when an ending condition
    is met. This is accomplished by using a loop.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 任何编程语言最重要的特性之一就是能够执行一个任务或多个任务，然后在满足结束条件时停止。这是通过使用循环来实现的。
- en: 'The next section shows an example of a very simple `while` loop:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节展示了一个非常简单的`while`循环的例子：
- en: Chapter 3 - Script 1
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本1
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here is the output:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 3 - Script 1](img/B07040_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本1](img/B07040_03_01.jpg)'
- en: We start by setting variable `x` to `1`. The `while` statement checks to see
    if `x` is less than or equal to `10` and if so, runs the commands between the
    `do` and `done` statements. It will continue to do this until `x` equals `11`,
    in which case the lines after the done statement are then run.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将变量`x`设置为`1`。`while`语句检查`x`是否小于或等于`10`，如果是，则运行`do`和`done`语句之间的命令。它将继续这样做，直到`x`等于`11`，此时`done`语句后的行将被运行。
- en: Run this on your system. It is very important to understand this script so that
    we can move on to more advanced loops.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上运行这个。理解这个脚本非常重要，这样我们才能进入更高级的循环。
- en: Let's look at another script in the next section—see if you can determine what
    is wrong with it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节看另一个脚本，看看你能否确定它有什么问题。
- en: Chapter 3 - Script 2
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本2
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Feel free to skip the running of this one unless you really want to. Look carefully
    at the `while` test. It says while `x` is greater than or equal to `0`, run the
    commands inside the loop. Is `x` ever going to not meet this condition? No, it
    is not, and this is what is known as an infinite loop. Don't worry; you can still
    end the script by pressing *Ctrl* + *C* (hold down the *Ctrl* key and press *C*).
    This will terminate the script.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随意跳过这个脚本的运行，除非你真的想要。仔细看`while`测试。它说当`x`大于或等于`0`时，运行循环内的命令。`x`会不会不满足这个条件？不会，这就是所谓的无限循环。不用担心；你仍然可以通过按下*Ctrl*
    + *C*（按住*Ctrl*键然后按*C*键）来终止脚本。
- en: I wanted to cover infinite loops right away as you will almost certainly do
    this from time to time, and I wanted you to know how to terminate the script when
    it happens. I certainly did this a few times when I was first starting out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我想立即介绍无限循环，因为你几乎肯定会偶尔这样做，我想让你知道当发生这种情况时如何终止脚本。当我刚开始学习时，我肯定做过几次。
- en: Okay let's do something more useful. Suppose you are starting a new project
    and need to create some directories on your system. You could do it one command
    at a time, or use a loop in a script.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，让我们做一些更有用的事情。假设你正在开始一个新项目，需要在你的系统上创建一些目录。你可以一次执行一个命令，或者在脚本中使用循环。
- en: We'll a look at this in *Script 3*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*脚本3*中看到这个。
- en: Chapter 3 - Script 3
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本3
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This simple script assumes you are starting at the base directory. When run
    it will create directories `chapter 1` through `chapter 10` and then proceed to
    the end.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的脚本假设你是从基本目录开始的。运行时，它将创建`chapter 1`到`chapter 10`的目录，然后继续到结束。
- en: When running scripts that make changes to your computer, it is a good idea to
    make sure the logic is correct before running it for real. For example, before
    running this I commented out the `mkdir` line. I then ran the script to make sure
    it stopped after it displayed that `x` was equal to `10`. I then uncommented the
    line and ran it for real.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行对计算机进行更改的脚本时，最好在真正运行之前确保逻辑是正确的。例如，在运行这个脚本之前，我注释掉了`mkdir`行。然后我运行脚本，确保它在显示`x`等于`10`后停止。然后我取消注释该行并真正运行它。
- en: Screen manipulation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕操作
- en: 'We''ll see another script in the next section that uses a loop to put text
    on the screen:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中看到另一个使用循环在屏幕上显示文本的脚本：
- en: Chapter 3 - Script 4
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本4
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before executing this script run the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行这个脚本之前运行以下命令：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the number of lines in that terminal is not displayed run the following
    command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果终端中没有显示行数，请运行以下命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then proceed to run the script. The following is the output on my system when
    run with `script4` `Linux`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后继续运行脚本。在我的系统上，当使用`script4` `Linux`运行时，输出如下：
- en: '![Chapter 3 - Script 4](img/B07040_03_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本4](img/B07040_03_02.jpg)'
- en: Okay, so I agree this might not be terribly useful, but it does show a few things.
    The `LINES` env var contains the current number of lines (or rows) in the current
    terminal. This can be useful for limiting output in more complex scripts and that
    will be shown in a later chapter. This example also shows how the screen can be
    manipulated in a script.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我同意这可能不是非常有用，但它确实展示了一些东西。`LINES`环境变量包含当前终端中的行数。这对于在更复杂的脚本中限制输出可能很有用，这将在后面的章节中展示。这个例子还展示了如何在脚本中操作屏幕。
- en: If you needed to export the `LINES` variable, you may want to put it in your
    `.bashrc` file and re-source it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要导出`LINES`变量，你可能希望将其放在你的`.bashrc`文件中并重新加载它。
- en: 'We''ll take a look at another script in the next section:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中看另一个脚本：
- en: Chapter 3 - Script 5
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本5
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is similar to *Script 4* in that it shows how to display output within
    the confines of the terminal. Note, you may have to export the `COLUMNS` env var
    like we did with the `LINES` var.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这与*脚本4*类似，它展示了如何在终端的范围内显示输出。注意，你可能需要像我们使用`LINES`变量一样导出`COLUMNS`环境变量。
- en: You probably noticed something a little different in this script. There is a
    `while` statement inside a `while` statement. This is called a nested loop and
    is used very frequently in programming.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到这个脚本中有一点不同。在`while`语句内部有一个`while`语句。这称为嵌套循环，在编程中经常使用。
- en: We start by declaring `row=1` and then begin the outer `while` loop. The `col`
    var is then set to `1` and then the inner loop is started. This inner loop is
    what displays the character on each column of the line. When the end of the line
    is reached, the loop ends and the `echo` statement outputs a carriage return.
    The `row` var is incremented, and then the process starts again. It ends after
    the last line.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明`row=1`，然后开始外部`while`循环。然后将`col`变量设置为`1`，然后启动内部循环。这个内部循环显示了该行每一列的字符。当到达行的末尾时，循环结束，`echo`语句输出回车。然后增加`row`变量，然后再次开始该过程。在最后一行结束后结束。
- en: By using the `LINES` and `COLUMNS` env vars only the actual screen is written
    to. You can test this by running the program and then expanding the terminal.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅使用`LINES`和`COLUMNS`环境变量，可以将实际屏幕写入。您可以通过运行程序然后扩展终端来测试这一点。
- en: 'When using nested loops it can be easy to get mixed up about what goes where.
    Here is something I try to do every time. When I first realize a loop is going
    to be needed in a program (which can be a script, C, or Java, and so on), I code
    the loop body first like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用嵌套循环时，很容易混淆哪里放什么。这是我每次都尝试做的事情。当我第一次意识到程序（可以是脚本、C、Java等）需要一个循环时，我首先编写循环体，就像这样：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This way I don''t forget the `done` statement and it''s also lined up correctly.
    If I then need another loop I just do it again:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我就不会忘记`done`语句，而且它也排列得很整齐。如果我需要另一个循环，我只需再次执行它：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can nest as many loops as you need.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以嵌套任意多个循环。
- en: Indenting your code
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩进您的代码
- en: This is probably a good time to talk about indenting. In the past (that is,
    30+ years ago) everyone used a text editor with a mono-spaced font to write their
    code and so it was relatively easy to keep everything lined up with just a one
    space indent. Later, when people started using word processors with a variable
    pitched font, it became harder to see the indentation and so more spaces (or tabs)
    were used. My suggestion is to use what you feel most comfortable with. However,
    with that said you may have to learn to read and use whatever code style that
    is in place for your company.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可能是谈论缩进的好时机。在过去（即30多年前），每个人都使用等宽字体的文本编辑器来编写他们的代码，因此只需一个空格的缩进就可以相对容易地保持一切对齐。后来，当人们开始使用具有可变间距字体的文字处理器时，变得更难看到缩进，因此使用了更多的空格（或制表符）。我的建议是使用您感觉最舒适的方式。但是，话虽如此，您可能必须学会阅读和使用公司制定的任何代码风格。
- en: 'So far we have only talked about the `while` statement. Now let''s look at
    an `until` loop in the next section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只谈到了`while`语句。现在让我们在下一节中看看`until`循环：
- en: Chapter 3 - Script 6
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本6
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Chapter 3 - Script 6](img/B07040_03_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本6](img/B07040_03_03.jpg)'
- en: Take a look at this script. The output from both loops is the same; however,
    the conditions are the opposite. The first loop continues while the condition
    is true, the second loop continues until the condition is true. A not-so-subtle
    difference so be on the watch for that.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个脚本。两个循环的输出是相同的；但是，条件是相反的。第一个循环在条件为真时继续，第二个循环在条件为真时继续。这是一个不那么微妙的区别，所以要注意这一点。
- en: Using the for statement
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`for`语句
- en: 'Another way to loop is to use the `for` statement. It is commonly used when
    working with files and other lists. The general syntax of a `for` loop is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的另一种方法是使用`for`语句。在处理文件和其他列表时通常使用。`for`循环的一般语法如下：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The list can be a collection of strings, or a filename wildcard, and so on.
    We can take a look at this in the example given in the next section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以是字符串集合，也可以是文件名通配符等。我们可以在下一节中给出的示例中看一下这一点。
- en: Chapter 3 - Script 7
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本7
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the output on my system. This is my `chap3` directory:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以及我的系统输出。这是我的`chap3`目录：
- en: '![Chapter 3 - Script 7](img/B07040_03_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本7](img/B07040_03_04.jpg)'
- en: 'The next script shows how the `for` statement can be used with files:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个脚本显示了`for`语句如何与文件一起使用：
- en: Chapter 3 - Script 8
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本8
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 3 - Script 8](img/B07040_03_05.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本8](img/B07040_03_05.jpg)'
- en: There are a few other things you can do with the `for` statement, consult the
    `man` page of Bash for more information.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`for`语句做一些其他事情，请参阅Bash的`man`页面以获取更多信息。
- en: Leaving a loop early
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提前离开循环
- en: Sometimes when you are coding a script, you encounter a situation where you
    would like to exit the loop early, before the ending condition is met. This can
    be accomplished using the `break` and `continue` commands.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在编写脚本时，您会遇到一种情况，希望在满足结束条件之前提前退出循环。可以使用`break`和`continue`命令来实现这一点。
- en: Here is a script that shows these commands. I am also introducing the `sleep`
    command which will be talked about in detail in the next script.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个显示这些命令的脚本。我还介绍了`sleep`命令，将在下一个脚本中详细讨论。
- en: Chapter 3 - Script 9
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本9
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s the output from my system:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的系统输出：
- en: '![Chapter 3 - Script 9](img/B07040_03_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本9](img/B07040_03_06.jpg)'
- en: Run this on your system, and in another terminal `cd` to the `/tmp` directory.
    Run the command `touch continue.txt` and watch what happens. If you like you can
    do this multiple times (remember that up arrow recalls the previous command).
    Notice how the variable `x` does not get incremented when the `continue` command
    is hit. This is because the control goes immediately back to the `while` statement.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上运行此命令，并在另一个终端中`cd`到`/tmp`目录。运行命令`touch continue.txt`并观察发生了什么。如果愿意，您可以多次执行此操作（请记住，上箭头会调用上一个命令）。请注意，当命中`continue`命令时，变量`x`不会增加。这是因为控制立即返回到`while`语句。
- en: Now run the `touch break.txt` command. The script will end, and again, `x` has
    not been incremented. This is because `break` immediately causes the loop to end.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行`touch break.txt`命令。脚本将结束，再次，`x`没有被增加。这是因为`break`立即导致循环结束。
- en: The `break` and `continue` commands are used quite often in scripts and so be
    sure to play with this one enough to really understand what is going on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`和`continue`命令在脚本中经常使用，因此一定要充分尝试，真正理解发生了什么。'
- en: The sleep command
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 睡眠命令
- en: I showed the `sleep` command earlier, let's look at that in much more detail.
    In general, the `sleep` command is used to introduce a delay in the script. For
    example, in the previous script if I had not used `sleep` the output would have
    scrolled off too quickly to see what was going on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前展示了`sleep`命令，让我们更详细地看一下。一般来说，`sleep`命令用于在脚本中引入延迟。例如，在前面的脚本中，如果我没有使用`sleep`，输出会太快而无法看清发生了什么。
- en: 'The `sleep` command takes a parameter indicating how long to make the delay.
    For example, `sleep 1` means to introduce a delay of one second. Here are a few
    examples:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep`命令接受一个参数，指示延迟的时间。例如，`sleep 1`表示引入1秒的延迟。以下是一些示例：'
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `sleep` command actually has a bit more capability that what is shown here.
    For more information, please consult the `man` page (`man sleep`).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep`命令实际上比这里展示的更有能力。有关更多信息，请参阅`man`页面（`man sleep`）。'
- en: 'Here''s a script showing in more detail how `sleep` works:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个更详细展示了`sleep`工作原理的脚本：
- en: Chapter 3 - Script 10
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本10
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And the output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 和输出：
- en: '![Chapter 3 - Script 10](img/B07040_03_07.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本10](img/B07040_03_07.jpg)'
- en: You may have noticed that I pressed *Ctrl* + *C* to terminate the script since
    I didn't want to wait 2 hours for it to finish. Scripts of this nature are used
    very extensively in a Linux system to monitor processes, watch for files, and
    so on.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我按下了*Ctrl* + *C*来终止脚本，因为我不想等待2个小时才能完成。这种类型的脚本在Linux系统中被广泛使用，用于监视进程，观察文件等。
- en: There is a common pitfall when using the `sleep` command that needs to be mentioned.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`sleep`命令时有一个常见的陷阱需要提到。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that the `sleep` command introduces a delay into the script. To be
    clear, when you code a `sleep 60` it means to introduce a delay of 60 seconds;
    it does not mean it is going to run the script every 60 seconds. There is a big
    difference.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`sleep`命令会在脚本中引入延迟。明确地说，当您编写`sleep 60`时，这意味着引入60秒的延迟；而不是每60秒运行一次脚本。这是一个很大的区别。
- en: 'We''ll see an example of this in the following section:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中看到一个例子：
- en: Chapter 3 - Script 11
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本11
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is the output on my system. It doesn''t take all that long to eventually
    get out of sync:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的系统输出。最终会出现不同步的情况：
- en: '![Chapter 3 - Script 11](img/B07040_03_08.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![第3章 - 脚本11](img/B07040_03_08.jpg)'
- en: For the vast majority of scripts this is never going to be a problem. Just remember
    if what you are trying to accomplish is time critical, like trying to run a command
    at exactly 12:00 am every night, you might want to look at some other approach.
    Note that `crontab` will also not do this as there is about a 1 or 2 second delay
    before it runs the command.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于绝大多数脚本来说，这永远不会成为一个问题。只要记住，如果您要完成的任务是时间关键的，比如每天晚上准确在12:00运行一个命令，您可能需要考虑其他方法。请注意，`crontab`也不会做到这一点，因为在运行命令之前会有大约1到2秒的延迟。
- en: Watching a process
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视一个进程
- en: There are a few more topics that we should look at in this chapter. Suppose
    you want to be alerted when a running process ends on your system.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，还有一些其他主题需要我们看一下。假设您希望在系统上运行的进程结束时收到警报。
- en: Here's a script that notifies the user when the specified process ends. Note
    that there are other ways to do this task, this is just one approach.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个脚本，当指定的进程结束时通知用户。请注意，还有其他方法可以完成这个任务，这只是一种方法。
- en: Chapter 3 - Script 12
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 - 脚本12
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To see this script in action run the following commands:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此脚本的运行情况，请运行以下命令：
- en: In a terminal, run `script9`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端中运行`script9`
- en: 'In another terminal run `ps auxw | grep script9`. The output will be something
    like this:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个终端中运行`ps auxw | grep script9`。输出将类似于这样：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use the process ID from `script9` (in this case `20686`) and use it as the
    parameter to run `script12`:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`script9`的进程ID（在本例中为`20686`），并将其用作运行`script12`的参数：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You may let it run for a bit if you want. Eventually go back to the terminal
    that is running `script9` and terminate it with *Ctrl* + *C*. You will see `script12`
    output a message and then also terminate. Feel free to experiment with this one
    as it has a lot of important information in it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，可以让它运行一段时间。最终返回到运行`script9`的终端，并使用*Ctrl* + *C*终止它。您将看到`script12`输出一条消息，然后也终止。随时尝试这个，因为它包含了很多重要信息。
- en: You may notice that in this script I used a variable, `rc`, to determine when
    to end the loop. I could have used the `break` command as we saw earlier in this
    chapter. However, using a control variable (as it's often called) is considered
    to be a better programming style.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，在这个脚本中，我使用了一个变量`rc`来确定何时结束循环。我可以使用我们在本章前面看到的`break`命令。然而，使用控制变量（通常被称为）被认为是更好的编程风格。
- en: A script like this can be very useful when you have started a command and then
    it takes longer than you expected for it to finish.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动一个命令然后它花费的时间比您预期的时间长时，这样的脚本非常有用。
- en: For example, a while back I started a format operation on an external 1 TB USB
    drive using the `mkfs` command. It took a few days to complete and I wanted to
    know exactly when so that I could continue working with the drive.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，前段时间我使用`mkfs`命令在一个外部1TB USB驱动器上启动了一个格式化操作。它花了几天的时间才完成，我想确切地知道何时完成，以便我可以继续使用该驱动器。
- en: Creating numbered backup files
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建编号的备份文件
- en: Now for a bonus here is a ready-to-run script that can be used to make numbered
    backup files. Before I came up with this (many years ago) I would go through the
    ritual of making the backup by hand. My numbering scheme was not always consistent,
    and I quickly realized it would be easier to have a script do it. This is something
    computers are really good at.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在作为一个奖励，这是一个可以直接运行的脚本，可以用来创建编号的备份文件。在我想出这个方法之前（很多年前），我会手工制作备份的仪式。我的编号方案并不总是一致的，我很快意识到让脚本来做这件事会更容易。这正是计算机擅长的事情。
- en: I call this script `cbS`. I wrote this so long ago I'm not even sure what it
    stands for. Maybe it was **Computer Backup Script** or something like that.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我称这个脚本为`cbS`。我写这个脚本已经很久了，我甚至不确定它代表什么。也许是**计算机备份脚本**之类的东西。
- en: Chapter 3 – Script 13
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章-脚本13
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It starts with a `Usage` message as it needs at least one filename to work on.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它以一个`Usage`消息开始，因为它至少需要一个文件名来操作。
- en: Note that this command requires the files be in the current directory, so doing
    something like `cbS /tmp/file1.txt` will generate an error.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个命令要求文件在当前目录中，所以像`cbS /tmp/file1.txt`这样的操作会产生错误。
- en: The `rc` variable is initialized to `0`. If a file is not found, it will be
    set to `1`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`rc`变量被初始化为`0`。如果找不到文件，它将被设置为`1`。'
- en: Now let's look at the inner loop. The logic here is a backup file will be created
    from the original file using the `cp` command. The naming scheme for the backup
    file is `bak-(number).original-filename` where `number` is the next one in sequence.
    The code determines what the next number is by going through all of the `bak-#.filename`
    files until it doesn't find one. That one then becomes the new filename.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看内部循环。这里的逻辑是使用`cp`命令从原始文件创建一个备份文件。备份文件的命名方案是`bak-(数字).原始文件名`，其中`数字`是下一个顺序中的数字。代码通过查看所有的`bak-#.文件名`文件来确定下一个数字是什么。直到找不到一个为止。然后那个就成为新的文件名。
- en: Get this one going on your system. Feel free to name it whatever you like, but
    be careful to name it something other than an existing Linux command. Use the
    `which` command to check.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上让这个脚本运行起来。随意给它取任何你喜欢的名字，但要小心给它取一个不同于现有的Linux命令的名字。使用`which`命令来检查。
- en: 'Here is some example output on my system:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我系统上的一些示例输出：
- en: '![Chapter 3 – Script 13](img/B07040_03_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![第3章-脚本13](img/B07040_03_09.jpg)'
- en: This script could be greatly improved upon. It could be made to work with paths/files,
    and the `cp` command should be checked for errors. This level of coding will be
    covered in a later chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本可以得到很大的改进。它可以被制作成适用于路径/文件，并且应该检查`cp`命令是否有错误。这种编码水平将在后面的章节中介绍。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we covered the different types of loop statements and how they
    differ from each other. Nesting loops and the `sleep` command were also covered.
    The common pitfall when using the `sleep` command was also mentioned, and a backup
    script was introduced to show how to easily create numbered backup files.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了不同类型的循环语句以及它们之间的区别。还介绍了嵌套循环和`sleep`命令。还提到了使用`sleep`命令时的常见陷阱，并介绍了一个备份脚本，展示了如何轻松创建编号的备份文件。
- en: In the next chapter we will go over the creation and calling of subroutines.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍子程序的创建和调用。
