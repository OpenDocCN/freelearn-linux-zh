- en: Module Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块管理
- en: Kernel modules (also referred as LKMs) have accentuated the development of kernel
    services owing to their ease of use. Our focus through this chapter will be to
    understand how the kernel seamlessly facilitates this entire process, making loading
    and unloading of modules dynamic and easy, as we look through all core concepts,
    functions and important data structures involved in module management. We assume
    readers are familiar with the basic usage of modules.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 内核模块（也称为LKM）由于易用性而强调了内核服务的发展。本章的重点将是了解内核如何无缝地促进整个过程，使模块的加载和卸载变得动态和简单，我们将深入了解模块管理中涉及的所有核心概念、函数和重要数据结构。我们假设读者熟悉模块的基本用法。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Key elements of a kernel module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核模块的关键元素
- en: Module layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块布局
- en: Module load and unload interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块加载和卸载接口
- en: Key data structures
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键数据结构
- en: Kernel modules
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核模块
- en: 'Kernel module is an easy and effective mechanism to extend the functionality
    of a running system without the baggage of rebuilding the whole kernel, they have
    been vital in ushering dynamism and scalability to the Linux operating system.
    Kernel modules not only satiate the extendable nature of the kernel but also usher
    the following functionalities:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 内核模块是一种简单而有效的机制，可以在不重建整个内核的情况下扩展运行系统的功能，它们对于引入动态性和可扩展性到Linux操作系统至关重要。内核模块不仅满足了内核的可扩展性，还引入了以下功能：
- en: Allowing kernel the ability to only keep features which are necessary, in-turn
    boosting capacity utilization
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许内核仅保留必要的功能，从而提高容量利用率
- en: Allowing proprietary/non-GPL compliant services to load and unload
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许专有/非GPL兼容服务加载和卸载
- en: The bottom-line feature of extensibility of the kernel
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核可扩展性的底线特性
- en: Elements of an LKM
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LKM的元素
- en: 'Each module object comprises of the *init(constructor)* and *exit(destructor)*
    routines. The *init* routine is invoked when a module is deployed into kernel
    address space, and the *exit* routine is called while the module is being removed.
    As the name innately suggests, the *init* routine is usually programmed to carry
    out operations and actions which are essential to set up the module body: such
    as registering with a specific kernel subsystem or allocating resources that are
    essential for the functionality being loaded. However, specific operations programmed
    within the *init* and *exit* routines depend on what the module is designed for
    and the functionality it brings to the kernel. The following code excerpt shows
    template of the *init* and *exit* routines:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块对象都包括*init（构造函数）*和*exit（析构函数）*例程。当模块部署到内核地址空间时，将调用*init*例程，而在模块被移除时将调用*exit*例程。正如名称本身所暗示的那样，*init*例程通常被编程为执行设置模块主体所必需的操作和动作，例如注册到特定的内核子系统或分配对加载的功能至关重要的资源。但是，*init*和*exit*例程中编程的特定操作取决于模块的设计目的以及它为内核带来的功能。以下代码摘录显示了*init*和*exit*例程的模板：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that the *init* routine returns an integer—a zero is returned if the
    module is committed to the kernel address space and a negative number is returned
    if it fails. This additionally provides flexibility for programmers to commit
    a module only when it succeeds in registering with the required subsystem.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*init*例程返回一个整数——如果模块已提交到内核地址空间，则返回零，如果失败则返回负数。这还为程序员提供了灵活性，只有在成功注册到所需子系统时才能提交模块。
- en: 'The default names for the init and exit routines are `init_module()` and `cleanup_module()`,
    respectively. Modules can optionally change names for the *init* and *exit* routines
    to improve code readability. However, they will have to declare them using the
    `module_init` and `module_exit` macros:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*init*和*exit*例程的默认名称分别为`init_module()`和`cleanup_module()`。模块可以选择更改*init*和*exit*例程的名称以提高代码可读性。但是，它们必须使用`module_init`和`module_exit`宏进行声明：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Comment macros form another key element of a module code. These macros are
    used to provide usage, licence, and author information of the module. This is
    important as modules are sourced from various vendors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注释宏是模块代码的另一个关键元素。这些宏用于提供模块的用法、许可和作者信息。这很重要，因为模块来自各种供应商：
- en: '`MODULE_DESCRIPTION()`: This macro is used to specify the general description
    of the module'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODULE_DESCRIPTION()`: 该宏用于指定模块的一般描述'
- en: '`MODULE_AUTHOR()`: This is used to provide author information'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODULE_AUTHOR()`: 用于提供作者信息'
- en: '`MODULE_LICENSE()`: This is used to specify legal licence for the code in the
    module'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODULE_LICENSE()`: 用于指定模块中代码的合法许可证'
- en: All the information specified through these macros is retained into the module
    binary and can be accessed by users through a utility called *modinfo*. `MODULE_LICENSE()`
    is the only mandatory macro that a module must mention. This serves a very handy
    purpose, as it informs users about proprietary code in a module, which is susceptible
    to debugging and support issues (kernel community in all probability ignores issues
    arising out of proprietary modules).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些宏指定的所有信息都保留在模块二进制文件中，并且可以通过名为*modinfo*的实用程序由用户访问。`MODULE_LICENSE()`是模块必须提到的唯一强制性宏。这非常方便，因为它通知用户模块中的专有代码容易受到调试和支持问题的影响（内核社区很可能会忽略专有模块引起的问题）。
- en: Another useful feature available for modules is of dynamic initialization of
    module data variables using module parameters. This allows data variables declared
    in a module to be initialized either during module deployment or when module is
    *live* in memory (through the sysfs interface). This can be achieved by setting
    up selected variables as module parameters through the appropriate `module_param()`
    family of macros (found in kernel header `<linux/moduleparam.h>`). Values passed
    to module parameters during deployment of the module are initialized before the
    *init* function is invoked.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可用的另一个有用功能是使用模块参数动态初始化模块数据变量。这允许在模块中声明的数据变量在模块部署期间或模块在内存中*live*时（通过sysfs接口）进行初始化。这可以通过通过适当的`module_param()`宏族（在内核头文件`<linux/moduleparam.h>`中找到）将选定的变量设置为模块参数来实现。在模块部署期间传递给模块参数的值在调用*init*函数之前进行初始化。
- en: Code in modules can access global kernel functions and data as needed. This
    enables the code of the module to make use of existing kernel functionality. It
    is through such function calls a module can perform required operations such as
    printing messages into kernel log buffer, allocation and de-allocation of memory,
    acquiring and releasing of exclusion locks, and registering and unregistering
    module code with appropriate subsystem.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模块中的代码可以根据需要访问全局内核函数和数据。这使得模块的代码可以利用现有的内核功能。通过这样的函数调用，模块可以执行所需的操作，例如将消息打印到内核日志缓冲区，分配和释放内存，获取和释放排他锁，以及向适当的子系统注册和注销模块代码。
- en: 'Similarly, a module can also export its symbols into the global symbol table
    of the kernel, which can then be accessed from code in other modules. This facilitates
    granular design and implementation of kernel services by organizing them across
    a set of modules, instead of having the whole service implemented as a single
    LKM. Such stacking up of related services leads to module dependency, for instance:
    if module A is using the symbols of module B, then A has dependency on B, in that
    case, module B must be loaded before module A and and module B cannot be unloaded
    until module A is unloaded.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，一个模块也可以将其符号导出到内核的全局符号表中，然后可以从其他模块中的代码中访问这些符号。这通过将内核服务组织在一组模块中，而不是将整个服务实现为单个LKM，从而促进了内核服务的细粒度设计和实现。相关服务的堆叠会导致模块依赖，例如：如果模块A正在使用模块B的符号，则A依赖于B，在这种情况下，必须在加载模块A之前加载模块B，并且在卸载模块A之前不能卸载模块B。
- en: Binary layout of a LKM
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LKM的二进制布局
- en: 'Modules are built using kbuild makefiles; once the build process completes,
    an ELF binary file with a *.ko* (kernel object) extension is generated. Module
    ELF binaries are appropriately tweaked to add new sections, to differentiate them
    from other ELF binaries, and to store module-related metadata. The following are
    the sections in a kernel module:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是使用kbuild makefile构建的；一旦构建过程完成，将生成一个带有*.ko*（内核对象）扩展名的ELF二进制文件。模块ELF二进制文件经过适当的调整，以添加新的部分，使其与其他ELF二进制文件区分开，并存储与模块相关的元数据。以下是内核模块中的部分：
- en: '| `.gnu.linkonce.this_module` | Module structure |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `.gnu.linkonce.this_module` | 模块结构 |'
- en: '| `.modinfo` | Information about the module (Licenses and so on) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `.modinfo` | 有关模块的信息（许可证等） |'
- en: '| `__versions` | Expected versions of symbols that the module depends on during
    compile time |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `__versions` | 编译时模块依赖的符号的预期版本 |'
- en: '| `__ksymtab*` | The table of symbols exported by this module |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `__ksymtab*` | 由此模块导出的符号表 |'
- en: '| `__kcrctab*` | The table of versions of symbols exported by this module |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `__kcrctab*` | 由此模块导出的符号版本表 |'
- en: '| `.init` | Sections used when initializing |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `.init` | 初始化时使用的部分 |'
- en: '| `.text, .data etc.` | Code and data sections |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `.text, .data等` | 代码和数据部分 |'
- en: Load and unload operations
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和卸载操作
- en: 'Modules can be deployed through special tools that are part of an application
    package called *modutils,* of which *insmod* and *rmmod* are widely used. *insmod*
    is used to deploy the module into kernel address space and *rmmod* is used for
    unloading a live module. These tools initiate load/unload operations by invoking
    appropriate system calls:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以通过一个名为*modutils*的应用程序包中的特殊工具部署，其中*insmod*和*rmmod*被广泛使用。*insmod*用于将模块部署到内核地址空间，*rmmod*用于卸载活动模块。这些工具通过调用适当的系统调用来启动加载/卸载操作：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, `finit_module()` is invoked (by `insmod`) with the file descriptor of
    the specified module binary file (.ko) and other relevant arguments. This function
    steps into kernel mode by invoking the underlying system call:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`finit_module()`（由`insmod`）被调用，带有指定模块二进制文件（.ko）的文件描述符和其他相关参数。此函数通过调用底层系统调用进入内核模式：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, `may_init_module()` is called to verify the `CAP_SYS_MODULE` privilege
    of the calling context; this function returns a negative number on failure and
    zero on success. If the caller has the required privilege, a specified module
    image is accessed through *fd* using the `kernel_read_file_from_fd()` routine
    that returns address of the module image, which is populated into an instance
    of `struct load_info`. Finally, the `load_module()` core kernel routine is invoked
    with address to instance of `load_info` and other user arguments passed down from
    the `finit_module()` call:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`may_init_module()`被调用来验证调用上下文的`CAP_SYS_MODULE`特权；此函数在失败时返回负数，在成功时返回零。如果调用者具有所需的特权，则通过使用`kernel_read_file_from_fd()`例程访问指定的模块映像，该例程返回模块映像的地址，然后将其填充到`struct
    load_info`的实例中。最后，通过将`load_info`的实例地址和从`finit_module()`调用传递下来的其他用户参数，调用`load_module()`核心内核例程：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `load_module()` is a core kernel routine that attempts to link module
    image into kernel address space. This function initiates a series of sanity checks,
    and finally commits the module by initializing module parameters to values provided
    by the caller, and invokes the *init* function of the module. The following steps
    detail these operations with names of the relevant helper functions invoked:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`load_module（）`是一个核心内核例程，它尝试将模块映像链接到内核地址空间。此函数启动一系列健全性检查，并最终通过将模块参数初始化为调用者提供的值并调用模块的*init*函数来提交模块。以下步骤详细说明了这些操作，以及调用的相关辅助函数的名称：
- en: Checking for the signature (`module_sig_check()`)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查签名（`module_sig_check（）`）
- en: Checking for the ELF header (`elf_header_check()`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查ELF头（`elf_header_check（）`）
- en: Checking the module layout and allocate the necessary memory (`layout_and_allocate()`)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块布局并分配必要的内存（`layout_and_allocate（）`）
- en: Appending the module to the modules list (`add_unformed_module()`)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模块附加到模块列表（`add_unformed_module（）`）
- en: Allocate per-cpu areas used in the module (`percpu_modalloc()`)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为模块分配每个CPU区域（`percpu_modalloc（）`）
- en: As module is in final location, finding the optional sections (`find_module_sections()`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于模块位于最终位置，需要找到可选部分（`find_module_sections（）`）
- en: Checking for module license and versions (`check_module_license_and_versions()`)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模块许可证和版本（`check_module_license_and_versions（）`）
- en: Resolving the symbols (`simplify_symbols()`)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析符号（`simplify_symbols（）`）
- en: Setting up the module parameters as per values passed in the args list
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据args列表中传递的值设置模块参数
- en: Checking for duplication of symbols (`complete_formation()`)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查符号的重复（`complete_formation（）`）
- en: Setting up the sysfs (`mod_sysfs_setup()`)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置sysfs（`mod_sysfs_setup（）`）
- en: Freeing the copy in the *load_info* structure (`free_copy()`)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 释放*load_info*结构中的副本（`free_copy（）`）
- en: Calling to the *init* function of the module (`do_init_module()`)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用模块的*init*函数（`do_init_module（）`）
- en: 'The unloading process is quite similar to the loading process; the only thing
    different is that there are certain sanity checks to ensure the safe removal of
    the module from kernel without affecting the system stability. A module''s unloading
    is initialized with the call to the *rmmod* utility, which calls the `delete_module()`
    routine, which steps into the underlying system call:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载过程与加载过程非常相似；唯一不同的是，有一些健全性检查，以确保安全地从内核中移除模块，而不影响系统稳定性。模块的卸载是通过调用*rmmod*实用程序来初始化的，该实用程序调用`delete_module（）`例程，该例程进入底层系统调用：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On invocation, the system call checks whether the caller has the requisite
    permissions, then it checks for any module dependencies. If there are none, the
    module is good to be removed (else, an error is returned). After this, the module
    state is verified (*live)*. Finally, the exit routine of the module is called
    and at last the `free_module()` routine is called:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用时，系统调用会检查调用者是否具有必要的权限，然后检查是否存在任何模块依赖项。如果没有，模块就可以被移除（否则，将返回错误）。之后，验证模块状态（*live*）。最后，调用模块的退出例程，最后调用`free_module（）`例程：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This call removes the module from the various lists where it was placed during
    loading (sysfs, module list, and so on) to initiate the cleanup. An architecture-specific
    cleanup routine is invoked (can be found in `</linux/arch/<arch>/kernel/module.c>`*)*.
    All dependent modules are iterated and the module is removed from their lists.
    As soon as the cleanup is over, all resources and the memory that was allocated
    to the module are freed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用将模块从加载期间放置的各种列表中删除（sysfs、模块列表等），以启动清理。调用特定于体系结构的清理例程（可以在`</linux/arch/<arch>/kernel/module.c>`*）*中找到。对所有依赖模块进行迭代，并从它们的列表中删除模块。一旦清理结束，将释放为模块分配的所有资源和内存。
- en: Module data structures
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块数据结构
- en: 'Every module that is deployed in the kernel is as usual represented through
    a descriptor, called `struct module`. Kernel maintains a list of module instances,
    with each representing a specific module in memory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 内核中部署的每个模块通常通过称为`struct module`的描述符表示。内核维护着模块实例的列表，每个实例代表内存中的特定模块：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s now look at some of the key fields of this structure:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下此结构的一些关键字段：
- en: '`list`: This is the double linked list that contains all the loaded modules
    in the kernel.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：这是一个双向链表，其中包含内核中加载的所有模块。'
- en: '`name`: This specifies the name of the module. This must be an unique name
    as the module is referenced with this name.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：指定模块的名称。这必须是一个唯一的名称，因为模块是通过此名称引用的。'
- en: '`state`: This indicates the current state of the module. A module can be in
    either of the states specified in `enum module_state` under *<linux/module.h>*:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：表示模块的当前状态。模块可以处于`<linux/module.h>`下指定的任一状态中：'
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While loading or removing a module, it's important to know its current state;
    for instance, we need not insert an existing module if its state specifies that
    it is already present.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载或卸载模块时，了解其当前状态很重要；例如，如果其状态指定模块已经存在，则无需插入现有模块。
- en: '`syms, crc and num_syms`: These are used to manage symbols that are exported
    by the module code.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`syms, crc和num_syms`：用于管理模块代码导出的符号。'
- en: '`init`: This is the pointer to a function which is called when the module is
    initialized.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`：这是指向在模块初始化时调用的函数的指针。'
- en: '`arch`: This represents the architecture specific structure which shall be
    populated with architecture-specific data, needed for the modules to run. However,
    this structure mostly remains empty as most architectures do not need any additional
    information.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`arch`：表示特定于体系结构的结构，应填充体系结构特定数据，以便模块运行。但是，由于大多数体系结构不需要任何额外的信息，因此此结构大多数情况下保持为空。'
- en: '`taints`: This is used if the module is tainting the kernel. It could mean
    that the kernel suspects a module to do something harmful or a non-GPL complaint
    code.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`taints`：如果模块使内核受到污染，则使用此选项。这可能意味着内核怀疑模块会执行一些有害的操作或者是非GPL兼容的代码。'
- en: '`percpu`: This points to per-CPU data belonging to the module. It is initialized
    at the module load time.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`percpu`：指向属于模块的每个CPU数据。它在模块加载时初始化。'
- en: '`source_list and target_list`: This carries details on module dependencies.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`source_list和target_list`：这包含了模块依赖的详细信息。'
- en: '`exit`: This simply is the opposite of init. It points to the function that
    is called to perform the cleanup process of the module. It releases memory held
    by the module and does other cleanup specific tasks.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit`：这只是init的相反。它指向调用模块清理过程的函数。它释放模块持有的内存并执行其他清理特定任务。'
- en: Memory layout
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存布局
- en: 'A module''s memory layout is shown through an object, `struct module_layout`,
    defined in *<linux/module.h>*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的内存布局通过*<linux/module.h>*中定义的`struct module_layout`对象显示。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we briefly covered all the core elements of modules, its implications,
    and management details. Our attempt has remained to give you a quick and comprehensive
    view of how kernel facilitates its extensibility through modules. You also understood
    the core data structures that facilitate module management. Kernel's attempt at
    remaining safe and steady in this dynamic environment is also a notable feature.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们简要介绍了模块的所有核心元素，其含义和管理细节。我们的目标是为您提供一个快速和全面的视角，了解内核如何通过模块实现其可扩展性。您还了解了促进模块管理的核心数据结构。内核在这个动态环境中保持安全和稳定的努力也是一个显著的特点。
- en: I really hope this book serves as a means for you to go out there and experiment
    more with Linux kernel!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我真诚地希望这本书能成为您去实验Linux内核的手段！
