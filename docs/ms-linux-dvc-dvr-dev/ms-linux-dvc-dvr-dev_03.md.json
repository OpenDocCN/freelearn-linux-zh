["```\nstruct regmap_config {\n\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0int reg_bits;\n\u00a0\u00a0\u00a0int reg_stride;\n\u00a0\u00a0\u00a0int pad_bits;\n\u00a0\u00a0\u00a0int val_bits;\n\u00a0\u00a0\u00a0bool (*writeable_reg)(struct device *dev, unsigned int reg);\n\u00a0\u00a0\u00a0bool (*readable_reg)(struct device *dev, unsigned int reg);\n\u00a0\u00a0\u00a0bool (*volatile_reg)(struct device *dev, unsigned int reg);\n\u00a0\u00a0\u00a0bool (*precious_reg)(struct device *dev, unsigned int reg);\n\u00a0\u00a0\u00a0int (*reg_read)(void *context, unsigned int reg,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *val);\n\u00a0\u00a0\u00a0int (*reg_write)(void *context, unsigned int reg,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int val);\n\u00a0\u00a0\u00a0bool disable_locking;\n\u00a0\u00a0\u00a0regmap_lock lock;\n\u00a0\u00a0\u00a0regmap_unlock unlock;\n\u00a0\u00a0\u00a0void *lock_arg;\n\u00a0\u00a0\u00a0bool fast_io;\n\u00a0\u00a0\u00a0unsigned int max_register;\n\u00a0\u00a0\u00a0const struct regmap_access_table *wr_table;\n\u00a0\u00a0\u00a0const struct regmap_access_table *rd_table;\n\u00a0\u00a0\u00a0const struct regmap_access_table *volatile_table;\n\u00a0\u00a0\u00a0const struct regmap_access_table *precious_table;\n\u00a0\u00a0\u00a0const struct reg_default *reg_defaults;\n\u00a0\u00a0\u00a0unsigned int num_reg_defaults;\n\u00a0\u00a0\u00a0unsigned long read_flag_mask;\n\u00a0\u00a0\u00a0unsigned long write_flag_mask;\n\u00a0\u00a0\u00a0enum regcache_type cache_type;\n\u00a0\u00a0\u00a0bool use_single_rw;\n\u00a0\u00a0\u00a0bool can_multi_write;\n};\n```", "```\n    static bool foo_writeable_register(struct device *dev, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg)\n    {\n    \u00a0\u00a0\u00a0\u00a0switch (reg) {\n    \u00a0\u00a0\u00a0\u00a0case 0x30 ... 0x38:\n    \u00a0\u00a0\u00a0\u00a0case 0x40 ... 0x45:\n    \u00a0\u00a0\u00a0\u00a0case 0x50 ... 0x57:\n    \u00a0\u00a0\u00a0\u00a0case 0x60 ... 0x6e:\n    \u00a0\u00a0\u00a0\u00a0case 0xb0 ... 0xb2:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    static bool volatile_reg(struct device *dev, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg)\n    {\n    \u00a0\u00a0\u00a0\u00a0switch (reg) {\n    \u00a0\u00a0\u00a0\u00a0case 0x30:\n    \u00a0\u00a0\u00a0\u00a0case 0x31:\n    \u00a0\u00a0\u00a0\u00a0[...]\n    \u00a0\u00a0\u00a0\u00a0case 0xb3:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0case 0xb4:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((reg >= 0xb5) && (reg <= 0xcc))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0[...]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return true;\n    }\n    ```", "```\nstruct regmap * devm_regmap_init_i2c(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct i2c_client *client,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct regmap_config *config)\nstruct regmap * devm_regmap_init_spi(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct spi_device *spi,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct regmap_config);\nstruct regmap * devm_regmap_init_mmio(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct device *dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void __iomem *regs,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct regmap_config *config)\n#define devm_regmap_init_spmi_base(dev, config) \\\n\u00a0\u00a0\u00a0\u00a0__regmap_lockdep_wrapper(__devm_regmap_init_spmi_base, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#config, dev, config)\n#define devm_regmap_init_w1(w1_dev, config) \\\n\u00a0\u00a0\u00a0\u00a0__regmap_lockdep_wrapper(__devm_regmap_init_w1, #config, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w1_dev, config)\n```", "```\nstruct sun4i_gpadc_dev {\n\u00a0\u00a0\u00a0\u00a0struct device *dev;\n\u00a0\u00a0\u00a0\u00a0struct regmap *regmap;\n\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data *regmap_irqc;\n\u00a0\u00a0\u00a0\u00a0void __iomem *base;\n};\nstatic const struct regmap_config sun4i_gpadc_regmap_config = {\n\u00a0\u00a0\u00a0\u00a0.reg_bits = 32,\n\u00a0\u00a0\u00a0\u00a0.val_bits = 32,\n\u00a0\u00a0\u00a0\u00a0.reg_stride = 4,\n\u00a0\u00a0\u00a0\u00a0.fast_io = true,\n};\nstatic int sun4i_gpadc_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0struct sun4i_gpadc_dev *dev;\n\u00a0\u00a0\u00a0\u00a0struct resource *mem;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n\u00a0\u00a0\u00a0\u00a0dev->base = devm_ioremap_resource(&pdev->dev, mem);\n\u00a0\u00a0\u00a0\u00a0if (IS_ERR(dev->base))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return PTR_ERR(dev->base);\n\u00a0\u00a0\u00a0\u00a0dev->dev = &pdev->dev;\n\u00a0\u00a0\u00a0\u00a0dev_set_drvdata(dev->dev, dev);\n\u00a0\u00a0\u00a0\u00a0dev->regmap = devm_regmap_init_mmio(dev->dev, dev->base,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&sun4i_gpadc_regmap_config);\n\u00a0\u00a0\u00a0\u00a0if (IS_ERR(dev->regmap)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = PTR_ERR(dev->regmap);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&pdev->dev, \"failed to init regmap: %d\\n\", ret);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[...]\n```", "```\nint regmap_write(struct regmap *map,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int val);\nint regmap_read(struct regmap *map,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *val);\n```", "```\nint regmap_bulk_read(struct regmap *map, unsigned int reg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *val, size_tval_count);\nint regmap_bulk_write(struct regmap *map, unsigned int reg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const void *val, size_t val_count)\n```", "```\nint regmap_update_bits(struct regmap *map, unsigned int reg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int mask, unsigned int val)\n```", "```\nstatic int _regmap_update_bits(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct regmap *map, unsigned int reg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int mask, unsigned int val,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool *change, bool force_write)\n{\n\u00a0\u00a0\u00a0\u00a0int ret;\n\u00a0\u00a0\u00a0\u00a0unsigned int tmp, orig;\n\u00a0\u00a0\u00a0\u00a0if (change)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*change = false;\n\u00a0\u00a0\u00a0\u00a0if (regmap_volatile(map, reg) && map->reg_update_bits) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = map->reg_update_bits(map->bus_context,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg, mask, val);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ret == 0 && change)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*change = true;\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = _regmap_read(map, reg, &orig);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ret != 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tmp = orig & ~mask;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tmp |= val & mask;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (force_write || (tmp != orig)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = _regmap_write(map, reg, tmp);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ret == 0 && change)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*change = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return ret;\n}\n```", "```\nstruct irq_domain *irq_domain_add_linear(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct device_node *of_node,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int size,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct irq_domain_ops *ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *host_data)\n```", "```\nstruct irq_domain *irq_domain_add_tree(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct device_node *of_node,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct irq_domain_ops *ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *host_data)\n```", "```\nstruct irq_domain *irq_domain_add_nomap(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct device_node *of_node,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int max_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct irq_domain_ops *ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *host_data)\n```", "```\nunsigned int irq_create_mapping(struct irq_domain *domain,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_hw_number_t hwirq)\n```", "```\nunsigned int virq = 0;\nvirq = irq_create_mapping(irq_domain, hwirq);\nif (!virq) {\n\u00a0\u00a0\u00a0\u00a0ret = -EINVAL;\n\u00a0\u00a0\u00a0\u00a0goto err_irq;\n}\n```", "```\nfor (j = 0; j < gpiochip->chip.ngpio; j++) {\n\u00a0\u00a0\u00a0\u00a0irq = irq_create_mapping(gpiochip ->irq_domain, j);\n}\n```", "```\nstruct irq_domain_ops {\n\u00a0\u00a0\u00a0\u00a0int (*map)(struct irq_domain *d, unsigned int virq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_hw_number_t hw);\n\u00a0\u00a0\u00a0\u00a0void (*unmap)(struct irq_domain *d, unsigned int virq);\n\u00a0\u00a0\u00a0int (*xlate)(struct irq_domain *d, struct device_node *node,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const u32 *intspec, unsigned int intsize,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long *out_hwirq, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *out_type);\n};\n```", "```\nint (*map)(struct irq_domain *d, unsigned int virq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_hw_number_t hw);\n```", "```\nint irq_set_chip_data(unsigned int irq, void *data); \n```", "```\nstatic struct irq_domain_ops mcp23016_irq_domain_ops = {\n\u00a0\u00a0\u00a0\u00a0.map = my_irq_domain_map,\n\u00a0\u00a0\u00a0\u00a0.xlate = irq_domain_xlate_twocell,\n};\n```", "```\nvoid irq_set_chip_and_handler(unsigned int irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct irq_chip *chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flow_handler_t handle)\n```", "```\nvoid irq_set_chip_and_handler(unsigned int irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct irq_chip *chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flow_handler_t handle)\n{\n\u00a0\u00a0\u00a0\u00a0struct irq_desc *desc = irq_get_desc(irq);\n\u00a0\u00a0\u00a0\u00a0desc->irq_data.chip = chip;\n\u00a0\u00a0\u00a0\u00a0desc->handle_irq = handle;\n}\n```", "```\n/*\n * Built-in IRQ handlers for various IRQ types,\n * callable via desc->handle_irq()\n */\nvoid handle_level_irq(struct irq_desc *desc);\nvoid handle_fasteoi_irq(struct irq_desc *desc);\nvoid handle_edge_irq(struct irq_desc *desc);\nvoid handle_edge_eoi_irq(struct irq_desc *desc);\nvoid handle_simple_irq(struct irq_desc *desc);\nvoid handle_untracked_irq(struct irq_desc *desc);\nvoid handle_percpu_irq(struct irq_desc *desc);\nvoid handle_percpu_devid_irq(struct irq_desc *desc);\nvoid handle_bad_irq(struct irq_desc *desc);\n```", "```\nstatic int my_chained_irq_domain_map(struct irq_domain *d,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int virq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_hw_number_t hw)\n{\n\u00a0\u00a0\u00a0\u00a0irq_set_chip_data(virq, d->host_data);\n\u00a0\u00a0\u00a0\u00a0irq_set_chip_and_handler(virq, &dummy_irq_chip, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_ edge_irq);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstatic void parent_hwirq_handler(struct irq_desc *desc)\n{\n\u00a0\u00a0\u00a0\u00a0struct irq_chip *chip = irq_desc_get_chip(desc);\n\u00a0\u00a0\u00a0\u00a0struct gpio_chip *gpio_chip = \u00a0\u00a0\u00a0\u00a0irq_desc_get_handler_ data(desc);\n\u00a0\u00a0\u00a0\u00a0struct at91_gpio_chip *at91_gpio = gpiochip_get_data \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(gpio_ chip);\n\u00a0\u00a0\u00a0\u00a0void __iomem *pio = at91_gpio->regbase;\n\u00a0\u00a0\u00a0\u00a0unsigned long isr;\n\u00a0\u00a0\u00a0\u00a0int n;\n\u00a0\u00a0\u00a0\u00a0chained_irq_enter(chip, desc);\n\u00a0\u00a0\u00a0\u00a0for (;;) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* Reading ISR acks pending (edge triggered) GPIO\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* interrupts. When there are none pending, we\u2019re\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* finished unless we need to process multiple banks\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* (like ID_PIOCDE on sam9263).\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isr = readl_relaxed(pio + PIO_ISR) &\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readl_relaxed(pio + PIO_IMR);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!isr) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!at91_gpio->next)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at91_gpio = at91_gpio->next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pio = at91_gpio->regbase;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gpio_chip = &at91_gpio->chip;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for_each_set_bit(n, &isr, BITS_PER_LONG) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0generic_handle_irq(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_find_mapping(gpio_chip->irq.domain, n));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0chained_irq_exit(chip, desc);\n\u00a0\u00a0\u00a0\u00a0/* now it may re-trigger */\n\u00a0\u00a0\u00a0\u00a0[...]\n}\n```", "```\nvoid irq_set_chained_handler_and_data(unsigned int irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flow_handler_t \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *data)\n```", "```\nstatic int my_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0int parent_irq, i;\n\u00a0\u00a0\u00a0\u00a0struct irq_domain *my_domain;\n\u00a0\u00a0\u00a0\u00a0parent_irq = platform_get_irq(pdev, 0);\n\u00a0\u00a0\u00a0\u00a0if (!parent_irq) {\n\u00a0\u00a0\u00a0\u00a0\u00a0pr_err(\"failed to map parent interrupt %d\\n\", parent_irq);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -EINVAL;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0my_domain =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_domain_add_linear(np, nr_irq, &my_irq_domain_ops,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my_private_data);\n\u00a0\u00a0\u00a0\u00a0if (WARN_ON(!my_domain)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pr_warn(\"%s: irq domain init failed\\n\", __func__);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0/* This may be done elsewhere */\n\u00a0\u00a0\u00a0\u00a0for(i = 0; i < nr_irq; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int virqno = irq_create_mapping(my_domain, i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* May need to mask and clear all IRQs before \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* registering a handler\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_set_chained_handler_and_data(parent_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent_hwirq_handler,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my_private_data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* May need to call irq_set_chip_data() on \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* the virqno too \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[...]\n}\n```", "```\nstatic int my_nested_irq_domain_map(struct irq_domain *d,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int virq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_hw_number_t hw)\n{\n\u00a0\u00a0\u00a0\u00a0irq_set_chip_data(virq, d->host_data);\n\u00a0\u00a0\u00a0\u00a0irq_set_nested_thread(virq, 1);\n\u00a0\u00a0\u00a0\u00a0irq_set_noprobe(virq);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstatic irqreturn_t mcp23016_irq(int irq, void *data)\n{\n\u00a0\u00a0\u00a0\u00a0struct mcp23016 *mcp = data;\n\u00a0\u00a0\u00a0\u00a0unsigned int child_irq, i;\n\u00a0\u00a0\u00a0\u00a0/* Do some stuff */\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0for (i = 0; i < mcp->chip.ngpio; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (gpio_value_changed_and_raised_irq(i)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0child_irq = irq_find_mapping(mcp->chip.irqdomain,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_nested_irq(child_irq);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[...]\n}\n```", "```\nstatic int my_probe(struct i2c_client *client,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct i2c_device_id *id)\n{\n\u00a0\u00a0\u00a0\u00a0int parent_irq, i;\n\u00a0\u00a0\u00a0\u00a0struct irq_domain *my_domain;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0int irq_nr = get_number_of_needed_irqs();\n\u00a0\u00a0\u00a0\u00a0/* Do we have an interrupt line ? Enable the IRQ chip */\n\u00a0\u00a0\u00a0\u00a0if (client->irq) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0domain = irq_domain_add_linear(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client->dev.of_node, irq_nr,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&my_irq_domain_ops, my_private_data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!domain) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&client->dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"could not create irq domain\\n\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -ENODEV;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* May be creating irq mapping in this domain using\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* irq_create_mapping() or let the mfd core doing\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* this if it is an MFD chip device\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0devm_request_threaded_irq(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&client->dev, client->irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL, my_parent_irq_thread,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IRQF_TRIGGER_FALLING | IRQF_ONESHOT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my-parent-irq\", my_private_data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0}\n[...]\n}\n```", "```\nstatic inline int gpiochip_irqchip_add(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct gpio_chip *gpiochip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct irq_chip *irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int first_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flow_handler_t handler,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int type)\nstatic inline int gpiochip_irqchip_add_nested(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct gpio_chip *gpiochip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct irq_chip *irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int first_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flow_handler_t handler,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int type)\n```", "```\n    static const struct irq_domain_ops gpiochip_domain_ops = {\n    \u00a0\u00a0.map = gpiochip_irq_map,\n    \u00a0\u00a0.unmap = gpiochip_irq_unmap,\n    \u00a0\u00a0/* Virtually all GPIO-based IRQ chips are two-celled */\n    \u00a0\u00a0.xlate = irq_domain_xlate_twocell,\n    };\n    ```", "```\nvoid gpiochip_set_chained_irqchip(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct gpio_chip *gpiochip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct irq_chip *irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int parent_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flow_handler_t parent_handler)\nvoid gpiochip_set_nested_irqchip(struct gpio_chip *gpiochip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct irq_chip *irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int parent_irq)\n```", "```\nstatic void gpio_irq_handler(struct irq_desc *desc)\n{\n\u00a0\u00a0\u00a0\u00a0unsigned long isr;\n\u00a0\u00a0\u00a0\u00a0int n;\n\u00a0\u00a0\u00a0\u00a0struct irq_chip *chip = irq_desc_get_chip(desc);\n\u00a0\u00a0\u00a0\u00a0struct gpio_chip *gpio_chip = \u00a0\u00a0\u00a0\u00a0irq_desc_get_handler_data(desc);\n\u00a0\u00a0\u00a0\u00a0struct at91_gpio_chip *at91_gpio =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gpiochip_get_data(gpio_chip);\n\u00a0\u00a0\u00a0\u00a0void __iomem *pio = at91_gpio->regbase;\n\u00a0\u00a0\u00a0\u00a0chained_irq_enter(chip, desc);\n\u00a0\u00a0\u00a0\u00a0for (;;) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isr = readl_relaxed(pio + PIO_ISR) &\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readl_relaxed(pio + PIO_IMR);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for_each_set_bit(n, &isr, BITS_PER_LONG) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0generic_handle_irq(irq_find_mapping(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gpio_chip->irq.domain, n));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0chained_irq_exit(chip, desc);\n\u00a0\u00a0\u00a0\u00a0[...]\n}\n```", "```\nstatic int at91_gpio_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0ret = gpiochip_irqchip_add(&at91_gpio->chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gpio_irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_edge_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IRQ_TYPE_NONE);\n\u00a0\u00a0\u00a0\u00a0if (ret) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&pdev->dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"at91_gpio.%d: Couldn\u2019t add irqchip to gpiochip.\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at91_gpio->pioc_idx);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ret;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* Then register the chain on the parent IRQ */\n\u00a0\u00a0\u00a0\u00a0gpiochip_set_chained_irqchip(&at91_gpio->chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gpio_irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at91_gpio->pioc_virq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gpio_irq_handler);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstatic irqreturn_t pcf857x_irq(int irq, void *data)\n{\n\u00a0\u00a0\u00a0\u00a0struct pcf857x *gpio = data;\n\u00a0\u00a0\u00a0\u00a0unsigned long change, i, status;\n\u00a0\u00a0\u00a0\u00a0status = gpio->read(gpio->client);\n\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0* call the interrupt handler if gpio is used as\n\u00a0\u00a0\u00a0\u00a0\u00a0* interrupt source, just to avoid bad irqs\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0mutex_lock(&gpio->lock);\n\u00a0\u00a0\u00a0\u00a0change = (gpio->status ^ status) & gpio->irq_enabled;\n\u00a0\u00a0\u00a0\u00a0gpio->status = status;\n\u00a0\u00a0\u00a0\u00a0mutex_unlock(&gpio->lock);\n\u00a0\u00a0\u00a0\u00a0for_each_set_bit(i, &change, gpio->chip.ngpio)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_nested_irq(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_find_mapping(gpio->chip.irq.domain, i));\n\u00a0\u00a0\u00a0\u00a0return IRQ_HANDLED;\n}\n```", "```\nstatic int pcf857x_probe(struct i2c_client *client,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct i2c_device_id *id)\n{\n\u00a0\u00a0\u00a0\u00a0struct pcf857x *gpio;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* Enable irqchip only if we have an interrupt line */\n\u00a0\u00a0\u00a0\u00a0if (client->irq) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status = gpiochip_irqchip_add_nested(&gpio->chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gpio->irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_level_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IRQ_TYPE_NONE);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (status) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&client->dev, \"cannot add irqchip\\n\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto fail;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status = devm_request_threaded_irq(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&client->dev, client->irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL, pcf857x_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IRQF_ONESHOT |IRQF_TRIGGER_FALLING | \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IRQF_SHARED,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_name(&client->dev), gpio);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (status)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto fail;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gpiochip_set_nested_irqchip(&gpio->chip, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gpio->irqchip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client->irq);\n\u00a0\u00a0\u00a0\u00a0}\n[...]\n}\n```", "```\nstruct regmap_irq {\n\u00a0\u00a0\u00a0\u00a0unsigned int reg_offset;\n\u00a0\u00a0\u00a0\u00a0unsigned int mask;\n\u00a0\u00a0\u00a0\u00a0unsigned int type_reg_offset;\n\u00a0\u00a0\u00a0\u00a0unsigned int type_rising_mask;\n\u00a0\u00a0\u00a0\u00a0unsigned int type_falling_mask;\n};\n```", "```\nstruct regmap_irq_chip {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0unsigned int status_base;\n\u00a0\u00a0\u00a0\u00a0unsigned int mask_base;\n\u00a0\u00a0\u00a0\u00a0unsigned int unmask_base;\n\u00a0\u00a0\u00a0\u00a0unsigned int ack_base;\n\u00a0\u00a0\u00a0\u00a0unsigned int wake_base;\n\u00a0\u00a0\u00a0\u00a0unsigned int type_base;\n\u00a0\u00a0\u00a0\u00a0unsigned int irq_reg_stride;\n\u00a0\u00a0\u00a0\u00a0bool mask_writeonly:1;\n\u00a0\u00a0\u00a0\u00a0bool init_ack_masked:1;\n\u00a0\u00a0\u00a0\u00a0bool mask_invert:1;\n\u00a0\u00a0\u00a0\u00a0bool use_ack:1;\n\u00a0\u00a0\u00a0\u00a0bool ack_invert:1;\n\u00a0\u00a0\u00a0\u00a0bool wake_invert:1;\n\u00a0\u00a0\u00a0\u00a0bool type_invert:1;\n\u00a0\u00a0\u00a0\u00a0int num_regs;\n\u00a0\u00a0\u00a0\u00a0const struct regmap_irq *irqs;\n\u00a0\u00a0\u00a0\u00a0int num_irqs;\n\u00a0\u00a0\u00a0\u00a0int num_type_reg;\n\u00a0\u00a0\u00a0\u00a0unsigned int type_reg_stride;\n\u00a0\u00a0\u00a0\u00a0int (*handle_pre_irq)(void *irq_drv_data);\n\u00a0\u00a0\u00a0\u00a0int (*handle_post_irq)(void *irq_drv_data);\n\u00a0\u00a0\u00a0\u00a0void *irq_drv_data;\n};\n```", "```\nstruct regmap_irq_chip_data {\n\u00a0\u00a0\u00a0\u00a0struct mutex lock;\n\u00a0\u00a0\u00a0\u00a0struct irq_chip irq_chip;\n\u00a0\u00a0\u00a0\u00a0struct regmap *map;\n\u00a0\u00a0\u00a0\u00a0const struct regmap_irq_chip *chip;\n\u00a0\u00a0\u00a0\u00a0int irq_base;\n\u00a0\u00a0\u00a0\u00a0struct irq_domain *domain;\n\u00a0\u00a0\u00a0\u00a0int irq;\n\u00a0\u00a0\u00a0\u00a0[...]\n};\n```", "```\n    static const struct irq_chip regmap_irq_chip = {\n    \u00a0\u00a0\u00a0\u00a0.irq_bus_lock = regmap_irq_lock,\n    \u00a0\u00a0\u00a0\u00a0.irq_bus_sync_unlock = regmap_irq_sync_unlock,\n    \u00a0\u00a0\u00a0\u00a0.irq_disable = regmap_irq_disable,\n    \u00a0\u00a0\u00a0\u00a0.irq_enable = regmap_irq_enable,\n    \u00a0\u00a0\u00a0\u00a0.irq_set_type = regmap_irq_set_type,\n    \u00a0\u00a0\u00a0\u00a0.irq_set_wake = regmap_irq_set_wake,\n    };\n    ```", "```\n    static const struct irq_domain_ops regmap_domain_ops = {\n    \u00a0\u00a0\u00a0\u00a0.map = regmap_irq_map,\n    \u00a0\u00a0\u00a0\u00a0.xlate = irq_domain_xlate_onetwocell,\n    };\n    ```", "```\nint devm_regmap_add_irq_chip(struct device *dev, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct regmap *map,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int irq, int irq_flags, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int irq_base,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct regmap_irq_chip *chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data **data)\nint regmap_irq_get_virq(struct regmap_irq_chip_data *data, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int irq)\n```", "```\nstatic int regmap_irq_map(struct irq_domain *h, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int virq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_hw_number_t hw)\n{\n\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data *data = h->host_data;\n\u00a0\u00a0\u00a0\u00a0irq_set_chip_data(virq, data);\n\u00a0\u00a0\u00a0\u00a0irq_set_chip(virq, &data->irq_chip);\n\u00a0\u00a0\u00a0\u00a0irq_set_nested_thread(virq, 1);\n\u00a0\u00a0\u00a0\u00a0irq_set_parent(virq, data->irq);\n\u00a0\u00a0\u00a0\u00a0irq_set_noprobe(virq);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\nstatic const struct irq_domain_ops regmap_domain_ops = {\n\u00a0\u00a0\u00a0\u00a0.map = regmap_irq_map,\n\u00a0\u00a0\u00a0\u00a0.xlate = irq_domain_xlate_onetwocell,\n};\nstatic irqreturn_t regmap_irq_thread(int irq, void *d)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0for (i = 0; i < chip->num_irqs; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (data->status_buf[chip->irqs[i].reg_offset /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map->reg_stride] & chip->irqs[i].mask) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_nested_irq(irq_find_mapping(data->domain, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handled = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0if (handled)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return IRQ_HANDLED;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return IRQ_NONE;\n}\nint regmap_add_irq_chip(struct regmap *map, int irq, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int irq_ flags,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int irq_base, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct regmap_irq_chip *chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data **data)\n{\n\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data *d;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0d = kzalloc(sizeof(*d), GFP_KERNEL);\n\u00a0\u00a0\u00a0\u00a0if (!d)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -ENOMEM;\n\u00a0\u00a0\u00a0\u00a0/* The below is just for simplicity */\n\u00a0\u00a0\u00a0\u00a0initialize_irq_chip_data(d);\n\u00a0\u00a0\u00a0\u00a0if (irq_base)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d->domain = irq_domain_add_legacy(map->dev->of_node,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chip->num_irqs,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_base, 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&regmap_domain_ops,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d);\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d->domain = irq_domain_add_linear(map->dev->of_node,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chip->num_irqs,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&regmap_domain_ops, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d);\n\u00a0\u00a0\u00a0\u00a0ret = request_threaded_irq(irq, NULL, regmap_irq_thread,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0irq_flags | IRQF_ONESHOT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chip->name, d);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0*data = d;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstruct max77620_gpio {\n\u00a0\u00a0\u00a0\u00a0struct gpio_chip gpio_chip;\n\u00a0\u00a0\u00a0\u00a0struct regmap *rmap;\n\u00a0\u00a0\u00a0\u00a0struct device *dev;\n};\nstruct max77620_chip {\n\u00a0\u00a0\u00a0\u00a0struct device *dev;\n\u00a0\u00a0\u00a0\u00a0struct regmap *rmap;\n\u00a0\u00a0\u00a0\u00a0int chip_irq;\n\u00a0\u00a0\u00a0\u00a0int irq_base;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data *top_irq_data;\n\u00a0\u00a0\u00a0\u00a0struct regmap_irq_chip_data *gpio_irq_data;\n};\n```", "```\nstatic const struct regmap_irq max77620_gpio_irqs[] = {\n\u00a0\u00a0\u00a0\u00a0[0] = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mask = MAX77620_IRQ_LVL2_GPIO_EDGE0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_rising_mask = MAX77620_CNFG_GPIO_INT_RISING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_falling_mask = MAX77620_CNFG_GPIO_INT_FALLING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.reg_offset = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_reg_offset = 0,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0[1] = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mask = MAX77620_IRQ_LVL2_GPIO_EDGE1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_rising_mask = MAX77620_CNFG_GPIO_INT_RISING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_falling_mask = MAX77620_CNFG_GPIO_INT_FALLING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.reg_offset = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_reg_offset = 1,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0[2] = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mask = MAX77620_IRQ_LVL2_GPIO_EDGE2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_rising_mask = MAX77620_CNFG_GPIO_INT_RISING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_falling_mask = MAX77620_CNFG_GPIO_INT_FALLING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.reg_offset = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_reg_offset = 2,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0[7] = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mask = MAX77620_IRQ_LVL2_GPIO_EDGE7,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_rising_mask = MAX77620_CNFG_GPIO_INT_RISING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_falling_mask = MAX77620_CNFG_GPIO_INT_FALLING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.reg_offset = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type_reg_offset = 7,\n\u00a0\u00a0\u00a0\u00a0},\n};\n```", "```\nstatic const struct regmap_irq_chip max77620_gpio_irq_chip = {\n\u00a0\u00a0\u00a0\u00a0.name = \"max77620-gpio\",\n\u00a0\u00a0\u00a0\u00a0.irqs = max77620_gpio_irqs,\n\u00a0\u00a0\u00a0\u00a0.num_irqs = ARRAY_SIZE(max77620_gpio_irqs),\n\u00a0\u00a0\u00a0\u00a0.num_regs = 1,\n\u00a0\u00a0\u00a0\u00a0.num_type_reg = 8,\n\u00a0\u00a0\u00a0\u00a0.irq_reg_stride = 1,\n\u00a0\u00a0\u00a0\u00a0.type_reg_stride = 1,\n\u00a0\u00a0\u00a0\u00a0.status_base = MAX77620_REG_IRQ_LVL2_GPIO,\n\u00a0\u00a0\u00a0\u00a0.type_base = MAX77620_REG_GPIO0,\n};\n```", "```\nstatic int max77620_gpio_to_irq(struct gpio_chip *gc,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int offset)\n{\n\u00a0\u00a0\u00a0\u00a0struct max77620_gpio *mgpio = gpiochip_get_data(gc);\n\u00a0\u00a0\u00a0\u00a0struct max77620_chip *chip = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_get_drvdata(mgpio->dev- >parent);\n\u00a0\u00a0\u00a0\u00a0return regmap_irq_get_virq(chip->gpio_irq_data, offset);\n}\n```", "```\nstatic int max77620_gpio_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0struct max77620_chip *chip = \u00a0\u00a0\u00a0\u00a0\u00a0dev_get_drvdata(pdev->dev.parent);\n\u00a0\u00a0\u00a0\u00a0\u00a0struct max77620_gpio *mgpio;\n\u00a0\u00a0\u00a0\u00a0\u00a0int gpio_irq;\n\u00a0\u00a0\u00a0\u00a0\u00a0int ret;\n\u00a0\u00a0\u00a0\u00a0\u00a0gpio_irq = platform_get_irq(pdev, 0);\n\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio = devm_kzalloc(&pdev->dev, sizeof(*mgpio), \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GFP_KERNEL);\n\u00a0\u00a0\u00a0\u00a0\u00a0if (!mgpio)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -ENOMEM;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->rmap = chip->rmap;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->dev = &pdev->dev;\n\u00a0\u00a0\u00a0\u00a0\u00a0/* setting gpiochip stuffs*/\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.direction_input = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max77620_gpio_dir_input;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.get = max77620_gpio_get;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.direction_output = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max77620_gpio_dir_output;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.set = max77620_gpio_set;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.set_config = max77620_gpio_set_config;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.to_irq = max77620_gpio_to_irq;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.ngpio = MAX77620_GPIO_NR;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.can_sleep = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.base = -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0#ifdef CONFIG_OF_GPIO\n\u00a0\u00a0\u00a0\u00a0\u00a0mgpio->gpio_chip.of_node = pdev->dev.parent->of_node;\n\u00a0\u00a0\u00a0\u00a0\u00a0#endif\n\u00a0\u00a0\u00a0\u00a0\u00a0ret = devm_gpiochip_add_data(&pdev->dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&mgpio->gpio_chip, mgpio);\n\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0ret = devm_regmap_add_irq_chip(&pdev->dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chip->rmap, gpio_irq,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IRQF_ONESHOT, -1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&max77620_gpio_irq_chip,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&chip->gpio_irq_data);\n\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```"]