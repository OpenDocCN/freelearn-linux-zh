- en: Chapter 6. Iterating with Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用循环迭代
- en: Remember, scripts are for lazy people. We are the folk of the world who have
    better things to do than repeat a task 100 times or more; loops are our friends.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，脚本是给懒人用的。我们是世界上有更重要事情要做的人，而不是重复一项任务100次或更多次；循环是我们的朋友。
- en: Looping structures are the life-blood of scripts. These loops are the workhorse
    engine that can iterate many times, repeating the same task reliably and consistently.
    Imagine having 100,000 lines of text within a CSV file that has to be checked
    for incorrect entries. A script can do this easily and accurately once developed
    but in the case of a human, the reliability factor and accuracy will fail very
    quickly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 循环结构是脚本的生命线。这些循环是可以可靠和一致地重复多次执行相同任务的工作引擎。想象一下，有10万行文本在CSV文件中，必须检查是否有错误条目。一旦开发完成，脚本可以轻松而准确地完成这项任务，但在人类的情况下，可靠性和准确性将很快失败。
- en: 'So let''s see how we can save our time and sanity by covering the following
    topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看如何通过在本章中涵盖以下主题来节省时间和理智：
- en: For loops
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for循环
- en: Loop control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环控制
- en: While and until
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: while和until
- en: Read from file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中读取
- en: Operator menu
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作菜单
- en: For loops
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for循环
- en: 'All our looping controls can be simple and we will begin by looking at `for`
    loops. The word `for` is a keyword in bash and in working it is similar to `if`.
    We can use the command type to verify this, as shown in the following example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的循环控制都可以很简单，我们将从`for`循环开始。`for`是bash中的关键字，在工作中类似于`if`。我们可以使用命令类型来验证这一点，如下例所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a reserved shell keyword, we can use a `for` loop both in scripts and directly
    at the command line. In this way, we can utilize loops within and without the
    scripts optimizing the use of the command line. A simple `for` loop is shown in
    the following example code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作为保留的shell关键字，我们可以在脚本中和直接在命令行中使用`for`循环。这样，我们可以在脚本内外利用循环，优化命令行的使用。一个简单的`for`循环如下例所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Within a `for` loop, we read from the list on the right to populate the variable
    parameter on the left, in this case we will read from the list containing `bob`
    and `joe` into the parameter variable `u`. Each item from the list is inserted
    into the variable, one item at a time. In this way, as long as there are items
    to be processed in the list, the loop will execute until the list is exhausted.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中，我们从右侧的列表中读取以填充左侧的变量参数，这种情况下我们将从包含`bob`和`joe`的列表中读取，并插入到参数变量`u`中。列表中的每个项目都会逐个插入到变量中。这样，只要列表中有要处理的项目，循环就会执行，直到列表耗尽。
- en: 'Practically, for us the execution of this loop means that we will:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，对我们来说，执行此循环意味着我们将：
- en: Create the user `bob`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户`bob`
- en: Set the password for `bob`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`bob`设置密码
- en: Expire the password so it will need to be reset on the first login for the user
    `bob`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让用户`bob`的密码过期，这样在第一次登录时就需要重置
- en: We then loop back and repeat the process for the user `joe`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们循环回去，重复为用户`joe`执行相同的过程。
- en: 'We can view the previous example in the following screenshot; after having
    gained root access via `sudo -i`, we proceeded to run the loop and create the
    users:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中查看前面的示例；在通过`sudo -i`获得root访问权限后，我们继续运行循环并创建用户：
- en: '![For loops](img/00053.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![For loops](img/00053.jpeg)'
- en: 'The list that is read in the `for` loop can be generated dynamically or statically,
    as shown in the last example. To create dynamic lists, we could use various globbing
    techniques to populate the list. As an example, to work with all files in a directory
    we could use `*`, as shown in the following example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中读取的列表可以动态或静态生成，如最后一个例子所示。要创建动态列表，我们可以使用各种通配技术来填充列表。例如，要处理目录中的所有文件，我们可以使用`*`，如下例所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When a list is generated, such as with file globbing, we should quote the expansion
    of the variable parameter. Without the quotes, it is possible that a space will
    get included that will cause the command to fail. This is what we have seen here
    in the `stat` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成列表时，比如使用文件通配符，我们应该引用变量参数的扩展。如果没有引号，可能会包含一个空格，导致命令失败。这就是我们在`stat`命令中看到的情况。
- en: 'In the following examples, we isolate the filenames that begin with `ba*`.
    We then use the `stat` command to print the inode metadata. The code and output
    is shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们隔离以`ba*`开头的文件名。然后我们使用`stat`命令打印inode元数据。代码和输出如下截图所示：
- en: '![For loops](img/00054.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![For loops](img/00054.jpeg)'
- en: 'This list can also be generated from the output of another command or a pipeline
    of commands. For example, if we need to print the current working directory of
    all logged in users, we could try something similar to the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表也可以从另一个命令的输出或一系列命令的输出中生成。例如，如果我们需要打印所有已登录用户的当前工作目录，我们可以尝试类似以下的操作：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the previous example, we can see that the choice of name for the parameter
    is down to you; we are not limited to a single character and we can use the `$user`name
    in this example. Using lowercase we will not overwrite the system variable `$USER`.
    The following screenshot demonstrates the loop and the subsequent output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以看到参数名称的选择取决于您；我们不限于单个字符，我们可以在此示例中使用`$user`name。使用小写我们不会覆盖系统变量`$USER`。以下截图演示了循环和随后的输出：
- en: '![For loops](img/00055.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![For loops](img/00055.jpeg)'
- en: The `lsof` command will list open files, we can search for the files opened
    by each user in turn and with the `bash` command as the current working directory.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`lsof`命令将列出打开的文件，我们可以依次搜索每个用户打开的文件，并使用`bash`命令作为当前工作目录。'
- en: 'Working with the scripts that we have created so far, we can create a new script
    called `hello9.sh`. If we copy the `$HOME/bin/hello2.sh` script to the new script,
    we can edit it to make use of a `for` loop:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们迄今为止创建的脚本，我们可以创建一个名为`hello9.sh`的新脚本。如果我们将`$HOME/bin/hello2.sh`脚本复制到新脚本中，我们可以编辑它以使用`for`循环：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The loop is used to iterate through each command-line argument supplied and
    greet each user individually. When we execute the script, we can see that we can
    now display the hello message for each user. This is shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该循环用于遍历提供的每个命令行参数并分别向每个用户打招呼。当我们执行脚本时，我们可以看到我们现在可以为每个用户显示hello消息。这在下面的截图中显示：
- en: '![For loops](img/00056.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![For循环](img/00056.jpeg)'
- en: Although, what we have seen here is still relatively trivial, we should now
    realize a little of what we can do with scripts and loops. The arguments of this
    script can be the usernames that we have already used or anything else. If we
    stick with the usernames, then it will be very easy to create user accounts and
    set passwords, as we saw earlier.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在这里看到的仍然相对琐碎，但我们现在应该意识到脚本和循环可以做些什么。此脚本的参数可以是我们已经使用过的用户名或其他任何内容。如果我们坚持使用用户名，那么创建用户帐户并设置密码将非常容易，就像我们之前看到的那样。
- en: Controlling the loop
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制循环
- en: Having entered our loop, we may need to either exit the loop prematurely or
    perhaps exclude certain items from processing. If we want to process only directories
    in a listing, rather than every file of any type, then to implement this, we have
    loop control keywords, such as `break` and `continue`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 进入循环后，我们可能需要提前退出循环，或者可能需要排除某些项目不进行处理。如果我们只想在列表中处理目录，而不是任何类型的文件，那么为了实现这一点，我们有循环控制关键字，如`break`和`continue`。
- en: The `break` keyword is used to exit the loop processing no more entries, whereas
    the `continue` keyword is used to stop the processing of the current entry in
    the loop and resume the processing with the next entry.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`关键字用于退出循环，不再处理条目，而`continue`关键字用于停止处理当前条目并恢复处理下一个条目。'
- en: 'Assuming we only want to process directories, we could implement a test within
    the loop and determine the file type:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想处理目录，我们可以在循环中实现一个测试，并确定文件类型：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Within the loop we want to set permissions including the SGID and Sticky bits,
    but for the directories only. The `*` search will return all files, the first
    statement within the loop will ensure that we only process directories. If the
    test is done for the current loop, the target fails the test and is not a directory;
    the `continue` keyword retrieves the next loop-list item. If the test returns
    true and we are working with a directory then we will process the subsequent statements
    and execute the `chmod` command.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，我们想要设置包括SGID和粘性位的权限，但仅适用于目录。`*`搜索将返回所有文件，循环内的第一条语句将确保我们只处理目录。如果测试是针对当前循环进行的，目标未通过测试并不是一个目录；`continue`关键字将检索下一个循环列表项。如果测试返回true并且我们正在处理一个目录，那么我们将处理后续语句并执行`chmod`命令。
- en: 'If we need to run the loop until we found a directory and then exit the loop
    we can adjust the code so that we can iterate though each file. If the file is
    a directory then we exit the loop with the `break` keyword:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要运行循环直到找到一个目录，然后退出循环，我们可以调整代码，以便可以遍历每个文件。如果文件是一个目录，那么我们使用`break`关键字退出循环：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Within the following screenshot, we can see the code that I just wrote in action:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到我刚刚编写的代码在运行中的情况：
- en: '![Controlling the loop](img/00057.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![控制循环](img/00057.jpeg)'
- en: 'By working with the same theme, we can print each directory found in the listing
    using the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用以下代码，我们可以打印列表中找到的每个目录：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can achieve a result by processing the loop item only if it is a directory
    and within the loop. We can work with regular files only using the `if` test.
    In this example, we append the directory name to the `dir_name` variable. Once
    we exit the loop, we print he complete list of directories. We can see this in
    the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过仅在循环中处理目录项目来实现结果。我们可以使用`if`测试仅处理常规文件。在这个例子中，我们将目录名附加到`dir_name`变量。一旦退出循环，我们打印完整的目录列表。我们可以在下面的截图中看到这一点：
- en: '![Controlling the loop](img/00058.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![控制循环](img/00058.jpeg)'
- en: Using these examples and your own ideas, you should now be able to see how you
    can control loops using the `continue` and `break` keywords.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些示例和您自己的想法，您现在应该能够看到如何使用`continue`和`break`关键字控制循环。
- en: While loops and until loops
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: While循环和until循环
- en: When using the `for` loop we iterate through a list, it's either the one that
    we create or the one that is dynamically generated. Using the `while` or `until`
    loops, we loop based on the fact that the condition becomes either true or false.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环时，我们遍历列表，无论是我们创建的列表还是动态生成的列表。使用`while`或`until`循环时，我们根据条件变为真或假来循环。
- en: 'A `while` loop loops while the condition is true and conversely an `until`
    loop will loop while the condition is false. The following command will count
    from 10 through to zero. Each iteration of the loop printing the variable and
    then reducing the value by 1:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环在条件为真时循环，相反`until`循环在条件为假时循环。以下命令将从10倒数到零。循环的每次迭代都打印变量，然后将值减1：'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can see the output of this command in the following screenshot; thus, confirming
    the countdown to zero:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下面的截图中看到这个命令的输出；从而确认倒计时到零：
- en: '![While loops and until loops](img/00059.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![While循环和until循环](img/00059.jpeg)'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The use of the `\c` escape sequence used here allows the suppression of the
    line-feed normally used with `echo`. In this way, we can keep the countdown on
    the single-line of output. I think you will agree that its a nice effect.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用的`\c`转义序列允许抑制`echo`通常使用的换行符。这样，我们可以保持单行输出的倒计时。我想您会同意这是一个不错的效果。
- en: 'The functionality of this loop can be gained using the `until` loop; just a
    quick rethink of the logic is required, as we will want to loop until the condition
    becomes true. Generally, it is a personal choice and the way the logic works best
    for you about which loop to use. The following example shows the loop written
    with the `until` loop:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`until`循环可以获得此循环的功能；只需要快速重新考虑逻辑，因为我们希望循环直到条件变为真。通常，关于使用哪种循环是个人选择，以及逻辑对您来说哪种循环效果最好。以下示例显示了使用`until`循环编写的循环：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reading input from files
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中读取输入
- en: Now, it may seem that these loops can do a little more than just count down
    numbers. We may want to read data in from a text file and process each line. The
    shell built-in `read` command that we saw earlier in this book can be used to
    read a file line by line. In this way, we can use a loop to process each line
    of a file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看起来这些循环可以做的不仅仅是倒数。我们可能希望从文本文件中读取数据并处理每一行。我们在本书中早些时候看到的shell内置`read`命令可以用于逐行读取文件。这样，我们可以使用循环处理文件的每一行。
- en: 'To demonstrate some of these functionalities, we will use a file that contains
    the server addresses. These could be hostnames or IP addresses. In the following
    example, we will make use of the IP addresses of Google DNS Servers. The following
    command shows the contents of the `servers.txt` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示其中一些功能，我们将使用一个包含服务器地址的文件。这些可以是主机名或IP地址。在下面的示例中，我们将使用Google DNS服务器的IP地址。以下命令显示了`servers.txt`文件的内容：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using the `read` command in the condition of the `while` loop, we can loop
    as long as we have more lines to read from the file. We specify the input file
    directly after the `done` keyword. For each line that we read from the file, we
    can test if the server is up with the command `ping` and if the server is responding,
    we append it to a list of available servers. This list is printed once the loop
    closes. In the following example, we can see that we begin to add in as many elements
    of scripting as we have covered in this book:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`while`循环的条件中使用`read`命令，我们可以循环读取文件中的行。我们在`done`关键字后直接指定输入文件。对于从文件中读取的每一行，我们可以使用`ping`命令测试服务器是否正常运行，如果服务器响应，我们将其添加到可用服务器列表中。循环结束后，将打印此列表。在下面的示例中，我们可以看到我们开始添加书中涵盖的脚本元素：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can verify the operation in the following screenshot, which captures the
    output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中验证操作：
- en: '![Reading input from files](img/00060.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![从文件中读取输入](img/00060.jpeg)'
- en: 'Using this kind of loop, we can start to build extremely practical scripts
    to process information either fed from the command line or from scripts. It will
    be very easy to replace the filename that we read with `$1` representing a positional
    parameter passed into the script. Let''s return to the `ping_server.sh` script
    and adjust it to accept the input parameter. We can copy the script to the new
    `$HOME/bin/ping_server_from_file.sh` file. Within the script we first test if
    the input parameter is a file. We then create an output file with a tile that
    includes the date. As we enter the loop, we append available servers to this file
    and list the file at the end of the script:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种循环，我们可以开始构建非常实用的脚本，以处理从命令行或脚本中提供的信息。很容易用`$1`代表传递到脚本中的位置参数来替换我们读取的文件名。让我们返回到`ping_server.sh`脚本，并调整它以接受输入参数。我们可以将脚本复制到新的`$HOME/bin/ping_server_from_file.sh`文件中。在脚本中，我们首先测试输入参数是否为文件。然后，我们创建一个包含日期的标题的输出文件。当我们进入循环时，我们将可用服务器追加到此文件，并在脚本结束时列出文件：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can execute the script now in the following manner:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以以以下方式执行脚本：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output from the script execution should be similar to the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行的输出应该类似于以下截图：
- en: '![Reading input from files](img/00061.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![从文件中读取输入](img/00061.jpeg)'
- en: Creating operator menus
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建操作员菜单
- en: 'We can provide a menu to the Linux operators who need limited functionality
    from the shell and do not want to learn the details of command line use. We can
    use their login script to launch a menu for them. This menu will provide a list
    of command selections to choose from. The menu will loop until the user chooses
    to exit from the menu. We can create a new `$HOME/bin/menu.sh` script, the basis
    of the menu loop will be the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为需要从shell获取有限功能并且不想学习命令行使用细节的Linux操作员提供菜单。我们可以使用他们的登录脚本为他们启动菜单。此菜单将提供要选择的命令选项列表。菜单将循环，直到用户选择退出菜单。我们可以创建一个新的`$HOME/bin/menu.sh`脚本，菜单循环的基础如下：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The loop we have created here is infinite. The `true` command will always return
    true and loop continuously; however, we can provide a loop control mechanism to
    allow the user to leave the menu. To start building the structure of the menu,
    we will need to echo some text within the loop asking the user for their choice
    of command. We will clear the screen before the menu is loaded each time and an
    additional read prompt will appear after the execution of the desired command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里创建的循环是无限的。`true`命令将始终返回true并持续循环；但是，我们可以提供循环控制机制，以允许用户离开菜单。要开始构建菜单的结构，我们需要在循环中输出一些文本，询问用户选择的命令。每次加载菜单之前，我们将清除屏幕，并在所需命令执行后出现额外的读取提示。
- en: 'This allows the user to read the output from the command before the screen
    is cleared and the menu is reloaded. The script will look like the following code
    at this stage:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户在清除屏幕并重新加载菜单之前读取命令的输出。此时脚本将如下所示：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you execute the script at this stage, there will be no mechanism to leave
    the script. We have not added any code to the menu selections; however, you can
    test functionality and exit using the *Ctrl* + *c* key.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在此阶段执行脚本，将没有机制可以离开脚本。我们还没有添加任何代码到菜单选择；但是，您可以使用*Ctrl* + *c*键测试功能并退出。
- en: 'At this stage the menu should look similar to the output shown in the following
    screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，菜单应该类似于以下截图中显示的输出：
- en: '![Creating operator menus](img/00062.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![创建操作员菜单](img/00062.jpeg)'
- en: 'To build the code behind the menu selection, we will implement a `case` statement.
    This will be added in between the two `read` commands, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建菜单选择背后的代码，我们将实现一个`case`语句。这将被添加在两个`read`命令之间，如下所示：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can see the three options that we have added to the `case` statement, `a`,
    `b`, and `c`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经添加到`case`语句中的三个选项，`a`，`b`和`c`：
- en: '**Option a**: This runs the `tar` command to back-up the scripts'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项a：这将运行`tar`命令来备份脚本
- en: '**Option b**: This runs the `cal` command to display the current month'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项b：这将运行`cal`命令来显示当前月份
- en: '**Option c**: This exits the script'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项c：这将退出脚本
- en: 'To ensure that the user is logged out when exiting from their login script,
    we will run:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保用户在退出其登录脚本时注销，我们将运行：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `exec` command is used to ensure that the shell is left after the `menu.sh`
    file is complete. In this way, the user never needs to experience the Linux shell.
    The complete script is shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec`命令用于确保在`menu.sh`文件完成后保留shell。这样，用户永远不需要体验Linux shell。完整的脚本显示在以下截图中：'
- en: '![Creating operator menus](img/00063.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![创建操作菜单](img/00063.jpeg)'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have begun to make progress within this chapter. We have been able to join
    many of the elements that we have previously used into cohesive and functional
    scripts. Although the focus of this chapter has been on loops, we have used command-line
    lists, `if` statements, `case` statements, and arithmetic calculations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经开始取得进展。我们已经能够将许多我们以前使用的元素结合成连贯和功能性的脚本。尽管本章的重点是循环，但我们已经使用了命令行列表，`if`语句，`case`语句和算术计算。
- en: We opened this chapter describing loops as the workhorse of our scripts and
    we have been able to demonstrate this with `for`, `while`, and `until` loops.
    The `for` loop is used to iterate through elements of a list. The list can be
    either static or dynamic, with an emphasis on dynamic lists we showed how simply
    these are created via file globbing or command expansion.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开头描述循环为我们脚本的工作马，并且我们已经能够用`for`，`while`和`until`循环来证明这一点。`for`循环用于遍历列表的元素。列表可以是静态的或动态的，重点是动态列表，我们展示了如何通过文件通配符或命令扩展简单地创建这些列表。
- en: The `while` and `until` loops are controlled using conditions. The `while` loop
    will loop whilst the supplied condition is true. The `until` loop will loop until
    the supplied condition returns true or whilst it returns false. The `continue`
    and `break` keywords are specific to loops and along with `exit`, we can control
    the loop flow.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`和`until`循环受条件控制。`while`循环在提供的条件为真时循环。`until`循环将在提供的条件返回真或返回假时循环。`continue`和`break`关键字是特定于循环的，以及`exit`，我们可以控制循环流程。'
- en: In the next chapter, we will look at modulizing scripts using functions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用函数将脚本模块化。
