["```\n    ( ?[a-zA-Z]+ ?)\n    ```", "```\n    [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\n\n    ```", "```\n    [[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\n\n    ```", "```\n$ grep match_pattern filename\nthis is the line containing match_pattern\n\n```", "```\n$ grep \"match_pattern\" filename\nthis is the line containing match_pattern\n\n```", "```\n$ echo -e \"this is a word\\nnext line\" | grep word \nthis is a word\n\n```", "```\n$ grep \"match_text\" file1 file2 file3 ... \n\n```", "```\n$ grep word filename \u2013-color=auto\nthis is the line containing word\n\n```", "```\n$ grep -E \"[a-z]+\"\n\n```", "```\n$ egrep \"[a-z]+\"\n\n```", "```\n$ echo this is a line. | grep -o -E \"[a-z]+\\.\"\nline\n\n```", "```\n$ echo this is a line. | egrep -o \"[a-z]+\\.\"\nline.\n\n```", "```\n$ grep -v  match_pattern file\n\n```", "```\n$ grep -c \"text\" filename\n10\n\n```", "```\n$ echo -e \"1 2 3 4\\nhello\\n5 6\" | egrep  -c \"[0-9]\"\n2\n\n```", "```\n$ echo -e \"1 2 3 4\\nhello\\n5 6\" | egrep  -o \"[0-9]\" | wc -l\n6\n\n```", "```\n$ cat sample1.txt\ngnu is not unix\nlinux is fun\nbash is art\n$ cat sample2.txt\nplanetlinux\n\n$ grep linux -n sample1.txt\n2:linux is fun\n\n```", "```\n$ cat sample1.txt | grep linux -n\n\n```", "```\n$ grep linux -n sample1.txt sample2.txt\nsample1.txt:2:linux is fun\nsample2.txt:2:planetlinux\n\n```", "```\n$ echo gnu is not unix | grep -b -o \"not\"\n7:not\n\n```", "```\n$ grep -l linux sample1.txt sample2.txt\nsample1.txt\nsample2.txt\n\n```", "```\n$ grep \"text\" . -R -n\n\n```", "```\n$ cd src_dir\n$ grep \"test_function()\" . -R -n\n./miscutils/test.c:16:test_function();\n\n```", "```\n$ echo hello world | grep -i \"HELLO\"\nhello\n\n```", "```\n$ grep -e \"pattern1\" -e \"pattern\"\n\n```", "```\n$ echo this is a line of text | grep -e \"this\" -e \"line\" -o\nthis\nline\n\n```", "```\n$ grep -f pattern_file source_filename\n\n```", "```\n$ cat pat_file\nhello\ncool\n\n$ echo hello this is cool | grep -f pat_file\nhello this is cool\n\n```", "```\n$ grep \"main()\" . -r  --include *.{c,cpp}\n\n```", "```\n$ grep \"main()\" . -r \u2013-exclude \"README\" \n\n```", "```\n$ echo \"test\" > file1\n$ echo \"cool\" > file2\n$ echo \"test\" > file3\n\n```", "```\n$ grep \"test\" file* -lZ | xargs -0 rm\n\n```", "```\n#!/bin/bash \n#Filename: silent_grep.sh\n#Description: Testing whether a file contain a text or not \n\nif [ $# -ne 2 ]; \nthen\necho \"$0 match_text filename\"\nfi\n\nmatch_text=$1 \nfilename=$2 \n\ngrep -q $match_text $filename\n\nif [ $? -eq 0 ];\nthen\necho \"The text exists in the file\"\nelse\necho \"Text does not exist in the file\"\nfi\n```", "```\n$ ./silent_grep.sh Student student_data.txt \nThe text exists in the file \n\n```", "```\n$ seq 10 | grep 5 -A 3\n5\n6\n7\n8\n\n```", "```\n$ seq 10 | grep 5 -B 3\n2\n3\n4\n5\n\n```", "```\n$ seq 10 | grep 5 -C 3\n2\n3\n4\n5\n6\n7\n8\n\n```", "```\n$ echo -e \"a\\nb\\nc\\na\\nb\\nc\" | grep a -A 1\na\nb\n--\na\nb\n\n```", "```\ncut -f FIELD_LIST filename\n\n```", "```\n$ cut -f 2,3 filename\n\n```", "```\n$ cat student_data.txt \nNo  Name     Mark   Percent\n1   Sarath    45     90\n2   Alex      49     98\n3   Anu       45     90\n\n$ cut -f1 student_data.txt\nNo \n1 \n2 \n3 \n\n```", "```\n$ cut -f2,4 student_data.txt\nName     Percent\nSarath   90\nAlex     98\nAnu      90\n\n```", "```\n$ cut -f3 \u2013-complement student_data.txt\nNo  Name    Percent \n1   Sarath  90\n2   Alex    98\n3   Anu     90\n\n```", "```\n$ cat delimited_data.txt\nNo;Name;Mark;Percent\n1;Sarath;45;90\n2;Alex;49;98\n3;Anu;45;90\n\n$ cut -f2 -d\";\" delimited_data.txt\nName\nSarath\nAlex\nAnu\n\n```", "```\n$ cat range_fields.txt\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxy\n\n```", "```\n$ cut -c1-5 range_fields.txt\nabcde\nabcde\nabcde\nabcde\n\n```", "```\n$ cut range_fields.txt -c-2\nab\nab\nab\nab\n\n```", "```\n--output-delimiter \"delimiter string\"\n```", "```\n$ cut range_fields.txt -c1-3,6-9 --output-delimiter \",\"\nabc,fghi\nabc,fghi\nabc,fghi\nabc,fghi\n\n```", "```\n#!/bin/bash\n#Name: word_freq.sh\n#Description: Find out frequency of words in a file\n\nif [ $# -ne 1 ];\nthen\necho \"Usage: $0 filename\";\nexit -1\nfi\n\nfilename=$1\n\negrep -o \"\\b[[:alpha:]]+\\b\" $filename | \\\n\nawk '{ count[$0]++ }\nEND{ printf(\"%-14s%s\\n\",\"Word\",\"Count\") ;\nfor(ind in count)\n{  printf(\"%-14s%d\\n\",ind,count[ind]);  }\n\n}'\n```", "```\n$ ./word_freq.sh words.txt \nWord          Count \nused           1\nthis           2 \ncounting       1\n\n```", "```\n$ sed 's/pattern/replace_string/' file\n\n```", "```\n$ cat file | sed 's/pattern/replace_string/' file\n\n```", "```\n$ sed 's/text/replace/' file > newfile\n$ mv newfile file\n\n```", "```\n$ sed -i 's/text/replace/' file\n\n```", "```\n$ sed 's/pattern/replace_string/g' file\n\n```", "```\n$ echo this thisthisthis | sed 's/this/THIS/2g' \nthisTHISTHISTHIS\n\n$ echo this thisthisthis | sed 's/this/THIS/3g' \nthisthisTHISTHIS\n\n$ echo this thisthisthis | sed 's/this/THIS/4g' \nthisthisthisTHIS\n\n```", "```\nsed 's:text:replace:g'\nsed 's|text|replace|g'\n\n```", "```\nsed 's|te\\|xt|replace|g'\n\n```", "```\n$ sed '/^$/d' file\n\n```", "```\n$ echo this is an example | sed 's/\\w\\+/[&]/g'\n[this] [is] [an] [example]\n\n```", "```\n$ echo this is digit 7 in a number | sed 's/digit \\([0-9]\\)/\\1/'\nthis is 7 in a number\n\n```", "```\n$ echo seven EIGHT | sed 's/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/'\nEIGHT seven\n\n```", "```\nsed 'expression' | sed 'expression'\n```", "```\n$ sed 'expression; expression'\n```", "```\n$ text=hello\n$ echo hello world | sed \"s/$text/HELLO/\" \nHELLO world \n\n```", "```\nawk ' BEGIN{  print \"start\" } pattern { commands } END{ print \"end\" } file\n\n```", "```\nawk 'BEGIN { statements } { statements } END { end statements }'\n\n```", "```\nawk \"BEGIN { statements } { statements } END { end statements }\"\n\n```", "```\n$ awk 'BEGIN { i=0 } { i++ } END{ print i}' filename\n\n```", "```\n$ awk \"BEGIN { i=0 } { i++ } END{ print i }\" filename\n\n```", "```\n$ echo -e \"line1\\nline2\" | awk 'BEGIN{ print \"Start\" } { print } END{ print \"End\" } '\nStart\nline1\nline2\nEnd\n\n```", "```\n$ echo | awk '{ var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; \\\nprint var1,var2,var3 ; }'\n\n```", "```\nv1 v2 v3\n\n```", "```\n$ echo | awk '{ var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; \\\nprint var1\"-\"var2\"-\"var3 ; }'\n\n```", "```\nv1-v2-v3\n\n```", "```\n$ echo -e \"line1 f2 f3\\nline2 f4 f5\\nline3 f6 f7\" | \\\n\nawk '{\nprint \"Line no:\"NR\",No of fields:\"NF, \"$0=\"$0, \"$1=\"$1,\"$2=\"$2,\"$3=\"$3 \n}' \nLine no:1,No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3 \nLine no:2,No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5 \nLine no:3,No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7\n\n```", "```\n$awk '{ print $3,$2 }'  file\n\n```", "```\n$ awk 'END{ print NR }' file\n\n```", "```\n$ seq 5 | awk 'BEGIN{ sum=0; print \"Summation:\" } \n{ print $1\"+\"; sum+=$1 } END { print \"==\"; print sum }' \nSummation: \n1+ \n2+ \n3+ \n4+ \n5+ \n==\n15\n\n```", "```\n$ VAR=10000\n$ echo | awk -v VARIABLE=$VAR'{ print VARIABLE }'\n1\n\n```", "```\n$ var1=\"Variable1\" ; var2=\"Variable2\"\n$ echo | awk '{ print v1,v2 }' v1=$var1 v2=$var2\nVariable1 Variable2\n\n```", "```\n$ awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename\n\n```", "```\n$ seq 5 | awk 'BEGIN { getline; print \"Read ahead first line\", $0 } { print $0 }'\nRead ahead first line 1\n2\n3\n4\n5\n\n```", "```\n$ awk 'NR < 5' # Line number less than 5\n$ awk 'NR==1,NR==4' #Line numbers from 1-5\n$ awk '/linux/' # Lines containing the pattern linux (we can specify regex)\n$ awk '!/linux/' # Lines not containing the pattern linux\n\n```", "```\n$ awk -F: '{ print $NF }' /etc/passwd\n\n```", "```\nawk 'BEGIN { FS=\":\" } { print $NF }' /etc/passwd\n\n```", "```\n\"command\" | getline output ;\n```", "```\n$ echo | awk '{ \"grep root /etc/passwd\" | getline cmdout ; print cmdout }'\nroot:x:0:0:root:/root:/bin/bash\n\n```", "```\nfor(i=0;i<10;i++) { print $i ; }\n```", "```\nfor(i in array) { print array[i]; }\n```", "```\n$ sed 's/PATTERN/replace_text/g' filename\n\n```", "```\n$ stdin | sed 's/PATTERN/replace_text/g'\n\n```", "```\n$ p=pattern\n$ r=replaced\n$ echo \"line containing apattern\" | sed \"s/$p/$r/g\" \nline containing a replaced\n\n```", "```\n$ sed 's/PATTEN/replace_text/' filename\n\n```", "```\n$ sed 's/PATTERN/replacement/' -i filename\n\n```", "```\n$ cat sed_data.txt\n11 abc 111 this 9 file contains 111 11 88 numbers 0000\n\n$ cat sed_data.txt  | sed 's/\\b[0-9]\\{3\\}\\b/NUMBER/g'\n11 abc NUMBER this 9 file contains NUMBER 11 88 numbers 0000\n\n```", "```\n$ cat sample.js\nfunctionsign_out()\n{ \n\n$(\"#loading\").show(); \n$.get(\"log_in\",{logout:\"True\"},\n\nfunction(){ \n\nwindow.location=\"\";\n\n}); \n\n}\n\n```", "```\n    tr -d '\\n\\t' \n    ```", "```\n    tr -s ' ' or sed 's/[ ]\\+/ /g'\n    ```", "```\n    sed 's:/\\*.*\\*/::g'\n    ```", "```\n    sed 's/ \\?\\([{}();,:]\\) \\?/\\1/g'\n    ```", "```\n$ catsample.js |  \\\ntr -d '\\n\\t' |  tr -s ' ' \\\n| sed 's:/\\*.*\\*/::g' \\\n| sed 's/ \\?\\([{}();,:]\\) \\?/\\1/g' \n\n```", "```\nfunctionsign_out(){$(\"#loading\").show();$.get(\"log_in\",{logout:\"True\"},function(){window.location=\"\";});}\n\n```", "```\n$ cat obfuscated.txt | sed 's/;/;\\n/g; s/{/{\\n\\n/g; s/}/\\n\\n}/g' \n\n```", "```\n$ cat obfuscated.txt | sed 's/;/;\\n/g' | sed 's/{/{\\n\\n/g' | sed 's/}/\\n\\n}/g'\n\n```", "```\n    while read line;\n    do\n    echo $line;\n    done < file.txt\n    ```", "```\n    cat file.txt | (  while read line; do echo $line; done )\n    ```", "```\n    for word in $line;\n    do\n    echo $word;\n    done\n\n    ```", "```\n    for((i=0;i<${#word};i++))\n    do\n    echo ${word:i:1} ;\n    done\n\n    ```", "```\n$ cat paste1.txt\n1\n2\n3\n4\n5\n$ cat paste2.txt\nslynux\ngnu\nbash\nhack\n$ paste paste1.txt paste2.txt\n1slynux\n2gnu\n3bash\n4hack\n5\n\n```", "```\n$ paste paste1.txt paste2.txt -d \",\"\n1,slynux\n2,gnu\n3,bash\n4,hack\n5,\n\n```", "```\n$ awk '{ print $5 }' filename\n\n```", "```\n$ ls -l | awk '{ print $1\" :  \" $8 }'\n-rw-r--r-- :  delimited_data.txt\n-rw-r--r-- :  obfuscated.txt\n-rw-r--r-- :  paste1.txt\n-rw-r--r-- :  paste2.txt\n\n```", "```\n$ awk 'NR==M, NR==N' filename\n\n```", "```\n$ cat filename | awk 'NR==M, NR==N'\n\n```", "```\n$ seq 100 | awk 'NR==4,NR==6'\n4\n5\n6\n\n```", "```\n$ awk '/start_pattern/, /end _pattern/' filename\n\n```", "```\n$ cat section.txt \nline with pattern1 \nline with pattern2 \nline with pattern3 \nline end with pattern4 \nline with pattern5 \n\n$ awk '/pa.*3/, /end/' section.txt \nline with pattern3 \nline end with pattern4\n\n```", "```\n$ sed -n '/\\(.\\)\\1/p' filename\n\n```", "```\n'/\\(.\\).\\1/p'\n```", "```\n#!/bin/bash\n#Filename: match_palindrome.sh\n#Description: Find out palindrome strings from a given file\n\nif [ $# -ne 2 ];\nthen\necho \"Usage: $0 filename string_length\"\nexit -1\nfi\n\nfilename=$1 ;\n\nbasepattern='/^\\(.\\)'\n\ncount=$(( $2 / 2 ))\n\nfor((i=1;i<$count;i++))\ndo\nbasepattern=$basepattern'\\(.\\)' ;\ndone\n\nif [ $(( $2 % 2 )) -ne 0 ];\nthen\nbasepattern=$basepattern'.' ;\nfi\n\nfor((count;count>0;count--))\ndo\nbasepattern=$basepattern'\\'\"$count\" ;\ndone\n\nbasepattern=$basepattern'$/p'\nsed -n \"$basepattern\" $filename\n```", "```\n$ ./match_palindrome.sh /usr/share/dict/british-english 4\nnoon\npeep\npoop\nsees\n\n```", "```\n    sed '/\\(.\\)\\1/p'\n    ```", "```\n    sed '/^\\(.\\)\\(.\\)\\2\\1/p'\n    ```", "```\n$ word=\"malayalam\"\n$ echo $word | sed ':loop ; s/^\\(.\\)\\(.*\\)\\1/\\2/; t loop; /^.\\?$/{ s/.*/PALINDROME/ ; q; };  s/.*/NOT PALINDROME/ '\nPALINDROME\n\n```", "```\nstring=\"malayalam\"\nif [[ \"$string\" == \"$(echo $string | rev )\" ]];\nthen\necho \"Palindrome\"\nelse\necho \"Not palindrome\"\nfi\n```", "```\nsentence='this is line from sentence'\necho $sentence | rev | tr ' ' '\\n' | tac | tr '\\n' ' ' | rev\n\n```", "```\nsentence from line is this\n\n```", "```\ntac file1 file2 \u2026\n\n```", "```\n$ seq 5 | tac\n5 \n4 \n3 \n2 \n1\n\n```", "```\n$ seq 9 | \\\nawk '{ lifo[NR]=$0; lno=NR } \nEND{ for(;lno>-1;lno--){ print lifo[lno]; } \n}'\n\n```", "```\n$ cat url_email.txt \nthis is a line of text contains,<email> #slynux@slynux.com. </email> and email address, blog \"http://www.google.com\", test@yahoo.com dfdfdfdddfdf;cool.hacks@gmail.com<br />\n<ahref=\"http://code.google.com\"><h1>Heading</h1>\n\n$ egrep -o '[A-Za-z0-9.]+@[A-Za-z0-9.]+\\.[a-zA-Z]{2,4}'  url_email.txt\nslynux@slynux.com \ntest@yahoo.com \ncool.hacks@gmail.com\n\n```", "```\nhttp://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,4}\n\n```", "```\n$ egrep -o \"http://[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}\" url_email.txt\nhttp://www.google.com \nhttp://code.google.com\n\n```", "```\n[A-Za-z0-9.]+@[A-Za-z0-9.]+\\.[a-zA-Z]{2,4}\n\n```", "```\nhttp://[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}\n```", "```\n$ cat actress_rankings.txt | head -n 20\n1 Keira Knightley\n2 Natalie Portman \n3 Monica Bellucci\n4 Bonnie Hunt \n5 Cameron Diaz \n6 Annie Potts \n7 Liv Tyler \n8 Julie Andrews \n9 Lindsay Lohan\n10 Catherine Zeta-Jones \n11 CateBlanchett\n12 Sarah Michelle Gellar \n13 Carrie Fisher \n14 Shannon Elizabeth \n15 Julia Roberts \n16 Sally Field \n17 T\u00e9aLeoni\n18 Kirsten Dunst\n19 Rene Russo \n20 JadaPinkett\n\n```", "```\n$ grep -A 3 \"Cameron Diaz\" actress_rankings.txt\n5 Cameron Diaz\n6 Annie Potts\n7 Liv Tyler\n8 Julie Andrews\n\n```", "```\n$ grep -B 3 \"Cameron Diaz\" actress_rankings.txt \n2 Natalie Portman \n3 Monica Bellucci\n4 Bonnie Hunt \n5 Cameron Diaz\n\n```", "```\n$ grep -C 2 \"Cameron Diaz\" actress_rankings.txt \n3 Monica Bellucci\n4 Bonnie Hunt \n5 Cameron Diaz\n6 Annie Potts \n7 Liv Tyler\n\n```", "```\n$ cat sentence.txt \nLinux refers to the family of Unix-like computer operating systems that use the Linux kernel. Linux can be installed on a wide variety of computer hardware, ranging from mobile phones, tablet computers and video game consoles, to mainframes and supercomputers. Linux is predominantly known for its use in servers. It has a server market share ranging between 20\u201340%. Most desktop computers run either Microsoft Windows or Mac OS X, with Linux having anywhere from a low of an estimated 1\u20132% of the desktop market to a high of an estimated 4.8%. However, desktop use of Linux has become increasingly popular in recent years, partly owing to the popular Ubuntu, Fedora, Mint, and openSUSE distributions and the emergence of netbooks and smart phones running an embedded Linux.\n\n```", "```\n$ sed 's/ [^.]*mobile phones[^.]*\\.//g' sentence.txt\nLinux refers to the family of Unix-like computer operating systems that use the Linux kernel. Linux is predominantly known for its use in servers. It has a server market share ranging between 20\u201340%. Most desktop computers run either Microsoft Windows or Mac OS X, with Linux having anywhere from a low of an estimated 1\u20132% of the desktop market to a high of an estimated 4.8%. However, desktop use of Linux has become increasingly popular in recent years, partly owing to the popular Ubuntu, Fedora, Mint, and openSUSE distributions and the emergence of netbooks and smart phones running an embedded Linux.\n\n```", "```\n$ awk 'NR <=10' filename\n\n```", "```\n$ awk '{ buffer[NR % 10] = $0; } END { for(i=1;i<11;i++) { print buffer[i%10] } }' filename\n\n```", "```\n$ awk '{ buffer[NR] = $0; } END { for(i=NR; i>0; i--) { print buffer[i] } }' filename\n\n```", "```\n$ var=\"This is a line of text\"\n$ echo ${var/line/REPLACED}\nThis is a REPLACED of text\"\n\n```", "```\n${variable_name:start_position:length}\n```", "```\n$ string=abcdefghijklmnopqrstuvwxyz\n$ echo ${string:4}\nefghijklmnopqrstuvwxyz\n\n```", "```\n$ echo ${string:4:8}\nefghijkl\n\n```", "```\necho ${string:(-1)}\nz\n$ echo ${string:(-2):2}\nyz\n\n```"]