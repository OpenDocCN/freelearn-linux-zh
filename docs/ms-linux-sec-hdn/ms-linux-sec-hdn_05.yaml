- en: Mastering Discretionary Access Control
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握自主访问控制
- en: Discretionary Access Control, DAC, really just means that each user has the
    ability to control who can get into his or her stuff. If I wanted to open my home
    directory so that every other user on the system can get into it, I could do that.
    Having done so, I could then control who can access each specific file. In the
    next chapter, we'll use our DAC skills to manage shared directories, where members
    of a group might need different levels of access to the files within.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自主访问控制，DAC，实际上只意味着每个用户都有能力控制谁可以进入他或她的东西。如果我想打开我的家目录，以便系统上的每个其他用户都可以进入，我可以这样做。这样做后，我可以控制谁可以访问每个特定的文件。在下一章中，我们将使用我们的DAC技能来管理共享目录，其中组的成员可能需要对其中的文件有不同级别的访问权限。
- en: 'By this point in your Linux career, you likely know the basics of controlling
    access by setting file and directory permissions. In this chapter, we''ll do a
    review of the basics, and then we''ll look at some more advanced concepts. Topics
    that we''ll cover include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到您的Linux职业的这一点上，您可能已经了解了通过设置文件和目录权限来控制访问的基础知识。在本章中，我们将回顾基础知识，然后我们将看一些更高级的概念。我们将涵盖的主题包括：
- en: Using `chown` to change the ownership of files and directories
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`chown`更改文件和目录的所有权
- en: Using `chmod` to set permissions on files and directories
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`chmod`在文件和目录上设置权限
- en: What SUID and SGID settings can do for us on regular files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SUID和SGID设置对我们常规文件有什么作用
- en: The security implications of having the SUID and SGID permissions set on files
    that don't need them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不需要它们的文件上设置SUID和SGID权限的安全影响
- en: How to use extended file attributes to protect sensitive files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用扩展文件属性来保护敏感文件
- en: Using chown to change ownership of files and directories
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用chown更改文件和目录的所有权
- en: Controlling access to files and directories really just boils down to ensuring
    that the proper users own files and directories, and that each file and directory
    has permissions set in such a way that only authorized users can access them.
    The `chown` utility covers the first part of this equation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 真正控制对文件和目录的访问其实归结为确保适当的用户拥有文件和目录，并且每个文件和目录都以这样的方式设置了权限，以便只有授权用户才能访问它们。`chown`实用程序涵盖了这个方程式的第一部分。
- en: One unique thing about `chown` is that you must have sudo privileges to use
    it, even if you're working with your own files in your own directory. You can
    use it to change the user of a file or directory, the group that's associated
    with a file or directory, or both at the same time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`chown`的一个独特之处是，即使您在自己的目录中处理自己的文件，您也必须具有sudo特权才能使用它。您可以使用它来更改文件或目录的用户，与文件或目录关联的组，或同时更改两者。
- en: 'First, let''s say that you own the `perm_demo.txt` file and you want to change
    both the user and group association to that of another user. In this case, I''ll
    change the file ownership from me to Maggie:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，假设您拥有`perm_demo.txt`文件，并且希望将用户和组关联更改为另一个用户。在这种情况下，我将把文件所有权从我更改为Maggie：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first `maggie` in `maggie:maggie` is the user to whom you want to grant
    ownership. The second `maggie`, after the colon, represents the group with which
    you want the file to be associated. Since I was changing both the user and group
    to `maggie`, I could have left off the second `maggie`, with the first `maggie`
    followed by a colon, and I would have achieved the same result:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`maggie:maggie`中的第一个`maggie`是您想要授予所有权的用户。冒号后面的第二个`maggie`表示您希望文件关联的组。由于我要同时更改用户和组为`maggie`，我可以省略第二个`maggie`，只需在冒号后面跟着第一个`maggie`，我将获得相同的结果：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To just change the group association without changing the user, just list the
    group name, preceded by a colon:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 只需更改组关联而不更改用户，只需列出组名称，前面加上冒号：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, to just change the user without changing the group, list the username
    without the trailing colon:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，只需更改用户而不更改组，列出用户名而不带冒号：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These commands work the same way on a directory as they do on a file. But,
    if you want to also change the ownership and/or the group association of the contents
    of a directory, while also making the change on the directory itself, use the
    `-R` option, which stands for *recursive*. In this case, I just want to change
    the group for the `perm_demo_dir` directory to `accounting`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在目录上的工作方式与在文件上的工作方式相同。但是，如果您还想更改目录的内容的所有权和/或组关联，同时也在目录本身上进行更改，请使用`-R`选项，表示*递归*。在这种情况下，我只想将`perm_demo_dir`目录的组更改为`会计`：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And, that's all there is to `chown`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`chown`的全部内容。
- en: Using chmod to set permissions values on files and directories
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用chmod在文件和目录上设置权限值
- en: 'On Unix and Linux systems, you would use the `chmod` utility to set permissions
    values on files and directories. You can set permissions for the user of the file
    or directory, the group that''s associated with the file or directory, and others.
    The three basic permissions are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix和Linux系统上，您将使用`chmod`实用程序在文件和目录上设置权限值。您可以为文件或目录的用户、与文件或目录关联的组以及其他人设置权限。三个基本权限是：
- en: '`r`: This indicates a read permission.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：这表示读取权限。'
- en: '`w`: This is for a write permission.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w`：这是写入权限。'
- en: '`x`: This is the executable permission. You can apply it to any type of program
    file, or to directories. If you apply an executable permission to a directory,
    authorized people will be able to `cd` into it.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：这是可执行权限。您可以将其应用于任何类型的程序文件，或者目录。如果您将可执行权限应用于目录，授权的用户将能够`cd`进入它。'
- en: 'Do an `ls -l` on a file, and you''ll see something like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对文件和目录进行`ls -l`，您会看到类似以下内容：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first character of this line indicates the type of file. In this case,
    we see a dash, which indicates a regular file. (A regular file is pretty much
    every type of file that a normal user would be able to access in his or her daily
    routine.) The next three characters, `rw-`, indicate that the file has read and
    write permissions for the user, which is the person who owns the file. We then
    see `rw-` permissions for the group, and `r--` permissions for others. A program
    file would also have the executable permissions set:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行的第一个字符表示文件的类型。在这种情况下，我们看到一个破折号，表示一个普通文件。（普通文件基本上是普通用户在日常例行工作中能够访问的各种类型的文件。）接下来的三个字符`rw-`表示该文件对用户（即文件所有者）具有读取和写入权限。然后我们看到组的`rw-`权限，以及其他人的`r--`权限。程序文件还会设置可执行权限：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we see that the `xargs` program file has executable permissions set for
    everybody.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到`xargs`程序文件为所有人设置了可执行权限。
- en: 'There are two ways that you can use `chmod` to change permissions settings:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用`chmod`来更改权限设置：
- en: The symbolic method
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号方法
- en: The numerical method
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字方法
- en: Setting permissions with the symbolic method
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用符号方法设置权限
- en: 'Whenever you create a file as a normal user, by default, it will have read
    and write permissions for the user and the group, and read permissions for others.
    If you create a program file, you have to add the executable permissions yourself.
    With the symbolic method, you could use one of the following commands to do so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您以普通用户身份创建文件时，默认情况下，它将对用户和组具有读取和写入权限，并对其他人具有只读权限。如果您创建一个程序文件，您必须自己添加可执行权限。使用符号方法，您可以使用以下命令之一来执行此操作：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first three commands add the executable permission for the user, the group,
    and others. The fourth command adds executable permissions for both the user and
    the group, and the last command adds executable permissions for everybody (`a`
    for all). You could also remove the executable permissions by replacing the `+`
    with a `-`. And, you can also add or remove the read or write permissions, as
    appropriate.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个命令为用户、组和其他人添加可执行权限。第四个命令为用户和组添加可执行权限，最后一个命令为所有人（`a`代表所有人）添加可执行权限。您也可以通过用`-`替换`+`来删除可执行权限。并且，您也可以根据需要添加或删除读取或写入权限。
- en: While this method can be handy at times, it also has a bit of a flaw. That is,
    it can only add permissions to what's already there, or remove permissions from
    what's already there. If you need to ensure that all of the permissions for a
    particular file get set to a certain value, the symbolic method can get a bit
    unwieldy. And for shell scripting, forget about it. In a shell script, you'd need
    to add all kinds of extra code just to determine which permissions are already
    set. The numerical method can vastly simplify things for us.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法有时很方便，但它也有一点缺陷。也就是说，它只能添加已有权限，或者删除已有权限。如果您需要确保特定文件的所有权限都设置为特定值，符号方法可能会变得有些难以掌握。而对于shell脚本来说，更是如此。在shell脚本中，您需要添加各种额外的代码来确定已设置了哪些权限。数字方法可以极大地简化我们的工作。
- en: Setting permissions with the numerical method
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数字方法设置权限
- en: 'With the numerical method, you''ll use an octal value to represent the permissions
    settings on a file or directory. To the `r`, `w`, and `x` permissions, you assign
    the numerical values `4`, `2`, and `1`, respectively. Do this for the user, group,
    and others positions, and add them all up to get the permissions value for the
    file or directory:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数字方法，您将使用八进制值来表示文件或目录的权限设置。对于`r`、`w`和`x`权限，分别分配数字值`4`、`2`和`1`。对用户、组和其他人的位置进行此操作，然后将它们相加以获得文件或目录的权限值：
- en: '| **User** | **Group** | **Others** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **用户** | **组** | **其他人** |'
- en: '| `rwx` | `rwx` | `rwx` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `rwx` | `rwx` | `rwx` |'
- en: '| `421` | `421` | `421` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `421` | `421` | `421` |'
- en: '| `7` | `7` | `7` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `7` | `7` | `7` |'
- en: 'So, if you have all the permissions set for everybody, the file or directory
    will have a value of `777`. If I were to create a shell script file, by default, it
    would have the standard `664` permissions, meaning read and write for the user
    and group, and read-only for others:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您为所有人设置了所有权限，文件或目录的值将为`777`。如果我要创建一个shell脚本文件，默认情况下，它将具有标准的`664`权限，即用户和组具有读取和写入权限，其他人只有只读权限：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you create a file with root privileges, either with sudo or from the root
    user command prompt, you'll see that the default permissions setting is the more
    restrictive `644`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以root权限创建文件，无论是使用sudo还是从root用户命令提示符，您会发现默认权限设置更为严格，为`644`。
- en: 'Let''s say that I want to make this script executable, but I want to be the
    only person in the whole world who can do anything with it. I could do:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想要使这个脚本文件可执行，但我希望是全世界唯一可以对其进行任何操作的人。我可以这样做：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this one simple command, I've removed all permissions from the group and
    from others, and set the executable permission for myself. This is the sort of
    thing that makes the numerical method so handy for writing shell scripts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简单的命令，我已经从组和其他人那里删除了所有权限，并为自己设置了可执行权限。这就是数字方法在编写shell脚本时如此方便的地方。
- en: 'Once you''ve been working with the numerical method for a while, looking at
    a file and figuring out its numerical permissions value will become second nature.
    In the meantime, you can use `stat` with the `-c %a` option to show you the values.
    For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您使用数字方法一段时间后，查看文件并确定其数字权限值将变得轻车熟路。与此同时，您可以使用带有`-c %a`选项的`stat`来显示这些值。例如：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using SUID and SGID on regular files
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SUID和SGID设置普通文件的权限
- en: When a regular file has its SUID permission set, whoever accesses the file will
    have the same privileges as the user of the file. When the SGID permission is
    set on a regular file, whoever accesses the file will have the same privileges
    as the group that's associated with the file. This is especially useful on program
    files.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当普通文件设置了SUID权限时，访问该文件的人将具有与文件所有者相同的权限。当普通文件设置了SGID权限时，访问该文件的人将具有与文件关联的组相同的权限。这在程序文件上特别有用。
- en: 'To demo this, let''s say that Maggie, a regular, unprivileged user, wants to
    change her own password. Since it''s her own password, she would just use the
    one-word command, `passwd`, without using `sudo`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们假设Maggie，一个普通的、没有特权的用户，想要更改自己的密码。因为这是她自己的密码，她只需使用单词命令`passwd`，而不使用`sudo`：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To change a password, a person has to make changes to the `/etc/shadow` file.
    On my CentOS machine, the shadow file permissions look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改密码，一个人必须对`/etc/shadow`文件进行更改。在我的CentOS机器上，shadow文件的权限看起来像这样：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On the Ubuntu machine, they look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu机器上，它们看起来像这样：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Either way, the permissions settings don''t allow Maggie to modify the shadow
    file. Yet, by changing her password, she is able to modify the shadow file. So,
    what''s going on? To answer this, let''s go into the `/usr/bin` directory and
    look at the permissions settings for the `passwd` executable file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，权限设置不允许Maggie修改shadow文件。然而，通过更改她的密码，她可以修改shadow文件。那么，到底发生了什么？为了回答这个问题，让我们进入`/usr/bin`目录，查看`passwd`可执行文件的权限设置：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For the user permissions, you see `rws` instead of `rwx`. The `s` indicates
    that this file has the SUID permission set. Since the file belongs to the root
    user, anyone who accesses this file has the same privileges as the root user.
    The fact that we see a lower-case `s` means that the file also has the executable
    permission set for the root user. Since the root user is allowed to modify the
    shadow file, whoever uses this `passwd` utility to change his or her own password
    can also modify the shadow file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户权限，您会看到`rws`而不是`rwx`。`s`表示该文件设置了SUID权限。由于该文件属于root用户，访问该文件的任何人都具有与root用户相同的权限。我们看到小写`s`意味着该文件也为root用户设置了可执行权限。由于root用户被允许修改shadow文件，使用`passwd`实用程序来更改自己的密码的人也可以修改shadow文件。
- en: 'A file with the SGID permission set has an `s` in the executable position for
    the group:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了SGID权限的文件在组的可执行位置上有一个`s`：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `write` utility, which is associated with the `tty` group, allows users
    to send messages to other users via their command-line consoles. Having `tty`
    group privileges allows users to do this.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与`tty`组关联的`write`实用程序允许用户通过他们的命令行控制台向其他用户发送消息。拥有`tty`组权限允许用户这样做。
- en: The security implications of the SUID and SGID permissions
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SUID和SGID权限的安全影响
- en: As useful as it may be to have SUID or SGID permissions on your executable files,
    we should consider it as just a necessary evil. While having SUID or SGID set
    on certain operating system files is essential to the proper operation of your
    Linux system, it becomes a security risk when users set SUID or SGID on other
    files. The problem is that, if intruders find an executable file that belongs
    to the root user and has the SUID bit set, they can use that to exploit the system.
    Before they leave, they might leave behind their own root-owned file with SUID
    set, which will allow them to easily gain entry into the system the next time.
    If the intruder's SUID file isn't found, the intruder will still have access,
    even if the original problem is fixed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在可执行文件上设置SUID或SGID权限可能很有用，但我们应该将其视为必要的恶。虽然在某些操作系统文件上设置SUID或SGID对于Linux系统的正常运行至关重要，但当用户在其他文件上设置SUID或SGID时，它就成为了安全风险。问题在于，如果入侵者找到了属于root用户并设置了SUID位的可执行文件，他们可以利用它来攻击系统。在离开之前，他们可能会留下自己的属于root的文件，并设置SUID位，这将使他们很容易地在下次进入系统。如果找不到入侵者的SUID文件，即使原始问题得到解决，入侵者仍将有访问权限。
- en: The numerical value for SUID is `4000`, and for SGID it's `2000`. To set SUID
    on a file, you'd just add `4000` to whichever permissions value that you would
    set otherwise. For example, if you have a file with a permissions value of `755`,
    you'd set SUID by changing the permissions value to `4755`. (This would give you
    read/write/execute for the user, read/execute for the group, and read/execute
    for others, with the SUID bit added on.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: SUID的数字值为`4000`，SGID的数字值为`2000`。要在文件上设置SUID，您只需将`4000`添加到您否则设置的权限值中。例如，如果您有一个权限值为`755`的文件，您可以通过将权限值更改为`4755`来设置SUID。（这将为用户提供读/写/执行权限，为组提供读/执行权限，为其他用户提供读/执行权限，并添加SUID位。）
- en: Finding spurious SUID or SGID files
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找虚假的SUID或SGID文件
- en: 'One quick security trick is to run a `find` command to take inventory of the
    SUID and SGID files on your system. You could save the output to a text file,
    so that you can verify whether anything got added the next time you run the command.
    Your command would look something like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速的安全技巧是运行`find`命令来清点系统上的SUID和SGID文件。您可以将输出保存到文本文件中，以便在下次运行命令时验证是否添加了任何内容。您的命令看起来会像这样：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s the breakdown:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是分解：
- en: '`/`: We''re searching through the entire filesystem. Since some directories
    are only accessible to someone with root privileges, we need to use `sudo`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`：我们正在搜索整个文件系统。由于某些目录只能由具有root权限的用户访问，我们需要使用`sudo`。'
- en: '`-type f`: This means that we''re searching for regular files, which would
    include executable program files and shell scripts.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-type f`：这意味着我们正在搜索常规文件，这将包括可执行程序文件和shell脚本。'
- en: '`-perm 4000`: We''re searching for files with the `4000`, or SUID, permission
    bit set.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-perm 4000`：我们正在搜索具有`4000`或SUID权限位设置的文件。'
- en: '`-o`: The or operator.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`：或操作符。'
- en: '`-perm 2000`: We''re searching for files with the `2000`, or SGID, permission
    bit set.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-perm 2000`：我们正在搜索具有`2000`或SGID权限位设置的文件。'
- en: '`>`: And, of course, we''re redirecting the output into the `suid_sgid_files.txt`
    text file with the `>` operator.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>`：当然，我们正在使用`>`操作符将输出重定向到`suid_sgid_files.txt`文本文件中。'
- en: 'Note that the two `-perm` items need to be combined into a term that''s enclosed
    in a pair of parentheses. In order to prevent the Bash shell from interpreting
    the parenthesis characters incorrectly, we need to escape each one with a backslash.
    We also need to place a blank space between the first parenthesis character and
    the first `-perm`, and another between the `2000` and the last backslash. Also,
    the and operator between the `-type f` and the `-perm` term is understood to be
    there, even without inserting `-a`. The text file that you create should look
    something like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两个`-perm`项需要合并为一个用一对括号括起来的术语。为了防止Bash shell错误解释括号字符，我们需要用反斜杠对每个括号进行转义。我们还需要在第一个括号字符和第一个`-perm`之间以及`2000`和最后一个反斜杠之间放置一个空格。此外，`-type
    f`和`-perm`术语之间的and运算符被理解为存在，即使没有插入`-a`。您创建的文本文件应该看起来像这样：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Optionally, if you want to see details about which files are SUID and which
    are SGID, you can add in the `-ls` option:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看哪些文件是SUID和哪些是SGID的详细信息，可以添加`-ls`选项：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, let''s say that Maggie, for whatever reason, decides to set the SUID bit
    on a shell script file in her home directory:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设Maggie出于任何原因，决定在她的主目录中的一个shell脚本文件上设置SUID位：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the `find` command again, saving the output to a different text file. Then,
    do a `diff` operation on the two files to see what changed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`find`命令，将输出保存到另一个文本文件中。然后，对两个文件进行`diff`操作，查看发生了什么变化：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The only difference is the addition of Maggie's shell script file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是添加了Maggie的shell脚本文件。
- en: Hands-on lab – searching for SUID and SGID files
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实验-搜索SUID和SGID文件
- en: 'You can do this lab on either of your virtual machines. You''ll save the output
    of the `find` command to a text file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在您的任一虚拟机上进行此实验。您将把`find`命令的输出保存到一个文本文件中：
- en: 'Search through the entire filesystem for all files that have either SUID or
    SGID set, saving the output to a text file:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在整个文件系统中搜索所有具有SUID或SGID设置的文件，将输出保存到一个文本文件中：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Log into any other user account that you have on the system, and create a dummy
    shell script file. Then, set the SUID permission on that file, and log back out
    into your own user account:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到系统上的任何其他用户帐户，并创建一个虚拟shell脚本文件。然后，在该文件上设置SUID权限，并注销到您自己的用户帐户：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `find` command again, saving the output to a different text file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`find`命令，将输出保存到另一个文本文件中：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'View the difference between the two files:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看两个文件之间的区别：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: End of lab.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Preventing SUID and SGID usage on a partition
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止在分区上使用SUID和SGID
- en: 'As we said before, you don''t want users to assign SUID and SGID to files that
    they create, because of the security risk that it presents. You can prevent SUID
    and SGID usage on a partition by mounting it with the `nosuid` option. So, the
    `/etc/fstab` file entry for the `luks` partition that I created in the previous
    chapter would look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，您不希望用户对他们创建的文件分配SUID和SGID，因为这会带来安全风险。您可以通过使用`nosuid`选项来阻止在分区上使用SUID和SGID。因此，我在上一章中创建的`luks`分区的`/etc/fstab`文件条目将如下所示：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Different Linux distributions have different ways of setting up default partition
    schemes during an operating system installation. Mostly, the default way of doing
    business is to have all directories, except for the `/boot` directory, under the
    `/` partition. If you were to set up a custom partition scheme instead, you could
    have the `/home` directory on its own partition, where you could set the `nosuid`
    option. Keep in mind, you don't want to set `nosuid` for the `/` partition, or
    else you'll have an operating system that doesn't function properly.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的Linux发行版在操作系统安装期间设置默认分区方案的方式不同。大多数情况下，业务的默认方式是将除`/boot`目录之外的所有目录都放在`/`分区下。如果您要设置自定义分区方案，可以将`/home`目录放在自己的分区上，并在那里设置`nosuid`选项。请记住，您不希望为`/`分区设置`nosuid`，否则您将得到一个无法正常运行的操作系统。
- en: Using extended file attributes to protect sensitive files
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用扩展文件属性保护敏感文件
- en: Extended file attributes are another tool for helping you to protect sensitive
    files. They won't keep intruders from accessing your files, but they can help
    you prevent sensitive files from being altered or deleted. There are quite a few
    extended attributes, but we only need to look at the ones that deal with file
    security.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展文件属性是帮助您保护敏感文件的另一个工具。它们不会阻止入侵者访问您的文件，但它们可以帮助您防止敏感文件被更改或删除。有很多扩展属性，但我们只需要查看与文件安全有关的属性。
- en: 'First, let''s do an `lsattr` command to see which extended attributes you already
    have set. On the CentOS machine, your output would look something like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们执行`lsattr`命令，查看您已经设置的扩展属性。在CentOS机器上，您的输出看起来会像这样：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: So, as yet, I don't have any extended attributes set on any of my files.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我的任何文件上都没有设置扩展属性。
- en: 'On the Ubuntu machine, the output would look more like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu机器上，输出看起来会更像这样：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We won't worry about that `e` attribute, because that only means that the partition
    is formatted with the ext4 filesystem. CentOS doesn't have that attribute set,
    because its partition is formatted with the XFS filesystem.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不用担心`e`属性，因为那只意味着分区是用ext4文件系统格式化的。CentOS没有设置该属性，因为其分区是用XFS文件系统格式化的。
- en: 'The two attributes that we''ll look at are:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看的两个属性是：
- en: '`a`: You can append text to the end of a file that has this attribute, but
    you can''t overwrite it. Only someone with proper sudo privileges can set or delete
    this attribute.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`：您可以将文本附加到具有此属性的文件的末尾，但不能覆盖它。只有具有适当sudo特权的人才能设置或删除此属性。'
- en: '`i`: This makes a file immutable, and only someone with proper sudo privileges
    can set or delete it. Files with this attribute can''t be deleted or changed in
    any way. It''s also not possible to create hard links to files that have this
    attribute.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`：这使文件不可变，只有具有适当sudo特权的人才能设置或删除它。具有此属性的文件无法被删除或以任何方式更改。也不可能创建具有此属性的文件的硬链接。'
- en: To set or delete attributes, you'll use the `chattr` command. You can set more
    than one attribute on a file, but only when it makes sense. For example, you wouldn't
    set both the `a` and the `i` attributes on the same file, because the `i` will
    override the `a`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置或删除属性，您将使用`chattr`命令。您可以在文件上设置多个属性，但只有在有意义的情况下才能这样做。例如，您不会在同一个文件上同时设置`a`和`i`属性，因为`i`会覆盖`a`。
- en: 'Let''s start by creating the `perm_demo.txt` file with this text:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建带有这个文本的`perm_demo.txt`文件：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Setting the a attribute
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置`a`属性
- en: 'I''ll now set the `a` attribute:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将设置`a`属性：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You'll use a `+` to add an attribute, and a `-` to delete it. Also, it doesn't
    matter that the file does belong to me, and is in my own home directory. I still
    need sudo privileges to add or delete this attribute.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用`+`来添加属性，使用`-`来删除属性。此外，文件属于我，位于我的家目录中也无关紧要。我仍然需要sudo权限来添加或删除此属性。
- en: 'Now, let''s see what happens when I try to overwrite this file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当我尝试覆盖这个文件时会发生什么：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With or without `sudo` privileges, I can't overwrite it. So, how about if I
    try to append something to it?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是否具有`sudo`权限，我都无法覆盖它。那么，如果我尝试向其追加一些内容呢？
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There''s no error message this time. Let''s see what''s now in the file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这次没有错误消息。让我们看看文件中现在有什么：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In addition to not being able to overwrite the file, I''m also unable to delete
    it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了无法覆盖文件之外，我也无法删除它：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So, the `a` works. But, I''ve decided that I no longer want this attribute
    set, so I''ll remove it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`a`有效。但是，我决定不再设置这个属性，所以我会将其删除：
- en: '[PRE34]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Setting the i attribute
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置`i`属性
- en: 'When a file has the `i` attribute set, the only thing you can do with it is
    view its contents. You can''t change it, move it, delete it, rename it, or create
    hard links to it. Let''s test this with the `perm_demo.txt` file:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件设置了`i`属性时，您唯一能做的事情就是查看其内容。您不能更改它，移动它，删除它，重命名它，或者创建硬链接到它。让我们用`perm_demo.txt`文件来测试一下：
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, for the fun part:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，到有趣的部分：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'There are a few more commands that I could try, but you get the idea. To remove
    the `i` attribute, I''ll do:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些命令我可以尝试，但您已经明白了。要删除`i`属性，我会执行：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Hands-on lab – setting security-related extended file attributes
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实验 - 设置与安全相关的扩展文件属性
- en: 'For this lab, you''ll create a `perm_demo.txt` file with the text of your own
    choosing. You''ll set the `i` and `a` attributes, and view the results:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，您将创建一个带有您自己选择的文本的`perm_demo.txt`文件。您将设置`i`和`a`属性，并查看结果：
- en: Using your preferred text editor, create the `perm_demo.txt` file with a line
    of text.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器，创建带有一行文本的`perm_demo.txt`文件。
- en: 'View the extended attributes of the file:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看文件的扩展属性：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the `a` attribute:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`a`属性：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Try to overwrite and delete the file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试覆盖和删除文件：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, append something to the file:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向文件追加一些内容：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Remove the `a` attribute, and add the `i` attribute:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`a`属性，并添加`i`属性：
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Repeat Step 4.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复第4步。
- en: 'Additionally, try to change the filename and to create a hard link to the file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，尝试更改文件名并创建文件的硬链接：
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, try to create a symbolic link to the file:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试创建文件的符号链接：
- en: '[PRE44]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note that the `i` attribute won't let you create hard links to a file, but it
    will let you create symbolic links.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`i`属性不允许您创建文件的硬链接，但它将允许您创建符号链接。
- en: End of lab.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed the basics of setting ownership and permissions
    for files and directories. We then covered what SUID and SGID can do for us when
    used properly, and the risk of setting them on our own executable files. Finally,
    we completed this roundup by looking at the two extended file attributes that
    deal with file security.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了为文件和目录设置所有权和权限的基础知识。然后，我们介绍了当正确使用时SUID和SGID可以为我们做什么，以及在我们自己的可执行文件上设置它们的风险。最后，我们通过查看处理文件安全的两个扩展文件属性来完成了这一系列。
- en: In the next chapter, we'll extend what we've learned here to more advanced file
    and directory access techniques. I'll see you there.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把我们在这里学到的知识扩展到更高级的文件和目录访问技术。我会在那里见到你。
