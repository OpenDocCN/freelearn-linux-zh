- en: '*Chapter 14*: Honeypot Services on Linux'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：Linux上的蜜罐服务'
- en: In this chapter, we'll be discussing honeypots – fake services that you can
    deploy to collect attacker activity with a false positive rate of just about zero.
    We'll discuss various architectures and placement options, as well as the risks
    of deploying honeypots. A few different honeypot architectures will be discussed
    as well. This chapter should start you on the path of implementing various "deception"
    approaches on the network to distract and delay your attackers and provide very
    high-fidelity logs of attacker activity with almost no false positives.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论蜜罐 - 您可以部署以收集攻击者活动的虚假服务，其误报率几乎为零。我们将讨论各种架构和放置选项，以及部署蜜罐的风险。还将讨论几种不同的蜜罐架构。本章应该让您开始实施各种网络上的“欺骗”方法，以分散和延迟攻击者，并提供几乎没有误报的攻击者活动的高保真日志。
- en: 'In this chapter, we''ll look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Honeypot overview – what is a honeypot, and why do I want one?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜜罐概述 - 什么是蜜罐，我为什么要一个？
- en: Deployment scenarios and architecture – where do I put a honeypot?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署方案和架构 - 我应该把蜜罐放在哪里？
- en: Risks of deploying honeypots
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署蜜罐的风险
- en: Example honeypots
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例蜜罐
- en: Distributed/community honeypot – the Internet Storm Center's DShield Honeypot
    Project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布/社区蜜罐 - 互联网风暴中心的DShield蜜罐项目
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All of the honeypot options discussed in this chapter can be deployed directly
    on the example Linux host that we've been using throughout this book, or on a
    copy of that host VM. The final example honeypot from the Internet Storm Center
    might be one that you choose to put on a different, dedicated host. In particular,
    if you plan to put this service on the internet, I'd suggest a dedicated host
    that you can delete at any time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的所有蜜罐选项都可以直接部署在本书中一直使用的示例Linux主机上，或者在该主机VM的副本上。来自互联网风暴中心的最终示例蜜罐可能是您选择放在不同的专用主机上的蜜罐。特别是，如果您计划将此服务放在互联网上，我建议您选择一个可以随时删除的专用主机。
- en: Honeypot overview – what is a honeypot, and why do I want one?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蜜罐概述 - 什么是蜜罐，我为什么要一个？
- en: A honeypot server is essentially a fake server – something that presents itself
    as a *real* server of one type or another, but has no data or function behind
    it, other than logging and alerting on any connection activity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 蜜罐服务器本质上是一个假服务器 - 一种呈现为*真实*服务器的东西，但除了记录和警报任何连接活动之外，没有任何数据或功能。
- en: Why would you want something like this? Remember in [*Chapter 13*](B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236),
    *Intrusion Prevention Systems on Linux*, when we were dealing with false positive
    alerts? These are alerts that report an attack but are actually triggered by normal
    activity. Well, honeypots generally only send what you could call "high fidelity"
    alerts. If a honeypot triggers, it's either because of real attacker behavior,
    or misconfiguration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么您想要这样的东西？还记得[*第13章*]（B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236）中的*Linux上的入侵防范系统*，当我们处理误报警报时吗？这些警报报告了一次攻击，但实际上是由正常活动触发的。嗯，蜜罐通常只发送您可以称之为“高保真”警报。如果蜜罐触发了，要么是因为真正的攻击者行为，要么是配置错误。
- en: For instance, you might have a honeypot SQL server up in your server's VLAN.
    This server would be listening on port `1433/tcp` (SQL) and possibly also on `3389/tcp`
    (Remote Desktop). Since it's not an actual SQL server, it should never (ever)
    see a connection on either port. If it does see a connection, either it's someone
    poking around on the network where they likely shouldn't be, or it's a valid attack.
    FYI – a penetration test will almost always trigger honeypots very soon in the
    project, as they scan various subnets for common services.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能在服务器的VLAN中设置了一个蜜罐SQL服务器。该服务器将在端口`1433/tcp`（SQL）上进行监听，可能还会在端口`3389/tcp`（远程桌面）上进行监听。由于它不是一个真正的SQL服务器，它不应该（绝对不应该）在任何一个端口上看到连接。如果它确实看到了连接，要么是有人在网络上进行了不应该进行的探测，要么是一个有效的攻击。顺便说一句
    - 渗透测试几乎总是会很快触发蜜罐，因为它们会扫描各种子网以寻找常见服务。
- en: 'That being said, in many attacks, you only have a short window to isolate and
    evict your attacker before irreparable harm is done. Can a honeypot help with
    that? The short answer is yes, absolutely. Honeypots take several forms:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，在许多攻击中，您只有很短的时间来隔离和驱逐攻击者，以免造成不可挽回的损害。蜜罐能帮上忙吗？简短的答案是肯定的。蜜罐有几种形式：
- en: '![](img/B16336_14_Table_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_14_Table_01.jpg)'
- en: These scenarios typically apply to internal honeypots, and attackers that are
    already on your network. The attacker in these situations has compromised one
    or more hosts on your network and is trying to move "up the food chain" to more
    valuable hosts and services (and data). In these situations, you have some level
    of control of the attacker's platform – if it's a compromised host you can take
    it offline and rebuild it, or if it's the attacker's physical host (after a wireless
    network compromise, for instance), you can kick them off your network and remediate
    their access method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些情景通常适用于内部蜜罐和已经在您网络上的攻击者。在这些情况下，攻击者已经侵入了您网络上的一个或多个主机，并试图向更有价值的主机和服务（以及数据）“攀升”。在这些情况下，您对攻击者的平台有一定程度的控制
    - 如果是一个受损的主机，您可以将其脱机并重建，或者如果是攻击者的物理主机（例如在无线网络受损后），您可以将其踢出网络并修复其访问方法。
- en: Another scenario entirely is for research. For instance, you might put a honeypot
    web server on the public internet to monitor the trends in various attacks. These
    trends are often the first indicator to the security community that a new vulnerability
    exists – we'll see attackers trying to take advantage of a web service vulnerability
    on a particular platform, something we haven't seen "in the wild" before. Or you
    might see attacks against authentication services for web or SSH servers using
    new accounts, which might indicate a new strain of malware or possibly that some
    new service has experienced a breach involving their subscribers' credentials.
    So, in this case, we're not protecting our network but monitoring for new hostile
    activity that can be used to protect everyone's network.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个完全不同的场景是用于研究。例如，您可以在公共互联网上放置一个蜜罐Web服务器，以监视各种攻击的趋势。这些趋势通常是安全社区的第一个指标，表明存在新的漏洞
    - 我们将看到攻击者试图利用特定平台上的Web服务漏洞，这是我们以前从未见过的。或者您可能会看到针对Web或SSH服务器的身份验证服务的攻击，使用新帐户，这可能表明出现了新的恶意软件或者可能是某个新服务遭受了涉及其订户凭据的违规行为。因此，在这种情况下，我们不是在保护我们的网络，而是在监视可以用来保护每个人网络的新的敌对活动。
- en: Honeypots don't stop with network services. It's becoming more common to see
    data and credentials being used in the same way. For instance, you might have
    files with "attractive" names that trigger an alert when they are opened – this
    might indicate that you have an internal attacker (be sure to log the IP address
    and userid of course). Or you may have "dummy" accounts in the system that trigger
    if access to them is attempted – these might again be used to find out when an
    attacker is inside the environment. Or you might "watermark" key data, so that
    if it is ever seen outside of your environment, you would know that your organization
    had been breached. All of these take advantage of the same mindset – having a
    set of high fidelity alerts that trigger when an attacker accesses an attractive
    server, account, or even an attractive file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 蜜罐并不仅限于网络服务。越来越常见的是以相同的方式使用数据和凭据。例如，您可能有一些具有“吸引人”名称的文件，当它们被打开时会触发警报 - 这可能表明您有内部攻击者（当然要记录IP地址和用户ID）。或者您可能在系统中有“虚拟”帐户，如果尝试访问它们，则会触发警报
    - 这些可能再次用于发现攻击者何时进入环境。或者您可能会对关键数据进行“水印”，以便如果它在您的环境之外被看到，您将知道您的组织已经遭到入侵。所有这些都利用了相同的思维方式
    - 拥有一组高保真度的警报，当攻击者访问吸引人的服务器、帐户甚至吸引人的文件时触发。
- en: Now that you know what a honeypot server is and why you might want one, let's
    explore a bit further to see where in your network you might choose to put one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道了什么是蜜罐服务器以及为什么您可能需要一个，让我们进一步探讨一下，在您的网络中您可能选择放置一个蜜罐。
- en: Deployment scenarios and architecture – where do I put a honeypot?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署场景和架构 - 我应该把蜜罐放在哪里？
- en: A great use of honeypots on an internal network is to simply monitor for connection
    requests to ports that are commonly attacked. In a typical organization's internal
    network, there is a short list of ports that an attacker might scan for in their
    first "let's explore the network" set of scans. If you see a connection request
    to any of these on a server that isn't legitimately hosting that service, that's
    a very high fidelity alert! This pretty positively indicates malicious activity!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部网络上使用蜜罐的一个很好的用途是简单地监视常常受到攻击的端口的连接请求。在典型组织的内部网络中，攻击者可能会在他们的第一组“让我们探索网络”的扫描中扫描一小部分端口。如果您看到对不正当托管该服务的服务器的任何这些连接请求，那就是一个非常高保真度的警报！这几乎可以肯定地表明存在恶意活动！
- en: 'What ports might you watch for? A reasonable start list might include:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能要观察哪些端口？一个合理的起始列表可能包括：
- en: '![](img/B16336_14_Table_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_14_Table_03.jpg)'
- en: The list of course goes on and on – it's very common to tailor your honeypot
    services to reflect the actual services running in your environment. For instance,
    a manufacturing facility or public utility might stand up honeypots masquerading
    as **Supervisory Control and Data Acquisition** (**SCADA**) or **Industrial Control
    System** (**ICS**) services.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，列表还在继续 - 非常常见的是根据您的环境中实际运行的服务来定制您的蜜罐服务。例如，制造工厂或公用事业设施可能会建立伪装为**监控和数据采集**（**SCADA**）或**工业控制系统**（**ICS**）服务的蜜罐。
- en: From our list, if you were trying to emulate a SQL server to your attacker,
    you might have your honeypot listening on TCP ports `445` and `1433`. What you
    don't want to do is to listen on too many ports. If you have a server listening
    on all of the ports in the preceding table for instance, that immediately telegraphs
    to your attacker that "this is a honeypot," since those ports would almost never
    occur on a single production host. It also tells your attacker to modify their
    attack, since now they know you have honeypots, and presumably that you are monitoring
    honeypot activity.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的列表中，如果您试图向攻击者模拟SQL服务器，您可能会让您的蜜罐监听TCP端口`445`和`1433`。您不希望监听太多端口。例如，如果您的服务器监听了上表中的所有端口，那么这立即向您的攻击者传达了“这是一个蜜罐”的信息，因为这些端口几乎不会同时出现在单个生产主机上。这也告诉您的攻击者修改他们的攻击方式，因为现在他们知道您有蜜罐，并且可能正在监视蜜罐活动。
- en: So, where should we put honeypots? In days past, having a honeypot server was
    more of a "sport" for system administrators with an interest in security, and
    they would put SSH honeypots on the internet just to see what people would do.
    Those days are gone now, and anything placed directly on the internet will see
    several attacks per day – or per hour or per minute, depending on what kind of
    organization they are and what services are being presented.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该把蜜罐放在哪里？过去，拥有蜜罐服务器更多是系统管理员对安全感兴趣的“运动”，他们会在互联网上放置SSH蜜罐，只是为了看看人们会做什么。这些日子已经过去了，现在直接放在互联网上的任何东西都会每天
    - 或每小时或每分钟，取决于他们是什么类型的组织以及提供了什么服务 - 见到几次攻击。
- en: 'Where do we see honeypots in a modern network? You might put one in a DMZ:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网络中我们在哪里看到蜜罐？您可能会在DMZ中放置一个。
- en: '![Figure 14.1 – Honeypots in a DMZ](img/B16336_14_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – 在DMZ中的蜜罐](img/B16336_14_001.jpg)'
- en: Figure 14.1 – Honeypots in a DMZ
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 - DMZ中的蜜罐
- en: 'This however simply detects internet attacks, which is of limited usefulness
    – attacks from the internet are pretty much continuous, as we discussed in [*Chapter
    13*](B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236), *Intrusion Prevention Systems
    on Linux*. More commonly, we''ll see honeypots on internal subnets:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是简单地检测互联网攻击，其用处有限 - 互联网攻击几乎是持续不断的，正如我们在[*第13章*]（B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236）中讨论的那样，*Linux上的入侵防范系统*。更常见的是，我们会在内部子网上看到蜜罐：
- en: '![Figure 14.2 – Honeypots on the internal network](img/B16336_14_002.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2 - 内部网络中的蜜罐](img/B16336_14_002.jpg)'
- en: Figure 14.2 – Honeypots on the internal network
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 - 内部网络中的蜜罐
- en: This approach is a great way to detect internal attacks with almost 100% fidelity.
    Any internal scans that you do on an ad hoc or scheduled basis will of course
    get detected, but aside from those, all detections from these honeypots should
    be legitimate attacks, or at least activity worth investigating.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是几乎100%准确地检测内部攻击的好方法。您在临时或定期基础上进行的任何内部扫描当然都会被检测到，但除此之外，这些蜜罐的所有检测应该都是合法的攻击，或者至少值得调查的活动。
- en: Research honeypots on the public internet allow the collection of trends in
    various attacks. In addition, these will usually also allow you to compare your
    profile of attacks against the consolidated attack data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 公共互联网上的研究蜜罐允许收集各种攻击趋势。此外，这些通常还允许您将您的攻击概况与综合攻击数据进行比较。
- en: '![Figure 14.3 – "Research" honeypots on the public internet](img/B16336_14_003.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3 - 公共互联网上的“研究”蜜罐](img/B16336_14_003.jpg)'
- en: Figure 14.3 – "Research" honeypots on the public internet
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 - 公共互联网上的“研究”蜜罐
- en: Now that we have an idea the various architectures involved in deploying several
    types of honeypots, and why we might want or need one, what are the risks involved
    in deploying "deception hosts" of these types?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了部署各种类型的蜜罐所涉及的各种架构，以及为什么我们可能希望或需要其中之一，那么在部署这些类型的“欺骗主机”时涉及哪些风险呢？
- en: Risks of deploying honeypots
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署蜜罐的风险
- en: 'It''s common sense that since honeypots are there to detect attackers, it is
    certainly possible to see them be successfully attacked and compromised. In particular,
    the last example where you are exposing services to the internet is a fairly risky
    game. If an attacker should compromise your honeypot, not only do they have a
    foothold in your network, but they now have control over the alerts being sent
    by that honeypot, which you likely depend on to detect attacks. That being said,
    it''s wise to always plan for a compromise, and have mitigations at the ready:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，蜜罐的作用是检测攻击者，因此很可能会看到它们被成功攻击和 compromise。特别是最后一个例子，您将服务暴露给互联网是一个相当冒险的游戏。如果攻击者成功攻击了您的蜜罐，他们不仅可以在您的网络中立足，而且现在可以控制该蜜罐发送的警报，而您很可能依赖这些警报来检测攻击。也就是说，明智的做法是始终计划妥协，并随时准备好应对措施：
- en: If your honeypot faces the public internet, place it in a DMZ such that there
    is no access from that segment to any of your other production hosts.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的蜜罐面向公共互联网，请将其放置在DMZ中，以确保该段对您其他生产主机没有访问权限。
- en: If your honeypot is in your internal network, you might still want to place
    it in a DMZ with NAT entries to make it appear to be in the internal network.
    Alternatively, a **private VLAN** (**PVLAN**) can work well for this placement.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的蜜罐位于内部网络中，您可能仍希望将其放置在DMZ中，并进行NAT条目，使其看起来像是在内部网络中。或者，**私有VLAN**（PVLAN）也可以很好地适用于此位置。
- en: Only allow the outbound activity that you desire to see from the honeypot service.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只允许蜜罐服务所需的出站活动。
- en: Image your honeypot so that if you need to recover it from scratch you are doing
    so from a known good image, rather than re-installing Linux and so on from scratch.
    Taking advantage of virtualization can be a big help here – recovering a honeypot
    server should take only minutes or seconds.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对蜜罐进行镜像，以便如果需要从头开始恢复它，您是从已知的良好镜像中进行恢复，而不是从头重新安装Linux等。利用虚拟化在这里可以帮助很大 - 恢复蜜罐服务器应该只需要几分钟或几秒钟。
- en: Log all honeypot activity to a central location. This is a given, as over time
    you will find that you will likely end up with several of these deployed in various
    situations. Central logging allows you to configure central alerting, all off
    of the hosts that your attacker may end up compromising. Refer to [*Chapter 12*](B16336_12_Final_NM_ePub.xhtml#_idTextAnchor216),
    *Network Monitoring Using Linux*, for approaches for central logging, and securing
    those log servers.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有蜜罐活动记录到一个中央位置。随着时间的推移，您可能会发现您可能会在各种情况下部署多个蜜罐。中央日志记录允许您配置中央警报，所有这些都是您的攻击者可能最终会妥协的主机。有关中央日志记录的方法和保护这些日志服务器，请参阅[*第12章*]（B16336_12_Final_NM_ePub.xhtml#_idTextAnchor216），*使用Linux进行网络监控*。
- en: Rotate your honeypot images regularly – other than local logs, there shouldn't
    be any long-term data of note in the honeypot itself, so if you have good host
    recovery mechanisms, it's smart to automate a re-image of your honeypots at regular
    intervals.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期轮换蜜罐镜像 - 除了本地日志之外，蜜罐本身不应该有任何长期的值得注意的数据，因此如果您有良好的主机恢复机制，自动定期重新映像您的蜜罐是明智的选择。
- en: With the architecture and this warning in mind, let's discuss some common honeypot
    types, starting with a basic port alerting approach.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑架构和这个警告的基础上，让我们讨论一些常见的蜜罐类型，从基本的端口警报方法开始。
- en: Example honeypots
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例蜜罐
- en: 'In this section, we''ll discuss building and deploying various honeypot solutions.
    We''ll cover how to build them, where you might want to place them, and why. We''ll
    focus on the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论构建和部署各种蜜罐解决方案。我们将介绍如何构建它们，您可能希望将它们放置在何处以及原因。我们将重点讨论以下内容：
- en: Basic "TCP port" honeypots, where we alert on attacker port scans and attempted
    connections to our various services. We'll discuss these both as alerts with no
    open ports (so the attacker doesn't know they tripped an alarm), and as actual
    open-port services that will slow your attacker down.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的“TCP端口”蜜罐，我们会对攻击者的端口扫描和对我们各种服务的连接尝试进行警报。我们将讨论这些警报，没有开放端口（因此攻击者不知道他们触发了警报），以及作为实际开放端口服务，这将减慢攻击者的速度。
- en: Pre-built honeypot applications, both open source and commercial.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预先构建的蜜罐应用程序，包括开源和商业应用。
- en: The Internet Storm Center's DShield Honeypot, which is both distributed and
    internet-based.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网风暴中心的DShield蜜罐，既分布式又基于互联网。
- en: Let's get to it, starting with a few different approaches to standing up "open
    port" honeypot hosts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，首先尝试几种不同的方法来建立“开放端口”蜜罐主机。
- en: Basic port alerting honeypots – iptables, netcat, and portspoof
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的端口警报蜜罐-iptables、netcat和portspoof
- en: Basic port connection requests are easy to catch in Linux, you don't even need
    a listening port! So not only are you going to catch malicious hosts on your internal
    network, but they don't see any open ports at all, so have no indication that
    you have them "on film."
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，基本的端口连接请求很容易捕捉到，甚至不需要一个监听端口！因此，不仅可以在内部网络上捕捉到恶意主机，而且它们根本看不到任何开放的端口，因此无法得知你已经“拍摄”了它们。
- en: 'To do this, we''ll use `iptables` to watch for connection requests on any given
    port, then log them when they occur. This command will monitor for connection
    requests (`SYN` packet) to port `8888/tcp`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用`iptables`来监视任何给定端口的连接请求，然后在发生时记录它们。这个命令将监视对端口`8888/tcp`的连接请求（`SYN`数据包）：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can easily test this with `nmap` (from a remote machine) – note that the
    port is in fact closed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地使用`nmap`（从远程机器）来测试这一点-请注意端口实际上是关闭的：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we can check the logs:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以检查日志：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Referring to [*Chapter 12*](B16336_12_Final_NM_ePub.xhtml#_idTextAnchor216),
    *Network Monitoring Using Linux*, from here it's easy to log to a remote syslog
    server and alert on any occurrence of the word `HONEYPOT`. We can extend this
    model to include any number of interesting ports.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[*第12章*](B16336_12_Final_NM_ePub.xhtml#_idTextAnchor216)，*使用Linux进行网络监控*，从这里开始很容易记录到远程syslog服务器并对任何出现`HONEYPOT`一词的情况进行警报。我们可以扩展这个模型，包括任意数量的有趣端口。
- en: 'If you want the port open and alerting, you can do that with `netcat` – you
    could even "fancy it up" by adding banners:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要打开端口并进行警报，你可以使用`netcat`来做到这一点-甚至可以通过添加横幅来“装饰”它：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Because we''re listening on arbitrary ports, you''ll want to run this script
    with root privileges. Also note that if you want a specific banner (for instance,
    RDP for port `3389/tcp` or ICA for `1494/tcp`), you''d create those banner files
    with the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在监听任意端口，所以你需要以root权限运行这个脚本。还要注意，如果你想要一个特定的横幅（例如，端口`3389/tcp`的RDP或`1494/tcp`的ICA），你需要创建这些横幅文件，命令如下：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The log file will look like the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件将如下所示：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A better approach would be to use an actual package that someone maintains,
    something that will listen on multiple ports. You can code something up quick
    in Python that listens on specific ports, then logs an alert for every connection.
    Or you can take advantage of the good work of other people who've already done
    this, and also done the debugging so you don't have to!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是使用一个由某人维护的实际软件包，可以监听多个端口。你可以在Python中快速编写监听特定端口的代码，然后为每个连接记录一个警报。或者你可以利用其他人已经完成的工作，也已经进行了调试，这样你就不必自己动手了！
- en: Portspoof is one such app – you can find this at [https://github.com/drk1wi/portspoof](https://github.com/drk1wi/portspoof).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Portspoof就是这样一个应用程序-你可以在[https://github.com/drk1wi/portspoof](https://github.com/drk1wi/portspoof)找到它。
- en: 'Portspoof uses an "old-school" Linux install; that is, change your directory
    to the `portspoof` download directory, then execute following commands in sequence:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Portspoof使用的是“老派”Linux安装；也就是说，将你的目录更改为`portspoof`下载目录，然后按顺序执行以下命令：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This installs Portspoof into `/usr/local/bin`, with the configuration files
    in `/usr/local/etc`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把Portspoof安装到`/usr/local/bin`，配置文件在`/usr/local/etc`。
- en: Take a look at `/usr/local/etc/portspoof.conf` using `more` or `less` – you'll
    find that it's well commented and easy to modify to match your needs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`/usr/local/etc/portspoof.conf`，使用`more`或`less`-你会发现它有很好的注释，并且很容易修改以满足你的需求。
- en: 'By default, this tool is ready to use immediately after installation. Let''s
    first redirect all the ports we want to listen on using `iptables`, and point
    them to port `4444/tcp`, which is the default port for `portspoof`. Note that
    you''ll need `sudo` rights to make this `iptables` command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个工具在安装后立即可以使用。首先，我们将使用`iptables`重定向我们想要监听的所有端口，并将它们指向`4444/tcp`端口，这是`portspoof`的默认端口。请注意，你需要`sudo`权限来执行这个`iptables`命令：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, simply run `portspoof`, using the default signatures and configuration:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需运行`portspoof`，使用默认的签名和配置：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we''ll scan a few redirected ports, a few that are redirected and a few
    that aren''t – note that we''re collecting the service "banners" using `banner.nse`,
    and `portspoof` has some banners preconfigured for us:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将扫描一些重定向的端口，一些是重定向的，一些不是-请注意我们正在使用`banner.nse`收集服务“横幅”，而`portspoof`已经为我们预先配置了一些横幅。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Back on the `portspoof` screen, we''ll see the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`portspoof`屏幕，我们会看到以下内容：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also grab the `portspoof` entries out of syslog. The information is
    the same, but the timestamp is formatted in ASCII instead of "seconds since the
    start of the epoch":'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从syslog中获取`portspoof`的条目。信息是一样的，但时间戳是以ASCII格式而不是“自纪元开始以来的秒数”格式：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, if it''s time to tear down `portspoof`, you''ll want to remove those
    NAT entries we put in, putting your Linux host back to its original handling of
    those ports:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果是时候关闭`portspoof`，你需要删除我们放入的NAT条目，将你的Linux主机恢复到对这些端口的原始处理方式。
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: But what if we want something more complex? We can certainly make our home-built
    honeypot more and more complex and realistic to an attacker, or we can purchase
    a more complete offering, with full reporting and support offerings.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们想要更复杂的东西呢？我们当然可以使我们自己构建的蜜罐变得越来越复杂和逼真，以欺骗攻击者，或者我们可以购买更完整的产品，提供完整的报告和支持。
- en: Other common honeypots
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他常见的蜜罐
- en: On the public side of things, you can use **Cowrie** ([https://github.com/cowrie/cowrie](https://github.com/cowrie/cowrie)),
    which is an SSH honeypot maintained by *Michel Oosterhof*. This can be configured
    to behave like a real host – the object of the game of course is to waste the
    time of the attacker to give you time to evict them from your network. Along the
    way, you can get some gauge of their skill level, and also often get an indication
    of what they're actually trying to accomplish in their attack.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共方面，您可以使用**Cowrie** ([https://github.com/cowrie/cowrie](https://github.com/cowrie/cowrie))，这是由*Michel
    Oosterhof*维护的SSH蜜罐。这可以配置成像一个真实的主机 - 当然，游戏的目标是浪费攻击者的时间，以便让您有时间将他们从您的网络中驱逐出去。在这个过程中，您可以了解到他们的技能水平，并且通常可以得知他们在攻击中实际试图达到的目标。
- en: '**WebLabyrinth** ([https://github.com/mayhemiclabs/weblabyrinth](https://github.com/mayhemiclabs/weblabyrinth))
    by *Ben Jackson* presents a never-ending series of web pages to act as a "tarpit"
    for web scanners. Again, the goals are the same – waste the time of the attacker,
    and gain as much intelligence about them as possible during the attack.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebLabyrinth** ([https://github.com/mayhemiclabs/weblabyrinth](https://github.com/mayhemiclabs/weblabyrinth))
    由*Ben Jackson*提供了一个永无止境的网页系列，用作Web扫描器的“粘陷”。再次强调目标是一样的 - 浪费攻击者的时间，并在攻击过程中尽可能多地获取有关他们的情报。'
- en: '**Thinkst Canary** ([https://canary.tools/](https://canary.tools/) and [https://thinkst.com/](https://thinkst.com/))
    is a commercial solution and is extremely thorough in the detail and completeness
    it offers. In fact, the level of detail in this product allows you to stand up
    an entire "decoy data center" or "decoy factory." Not only does it allow you to
    fool the attacker, often the deception is to the level that they think they are
    actually progressing through a production environment.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thinkst Canary** ([https://canary.tools/](https://canary.tools/) and [https://thinkst.com/](https://thinkst.com/))
    是一种商业解决方案，在提供的细节和完整性方面非常彻底。事实上，该产品的详细程度允许您建立一个完整的“诱饵数据中心”或“诱饵工厂”。它不仅可以让您愚弄攻击者，而且往往欺骗到了他们认为他们实际上正在通过生产环境进行进展的程度。'
- en: Let's move out of the internal network and the associated internal and DMZ honeypots
    and look at the research-oriented honeypots.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们离开内部网络和相关的内部和DMZ蜜罐，看看面向研究的蜜罐。
- en: Distributed/community honeypot – the Internet Storm Center's DShield Honeypot
    Project
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布/社区蜜罐 - 互联网风暴中心的DShield蜜罐项目
- en: 'First, get the current date and time from your host. Any activity that''s heavily
    dependent on logs needs accurate time:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从您的主机获取当前日期和时间。任何严重依赖日志的活动都需要准确的时间：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If your date/time is off or isn't configured reliably, you'll want to fix that
    before you start – this is true of almost any service in any operating system.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的日期/时间不准确或配置不可靠，您将希望在开始之前修复它 - 这对于任何操作系统中的任何服务都是真实的。
- en: 'Now, change to an installation directory, then download the app using `git`.
    If you don''t have `git`, use the standard `sudo apt-get install git` that we''ve
    used throughout this book to get it. Once `git` is installed, this command will
    create a `dshield` directory under the current working directory:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到一个安装目录，然后使用`git`下载应用程序。如果您没有`git`，请使用本书中一直使用的标准`sudo apt-get install git`来获取它。一旦安装了`git`，这个命令将在当前工作目录下创建一个`dshield`目录：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, run the `install` script:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行`install`脚本：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Along the way, there will be several input screens. We''ll cover some of the
    key ones here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，会有几个输入屏幕。我们将在这里介绍一些关键的屏幕：
- en: First, we have the standard warning that honeypot logs will of course contain
    sensitive information, both from your environment and about the attacker:![](img/B16336_14_004.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们有一个标准警告，即蜜罐日志当然会包含敏感信息，既来自您的环境，也来自攻击者！[](img/B16336_14_004.jpg)
- en: Figure 14.4 – Warning about sensitive information
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 - 关于敏感信息的警告
- en: The next installation screen seems to indicate that this is installing on the
    Raspberry Pi platform. Don't worry, while this is a very common platform for this
    firewall, it will install on most common Linux distributions.![Figure 14.5 – Second
    warning about installation and support](img/B16336_14_005.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个安装屏幕似乎表明这是在Raspberry Pi平台上安装。不用担心，虽然这是这个防火墙的一个非常常见的平台，但它也可以安装在大多数常见的Linux发行版上。![图14.5
    - 关于安装和支持的第二个警告](img/B16336_14_005.jpg)
- en: Figure 14.5 – Second warning about installation and support
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 - 关于安装和支持的第二个警告
- en: Next, we get yet another warning, indicating that your collected data will become
    part of a larger dataset that is the Internet Storm Center's DShield project.
    Your data does get anonymized when it's consolidated into the larger dataset,
    but if your organization isn't prepared to share security data, then this type
    of project might not be right for you:![Figure 14.6 – Third installation warning
    about data sharing](img/B16336_14_006.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们得到另一个警告，表明您收集的数据将成为互联网风暴中心的DShield项目的一部分。当它被合并到更大的数据集中时，您的数据会被匿名化，但如果您的组织没有准备好共享安全数据，那么这种类型的项目可能不适合您：![图14.6
    - 关于数据共享的第三次安装警告](img/B16336_14_006.jpg)
- en: Figure 14.6 – Third installation warning about data sharing
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 - 关于数据共享的第三次安装警告
- en: You'll be asked if you want to enable automatic updates. The default here is
    to enable these – only disable them if you have a really good reason to.![Figure
    14.7 – Installation pick for updates](img/B16336_14_007.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被问及是否要启用自动更新。这里的默认设置是启用这些更新 - 只有在您有一个非常好的理由时才禁用它们。![图14.7 - 更新的安装选择](img/B16336_14_007.jpg)
- en: Figure 14.7 – Installation pick for updates
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 - 更新的安装选择
- en: You'll be asked for your email address and API key. This is used for the data
    submission process. You can get your API key by logging into the [https://isc.sans.edu](https://isc.sans.edu)
    site and viewing your account status:![Figure 14.8 – Credential inputs for uploading
    data](img/B16336_14_008.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求输入您的电子邮件地址和API密钥。这用于数据提交过程。您可以通过登录[https://isc.sans.edu](https://isc.sans.edu)网站并查看您的账户状态来获取API密钥：图14.8
    - 上传数据的凭据输入
- en: Figure 14.8 – Credential inputs for uploading data
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 - 上传数据的凭据输入
- en: You'll also be asked which interface you want the honeypot to listen on. In
    these cases, normally there is only one interface – you definitely don't want
    your honeypot to bypass your firewall controls!![Figure 14.9 – Interface selection](img/B16336_14_009.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还将被问及您希望蜜罐监听哪个接口。在这些情况下，通常只有一个接口 - 您绝对不希望您的蜜罐绕过防火墙控制！图14.9 - 接口选择
- en: Figure 14.9 – Interface selection
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9 - 接口选择
- en: The certificate information for your HTTPS honeypot gets inputted – if you want
    your sensor to be somewhat anonymous to your attacker, you might choose to put
    bogus information into these fields. In this example, we're showing mostly legitimate
    information. Note that the HTTPS honeypot is not yet implemented at the time of
    this writing, but it is in the planning stages.![Figure 14.10 – Certificate information](img/B16336_14_010.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求输入HTTPS蜜罐的证书信息 - 如果您希望您的传感器对攻击者来说有些匿名性，您可能会选择在这些字段中输入虚假信息。在这个例子中，我们展示了大部分合法的信息。请注意，此时HTTPS蜜罐尚未实施，但正在规划阶段。图14.10
    - 证书信息
- en: .
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: Figure 14.10 – Certificate information
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10 - 证书信息
- en: You'll be asked if you want to install a **Certificate Authority** (**CA**).
    In most cases, choosing **Yes** here makes sense – this will install a self-signed
    certificate on the HTTPS service.![Figure 14.11 – Is a CA required?](img/B16336_14_011.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被问及是否要安装**证书颁发机构**（**CA**）。在大多数情况下，在这里选择**是**是有意义的 - 这将在HTTPS服务上安装自签名证书。图14.11
    - 是否需要CA？
- en: Figure 14.11 – Is a CA required?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.11 - 是否需要CA？
- en: The final screen reboots the host and informs you that your actual SSH service
    will be changing to a different port.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终屏幕重新启动主机，并通知您实际的SSH服务将更改到不同的端口。
- en: '![Figure 14.12 – Final installation screen](img/B16336_14_012.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: 图14.12 - 最终安装屏幕
- en: Figure 14.12 – Final installation screen
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.12 - 最终安装屏幕
- en: 'After the reboot, check the honeypot status. Note that the sensor is installed
    in `/srv/dshield`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 重启后，检查蜜罐的状态。请注意，传感器安装在`/srv/dshield`中：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Also, to ensure that your reports are being submitted, after an hour or two
    check [https://isc.sans.edu/myreports.html](https://isc.sans.edu/myreports.html)
    (you'll need to log in).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了确保您的报告已提交，一两个小时后请检查[https://isc.sans.edu/myreports.html](https://isc.sans.edu/myreports.html)（您需要登录）。
- en: 'The error that shows in the status check is that this host is not on the internet
    yet – that will be our next step. In my case, I''ll be placing it in a DMZ, with
    inbound access only to ports `22/tcp`, `80/tcp`, and `443/tcp`. After making this
    change, our status check now passes:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 状态检查中显示的错误是此主机尚未连接到互联网 - 这将是我们的下一步。在我的情况下，我将把它放在一个DMZ中，只允许对端口`22/tcp`，`80/tcp`和`443/tcp`进行入站访问。做出这些更改后，我们的状态检查现在通过了：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When a browser is directed to the honeypot''s address, this is what they''ll
    see:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器指向蜜罐的地址时，他们将看到这个：
- en: '![Figure 14.13 – ISC web honeypot as seen from a browser](img/B16336_14_013.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: 图14.13 - 从浏览器中看到的ISC网络蜜罐
- en: Figure 14.13 – ISC web honeypot as seen from a browser
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.13 - 从浏览器中看到的ISC网络蜜罐
- en: 'On the honeypot server itself, you can see the various login sessions as attackers
    gain access to the fake SSH and Telnet servers. At `/srv/cowrie/var/log/cowrie`,
    the files are `cowrie.json` and `cowrie.log` (along with dated versions from previous
    days):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在蜜罐服务器本身上，您可以看到各种登录会话，攻击者可以访问假的SSH和Telnet服务器。在`/srv/cowrie/var/log/cowrie`中，文件是`cowrie.json`和`cowrie.log`（以及以前几天的日期版本）：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `JSON` file of course is formatted for you to consume with code. For instance,
    a Python script might take the information and feed it to a SIEM or another "next-stage"
    defense tool.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`JSON`文件是为您编写代码而格式化的。例如，Python脚本可能会获取这些信息并将其提供给SIEM或其他"下一阶段"的防御工具。
- en: The text file however is easily readable – you can open it with `more` or `less`
    (two of the common text-viewing applications in Linux). Let's look at a few log
    entries of interest.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，文本文件很容易阅读 - 您可以使用`more`或`less`（Linux中常见的两个文本查看应用程序）打开它。让我们看一些有趣的日志条目。
- en: 'Starting a new session is shown in the following code block – note that the
    protocol and the source IP are both in the log entry. In the SSH session, you''ll
    also see all of the various SSH encryption parameters in the log:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了启动新会话 - 请注意日志条目中的协议和源IP。在SSH会话中，您还将在日志中看到各种SSH加密参数：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can also look for commands that the various attackers try to run. In these
    examples, they are trying to download additional Linux tools, since the honeypot
    seems to be missing some, or possibly some malware to run persistently:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查找各种攻击者尝试运行的命令。在这些示例中，他们试图下载额外的Linux工具，因为蜜罐似乎缺少一些工具，或者可能是一些恶意软件以持续运行：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that the first attacker is sending an ASCII string at the end in hexadecimal,
    `'\x63\x6F\x6E\x6E\x65\x63\x74\x65\x64'`, which translates to "connected." This
    is possibly to evade an IPS. Base64 encoding is another common evasion technique
    that you'll see in honeypot logs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个攻击者在最后发送了一个ASCII字符串，以十六进制表示为`'\x63\x6F\x6E\x6E\x65\x63\x74\x65\x64'`，这意味着"connected"。这可能是为了规避入侵防御系统。Base64编码是另一种常见的规避技术，在蜜罐日志中也会看到。
- en: The second attacker has a series of `rm` commands, to clean up their various
    work files after they've accomplished their goals.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个攻击者有一系列`rm`命令，用于在完成目标后清理他们的各种工作文件。
- en: Note that another thing that you'll likely see in SSH logs is syntax errors.
    Often these are from poorly tested scripts, but once sessions are established
    more frequently, you'll see a real human driving the keyboard, so you'll have
    some indication of their skill level (or how late at night it is in their time
    zone) from any errors.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您在SSH日志中可能会看到的另一件事是语法错误。通常这些错误来自未经充分测试的脚本，但一旦会话更频繁地建立，您将看到真正的人在键盘上操作，因此您将从任何错误中得到一些关于他们的技能水平（或者他们所在时区的深夜程度）的指示。
- en: 'In these next examples, the attackers are trying to download cryptocurrency
    miner applications to add their newly compromised Linux host into their cryptocurrency
    mining "farm":'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的例子中，攻击者试图下载加密货币挖矿应用程序，将他们新受损的Linux主机添加到他们的加密货币挖矿“农场”中：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note that they both add a `history –c` addendum to their commands, which clears
    the interactive history of the current session, to hide the attacker's activity.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，他们都在他们的命令中添加了一个`history –c`附录，用于清除当前会话的交互式历史记录，以隐藏攻击者的活动。
- en: 'In this example, the attacker is trying to add a malware download into the
    Linux scheduler cron, so that they can maintain persistence – if their malware
    is ever terminated or removed, it''ll just be re-downloaded and re-installed when
    the next scheduled task comes around:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，攻击者试图将恶意软件下载添加到Linux调度程序cron中，以便他们可以保持持久性 - 如果他们的恶意软件被终止或删除，它将在下一个计划任务到来时重新下载并重新安装：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The various files that attackers try to download are collected in the `/srv/cowrie/var/lib/cowrie/downloads`
    directory.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者试图下载的各种文件都被收集在`/srv/cowrie/var/lib/cowrie/downloads`目录中。
- en: 'You can customize the Cowrie honeypot – some common changes you might make
    are located at the following places:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自定义Cowrie诱饵 - 您可能会进行的一些常见更改位于以下位置：
- en: '![](img/B16336_14_Table_04.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_14_Table_04.jpg)'
- en: 'What''s left? Simply check your ISC account online – links that will be of
    interest to you are located under **My Account**:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 还有什么？只需在线检查您的ISC账户 - 您可能会感兴趣的链接位于**我的账户**下：
- en: '![Figure 14.14 – ISC honeypot – online reports](img/B16336_14_014.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图14.14 – ISC诱饵 – 在线报告](img/B16336_14_014.jpg)'
- en: Figure 14.14 – ISC honeypot – online reports
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.14 – ISC诱饵 – 在线报告
- en: 'Let''s discuss each of these options in a bit more detail:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微详细讨论一下这些选项：
- en: '![](img/B16336_14_Table_05.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_14_Table_05.jpg)'
- en: 'Online, the SSH activity against your honeypot is summarized in the ISC portal
    under **My SSH reports**:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在线，针对您的诱饵的SSH活动在ISC门户网站下的**我的SSH报告**中进行了总结：
- en: '![Figure 14.15 – SSH honeypot reports](img/B16336_14_015.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图14.15 – SSH诱饵报告](img/B16336_14_015.jpg)'
- en: Figure 14.15 – SSH honeypot reports
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.15 – SSH诱饵报告
- en: 'Currently, the main report for the SSH consolidated data involves the user
    IDs and passwords used:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，SSH汇总数据的主要报告涉及使用的用户ID和密码：
- en: '![Figure 14.16 – ISC SSH report – Consolidated userids and passwords seen](img/B16336_14_016.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图14.16 – ISC SSH报告 – 观察到的用户ID和密码](img/B16336_14_016.jpg)'
- en: Figure 14.16 – ISC SSH report – Consolidated userids and passwords seen
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.16 – ISC SSH报告 – 观察到的用户ID和密码
- en: All activity is logged though, so we do see research projects against this attack
    data from time to time, and the various reports are being refined as time goes
    on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 所有活动都被记录下来，因此我们确实会不时地看到针对这些攻击数据的研究项目，并且各种报告随着时间的推移而得到完善。
- en: The web honeypot has similar configurations to the SSH honeypot. The detections
    for various attacks are updated in the `/srv/www/etc/signatures.xml` file. These
    are updated periodically from the central server at the Internet Storm Center,
    so while you can make local edits yourself, these changes are likely to get "clobbered"
    on the next update.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Web诱饵与SSH诱饵有类似的配置。各种攻击的检测在`/srv/www/etc/signatures.xml`文件中更新。这些定期从互联网风暴中心的中央服务器更新，所以虽然您可以自己进行本地编辑，但这些更改很可能会在下一次更新时被“覆盖”。
- en: Web activity against the honeypot is all logged too, of course. Local logs are
    in the `/srv/www/DB/webserver.sqlite` database (in SQLite format). Local logs
    can also be found in `/var/log/syslog` by grepping for the `webpy` string.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对诱饵的Web活动也都被记录下来。本地日志存储在`/srv/www/DB/webserver.sqlite`数据库中（以SQLite格式）。本地日志也可以在`/var/log/syslog`中通过搜索`webpy`字符串找到。
- en: 'Various things that were detected in the example honeypot include the following
    attacker, who is looking for HNAP services. HNAP is an often-attacked protocol
    and is usually used to control fleets of ISP modems ([https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)),
    so an HNAP compromise can often lead to compromising a large number of devices:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例诱饵中检测到的各种事物包括以下攻击者，他正在寻找HNAP服务。HNAP是一个经常受到攻击的协议，通常用于控制ISP调制解调器的车队（[https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)），因此HNAP的妥协通常会导致大量设备的妥协：
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The same attacker is also probing for `goform/webLogin`. In this example, they
    are testing for a recent vulnerability on common Linksys routers:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个攻击者还在探测`goform/webLogin`。在这个例子中，他们正在测试常见Linksys路由器上的最新漏洞：
- en: '[PRE24]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This attacker is looking for the `boa` web server. This web server has a few
    known vulnerabilities, and is used by several different manufacturers of internet-attached
    security cameras ([https://isc.sans.edu/diary/Pentesters+%28and+Attackers%29+Love+Internet+Connected+Security+Cameras%21/21231](https://isc.sans.edu/diary/Pentesters+%28and+Attackers%29+Love+Internet+Connected+Security+Cameras%21/21231)).
    Unfortunately, the `boa` web server project has been abandoned, so no fixes will
    be forthcoming:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个攻击者正在寻找`boa`网络服务器。这个网络服务器有一些已知的漏洞，并且被几个不同的互联网安全摄像头制造商使用（[https://isc.sans.edu/diary/Pentesters+%28and+Attackers%29+Love+Internet+Connected+Security+Cameras%21/21231](https://isc.sans.edu/diary/Pentesters+%28and+Attackers%29+Love+Internet+Connected+Security+Cameras%21/21231)）。不幸的是，`boa`网络服务器项目已经被放弃，所以不会有修复措施：
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'These activity reports are similarly logged in your ISC portal, under **My
    404 Reports** – let''s look at a few. This attacker is looking for Netgear routers,
    likely looking for any number of recent vulnerabilities:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这些活动报告也会被记录在您的ISC门户下的**我的404报告**中 – 让我们看一些。这个攻击者正在寻找Netgear路由器，很可能是在寻找最近的任何漏洞：
- en: '![Figure 14.17 – ISC 404 report – Attacker looking for vulnerable Netgear services](img/B16336_14_017.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图14.17 – ISC 404报告 – 攻击者正在寻找易受攻击的Netgear服务](img/B16336_14_017.jpg)'
- en: Figure 14.17 – ISC 404 report – Attacker looking for vulnerable Netgear services
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.17 – ISC 404报告 – 攻击者正在寻找易受攻击的Netgear服务
- en: 'This one is looking for `phpmyadmin`, which is a common web administration
    portal for the MySQL database:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个攻击者正在寻找`phpmyadmin`，这是MySQL数据库的常见Web管理门户：
- en: '![Figure 14.18 – ISC 404 report – Attacker looking for vulnerable MySQL web
    portals](img/B16336_14_018.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图14.18 – ISC 404报告 – 攻击者正在寻找易受攻击的MySQL Web门户](img/B16336_14_018.jpg)'
- en: Figure 14.18 – ISC 404 report – Attacker looking for vulnerable MySQL web portals
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.18 – ISC 404报告 – 攻击者正在寻找易受攻击的MySQL Web门户
- en: Note that the first example does not have a User-Agent string, so this is likely
    an automated scanner. The second example does have a User-Agent string, but in
    all honesty that's likely just camouflage; it's probably also an automated scanner
    looking for public vulnerabilities to exploit.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个例子没有用户代理字符串，因此这很可能是一个自动扫描程序。第二个例子有用户代理字符串，但老实说这很可能只是伪装；它很可能也是一个自动扫描程序，寻找公共漏洞以利用。
- en: You should now have a good understanding of what the main honeypot types are,
    why you might prefer one over the other for any particular situation, and how
    to build each one.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该对主要蜜罐类型有很好的理解，为什么您可能更喜欢其中一种而不是另一种，以及如何构建每一种蜜罐。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This wraps up our discussion of honeypots, network-based methods of deceiving
    and delaying an attacker, and sending alerts to the defender as the attacks progress.
    You should have a good understanding of each of the main types of honeypots, where
    you might best deploy each to attain your goals as a defender, how to build honeypots,
    and how to secure them. I hope you have a good grasp of the advantages of these
    approaches, and plan to deploy at least a few of them in your network!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对蜜罐的讨论，蜜罐是一种基于网络的欺骗和延迟攻击者的方法，并在攻击进行时向防御者发送警报。您应该对主要类型的蜜罐有很好的理解，以及在作为防御者时可能最好部署每种蜜罐以实现您的目标，如何构建蜜罐以及如何保护它们。我希望您对这些方法的优势有很好的把握，并计划在您的网络中至少部署其中一些！
- en: This is also the last chapter in this book, so congratulations on your perseverance!
    We've discussed deploying Linux in all kinds of ways in a data center, with a
    focus on how these approaches can help a network professional. In each section,
    we've tried to cover how to secure each service, or the security implications
    of deploying that service – often both. I hope this book has illustrated the advantages
    of using Linux for some or all of these uses in your own network, and that you'll
    be able to proceed to picking a distribution and start building!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是本书的最后一章，恭喜您的毅力！我们已经讨论了在数据中心以各种方式部署Linux，并重点介绍了这些方法如何帮助网络专业人员。在每个部分中，我们都试图涵盖如何保护每项服务，或者部署该服务的安全影响
    – 通常两者兼顾。我希望本书已经说明了在您自己的网络中为一些或所有这些用途使用Linux的优势，并且您将能够继续选择一个发行版并开始构建！
- en: Happy networking (with Linux of course)!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您网络愉快（当然要使用Linux）！
- en: Questions
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是一些问题列表，供您测试对本章材料的了解。您将在*附录*的*评估*部分找到答案：
- en: The documentation for `portspoof` uses an example where all 65,535 TCP ports
    are sent to the installed honeypot. Why is this a bad idea?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`portspoof`的文档使用了一个例子，其中所有65,535个TCP端口都发送到安装的蜜罐。为什么这是一个坏主意？'
- en: Which port combination might you enable to masquerade as a Windows **Active
    Directory** (**AD**) domain controller?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能启用哪种端口组合来伪装为Windows **Active Directory** (**AD**)域控制器？
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more on the subject, check out the following resources:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息，请查看以下资源：
- en: 'Portspoof examples: [https://adhdproject.github.io/#!Tools/Annoyance/Portspoof.md](https://adhdproject.github.io/#!Tools/Annoyance/Portspoof.md)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Portspoof示例：[https://adhdproject.github.io/#!Tools/Annoyance/Portspoof.md](https://adhdproject.github.io/#!Tools/Annoyance/Portspoof.md)
- en: '[https://www.blackhillsinfosec.com/how-to-use-portspoof-cyber-deception/](https://www.blackhillsinfosec.com/how-to-use-portspoof-cyber-deception/)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.blackhillsinfosec.com/how-to-use-portspoof-cyber-deception/](https://www.blackhillsinfosec.com/how-to-use-portspoof-cyber-deception/)'
- en: 'LaBrea tarpit honeypot: [https://labrea.sourceforge.io/labrea-info.html](https://labrea.sourceforge.io/labrea-info.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LaBrea焦油坑蜜罐：[https://labrea.sourceforge.io/labrea-info.html](https://labrea.sourceforge.io/labrea-info.html)
- en: 'Configuring the Tarpit Honeypot in Microsoft Exchange: [https://social.technet.microsoft.com/wiki/contents/articles/52447.exchange-2016-set-the-tarpit-levels-with-powershell.aspx](https://social.technet.microsoft.com/wiki/contents/articles/52447.exchange-2016-set-the-tarpit-levels-with-powershell.aspx)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft Exchange中配置Tarpit蜜罐：[https://social.technet.microsoft.com/wiki/contents/articles/52447.exchange-2016-set-the-tarpit-levels-with-powershell.aspx](https://social.technet.microsoft.com/wiki/contents/articles/52447.exchange-2016-set-the-tarpit-levels-with-powershell.aspx)
- en: 'WebLabyrinth: [https://github.com/mayhemiclabs/weblabyrinth](https://github.com/mayhemiclabs/weblabyrinth)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebLabyrinth：[https://github.com/mayhemiclabs/weblabyrinth](https://github.com/mayhemiclabs/weblabyrinth)
- en: 'Thinkst Canary honeypot: [https://canary.tools/](https://canary.tools/)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thinkst Canary蜜罐：[https://canary.tools/](https://canary.tools/)
- en: 'The Internet Storm Center''s DShield Honeypot project: [https://isc.sans.edu/honeypot.html](https://isc.sans.edu/honeypot.html)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网风暴中心的DShield蜜罐项目：[https://isc.sans.edu/honeypot.html](https://isc.sans.edu/honeypot.html)
- en: '[https://github.com/DShield-ISC/dshield](https://github.com/DShield-ISC/dshield)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DShield-ISC/dshield](https://github.com/DShield-ISC/dshield)'
- en: 'Strand, J., Asadoorian, P., Donnelly, B., Robish, E., and Galbraith, B. (2017).
    *Offensive Countermeasures: The Art of Active Defense*. CreateSpace Independent
    Publishing.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 斯特兰德，J.，阿萨多里安，P.，唐纳利，B.，罗比什，E.和加尔布雷斯，B.（2017）。*攻击性对策：积极防御的艺术*。CreateSpace独立出版。
