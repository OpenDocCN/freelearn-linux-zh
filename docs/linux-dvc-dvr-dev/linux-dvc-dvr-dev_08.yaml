- en: SPI Device Drivers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPI设备驱动程序
- en: '**Serial Peripheral Interface** (**SPI** ) is a (at least) four-wire bus--**Master
    Input Slave Output** (**MISO** ), **Master Output Slave Input** (**MOSI** ), **Serial
    Clock** (**SCK** ), and **Chip Select** (**CS** ), which is used to connect a
    serial flash, AD/DA converter. The master always generates the clock. Its speed
    can reach up to 80 MHz, even if there is no real speed limitation (much faster
    than I2C as well). The same for the CS line, which is always managed by the master.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**串行外围接口**（**SPI**）是一个（至少）四线总线--**主输入从输出**（**MISO**），**主输出从输入**（**MOSI**），**串行时钟**（**SCK**）和**片选**（**CS**），用于连接串行闪存，AD/DA转换器。主机始终生成时钟。其速度可以达到80
    MHz，即使没有真正的速度限制（比I2C快得多）。CS线也是由主机管理的。'
- en: 'Each of these signal names has a synonym:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个信号名称都有一个同义词：
- en: Whenever you sees SIMO, SDI, DI, or SDA, they refer to MOSI.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当您看到SIMO，SDI，DI或SDA时，它们指的是MOSI。
- en: SOMI, SDO, DO, SDA will refer to MISO.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOMI，SDO，DO，SDA将指的是MISO。
- en: SCK, CLK, SCL will refer to SCK.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCK，CLK，SCL将指的是SCK。
- en: 'S̅ S̅ is the slave select line, also called CS. CSx can be used (where x is
    an index, CS0, CS1), EN and ENB too, meaning enable. The CS is usually an active
    low signal:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S̅ S̅是从选择线，也称为CS。可以使用CSx（其中x是索引，CS0，CS1），也可以使用EN和ENB，表示启用。CS通常是一个低电平有效的信号：
- en: '![](img/Image00013.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00013.jpg)'
- en: SPI topology (image from wikipedia)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SPI拓扑结构（来自维基百科的图片）
- en: 'This chapter will walk through SPI driver concepts such as:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍SPI驱动程序的概念，例如：
- en: SPI bus description
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI总线描述
- en: Driver architecture and data structure descriptions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 驱动程序架构和数据结构描述
- en: Data sending and receiving in both half and full duplex
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半双工和全双工中的数据发送和接收
- en: Declaring SPI devices from DT
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从DT声明SPI设备
- en: Accessing SPI devices from user space, in both half and full duplex
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户空间访问SPI设备，既可以进行半双工也可以进行全双工
- en: The driver architecture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序架构
- en: The required header for SPI stuff in the Linux kernel is `<linux/spi/spi.h>`
    . Before talking about the driver structure, let us see how SPI devices are defined
    in the kernel. An SPI device is represented in the kernel as an instance of `spi_device`
    . The instance of the driver that manages them is `struct spi_driver` structure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux内核中SPI的必需头文件是`<linux/spi/spi.h>`。在讨论驱动程序结构之前，让我们看看内核中如何定义SPI设备。在内核中，SPI设备表示为`spi_device`的实例。管理它们的驱动程序实例是`struct
    spi_driver`结构。
- en: The device structure
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备结构
- en: '`struct spi_device` structure represents an SPI device, and is defined in `include/linux/spi/spi.h`
    :'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct spi_device`结构表示一个SPI设备，并在`include/linux/spi/spi.h`中定义：'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some fields that are not meaningful for us have been removed. That says, the
    following is the meaning of elements in the structure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说没有意义的一些字段已被删除。也就是说，以下是结构中元素的含义：
- en: '`master` : This represents the SPI controller (bus) on which the device is
    connected.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master`：这代表SPI控制器（总线），设备连接在其上。'
- en: '`max_speed_hz` : This is the maximum clock rate to be used with this chip (on
    the current board); this parameter can be changed from within the driver. You
    can override that parameter using `spi_transfer.speed_hz` for each transfer. We
    will discuss SPI transfer later.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_speed_hz`：这是与芯片一起使用的最大时钟速率（在当前板上）；此参数可以从驱动程序内部更改。您可以使用每次传输的`spi_transfer.speed_hz`覆盖该参数。我们将在后面讨论SPI传输。'
- en: '`chip_select` : This lets you enable the chip you need to talk to, distinguishing
    chips handled by the master. The `chip_select` is active low by default. This
    behavior can be changed in mode, by adding the `SPI_CS_HIGH` flag.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chip_select`：这允许您启用需要通信的芯片，区分由主控制的芯片。`chip_select`默认为低电平有效。此行为可以通过在模式中添加`SPI_CS_HIGH`标志来更改。'
- en: '`mode` : This defines how data should be clocked. The device driver may change
    this. The data clocking is **Most Significant Bit** (**MSB** ) first, by default
    for each word in a transfer. This behavior can be overridden by specifying `SPI_LSB_FIRST`
    .'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`：这定义了数据应该如何进行时钟同步。设备驱动程序可以更改这个。默认情况下，每次传输中的每个字的数据同步是**最高有效位**（**MSB**）优先。可以通过指定`SPI_LSB_FIRST`来覆盖此行为。'
- en: '`irq` : This represents the interrupt number (registered as device resource
    in your board `init` file or through the DT) you should pass to `request_irq()`
    to receive interrupts from this device.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`irq`：这代表中断号（在您的板`init`文件或通过DT中注册为设备资源），您应该传递给`request_irq()`以从此设备接收中断。'
- en: 'A word about SPI modes; they are built using two characteristics:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于SPI模式的一点说明；它们是使用两个特征构建的：
- en: '`CPOL` : This is the initial clock polarity:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CPOL`：这是初始时钟极性：'
- en: '`0` : Initial clock state low, and the first edge is rising'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`：初始时钟状态为低，并且第一个边沿为上升'
- en: '`1` : Initial clock state high, and the first state is falling'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：初始时钟状态为高，并且第一个状态为下降'
- en: '`CPHA` : This is the clock phase, choosing at which edge the data will be sampled:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CPHA`：这是时钟相位，选择在哪个边沿对数据进行采样：'
- en: '`0` : Data latched at falling edge (high to low transition), whereas output
    changes at rising edge'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`：数据在下降沿（高到低转换）锁存，而输出在上升沿改变'
- en: '`1` : Data latched at rising edge (low to high transition), and output at falling
    edge'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：在上升沿（低到高转换）锁存的数据，并在下降沿输出'
- en: 'This allows for four SPI modes, which are defined in the kernel according to
    the following macro in `include/linux/spi/spi.h` :'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许根据`include/linux/spi/spi.h`中的以下宏在内核中定义四种SPI模式：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can then produce the following array to summarize things:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以生成以下数组来总结事情：
- en: '| **Mode** | **CPOL** | **CPHA** | **Kernel macro** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **模式** | **CPOL** | **CPHA** | **内核宏** |'
- en: '| 0 | 0 | 0 | `#define SPI_MODE_0 (0&#124;0)` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 | `#define SPI_MODE_0 (0&#124;0)` |'
- en: '| 1 | 0 | 1 | `#define SPI_MODE_1 (0&#124;SPI_CPHA)` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 | `#define SPI_MODE_1 (0&#124;SPI_CPHA)` |'
- en: '| 2 | 1 | 0 | `#define SPI_MODE_2 (SPI_CPOL&#124;0)` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1 | 0 | `#define SPI_MODE_2 (SPI_CPOL&#124;0)` |'
- en: '| 3 | 1 | 1 | `#define SPI_MODE_3 (SPI_CPOL&#124;SPI_CPHA)` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1 | 1 | `#define SPI_MODE_3 (SPI_CPOL&#124;SPI_CPHA)` |'
- en: 'The following is the representation of each SPI mode, as defined in the preceding
    array. That said, only the MOSI line is represented, but the principle is the
    same for MISO:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每种SPI模式的表示，如前述数组中定义的。也就是说，只有MOSI线被表示，但对于MISO原理是相同的。
- en: '![](img/Image00014.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00014.jpg)'
- en: Commonly used modes are `SPI_MODE_0` and `SPI_MODE_3` .
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 常用模式是`SPI_MODE_0`和`SPI_MODE_3`。
- en: spi_driver structure
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: spi_driver结构
- en: '`struct spi_driver` represents the driver you develop to manage your SPI device.
    Its structure is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct spi_driver`代表您开发的用于管理SPI设备的驱动程序。其结构如下：'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The probe() function
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: probe()功能
- en: 'Its prototype is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它的原型如下：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You may refer to [Chapter 7](text00189.html) , *I2C Client Drivers* in order
    to see what is to be done in a `probe` function. The same steps apply here. Therefore,
    unlike an I2C driver that has no capability to change the controller bus parameters
    (CS state, bit per word, clock) at runtime, an SPI driver can. You can set up
    the bus according to your device properties.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考[第7章]（text00189.html），*I2C客户端驱动程序*，以了解在“探测”功能中要做什么。相同的步骤也适用于这里。因此，与无法在运行时更改控制器总线参数（CS状态，每字位，时钟）的I2C驱动程序不同，SPI驱动程序可以。您可以根据设备属性设置总线。
- en: 'A typical SPI `probe` function would look like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的SPI“探测”功能如下所示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `struct spi_device*` is an input parameter, given to the `probe` function
    by the kernel. It represents the device you are probing. From within your `probe`
    function, you can get the `spi_device_id` that triggered the match using `spi_get_device_id`
    (in case of `id_table match` ) and extract the driver data:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct spi_device*`是一个输入参数，由内核传递给“探测”功能。它代表您正在探测的设备。在您的“探测”功能中，您可以使用`spi_get_device_id`（在`id_table
    match`的情况下）获取触发匹配的`spi_device_id`并提取驱动程序数据：'
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Per-device data
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个设备数据
- en: In the `probe` function, it is a common task to track a private (per-device)
    data to be used during the module lifetime. This has been discussed in [Chapter
    7](text00189.html) , *I2C Client Drivers.*
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在“探测”功能中，跟踪私有（每个设备）数据以在模块生命周期中使用是一项常见任务。这已在[第7章]（text00189.html），*I2C客户端驱动程序*中讨论过。
- en: 'The following are prototypes of functions one uses for setting/getting per-device
    data:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于设置/获取每个设备数据的函数的原型：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The remove() function
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: remove()功能
- en: 'The `remove` function must release every resource grabbed in the `probe` function.
    Its structure is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “remove”功能必须释放在“探测”功能中抓取的每个资源。其结构如下：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A typical `remove` function may look like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的“remove”功能可能如下所示：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Driver initialization and registration
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序初始化和注册
- en: 'For device sitting on a bus, whether it is a physical one or the pseudo platform
    bus, most of the time, everything is done in the `probe` function. The `init`
    and `exit` functions are just used to register/unregister the driver with the
    bus core:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于设备坐在总线上，无论是物理总线还是伪平台总线，大部分时间都是在“探测”功能中完成的。 “init”和“exit”功能只是用来在总线核心中注册/注销驱动程序：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That said, if you do not do anything else but register/unregister the driver,
    the kernel offers a macro:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果您除了注册/注销驱动程序之外什么都不做，内核会提供一个宏：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will internally call `spi_register_driver` and `spi_unregister_driver`
    . It is exactly the same thing as what we have seen in the previous chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在内部调用`spi_register_driver`和`spi_unregister_driver`。这与我们在上一章中看到的完全相同。
- en: Driver and devices provisioning
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序和设备配置
- en: 'As we need `i2c_device_id` for I2C devices, we must use `spi_device_id` for
    SPI devices, in order to provide a `device_id` array to match our devices. It
    is defined in `include/linux/mod_devicetable.h` :'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要对I2C设备使用`i2c_device_id`，所以我们必须对SPI设备使用`spi_device_id`，以便为我们的设备提供`device_id`数组进行匹配。它在`include/linux/mod_devicetable.h`中定义：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We need to embed our array into a `struct spi_device_id` in order to inform
    the SPI core about the device ID we need to manage in the driver and call `MODULE_DEVICE_TABLE`
    macro on the driver structure. Of course, the first parameter of the macro is
    the name of the bus on which the device sits. In our case, it is SPI:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的数组嵌入到`struct spi_device_id`中，以便通知SPI核心我们需要在驱动程序中管理的设备ID，并在驱动程序结构上调用`MODULE_DEVICE_TABLE`宏。当然，宏的第一个参数是设备所在的总线的名称。在我们的情况下，它是SPI：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Instantiate SPI devices in board configuration file – old and depreciated way
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在板配置文件中实例化SPI设备-旧的和不推荐的方法
- en: Device should be instantiated in board file only if the system does not support
    device tree. Since device tree has come, this method of instantiating is deprecated.
    Therefore, let us just remember that the board file resides in `arch/` directory.
    The structure used to represent an SPI device is `struct spi_board_info` , not
    the `struct spi_device` we used in the driver. It is only when you have filled
    and registered the `struct spi_board_info` using the `spi_register_board_info`
    function that the kernel will build a `struct spi_device` (which will be passed
    to your driver and register with the SPI core).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在系统不支持设备树时，设备才应该在板文件中实例化。由于设备树已经出现，这种实例化方法已被弃用。因此，让我们只记住板文件位于`arch/`目录中。用于表示SPI设备的结构是`struct
    spi_board_info`，而不是我们在驱动程序中使用的`struct spi_device`。只有在您填写并使用`spi_register_board_info`函数注册了`struct
    spi_board_info`后，内核才会构建一个`struct spi_device`（它将传递给您的驱动程序并在SPI核心中注册）。
- en: 'Feel free to look at the `struct spi_board_info` field in `include/linux/spi/spi.h`
    . The definition of `spi_register_board_info` can be found in `drivers/spi/spi.c`
    . Now let us have a look at some SPI device registration in the board file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意查看`include/linux/spi/spi.h`中的`struct spi_board_info`字段。`spi_register_board_info`的定义可以在`drivers/spi/spi.c`中找到。现在让我们来看看板文件中的一些SPI设备注册：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: SPI and device tree
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPI和设备树
- en: Like I2C devices, SPI devices belong to the non memory mapped devices family
    in the DT, but are addressable too. Here, the address means the CS index among
    the list of CS (starting from 0) given to the controller (the master). As an example,
    we may have three different SPI devices seating on the SPI bus, each with its
    CS line. The master will be given a set of GPIO, each representing CS to activate
    a device. If the device X uses the second GPIO line as CS, we must set its address
    to 1 (as we always start from 0) in `reg` property.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与I2C设备一样，SPI设备属于设备树中的非内存映射设备系列，但也是可寻址的。这里，地址表示控制器（主控）给定的CS（从0开始）列表中的CS索引。例如，我们可能在SPI总线上有三个不同的SPI设备，每个设备都有自己的CS线。主控将获得一组GPIO，每个GPIO代表一个CS以激活设备。如果设备X使用第二个GPIO线作为CS，我们必须将其地址设置为1（因为我们总是从0开始）在`reg`属性中。
- en: 'The following is a real DT listing for SPI devices:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是SPI设备的真实DT列表：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There is a new property introduced in SPI device nodes: `spi-max-frequency`
    . It represents the maximum SPI clocking speed of the device in Hz. Whenever you
    access the device, the bus controller driver will ensure the clock does not cross
    this limit. Other properties commonly used are:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SPI设备节点中引入了一个新属性：`spi-max-frequency`。它表示设备的最大SPI时钟速度（以赫兹为单位）。每当访问设备时，总线控制器驱动程序将确保时钟不会超过此限制。其他常用的属性包括：
- en: '`spi-cpol` : This is a Boolean (empty property) indicating the device requires
    inverse clock polarity mode. It corresponds to CPOL.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spi-cpol`：这是一个布尔值（空属性），表示设备需要反向时钟极性模式。它对应于CPOL。'
- en: '`spi-cpha` : This is an empty property indicating the device requires shifted
    clock phase mode. It corresponds to CPHA.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spi-cpha`：这是一个空属性，表示设备需要移位时钟相位模式。它对应于CPHA。'
- en: '`spi-cs-high` : By default, SPI devices require CS low to be active. This is
    a Boolean property indicating the device requires CS active high.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spi-cs-high`：默认情况下，SPI设备需要CS低才能激活。这是一个布尔属性，表示设备需要CS高活动。'
- en: That said, for a complete list of SPI binding elements, you can refer to *Documentation/devicetree/bindings/spi/spi-bus.txt*
    in the kernel sources.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，要获取完整的SPI绑定元素列表，您可以参考内核源代码中的*Documentation/devicetree/bindings/spi/spi-bus.txt*。
- en: Instantiate SPI devices in device tree - the new way
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设备树中实例化SPI设备-新的方法
- en: 'By filling our device node in the DT properly, the kernel will build a `struct
    spi_device` for us, and give it as a parameter to our SPI core functions. The
    following is just an excerpt from the SPI DT listing defined previously:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正确填写设备节点，内核将为我们构建一个`struct spi_device`，并将其作为参数传递给我们的SPI核心函数。以下只是先前定义的SPI DT列表的摘录：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Define and register SPI driver
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和注册SPI驱动程序
- en: 'Again the principle is the same as that for I2C drivers. We need to define
    a `struct of_device_id` to match devices in the DT, and call the `MODULE_DEVICE_TABLE`
    macro to register with the OF core:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的原则适用于I2C驱动程序。我们需要定义一个`struct of_device_id`来匹配设备，然后调用`MODULE_DEVICE_TABLE`宏来注册到OF核心：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then define our `spi_driver` as the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后定义我们的`spi_driver`如下：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can then improve the `probe` function this way:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过以下方式改进`probe`函数：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Accessing and talking to the client
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问和与客户端交流
- en: 'The SPI I/O model consists of a set of queued messages. We submit one or more
    `struct spi_message` structures, which are processed and completed synchronously
    or asynchronously. A single message consists of one or more `structspi_transfer`
    objects, each of which represents a full duplex SPI transfer. These are two main
    structures to exchange data between the driver and the device. They are both defined
    in `include/linux/spi/spi.h` :'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: SPI I/O模型由一组排队的消息组成。我们提交一个或多个`struct spi_message`结构，这些结构被同步或异步地处理和完成。单个消息由一个或多个`struct
    spi_transfer`对象组成，每个对象代表一个全双工SPI传输。这两个主要结构用于在驱动程序和设备之间交换数据。它们都在`include/linux/spi/spi.h`中定义：
- en: '![](img/Image00015.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00015.jpg)'
- en: SPI message structure
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: SPI消息结构
- en: '`struct spi_transfer` represents a full duplex SPI transfer:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct spi_transfer`代表一个全双工SPI传输：'
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following is the meaning of the structure elements:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结构元素的含义：
- en: '`tx_buf` : This buffer contains the data to be written. It should be NULL or
    left as it is in case of a read-only transaction. It should be `dma` -safe in
    the case where you need to perform SPI transactions through **Direct Memory Access**
    (**DMA** ).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tx_buf`：这个缓冲区包含要写入的数据。在只读事务的情况下，它应为NULL或保持不变。在需要通过**直接内存访问**（**DMA**）执行SPI事务的情况下，它应该是`dma`-安全的。'
- en: '`rx_buf` : This is a buffer for data to be read (with the same properties as
    `tx_buf` ), or NULL in a write-only transaction.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rx_buf`：这是用于读取数据的缓冲区（具有与`tx_buf`相同的属性），或在只写事务中为NULL。'
- en: '`tx_dma` : This is the DMA address of `tx_buf` , in case `spi_message.is_dma_mapped`
    is set to `1` . DMA is discussed in [Chapter 12](http://post) , *DMA – Direct
    Memory Access* .'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tx_dma`：这是`tx_buf`的DMA地址，如果`spi_message.is_dma_mapped`设置为`1`。DMA在[第12章](http://post)中讨论，*DMA-直接内存访问*。'
- en: '`rx_dma` : This is the same as `tx_dma` , but for `rx_buf` .'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rx_dma`：这与`tx_dma`相同，但用于`rx_buf`。'
- en: '`len` : This represents the size of `rx` and `tx` buffers in bytes, meaning
    they must have the same size if both are used.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`len`：这表示`rx`和`tx`缓冲区的字节大小，这意味着如果两者都被使用，它们必须具有相同的大小。'
- en: '`speed_hz` : This overrides the default speed, specified in `spi_device.max_speed_hz`
    , but only for the current transfer. If `0` , the default value (provided in `struct
    spi_device` structure) is used.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speed_hz`：这会覆盖默认速度，指定为`spi_device.max_speed_hz`，但仅适用于当前传输。如果为`0`，则使用默认值（在`struct
    spi_device`结构中提供）。'
- en: '`bits_per_word` : Data transfer involves one or more words. A word is a unit
    of data, whose size in bits may vary according to the need. Here, `bits_per_word`
    represents the size in bits of a word for this SPI transfer. This override the
    default value provided in `spi_device.bits_per_word` . If `0` , the default (from
    `spi_device` ) is used.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bits_per_word`：数据传输涉及一个或多个字。一个字是数据的单位，其大小以位为单位根据需要变化。在这里，`bits_per_word`表示此SPI传输的字位大小。这将覆盖`spi_device.bits_per_word`中提供的默认值。如果为`0`，则使用默认值（来自`spi_device`）。'
- en: '`cs_change` : This determines the state of the `chip_select` line after this
    transfer completes.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cs_change`：这确定此传输完成后`chip_select`线的状态。'
- en: '`delay_usecs` : This represents the delay (in microseconds) after this transfer
    before (optionally) changing the `chip_select` status, then starting the next
    transfer or completing this `spi_message` .'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delay_usecs`：这表示在此传输之后的延迟（以微秒为单位），然后（可选）更改`chip_select`状态，然后开始下一个传输或完成此`spi_message`。'
- en: 'At the other side, the `struct spi_message` is used atomically to wrap one
    or more SPI transfers. The SPI bus used will be hogged by the driver until every
    transfer that constitutes the message is completed. SPI message structure is defined
    in `include/linux/spi/spi.h` too:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一侧，“struct spi_message”被用来原子地包装一个或多个SPI传输。驱动程序将独占使用SPI总线，直到完成构成消息的每个传输。SPI消息结构也在“include/linux/spi/spi.h”中定义：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`transfers` : This is the list of transfers that constitutes the message. We
    will see later how to add a transfer to this list.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transfers`：这是构成消息的传输列表。稍后我们将看到如何将传输添加到此列表中。'
- en: '`is_dma_mapped` : This informs the controller whether to use DMA (or not) to
    perform the transaction. Your code is then responsible in providing DMA and CPU
    virtual addresses for each transfer buffer.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_dma_mapped`：这告诉控制器是否使用DMA（或不使用）执行事务。然后，您的代码负责为每个传输缓冲区提供DMA和CPU虚拟地址。'
- en: '`complete` : This is a callback called when the transaction is done, and `context`
    is the parameter to be given to the callback.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complete`：这是在事务完成时调用的回调，`context`是要传递给回调的参数。'
- en: '`frame_length` : This will be set automatically with the total number of bytes
    in the message.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frame_length`：这将自动设置为消息中的总字节数。'
- en: '`actual_length` : This is the number of bytes transferred in all successful
    segments.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actual_length`：这是所有成功段中传输的字节数。'
- en: '`status` : This reports the transfers status. Zero on success, else `-errno`
    .'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`：这报告传输状态。成功为零，否则为“-errno”。'
- en: '`spi_transfer` elements in a message are processed in a FIFO order. Until the
    message is completed, you have to make sure not to use transfer buffer, in order
    to avoid data corruption. You make completion call to make sure one can.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 消息中的`spi_transfer`元素按FIFO顺序处理。在消息完成之前，您必须确保不使用传输缓冲区，以避免数据损坏。您进行完成调用以确保可以。
- en: 'Before a message can be submitted to the bus, it has to be initialized with
    `void spi_message_init(struct spi_message *message),` which will zero each element
    in the structure and initialize the `transfers` list. For each transfer to be
    added to the message, you should call `void spi_message_add_tail(struct spi_transfer
    *t, struct spi_message *m)` on that transfer, which will result in enqueuing the
    transfer into `transfers` list. Once done, you have two choices to start the transaction:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在消息可以提交到总线之前，必须使用`void spi_message_init(struct spi_message *message)`对其进行初始化，这将将结构中的每个元素都设置为零，并初始化`transfers`列表。对于要添加到消息中的每个传输，应该在该传输上调用`void
    spi_message_add_tail(struct spi_transfer *t, struct spi_message *m)`，这将导致将传输排队到`transfers`列表中。完成后，您有两种选择来启动事务：
- en: Synchronously, using the `int spi_sync(struct spi_device *spi, struct spi_message
    *message)` function, which may sleep and which is not to be used in an interrupt
    context. Completion of the callback is not necessary here. This function is a
    wrapper around the second function (`spi_async()` ).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步地，使用“int spi_sync(struct spi_device *spi, struct spi_message *message)”函数，这可能会休眠，不应在中断上下文中使用。这里不需要回调的完成。这个函数是第二个函数（`spi_async()`）的包装器。
- en: Asynchronously, using the `spi_async()` function, which can be used in an atomic
    context too, and whose prototype is `int spi_async(struct spi_device *spi, struct
    spi_message *message)` . It is good practice to provide callback here, since it
    will be executed upon message complete.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步地，使用`spi_async()`函数，也可以在原子上下文中使用，其原型为`int spi_async(struct spi_device *spi,
    struct spi_message *message)`。在这里提供回调是一个好习惯，因为它将在消息完成时执行。
- en: 'The following is what a single transfer SPI message transaction may look like:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是单个传输SPI消息事务可能看起来像的内容：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now let us write a multi-transfer message transaction:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们写一个多传输消息事务：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'There are other helper functions, all built around `spi_sync()` . Some of them
    are:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他辅助函数，都围绕着`spi_sync()`构建。其中一些是：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Please have a look at `include/linux/spi/spi.h` to see the complete list. These
    wrappers should be used with small amounts of data.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看`include/linux/spi/spi.h`以查看完整列表。这些包装器应该与少量数据一起使用。
- en: Putting it all together
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有东西放在一起
- en: 'The steps needed to write SPI client drivers are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 编写SPI客户端驱动程序所需的步骤如下：
- en: Declare device IDs supported by the driver. You can do that using `spi_device_id`
    . If DT is supported, use `of_device_id` too. You can make an exclusive use of
    DT.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明驱动程序支持的设备ID。您可以使用`spi_device_id`来做到这一点。如果支持DT，也使用`of_device_id`。您可以完全使用DT。
- en: Call `MODULE_DEVICE_TABLE(spi, my_id_table);` to register your device list with
    the SPI core. If DT is supported, you must call `MODULE_DEVICE_TABLE(of, your_of_match_table);`
    to register your device list with the `of` core.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`MODULE_DEVICE_TABLE(spi, my_id_table);`将设备列表注册到SPI核心。如果支持DT，必须调用`MODULE_DEVICE_TABLE(of,
    your_of_match_table);`将设备列表注册到`of`核心。
- en: Write `probe` and `remove` functions according to their respective prototypes.
    The `probe` function must identify your device, configure it, define per-device
    (private) data, configure the bus if needed (SPI mode and so on) using `spi_setup`
    function, and register with the appropriate kernel framework. In the `remove`
    function, simply undo everything done in the `probe` function.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据各自的原型编写`probe`和`remove`函数。`probe`函数必须识别您的设备，配置它，定义每个设备（私有）数据，如果需要配置总线（SPI模式等），则使用`spi_setup`函数，并向适当的内核框架注册。在`remove`函数中，只需撤消`probe`函数中完成的所有操作。
- en: Declare and fill a `struct spi_driver` structure, set the `id_table` field with
    the array of IDs you have created. Set `.probe` and `.remove` fields with the
    name of the corresponding functions you have written. In the `.driver` substructure,
    set the `.owner` field to `THIS_MODULE` , set the driver name, and finally set
    the `.of_match_table` field with the array of `of_device_id` , if the DT is supported.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并填充`struct spi_driver`结构，使用您创建的ID数组设置`id_table`字段。使用您编写的相应函数的名称设置`.probe`和`.remove`字段。在`.driver`子结构中，将`.owner`字段设置为`THIS_MODULE`，设置驱动程序名称，最后使用`of_device_id`数组设置`.of_match_table`字段，如果支持DT。
- en: Call `module_spi_driver` function with your `spi_driver` structure you just
    filled before `module_spi_driver(serial_eeprom_spi_driver);` in order to register
    your driver with the kernel.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`module_spi_driver(serial_eeprom_spi_driver);`之前，使用您刚刚填充的`spi_driver`结构调用`module_spi_driver`函数，以便向内核注册您的驱动程序。
- en: SPI user mode driver
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPI用户模式驱动程序
- en: 'There are two ways of using the user mode SPI device driver. To be able to
    do that, you need to enable your device with `spidev` driver. An example would
    be as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种使用用户模式SPI设备驱动程序的方法。为了能够这样做，您需要使用`spidev`驱动程序启用您的设备。一个示例如下：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can call either the read/write functions or an `ioctl()` . With calling
    read/write you can only read or write at a time. If you need full-duplex read
    and write, you have to use the **Input Output Control** (**ioctl** ) commands
    . Examples for both are provided. This is the read/write example. You can compile
    it either with the cross-compiler of the platform or with the native compiler
    on the board:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调用读/写函数或`ioctl()`。通过调用读/写，您一次只能读取或写入。如果需要全双工读写，您必须使用**输入输出控制**（**ioctl**）命令。提供了两种的示例。这是读/写的示例。您可以使用平台的交叉编译器或板上的本地编译器进行编译：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: With IOCTL
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IOCTL
- en: The advantage of using IOCTL is that you can work in full duplex. The best example
    you can find is `documentation/spi/spidev_test.c` , in the kernel source tree,
    of course.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IOCTL的优势在于您可以进行全双工工作。您可以在内核源树中的`documentation/spi/spidev_test.c`中找到最好的示例。
- en: 'That said, the preceding example using read/write did not change any SPI configuration.
    However, the kernel exposes to user space a set of IOCTL commands, which you can
    use in order to set up the bus according to the need, just like what is done in
    DT. The following example shows how you can change the bus settings:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，前面使用读/写的示例并没有改变任何SPI配置。然而，内核向用户空间公开了一组IOCTL命令，您可以使用这些命令来根据需要设置总线，就像在DT中所做的那样。以下示例显示了如何更改总线设置：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can have a look at *Documentation/spi/spidev* for more information on spidev
    ioctl commands. When it comes to sending data over the bus, you can use `SPI_IOC_MESSAGE(N)`
    request, which offers full-duplex access, and composite operations without chipselect
    de-activation, thus offering multi-transfer support. It is the equivalent of kernel
    `spi_sync()` . Here a transfer is represented as an instance of `struct spi_ioc_transfer`
    , which is the equivalent of kernel `struct spi_transfer` , and whose definition
    can be found in `include/uapi/linux/spi/spidev.h` . The following is an example
    of usage:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看*Documentation/spi/spidev*以获取有关spidev ioctl命令的更多信息。在发送数据到总线时，您可以使用`SPI_IOC_MESSAGE(N)`请求，它提供了全双工访问和复合操作，而无需取消芯片选择，从而提供了多传输支持。这相当于内核的`spi_sync()`。这里，一个传输被表示为`struct
    spi_ioc_transfer`的实例，它相当于内核的`struct spi_transfer`，其定义可以在`include/uapi/linux/spi/spidev.h`中找到。以下是一个使用示例：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We just dealt with SPI drivers and now can take advantage of this faster serial
    (and full duplex) bus. We walked through data transfer over SPI, which is the
    most important section. That said, you may need more abstraction in order not
    to bother with SPI or I2C APIs. This is where the next chapter comes in, dealing
    with Regmap API, which offers a higher and unified level of abstraction, so that
    SPI (or I2C) commands will become transparent to you.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚处理了SPI驱动程序，现在可以利用这个更快的串行（和全双工）总线。我们讨论了SPI上的数据传输，这是最重要的部分。也就是说，您可能需要更多的抽象，以便不必理会SPI或I2C的API。这就是下一章的内容，介绍了Regmap
    API，它提供了更高和统一的抽象级别，使得SPI（或I2C）命令对您来说变得透明。
