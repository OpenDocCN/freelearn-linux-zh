["```\nreader@ubuntu:~/scripts/chapter_09$ cat if-then-else-proper.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-09-30\n# Description: Use the if-then-else construct, now properly.\n# Usage: ./if-then-else-proper.sh file-name\n#####################################\n\nfile_name=$1\n\n# Check if the file exists.\nif [[ -f ${file_name} ]]; then \n  cat ${file_name} # Print the file content.\nelse\n  echo \"File does not exist, stopping the script!\"\n  exit 1\nfi\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim square-number.sh \nreader@ubuntu:~/scripts/chapter_11$ cat square-number.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-26\n# Description: Return the square of the input number.\n# Usage: ./square-number.sh <number>\n#####################################\n\nINPUT_NUMBER=$1\n\n# Check the number of arguments received.\nif [[ $# -ne 1 ]]; then\n echo \"Incorrect usage, wrong number of arguments.\"\n echo \"Usage: $0 <number>\"\n exit 1\nfi\n\n# Check to see if the input is a number.\nif [[ ! ${INPUT_NUMBER} =~ [[:digit:]] ]]; then \n echo \"Incorrect usage, wrong type of argument.\"\n echo \"Usage: $0 <number>\"\n exit 1\nfi\n\n# Multiple the input number with itself and return this to the user.\necho $((${INPUT_NUMBER} * ${INPUT_NUMBER}))\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh\nIncorrect usage, wrong number of arguments.\nUsage: square-number.sh <number>\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 3 2\nIncorrect usage, wrong number of arguments.\nUsage: square-number.sh <number>\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh a\nIncorrect usage, wrong type of argument.\nUsage: square-number.sh <number>\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 3\n9\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 11\n121\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh a3\n0\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 3a\nsquare-number.sh: line 28: 3a: value too great for base (error token is \"3a\")\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim square-number.sh\nreader@ubuntu:~/scripts/chapter_11$ head -5 square-number.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\nreader@ubuntu:~/scripts/chapter_11$ grep 'digit' square-number.sh \nif [[ ! ${INPUT_NUMBER} =~ ^[[:digit:]]$ ]]; then\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh a3\nIncorrect usage, wrong type of argument.\nUsage: square-number-improved.sh <number>\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 3a\nIncorrect usage, wrong type of argument.\nUsage: square-number-improved.sh <number>\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 3a3\nIncorrect usage, wrong type of argument.\nUsage: square-number-improved.sh <number>\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 9\n81\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim square-number.sh \nreader@ubuntu:~/scripts/chapter_11$ head -5 square-number.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\nreader@ubuntu:~/scripts/chapter_11$ grep 'digit' square-number.sh \nif [[ ! ${INPUT_NUMBER} =~ ^[[:digit:]]+$ ]]; then \nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 15\n225\nreader@ubuntu:~/scripts/chapter_11$ bash square-number.sh 1x5\nIncorrect usage, wrong type of argument.\nUsage: square-number-improved.sh <number>\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim print-or-list.sh \nreader@ubuntu:~/scripts/chapter_11$ cat print-or-list.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-26\n# Description: Prints or lists the given path, depending on type.\n# Usage: ./print-or-list.sh <file or directory path>\n#####################################\n\n# Since we're dealing with paths, set current working directory.\ncd $(dirname $0)\n\n# Input validation.\nif [[ $# -ne 1 ]]; then\n  echo \"Incorrect usage!\"\n  echo \"Usage: $0 <file or directory path>\"\n  exit 1\nfi\n\ninput_path=$1\n\nif [[ -f ${input_path} ]]; then\n  echo \"File found, showing content:\"\n  cat ${input_path} || { echo \"Cannot print file, exiting script!\"; exit 1; }\nelif [[ -d ${input_path} ]]; then\n  echo \"Directory found, listing:\"\n  ls -l ${input_path} || { echo \"Cannot list directory, exiting script!\"; exit 1; }\nelse\n  echo \"Path is neither a file nor a directory, exiting script.\"\n  exit 1\nfi\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash print-or-list.sh \nIncorrect usage!\nUsage: print-or-list.sh <file or directory path>\nreader@ubuntu:~/scripts/chapter_11$ bash print-or-list.sh /etc/passwd\nFile found, showing content:\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\n<SNIPPED>\nreader@ubuntu:~/scripts/chapter_11$ bash print-or-list.sh /etc/shadow\nFile found, showing content:\ncat: /etc/shadow: Permission denied\nCannot print file, exiting script!\nreader@ubuntu:~/scripts/chapter_11$ bash print-or-list.sh /tmp/\nDirectory found, listing:\ntotal 8\ndrwx------ 3 root root 4096 Oct 26 08:26 systemd-private-4f8c34d02849461cb20d3bfdaa984c85...\ndrwx------ 3 root root 4096 Oct 26 08:26 systemd-private-4f8c34d02849461cb20d3bfdaa984c85...\nreader@ubuntu:~/scripts/chapter_11$ bash print-or-list.sh /root/\nDirectory found, listing:\nls: cannot open directory '/root/': Permission denied\nCannot list directory, exiting script!\nreader@ubuntu:~/scripts/chapter_11$ bash print-or-list.sh /dev/zero\nPath is neither a file nor a directory, exiting script.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim nested-print-or-list.sh \nreader@ubuntu:~/scripts/chapter_11$ cat nested-print-or-list.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-26\n# Description: Prints or lists the given path, depending on type.\n# Usage: ./nested-print-or-list.sh <file or directory path>\n#####################################\n\n# Since we're dealing with paths, set current working directory.\ncd $(dirname $0)\n\n# Input validation.\nif [[ $# -ne 1 ]]; then\n  echo \"Incorrect usage!\"\n  echo \"Usage: $0 <file or directory path>\"\n  exit 1\nfi\n\ninput_path=$1\n\n# First, check if we can read the file.\nif [[ -r ${input_path} ]]; then\n  # We can read the file, now we determine what type it is.\n  if [[ -f ${input_path} ]]; then\n    echo \"File found, showing content:\"\n    cat ${input_path} \n  elif [[ -d ${input_path} ]]; then\n    echo \"Directory found, listing:\"\n    ls -l ${input_path} \n  else\n    echo \"Path is neither a file nor a directory, exiting script.\"\n    exit 1\n  fi\nelse\n  # We cannot read the file, print an error.\n  echo \"Cannot read the file/directory, exiting script.\"\n  exit 1\nfi\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ help if\nif: if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi\n    Execute commands based on conditional.\n\n    The 'if COMMANDS' list is executed. If its exit status is zero,\n     then the 'then COMMANDS' list is executed.  Otherwise, each \n     'elif COMMANDS' list is executed in turn, and if its \n     exit status is zero, the corresponding\n    'then COMMANDS' list is executed and the if command completes.  Otherwise,\n    the 'else COMMANDS' list is executed, if present. \n    The exit status of the entire construct is the \n     exit status of the last command executed, or zero\n    if no condition tested true.\n\n    Exit Status:\n    Returns the status of the last command executed.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim while-simple.sh \nreader@ubuntu:~/scripts/chapter_11$ cat while-simple.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Example of a while loop.\n# Usage: ./while-simple.sh \n#####################################\n\n# Infinite while loop.\nwhile true; do\n  echo \"Hello!\"\n  sleep 1 # Wait for 1 second.\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim while-counter.sh \nreader@ubuntu:~/scripts/chapter_11$ cat while-counter.sh\ncat while-counter.sh\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Example of a while loop with a counter.\n# Usage: ./while-counter.sh \n#####################################\n\n# Define the counter outside of the loop so we don't reset it for \n# every run in the loop.\ncounter=0\n\n# This loop runs 10 times.\nwhile [[ ${counter} -lt 10 ]]; do\n  counter=$((counter+1)) # Increment the counter by 1.\n  echo \"Hello! This is loop number ${counter}.\"\n  sleep 1 \ndone\n\n# After the while-loop finishes, print a goodbye message.\necho \"All done, thanks for tuning in!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ cp while-counter.sh until-counter.sh\nreader@ubuntu:~/scripts/chapter_11$ vim until-counter.sh \nreader@ubuntu:~/scripts/chapter_11$ cat until-counter.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Example of an until loop with a counter.\n# Usage: ./until-counter.sh \n#####################################\n\n# Define the counter outside of the loop so we don't reset it for \n# every run in the loop.\ncounter=0\n\n# This loop runs 10 times.\nuntil [[ ${counter} -gt 9 ]]; do\n  counter=$((counter+1)) # Increment the counter by 1.\n  echo \"Hello! This is loop number ${counter}.\"\n  sleep 1\ndone\n\n# After the while-loop finishes, print a goodbye message.\necho \"All done, thanks for tuning in!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim while-interactive.sh \nreader@ubuntu:~/scripts/chapter_11$ cat while-interactive.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: A simple riddle in a while loop.\n# Usage: ./while-interactive.sh\n#####################################\n\n# Infinite loop, only exits on correct answer.\nwhile true; do\n  read -p \"I have keys but no locks. I have a space but no room. You can enter, but can\u2019t go outside. What am I? \" answer\n  if [[ ${answer} =~ [Kk]eyboard ]]; then # Use regular expression so 'a keyboard' or 'Keyboard' is also a valid answer.\n    echo \"Correct, congratulations!\"\n    exit 0 # Exit the script.\n  else\n    # Print an error message and go back into the loop.\n    echo \"Incorrect, please try again.\"\n  fi\ndone\n\nreader@ubuntu:~/scripts/chapter_11$ bash while-interactive.sh \nI have keys but no locks. I have a space but no room. You can enter, but can\u2019t go outside. What am I? mouse\nIncorrect, please try again.\nI have keys but no locks. I have a space but no room. You can enter, but can\u2019t go outside. What am I? screen\nIncorrect, please try again.\nI have keys but no locks. I have a space but no room. You can enter, but can\u2019t go outside. What am I? keyboard\nCorrect, congratulations!\nreader@ubuntu:~/scripts/chapter_11$\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-simple.sh\nreader@ubuntu:~/scripts/chapter_11$ cat for-simple.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Simple for syntax.\n# Usage: ./for-simple.sh\n#####################################\n\n# Create a 'list'.\nwords=\"house dog telephone dog\"\n\n# Iterate over the list and process the values.\nfor word in ${words}; do\n  echo \"The word is: ${word}\"\ndone\n\nreader@ubuntu:~/scripts/chapter_11$ bash for-simple.sh \nThe word is: house\nThe word is: dog\nThe word is: telephone\nThe word is: dog\n```", "```\nFOR ((counter=0; counter<=10; counter++)); DO something DONE\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-counter.sh \nreader@ubuntu:~/scripts/chapter_11$ cat for-counter.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Example of a for loop in C-style syntax.\n# Usage: ./for-counter.sh \n#####################################\n\n# This loop runs 10 times.\nfor ((counter=1; counter<=10; counter++)); do\n  echo \"Hello! This is loop number ${counter}.\"\n  sleep 1\ndone\n\n# After the for-loop finishes, print a goodbye message.\necho \"All done, thanks for tuning in!\"\n\nreader@ubuntu:~/scripts/chapter_11$ bash for-counter.sh \nHello! This is loop number 1.\nHello! This is loop number 2.\nHello! This is loop number 3.\nHello! This is loop number 4.\nHello! This is loop number 5.\nHello! This is loop number 6.\nHello! This is loop number 7.\nHello! This is loop number 8.\nHello! This is loop number 9.\nHello! This is loop number 10.\nAll done, thanks for tuning in!\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-number-list.sh\nreader@ubuntu:~/scripts/chapter_11$ cat for-number-list.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Example of a for loop with a number range.\n# Usage: ./for-number-list.sh\n#####################################\n\n# This loop runs 10 times.\nfor counter in {1..10}; do\n  echo \"Hello! This is loop number ${counter}.\"\n  sleep 1\ndone\n\n# After the for-loop finishes, print a goodbye message.\necho \"All done, thanks for tuning in!\"\n\nreader@ubuntu:~/scripts/chapter_11$ bash for-number-list.sh \nHello! This is loop number 1.\nHello! This is loop number 2.\nHello! This is loop number 3.\nHello! This is loop number 4.\nHello! This is loop number 5.\nHello! This is loop number 6.\nHello! This is loop number 7.\nHello! This is loop number 8.\nHello! This is loop number 9.\nHello! This is loop number 10.\nAll done, thanks for tuning in!\n```", "```\n{<starting value>..<ending value>}\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ echo {1..5}\n1 2 3 4 5\nreader@ubuntu:~/scripts/chapter_11$ echo {a..f}\na b c d e f\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ echo {A..z}\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z [  ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z\n```", "```\n{<starting value>..<ending value>..<increment>}\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ echo {1..100..10}\n1 11 21 31 41 51 61 71 81 91\nreader@ubuntu:~/scripts/chapter_11$ echo {0..100..10}\n0 10 20 30 40 50 60 70 80 90 100\n```", "```\neader@ubuntu:~/scripts/chapter_11$ vim for-infinite.sh \nreader@ubuntu:~/scripts/chapter_11$ cat for-infinite.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Example of an infinite for loop.\n# Usage: ./for-infinite.sh \n#####################################\n\n# Infinite for loop.\nfor ((;;)); do\n  echo \"Hello!\"\n  sleep 1 # Wait for 1 second.\ndone\n\nreader@ubuntu:~/scripts/chapter_11$ bash for-infinite.sh \nHello!\nHello!\nHello!\n^C\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-globbing.sh \nreader@ubuntu:~/scripts/chapter_11$ cat for-globbing.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-27\n# Description: Combining globbing patterns in a for loop.\n# Usage: ./for-globbing.sh \n#####################################\n\n# Create a list of log files.   \nfor file in $(ls /var/log/*.log); do\n  echo ${file}\ndone\n\nreader@ubuntu:~/scripts/chapter_11$ bash for-globbing.sh \n/var/log/alternatives.log\n/var/log/auth.log\n/var/log/bootstrap.log\n/var/log/cloud-init.log\n/var/log/cloud-init-output.log\n/var/log/dpkg.log\n/var/log/kern.log\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ cat for-globbing.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-10-27\n# Description: Combining globbing patterns in a for loop.\n# Usage: ./for-globbing.sh \n#####################################\n\n# Create a list of log files.   \nfor file in $(ls /var/log/*.log); do\n  echo \"File: ${file}\"\n  grep -i 'error' ${file}\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash for-globbing.sh \nFile: /var/log/alternatives.log\nFile: /var/log/auth.log\nFile: /var/log/bootstrap.log\nSelecting previously unselected package libgpg-error0:amd64.\nPreparing to unpack .../libgpg-error0_1.27-6_amd64.deb ...\nUnpacking libgpg-error0:amd64 (1.27-6) ...\nSetting up libgpg-error0:amd64 (1.27-6) ...\nFile: /var/log/cloud-init.log\nFile: /var/log/cloud-init-output.log\nFile: /var/log/dpkg.log\n2018-04-26 19:07:33 install libgpg-error0:amd64 <none> 1.27-6\n2018-04-26 19:07:33 status half-installed libgpg-error0:amd64 1.27-6\n2018-04-26 19:07:33 status unpacked libgpg-error0:amd64 1.27-6\n<SNIPPED>\nFile: /var/log/kern.log\nJun 30 18:20:32 ubuntu kernel: [    0.652108] RAS: Correctable Errors collector initialized.\nJul  1 09:31:07 ubuntu kernel: [    0.656995] RAS: Correctable Errors collector initialized.\nJul  1 09:42:00 ubuntu kernel: [    0.680300] RAS: Correctable Errors collector initialized.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-globbing.sh \nreader@ubuntu:~/scripts/chapter_11$ cat for-globbing.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\n# Date: 2018-10-27\n# Description: Combining globbing patterns in a for loop.\n# Usage: ./for-globbing.sh \n#####################################\n\n# Create a directory to store log files with errors.\nERROR_DIRECTORY='/tmp/error_logfiles/'\nmkdir -p ${ERROR_DIRECTORY}\n\n# Create a list of log files. \nfor file in $(ls /var/log/*.log); do\n grep --quiet -i 'error' ${file}\n\n # Check the return code for grep; if it is 0, file contains errors.\n if [[ $? -eq 0 ]]; then\n echo \"${file} contains error(s), copying it to archive.\"\n cp ${file} ${ERROR_DIRECTORY} # Archive the file to another directory.\n fi\n\ndone\n\nreader@ubuntu:~/scripts/chapter_11$ bash for-globbing.sh \n/var/log/bootstrap.log contains error(s), copying it to archive.\n/var/log/dpkg.log contains error(s), copying it to archive.\n/var/log/kern.log contains error(s), copying it to archive.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-globbing.sh \nreader@ubuntu:~/scripts/chapter_11$ cat for-globbing.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.3.0\n# Date: 2018-10-27\n# Description: Combining globbing patterns in a for loop.\n# Usage: ./for-globbing.sh \n#####################################\n\n# Create a directory to store log files with errors.\nERROR_DIRECTORY='/tmp/error_logfiles/'\nmkdir -p ${ERROR_DIRECTORY}\n\n# Create a list of log files.   \nfor file in $(ls /var/log/*.log); do\n  grep --quiet -i 'error' ${file}\n\n  # Check the return code for grep; if it is 0, file contains errors.\n  if [[ $? -eq 0 ]]; then\n    echo \"${file} contains error(s), copying it to archive ${ERROR_DIRECTORY}.\"\n    cp ${file} ${ERROR_DIRECTORY} # Archive the file to another directory.\n\n    # Create the new file location variable with the directory and basename of the file.\n    file_new_location=\"${ERROR_DIRECTORY}$(basename ${file})\"\n    # In-place edit, only print lines matching 'error' or 'Error'.\n    sed --quiet --in-place '/[Ee]rror/p' ${file_new_location} \n  fi\n\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash for-globbing.sh \n/var/log/bootstrap.log contains error(s), copying it to archive /tmp/error_logfiles/.\n/var/log/dpkg.log contains error(s), copying it to archive /tmp/error_logfiles/.\n/var/log/kern.log contains error(s), copying it to archive /tmp/error_logfiles/.\nreader@ubuntu:~/scripts/chapter_11$ ls /tmp/error_logfiles/\nbootstrap.log  dpkg.log  kern.log\nreader@ubuntu:~/scripts/chapter_11$ head -3 /tmp/error_logfiles/*\n==> /tmp/error_logfiles/bootstrap.log <==\nSelecting previously unselected package libgpg-error0:amd64.\nPreparing to unpack .../libgpg-error0_1.27-6_amd64.deb ...\nUnpacking libgpg-error0:amd64 (1.27-6) ...\n\n==> /tmp/error_logfiles/dpkg.log <==\n2018-04-26 19:07:33 install libgpg-error0:amd64 <none> 1.27-6\n2018-04-26 19:07:33 status half-installed libgpg-error0:amd64 1.27-6\n2018-04-26 19:07:33 status unpacked libgpg-error0:amd64 1.27-6\n\n==> /tmp/error_logfiles/kern.log <==\nJun 30 18:20:32 ubuntu kernel: [    0.652108] RAS: Correctable Errors collector initialized.\nJul  1 09:31:07 ubuntu kernel: [    0.656995] RAS: Correctable Errors collector initialized.\nJul  1 09:42:00 ubuntu kernel: [    0.680300] RAS: Correctable Errors collector initialized.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim while-interactive.sh \nreader@ubuntu:~/scripts/chapter_11$ cat while-interactive.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-10-28\n# Description: A simple riddle in a while loop.\n# Usage: ./while-interactive.sh\n#####################################\n\n# Infinite loop, only exits on correct answer.\nwhile true; do\n  read -p \"I have keys but no locks. I have a space but no room. You can enter, but can\u2019t go outside. What am I? \" answer\n  if [[ ${answer} =~ [Kk]eyboard ]]; then # Use regular expression so 'a keyboard' or 'Keyboard' is also a valid answer.\n    echo \"Correct, congratulations!\"\n    break # Exit the while loop.\n  else\n    # Print an error message and go back into the loop.\n    echo \"Incorrect, please try again.\"\n  fi\ndone\n\n# This will run after the break in the while loop.\necho \"Now we can continue after the while loop is done, awesome!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash while-interactive.sh \nI have keys but no locks. I have a space but no room. You can enter, but can\u2019t go outside. What am I? keyboard\nCorrect, congratulations!\nNow we can continue after the while loop is done, awesome!\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-loop-control.sh\nreader@ubuntu:~/scripts/chapter_11$ cat for-loop-control.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-28\n# Description: Loop control in a for loop.\n# Usage: ./for-loop-control.sh\n#####################################\n\n# Generate a random number from 1-10.\nrandom_number=$(( ( RANDOM % 10 )  + 1 ))\n\n# Iterate over all possible random numbers.\nfor number in {1..10}; do\n\n  if [[ ${number} -eq ${random_number} ]]; then\n    echo \"Random number found: ${number}.\"\n    break # As soon as we have found the number, stop.\n  fi\n\n  # If we get here the number did not match.\n  echo \"Number does not match: ${number}.\"\ndone\necho \"Number has been found, all done.\"\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash for-loop-control.sh \nNumber does not match: 1.\nNumber does not match: 2.\nNumber does not match: 3.\nRandom number found: 4.\nNumber does not match: 4.\nNumber does not match: 5.\nNumber does not match: 6.\nNumber does not match: 7.\nNumber does not match: 8.\nNumber does not match: 9.\nNumber does not match: 10.\nNumber has been found, all done.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash for-loop-control.sh \nNumber does not match: 1.\nNumber does not match: 2.\nNumber does not match: 3.\nNumber does not match: 4.\nNumber does not match: 5.\nNumber does not match: 6.\nRandom number found: 7.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim for-continue.sh\nreader@ubuntu:~/scripts/chapter_11$ cat for-continue.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-28\n# Description: For syntax with a continue.\n# Usage: ./for-continue.sh\n#####################################\n\n# Look at numbers 1-20, in steps of 2.\nfor number in {1..20..2}; do\n  if [[ $((${number}%5)) -eq 0 ]]; then\n    continue # Unlucky number, skip this!\n  fi\n\n  # Show the user which number we've processed.\n  echo \"Looking at number: ${number}.\"\n\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash for-continue.sh \nLooking at number: 1.\nLooking at number: 3.\nLooking at number: 7.\nLooking at number: 9.\nLooking at number: 11.\nLooking at number: 13.\nLooking at number: 17.\nLooking at number: 19.\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim break-x.sh \nreader@ubuntu:~/scripts/chapter_11$ cat break-x.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-10-28\n# Description: Breaking out of nested loops.\n# Usage: ./break-x.sh\n#####################################\n\nwhile true; do\n  echo \"This is the outer loop.\"\n  sleep 1\n\n  for iteration in {1..3}; do\n    echo \"This is inner loop ${iteration}.\"\n    sleep 1\n  done\ndone\necho \"This is the end of the script, thanks for playing!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash break-x.sh \nThis is the outer loop.\nThis is inner loop 1.\nThis is inner loop 2.\nThis is inner loop 3.\nThis is the outer loop.\nThis is inner loop 1.\n^C\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim break-x.sh \nreader@ubuntu:~/scripts/chapter_11$ cat break-x.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-10-28\n# Description: Breaking out of nested loops.\n# Usage: ./break-x.sh\n#####################################\n<SNIPPED>\n  for iteration in {1..3}; do\n    echo \"This is inner loop ${iteration}.\"\n    if [[ ${iteration} -eq 2 ]]; then\n      break 1\n    fi\n    sleep 1\n  done\n<SNIPPED>\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash break-x.sh \nThis is the outer loop.\nThis is inner loop 1.\nThis is inner loop 2.\nThis is the outer loop.\nThis is inner loop 1.\n^C\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ vim break-x.sh \nreader@ubuntu:~/scripts/chapter_11$ cat break-x.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\n# Date: 2018-10-28\n# Description: Breaking out of nested loops.\n# Usage: ./break-x.sh\n#####################################\n<SNIPPED>\n    if [[ ${iteration} -eq 2 ]]; then\n      break 2 # Break out of the outer while-true loop.\n    fi\n<SNIPPED>\n```", "```\nreader@ubuntu:~/scripts/chapter_11$ bash break-x.sh \nThis is the outer loop.\nThis is inner loop 1.\nThis is inner loop 2.\nThis is the end of the script, thanks for playing!\n```"]