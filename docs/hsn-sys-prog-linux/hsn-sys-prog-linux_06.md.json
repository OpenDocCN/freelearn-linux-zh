["```\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:    Ubuntu\nDescription:    Ubuntu 17.10\nRelease:    17.10\nCodename:    artful\n$ df --version |head -n1\ndf (GNU coreutils) 8.26\n$ valgrind df\n==1577== Memcheck, a memory error detector\n==1577== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1577== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==1577== Command: df\n==1577== \nFilesystem     1K-blocks    Used Available Use% Mounted on\nudev              479724       0    479724   0% /dev\ntmpfs             100940   10776     90164  11% /run\n/dev/sda1       31863632 8535972  21686036  29% /\ntmpfs             504692       0    504692   0% /dev/shm\ntmpfs               5120       0      5120   0% /run/lock\ntmpfs             504692       0    504692   0% /sys/fs/cgroup\ntmpfs             100936       0    100936   0% /run/user/1000\n==1577== \n==1577== HEAP SUMMARY:\n==1577==     in use at exit: 3,577 bytes in 213 blocks\n==1577==   total heap usage: 447 allocs, 234 frees, 25,483 bytes allocated\n==1577== \n==1577== LEAK SUMMARY:\n==1577==    definitely lost: 0 bytes in 0 blocks\n==1577==    indirectly lost: 0 bytes in 0 blocks\n==1577==      possibly lost: 0 bytes in 0 blocks\n==1577==    still reachable: 3,577 bytes in 213 blocks\n==1577==         suppressed: 0 bytes in 0 blocks\n==1577== Rerun with --leak-check=full to see details of leaked memory\n==1577== \n==1577== For counts of detected and suppressed errors, rerun with: -v\n==1577== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n$ \n```", "```\ndefinitely lost: 0 bytes in 0 blocks\n```", "```\n$ ./membugs 1\ntrue: x=32568\n$ \n```", "```\n$ valgrind ./membugs 1\n==19549== Memcheck, a memory error detector\n==19549== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==19549== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==19549== Command: ./membugs 1\n==19549== \n==19549== Conditional jump or move depends on uninitialised value(s)\n==19549==    at 0x40132C: uninit_var (in <...>/ch3/membugs)\n==19549==    by 0x401451: process_args (in <...>/ch3/membugs)\n==19549==    by 0x401574: main (in <...>/ch3/membugs)\n==19549==  \n\n[...] \n\n==19549== Conditional jump or move depends on uninitialised value(s)\n==19549==    at 0x4E9101C: vfprintf (in /usr/lib64/libc-2.26.so)\n==19549==    by 0x4E99255: printf (in /usr/lib64/libc-2.26.so)\n==19549==    by 0x401357: uninit_var (in <...>/ch3/membugs)\n==19549==    by 0x401451: process_args (in <...>/ch3/membugs)\n==19549==    by 0x401574: main (in <...>/ch3/membugs)\n==19549== \nfalse: x=0\n==19549== \n==19549== HEAP SUMMARY:\n==19549==     in use at exit: 0 bytes in 0 blocks\n==19549==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated\n==19549== \n==19549== All heap blocks were freed -- no leaks are possible\n==19549== \n==19549== For counts of detected and suppressed errors, rerun with: -v\n==19549== Use --track-origins=yes to see where uninitialised values come from\n==19549== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)\n$ \n```", "```\n$ make membugs_dbg\ngcc -g -ggdb -gdwarf-4 -O0 -Wall -Wextra -c membugs.c -o membugs_dbg.o\n\n[...]\n\nmembugs.c: In function \u2018uninit_var\u2019:\nmembugs.c:283:5: warning: \u2018x\u2019 is used uninitialized in this function [-Wuninitialized]\n  if (x > MAXVAL)\n     ^\n\n[...] \n\ngcc -g -ggdb -gdwarf-4 -O0 -Wall -Wextra -c ../common.c -o common_dbg.o\ngcc -o membugs_dbg membugs_dbg.o common_dbg.o\n\n[...]\n```", "```\n$ valgrind --tool=memcheck ./membugs_dbg 1\n==20079== Memcheck, a memory error detector\n==20079== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==20079== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==20079== Command: ./membugs_dbg 1\n==20079== \n==20079== Conditional jump or move depends on uninitialised value(s)\n==20079== at 0x40132C: uninit_var (membugs.c:283)\n==20079== by 0x401451: process_args (membugs.c:326)\n==20079== by 0x401574: main (membugs.c:379)\n==20079== \n==20079== Conditional jump or move depends on uninitialised value(s)\n==20079== at 0x4E90DAA: vfprintf (in /usr/lib64/libc-2.26.so)\n==20079== by 0x4E99255: printf (in /usr/lib64/libc-2.26.so)\n==20079== by 0x401357: uninit_var (membugs.c:286)\n==20079== by 0x401451: process_args (membugs.c:326)\n==20079== by 0x401574: main (membugs.c:379)\n==20079== \n==20079== Use of uninitialised value of size 8\n==20079== at 0x4E8CD7B: _itoa_word (in /usr/lib64/libc-2.26.so)\n==20079== by 0x4E9043D: vfprintf (in /usr/lib64/libc-2.26.so)\n==20079== by 0x4E99255: printf (in /usr/lib64/libc-2.26.so)\n==20079== by 0x401357: uninit_var (membugs.c:286)\n==20079== by 0x401451: process_args (membugs.c:326)\n==20079== by 0x401574: main (membugs.c:379) \n\n[...]\n\n==20079== \nfalse: x=0\n==20079== \n==20079== HEAP SUMMARY:\n==20079== in use at exit: 0 bytes in 0 blocks\n==20079== total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated\n==20079== \n==20079== All heap blocks were freed -- no leaks are possible\n==20079== \n==20079== For counts of detected and suppressed errors, rerun with: -v\n==20079== Use --track-origins=yes to see where uninitialised values come from\n==20079== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 0 from 0)\n$\n```", "```\n$  nl --body-numbering=a membugs.c [...]  \n\n   278    /* option =  1 : uninitialized var test case */\n   279    static void uninit_var()\n   280    {\n   281        int x;\n   282    \n 283        if (x)   284            printf(\"true case: x=%d\\n\", x);\n   285        else\n   286           printf(\"false case\\n\");\n   287    } \n\n[...]\n\n   325            case 1:\n   326                uninit_var();\n   327                 break; \n\n[...]\n\n   377    int main(int argc, char **argv)\n   378    {\n   379        process_args(argc, argv);\n   380         exit(EXIT_SUCCESS);\n   381    }\n```", "```\n$ valgrind ./membugs_dbg 5\n==23024== Memcheck, a memory error detector\n==23024== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==23024== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==23024== Command: ./membugs_dbg 5\n==23024== \narr = aaaaa\ufffd\ufffd\ufffd\ufffd\n==23024== \n==23024== HEAP SUMMARY:\n==23024==     in use at exit: 0 bytes in 0 blocks\n==23024==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated\n==23024== \n==23024== All heap blocks were freed -- no leaks are possible\n==23024== \n==23024== For counts of detected and suppressed errors, rerun with: -v\n==23024== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n$ \n```", "```\n$ ./membugs_dbg 2>&1 |grep 6\n option =  6 : out-of-bounds : read overflow [on dynamic memory]\n$ valgrind ./membugs_dbg 6\n[...]\n==23274== Command: ./membugs_dbg 6\n==23274== \n==23274== Invalid write of size 1\n==23274==    at 0x401127: read_overflow_dynmem (membugs.c:215)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n==23274==  Address 0x521f045 is 0 bytes after a block of size 5 alloc'd\n==23274==    at 0x4C2FB6B: malloc (vg_replace_malloc.c:299)\n==23274==    by 0x4010D9: read_overflow_dynmem (membugs.c:205)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n[...]\n==23274== Invalid write of size 1\n==23274==    at 0x40115E: read_overflow_dynmem (membugs.c:216)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n==23274==  Address 0x521f04a is 5 bytes after a block of size 5 alloc'd\n==23274==    at 0x4C2FB6B: malloc (vg_replace_malloc.c:299)\n==23274==    by 0x4010D9: read_overflow_dynmem (membugs.c:205)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n==23274== \n==23274== Invalid read of size 1\n==23274==    at 0x4C32B94: strlen (vg_replace_strmem.c:458)\n==23274==    by 0x4E91955: vfprintf (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x4E99255: printf (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x401176: read_overflow_dynmem (membugs.c:217)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n==23274==  Address 0x521f045 is 0 bytes after a block of size 5 alloc'd\n==23274==    at 0x4C2FB6B: malloc (vg_replace_malloc.c:299)\n==23274==    by 0x4010D9: read_overflow_dynmem (membugs.c:205)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n[...]\narr = aaaaaSecreT\n==23274== Conditional jump or move depends on uninitialised value(s)\n==23274==    at 0x4E90DAA: vfprintf (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x4E99255: printf (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x401195: read_overflow_dynmem (membugs.c:220)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n==23274== \n==23274== Use of uninitialised value of size 8\n==23274==    at 0x4E8CD7B: _itoa_word (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x4E9043D: vfprintf (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x4E99255: printf (in /usr/lib64/libc-2.26.so)\n==23274==    by 0x401195: read_overflow_dynmem (membugs.c:220)\n==23274==    by 0x401483: process_args (membugs.c:341)\n==23274==    by 0x401574: main (membugs.c:379)\n[...]\n==23274== ERROR SUMMARY: 31 errors from 17 contexts (suppressed: 0 from 0)\n$ \n```", "```\n$ ./membugs_dbg 2>&1 |grep 8\n option =  8 : UAF (use-after-free) test case\n$ \n```", "```\n$ ./membugs_dbg 9\nres: (null)\n$ valgrind ./membugs_dbg 9\n==7594== Memcheck, a memory error detector\n==7594== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==7594== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==7594== Command: ./membugs_dbg 9\n==7594== \nres: (null)\n==7594== \n==7594== HEAP SUMMARY:\n==7594==     in use at exit: 0 bytes in 0 blocks\n==7594==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated\n==7594== \n==7594== All heap blocks were freed -- no leaks are possible\n==7594== \n==7594== For counts of detected and suppressed errors, rerun with: -v\n==7594== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n$ \n```", "```\n$ valgrind --leak-resolution=high --num-callers=50 --leak-check=full ./membugs_dbg 13\n==22849== Memcheck, a memory error detector\n==22849== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==22849== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==22849== Command: ./membugs_dbg 13\n==22849== \n\n## Leakage test: case 3: \"lib\" API: runtime cond = 0\nmypath = /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/usr/sbin:/usr/local/sbin:/home/kai/MentorGraphics/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin/:/mnt/big/scratchpad/buildroot-2017.08.1/output/host/bin/:/sbin:/usr/sbin:/usr/local/sbin\n\n## Leakage test: case 3: \"lib\" API: runtime cond = 1\nmypath = /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/usr/sbin:/usr/local/sbin:/home/kai/MentorGraphics/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin/:/mnt/big/scratchpad/buildroot-2017.08.1/output/host/bin/:/sbin:/usr/sbin:/usr/local/sbin\n==22849== \n==22849== HEAP SUMMARY:\n==22849==     in use at exit: 4,096 bytes in 1 blocks\n==22849==   total heap usage: 3 allocs, 2 frees, 9,216 bytes allocated\n==22849== \n==22849== 4,096 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==22849==    at 0x4C2FB6B: malloc (vg_replace_malloc.c:299)\n==22849==    by 0x400A0C: silly_getpath (membugs.c:38)\n==22849==    by 0x400AC6: leakage_case3 (membugs.c:59)\n==22849==    by 0x40152B: process_args (membugs.c:367)\n==22849==    by 0x401574: main (membugs.c:379)\n==22849== \n==22849== LEAK SUMMARY:\n==22849==    definitely lost: 4,096 bytes in 1 blocks\n==22849==    indirectly lost: 0 bytes in 0 blocks\n==22849==      possibly lost: 0 bytes in 0 blocks\n==22849==    still reachable: 0 bytes in 0 blocks\n==22849==         suppressed: 0 bytes in 0 blocks\n==22849== \n==22849== For counts of detected and suppressed errors, rerun with: -v\n==22849== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n$ \n```", "```\nCC=${CROSS_COMPILE}gcc\nCL=${CROSS_COMPILE}clang\n\nCFLAGS=-Wall -UDEBUG\nCFLAGS_DBG=-g -ggdb -gdwarf-4 -O0 -Wall -Wextra -DDEBUG\nCFLAGS_DBG_ASAN=${CFLAGS_DBG} -fsanitize=address\nCFLAGS_DBG_MSAN=${CFLAGS_DBG} -fsanitize=memory\nCFLAGS_DBG_UB=${CFLAGS_DBG} -fsanitize=undefined\n\n[...]\n\n#--- Sanitizers (use clang): <foo>_dbg_[asan|ub|msan]\nmembugs_dbg_asan.o: membugs.c\n    ${CL} ${CFLAGS_DBG_ASAN} -c membugs.c -o membugs_dbg_asan.o\nmembugs_dbg_asan: membugs_dbg_asan.o common_dbg_asan.o\n    ${CL} ${CFLAGS_DBG_ASAN} -o membugs_dbg_asan membugs_dbg_asan.o common_dbg_asan.o\n\nmembugs_dbg_ub.o: membugs.c\n    ${CL} ${CFLAGS_DBG_UB} -c membugs.c -o membugs_dbg_ub.o\nmembugs_dbg_ub: membugs_dbg_ub.o common_dbg_ub.o\n    ${CL} ${CFLAGS_DBG_UB} -o membugs_dbg_ub membugs_dbg_ub.o common_dbg_ub.o\n\nmembugs_dbg_msan.o: membugs.c\n    ${CL} ${CFLAGS_DBG_MSAN} -c membugs.c -o membugs_dbg_msan.o\nmembugs_dbg_msan: membugs_dbg_msan.o common_dbg_msan.o\n    ${CL} ${CFLAGS_DBG_MSAN} -o membugs_dbg_msan membugs_dbg_msan.o common_dbg_msan.o\n[...]\n```", "```\n$ ./membugs_dbg_asan \nUsage: ./membugs_dbg_asan option [ -h | --help]\n option =  1 : uninitialized var test case\n option =  2 : out-of-bounds : write overflow [on compile-time memory]\n option =  3 : out-of-bounds : write overflow [on dynamic memory]\n option =  4 : out-of-bounds : write underflow\n option =  5 : out-of-bounds : read overflow [on compile-time memory]\n option =  6 : out-of-bounds : read overflow [on dynamic memory]\n option =  7 : out-of-bounds : read underflow\n option =  8 : UAF (use-after-free) test case\n option =  9 : UAR (use-after-return) test case\n option = 10 : double-free test case\n option = 11 : memory leak test case 1: simple leak\n option = 12 : memory leak test case 2: leak more (in a loop)\n option = 13 : memory leak test case 3: \"lib\" API leak\n-h | --help : show this help screen\n$ \n```", "```\n$ ./membugs_dbg_asan 1\nfalse case\n$ \n```", "```\n$ ./membugs_dbg_msan 1\n==3095==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x496eb8 (<...>/ch5/membugs_dbg_msan+0x496eb8)\n    #1 0x494425 (<...>/ch5/membugs_dbg_msan+0x494425)\n    #2 0x493f2b (<...>/ch5/membugs_dbg_msan+0x493f2b)\n    #3 0x7fc32f17ab96 (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n    #4 0x41a8c9 (<...>/ch5/membugs_dbg_msan+0x41a8c9)\n SUMMARY: MemorySanitizer: use-of-uninitialized-value (<...>/ch5/membugs_dbg_msan+0x496eb8) Exiting $ \n```", "```\nSUMMARY: MemorySanitizer: use-of-uninitialized-value (<...>/ch5/membugs_dbg_msan+0x496eb8)\n```", "```\n$ objdump -d -S ./membugs_dbg_msan > tmp \n\n<< Now examine the tmp file >>\n\n$ cat tmp\n\n./membugs_dbg_msan: file format elf64-x86-64\n\nDisassembly of section .init:\n\n000000000041a5b0 <_init>:\n  41a5b0: 48 83 ec 08 sub $0x8,%rsp\n  41a5b4: 48 8b 05 ad a9 2a 00 mov 0x2aa9ad(%rip),%rax # 6c4f68 <__gmon_start__>\n  41a5bb: 48 85 c0 test %rax,%rax\n  41a5be: 74 02 je 41a5c2 <_init+0x12>\n\n[...]\n\n0000000000496e60 <uninit_var>:\n{\n  496e60: 55 push %rbp\n  496e61: 48 89 e5 mov %rsp,%rbp\n  int x; /* static mem */\n  496e64: 48 83 ec 10 sub $0x10,%rsp\n [...]\n  if (x)\n  496e7f: 8b 55 fc mov -0x4(%rbp),%edx\n  496e82: 8b 31 mov (%rcx),%esi\n  496e84: 89 f7 mov %esi,%edi\n  [...]\n  496eaf: e9 00 00 00 00 jmpq 496eb4 <uninit_var+0x54>\n  496eb4: e8 a7 56 f8 ff callq 41c560 <__msan_warning_noreturn>\n  496eb9: 8a 45 fb mov -0x5(%rbp),%al\n  496ebc: a8 01 test $0x1,%al\n[...]\n```", "```\n   if (x)\n```", "```\n$ valgrind ./membugs_dbg 2 ==8959== Memcheck, a memory error detector\n==8959== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==8959== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==8959== Command: ./membugs_dbg 2\n==8959== \n==8959== \n==8959== HEAP SUMMARY:\n==8959==     in use at exit: 0 bytes in 0 blocks\n==8959==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==8959== \n==8959== All heap blocks were freed -- no leaks are possible\n==8959== \n==8959== For counts of detected and suppressed errors, rerun with: -v\n==8959== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n$ \n```", "```\n$ ./membugs_dbg_asan 2\n=================================================================\n==25662==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff17e789f4 at pc 0x00000051271d bp 0x7fff17e789b0 sp 0x7fff17e789a8\nWRITE of size 4 at 0x7fff17e789f4 thread T0\n    #0 0x51271c (<...>/membugs_dbg_asan+0x51271c)\n    #1 0x51244e (<...>/membugs_dbg_asan+0x51244e)\n    #2 0x512291 (<...>/membugs_dbg_asan+0x512291)\n    #3 0x7f7e19b2db96 (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n    #4 0x419ea9 (<...>/membugs_dbg_asan+0x419ea9)\n\nAddress 0x7fff17e789f4 is located in stack of thread T0 at offset 52 in frame\n    #0 0x5125ef (/home/seawolf/0tmp/membugs_dbg_asan+0x5125ef)\n[...]\nSUMMARY: AddressSanitizer: stack-buffer-overflow (/home/seawolf/0tmp/membugs_dbg_asan+0x51271c) \n[...]\n==25662==ABORTING\n$ \n```", "```\n$ export PATH=$PATH:/usr/lib/llvm-6.0/bin/\n$ ASAN_OPTIONS=symbolize=1 ./membugs_dbg_asan 2\n=================================================================\n==25807==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd63e80cf4 at pc 0x00000051271d bp 0x7ffd63e80cb0 sp 0x7ffd63e80ca8\nWRITE of size 4 at 0x7ffd63e80cf4 thread T0\n #0 0x51271c in write_overflow_compilemem <...>/ch5/membugs.c:268:10\n    #1 0x51244e in process_args <...>/ch5/membugs.c:325:4\n    #2 0x512291 in main <...>/ch5/membugs.c:375:2\n    #3 0x7f9823642b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #4 0x419ea9 in _start (<...>/membugs_dbg_asan+0x419ea9)\n[...]\n$ \n```", "```\n_start --> __libc_start_main --> main --> process_args --> \n             write_overflow_compilemem\n```", "```\n$ ./membugs_dbg_asan 3\n=================================================================\n==25848==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000018 at pc 0x0000004aaedc bp 0x7ffe64dd2cd0 sp 0x7ffe64dd2480\nWRITE of size 10 at 0x602000000018 thread T0\n    #0 0x4aaedb in __interceptor_strcpy.part.245 (<...>/membugs_dbg_asan+0x4aaedb)\n    #1 0x5128fd in write_overflow_dynmem <...>/ch5/membugs.c:258:2\n    #2 0x512458 in process_args <...>/ch5/membugs.c:328:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7f93abb88b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #5 0x419ea9 in _start (<...>/membugs_dbg_asan+0x419ea9)\n\n0x602000000018 is located 0 bytes to the right of 8-byte region [0x602000000010,0x602000000018) allocated by thread T0 here:\n    #0 0x4d9d60 in malloc (<...>/membugs_dbg_asan+0x4d9d60)\n    #1 0x512896 in write_overflow_dynmem <...>/ch5/membugs.c:254:9\n    #2 0x512458 in process_args <...>/ch5/membugs.c:328:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7f93abb88b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n[...]\n```", "```\n$ valgrind ./membugs_dbg 3\n==8917== Memcheck, a memory error detector\n==8917== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==8917== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==8917== Command: ./membugs_dbg 3\n==8917== \n==8917==ASan runtime does not come first in initial library list; you should either link runtime to your application or manually preload it with LD_PRELOAD.\n[...]\n```", "```\n$ ./membugs_dbg_asan 8 uaf():162: arr = 0x615000000080:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n=================================================================\n==25883==ERROR: AddressSanitizer: heap-use-after-free on address 0x615000000080 at pc 0x000000444b14 bp 0x7ffde4315390 sp 0x7ffde4314b40\nWRITE of size 22 at 0x615000000080 thread T0\n    #0 0x444b13 in strncpy (<...>/membugs_dbg_asan+0x444b13)\n    #1 0x513529 in uaf <...>/ch5/membugs.c:172:2\n    #2 0x512496 in process_args <...>/ch5/membugs.c:344:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7f4ceea9fb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #5 0x419ea9 in _start (<...>/membugs_dbg_asan+0x419ea9)\n\n0x615000000080 is located 0 bytes inside of 512-byte region [0x615000000080,0x615000000280)\nfreed by thread T0 here:\n    #0 0x4d9b90 in __interceptor_free.localalias.0 (<...>/membugs_dbg_asan+0x4d9b90)\n    #1 0x513502 in uaf <...>/ch5/membugs.c:171:2\n    #2 0x512496 in process_args <...>/ch5/membugs.c:344:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7f4ceea9fb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\npreviously allocated by thread T0 here:\n    #0 0x4d9d60 in malloc (<...>/membugs_dbg_asan+0x4d9d60)\n    #1 0x513336 in uaf <...>/ch5/membugs.c:157:8\n    #2 0x512496 in process_args <...>/ch5/membugs.c:344:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7f4ceea9fb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\nSUMMARY: AddressSanitizer: heap-use-after-free (<...>/membugs_dbg_asan+0x444b13) in strncpy\n[...]\n```", "```\n$ ./membugs_dbg 2>&1 | grep -w 9\n option =  9 : UAR (use-after-return) test case\n$ ./membugs_dbg_asan 9\nres: (null)\n$ \n```", "```\n$ ASAN_OPTIONS=detect_stack_use_after_return=1 ./membugs_dbg_asan 9\n=================================================================\n==25925==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f7721a00020 at pc 0x000000445b17 bp 0x7ffdb7c3ba10 sp 0x7ffdb7c3b1c0\nREAD of size 23 at 0x7f7721a00020 thread T0\n    #0 0x445b16 in printf_common(void*, char const*, __va_list_tag*) (<...>/membugs_dbg_asan+0x445b16)\n    #1 0x4465db in vprintf (<...>/membugs_dbg_asan+0x4465db)\n    #2 0x4466ae in __interceptor_printf (<...>/membugs_dbg_asan+0x4466ae)\n    #3 0x5124b9 in process_args <...>/ch5/membugs.c:348:4\n    #4 0x512291 in main <...>/ch5/membugs.c:375:2\n    #5 0x7f7724e80b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #6 0x419ea9 in _start (/home/seawolf/0tmp/membugs_dbg_asan+0x419ea9)\n\nAddress 0x7f7721a00020 is located in stack of thread T0 at offset 32 in frame\n    #0 0x5135ef in uar <...>/ch5/membugs.c:141\n\n  This frame has 1 object(s):\n    [32, 64) 'name' (line 142) <== Memory access at offset 32 is inside this variable\n[...]\n```", "```\nptr = malloc(n);\nstrncpy(...);\nfree(ptr);\n\nbogus = malloc(-1UL); /* will fail */\nif (!bogus) {\n     free(ptr);  /* the Bug! */\n     exit(1);\n}\n```", "```\n$ ./membugs_dbg_asan 10 doublefree(): cond 0\ndoublefree(): cond 1\n==25959==WARNING: AddressSanitizer failed to allocate 0xffffffffffffffff bytes\n==25959==AddressSanitizer's allocator is terminating the process instead of returning 0\n==25959==If you don't like this behavior set allocator_may_return_null=1\n==25959==AddressSanitizer CHECK failed: /build/llvm-toolchain-6.0-QjOn7h/llvm-toolchain-6.0-6.0/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cc:225 \"((0)) != (0)\" (0x0, 0x0)\n    #0 0x4e2eb5 in __asan::AsanCheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (<...>/membugs_dbg_asan+0x4e2eb5)\n    #1 0x500765 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (<...>/membugs_dbg_asan+0x500765)\n    #2 0x4e92a6 in __sanitizer::ReportAllocatorCannotReturnNull() (<...>/membugs_dbg_asan+0x4e92a6)\n    #3 0x4e92e6 in __sanitizer::ReturnNullOrDieOnFailure::OnBadRequest() (<...>/membugs_dbg_asan+0x4e92e6)\n    #4 0x424e66 in __asan::asan_malloc(unsigned long, __sanitizer::BufferedStackTrace*) (<...>/membugs_dbg_asan+0x424e66)\n    #5 0x4d9d3b in malloc (<...>/membugs_dbg_asan+0x4d9d3b)\n    #6 0x513938 in doublefree <...>/ch5/membugs.c:129:11\n    #7 0x5124d2 in process_args <...>/ch5/membugs.c:352:4\n    #8 0x512291 in main <...>/ch5/membugs.c:375:2\n    #9 0x7f8a7deccb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #10 0x419ea9 in _start (/home/seawolf/0tmp/membugs_dbg_asan+0x419ea9)\n\n$  \n```", "```\n[...] If you don't like this behavior set allocator_may_return_null=1 [...]\n```", "```\n$ ASAN_OPTIONS=verbosity=1:allocator_may_return_null=1 ./membugs_dbg_asan 10\n==26026==AddressSanitizer: libc interceptors initialized\n[...]\nSHADOW_OFFSET: 0x7fff8000\n==26026==Installed the sigaction for signal 11\n==26026==Installed the sigaction for signal 7\n==26026==Installed the sigaction for signal 8\n==26026==T0: stack [0x7fffdf206000,0x7fffdfa06000) size 0x800000; local=0x7fffdfa039a8\n==26026==AddressSanitizer Init done\ndoublefree(): cond 0\ndoublefree(): cond 1\n==26026==WARNING: AddressSanitizer failed to allocate 0xffffffffffffffff bytes\nmembugs.c:doublefree:132: malloc failed\n=================================================================\n==26026==ERROR: AddressSanitizer: attempting double-free on 0x615000000300 in thread T0:\n    #0 0x4d9b90 in __interceptor_free.localalias.0 (<...>/membugs_dbg_asan+0x4d9b90)\n    #1 0x5139b0 in doublefree <...>/membugs.c:133:4\n    #2 0x5124d2 in process_args <...>/ch5/membugs.c:352:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7fd41e565b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #5 0x419ea9 in _start (/home/seawolf/0tmp/membugs_dbg_asan+0x419ea9)\n\n0x615000000300 is located 0 bytes inside of 512-byte region [0x615000000300,0x615000000500) freed by thread T0 here:\n    #0 0x4d9b90 in __interceptor_free.localalias.0 (<...>/membugs_dbg_asan+0x4d9b90)\n    #1 0x51391f in doublefree <...>/ch5/membugs.c:126:2\n    #2 0x5124d2 in process_args <...>/ch5/membugs.c:352:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7fd41e565b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\npreviously allocated by thread T0 here:\n    #0 0x4d9d60 in malloc (<...>/membugs_dbg_asan+0x4d9d60)\n    #1 0x51389d in doublefree <...>/ch5/membugs.c:122:8\n    #2 0x5124d2 in process_args <...>/ch5/membugs.c:352:4\n    #3 0x512291 in main <...>/ch5/membugs.c:375:2\n    #4 0x7fd41e565b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\nSUMMARY: AddressSanitizer: double-free (<...>/membugs_dbg_asan+0x4d9b90) in __interceptor_free.localalias.0\n==26026==ABORTING\n$ \n```", "```\n$ ./membugs_dbg_asan 11\nleakage_case1(): will now leak 32 bytes (0 MB)\nleakage_case1(): will now leak 1048576 bytes (1 MB)\n\n=================================================================\n==26054==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 1048576 byte(s) in 1 object(s) allocated from:\n    #0 0x4d9d60 in malloc (<...>/membugs_dbg_asan+0x4d9d60)\n    #1 0x513e34 in amleaky <...>/ch5/membugs.c:66:8\n    #2 0x513a79 in leakage_case1 <...>/ch5/membugs.c:111:2\n    #3 0x5124ef in process_args <...>/ch5/membugs.c:356:4\n    #4 0x512291 in main <...>/ch5/membugs.c:375:2\n    #5 0x7f2dd5884b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\nDirect leak of 32 byte(s) in 1 object(s) allocated from:\n    #0 0x4d9d60 in malloc (<...>/membugs_dbg_asan+0x4d9d60)\n    #1 0x513e34 in amleaky <...>/ch5/membugs.c:66:8\n    #2 0x513a79 in leakage_case1 <...>/ch5/membugs.c:111:2\n    #3 0x5124e3 in process_args <...>/ch5/membugs.c:355:4\n    #4 0x512291 in main <...>/ch5/membugs.c:375:2\n    #5 0x7f2dd5884b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n\nSUMMARY: AddressSanitizer: 1048608 byte(s) leaked in 2 allocation(s).\n$ \n```", "```\n#include <malloc.h>\nint mallopt(int param, int value);\n```", "```\n*** glibc detected *** <program-name>: <function where error was detected> : <error description> : <address>\n```", "```\n$ MALLOC_CHECK_=1 ./membugs_dbg 10\ndoublefree(): cond 0\ndoublefree(): cond 1\nmembugs.c:doublefree:134: malloc failed\n*** Error in `./membugs_dbg': free(): invalid pointer: 0x00005565f9f6b420 ***\n$ MALLOC_CHECK_=3 ./membugs_dbg 10\ndoublefree(): cond 0\ndoublefree(): cond 1\nmembugs.c:doublefree:134: malloc failed\n*** Error in `./membugs_dbg': free(): invalid pointer: 0x0000562f5da95420 ***\nAborted\n$ MALLOC_CHECK_=5 ./membugs_dbg 10\ndoublefree(): cond 0\ndoublefree(): cond 1\nmembugs.c:doublefree:134: malloc failed\n$ MALLOC_CHECK_=7 ./membugs_dbg 10\ndoublefree(): cond 0\ndoublefree(): cond 1\nmembugs.c:doublefree:134: malloc failed\n$ \n```", "```\n$ MALLOC_CHECK_=3 ./membugs_dbg 7\nread_underflow(): cond 0\n dest: abcd56789\nread_underflow(): cond 1\n dest: xabcd56789\n*** Error in `./membugs_dbg': free(): invalid pointer: 0x0000562ce36d9420 ***\nAborted\n$ \n```", "```\n$ MALLOC_CHECK_=3 ./membugs_dbg 11\nleakage_case1(): will now leak 32 bytes (0 MB)\nleakage_case1(): will now leak 1048576 bytes (1 MB)\n$ \n```", "```\n$ man -k malloc\n__after_morecore_hook (3) - malloc debugging variables\n__free_hook (3)      - malloc debugging variables\n__malloc_hook (3)    - malloc debugging variables\n__malloc_initialize_hook (3) - malloc debugging variables\n__memalign_hook (3)  - malloc debugging variables\n__realloc_hook (3)   - malloc debugging variables\nmalloc (3)           - allocate and free dynamic memory\nmalloc_get_state (3) - record and restore state of malloc implementation\nmalloc_hook (3)      - malloc debugging variables\nmalloc_info (3)      - export malloc state to a stream\nmalloc_set_state (3) - record and restore state of malloc implementation\nmalloc_stats (3)     - print memory allocation statistics\nmalloc_trim (3)      - release free memory from the top of the heap\nmalloc_usable_size (3) - obtain size of block of memory allocated from heap\nmtrace (1)           - interpret the malloc trace log\nmtrace (3)           - malloc tracing\nmuntrace (3)         - malloc tracing\n$\n```"]