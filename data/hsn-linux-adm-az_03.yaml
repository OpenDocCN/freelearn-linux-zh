- en: 'Chapter 3: Basic Linux Administration'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：基本的Linux管理
- en: After the deployment of your first Linux **virtual machine** (**VM**), let's
    log in, discuss some basic Linux commands, and learn how to find our way in the
    Linux environment. This chapter is about basic Linux administration, starting
    with the Linux shell, which is used to interact with the Linux system. We'll discuss
    how to use the shell to accomplish our day-to-day administration tasks, such as
    accessing the filesystem, managing processes such as starting and killing programs,
    and many other things.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署了你的第一个Linux虚拟机（VM）之后，让我们登录，讨论一些基本的Linux命令，并学习如何在Linux环境中找到我们的方法。本章是关于基本的Linux管理，从Linux
    shell开始，用于与Linux系统交互。我们将讨论如何使用shell来完成我们的日常管理任务，比如访问文件系统，管理进程（如启动和终止程序）等等。
- en: In the last part of this chapter, we'll discuss the **Discretionary Access Control**
    (**DAC**) model and how to create, manage, and verify users and groups in Linux
    and get permissions for files and directories based on the username and group
    membership. We'll also cover changing file ownership for a user/group and changing
    and verifying basic permissions and access control lists.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将讨论自主访问控制（DAC）模型以及如何在Linux中创建、管理和验证用户和组，并根据用户名和组成员身份获取文件和目录的权限。我们还将涵盖更改文件所有权以及更改和验证基本权限和访问控制列表。
- en: 'Here are the key topics of this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的主要主题：
- en: Interacting with the shell and configuring the shell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与shell交互和配置shell
- en: Getting help using man pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用man页面获取帮助
- en: Working with and editing text files via the shell
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过shell处理和编辑文本文件
- en: Understanding the file hierarchy, managing the filesystem, and mounting new
    filesystems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解文件层次结构，管理文件系统和挂载新文件系统
- en: Managing processes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理进程
- en: User and group management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户和组管理
- en: The Linux Shell
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux Shell
- en: In the last chapter, we created the VM and logged in using SSH, but how do we
    interact with the Linux machine and instruct it to perform tasks? As we mentioned
    at the beginning of this chapter, we'll use the shell.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了VM并使用SSH登录，但是我们如何与Linux机器交互并指示其执行任务呢？正如我们在本章开头提到的，我们将使用shell。
- en: 'We''ll be exploring the widely used Bash shell, the configuration of the Bash
    shell, and how to use it. A shell is a user interface in which you can do the
    following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索广泛使用的Bash shell，配置Bash shell以及如何使用它。shell是一个用户界面，您可以在其中执行以下操作：
- en: Interact with the kernel, filesystem, and processes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与内核、文件系统和进程交互
- en: Execute programs, aliases, and shell built-ins
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行程序、别名和shell内置
- en: 'A shell provides features such as the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: shell提供以下功能：
- en: Scripting
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本编写
- en: Auto-completion
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动补全
- en: History and aliasing
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史和别名
- en: 'There are many different shells available, such as the KornShell, Bash, and
    the **Z shell** (**Zsh**). Bash is the default shell on almost every Linux system.
    Its development started in 1988 as a replacement for one of the oldest shells:
    the Bourne shell. Bash was based on the Bourne shell and lessons learned from
    other shells such as the KornShell and the C shell. Bash has become the most popular
    shell and is available on many different operating systems, including Windows
    10, FreeBSD, macOS, and Linux.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的shell可用，例如KornShell、Bash和Z shell（Zsh）。Bash是几乎每个Linux系统上的默认shell。它的开发始于1988年，作为最古老的shell之一Bourne
    shell的替代品。Bash基于Bourne shell和从其他shell（如KornShell和C shell）中学到的经验教训。Bash已成为最流行的shell，并可在许多不同的操作系统上使用，包括Windows
    10、FreeBSD、macOS和Linux。
- en: 'These are some of the most important features that were added to Bash version
    2.05a (released in 2001) that have made Bash the most prominent shell:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是添加到Bash版本2.05a（2001年发布）中的一些最重要的功能，这些功能使Bash成为最突出的shell：
- en: Command-line editing
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行编辑
- en: History support
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史支持
- en: Autocompletion
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动补全
- en: Integer calculations
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数计算
- en: Function declaration
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数声明
- en: Here documents (a way of getting text input into a separate file)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档（一种将文本输入到单独文件中的方法）
- en: New variables, such as `$RANDOM` and `$PPID`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新变量，如`$RANDOM`和`$PPID`
- en: 'Lately, the Z shell is becoming more popular; the development of this shell
    started in 1990, and it can be seen as an extension to Bash. There is also a compatibility
    mode with Bash. It comes with even better auto-complete support, including auto-correction
    and more advanced pathname expansion. Its functionality can be extended with modules,
    for example, to get more help with commands. The Oh-My-ZSH ([https://github.com/robbyrussell/oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh))
    and Prezto ([https://github.com/sorin-ionescu/prezto](https://github.com/sorin-ionescu/prezto))
    projects are worth mentioning: they provide theming, advanced configuration, and
    plugin management to make the Z shell very user-friendly. All these nice features
    come with a price: the Z shell is definitely more resource-hungry than Bash.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Z shell变得越来越受欢迎；这个shell的开发始于1990年，可以看作是对Bash的扩展。它还具有与Bash的兼容模式。它具有更好的自动补全支持，包括自动更正和更高级的路径名扩展。其功能可以通过模块进行扩展，例如，以获取更多关于命令的帮助。值得一提的是Oh-My-ZSH（https://github.com/robbyrussell/oh-my-zsh）和Prezto（https://github.com/sorin-ionescu/prezto）项目：它们提供主题、高级配置和插件管理，使Z
    shell非常用户友好。所有这些好功能都是有代价的：Z shell肯定比Bash更耗资源。
- en: Executing Commands
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行命令
- en: 'One of the most important features of a shell is that you can execute commands.
    A command can be one of the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: shell的最重要功能之一是可以执行命令。命令可以是以下之一：
- en: Shell built-in (a command that is provided by the shell in question)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell内置（由相关shell提供的命令）
- en: Executable on a filesystem
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件系统上可执行
- en: Alias
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名
- en: 'To find out what type of command you''re executing, there is the `type` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出正在执行的命令类型，可以使用`type`命令：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Adding the `-a` parameter will show all locations containing an executable
    named `echo`. In the following screenshot, we can see that when we add the `-a`
    parameter, the shell gives a reference to the `/usr/bin/echo` directory as well,
    due to the presence of the executable:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`-a`参数将显示包含可执行文件`echo`的所有位置。在下面的截图中，我们可以看到当我们添加`-a`参数时，由于可执行文件的存在，shell给出了对`/usr/bin/echo`目录的引用：
- en: '![Using the type command along with the parameter -a to find the type and locations
    of an executable named echo.](img/B15455_03_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用type命令和参数-a来查找名为echo的可执行文件的类型和位置。](img/B15455_03_01.jpg)'
- en: 'Figure 3.1: Locations containing the executable echo'
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.1：包含可执行文件echo的位置
- en: 'Let''s do the same for `ls`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`ls`做同样的操作：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So, you will get a similar output for `type ls`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你将得到一个类似的输出`type ls`：
- en: '![Running the command type -a ls to display the location containing the executable
    ls. By running this command we can also see that ls is an alias for ls --color=auto](img/B15455_03_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![运行命令type -a ls来显示包含可执行文件ls的位置。通过运行这个命令，我们也可以看到ls是ls --color=auto的别名](img/B15455_03_02.jpg)'
- en: 'Figure 3.2: Locations containing the executable ls'
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.2：包含可执行文件ls的位置
- en: 'Here, we can see that `ls` is an alias for the `ls --color=auto` command with
    some parameters added. An alias can replace an existing command or create a new
    one. The `alias` command without parameters will give you aliases that are already
    configured:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`ls`是`ls --color=auto`命令的别名，添加了一些参数。别名可以替换现有命令或创建新命令。没有参数的`alias`命令会给出已经配置的别名：
- en: '![Running the alias command on different keywords to display the aliases these
    commands are already configured with.](img/B15455_03_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![在不同的关键词上运行别名命令，以显示这些命令已经配置的别名。](img/B15455_03_03.jpg)'
- en: 'Figure 3.3: Using the alias command'
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.3：使用别名命令
- en: 'The `ll` alias is an example of a newly created command. The `mv` command is
    an example of a replacement. Create a new alias with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`ll`别名是一个新创建命令的例子。`mv`命令是一个替换的例子。使用以下命令创建一个新的别名：'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For instance, to replace the `grep` command with `search`, execute the following
    command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要用`search`替换`grep`命令，执行以下命令：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The alias you are creating will be added to the `.bashrc` file. If you want
    to remove an alias you have created, you can use the `unalias` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的别名将被添加到`.bashrc`文件中。如果你想要移除一个创建的别名，可以使用`unalias`命令：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you want to remove all defined aliases, you can use `unalias -a`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要移除所有定义的别名，可以使用`unalias -a`。
- en: 'The `which` command identifies the location of a program in the `$PATH` variable.
    This variable contains a list of directories that are? used to find an executable.
    This way, you don''t have to provide the full path:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`which`命令标识了`$PATH`变量中程序的位置。这个变量包含了一个目录列表，用于查找可执行文件。这样，你就不必提供完整的路径：'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output tells you that it''s available in the `/usr/bin` directory:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出告诉你它在`/usr/bin`目录中可用：
- en: '![Identifying the location of a program using the which command.](img/B15455_03_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![使用which命令识别程序的位置。](img/B15455_03_04.jpg)'
- en: 'Figure 3.4: Directory location of the program in $PATH variable'
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.4：$PATH变量中程序的目录位置
- en: Command-line Editing
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行编辑
- en: 'In many ways, entering commands in the Bash shell is the same as working in
    a text editor. That is probably the reason why there are shortcuts for actions
    such as going to the start of a line, and why the shortcuts are the same as in
    the two most famous, and most commonly used, text editors: Emacs and vi.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，输入Bash shell中的命令与在文本编辑器中工作是一样的。这可能是为什么有一些快捷键，比如跳转到行首，而且这些快捷键与两个最著名、最常用的文本编辑器Emacs和vi中的快捷键是一样的。
- en: 'By default, Bash is configured to be in Emacs editing mode. If you want to
    check the current editing mode, run `set -o`. The output will say whether Emacs
    or vi is set to `on`. The following are a few very important shortcuts:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bash被配置为处于Emacs编辑模式。如果你想要检查当前的编辑模式，运行`set -o`。输出将告诉你Emacs或vi是否被设置为`on`。以下是一些非常重要的快捷键：
- en: '![A table listing a few important shortucts to navigate through the Bash shell.](img/B15455_03_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![列出了一些重要的Bash shell导航快捷键。](img/B15455_03_05.jpg)'
- en: 'Figure 3.5: List of Bash shell shortcuts'
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.5：Bash shell快捷键列表
- en: 'If you want to use vi mode, execute the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用vi模式，执行以下命令：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To switch back to Emacs mode, use the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换回Emacs模式，使用以下命令：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The vi editor is covered in a later section of this chapter, *Working with Text
    Files*. For now, you can use almost every command in command mode, including `navigation`,
    `yank`, and `put`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: vi编辑器在本章的后面部分*使用文本文件*中有介绍。现在，你可以在命令模式下使用几乎每个命令，包括`导航`、`复制`和`粘贴`。
- en: The `set` command is a Bash built-in command that toggles attributes specific
    to Bash. Without parameters, it dumps environment variables.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`set`命令是Bash内置命令，用于切换特定于Bash的属性。没有参数时，它会显示环境变量。'
- en: Working with history
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理历史记录
- en: 'The Bash shell provides command-line tools that you can use to work with the
    user''s command history. Every command that you execute is registered in a history
    file in the home directory: `~/.bash_history`. To view the content of this history,
    execute the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Bash shell提供了命令行工具，你可以用来处理用户的命令历史。你执行的每个命令都会在主目录的历史文件`~/.bash_history`中注册。要查看这个历史的内容，执行以下命令：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output shows a numbered list of previously used commands; you can simply
    redo a command using the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了一个已使用命令的编号列表；你可以简单地使用以下命令重做一个命令：
- en: '`!<number>`: Execute the command based on the history list number.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!<number>`：根据历史列表编号执行命令。'
- en: '`!<-number>`: For instance, `!-2` executes the command that was executed two
    commands prior to the last command in the history.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!<-number>`：例如，`!-2`执行了在历史记录中比上一条命令早两条的命令。'
- en: '`!<first characters of the command>:` This will execute the last item that
    starts with this character.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!<first characters of the command>:` 这将执行以这个字符开头的最后一个项目。'
- en: '`!!:` Redo the last command. You can combine this with other commands. For
    instance, `sudo !!`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!!:` 重复执行上一条命令。您可以将其与其他命令结合使用。例如，`sudo !!`。'
- en: You can backward-search the history using *Ctrl* + *R* (Emacs mode) or using
    the forward slash (vi command mode). Browsing is possible using the arrow keys.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用*Ctrl* + *R*（Emacs模式）或正斜杠（vi命令模式）向后搜索历史记录。可以使用箭头键进行浏览。
- en: 'The history file is not written directly after the execution of a command,
    but at the end of a login session. If you are working in multiple sessions, it
    can be a good idea to write the history directly. To do so, execute the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 历史文件不是在执行命令后直接编写的，而是在登录会话结束时。如果您在多个会话中工作，直接编写历史记录可能是一个好主意。要执行此操作，请执行以下操作：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To read the just-saved history in another session, execute this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要在另一个会话中读取刚保存的历史记录，请执行以下命令：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To clear the history of the current session, use this command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要清除当前会话的历史记录，请使用以下命令：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you want to save the history to a file, you can execute this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将历史记录保存到文件中，可以执行以下命令：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So, by saving the cleared history, you emptied the history file.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过保存清除的历史记录，您清空了历史文件。
- en: 'Another nice feature of working with the history is that you can edit it. Let''s
    say you executed the `ls -alh` command, but you need `ls -ltr`. Just type:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与历史记录一起工作的另一个好功能是您可以编辑它。假设您执行了`ls -alh`命令，但您需要`ls -ltr`。只需输入：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is actually the same as the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上与以下内容相同：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Of course, you can do this for every entry in the history; for instance, for
    number `6` in the history list, use:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以对历史记录中的每个条目执行此操作；例如，对于历史记录列表中的第6个条目，请使用：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Sometimes you need more flexibility, and you want to edit a big line that contains
    a lot of typos. Enter the `fc` command. Fix the command using the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要更灵活，想要编辑包含许多拼写错误的大行。输入`fc`命令。使用以下命令修复命令：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This opens a text editor (vi by default) and, after saving the modification,
    it will execute the modified command.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个文本编辑器（默认为vi），保存修改后，将执行修改后的命令。
- en: Autocompletion
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动补全
- en: Everyone makes typos; no one can remember every parameter. Autocompletion can
    prevent many errors and helps you in many ways when you enter commands.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都会犯错；没有人能记住每个参数。自动补全可以防止许多错误，并在输入命令时以多种方式帮助您。
- en: 'Autocompletion works for the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 自动补全适用于以下情况：
- en: Executables
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文件
- en: Aliases
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名
- en: Shell built-ins
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell内置
- en: Programs on the filesystem
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统上的程序
- en: Filenames
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名
- en: Parameters, if the utility supports it and the `bash-completion` package is
    installed
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数，如果实用程序支持并且安装了`bash-completion`软件包
- en: Variables
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: If the shell is configured in Emacs mode, use *Ctrl* + *I* to activate autocomplete;
    if the shell is configured in vi mode, you can use *Ctrl* + *P* as well.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果shell配置为Emacs模式，请使用*Ctrl* + *I*来激活自动完成；如果shell配置为vi模式，您也可以使用*Ctrl* + *P*。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If there is more than one possibility, you have to hit *Ctrl* + *I* or *Ctrl*
    + *P* twice.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个可能性，您必须两次按*Ctrl* + *I*或*Ctrl* + *P*。
- en: Globbing
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Globbing
- en: Globbing is expanding a non-specific filename that contains a wildcard into
    one or more specific filenames in the Linux shell. Another common name for globbing
    is pathname expansion.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Globbing是将Linux shell中包含通配符的非特定文件名扩展为一个或多个特定文件名的过程。Globbing的另一个常用名称是路径名扩展。
- en: 'The following wildcards are recognized in the Bash shell:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Bash shell中识别以下通配符：
- en: '`?`: One single character.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`：一个字符。'
- en: '`*`: Multiple characters. Please notice that if you use this wildcard as the
    first character, filenames starting with a dot won''t match. Of course, you can
    use `.*`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：多个字符。请注意，如果将此通配符用作第一个字符，则以点开头的文件名将不匹配。当然，您可以使用`.*`。'
- en: '`[a-z], [abc]`: One character from the range.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-z], [abc]`：来自范围的一个字符。'
- en: '`{a,b,c}`: a or b or c.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{a,b,c}`：a或b或c。'
- en: 'The following are some nice examples of using wildcards:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用通配符的一些不错的例子：
- en: '`echo *`: This will list the files or directories in the current working directory.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo *`：这将列出当前工作目录中的文件或目录。'
- en: '`cd /usr/share/doc/wget*`: This will change the directory to the directory
    name starting with `wget` residing in `/usr/share/doc`.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd /usr/share/doc/wget*`：这将切换到以`wget`开头的目录名所在的`/usr/share/doc`目录。'
- en: '`ls /etc/*/*conf`: This will list all `.conf` files in all directories under
    `/etc`. Here''s an example of this command:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ls /etc/*/*conf`：这将列出`/etc`目录下所有目录中的所有`.conf`文件。以下是此命令的示例：'
- en: '![Running the command ls /etc/*/*conf to display all .conf files in all directories
    under /etc.](img/B15455_03_06.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![运行命令ls /etc/*/*conf以显示/etc目录下所有.conf文件的图像。](img/B15455_03_06.jpg)'
- en: 'Figure 3.6: Listing all the .conf files from all directories'
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.6：列出所有目录中的.conf文件
- en: '`mkdir -p /srv/www/{html,cgi-bin,logs}`: This will create `html`, `cgi-bin`,
    and `log` directories inside `/srv/www` with a single command.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkdir -p /srv/www/{html,cgi-bin,logs}`：这将在`/srv/www`目录下创建`html`、`cgi-bin`和`log`目录。'
- en: Redirections
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重定向
- en: In the early days of Unix, one of the developers, Ken Thompson, defined a *Unix
    philosophy*, an approach based on experience to make everything as modular as
    possible and to reuse code and programs as much as possible. Particularly in those
    days, reusability was important for performance reasons and to provide a method
    that allowed for easy maintenance of the code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix早期，开发人员之一Ken Thompson定义了*Unix哲学*，这是一种基于经验的方法，旨在使一切尽可能模块化，并尽可能重用代码和程序。特别是在那些日子里，可重用性对性能原因很重要，并且提供了一种允许轻松维护代码的方法。
- en: 'In a version of this *Unix philosophy* modified by Peter H Salus, the objectives
    of redirection are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Peter H Salus修改的*Unix哲学*版本中，重定向的目标如下：
- en: Write programs that do one thing and do it well.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写只做一件事并且做得很好的程序。
- en: Write programs to work together.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写程序以协同工作。
- en: Write programs to handle text streams, because that is a universal interface.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写处理文本流的程序，因为这是一个通用接口。
- en: 'To make this philosophy possible, programs were developed with support for
    file descriptors, or, in modern parlance, communication channels. Every program
    has at least three communication channels:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这种哲学成为可能，开发了支持文件描述符或现代术语中的通信通道的程序。每个程序至少有三个通信通道：
- en: Standard input (0)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输入（0）
- en: Standard output (1)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输出（1）
- en: Standard error (2)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准错误（2）
- en: One of the nice features of this implementation is that you can redirect the
    channels.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现的一个很好的特性是您可以重定向通道。
- en: 'To redirect the standard output to a file, use the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将标准输出重定向到文件，使用以下命令：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To redirect the standard output and append to an existing file, use:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要将标准输出重定向并追加到现有文件中，请使用：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Redirect the standard error and output to a file as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将标准错误和输出重定向到文件，如下所示：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To redirect standard output first to a file and then redirect the standard
    error there as well, use:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将标准输出重定向到文件，然后也将标准错误重定向到那里，使用：
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To redirect the standard input, use the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要重定向标准输入，请使用以下命令：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s do an activity to help us understand the concept of redirection. Please
    run the command first, verify the output, then redirect to file using the following
    methods. For example, run `ls` and verify the output, then use `>` to redirect
    the output to `/tmp/test.list`. You can always check the file using `cat /tmp/test.list`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个活动，以帮助我们理解重定向的概念。请先运行命令，验证输出，然后使用以下方法将其重定向到文件。例如，运行`ls`并验证输出，然后使用`>`将输出重定向到`/tmp/test.list`。您始终可以使用`cat
    /tmp/test.list`检查文件：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A special version of input redirection is `heredoc.txt`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 输入重定向的特殊版本是`heredoc.txt`：
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `cat` command concatenates the standard output and appends it to the `/tmp/heredoc.txt`
    file. There is no way to interrupt or break the command because the keyboard is
    not the standard input until it encounters a label, in this example, `EOF`. This
    method is often used to create configuration files from scripts.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令将标准输出连接并将其附加到`/tmp/heredoc.txt`文件中。由于键盘直到遇到标签（在本例中为`EOF`）之前不是标准输入，因此无法中断或中断命令。这种方法通常用于从脚本创建配置文件。'
- en: 'Another possibility is taking the standard output of one command and redirecting
    it to the standard input of another command using the `|` symbol:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是使用`|`符号将一个命令的标准输出重定向到另一个命令的标准输入：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Using the `tee` command, you can combine the power of redirection and piping.
    There are times when you want to make sure the output of `command 1` is written
    to a file for troubleshooting or logging and, at the same time, you pipe it to
    the standard input of another command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tee`命令，您可以结合重定向和管道的功能。有时您希望确保`command 1`的输出被写入文件以进行故障排除或记录，并且同时将其管道传输到另一个命令的标准输入：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Appending to a file is also possible using the `-a` parameter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用`-a`参数将内容追加到文件中。
- en: 'Another use case of `tee` is:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`tee`的另一个用例是：'
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This way, it is possible to write into a file without using difficult `su` constructions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，就可以在不使用复杂的`su`结构的情况下写入文件。
- en: Working with Variables
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用变量
- en: 'Every command-line interface, even those without advanced scripting possibilities,
    has the concept of variables. In Bash, there are two types of variables:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令行界面，即使没有高级脚本编写的可能性，也都有变量的概念。在Bash中，有两种类型的变量：
- en: Built-in or internal variables that affect the behavior of Bash or give information
    about Bash. Some examples include `BASH_VERSION`, `EDITOR`, and `PATH`.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影响Bash行为或提供有关Bash的信息的内置或内部变量。一些示例包括`BASH_VERSION`，`EDITOR`和`PATH`。
- en: Environment variables that are known to one or more applications, including
    built-in variables and user-defined variables.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已知一个或多个应用程序的环境变量，包括内置变量和用户定义变量。
- en: 'To list the environment variables for your current shell, you can use the `env`
    or `printenv` command. `printenv` is also able to show the content of a specific
    variable:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出当前shell的环境变量，可以使用`env`或`printenv`命令。`printenv`还能够显示特定变量的内容：
- en: '![Running the command printenv PATH to list the environment variables for your
    current shell.](img/B15455_03_07.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![运行命令printenv PATH以列出当前shell的环境变量。](img/B15455_03_07.jpg)'
- en: 'Figure 3.7: Displaying the content of a specific variable using printenv command'
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.7：使用printenv命令显示特定变量的内容
- en: 'Another way to view the content of a variable is as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 查看变量内容的另一种方法如下：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To declare an environment variable, execute `var=value`. For instance:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明环境变量，请执行`var=value`。例如：
- en: '[PRE29]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To add more characters to the value, use:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要向值添加更多字符，请使用：
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `animal` variable is only known to your current shell. If you want to export
    it to child processes, you need to export the variable:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`animal`变量只对当前shell可见。如果要将其导出到子进程，需要导出该变量：'
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Bash is also capable of doing simple calculations:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Bash还能够进行简单的计算：
- en: '[PRE32]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Alternatively, you can use this command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用此命令：
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Another feature is putting the output of a command into a variable—a technique
    called nesting:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特性是将命令的输出放入变量中-一种称为嵌套的技术：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Of course, this is just a glimpse of what Bash is capable of, but this should
    be enough for you to learn how to handle Bash configuration files and modify them
    for the environment you need so that they behave in the way you want.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是Bash能够做到的一小部分，但这应该足够让您学会如何处理Bash配置文件并根据需要修改它们，以使它们以您想要的方式运行。
- en: Bash Configuration Files
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bash配置文件
- en: 'There are three important system-wide configuration files for the Bash shell:
    `/etc/profile`, `/etc/bashrc`, and `/etc/environment`. The purpose of these files
    is to store information regarding your shell, such as the colors, aliases, and
    variables. For example, in the previous section, we added a couple of aliases,
    and they are stored in a file called `bashrc`, which is a configuration file.
    Each file has its own purpose; we will take a look at each of them now.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Bash shell有三个重要的系统范围配置文件：`/etc/profile`、`/etc/bashrc`和`/etc/environment`。这些文件的目的是存储关于您的shell的信息，如颜色、别名和变量。例如，在前一节中，我们添加了一些别名，它们存储在一个名为`bashrc`的文件中，这是一个配置文件。每个文件都有自己的目的；我们现在将逐个查看它们。
- en: '`/etc/profile` is a script that is executed once a user logs in to a system.
    It is not a good idea to modify this file; instead, use the snap-in `/etc/profile.d`
    directory. Files in this directory are executed in alphabetical order and must
    have `.sh` as the file extension. As a side note, `/etc/profile` is not only used
    by the Bash shell, but by all shells for Linux, except for PowerShell. You can
    also create a user-specific profile script in the home directory, `~/.bash_profile`,
    which is also Bash-specific.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/profile`是一个在用户登录到系统时执行的脚本。修改此文件不是一个好主意；而是使用快捷方式`/etc/profile.d`目录。该目录中的文件按字母顺序执行，并且必须具有`.sh`作为文件扩展名。作为一个附注，`/etc/profile`不仅被Bash
    shell使用，而且被所有Linux的shell使用，除了PowerShell。您还可以在主目录中创建一个特定于用户的配置文件脚本，`~/.bash_profile`，这也是特定于Bash的。'
- en: 'Some typical content of a profile script is as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件脚本的一些典型内容如下：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Ubuntu or a similar distribution, `pinfo` is not installed
    by default. Run `apt install pinfo` to install it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Ubuntu或类似的发行版，默认情况下不会安装`pinfo`。运行`apt install pinfo`来安装它。
- en: The `shopt` command changes some default Bash behavior, such as checking for
    mail or the behavior of globbing. The `unset` command is the opposite of the `set`
    command. In our example, by default, Bash checks for mail every minute; after
    executing the `unset MAILCHECK` command, the `MAILCHECK` variable is removed.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`shopt`命令更改了一些默认的Bash行为，比如检查邮件或globbing的行为。`unset`命令是`set`命令的相反。在我们的示例中，默认情况下，Bash每分钟检查一次邮件；执行`unset
    MAILCHECK`命令后，`MAILCHECK`变量被移除。'
- en: 'The `/etc/bashrc` script is started every time any user invokes a shell or
    shell script. For performance reasons, keep it as minimal as possible. Instead
    of the `/etc/bashrc` file, you can use the user-specific `~/.bashrc` file, and
    the `~/.bash_logout` script is executed if you exit a shell. The `bashrc` configuration
    files are often used to modify the prompt (the `PS1` variable):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/bashrc`脚本在任何用户调用shell或shell脚本时都会启动。出于性能原因，尽量保持它尽可能简洁。您可以使用特定于用户的`~/.bashrc`文件，如果退出shell，则会执行`~/.bash_logout`脚本。`bashrc`配置文件通常用于修改提示符（`PS1`变量）：'
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s look at the parameters for the `PS1` variable:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`PS1`变量的参数：
- en: Colors (like GREEN, DARKGRAY passed into PS1 variable) are defined in ANSI color
    code.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色（比如传递给PS1变量的GREEN、DARKGRAY）是用ANSI颜色代码定义的。
- en: '`\e`: Escape character in ANSI.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\e`：ANSI中的转义字符。'
- en: '`\n`: Newline.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\n`：换行。'
- en: '`\w`: Current working directory.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\w`：当前工作目录。'
- en: '`\t`: Current time.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\t`：当前时间。'
- en: '`\u`: Username.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\u`：用户名。'
- en: The `/etc/environment` file (empty by default in Red Hat–based distributions)
    is the first file that is executed at login. It contains variables for every process,
    not just the shell. It's not a script, just one variable on each line.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/environment`文件（在基于Red Hat的发行版中默认为空）是在登录时执行的第一个文件。它包含每个进程的变量，而不仅仅是shell。它不是脚本，每行只有一个变量。'
- en: 'Here is an example of `/etc/environment`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`/etc/environment`的示例：
- en: '[PRE37]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `EDITOR` variable is an important one. Many programs can invoke an editor;
    sometimes it's vi by default, sometimes it's not. Setting a default ensures that
    you can always use your favorite editor.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDITOR`变量是一个重要的变量。许多程序可以调用编辑器；有时默认是vi，有时不是。设置默认值可以确保您始终可以使用您喜欢的编辑器。'
- en: Note
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't want to log out and log in again, you can use the `source` command,
    for instance, `source /etc/environment`. This way, the variables will be read
    into your current shell.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想注销并重新登录，可以使用`source`命令，例如`source /etc/environment`。这样，变量将被读入当前的shell。
- en: Getting Help
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取帮助
- en: Whether you are new to Linux or a long-time user, from time to time, you'll
    need help. It's impossible to remember all the commands and their parameters.
    Almost every command has a `--help` parameter, and there is sometimes documentation
    installed in the `/usr/share/doc` directory, but the most important sources of
    information are the information documents and man pages.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是Linux的新手还是长期用户，都会时不时需要帮助。不可能记住所有命令及其参数。几乎每个命令都有一个`--help`参数，有时在`/usr/share/doc`目录中安装了文档，但最重要的信息来源是信息文档和man页面。
- en: Using the man pages
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用man页面
- en: 'There is a saying, **Read The Fine Manual** (**RTFM**), and sometimes people
    replace the word *fine* with another, less friendly word. Almost every command
    has a manual: a man page provides you with all the information you need. And yes,
    not all man pages are easy to read, especially older ones, but if you use man
    pages frequently, you''ll get used to them, and you''ll be able to find the information
    you need quickly enough. Normally, man pages are installed on your system, and
    they are available online: [http://man7.org/linux/man-pages](http://man7.org/linux/man-pages).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 有一句话，**阅读完整的手册**（**RTFM**），有时人们会用另一个不太友好的词替换*fine*。几乎每个命令都有一个手册：man页面为您提供了所有需要的信息。是的，不是所有的man页面都容易阅读，特别是旧的页面，但如果您经常使用man页面，您会习惯它们，并且能够快速找到所需的信息。通常，man页面已安装在您的系统上，并且可以在线获取：[http://man7.org/linux/man-pages](http://man7.org/linux/man-pages)。
- en: 'Note that the man pages are removed in the Azure images for openSUSE Leap and
    SUSE Linux Enterprise Server. You have to reinstall every package to make them
    available again:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Azure镜像中的openSUSE Leap和SUSE Linux Enterprise Server中删除了man页面。您必须重新安装每个软件包才能再次使用它们：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Man pages are installed in the `/usr/share/man` directory in GZIP compressed
    archives. Man pages are specially formatted text files that you can read with
    the `man` command or `pinfo`. The `pinfo` utility acts as a text browser, very
    similar to a text-based web browser. It adds hyperlink support and the ability
    to navigate between different man pages using the arrow keys.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: man页面被安装在`/usr/share/man`目录中，以GZIP压缩的存档形式。man页面是特别格式化的文本文件，您可以使用`man`命令或`pinfo`来阅读。`pinfo`实用程序充当文本浏览器，非常类似于基于文本的网络浏览器。它添加了超链接支持和使用箭头键在不同的man页面之间导航的能力。
- en: Note
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to replace the `man` command with `pinfo`, it is a good idea to
    create an alias using the `alias man="pinfo -m"` command.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要用`pinfo`替换`man`命令，最好使用`alias man="pinfo -m"`命令创建一个别名。
- en: 'All man pages follow a similar structure, and they are always formatted and
    divided into sections:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的man页面都遵循相似的结构，它们总是被格式化并分成各个部分：
- en: '**Name**: The name of the command and a brief explanation of the command. Usually
    a one-liner; detailed information can be found in the Description section of the
    man page.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：命令的名称和简要解释。通常是一行；详细信息可以在man页面的描述部分找到。'
- en: '**Synopsis**: An overview with all the available parameters.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概要**：包含所有可用参数的概述。'
- en: '`ifconfig` command explicitly states that this command is obsolete.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifconfig`命令明确说明这个命令已经过时。'
- en: '**Options**: All the available parameters of a command, sometimes including
    examples.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项**：命令的所有可用参数，有时包括示例。'
- en: '**Examples**: If the examples are not in the Options section, there may be
    a separate section.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：如果示例不在选项部分，可能会有一个单独的部分。'
- en: '**Files**: Files and directories that are important to this command.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：对于这个命令很重要的文件和目录。'
- en: '**See also**: Refers to other man pages, info pages, and other sources of documentation.
    Some man pages contain other sections, such as notes, bugs, history, authors,
    and licenses.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**另请参阅**：指的是其他man页面、info页面和其他文档来源。一些man页面包含其他部分，如注释、错误、历史、作者和许可证。'
- en: 'Man pages are help pages that are divided into several sections; these sections
    are described in the Description section of the man page. You can use `man man`
    to understand more about the sections. The following screenshot shows the different
    sections:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Man页面是帮助页面，分为几个部分；这些部分在man页面的描述部分中描述。您可以使用`man man`来了解更多关于这些部分的信息。以下屏幕截图显示了不同的部分：
- en: '![A screenshot listing various sections of the man pages.](img/B15455_03_08.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![列出man页面的各个部分的屏幕截图。](img/B15455_03_08.jpg)'
- en: 'Figure 3.8: Different sections of a man page'
  id: totrans-225
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.8：man页面的不同部分
- en: 'This sectioning is important to know about, especially if you want to search
    for documentation. To be able to search for documentation, you''ll need to index
    the man pages:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些分区是很重要的，特别是如果您想要搜索文档。要能够搜索文档，您需要索引man页面：
- en: '[PRE39]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Normally, after installing a package, the index is automatically updated. Sometimes,
    the packager will have failed to add a post-install script to execute the `mandb`
    command. It's a good idea to execute the command manually if you can't find the
    information and you are pretty sure that there should be a man page.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在安装软件包后，索引会自动更新。有时，打包者可能没有添加一个后安装脚本来执行`mandb`命令。如果您找不到信息并且非常确定应该有一个man页面，手动执行该命令是个好主意。
- en: 'After that, you can use the `apropos` or `man -k` commands to find the information
    you need. It doesn''t matter which one you choose; the syntax is the same:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以使用`apropos`或`man -k`命令来找到您需要的信息。无论您选择哪个，语法都是一样的：
- en: '[PRE40]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding command, we search for the word `time`, limiting the search
    to the man page section 5.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们搜索了单词`time`，将搜索限制在man页面的第5部分。
- en: Using info Documents
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用info文档
- en: Info documents are another important source of information. The difference between
    man pages and info pages is that info pages are more freely formatted, whereas
    man pages are a sort of instruction manual for a certain command. Info documents
    are, most of the time, complete handbooks.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Info文档是另一个重要的信息来源。man页面和info页面的区别在于info页面的格式更自由，而man页面是某个命令的一种说明手册。Info文档大多数时候是完整的手册。
- en: Info documents are, like man pages, compressed and installed in the `/usr/share/info`
    directory. To read them, you can use `info` or the more modern `pinfo`. Both commands
    act as a text-based browser. If you are a big fan of the Emacs editor, you can
    use InfoMode ([https://www.emacswiki.org/emacs/InfoMode](https://www.emacswiki.org/emacs/InfoMode))
    to read the info documents.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Info文档和man页面一样，被压缩并安装在`/usr/share/info`目录中。要阅读它们，您可以使用`info`或更现代的`pinfo`。这两个命令都是文本浏览器。如果您是Emacs编辑器的忠实粉丝，您可以使用InfoMode
    ([https://www.emacswiki.org/emacs/InfoMode](https://www.emacswiki.org/emacs/InfoMode))来阅读info文档。
- en: 'One of the nice features is that you can directly jump to one of the hyperlinks
    in the document using `pinfo` or `info`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个很好的功能是，您可以使用`pinfo`或`info`直接跳转到文档中的超链接：
- en: '[PRE41]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Ubuntu or a similar distribution, `pinfo` is not installed
    by default. Run `apt install pinfo` to install it.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Ubuntu或类似的发行版，默认情况下不会安装`pinfo`。运行`apt install pinfo`来安装它。
- en: The preceding example opens the man page of `pinfo` and jumps directly to the
    `Keybindings` section.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子打开了`pinfo`的man页面，并直接跳转到`Keybindings`部分。
- en: The `pinfo` command has a search option, `-a`. If there is a match, it will
    automatically open the corresponding `info` document or man page. For example,
    if you would like to know about the `echo` command, use `pinfo -a echo`; it'll
    take you to the help section of the `echo` command.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`pinfo`命令有一个搜索选项，`-a`。如果有匹配，它将自动打开相应的`info`文档或man页面。例如，如果您想了解`echo`命令，使用`pinfo
    -a echo`；它会带您到`echo`命令的帮助部分。'
- en: 'The `info` command has a search option as well: `-k`. Using `-k`, the `info`
    command will look up the keyword in all available manuals. For example, here we''ve
    checked for the `paste` keyword, and it returned all possible matches:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`info`命令也有一个搜索选项：`-k`。使用`-k`，`info`命令将在所有可用手册中查找关键字。例如，在这里我们检查了`paste`关键字，它返回了所有可能的匹配项：'
- en: '![Using the info -k command to look up the keyword paste in all available manuals.](img/B15455_03_09.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![使用info -k命令在所有可用手册中查找关键字paste。](img/B15455_03_09.jpg)'
- en: 'Figure 3.9: Checking for the paste keyword using the info command'
  id: totrans-244
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.9：使用info命令检查paste关键字
- en: Other Documentation
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他文档
- en: Another source of documentation is the documentation provided by the Linux distribution
    vendor. The websites of Red Hat, SUSE, Canonical, and Debian host useful handbooks,
    wikis, and so on. They can be very useful, especially for topics that are distribution-specific,
    such as software management.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个文档来源是Linux发行版供应商提供的文档。Red Hat、SUSE、Canonical和Debian的网站托管了有用的手册、维基等。它们可能非常有用，特别是对于特定于发行版的主题，如软件管理。
- en: There are two distributions that are not Microsoft-endorsed distributions, Gentoo
    and Arch Linux, and they have excellent wikis on their websites. And, of course,
    some of the information in these wikis is specific to these distributions, but
    many articles are useful and will work on every distribution.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个不是微软认可的发行版，Gentoo和Arch Linux，它们在其网站上有出色的维基。当然，这些维基中的一些信息是特定于这些发行版的，但许多文章是有用的，并且适用于每个发行版。
- en: The Linux Foundation hosts a wiki at [https://wiki.linuxfoundation.org](https://wiki.linuxfoundation.org)
    with documentation regarding topics such as networking, and standards such as
    the `init` system, systemd, and the Linux firewall (firewalld); these topics are
    discussed in *Chapter 5, Advanced Linux Administration*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Linux基金会在[https://wiki.linuxfoundation.org](https://wiki.linuxfoundation.org)上托管了一个维基，其中包含有关诸如网络等主题的文档，以及`init`系统、systemd和Linux防火墙（firewalld）等标准；这些主题在*第5章，高级Linux管理*中讨论。
- en: Finally, the Linux Documentation Project can be found at [https://www.tldp.org](https://www.tldp.org).
    While many of the documents you can find there are very old, it's still a good
    starting point.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Linux文档项目可以在[https://www.tldp.org](https://www.tldp.org)找到。尽管你可以在那里找到的许多文档都非常古老，但它仍然是一个很好的起点。
- en: Working with Text Files
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理文本文件
- en: The Unix philosophy started by Ken Thompson aimed to create a capable operating
    system with a small footprint and a clean user interface. Because part of the
    Unix philosophy is to *write programs to handle text streams, because that is
    a universal interface*, communication between programs, configuration files, and
    many other things is implemented in plain text. This section is all about handling
    plain text.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 由Ken Thompson发起的Unix哲学旨在创建一个占用空间小、用户界面清晰的功能强大的操作系统。因为Unix哲学的一部分是*编写处理文本流的程序，因为那是一个通用接口*，程序之间的通信、配置文件和许多其他内容都是以纯文本实现的。本节是关于处理纯文本的。
- en: Reading Text
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读文本
- en: 'On the most fundamental level, reading the content of a file in plain text
    format means taking the content of this file and redirecting it to the standard
    output. The `cat` command is one utility that can do that—concatenate the content
    of one or more files (or another input channel) to the standard output:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的层面上，以纯文本格式阅读文件的内容意味着将该文件的内容重定向到标准输出。`cat`命令就是可以做到这一点的实用程序之一——将一个或多个文件（或另一个输入通道）的内容连接到标准输出：
- en: '![Reading the contents of the file /etc/shells using the cat utility.](img/B15455_03_10.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![使用cat实用程序读取文件/etc/shells的内容。](img/B15455_03_10.jpg)'
- en: 'Figure 3.10: Using the cat command to generate standard output'
  id: totrans-255
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.10：使用cat命令生成标准输出
- en: 'Some nice parameters of this utility are:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 该实用程序的一些不错的参数包括：
- en: '`-A`: Show all non-printable characters'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-A`：显示所有不可打印字符'
- en: '`-b`: Number lines, including empty lines'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`：编号行，包括空行'
- en: '`-n`: Number lines, except empty lines'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`：编号行，不包括空行'
- en: '`-s`: Suppress repeated (`!`) empty blank lines'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`：抑制重复（!）空白行'
- en: 'There is another utility like `cat`, which is the `tac` utility. This will
    print the file in reverse order:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个类似于`cat`的实用程序，即`tac`实用程序。这将以逆序打印文件：
- en: '![Printing the contents of a file in reverse order by running the tac utility.](img/B15455_03_11.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![通过运行tac实用程序以逆序打印文件的内容。](img/B15455_03_11.jpg)'
- en: 'Figure 3.11: Using the tac utility to print files in reverse order'
  id: totrans-263
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.11：使用tac实用程序以逆序打印文件
- en: The problem with the `cat` command is that it just dumps the content to the
    standard output without paginating the content, and the scrollback functionality
    for the terminals is not very good.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令的问题在于它只是将内容转储到标准输出而不对内容进行分页，并且终端的回滚功能不是很好。'
- en: The `more` utility is a filter for paging. It displays the text one screenful
    at a time and provides a basic search engine that can be activated by using the
    forward slash. At the end of the file, `more` will exit, with or without the message
    `Press space to continue`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`more`实用程序是一个分页过滤器。它一次显示一个屏幕的文本，并提供一个基本的搜索引擎，可以通过使用正斜杠来激活。在文件末尾，`more`将退出，有或没有消息`按空格键继续`。'
- en: 'The `less` utility is more advanced than the `more` utility. It has the following
    features:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`实用程序比`more`实用程序更先进。它具有以下功能：'
- en: Ability to scroll forward, backward, and horizontally
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够向前、向后和水平滚动
- en: Advanced navigation
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级导航
- en: Advanced search engine
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级搜索引擎
- en: Multiple file handling
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多文件处理
- en: Ability to display information about the file, such as the filename and length
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够显示有关文件的信息，如文件名和长度
- en: Ability to invoke shell commands
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够调用shell命令
- en: In `more` and `less`, the `v` command allows us to switch to an editor, by default
    the vi editor.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在`more`和`less`中，`v`命令允许我们切换到编辑器，默认为vi编辑器。
- en: Note
  id: totrans-274
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Both `more` and `less` are available on every distribution; however, on some
    distributions, `more` is an alias for `less`. Use the `type` command to verify!
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`more`和`less`都可以在每个发行版上使用；但是，在某些发行版上，`more`是`less`的别名。使用`type`命令进行验证！'
- en: If you want to see only a specific number of lines at the top of a file, there
    is a utility called `head`. By default, it shows the first 10 lines of a file.
    You can modify this behavior using the `-n` parameter for the number of lines
    and the `-c` parameter for the number of bytes/kilobytes.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想看到文件顶部的特定行数，有一个名为`head`的实用程序。默认情况下，它显示文件的前10行。您可以使用`-n`参数修改此行为，以便指定行数，使用`-c`参数指定字节/千字节的数量。
- en: 'The `head` utility is the opposite of `tail`; it shows the first 10 lines by
    default. For example, we have a file named `states.txt` that contains the names
    of US states in alphabetical order. If we use the `head` command, it will print
    the first 10 lines of the file, and if we use the `tail` command it''ll print
    the last 10 lines. Let''s have a look at this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`head`实用程序是`tail`的相反；它默认显示前10行。例如，我们有一个名为`states.txt`的文件，其中按字母顺序列出了美国各州的名称。如果我们使用`head`命令，它将打印文件的前10行，如果我们使用`tail`命令，它将打印最后10行。让我们来看一下这个：'
- en: '![Printing the first 10 and the last 10 entries of a file using the head and
    tail utility.](img/B15455_03_12.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![使用head和tail实用程序打印文件的前10个和最后10个条目。](img/B15455_03_12.jpg)'
- en: 'Figure 3.12: Using head and tail utilities to list the first and last 10 entries
    of the file'
  id: totrans-279
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.12：使用head和tail实用程序列出文件的前10个和最后10个条目
- en: 'It recognizes the same parameters as `head` to modify that behavior. But there
    is an extra parameter that makes this utility extremely useful for logging purposes.
    `-f` appends the output as the file grows; it''s a way of following and monitoring
    the content of a file. A very well-known example is:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 它识别与`head`相同的参数以修改其行为。但是有一个额外的参数，使得这个实用程序对于日志记录非常有用。`-f`在文件增长时追加输出；这是一种跟踪和监视文件内容的方法。一个非常著名的例子是：
- en: '[PRE42]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Searching in Text Files
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在文本文件中搜索
- en: You might have heard that everything in Linux is a file. Also, many things in
    Linux are managed by text streams and text files. Sooner or later, you will want
    to search the text in order to make modifications. This can be done by using regular
    expressions. A regular expression (regex for short) is a pattern of special characters
    and text used to match strings when performing a search. Regular expressions are
    used by many applications with a built-in processor, such as the Emacs and vi
    text editors, and utilities such as `grep`, `awk`, and `sed`. Many scripting and
    programming languages have support for regular expressions.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能听说过Linux中的一切都是文件。此外，Linux中的许多东西都是由文本流和文本文件管理的。迟早，您会想要搜索文本以进行修改。这可以通过使用正则表达式来实现。正则表达式（简称regex）是一种特殊字符和文本的模式，用于在执行搜索时匹配字符串。正则表达式被许多应用程序使用，这些应用程序具有内置处理器，例如Emacs和vi文本编辑器，以及`grep`、`awk`和`sed`等实用程序。许多脚本和编程语言都支持正则表达式。
- en: In this book, we'll only cover the basics of this topic—just enough that you
    can use them in your daily system administration tasks.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只会涵盖这个主题的基础知识——足够让您在日常系统管理任务中使用它们。
- en: 'Every regular expression is built around an atom. The atom identifies what
    text is to be matched and where it is to be found when doing a search. It could
    be a known single-character item (or a dot if you don''t know the character),
    a class, or a range, such as:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 每个正则表达式都是围绕一个原子构建的。原子标识要匹配的文本以及在进行搜索时要找到的位置。它可以是已知的单个字符项（或者如果您不知道字符，则是一个点），一个类，或者一个范围，比如：
- en: '![A table showing how to express multiple single character items and ranges
    using regular expressions.](img/B15455_03_13.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![一个表格，显示如何使用正则表达式来表示多个单个字符项和范围。](img/B15455_03_13.jpg)'
- en: 'Figure 3.13: Examples of atom'
  id: totrans-287
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.13：原子的示例
- en: 'A regex can also be expressed in the form of a shorthand class. Here are a
    few examples of shorthand classes:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式也可以以简写类的形式表示。以下是一些简写类的示例：
- en: '![A list of different regular expressions expressed in the form of a shorthand
    class.](img/B15455_03_14.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![以简写类的形式表示不同正则表达式的列表。](img/B15455_03_14.jpg)'
- en: 'Figure3.14: Examples of shorthand classes'
  id: totrans-290
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.14：简写类的示例
- en: 'We can use position anchors to determine where to find the next character.
    Some popular ones are:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用位置锚点来确定下一个字符的位置。一些常用的位置锚点包括：
- en: '![List of important position anchors to determine where to find the next character.](img/B15455_03_15.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![重要位置锚点列表，用于确定下一个字符的位置。](img/B15455_03_15.jpg)'
- en: 'Figure 3.15: List of position anchors'
  id: totrans-293
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.15：位置锚点列表
- en: 'Using a repetition operator, you can specify how many times a character should
    appear:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 使用重复运算符，您可以指定字符应该出现多少次：
- en: '![List of repetition operators](img/B15455_03_16.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![重复运算符列表](img/B15455_03_16.jpg)'
- en: 'Figure 3.16: List of repetition operators'
  id: totrans-296
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.16：重复运算符列表
- en: 'A few examples are as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 一些例子如下：
- en: If you search for the character `b` and the word `boom` is found, it will match
    the letter `b`. If you search for `bo`, it will match these characters in this
    order.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果搜索字符`b`并找到单词`boom`，它将匹配字母`b`。如果搜索`bo`，它将按照这个顺序匹配这些字符。
- en: If you search for `bo{,2}m`, the words `bom` and `boom` will match. But if the
    word `booom` exists, it will not match.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您搜索`bo{,2}m`，单词`bom`和`boom`将匹配。但如果存在单词`booom`，它将不匹配。
- en: If you search for `^bo{,2}m`, there will be only a match if the word `boom`
    is at the beginning of a line.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您搜索`^bo{,2}m`，只有当单词`boom`位于行的开头时才会匹配。
- en: 'A reference for regular expressions can be found using:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下内容找到正则表达式的参考：
- en: '[PRE43]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: One utility we've already mentioned is the `grep` utility, which is used to
    search in text files. There are multiple versions of this utility; nowadays, `egrep`
    is the most commonly used version because it has the most complete regular expression
    support, including shorthand ranges and the OR alternation operator, `|`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到的一个实用程序是`grep`实用程序，它用于在文本文件中进行搜索。这个实用程序有多个版本；如今，`egrep`是最常用的版本，因为它具有最完整的正则表达式支持，包括简写范围和OR交替运算符`|`。
- en: 'Common options for `egrep` and `grep` are:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`egrep`和`grep`的常见选项包括：'
- en: '![A table listing common options for egrep and grep.](img/B15455_03_17.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![列出了egrep和grep的常见选项的表格。](img/B15455_03_17.jpg)'
- en: 'Figure 3.17: egrep and grep options'
  id: totrans-306
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.17：egrep和grep选项
- en: You can also take look at the other options by checking the man page.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过查看man页面来查看其他选项。
- en: 'Here''s a simple example of `grep`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`grep`的一个简单示例：
- en: '![grep example](img/B15455_03_18.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![grep示例](img/B15455_03_18.jpg)'
- en: 'Figure 3.18: grep example'
  id: totrans-310
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.18：grep示例
- en: Another utility that is very useful is `awk`. Now, `awk` is a utility that was
    created by the developers Alfred Aho, Peter Weinberger, and Brian Kernighan. It
    is a scripting language used for text files which is used to generate and manipulate
    log files or reports. `awk` doesn't require any compiling, and you can mention
    the fields required in the report.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的实用程序是`awk`。现在，`awk`是由开发人员Alfred Aho、Peter Weinberger和Brian Kernighan创建的实用程序。它是用于生成和操作日志文件或报告的文本文件的脚本语言。`awk`不需要任何编译，您可以在报告中提及所需的字段。
- en: 'Let''s look at an example:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE44]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: It scans the `/etc/passwd` file and splits the content using the field separator,
    the colon. It searches for the line starting with the `root` string and prints
    some text (`Homedir of root:`) and the sixth column.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 它扫描`/etc/passwd`文件，并使用字段分隔符冒号来拆分内容。它搜索以`root`字符串开头的行，并打印一些文本（`root的主目录：`）和第六列。
- en: Editing Text Files
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑文本文件
- en: Because text files are so important in Linux, a text editor is very important.
    Every distribution has one or more editors in their repositories for both graphical
    and non-graphical environments. You can be sure that at least vim, a modern vi
    implementation, and Emacs are available. There is an ongoing war between vi lovers
    and Emacs lovers—they have been insulting each other for decades and will do so
    for many decades to come.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文本文件在Linux中非常重要，因此文本编辑器非常重要。每个发行版都在其存储库中提供一个或多个编辑器，用于图形和非图形环境。您可以肯定至少有vim（现代vi实现）和Emacs可用。vi爱好者和Emacs爱好者之间一直存在着一场战争——他们已经互相侮辱了几十年，并将在未来的几十年内继续这样做。
- en: We are not going to make the decision for you; instead, if you are already familiar
    with one of them, stick with it. If you don't know vi or Emacs, try them both
    for a while and decide for yourself.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会为您做决定；相反，如果您已经熟悉其中一个，请坚持下去。如果您不了解vi或Emacs，请尝试一段时间并自行决定。
- en: 'There are also some other editors available:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他可用的编辑器：
- en: '`nano`, a free clone of proprietary Pico, the text-editor component of the
    Pine email client'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nano`，专有Pico的免费克隆，Pico是Pine电子邮件客户端的文本编辑器组件'
- en: '`mcedit`, a part of the **Midnight Commander** (**MC**) file manager that can
    run standalone as well'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mcedit`，**Midnight Commander**（**MC**）文件管理器的一部分，可以独立运行'
- en: '`joe`, which can emulate the keybindings of nano, Emacs, and a very old word
    processor called WordStar (note that, for CentOS, this editor is not available
    in the standard repository, but is in a third-party repository).'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joe`，它可以模拟nano、Emacs和一个名为WordStar的非常古老的文字处理器的键绑定（请注意，对于CentOS，这个编辑器在标准存储库中不可用，但在第三方存储库中可用）。'
- en: Note
  id: totrans-322
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to learn about vi, execute the `vimtutor` command, a tutorial that
    comes with vim. It's a good starting point for learning all the basics of navigation,
    the commands, and text editing in vi.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解vi，请执行`vimtutor`命令，这是随vim一起提供的教程。这是学习vi中所有基础知识、命令和文本编辑的良好起点。
- en: Emacs comes with a very good help function that you can access in Emacs via
    *Ctrl* + *H* + *R*.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Emacs带有一个非常好的帮助功能，您可以通过*Ctrl* + *H* + *R*在Emacs中访问。
- en: 'Another way to edit text streams and files is by using the non-interactive
    text editor sed. Instead of text files editing opening a file in a text editor
    window, it processes a file or stream from the shell. It''s a handy utility if
    you want to do the following:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑文本流和文件的另一种方法是使用非交互式文本编辑器sed。它不是通过在文本编辑器窗口中打开文件来编辑文本文件，而是通过shell处理文件或流。如果您想要执行以下操作，它是一个方便的实用程序：
- en: Perform edits on file(s) automatically
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动对文件进行编辑
- en: On multiple files, make the same edits
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个文件上进行相同的编辑
- en: Write a conversion program—for example, to change between lowercase and uppercase,
    or even more complex conversions
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个转换程序，例如，在小写和大写之间进行转换，甚至更复杂的转换
- en: The syntax of the sed editor is very similar to the commands of the vi editor,
    and can be scripted.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: sed编辑器的语法与vi编辑器的命令非常相似，并且可以进行脚本化。
- en: 'The default behavior for sed is not to edit the file itself, but to dump the
    changes to the standard output. You can redirect this output to another file or
    use the `-i` parameter, which stands for `sed` command:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: sed的默认行为不是编辑文件本身，而是将更改转储到标准输出。您可以将此输出重定向到另一个文件，或者使用`-i`参数，该参数代表`sed`命令：
- en: '[PRE45]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: It will search for a string, replace it, and continue searching and replacing
    until the end of the file.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 它将搜索一个字符串，替换它，并继续搜索和替换直到文件末尾。
- en: 'Together with a little bit of scripting, you can edit multiple files in the
    same way:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一点脚本编写，您可以以相同的方式编辑多个文件：
- en: '[PRE46]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can limit the search to a single line:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将搜索限制为单行：
- en: '[PRE47]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `info` page of `sed` is a great resource for all the commands and, more
    importantly, it has an example section if you want to know more.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed`的`info`页面是所有命令的重要资源，更重要的是，它有一个示例部分，如果您想了解更多。'
- en: Finding Your Way in the Filesystem
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在文件系统中找到自己的方法
- en: 'Now that you know how to manipulate and edit text files, it''s time to see
    how these files are stored in the system. As a system administrator, you will
    have to check, mount, or even unmount the drives. So, now let''s take a close
    look at the filesystem in Linux. The layout of the Linux filesystem is like all
    other members of the Unix family: very different from Windows. There is no concept
    of drive letters. Instead, there is a root filesystem (`/`), and everything else
    is available on the root filesystem, including other mounted filesystems.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何操作和编辑文本文件了，是时候看看这些文件是如何存储在系统中的了。作为系统管理员，您将不得不检查、挂载甚至卸载驱动器。因此，现在让我们仔细看看Linux中的文件系统。Linux文件系统的布局与Unix家族的其他成员一样：与Windows非常不同。没有驱动器字母的概念。相反，有一个根文件系统（`/`），并且根文件系统上包括其他已挂载的文件系统在内的所有其他内容都可用。
- en: In this section, you'll learn where you can find files, and why they are there.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解文件的存放位置以及它们为何在那里。
- en: The Filesystem Hierarchy Standard
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件系统层次结构标准
- en: In 2001, the Linux Foundation started the **Linux Standard Base Project** (**LSB**).
    Based on the POSIX specification, the idea behind this process was to have a standardized
    system so that applications can run on any compatible Linux distribution.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年，Linux基金会启动了Linux标准基础项目（LSB）。基于POSIX规范，这个过程的想法是建立一个标准化的系统，使应用程序可以在任何兼容的Linux发行版上运行。
- en: The **Filesystem Hierarchy Standard** (**FHS**) is a part of this project and
    defines the directory structure and directory contents. Of course, there are still
    some minor differences between distributions regarding the directory structure,
    but even on distributions that are not willing to fully support the LSB, such
    as Debian, the directory structure follows the FHS.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统层次结构标准（FHS）是该项目的一部分，定义了目录结构和目录内容。当然，不同发行版之间仍然存在一些关于目录结构的细微差异，但即使在不愿意完全支持LSB的发行版上，如Debian，目录结构也遵循FHS。
- en: The following screenshots are taken from a CentOS system, using the `tree` utility
    to show the directory structure. If `tree` is not installed on your system, the
    shell will prompt you with the command to install. Please do so.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图来自一个CentOS系统，使用tree实用程序显示目录结构。如果您的系统上没有安装tree，则shell会提示您安装该命令。请安装。
- en: 'In the root filesystem, the following directories are available:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在根文件系统中，有以下目录：
- en: '![Viewing the directory structure of the root filesystem using the tree utility.](img/B15455_03_19.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![使用tree实用程序查看根文件系统的目录结构。](img/B15455_03_19.jpg)'
- en: 'Figure 3.19: Displaying the directory structure using the tree utility'
  id: totrans-347
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.19：使用tree实用程序显示目录结构
- en: The `tree` command will layout the filesystem in a tree-like structure. Alternatively,
    you can use `ls -lah /` to see the structure in a list format.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: tree命令将以树状结构布局文件系统。或者，您可以使用ls -lah /以列表格式查看结构。
- en: 'The following directories are present in the screenshot:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下目录在截图中出现：
- en: '`/bin`: Contains programs that you need on a minimal system to be executed
    by an unprivileged user such as a shell. On Red Hat–based systems, this directory
    is a symbolic link to `/usr/bin`. Commands such as `ps`, `ls`, and `ping` are
    stored here.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /bin：包含在最小系统上需要由非特权用户执行的程序，如shell。在基于Red Hat的系统中，此目录是指向/usr/bin的符号链接。命令如ps、ls和ping都存储在这里。
- en: '`/sbin`: Contains programs that you need on a minimal system to be executed
    by a privileged user (`root`), such as filesystem repair utilities. On Red Hat
    Enterprise Linux–based systems, this directory is a symbolic link to `/usr/sbin`.
    Examples include `iptables`, `reboot`, `fdisk`, `ifconfig`, and `swapon`.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /sbin：包含在最小系统上需要由特权用户（root）执行的程序，如文件系统修复工具。在基于Red Hat Enterprise Linux的系统中，此目录是指向/usr/sbin的符号链接。例如iptables、reboot、fdisk、ifconfig和swapon。
- en: '`/dev`: Devices are mounted on a special filesystem called `devfs`. All peripheral
    devices are here, such as the serial port, disks, and CPUs—except the network
    interface. Examples: `/dev/null`, `/dev/tty1`.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /dev：设备挂载在一个叫做devfs的特殊文件系统上。所有外围设备都在这里，如串行端口、磁盘和CPU，但不包括网络接口。例如：/dev/null、/dev/tty1。
- en: '`/proc`: Processes are mounted on a special filesystem called `procfs`.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /proc：进程挂载在一个叫做procfs的特殊文件系统上。
- en: '`/sys`: Hardware information on the `sysfs` filesystem.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /sys：sysfs文件系统上的硬件信息。
- en: '`/etc`: Consists of editable text configuration files required by all programs.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /etc：由所有程序需要的可编辑文本配置文件组成。
- en: '`/lib`: Library for drivers and non-editable text configuration files. Library
    filenames are either `ld*` or `lib*.so.*`, for example, `libutil-2.27.so`, or
    `libthread_db-1.0.so`.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /lib：驱动程序和不可编辑文本配置文件的库。库文件名要么是ld*，要么是lib*.so.*，例如libutil-2.27.so或libthread_db-1.0.so。
- en: '`/lib64`: Libraries for drivers, but no configuration files.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /lib64：驱动程序的库，但没有配置文件。
- en: '`/boot`: Kernel and boot-loader. Examples: `initrd.img-2.6.32-24-generic`,
    `vmlinuz-2.6.32-24-generic`.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /boot：内核和引导加载程序。例如：initrd.img-2.6.32-24-generic、vmlinuz-2.6.32-24-generic。
- en: '`/root`: User data for the `root` user. Only the `root` user has the right
    to write to this directory. `/root` is the `root` user''s home directory, which
    is not the same as `/`.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /root：root用户的用户数据。只有root用户有权写入此目录。/root是root用户的主目录，不同于/。
- en: '`/home`: User data for unprivileged users. Similar to the `C:\Users\username`
    folder in Windows.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /home：非特权用户的用户数据。类似于Windows中的C:\Users\username文件夹。
- en: '`/media`: Removable media, such as CD-ROM and USB drives, are mounted here.
    At least read-only for every user. Examples include `/media/cdrom` for CD-ROM,
    `/media/floppy` for floppy drives, and `/media/cdrecorder` for CD writers.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /media：可移动介质，如CD-ROM和USB驱动器，都挂载在这里。每个用户至少有只读权限。例如，/media/cdrom用于CD-ROM，/media/floppy用于软盘驱动器，/media/cdrecorder用于CD刻录机。
- en: '`/mnt`: Non-removable media, including remote storage. At least read-only for
    every user.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /mnt：包括远程存储在内的不可移动介质。每个用户至少有只读权限。
- en: '`/run`: Files specific for a user or process, for instance, USB drivers that
    should be available for a specific user, or runtime information for a daemon.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /run：特定用户或进程的文件，例如应该对特定用户可用的USB驱动程序，或者守护进程的运行时信息。
- en: '`/opt`: Optional software that is not a part of the distribution, such as third-party
    software.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /opt：不是发行版的一部分的可选软件，如第三方软件。
- en: '`/srv`: Static server data. It can be used for static websites, file servers,
    and orchestration software such as Salt or Puppet.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /srv：静态服务器数据。可用于静态网站、文件服务器和Salt或Puppet等编排软件。
- en: '`/var`: Dynamic data. Ranges from print spoolers and logging to dynamic websites.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /var：动态数据。从打印队列和日志到动态网站都有。
- en: '`/tmp`: Temporary files, not persistent during reboots. Nowadays, it''s often
    a RAM filesystem (`tmpfs`) that is mounted on this directory. The directory itself
    is more or less deprecated and from an application perspective, replaced with
    a directory in `/var` or `/run`.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp`: 临时文件，在重新启动期间不会保留。现在，它通常是挂载在这个目录上的RAM文件系统（`tmpfs`）。这个目录本身已经过时，从应用程序的角度来看，已经被`/var`或`/run`中的目录取代。'
- en: '`/usr`: It contains all extra software-related binaries, documentation, and
    source code.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr`: 包含所有额外的与软件相关的二进制文件、文档和源代码。'
- en: 'Use the `tree` command again to show the directory structure in `/usr`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`tree`命令显示`/usr`中的目录结构：
- en: '![Directory structure in the /usr directory](img/B15455_03_20.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![/usr目录中的目录结构](img/B15455_03_20.jpg)'
- en: 'Figure 3.20: Directory structure in the /usr directory'
  id: totrans-371
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.20：/usr目录中的目录结构
- en: 'The directory structure of `/usr` is very similar to the structure of `/`.
    A few extra directories were added:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`/usr`的目录结构与`/`的结构非常相似。添加了一些额外的目录：'
- en: '`/usr/etc`: If you recompile software that is already a part of the distribution,
    the configuration files should be in `/usr/etc`, so they can''t conflict with
    files in `/etc`.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/etc`: 如果重新编译已经是发行版的一部分的软件，配置文件应该在`/usr/etc`中，这样它们就不会与`/etc`中的文件冲突。'
- en: '`/usr/games`: Data for old games such as `fortune`, `figlet`, and `cowsay`.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/games`: 旧游戏的数据，比如`fortune`、`figlet`和`cowsay`。'
- en: '`/usr/include`: Development headers.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/include`: 开发头文件。'
- en: '`/usr/libexec`: Wrapper scripts. Let''s say you need multiple versions of Java.
    They all need different libraries, environment variables, and so on. A wrapper
    script is there to call a specific version with the correct settings.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/libexec`: 包装脚本。比如说你需要多个版本的Java。它们都需要不同的库、环境变量等。包装脚本用于调用具有正确设置的特定版本。'
- en: '`/usr/share`: Program data such as wallpaper, menu items, icons, and documentation.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/share`: 程序数据，如壁纸、菜单项、图标和文档。'
- en: '`/usr/src`: Linux kernel sources and sources from software that is included
    in the distribution.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/src`: Linux内核源代码和发行版中包含的软件的源代码。'
- en: '`/usr/local`: Software that you install and compile yourself.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/usr/local`: 你自己安装和编译的软件。'
- en: 'The directory structure of `/usr/local` is the same as `/usr`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`/usr/local`的目录结构与`/usr`相同：'
- en: '![Directory structure in the /usr/local directory](img/B15455_03_21.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![/usr/local目录中的目录结构](img/B15455_03_21.jpg)'
- en: 'Figure 3.21: Directory structure of the /usr/local directory'
  id: totrans-382
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.21：/usr/local目录的目录结构
- en: This directory is there for software development. There is no need to have this
    directory in a production environment.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录是为了软件开发而存在的。在生产环境中不需要有这个目录。
- en: 'Optional software is placed in `/opt`. The main directory structure is `/opt/<vendor>/<software>/`,
    for example, `/opt/google/chrome`. A list of the possible vendor/provider names
    is maintained by the `/usr` and `/usr/local`, with one exception: you can choose
    between `/conf` and `/etc` in the software directory or in the `/etc/opt` directory.
    Non-native Linux software such as PowerShell can use its own structure within
    the software directory.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 可选软件放在`/opt`中。主目录结构是`/opt/<vendor>/<software>/`，例如`/opt/google/chrome`。可能的供应商/提供者名称列表由`/usr`和`/usr/local`维护，有一个例外：你可以在软件目录或`/etc/opt`目录中选择`/conf`和`/etc`之间。非本地Linux软件，如PowerShell，可以在软件目录内使用自己的结构。
- en: Mounting Filesystems
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 挂载文件系统
- en: 'It may be a good idea to define the root filesystem more precisely. The root
    filesystem is the filesystem where the root directory, `/`, is located. All other
    filesystems are mounted on directories created on this root filesystem. To find
    out what directories are local to the root filesystem and which ones are mount
    points, execute the `findmnt` command:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 更精确地定义根文件系统可能是个好主意。根文件系统是根目录`/`所在的文件系统。所有其他文件系统都挂载在这个根文件系统上创建的目录上。要找出哪些目录是根文件系统本地的，哪些是挂载点，执行`findmnt`命令：
- en: '![Using findmnt command to determine which directories are local to the root
    filesystem and which ones are mount points.](img/B15455_03_22.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![使用findmnt命令确定哪些目录是根文件系统本地的，哪些是挂载点。](img/B15455_03_22.jpg)'
- en: 'Figure 3.22: Using the findmnt command to find mount points'
  id: totrans-388
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.22：使用findmnt命令查找挂载点
- en: 'Adding the `-D` parameter will show you the size of the filesystem and the
    amount of space that is available:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`-D`参数将显示文件系统的大小和可用空间量：
- en: '![Listing the file size and available space by running the findmnt -D command.](img/B15455_03_23.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![通过运行findmnt -D命令列出文件大小和可用空间。](img/B15455_03_23.jpg)'
- en: 'Figure 3.23: Listing the file size and available space with the findmnt -D
    command'
  id: totrans-391
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.23：使用findmnt -D命令列出文件大小和可用空间
- en: 'The `findmnt` command is a great way to find out where a device is mounted,
    for instance:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`findmnt`命令是查找设备挂载位置的好方法，例如：'
- en: '[PRE48]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If a directory is not a mount point, use the `-T` parameter:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个目录不是挂载点，使用`-T`参数：
- en: '[PRE49]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In *Chapter 5, Advanced Linux Administration*, the different filesystems, and
    how to mount and automatically mount local and remote filesystems, are covered
    in detail.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第5章，高级Linux管理*中，详细介绍了不同的文件系统，以及如何挂载和自动挂载本地和远程文件系统。
- en: Finding Files on the Filesystem
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在文件系统上查找文件
- en: Searching for files on the filesystem can be done with the `find` command. Unfortunately,
    if you are not already familiar with this command, the man page may be overwhelming
    and not very easy to read. However, if you understand the basics of this command,
    the man page will help you add parameters to search every property of a file or
    directory, or both.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件系统上搜索文件可以使用`find`命令。不幸的是，如果你对这个命令不熟悉，man页面可能会让人不知所措，而且很难阅读。然而，如果你了解这个命令的基本原理，man页面将帮助你添加参数来搜索文件或目录的每个属性，或者两者兼而有之。
- en: The first possible parameters of the `find` command are options. These affect
    the behavior of the `find` command, that is, whether it should follow symbolic
    links and debug and speed optimization options. Options are optional—most of the
    time you don't need them.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`命令的第一个可能参数是选项。这些选项影响`find`命令的行为，即它是否应该遵循符号链接以及调试和速度优化选项。选项是可选的——大多数情况下您不需要它们。'
- en: 'After the options, the next parameter tells the `find` command where to start
    the search process. It is not a very good idea to start at the root (`/`) directory;
    it takes too much time and can consume too much CPU activity on large filesystems.
    Remember the FHS—for instance, if you want to search configuration files, start
    searching in the `/etc` directory:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项之后，下一个参数告诉`find`命令在哪里开始搜索过程。从根目录(`/`)开始搜索不是一个很好的主意；它会花费太多时间，并且可能在大型文件系统上消耗太多CPU活动。记住FHS——例如，如果要搜索配置文件，请从`/etc`目录开始搜索：
- en: '[PRE50]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The preceding command will show you all the files in `/etc`.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将显示`/etc`中的所有文件。
- en: 'After the location, the next parameter is an expression containing one or more
    tests. To list the most common tests, use the following:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在位置之后，下一个参数是包含一个或多个测试的表达式。要列出最常见的测试，请使用以下命令：
- en: '`-type`, `f` for file, `d` for directory, `b` for block device'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-type`，`f`表示文件，`d`表示目录，`b`表示块设备'
- en: '`-name <pattern>`'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-name <pattern>`'
- en: '`-user` and `-group`'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-user`和`-group`'
- en: '`-perm`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-perm`'
- en: '`-size`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-size`'
- en: '`-exec`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-exec`'
- en: 'You can perform a combination of these tests. For instance, to search for files
    with filenames that end in `conf`, use the following:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行这些测试的组合。例如，要搜索以`conf`结尾的文件，请使用以下命令：
- en: '[PRE51]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'For some tests, such as `size` and `atime`, it''s possible to add a so-called
    comparison with a provided parameter:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些测试，如`size`和`atime`，可以添加所谓的与提供的参数进行比较：
- en: '`+n`: Greater than `n`'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+n`：大于`n`'
- en: '`-n`: Less than `n`'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`：小于`n`'
- en: '`n`: Exactly `n`'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：正好`n`'
- en: 'The `find` command searches for files and directories and compares them to
    the value of `n`:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`命令搜索文件和目录，并将它们与`n`的值进行比较：'
- en: '[PRE52]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This example will search for directories with content that exceeds 100 MB.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将搜索内容超过100MB的目录。
- en: 'The last parameter is the action that should be executed on the files that
    were found. Examples include:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数是应在找到的文件上执行的操作。示例包括：
- en: '`-ls`, output is similar to the `ls` command.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ls`，输出类似于`ls`命令。'
- en: '`-print` to print the filenames.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-print`打印文件名。'
- en: '`-printf` to format the output of the `-print` command.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-printf`格式化`-print`命令的输出。'
- en: '`-fprintf` to write the formatted output to a file.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-fprintf`将格式化输出写入文件。'
- en: 'The `-printf` parameter can be extremely useful. For instance, this command
    will search for files and list their size in bytes and the filename. After that,
    you can use the `sort` command to sort files by size:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`-printf`参数非常有用。例如，此命令将搜索文件并列出其大小（以字节为单位）和文件名。之后，您可以使用`sort`命令按大小对文件进行排序：'
- en: '[PRE53]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'There are some more dangerous actions as well, such as `-delete` to remove
    the files found and `-exec` to execute an external command. Be very sure of the
    result of your search action before using these parameters. Most of the time,
    performance-wise, you are better off using the `xargs` utility anyway. This utility
    takes the results and converts them into arguments to a command. An example of
    such a command is as follows; the `grep` utility is being used to search the content
    of the result:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些更危险的操作，例如`-delete`删除找到的文件和`-exec`执行外部命令。在使用这些参数之前，请非常确定搜索操作的结果。大多数情况下，从性能的角度来看，您最好使用`xargs`实用程序。此实用程序将结果转换为命令的参数。这样的命令示例如下；`grep`实用程序用于搜索结果的内容：
- en: '[PRE54]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Process Management
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程管理
- en: In the previous section, we discussed the filesystem in Linux. From a system
    administrator's perspective, managing processes is crucial. There will be scenarios
    where you'll need to start, stop, or even kill processes. Also, to avoid throttling
    your machine, you need to be cautious about the processes running on the system.
    Let's take a closer look at process management in Linux.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了Linux中的文件系统。从系统管理员的角度来看，管理进程至关重要。会有一些情况，您需要启动、停止，甚至杀死进程。此外，为了避免使您的机器过载，您需要谨慎处理系统上运行的进程。让我们更仔细地看看Linux中的进程管理。
- en: Processes are run by the Linux kernel, started by a user, or created by other
    processes. All processes are child processes of process number one, which will
    be covered in the next chapter. In this section, we'll learn to identify processes
    and how to send a signal to a process.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 进程由Linux内核运行，由用户启动，或由其他进程创建。所有进程都是进程编号为1的子进程，这将在下一章中介绍。在本节中，我们将学习如何识别进程以及如何向进程发送信号。
- en: View Processes
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看进程
- en: If you start a program, a `/proc`.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启动一个程序，会有一个`/proc`。
- en: 'In Bash, you can find the PID of the current shell with:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bash中，您可以使用以下命令找到当前shell的PID：
- en: '[PRE55]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You can also find the PID of the parent shell:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以找到父shell的PID：
- en: '[PRE56]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To find the PID of a program on your filesystem, use the `pidof` utility:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 要在文件系统上找到程序的PID，请使用`pidof`实用程序：
- en: '[PRE57]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You might see multiple PIDs returned by the shell. If you want to return only
    one PID, use the `-s` parameter, which stands for single shot:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会看到shell返回多个PID。如果您只想返回一个PID，请使用`-s`参数，表示单次射击：
- en: '[PRE58]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Let''s have a look in the `proc` directory of the current shell:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看当前shell的`proc`目录：
- en: '![Navigating to the /proc directory and listing all of its contents using ls](img/B15455_03_24.jpg)'
  id: totrans-442
  prefs: []
  type: TYPE_IMG
  zh: '![导航到/proc目录并使用ls列出其所有内容](img/B15455_03_24.jpg)'
- en: 'Figure 3.24: proc directory of the current shell'
  id: totrans-443
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.24：当前shell的proc目录
- en: 'You can see all the properties of this process. Let''s look at some of them:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看此进程的所有属性。让我们看看其中一些：
- en: '`cmdline`: The command that is executed to create this process'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmdline`：执行此进程的命令'
- en: '`environ`: The environment variables that are available to this process'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environ`：此进程可用的环境变量'
- en: '`status`: The status of the file, the **UID** (**User Identifier**), and the
    **GID** (**Group Identifier**) of the user/group that owns the process'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`：文件的状态，**UID**（**用户标识符**）和拥有该进程的用户/组的**GID**（**组标识符**）'
- en: 'If you execute `cat environ`, the output is difficult to read because the end-of-line
    character is `\0` instead of `\n`. You can fix this using the `tr` command to
    translate the `\0` into `\n`:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行`cat environ`，输出将很难阅读，因为换行符是`\0`而不是`\n`。您可以使用`tr`命令将`\0`转换为`\n`来解决这个问题：
- en: '[PRE59]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The `proc` directory is very interesting for troubleshooting, but there are
    also many tools that use this information to produce more human-friendly output.
    One of these utilities is the `ps` command. There is something strange about this
    command; it supports three different types of parameters:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`proc`目录对故障排除非常有趣，但也有许多工具使用这些信息生成更人性化的输出。其中一个实用程序是`ps`命令。这个命令有一些奇怪之处；它支持三种不同类型的参数：'
- en: '`ps -ef` is the same as `ps -e -f`.'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps -ef`与`ps -e -f`相同。'
- en: '`ps ax` is the same as `ps a x`.'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps ax`与`ps a x`相同。'
- en: '**GNU style**: Preceded by a double dash and a long-named option. Commands
    cannot be grouped.'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU风格**：由双破折号和长命名选项前导。命令不能分组。'
- en: 'The output formatting for the three styles is not the same, but you can modify
    the behavior with options. A comparison follows:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 三种样式的输出格式不同，但您可以使用选项修改行为。以下是比较：
- en: '![Running the ps command using its three different types of parameters.](img/B15455_03_25.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![使用ps命令及其三种不同类型参数运行ps命令。](img/B15455_03_25.jpg)'
- en: 'Figure 3.25: Using the ps utility with its parameters'
  id: totrans-456
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.25：使用带参数的ps实用程序
- en: The processes between square brackets are kernel processes.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号中的进程是内核进程。
- en: 'You can query for specific values, for instance:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查询特定值，例如：
- en: '[PRE60]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'This is the same as:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以下内容相同：
- en: '[PRE61]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Another utility that can help you search for a process is `pgrep`. It searches
    on values such as the name and user and shows the PID by default. The output can
    be formatted using parameters such as `-l` to list the process name, or `-o` to
    add the full command to the output.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以帮助您搜索进程的实用程序是`pgrep`。它可以根据名称和用户等值进行搜索，并默认显示PID。输出可以使用参数进行格式化，例如使用`-l`列出进程名称，或使用`-o`将完整命令添加到输出中。
- en: 'An interactive way to monitor processes uses the `top` command:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`top`命令监视进程的交互方式：
- en: '![Monitoring processes using the top command](img/B15455_03_26.jpg)'
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![使用top命令监视进程](img/B15455_03_26.jpg)'
- en: 'Figure 3.26: Monitoring processes using the top command'
  id: totrans-465
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.26：使用top命令监视进程
- en: The values in the columns for a process visible in `top` are the same as in
    `ps`. In the man page of `top`, you can find a good explanation of what they mean.
    Some of them will be covered in later chapters.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在`top`中可见的进程的列中的值与`ps`中的值相同。在`top`的手册页中，您可以找到对它们含义的很好解释。其中一些将在后面的章节中介绍。
- en: The `top` command, or the fancier `htop` command, can help you to quickly identify
    processes taking too much memory or CPU and send a signal to the process. If you
    want detailed and advanced process monitoring and troubleshooting, it's better
    to use the tooling available in Azure. This is covered in *Chapter 11, Troubleshooting
    and Monitoring Your Workloads*.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`top`命令或更高级的`htop`命令可以帮助您快速识别占用过多内存或CPU的进程，并向进程发送信号。如果您想要详细和高级的进程监视和故障排除，最好使用Azure中提供的工具。这将在*第11章，故障排除和监视工作负载*中介绍。'
- en: Sending Signals to a Process
  id: totrans-468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向进程发送信号
- en: 'In the real world, you might encounter an issue where a particular process
    is consuming a lot of memory. At this point, you might want to send a kill signal
    to the process. Likewise, you may encounter different scenarios while dealing
    with processes. In this section, we will be exploring different signals that can
    be sent to the process. On the man page for signals, section 7, you can find more
    info about signals. A signal is a message to a process, for instance, to change
    the priority or to kill it. There are many different signals described in this
    manual, but only a few are really important:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，您可能会遇到一个问题，即某个特定进程正在消耗大量内存。此时，您可能希望向该进程发送终止信号。同样，在处理进程时，您可能会遇到不同的情况。在本节中，我们将探讨可以发送给进程的不同信号。在信号的手册页第7节中，您可以找到有关信号的更多信息。信号是发送给进程的消息，例如，改变优先级或终止进程。在本手册中描述了许多不同的信号，但只有少数几个真正重要：
- en: '**Signal 1**: This hangs the process; it will reload everything that is attached
    to a process. Commonly used to reread a changed configuration file.'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号1**：这会挂起进程；它将重新加载附加到进程的所有内容。通常用于重新读取更改的配置文件。'
- en: '**Signal 2**: This is the same as *Ctrl* + *C* and *Ctrl* + *Break*.'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号2**：与*Ctrl* + *C*和*Ctrl* + *Break*相同。'
- en: '**Signal 3**: Normal quitting of a process; the same as *Ctrl* + *D*.'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号3**：正常退出进程；与*Ctrl* + *D*相同。'
- en: '**Signal 15**: Default signal, used to terminate a command, giving the terminal
    time to clean up everything nicely.'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号15**：默认信号，用于终止命令，使终端有时间清理一切。'
- en: '**Signal 9**: Kill a command without cleanup. This is dangerous and can make
    your system unstable and sometimes even vulnerable.'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号9**：终止命令而不清理。这很危险，可能会使您的系统不稳定，有时甚至会有漏洞。'
- en: 'If you would like to see the list of signals that can be sent to a process,
    run:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要查看可以发送给进程的信号列表，请运行：
- en: '[PRE62]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'To send a signal to a process, you can use the `top` (shortcut `k`) or `kill`
    command:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 要向进程发送信号，可以使用`top`（快捷键`k`）或`kill`命令：
- en: '[PRE63]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'There is a nice utility you can use to grep a process or group of processes;
    it sends a signal at once: `pkill`. It''s similar to `pgrep`. Selection is possible
    on values such as `name` and `uid`.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个很好的实用程序可以用来grep一个进程或一组进程；它可以一次发送一个信号：`pkill`。它类似于`pgrep`。可以根据`name`和`uid`等值进行选择。
- en: Discretionary Access Control
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自主访问控制
- en: Now that we have covered the filesystem and process management, there should
    be a way to restrict permissions to the files that you are creating. In other
    words, you shouldn't grant everyone access to everything and most organizations
    follow the principle of giving the most granular permissions. **Discretionary
    Access Control** (**DAC**) is a security implementation that restricts access
    to objects such as files and directories. A user or a group of users gets access
    based on ownership and the permissions on the objects.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了文件系统和进程管理，应该有一种方法来限制您创建的文件的权限。换句话说，您不应该授予每个人对所有内容的访问权限，大多数组织都遵循给予最细粒度权限的原则。**自主访问控制**（**DAC**）是一种安全实现，它限制对文件和目录等对象的访问。用户或一组用户根据所有权和对象上的权限获得访问权限。
- en: In cloud environments, user and group management may not be a part of your daily
    job. It's often delegated to identity management systems such as **Active Directory**
    (**AD**), and you don't need many user accounts; authentication and authorization
    at an application level are more important nowadays. But it's still a good idea
    to be able to verify users and know how the underlying system works.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中，用户和组管理可能不是您日常工作的一部分。通常委托给诸如**活动目录**（**AD**）之类的身份管理系统，并且您不需要许多用户帐户；现在在应用程序级别进行身份验证和授权更加重要。但是，能够验证用户并了解基础系统的工作原理仍然是一个好主意。
- en: User Management
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户管理
- en: 'If you deploy a VM in Azure, in the wizard you''ll specify a user, which will
    be created by the Azure Agent user management in the VM—for instance, if you deploy
    a VM with PowerShell:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Azure中部署虚拟机，在向导中您将指定一个用户，该用户将由Azure代理用户管理在虚拟机中创建 - 例如，如果您使用PowerShell部署虚拟机：
- en: '![Deploying a VM with PowerShell](img/B15455_03_27.jpg)'
  id: totrans-485
  prefs: []
  type: TYPE_IMG
  zh: '![使用PowerShell部署虚拟机](img/B15455_03_27.jpg)'
- en: 'Figure 3.27: Deploying a VM with PowerShell'
  id: totrans-486
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.27：使用PowerShell部署虚拟机
- en: You can use this account to log in. It's a normal user, also called an unprivileged
    user, which doesn't have administrative privileges. To gain administrative privileges,
    you need the `sudo` command; `sudo` means superuser do (or do as superuser). Without
    parameters, the `su` command switches your current user to another user, root—the
    administrator account in Linux.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此帐户登录。这是一个普通用户，也称为非特权用户，没有管理权限。要获得管理权限，您需要`sudo`命令；`sudo`表示超级用户执行（或以超级用户身份执行）。没有参数时，`su`命令将当前用户切换到另一个用户，即root
    - Linux中的管理员帐户。
- en: Note
  id: totrans-488
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 备注
- en: If you want root privileges, in some Linux images in Azure you can't use the
    `su` command. It's disabled by default. To get a root shell, you can use `sudo
    -s`. By default, the `sudo` command will ask you for your password.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要root权限，在Azure中的某些Linux映像中，您不能使用`su`命令。它默认禁用。要获取root shell，您可以使用`sudo -s`。默认情况下，`sudo`命令会要求您输入密码。
- en: 'To get more information about this user account, use the `getent` command to
    get an entity from the `passwd` database, where the user information is stored.
    This `passwd` database can be local, stored in a `/etc/passwd` file, or can be
    remote, where a remote server will grant authorization by checking the user database,
    **Lightweight Directory Access Protocol** (**LDAP**) for example:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关此用户帐户的更多信息，请使用`getent`命令从存储用户信息的`passwd`数据库中获取实体。这个`passwd`数据库可以是本地的，存储在`/etc/passwd`文件中，也可以是远程的，远程服务器将通过检查用户数据库（例如**轻量级目录访问协议**（**LDAP**））来授予授权：
- en: '[PRE64]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To get the details for the `linvirt` user:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取`linvirt`用户的详细信息：
- en: '![Using getent to get details of linvirt](img/B15455_03_28.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_IMG
  zh: '![使用getent获取linvirt的详细信息](img/B15455_03_28.jpg)'
- en: 'Figure 3.28: Using getent to get details of linvirt'
  id: totrans-494
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.28：使用getent获取linvirt的详细信息
- en: 'The output of this command is a colon-separated list:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出是一个以冒号分隔的列表：
- en: User account name
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户帐户名
- en: Password
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: User ID
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户ID
- en: Group ID
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组ID
- en: '**General Electric Comprehensive Operating System** (**GECOS**) field for extra
    account information'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用电气综合操作系统**（**GECOS**）字段用于额外的帐户信息'
- en: Home directory for this user
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此用户的主目录
- en: Default shell
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认shell
- en: 'In the early days of the Unix operating system family, the password was stored
    in the `/etc/passwd` file, but for security reasons the hashed password was moved
    to `/etc/shadow`. The password can be changed with:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix操作系统家族的早期，密码存储在`/etc/passwd`文件中，但出于安全原因，哈希密码被移动到`/etc/shadow`。密码可以使用以下命令更改：
- en: '[PRE65]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If you want to change the password of the current user, you don''t need to
    use `sudo`, and don''t need to specify the username. You can view the entry in
    the `/etc/shadow` file with `getent`:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要更改当前用户的密码，不需要使用`sudo`，也不需要指定用户名。您可以使用`getent`在`/etc/shadow`文件中查看条目：
- en: '![Checking password entry using getent command](img/B15455_03_29.jpg)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
  zh: '![使用getent命令检查密码条目](img/B15455_03_29.jpg)'
- en: 'Figure 3.29: Checking password entry using the getent command'
  id: totrans-507
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.29：使用getent命令检查密码条目
- en: 'The columns after the hashed password contain aging information that can be
    viewed (and changed) with the `chage` command. The notation in the shadow database
    is notated by the number of days since epoch (the virtual birthday of Unix: January
    1, 1970). The `chage` command translates it into a more human-readable form:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希密码后的列包含可以使用`chage`命令查看（和更改）的老化信息。阴影数据库中的标记是自Unix的虚拟生日（1970年1月1日）以来的天数。`chage`命令将其转换为更易读的形式：
- en: '![Using chage command to convert epoch to a human-readable date.](img/B15455_03_30.jpg)'
  id: totrans-509
  prefs: []
  type: TYPE_IMG
  zh: '![使用chage命令将epoch转换为可读日期。](img/B15455_03_30.jpg)'
- en: 'Figure 3.30: Using the chage command to get aging information'
  id: totrans-510
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.30：使用chage命令获取老化信息
- en: 'Let''s go back to the `passwd` database. The numbering of the user ID is defined
    in the `/etc/login.defs` file. ID `0` is reserved for the root account. IDs `1`
    to `200` are reserved for `admin` accounts that are not in use any longer in modern
    Linux systems. In Red Hat–based distributions, the range 201–999 is reserved for
    system accounts, and daemons run under these accounts. The range for unprivileged
    accounts is between 1,000 and 60,000 for local users and >60,000 for remote users
    (for example, AD or LDAP users). There are small differences between Linux distributions.
    Let''s summarize the values:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`passwd`数据库。用户ID的编号在`/etc/login.defs`文件中定义。ID `0`保留给root帐户。ID `1`到`200`保留给在现代Linux系统中不再使用的`admin`帐户。在基于Red
    Hat的发行版中，范围201-999保留给系统帐户，和在这些帐户下运行的守护程序。非特权帐户的范围是1,000到60,000用于本地用户，>60,000用于远程用户（例如，AD或LDAP用户）。Linux发行版之间存在一些小差异。让我们总结一下这些值：
- en: '![A table showing the relation between user ID numbers and user types in Linux.](img/B15455_03_31.jpg)'
  id: totrans-512
  prefs: []
  type: TYPE_IMG
  zh: '![显示Linux中用户ID号码和用户类型之间关系的表格。](img/B15455_03_31.jpg)'
- en: 'Figure 3.31: User IDs with their reserved user types'
  id: totrans-513
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.31：用户ID及其保留用户类型
- en: 'Many distributions are configured with the so-called `/etc/login.defs` file:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 许多发行版都配置了所谓的`/etc/login.defs`文件：
- en: '[PRE66]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This means that if you create a user, a primary group is automatically created
    with the same name as the login. If you disable this functionality, a newly created
    user becomes a member of another group automatically, defined in `/etc/default/useradd`:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果您创建一个用户，将自动创建一个与登录名相同的主要组。如果禁用此功能，新创建的用户将自动成为另一个组的成员，该组在`/etc/default/useradd`中定义：
- en: '[PRE67]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The GECOS field can be changed with the `chfn` command:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`chfn`命令更改GECOS字段：
- en: '![Changing GECOS field with the chfn command](img/B15455_03_32.jpg)'
  id: totrans-519
  prefs: []
  type: TYPE_IMG
  zh: '![使用chfn命令更改GECOS字段](img/B15455_03_32.jpg)'
- en: 'Figure 3.32: Changing GECOS field with the chfn command'
  id: totrans-520
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.32：使用chfn命令更改GECOS字段
- en: 'Note:'
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: The `chfn` (change finger) command refers to an old utility, `finger`, which
    is not installed by default but is still available in repositories. A `finger`
    daemon that makes the GECOS information available via the network is available
    as well, but it's considered a security risk.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`chfn`（更改finger）命令是指一个旧实用程序`finger`，它不是默认安装的，但仍然可以在存储库中找到。还有一个`finger`守护程序，可以通过网络提供GECOS信息，但被认为是安全风险。'
- en: 'The default shell while creating a user is defined in `/etc/default/useradd`.
    You can change the default shell to another using the `chsh` command. The shell
    must be listed in the `/etc/shells` file:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建用户时，默认shell在`/etc/default/useradd`中定义。您可以使用`chsh`命令将默认shell更改为另一个。shell必须在`/etc/shells`文件中列出：
- en: '[PRE68]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: For the purpose of this book, keep Bash as the default shell.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，保持Bash作为默认shell。
- en: 'In this section, you learned how to verify and change the properties of an
    existing local user. Of course, you can add additional users as well:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何验证和更改现有本地用户的属性。当然，您也可以添加额外的用户：
- en: '[PRE69]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The `useradd` command has a lot of customization options. You can learn more
    about this using `man useradd`. Alternatively, you can use the `adduser` command:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`useradd`命令有很多自定义选项。您可以使用`man useradd`了解更多信息。或者，您可以使用`adduser`命令：'
- en: '![Adding user with the adduser command](img/B15455_03_33.jpg)'
  id: totrans-529
  prefs: []
  type: TYPE_IMG
  zh: '![使用adduser命令添加用户](img/B15455_03_33.jpg)'
- en: 'Figure 3.33: Adding a user with the adduser command'
  id: totrans-530
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.33：使用adduser命令添加用户
- en: Group Management
  id: totrans-531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组管理
- en: As discussed in the previous chapter, a user will be part of a primary group.
    When you create a user, if you don't specify a group, a group will be created
    with the same name as the username. If you check the previous screenshot, you
    can see a group named `john` for the user `john`.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，用户将成为主要组的一部分。当您创建用户时，如果不指定组，将自动创建一个与用户名相同的组。如果您检查前面的屏幕截图，您可以看到一个名为`john`的组，用于用户`john`。
- en: Besides being a member of a primary group, additional group memberships can
    be added. This is necessary to get access to a group directory/share or to delegate
    privileges in the `sudo` configuration. You can add existing additional groups
    with the `--groups` parameter of the `useradd` command during the creation of
    a user, or afterward with `usermod` or `groupmems`.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 除了是主要组的成员之外，还可以添加额外的组成员资格。这是为了访问组目录/共享或在`sudo`配置中委派权限而必要的。您可以在创建用户时使用`useradd`命令的`--groups`参数添加现有的额外组成员，或者之后使用`usermod`或`groupmems`。
- en: 'Let''s create a new user and a new group and verify the results:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新用户和一个新组，并验证结果：
- en: '[PRE70]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Make the `student` user a member of the `staff` group:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 将`student`用户添加到`staff`组：
- en: '[PRE71]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Alternatively:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE72]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You can change your primary group temporarily with **switch group** (**sg**):'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**switch group**（**sg**）临时更改您的主要组：
- en: '[PRE73]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Note:'
  id: totrans-542
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: It's not very common, but you can add a password to a group account using the
    `gpasswd` command. This way, a user that is not a member of this group can still
    use `sg` and enter the password for the group.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不太常见，但您可以使用`gpasswd`命令为组帐户添加密码。这样，不属于该组的用户仍然可以使用`sg`并输入该组的密码。
- en: A very special group is the `wheel` group. In the `sudo` configuration, a user
    that is a member of this group is able to execute commands that need administrative
    privileges. In Ubuntu, this group is not available; instead, there is a group
    called `sudo` that can be used for the same purpose.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常特殊的组是`wheel`组。在`sudo`配置中，属于这个组的用户能够执行需要管理员权限的命令。在Ubuntu中，这个组不可用；而是有一个名为`sudo`的组，可以用于相同的目的。
- en: Login Management
  id: totrans-545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录管理
- en: In an enterprise environment, administrators are required to collect information
    such as the number of users logged in, the number of invalid logins, and whether
    any authorized users tried to log in for security auditing purposes. In this chapter,
    we'll cover login management in Linux, which is crucial from a security standpoint.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业环境中，管理员需要收集诸如登录用户数、无效登录数以及任何授权用户尝试登录的信息，以进行安全审计。在本章中，我们将介绍Linux中的登录管理，这在安全方面至关重要。
- en: 'Any login into a Linux system is registered, tracked, and managed by a service
    called `systemd-logind` and a corresponding command: `loginctl`. This command
    is available for all Linux distributions; however, if you are using **Windows
    Subsystem for Linux** (**WSL**), due to the lack of systemd, this will not be
    available.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对Linux系统的登录都会被一个名为`systemd-logind`的服务跟踪和管理，以及一个相应的命令：`loginctl`。这个命令适用于所有的Linux发行版；然而，如果你使用**Windows子系统用于Linux**（**WSL**），由于缺乏systemd，这将不可用。
- en: The parameters of this command are divided into sections for users, sessions,
    and seats. To do some exercises with these parameters, open a second `ssh` session
    to your VM using the credentials of the student account. Execute the commands
    in the first `ssh` session.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的参数分为用户、会话和座位三个部分。要使用这些参数进行一些练习，使用学生账户的凭据在你的VM上打开第二个`ssh`会话。在第一个`ssh`会话中执行命令。
- en: 'First, list the sessions:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，列出会话：
- en: '[PRE74]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Note down the session ID(s) and the details of a particular session:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 记录会话ID和特定会话的详细信息：
- en: '[PRE75]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In my case, the session ID is `27`, so we will be checking the session details
    using `loginctl`:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，会话ID是`27`，所以我们将使用`loginctl`来检查会话详细信息：
- en: '![Using loginctl to check session details for session ID 27](img/B15455_03_34.jpg)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
  zh: '![使用loginctl检查会话ID 27的会话详细信息](img/B15455_03_34.jpg)'
- en: 'Figure 3.34: Checking the session details for session ID 27'
  id: totrans-555
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.34：检查会话ID 27的会话详细信息
- en: 'View the user properties:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 查看用户属性：
- en: '[PRE76]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Switch to the second SSH session and execute `man man`.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到第二个SSH会话并执行`man man`。
- en: 'Now switch login management back to the first SSH session and view the status
    of the student using the `user-status` parameter:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换登录管理回到第一个SSH会话，并使用`user-status`参数查看学生的状态：
- en: '![Using the user-status parameter to view the status of the student ](img/B15455_03_35.jpg)'
  id: totrans-560
  prefs: []
  type: TYPE_IMG
  zh: 使用用户状态参数查看学生的状态
- en: 'Figure 3.35: Using the user-status parameter'
  id: totrans-561
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.35：使用用户状态参数
- en: 'Finally, terminate the session:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，终止会话：
- en: '[PRE77]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: There is also a `terminate-user` parameter that can be handy if there are multiple
    users in one session.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`terminate-user`参数，如果一个会话中有多个用户，这可能会很方便。
- en: Summary
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was a sort of crash course on how to survive in Linux if you are
    unfamiliar with the operating system. This chapter was not about how to become
    a senior Linux administrator.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个关于如何在Linux中生存的速成课程，如果你对这个操作系统不熟悉的话。这一章并不是关于如何成为一名高级Linux管理员。
- en: In your daily life as an administrator in Azure, you may not use everything
    in this chapter. For instance, you might not create users in a VM. But you should
    be able to verify users configured in an identity management system such as AD
    and verify that they are able to log in.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 在你作为Azure管理员的日常生活中，你可能不会使用本章中的所有内容。例如，你可能不会在虚拟机中创建用户。但是你应该能够验证在诸如AD之类的身份管理系统中配置的用户，并验证他们能够登录。
- en: This chapter was all about using shells, the structure of the filesystem, and
    finding files. We looked at the role of text files in Linux and how to process
    and edit them. We worked with processes and saw how to view and kill them. And,
    last but not least, we looked at user and group management.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讲述了如何使用shell、文件系统的结构以及查找文件。我们看了一下文本文件在Linux中的作用以及如何处理和编辑它们。我们处理了进程，并学会了如何查看和终止它们。最后但并非最不重要的是，我们看了用户和组管理。
- en: In the next chapter, we will discuss managing resources in Azure.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在Azure中管理资源。
- en: Questions
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: 'In this chapter, instead of answering some questions, I want you to do an exercise:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我不想回答一些问题，而是让你做一个练习：
- en: Create the users `Lisa`, `John`, `Karel`, and `Carola`.
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用户`Lisa`、`John`、`Karel`和`Carola`。
- en: Set the passwords for these users to `welc0meITG`.
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这些用户设置密码为`welc0meITG`。
- en: Verify the existence of these users.
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证这些用户的存在。
- en: Create `finance` and `staff` groups.
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`finance`和`staff`组。
- en: Make the users `Lisa` and `Carola` members of `finance`, and `Karel` and `John`
    members of `staff`.
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用户`Lisa`和`Carola`成为`finance`的成员，`Karel`和`John`成为`staff`的成员。
- en: Create the /home/staff and /home/finance directories and set the group ownership
    of these directories to staff and home, respectively.
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建/home/staff和/home/finance目录，并将这些目录的组所有权分别设置为staff和home。
- en: Give the staff group read access to the finance directory.
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给予staff组对finance目录的读取权限。
- en: Make sure that newly created files receive the correct group ownership and permissions.
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保新创建的文件获得正确的组所有权和权限。
- en: Further Reading
  id: totrans-580
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: There are many books that are published for users that are new to the Linux
    operating system. Here are a few of my personal favorites.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多为Linux操作系统新用户出版的书籍。以下是我个人喜欢的一些。
- en: '*Working with Linux - Quick Hacks for the Command Line* (ISBN 978-1787129184)
    by Petru Işfan and Bogdan Vaida is a strange collection of nice tips and tricks,
    and sometimes that is all you need.'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '*与Linux一起工作-命令行的快速技巧*（ISBN 978-1787129184）由Petru Işfan和Bogdan Vaida是一个奇怪的收集，里面有很多不错的技巧，有时这就是你所需要的。'
- en: If you are able to read German, all the books by Michael Kofler ([https://kofler.info](https://kofler.info))
    should be on your bookshelf, even if you are an experienced Linux user!
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能阅读德语，那么Michael Kofler（[https://kofler.info](https://kofler.info)）的所有书籍都应该放在你的书架上，即使你是一名经验丰富的Linux用户！
- en: 'The Microsoft website hosts very good documentation on regular expressions:
    [https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions).
    And I do like [http://regexone.com](http://regexone.com) if you want to practice
    using regular expressions.'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 微软网站上有关于正则表达式的非常好的文档：[https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions)。如果你想练习使用正则表达式，我也喜欢[http://regexone.com](http://regexone.com)。
- en: The `awk` utility comes with a big manual ([https://www.gnu.org/software/gawk/manual/gawk.html](https://www.gnu.org/software/gawk/manual/gawk.html)),
    but it's maybe not the best place to start. Shiwang Kalkhanda did a very good
    job in *Learning AWK Programming* (ISBN 978-1788391030), producing a very readable
    book. Don't be afraid of the word *Programming* in this title, especially if you
    are not a developer; you should read this book.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`实用程序附带有一本大型手册（[https://www.gnu.org/software/gawk/manual/gawk.html](https://www.gnu.org/software/gawk/manual/gawk.html)），但也许不是最好的起点。Shiwang
    Kalkhanda在《学习AWK编程》（ISBN 978-1788391030）中做得非常好，编写了一本非常易读的书。不要害怕这个标题中的“编程”一词，特别是如果你不是开发人员；你应该阅读这本书。'
