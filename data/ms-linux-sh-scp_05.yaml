- en: Chapter 5. Alternative Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 替代语法
- en: So far in the scripting journey, we have seen that we can use the `test` command
    to determine a conditional status. We have taken this a little further and discovered
    that we can also make use of the single square bracket. Here, we will recap the
    `test` command and look at the single square bracket in more detail. After having
    learned more about the square bracket, we will move onto more advanced variable
    or parameter management; thus, providing defaults and understating quoting issues.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本编程的旅程中，我们已经看到我们可以使用`test`命令来确定条件状态。我们进一步发现，我们还可以使用单方括号。在这里，我们将回顾`test`命令，并更详细地查看单方括号。在更多了解方括号之后，我们将进入更高级的变量或参数管理；因此，提供默认值并理解引用问题。
- en: Finally, we are going to see that within advanced shells like bash, korn, and
    zsh we can go with double brackets! Making use of the double round parenthesis
    and double square bracket can simplify the overall syntax and allow the standardization
    of the use of mathematical symbols.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看到在像bash、korn和zsh这样的高级shell中，我们可以使用双括号！利用双圆括号和双方括号可以简化整体语法，并允许使用数学符号的标准化。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Test conditions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试条件
- en: Providing parameter defaults
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供参数默认值
- en: When in doubt – quote!
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当有疑问时-引用！
- en: Advanced tests using `[[`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`[[`进行高级测试
- en: Advanced tests using `((`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`((`进行高级测试
- en: Recapping test
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾测试
- en: 'So far we have used the built-in `test` command to drive our conditional statements.
    Using other options with `test`, we can look at the returned value to determine
    the status of files in the file system. Running the test without any option will
    return a false output:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用内置的`test`命令来驱动我们的条件语句。使用`test`的其他选项，我们可以查看返回的值来确定文件系统中文件的状态。运行没有任何选项的测试将返回一个错误的输出：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing files
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试文件
- en: 'Commonly, we can use `test` to check the conditions based around files. For
    example, to test that a file is present, or not, we can use the`-e` option. The
    following command will test the existence of the `/etc/hosts` file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以使用`test`来检查围绕文件的条件。例如，要测试文件是否存在，我们可以使用`-e`选项。以下命令将测试`/etc/hosts`文件的存在：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can run this test again, but this time check that the file not only exists
    but is a regular file as opposed to having some special purpose. Specific file
    types can be directories, pipes, links, and so on. The option for a regular file
    is `-f`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次运行此测试，但这次要检查文件不仅存在，而且是一个常规文件，而不是具有某些特殊目的。特定的文件类型可以是目录、管道、链接等。常规文件的选项是`-f`。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding logic
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加逻辑
- en: 'If we need to open a file from within our script, we will test that the file
    is both a regular file and has the read permission set. To achieve this with `test`,
    we can also include the `-a` option to `AND` multiple conditions together. In
    the following example code, we will use the `-r` condition to check that the file
    is readable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要在脚本内部打开一个文件，我们将测试该文件既是常规文件，又具有读取权限。为了使用`test`实现这一点，我们还可以包括`-a`选项来将多个条件连接在一起。在以下示例代码中，我们将使用`-r`条件来检查文件是否可读：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly, the use of `-o` is supported to `OR` two conditions within an expression.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，支持使用`-o`来`OR`表达式中的两个条件。
- en: Square brackets as not seen before
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以前未见过的方括号
- en: 'As an alternative to the `test` command, we can implement the same conditional
    tests using the single square bracket. Repeating the previous conditional test
    and omitting the command itself. We will rewrite this, as shown in the following
    code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`test`命令的替代，我们可以使用单方括号来实现相同的条件测试。重复之前的条件测试并省略命令本身。我们将在以下代码中重写这一点：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Many times, even as experienced administrators, we are used to language elements
    and we accept them as they are. I feel many Linux administrators will be surprised
    to learn that `[` is a command for both a shell built-in and a standalone file.
    Using the `type` command we can verify this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，即使作为经验丰富的管理员，我们也习惯于语言元素，并接受它们。我觉得许多Linux管理员会惊讶地发现`[`既是一个shell内置命令，又是一个独立的文件。使用`type`命令，我们可以验证这一点：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can see the output of this command in the following screenshot confirming
    its existence:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到此命令的输出，确认其存在：
- en: '![Square brackets as not seen before](img/00043.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![以前未见过的方括号](img/00043.jpeg)'
- en: We can see that on the Raspbian distribution that I am using, there is the built-in
    `[` command and the `/usr/bin/[` command. As we have seen, both these commands
    imitate the `test` command but it requires a closing bracket.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在我使用的Raspbian发行版中，有内置的`[`命令和`/usr/bin/[`命令。正如我们所见，这两个命令都模仿了`test`命令，但需要一个闭括号。
- en: 'Now we know a little more about the `[` command, which is found in bash and
    the earlier Bourne shell; we can now continue to add a little command-line list
    syntax. In addition to the command-line list, we can see the desired functionality
    working in the following code sample:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对在bash和早期的Bourne shell中找到的`[`命令有了更多了解，我们现在可以继续添加一些命令行列表语法。除了命令行列表，我们还可以在以下代码示例中看到所需的功能正在工作：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Having set the parameter `FILE` variable, we can test that it is both a regular
    file and is readable by the user before attempting to list the file contents.
    In this way, the script becomes more robust without the need for a complex script
    logic. We can see the code in use in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了参数`FILE`变量后，我们可以测试它既是常规文件，又可被用户读取，然后再尝试列出文件内容。这样，脚本就变得更加健壮，而无需复杂的脚本逻辑。我们可以在以下截图中看到代码的使用：
- en: '![Square brackets as not seen before](img/00044.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![以前未见过的方括号](img/00044.jpeg)'
- en: This type of abbreviation is quite common and is easily recognizable. We should
    always be cautious of using abbreviations if they do not add readability. Our
    aim in scripting should be to write a clear and understandable code and avoid
    shortcuts if they do not add to this goal.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种缩写方式非常常见，很容易识别。如果缩写不增加可读性，我们应该谨慎使用。我们在编写脚本时的目标应该是编写清晰易懂的代码，避免不必要的快捷方式。
- en: Providing parameter defaults
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供参数默认值
- en: 'Within bash parameters, there are named spaces in the memory that allow us
    access to stored values. There are two types of parameters:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash参数中，有命名空间在内存中允许我们访问存储的值。参数有两种类型：
- en: Variables
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Special parameters
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊参数
- en: Special parameters are read-only and are pre-set by the shell. Variables are
    maintained by ourselves as well as bash. In general, when talking about syntax,
    bash will refer to variables by their family name of parameters.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊参数是只读的，并且由shell预设。变量由我们自己以及bash维护。一般来说，在谈论语法时，bash会用参数的家族名称来指代变量。
- en: Variables
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are one type of parameter. These can be set by the system or by ourselves.
    For example, `$USER` is a variable parameter that is set by the system but can
    be written by us. As such, it is not a read-only requisite of special parameters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是一种参数类型。这些可以由系统或我们自己设置。例如，`$USER`是一个由系统设置但可以被我们编写的变量参数。因此，它不是特殊参数的只读要求。
- en: Special parameters
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊参数
- en: 'Special parameters are the second parameter type and are managed by the shell
    itself and are presented as read-only. We have come across these before in parameters,
    such as `$0` but let''s take a look at another `$-`. We can expand these parameters
    to gain an understanding of their use, using the `echo` command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊参数是第二种参数类型，由shell本身管理，并且呈现为只读。我们之前在参数中遇到过这些，比如`$0`，但让我们再看看另一个`$-`。我们可以扩展这些参数以了解它们的用途，使用`echo`命令：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: From the annotated text that I have added, we can understand that the `$-` option
    represents the shell options that are configured. These can be displayed using
    the `set -o` command but it can be read programmatically using `$-`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从我添加的注释文本中，我们可以理解`$-`选项代表配置的shell选项。这些可以使用`set -o`命令显示，但也可以使用`$-`在程序中读取。
- en: 'We can see this in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到这一点：
- en: '![Special parameters](img/00045.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![特殊参数](img/00045.jpeg)'
- en: 'The options set here are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里设置的选项如下：
- en: '`h`: This is hashall that allows for programs to be found using the `PATH`
    parameter'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 这是hashall，允许使用`PATH`参数找到程序'
- en: '`i`: This shows that this is an interactive shell'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`: 这显示这是一个交互式shell'
- en: '`m`: This is short for monitor, which allows the use of the `bg` and `fg` commands
    to bring commands in and out of the background'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 这是monitor的缩写，允许使用`bg`和`fg`命令将命令放入后台或从后台调出'
- en: '`B`: This allows the brace expansion or `mkdirdir{1,2}` where we create `dir1`
    and `dir2`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`B`: 这允许大括号扩展或`mkdirdir{1,2}`，我们创建`dir1`和`dir2`'
- en: '`H`: This allows history expansion or running commands, such as `!501` to repeat
    commands from history'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H`: 这允许历史扩展或运行命令，比如`!501`来重复历史中的命令'
- en: Setting defaults
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置默认值
- en: 'Using either the `test` command or the brackets, we can provide default values
    for variables, including command-line parameters. Taking the `hello4.sh` script
    we worked with earlier, we can modify it and set the `name` parameter if it is
    zero bytes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`test`命令或括号，我们可以为变量提供默认值，包括命令行参数。拿我们之前使用过的`hello4.sh`脚本来说，如果`name`参数是零字节，我们可以修改它并设置它：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This code is functional but it is our choice how we code in the default value.
    We can alternatively assign a default value directly to the parameter. Consider
    the following code, where a default assignment is made directly:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是功能性的，但我们可以选择如何编写默认值。我们也可以直接为参数分配默认值。考虑以下代码，直接进行默认赋值：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In bash, this is known as **parameter substitution** and can be written in
    the following pseudo-code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash中，这被称为**参数替换**，可以用以下伪代码表示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Wherever a variable (parameter) has not been declared and has a null value
    the default value will be used. If the parameter has been explicitly declared
    with a null value, we will use the `:-` syntax, as shown in the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何处，如果一个变量（参数）没有被声明并且具有空值，将使用默认值。如果参数已经被显式声明为空值，我们将使用`:-`语法，如下例所示：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By editing the script now, we can create `hello8.sh` to make use of bash parameter
    substitution to provide the default value:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过现在编辑脚本，我们可以创建`hello8.sh`来利用bash参数替换提供默认值：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This script and its output, both with and without a supplied value, are shown
    in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本及其输出，无论是否提供了值，都显示在以下的截图中：
- en: '![Setting defaults](img/00046.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![设置默认值](img/00046.jpeg)'
- en: The `hello8.sh` script provides the functionality that we need with the logic
    built directly into the parameter assignment. The logic and assignment now are
    a single line of code within the script and it is a major step in keeping the
    script simple and maintaining the readability.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello8.sh`脚本提供了我们需要的功能，逻辑直接内置到参数赋值中。现在逻辑和赋值是脚本中的一行代码，这是保持脚本简单和可读性的重要一步。'
- en: When in doubt – Quote!
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当怀疑时 - 引用！
- en: Having established that variables are a type of parameter, we should always
    keep this in mind, especially, when reading manuals and HOWTOs. Often the documentation
    refers to parameters and in doing so they include variables, as well as, the bash
    special parameters, such as `$1` and so on. In keeping with this, we will look
    at why it is advisable to quote the parameters when we use them on the command
    line or within scripts. Learning this now can save us a lot of pain and heartache
    later, especially, when we start looking at loops.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 既然已经确定变量是一种参数，我们应该始终记住这一点，特别是在阅读手册和HOWTO时。文档经常提到参数，并在这样做时包括变量，以及bash特殊参数，如`$1`等。为此，我们将看看为什么在命令行或脚本中使用参数时最好引用这些参数。现在学习这一点可以在以后节省我们很多痛苦和心痛，特别是当我们开始研究循环时。
- en: 'First, the correct term that we should use for reading the value of variables
    is **parameter expansion**. To you and me this is reading a variable, but to bash
    this would be too simple. The assignment of a correct name, such as parameter
    expansion reduces any ambiguity to its meaning but adds complexity at the same
    time. In the following example, the first line of code assigns the value of `fred`
    to the `name` parameter. The second line of code uses parameter expansion to print
    the stored value from memory. The `$` symbol is used to allow the expansion of
    the parameter:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该用于读取变量值的正确术语是**参数扩展**。对你和我来说，这是读取一个变量，但对bash来说这太简单了。正确的命名，比如参数扩展，减少了任何对其含义的歧义，但同时增加了复杂性。在下面的例子中，代码的第一行将`fred`的值分配给`name`参数。代码的第二行使用参数扩展来打印存储在内存中的值。`$`符号用于允许参数的扩展：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the example, we have used the double quotes to allow `echo` to print the
    single string as we have used spaces. Without the use of quotes, the echo might
    have seen this as multiple arguments. The space being the default field separator
    in most shells including bash. Often, when we do not think to use the quotes,
    we do not see the spaces directly. Consider the following extract of command-line
    code that we made use of earlier:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了双引号来允许`echo`打印单个字符串，因为我们使用了空格。如果不使用引号，echo可能会将其视为多个参数。空格是大多数shell（包括bash）中的默认字段分隔符。通常，当我们没有考虑使用引号时，我们看不到直接的空格。考虑我们之前使用的命令行代码的以下摘录：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Even though this worked, we may have been a little fortunate, especially, if
    we were populating the `FILE` parameter from a list of files that we had not created
    ourselves. It is quite conceivable that a file can have spaces within its name.
    Let''s now replay this code using a different file. Consider the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这样可以工作，我们可能有点幸运，特别是如果我们正在从我们自己没有创建的文件列表中填充`FILE`参数。一个文件可能在其名称中包含空格是很有可能的。现在让我们使用不同的文件重新播放这段代码。考虑以下命令：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Even though structurally there has been no change to the code, it now fails.
    This is because we are providing too many arguments to the `[` command. The failing
    result will be the same even if we use the `test` command.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在结构上代码没有改变，但现在失败了。这是因为我们向`[`命令提供了太多的参数。即使我们使用`test`命令，失败的结果也是一样的。
- en: 'Even though we have correctly quoted the assignment of the file name to the
    parameter `FILE`, we have `NOT` protected the spaces when the parameter is expanded.
    We can see the code failing, as it is captured in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经正确引用了文件名分配给参数`FILE`，但在参数扩展时我们`没有`保护空格。我们可以看到代码失败，如下面的截图所示：
- en: '![When in doubt – Quote!](img/00047.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![当你犹豫时-引用！](img/00047.jpeg)'
- en: We can see that this will not be ready for our scripts. Alas, what we once thought
    as robust, is now in tatters and like the Titanic, our code has sunk.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这对我们的脚本来说还没有准备好。唉，我们曾经认为坚固的东西现在已经支离破碎，就像泰坦尼克号一样，我们的代码已经沉没了。
- en: 'However, a simple solution is to revert to quoting parameter expansion unless,
    specifically, not desired. We can make this ship unsinkable by a simple edit to
    the code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个简单的解决方案是恢复引用参数扩展，除非特别不需要。通过对代码进行简单的编辑，我们可以使这艘船不会沉没：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can now proudly stand on the White Star Line dock, as we see the Titanic
    II get launched in the following code example, which is captured in the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以自豪地站在白星航运公司的码头上，因为我们看到泰坦尼克号II在以下代码示例中被推出，这在下面的截图中被捕捉到：
- en: '![When in doubt – Quote!](img/00048.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![当你犹豫时-引用！](img/00048.jpeg)'
- en: 'It is truly amazing and sometimes just a little unbelievable what affect these
    tiny quotes can have. We should never ignore the quotes when expanding variables.
    To ensure that we drill home this point, we can highlight this phenomenon in another
    even simpler example. Let''s take the scenario where we now just want to remove
    the file. In the first example we do not use quotes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些微小的引号可以产生真正令人惊讶，有时甚至有点难以置信的影响。当扩展变量时，我们绝不能忽视引号。为了确保我们强调这一点，我们可以在另一个更简单的例子中突出这种现象。让我们考虑现在只想删除文件的情况。在第一个例子中，我们不使用引号：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This code will produce failures as the parameter expansion will lead to the
    following perceived command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将导致失败，因为参数扩展将导致以下感知命令：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The code will fail because it is unable to find the `my` file or the `file`
    file. Even worse, potentially, we could be deleting incorrect files if any of
    the names could be resolved accidently.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将失败，因为它无法找到`my`文件或`file`文件。更糟糕的是，可能我们会意外地删除错误的文件，如果其中任何一个名称被错误地解析。
- en: 'Whereas quoting the parameter expansion will save the day, as we see in the
    second example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 而引用参数扩展将拯救一切，就像我们在第二个例子中看到的那样：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is correctly expanded to the desired command that we illustrate in the
    following code example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这被正确地扩展为我们在以下代码示例中说明的期望命令：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I certainly hope that these examples demonstrate the need for care when expanding
    parameters and you are aware of the pit-falls.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实希望这些例子能够说明在扩展参数时需要小心，并且你意识到了其中的陷阱。
- en: Advanced test using [[
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用[[进行高级测试
- en: 'The use of the double brackets `[[ condition ]]` allows us to do more advanced
    condition testing but is not compatible with the Bourne Shell. The double brackets
    were first introduced as a defined keyword in the korn shell and are also available
    in bash and zsh. Unlike the single bracket, this is not a command but a keyword.
    The use of the type command can confirm this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双括号`[[条件]]`允许我们进行更高级的条件测试，但与Bourne Shell不兼容。双括号首次作为korn shell中的定义关键字引入，并且也可用于bash和zsh。与单括号不同，这不是一个命令而是一个关键字。使用type命令可以确认这一点：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Whitespace
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空格
- en: 'The fact that `[[` is not a command is significant where whitespace is concerned.
    As a keyword, `[[` parses its arguments before bash expands them. As such, a single
    parameter will always be represented as a single argument. Even though it goes
    against best practice, `[[` can alleviate some of the issues associated with whitespace
    within parameter values. Reconsidering the condition we tested earlier, we can
    omit the quotes when using `[[` ,as shown in the following example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`[[`不是一个命令在空格方面是重要的。作为关键字，`[[`在bash扩展它们之前解析其参数。因此，单个参数将始终表示为单个参数。即使违反最佳实践，`[[`可以减轻参数值中空格相关的一些问题。重新考虑我们之前测试的条件，当使用`[[`时，我们可以省略引号，如下例所示：'
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We still need to quote the parameter when using `cat` as you can see and we
    can use quotes within the double brackets but they become optional. Note we can
    also use the more traditional `&&` and `||` to represent `-a` and`-o` respectively.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`cat`时，我们仍然需要引用参数，如您所见，我们可以在双括号中使用引号，但它们变得可选。请注意，我们还可以使用更传统的`&&`和`||`来分别表示`-a`和`-o`。
- en: Other advanced features
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他高级功能
- en: Some of the extra features that we can include with the double brackets. Even
    if we lose portability in using them, there are some great features that overcome
    the loss. Remember that if we only use bash then we can use the double brackets
    but can't run our scripts in the Bourne Shell. The advanced features that we gain
    which are covered in the following sections include pattern matching and regular
    expressions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一些额外功能可以包括在双括号中。即使在使用它们时失去了可移植性，也有一些很好的功能可以克服这一损失。请记住，如果我们只使用bash，那么我们可以使用双括号，但不能在Bourne
    Shell中运行我们的脚本。我们在下面的部分中获得的高级功能包括模式匹配和正则表达式。
- en: Pattern matching
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式匹配
- en: 'Using the double brackets we can do more than just match strings, we can use
    pattern matching. For example, we may need to work exclusively with Perl scripts,
    files that end with `.pl`. We will be able to implement this easily within a condition
    by including the pattern as a match, as shown in the following example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双括号，我们不仅可以匹配字符串，还可以使用模式匹配。例如，我们可能需要专门处理以`.pl`结尾的Perl脚本文件。我们可以在条件中轻松实现这一点，包括模式作为匹配，如下例所示：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Regular expressions
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式
- en: 'We are not limited to simple pattern matches using the `=~` operator, we can
    additionally match regular expressions. We could rewrite the last example using
    a regular expression:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以使用`=~`运算符进行简单的模式匹配，还可以匹配正则表达式。我们可以使用正则表达式重写上一个示例：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As the single dot or period has a special meaning in regular expressions, we
    need to escape it with `\`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单个点或句号在正则表达式中具有特殊含义，因此我们需要用`\`进行转义。
- en: 'The following screenshot shows the regular expression matching working with
    a file called `my.pl` and another called `my.apl`. The match correctly shows for
    the file that ends in `.pl`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了正则表达式匹配与名为`my.pl`和`my.apl`的文件一起工作。匹配正确显示了以`.pl`结尾的文件：
- en: '![Regular expressions](img/00049.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![正则表达式](img/00049.jpeg)'
- en: Regular expression script
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式脚本
- en: 'The power of regular expressions cannot be dismissed. Another simple demonstration
    of conditional testing using regular expressions will be to expose the US and
    UK spelling of color: being color and colour. We may prompt the user if they want
    a color or mono output for the script but at the same time cater for both spellings.
    The line that will do the work in the script is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 不能忽视正则表达式的威力。使用正则表达式进行条件测试的另一个简单演示是公开颜色的美式和英式拼写：color和colour。我们可以提示用户是否要为脚本选择彩色或单色输出，同时考虑两种拼写。在脚本中执行此操作的行如下：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The regular expression caters to both spellings of color by making the u optional:
    u?. Furthermore, we can disable case sensitivity allowing for *COLOR* and color
    by setting a shell option:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式通过使u可选来满足color的两种拼写：u?。此外，我们可以通过设置shell选项来禁用大小写敏感性，从而允许*COLOR*和color的匹配：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This option can be disabled again at the end of the script with the following
    command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项可以在脚本末尾使用以下命令再次禁用：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When we use the variable parameters that we have named `$GREEN` and `$RESET`
    we affect the color of the output. The color green will only be shown where we
    have sourced the color definition file. This is set when we choose the color display.
    Selecting mono will ensure that the variable parameters are null and have no effect.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用我们命名的变量参数`$GREEN`和`$RESET`时，我们会影响输出的颜色。只有在我们引用颜色定义文件时，绿色才会显示。当我们选择单色显示时，选择单色将确保变量参数为空且无效。
- en: 'The complete script is shown in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本显示在以下截图中：
- en: '![Regular expression script](img/00050.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![正则表达式脚本](img/00050.jpeg)'
- en: Arithmetic operations using ((
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用(( ))进行算术运算
- en: When using bash and some other advanced shells, we may make use of the `(( ))`
    notation to simplify mathematical operations with scripts.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用bash和其他高级shell时，我们可以使用`(( ))`符号来简化脚本中的数学运算。
- en: Simple math
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的数学
- en: 'The double parenthesis construct in bash allows for arithmetic expansion. Using
    this in the simplest format, we can easily carry out integer arithmetic. This
    becomes a replacement for the `let` built-in. The following examples show the
    use of the `let` command and the double parenthesis to achieve the same result:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash中，双括号结构允许进行算术展开。在最简单的格式中，我们可以轻松进行整数运算。这成为了`let`内置的替代品。以下示例展示了使用`let`命令和双括号来实现相同的结果：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In both cases, the `a` parameter is populated with the sum of `2 + 3`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，`a`参数都被填充为`2 + 3`的和。
- en: Parameter manipulation
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数操作
- en: 'Perhaps, a little more useful to us in scripting is the C-style parameter manipulation
    that we can include using the double parenthesis. We can often use this to increment
    a counter within a loop and also put a limit on the number of times the loop iterates.
    Consider the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，在脚本编写中对我们更有用的是使用双括号的C风格参数操作。我们经常可以使用这个来在循环中递增计数器，并限制循环迭代的次数。考虑以下代码：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Within this example, we first set `COUNT` to `1` and then we increment it with
    the `++` operator. When it is echoed in the final line, the parameter will have
    a value of `2`. We can see the results in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们首先将`COUNT`设置为`1`，然后使用`++`运算符对其进行递增。当在最后一行中输出时，参数将具有值`2`。我们可以在以下截图中看到结果：
- en: '![Parameter manipulation](img/00051.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![参数操作](img/00051.jpeg)'
- en: 'We can achieve the same result in long-hand by using the following syntax:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下语法来以长格式实现相同的结果：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This of course allows for any increment of the `COUNT` parameter and not just
    a single unit increase. Similarly, we can count down using the `--` operator,
    as shown in the following example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这允许对`COUNT`参数进行任何增量，而不仅仅是单个单位的增加。同样地，我们可以使用`--`运算符进行倒数，如下例所示：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We start using a value of `10`, reducing the value by `1` within the double
    parenthesis.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`10`开始，然后在双括号中将值减少`1`。
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we do not use the `$` to expand the parameters within the parenthesis.
    They are used for parameter manipulation and as such we do not need to expand
    parameters explicitly.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不使用`$`来扩展括号内的参数。它们用于参数操作，因此我们不需要显式地扩展参数。
- en: Standard arithmetic tests
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准算术测试
- en: 'Another advantage that we can gain from these double parentheses is with the
    tests. Rather than having to use `-gt` for greater than we can simply use `>`.
    We can demonstrate this in the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以从这些双括号中获得的优势是在测试中。我们可以简单地使用`>`而不是使用`-gt`来表示大于。我们可以在以下代码中演示这一点：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot demonstrates this for you:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图为您演示了这一点：
- en: '![Standard arithmetic tests](img/00052.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![标准算术测试](img/00052.jpeg)'
- en: It is this standardization, both in the C-style manipulation and tests, that
    make the double parenthesis so useful to us. This use extends to both, the command
    line and in scripts. We will use this feature extensively when we look at looping
    constructs.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这种标准化，无论是在C风格的操作还是测试中，使双括号对我们如此有用。这种用法既适用于命令行，也适用于脚本。当我们研究循环结构时，我们将广泛使用这个特性。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Within this chapter, I really hope that we have introduced many new and interesting
    choices to you. This was an area with a wide range where we began recapping on
    the use of test and discovered that the `[` is a command is not a syntax construct.
    The main effect that it is a command is on whitespace and we looked at the need
    to quote variables.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我真诚地希望我们为您介绍了许多新颖有趣的选择。这是一个范围广泛的领域，我们从回顾测试的使用开始，发现`[`是一个命令而不是语法结构。它作为一个命令的主要影响在于空格，我们还讨论了引用变量的必要性。
- en: Even though we may commonly call variables as variables. We have also seen that
    their correct name, especially in documentation is parameters. Reading a variable
    is a parameter expansion. Understanding parameter expansion can help us understand
    the use of the keyword `[[`. The double square brackets are not commands and do
    not expand the parameters. This means that we do not need to quote variables even
    if they do contain whitespace. Moreover, we can use advanced tests with double
    square brackets, such as pattern matching or regular expressions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们通常称变量为变量。我们也看到它们的正确名称，特别是在文档中是参数。读取变量是参数展开。理解参数展开可以帮助我们理解关键字`[[`的用法。双方括号不是命令，也不展开参数。这意味着即使变量包含空格，我们也不需要引用变量。此外，我们可以使用双方括号进行高级测试，如模式匹配或正则表达式。
- en: Finally, we looked at arithmetic expansion and parameter manipulation using
    the double parenthesis notation. The biggest feature this delivers is the possibility
    to easily increment and decrement counters.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了双括号符号的算术展开和参数操作。它最大的特点是可以轻松地递增和递减计数器。
- en: In the next chapter, we will move into the looping constructs found in bash
    and make use of some of our new found skills from this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进入bash中的循环结构，并利用本章中学到的一些新技能。
