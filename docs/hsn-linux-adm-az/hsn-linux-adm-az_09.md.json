["```\nchroot /<directory>\n```", "```\nsemanage fcontext -a -t virtd_lxc_exec_t /usr/bin/systemd-nspawn\n restorecon -v /usr/bin/systemd-nspawn\n```", "```\nsudo yum install epel-release\nsudo yum install debootstrap\n```", "```\nsudo mkdir -p /var/lib/machines/releases/stretch\nsudo -s\ncd /var/lib/machines/releases\n```", "```\ndebootstrap --arch amd64 stretch stretch \\\n\u00a0\u00a0http://ftp.us.debian.org/debian\n```", "```\n    sudo mkdir -p /var/lib/machines/releases/centos7\n    sudo -s\n    cd /var/lib/machines/releases/centos7\n    ```", "```\n    rpm --rebuilddb --root=/var/lib/machines/releases/centos7\n    rpm --root=/var/lib/machines/releases/centos7 \\\n    \u00a0\u00a0-ivh --nodeps centos-release*rpm\n    ```", "```\n    yum --installroot=/var/lib/machines/releases/centos7 \\\n    \u00a0\u00a0groups install\u00a0\u00a0'Minimal Install'\n    ```", "```\nchroot /var/lib/containers/releases/centos7\npasswd root\n```", "```\nsystemd-nspawn --boot -D centos7\n```", "```\n[Unit]\nDescription=First Boot Wizard\nDocumentation=man:systemd-firstboot(1)\nDefaultDependencies=no\nConflicts=shutdown.target\nAfter=systemd-readahead-collect.service systemd-readahead-replay.service systemd-remount-fs.service\nBefore=systemd-sysusers.service sysinit.target shutdown.target\nConditionPathIsReadWrite=/etc\nConditionFirstBoot=yes\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/bin/systemd-firstboot --locale=en_US-utf8 --root-password=welk0mITG! --timezone=Europe/Amsterdam \nStandardOutput=tty\nStandardInput=tty\nStandardError=tty\n```", "```\nsystemctl enable systemd-firstboot\n```", "```\n rm /etc/\\\n\u00a0\u00a0{machine-id,localtime,hostname,shadow,locale.conf,securetty}\n```", "```\ncd /var/lib/machines/releases\ncp -rf centos7/ /var/lib/machines/centos01\n```", "```\nsystemd-nspawn --boot -D centos01\n```", "```\nmachinectl start <machine name>\n```", "```\nmachinectl login <machine name>\n```", "```\njournalctl _PID=<pid of container> -a\n```", "```\nsudo systemctl enable machines.target\n```", "```\n[Exec]\nPrivateUsers=pick\n[Network]\nZone=web\nPort=tcp:80\n[Files]\nPrivateUsersChown=yes\n```", "```\nsudo machinectl enable centos01\n```", "```\naz group create --name Docker_LOA --location westus\n```", "```\n#cloud-config\npackage_upgrade: true\nwrite_files:\n- content: |\n\u00a0\u00a0\u00a0\u00a0[Service]\n\u00a0\u00a0\u00a0\u00a0ExecStart=\n\u00a0\u00a0\u00a0\u00a0ExecStart=/usr/bin/dockerd\n\u00a0\u00a0path: /etc/systemd/system/docker.service.d/docker.conf\n- content: |\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"hosts\": [\"fd://\",\"tcp://127.0.0.1:2375\"]\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0path: /etc/docker/daemon.json\nruncmd:\n - curl -sSL https://get.docker.com/ | sh\n - usermod -aG docker <ssh user>\n```", "```\n    az vm create --name UbuntuDocker --resource-group Docker_LOA \\\n    \u00a0\u00a0--image UbuntuLTS --generate-ssh-keys --admin-username <ssh-user> \\ \n    \u00a0\u00a0--custom-data docker.yml\n    ```", "```\n    sudo systemctl status docker.service\n    ```", "```\n    docker info\n    ```", "```\n    docker run hello-world\n    ```", "```\ndocker image ls\n```", "```\ndocker run ubuntu\n```", "```\ndocker ps -a\n```", "```\ndocker run -dt ubuntu bash\n```", "```\n\u00a0\u00a0\u00a0docker run -it ubuntu\n```", "```\ndocker ps\n```", "```\ndocker exec <id/name> <command>\n```", "```\ndocker exec <id/name> cat /etc/os-release\n```", "```\ndocker attach <id/name>\n```", "```\nsudo -i\n```", "```\ndebootstrap --arch amd64 stretch stretch \\\n\u00a0\u00a0http://ftp.us.debian.org/debian\n```", "```\ntar -C stretch -c . | docker import - stretch\n```", "```\ndocker images\n```", "```\nmkdir ~/my-image && cd ~/my-image\n```", "```\ndocker tag stretch:latest apache_custom:v1 \n```", "```\nFROM apache_custom:v1 \n```", "```\nRUN apt-get --yes update\n```", "```\nRUN apt-get --yes install apache2\n```", "```\nCMD /usr/sbin/apachectl -e info -DFOREGROUND\n```", "```\nEXPOSE 80\n```", "```\ndocker build -t apache_image .\n```", "```\ndocker run -d apache_image \n```", "```\ndocker history <ID/name>\n```", "```\ndocker inspect <ID/name> | grep IPAddress\n```", "```\ncurl <ip address>\n```", "```\ndocker stop <ID>\n```", "```\ndocker run -d <ID> -p 8080:80\n```", "```\nsudo apt install sshfs\n```", "```\nbase=https://github.com/docker/machine/releases/download/v0.16.0 \\\n&& curl -L $base/docker-machine-$(uname -s)-$(uname -m) \\\n>/tmp/docker-machine && \\\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine \\\n&& chmod +x /usr/local/bin/docker-machine\n```", "```\nbase=https://raw.githubusercontent.com/docker/machine/v0.16.0\nfor i in docker-machine-prompt.bash docker-machine-wrapper.bash \\\ndocker-machine.bash\ndo\n\u00a0\u00a0sudo wget \"$base/contrib/completion/bash/${i}\" -P \\ /etc/bash_completion.d\nsource /etc/bash_completion.d/$i\ndone\n```", "```\ndocker-machine version\n```", "```\ndocker-machine create -d azure \\\n\u00a0\u00a0--azure-subscription-id <subscription id> \\\n\u00a0\u00a0--azure-ssh-user <username> \\\n\u00a0\u00a0--azure-open-port 80 \\\n\u00a0\u00a0--azure-size <size> <vm name>\n```", "```\ndocker-machine env <vm name>\neval $(docker-machine env <vm name>)\n```", "```\ndocker info\n```", "```\ndocker-machine ls\n```", "```\ndocker run -d -p 80:80 --restart=always nginx\n```", "```\ndocker-machine ip <vm name>\n```", "```\nmkdir -m 777 /mnt/test\ndocker-machine mount <vm name>:/home/<username> /mnt/test\n```", "```\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```", "```\nsudo chmod +x /usr/local/bin/docker-compose\n```", "```\ndocker-compose version\n```", "```\nwordpress:\n\u00a0\u00a0image: wordpress\n\u00a0\u00a0links:\n\u00a0\u00a0\u00a0\u00a0- db:mysql\n\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- 80:80\ndb:\n\u00a0\u00a0image: mariadb\n\u00a0\u00a0environment:\n\u00a0\u00a0\u00a0\u00a0MYSQL_ROOT_PASSWORD: <password>\n```", "```\ndocker-compose up -d\n```", "```\ndocker info | grep Registry\n```", "```\ndocker search --filter \"is-official=true\" nginx --no-trunc\n```", "```\ndocker login -u <username> -p <password>\n```", "```\ndocker build -t <accountname>/<image>:versiontag .\n```", "```\ndocker tag <tag id> <accountname>/<image>:versiontag\n```", "```\nwget -q https://registry.hub.docker.com/v1/repositories/<image>/tags -O - | jq \n```", "```\nwget -q https://registry.hub.docker.com/v1/repositories/<image name>/tags -O -\u00a0\u00a0| sed -e 's/[][]//g' -e 's/\"//g' -e 's/ //g' | tr '}' '\\n' | cut -d \":\" -f3\n```", "```\naz container create --resource-group <resource group> --name nginx --image nginx:latest --dns-name-label nginx-loa --ports 80\n```", "```\nNew-AzContainerGroup -ResourceGroupName <resource group> '\n\u00a0\u00a0-Name nginx -Image nginx:latest r -OsType Linux '\n\u00a0\u00a0-DnsNameLabel nginx-loa2\n```", "```\naz container list\n```", "```\nGet-AzContainerGroup | Format-List\n```", "```\naz group create --name az-acr-cli --location eastus\n```", "```\naz acr create --resource-group az-acr-cli --name azacrcliregistry --sku Basic --admin-enabled true\n```", "```\naz acr credential show --name azacrcliregistry --resource-group az-acr-cli\n```", "```\naz acr login --name azacrcliregistry --username azacrcliregistry --password <password>\n```", "```\naz acr show -n azacrcliregistry -g az-acr-cli | grep loginServer\n```", "```\ndocker tag nginx azacrcliregistry.azurecr.io/ngnix:v1\n```", "```\ndocker push azacrcliregistry.azurecr.io/ngnix:v1\n```", "```\naz acr repository list --name azacrcliregistry -o table\n```", "```\nsudo apt update \nsudo apt install -y software-properties-common\nsudo add-apt-repository -y ppa:projectatomic/ppa\nsudo apt update \nsudo apt install -y buildah\n```", "```\nsudo apt -y install podman\n```", "```\nsudo snap install skopeo --edge\n```", "```\nFROM nginx \nRUN apt-get --yes update\nRUN apt-get --yes install apache2\nCMD /usr/sbin/apachectl -e info -DFOREGROUND\nEXPOSE 80\n```", "```\n[registries.search]\nregistries = ['docker.io']\n```", "```\nbuildah bud -t ngnix-buildah .\n```", "```\nbuildah from <image>\n```", "```\nbuildah from nginx\n```", "```\nbuildah run <container name> <command>\n```", "```\nbuildah run nginx-working-container cat /etc/os-release\n```", "```\nsudo podman run -d -p 8080:80 --name webserver nginx\n```", "```\ncurl localhost:8080\n```", "```\nskopeo inspect docker://nginx:latest\n```", "```\ndocker run -v /some-directory/on host:/some-directory/in container\n```", "```\nmkdir ~/myfiles\n```", "```\ndocker run -it -v ~/myfile:/var/log ubuntu\n```", "```\ntouch file{1..10}\n```", "```\ndocker rm <id/name of the container>\n```"]