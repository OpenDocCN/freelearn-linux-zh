- en: Choosing the Right Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的工具
- en: 'This chapter will introduce some tools that will help us when we''re writing
    Bash scripts. We will focus on two types of tools: GUI-based editors (**Atom**
    and **Notepad++**) and Terminal-based editors (**Vim** and **nano**). We will
    describe the tools and how to use them, their strengths and weaknesses, and how
    to use both GUI- and Terminal-based editors together for the best results.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍一些在编写Bash脚本时会帮助我们的工具。我们将专注于两种类型的工具：基于GUI的编辑器（Atom和Notepad++）和基于终端的编辑器（Vim和nano）。我们将描述这些工具以及如何使用它们，它们的优势和劣势，以及如何同时使用基于GUI和基于终端的编辑器以获得最佳结果。
- en: 'The following commands will be introduced in this chapter: `vim`, `nano`, and `ls`.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下命令：`vim`，`nano`和`ls`。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using graphical editors for shell scripting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图形编辑器进行shell脚本编写
- en: Using command-line editors for shell scripting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行编辑器进行shell脚本编写
- en: Combining graphical editors with command-line editors when writing shell scripts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写shell脚本时将图形编辑器与命令行编辑器结合使用
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need the virtual machine we created in the previous chapter when using
    Vim or nano. If you want to use Notepad++, you will need a Windows host machine.
    For Atom, the host machine can run either Linux, macOS, or Windows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Vim或nano时，您将需要我们在上一章中创建的虚拟机。如果要使用Notepad++，您将需要Windows主机。对于Atom，主机可以运行Linux、macOS或Windows。
- en: Using graphical editors for shell scripting
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图形编辑器进行shell脚本编写
- en: 'Tooling has come a long way since the first Unix and Unix-like distributions.
    In the earliest days, writing shell scripts was significantly harder than today:
    the shells were less powerful, text editors were command-line only and things
    such as syntax highlighting and autocomplete were non-existent. Today, we have
    very powerful GUI editors that will help us in our scripting adventures. Why would
    we want to wait until we run a script to find an error, when a GUI editor could
    have already shown us the error in advance? Today, using an advanced editor for
    shell scripting is almost a necessity that we wouldn''t want to live without.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自Unix和类Unix发行版问世以来，工具已经发展了很长一段路。在早期，编写shell脚本比今天要困难得多：shell功能较弱，文本编辑器仅限于命令行，诸如语法高亮和自动补全之类的功能都是不存在的。今天，我们有非常强大的图形用户界面编辑器，可以帮助我们进行脚本编写。为什么我们要等到运行脚本才发现错误，当图形用户界面编辑器可以提前显示错误？今天，使用高级编辑器进行shell脚本编写几乎是一种必需品，我们不想离开。
- en: 'We''ll describe two text editors in the coming pages: Atom and Notepad++. Both
    are GUI-based, which we can use for efficient shell scripting. If you have a preference
    for either already, pick that one. If you''re unsure, we would recommend using
    Atom.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的页面中，我们将描述两个文本编辑器：Atom和Notepad++。两者都是基于GUI的，我们可以用它们进行高效的shell脚本编写。如果您已经对其中一个有偏好，请选择那个。如果不确定，我们建议使用Atom。
- en: Atom
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Atom
- en: The first graphical editor we will consider is Atom, made by GitHub. It's described
    as *A hackable text editor for the 21st Century*. Hackable, in this sense, means
    that while the default installation of Atom is as complete as any text editor,
    this application really shines because it is very configurable and extensible.
    Anything that has not been integrated by GitHub can be written as an extension
    package. By using these extensions, you can make your Atom installation fully
    your own; if you do not like something, change it. If it can't be changed out
    of the box, find a package that does it. And even if there's not a package that
    does what you're hoping, you still have the option to create your own package!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先考虑的图形编辑器是由GitHub制作的Atom。它被描述为“21世纪可修改的文本编辑器”。在这里，“可修改”意味着虽然Atom的默认安装与任何文本编辑器一样完整，但这个应用程序真正闪耀的地方在于它非常可配置和可扩展。任何GitHub未集成的功能都可以作为扩展包编写。通过使用这些扩展，您可以使Atom安装完全成为您自己的；如果您不喜欢某些东西，就改变它。如果不能直接改变，就找一个可以做到的扩展包。即使没有符合您期望的扩展包，您仍然可以选择创建自己的扩展包！
- en: Another nice feature of Atom is the default integration with Git and GitHub.
    Git is currently the most popular version control system. Version control systems
    are used when writing code or scripts. They ensure that history of files is preserved,
    and make it possible for multiple, even many, contributors to work on the same
    files at the same time, without getting burdened down by conflict management.
    GitHub, as the name suggests, is currently the most prominent web-based Git provider
    for open source software.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Atom的另一个很好的功能是与Git和GitHub的默认集成。Git目前是最流行的版本控制系统。版本控制系统在编写代码或脚本时使用。它们确保文件的历史记录被保留，并使多个甚至许多贡献者能够同时在同一文件上工作，而不会因冲突管理而负担过重。GitHub，顾名思义，目前是最重要的面向开源软件的基于Web的Git提供者。
- en: The last great thing about Atom we want to mention is that, by default, it supports
    many scripting and programming languages. When we say *supports*, we mean that
    it can recognize file types by their extensions, and offer syntax highlighting
    (which makes for much easier scripting!). This functionality is provided through
    core packages, which work the same way as normal packages but are included from
    the start. For our purposes, the core package, **language-shellscript**, will
    help us in our shell scripting endeavors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Atom的最后一件伟大的事情是，它默认支持许多脚本和编程语言。当我们说“支持”时，我们是指它可以通过文件扩展名识别文件类型，并提供语法高亮（这样编写脚本就更容易了！）。这种功能是通过核心包提供的，它们的工作方式与普通包相同，但从一开始就包含在内。对于我们的目的，核心包**language-shellscript**将帮助我们进行shell脚本编写。
- en: Atom installation and configuration
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Atom安装和配置
- en: 'Let''s go ahead and install Atom. As long as you''re running Linux, macOS,
    or Windows, you can go to [https://atom.io/](https://atom.io/) and grab the installer.
    Run the installer and, if necessary, follow along with the prompts until Atom
    is installed. Now, start Atom and you''ll be greeted by the welcome screen, which
    at the time of writing looks like the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装Atom。 只要您运行Linux、macOS或Windows，您可以转到[https://atom.io/](https://atom.io/)并获取安装程序。
    运行安装程序，如果需要，可以跟随提示直到Atom安装完成。 现在，启动Atom，您将会看到欢迎屏幕，写作时看起来像下面这样：
- en: '![](img/d45b2d8a-0fd9-4e5c-9b53-c6fe4c3602e2.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d45b2d8a-0fd9-4e5c-9b53-c6fe4c3602e2.png)'
- en: 'Be sure to look at all the screens Atom has to offer. When you feel like you''ve
    explored enough, let''s add a package to Atom that will complement our shell scripting.
    If you have the Welcome Guide screen still open, select Install a Package from
    there. Otherwise, you can use the keyboard shortcut *Ctrl* + *, *to bring up the
    Settings screen. You will see an Install option there, which will take you to
    the Install Packages screen. Search for `bash`, and you should see the following
    package:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要查看Atom提供的所有屏幕。 当您觉得已经足够探索时，让我们向Atom添加一个可以补充我们的shell脚本的软件包。 如果您仍然打开欢迎指南屏幕，请从中选择安装软件包。
    否则，您可以使用键盘快捷键*Ctrl* + *,*来打开设置屏幕。 您将在那里看到一个安装选项，它将带您到安装软件包屏幕。 搜索`bash`，您应该会看到以下软件包：
- en: '![](img/a06e30e7-22af-4c9c-bbb4-fd4e5df56e9a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a06e30e7-22af-4c9c-bbb4-fd4e5df56e9a.png)'
- en: 'Click the Install button and watch the installation. You might be prompted
    to reboot Atom after the install; be sure to do so. If you''re not prompted but
    see errors of any kind, a reboot of Atom is never a bad idea. After installing
    the package, you will now have autocomplete functionality when writing shell scripts.
    This means that you can start typing and Atom will try to predict what you want,
    in the following manner:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 单击安装按钮并观看安装过程。 安装后可能会提示您重新启动Atom；一定要这样做。 如果没有提示但看到任何错误，重新启动Atom绝对不是一个坏主意。 安装软件包后，您现在在编写shell脚本时将具有自动完成功能。
    这意味着您可以开始输入，Atom将尝试预测您想要的内容，方式如下：
- en: '![](img/d28ba384-67cb-4430-a16f-14deb151a288.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d28ba384-67cb-4430-a16f-14deb151a288.png)'
- en: 'On the right-hand side, you can see we started typing the `echo` shell command,
    and after the first two letters, Atom presented us with two options that contain
    those two letters. Once it makes a suggestion, we can press *Enter* and the command
    is inserted fully. While it will not save much time in this instance, it can be
    great for two main reasons:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，您可以看到我们开始输入`echo` shell命令，前两个字母后，Atom给出了包含这两个字母的两个选项。 一旦它提出建议，我们可以按*Enter*，命令就完全插入了。
    虽然在这种情况下节省的时间不会太多，但有两个主要原因可以很好地使用它：
- en: If you're unsure what the command is called exactly, you might be able to find
    it with autocomplete.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不确定命令的确切名称，您可能可以通过自动完成找到它。
- en: Once you start writing conditionals and loops (in the second part of this book),
    the autocomplete will span multiple lines, saving you from typing many words and
    remembering all the syntax.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦您开始编写条件和循环（在本书的第二部分），自动完成将跨越多行，为您节省了输入许多单词和记住所有语法的时间。
- en: 'Finally, let''s look at how Atom looks when you''ve got a Git project open
    and are working on files:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看当您打开一个Git项目并且正在处理文件时，Atom的外观是什么样的：
- en: '![](img/af1f8c28-8d6a-4f78-beb7-ee0d74d2f75c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af1f8c28-8d6a-4f78-beb7-ee0d74d2f75c.png)'
- en: 'When working in Atom, the screen will mostly look like this. On the left-hand
    side, you''ll see the **Tree View**, which you can toggle on/off by pressing *Ctrl*
    + *\*. The Tree View contains all the files in your current project (which is
    the directory you''ve opened). All these files can be opened by double-clicking
    them, which causes them to appear in the middle: the **Editor View**. This is
    where you''ll spend most of your time, working on the shell scripts. The Editor
    View will always be visible, even if there are currently no files open.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Atom中工作时，屏幕大部分时间看起来会像这样。 在左侧，您将看到**树视图**，您可以通过按*Ctrl* + *\*来切换其开/关。 树视图包含当前项目中的所有文件（即您打开的目录）。
    双击这些文件可以将它们打开，它们将出现在中间：**编辑器视图**。 这是您将花费大部分时间在其中编写shell脚本的地方。 即使当前没有打开文件，编辑器视图也将始终可见。
- en: By default, there is one last view, the **Git View**, located on the right-hand
    side. This view can be toggled by pressing *Ctrl *+*Shift *+ *9*. The code for
    this book is hosted on GitHub, which you will download (or, as Git calls it, *clone*)
    once, without the need to edit it on the remote server. Because of this, the Git
    View is not needed in this book, but we mention it since you will probably use
    it for other projects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，还有一个最后的视图，**Git视图**，位于右侧。 您可以通过按*Ctrl *+*Shift *+ *9*来切换此视图。 本书的代码托管在GitHub上，您将下载（或者，正如Git所称的那样，*克隆*）一次，而无需在远程服务器上进行编辑。
    因此，在本书中不需要Git视图，但我们提到它，因为您可能会在其他项目中使用它。
- en: Notepad++
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Notepad++
- en: 'Where Atom is closer to an **integrated development environment** (**IDE**)
    than a text editor, Notepad++ is pretty much what the name implies: good old Notepad
    with some added features. Some of these added features include being able to have
    multiple files open at the same time, syntax highlighting, and limited autocomplete.
    It was initially released in 2003 and only works on Windows.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Atom更接近于**集成开发环境**（**IDE**）而不是文本编辑器，Notepad++基本上就是其名字的含义：带有一些附加功能的老式记事本。 其中一些附加功能包括能够同时打开多个文件，语法高亮显示和有限的自动完成。
    它最初是在2003年发布的，只能在Windows上运行。
- en: Notepad++ is characterized by its simplicity. If you are familiar with any kind
    of Notepad software (who isn't?), Notepad++ should be instantly recognizable.
    While we recommend using Atom for this book, using a simple solution such as Notepad++
    will definitely not hold you back. However, in a business environment, you would
    almost always create scripts in an already existing version-controlled repository,
    which is where the added features of Atom really shine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Notepad++以其简单性而闻名。如果您熟悉任何一种记事本软件（谁不熟悉？），那么Notepad++应该是立即可识别的。虽然我们建议在本书中使用Atom，但使用诸如Notepad++之类的简单解决方案绝对不会让您退步。但是，在商业环境中，您几乎总是会在已存在的版本控制存储库中创建脚本，这就是Atom的附加功能真正发挥作用的地方。
- en: 'If you would like to check out Notepad++, grab it from [https://notepad-plus-plus.org/download](https://notepad-plus-plus.org/download)
    and run the installer (remember, only if you''re on Windows!). Keep the default
    options and run Notepad++ after the installation. You should be greeted by the
    following screen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试Notepad++，请从[https://notepad-plus-plus.org/download](https://notepad-plus-plus.org/download)下载并运行安装程序（请记住，仅当您使用Windows时！）。保持默认选项并在安装后运行Notepad++。您应该会看到以下屏幕：
- en: '![](img/30042cfb-f8b9-410d-b66f-5fa758b572eb.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30042cfb-f8b9-410d-b66f-5fa758b572eb.png)'
- en: As you can see, when you open a file ending in `.sh`, you will see syntax highlighting.
    This is because the `.sh` extension is reserved for shell script files. This can
    help you immensely when writing scripts. The example of a missing quote messing
    up your script will become really apparent with color-based syntax highlighting,
    possibly saving you many minutes of troubleshooting.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，当您打开以`.sh`结尾的文件时，您将看到语法高亮显示。这是因为`.sh`扩展名保留用于shell脚本文件。在编写脚本时，这可以帮助您很多。缺少引号导致脚本出错的示例将通过基于颜色的语法高亮显示变得非常明显，可能为您节省了很多故障排除时间。
- en: Notepad++ has many other features that make it a great enhanced Notepad. You
    can use macros to perform scripted tasks, you can install plugins to extend functionality,
    and there are many more unique features that make Notepad++ an attractive option.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Notepad++还有许多其他功能，使其成为一个出色的增强记事本。您可以使用宏执行脚本化任务，可以安装插件以扩展功能，并且还有许多其他独特功能，使Notepad++成为一个吸引人的选择。
- en: Using command-line editors
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行编辑器
- en: 'Being able to use command-line editors is a skill anyone working with Linux
    should learn sooner or later. For Linux installations with a GUI, this might be
    substituted with a GUI tool such as Atom or the distribution''s built-in variant
    on Notepad. However, server installations will almost never have a GUI and you
    will have to rely on command-line text editors. While this might sound daunting,
    it''s really not! To give you a small introduction to command-line editors, we''ll
    go over two of the most popular applications that are present on most Linux distributions:
    **Vim** and **GNU nano**.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用命令行编辑器是任何与Linux一起工作的人迟早都应该学会的技能。对于带有图形用户界面（GUI）的Linux安装，这可能会被替换为诸如Atom或分发内置的Notepad变体之类的GUI工具。但是，服务器安装几乎永远不会有GUI，您将不得不依赖命令行文本编辑器。虽然这可能听起来令人生畏，但实际上并非如此！为了给您一个关于命令行编辑器的简要介绍，我们将介绍大多数Linux发行版上都存在的两个最受欢迎的应用程序：**Vim**和**GNU
    nano**。
- en: Vim
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vim
- en: 'The first command-line text editor we will discuss is perhaps the most popular
    for Linux: **Vim**. Vim is derived from the term **Vi Improved**, as it is an
    updated clone of the Unix editor Vi. It was created and is still maintained by
    Bram Moolenaar, who first released Vim publicly in 1991\. Vim (or, on *very* old
    systems, Vi) should be present on all Unix or Unix-like machines you will encounter.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的第一个命令行文本编辑器可能是Linux中最受欢迎的：**Vim**。Vim源自术语**Vi Improved**，因为它是Unix编辑器Vi的更新克隆。它由Bram
    Moolenaar创建，并仍在维护，他于1991年首次公开发布了Vim。Vim（或者在*非常*老的系统上是Vi）应该存在于您遇到的所有Unix或类Unix机器上。
- en: Vim is considered a hard-to-learn tool. This is mainly caused by the fact it
    works very differently from text editors that most people are used to. However,
    once the initial learning curve is over, many agree that a lot of actions can
    be done in Vim much more quickly than in a *normal* text editor (such as Microsoft's
    Notepad++).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Vim被认为是一种难以学习的工具。这主要是因为它的工作方式与大多数人习惯的文本编辑器非常不同。但是，一旦初始学习曲线结束，许多人同意在Vim中可以更快地完成许多操作，而不是在*普通*文本编辑器（如Microsoft的Notepad++）中。
- en: 'Let''s jump in! Log in to your virtual machine:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！登录到您的虚拟机：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once logged in, open Vim to an empty file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，打开Vim到一个空文件：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should be greeted by something looking approximately like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到大致如下的东西：
- en: '![](img/fe2e21b6-1dcf-4230-a410-b0711f62ad9d.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe2e21b6-1dcf-4230-a410-b0711f62ad9d.png)'
- en: 'Vim starts a new process that uses your entire Terminal (don''t worry, everything
    will still be right where you left it once you exit Vim!). When you start up Vim,
    you will be placed in **normal** mode. Vim has a number of modes, of which normal
    and **insert** are the most interesting to explore. In normal mode, you can''t
    just start typing like you would in Notepad or Word. Since Vim was designed to
    be used without a mouse, it needed a way to manipulate text as well. Where some
    applications decided on using modifiers for this (holding the *Shift* key in Notepad
    for example), Vim decided on modes. Let''s first enter insert mode so we can start
    to type some text. Press the *I* key, and your screen should switch to insert
    mode:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Vim启动一个使用整个终端的新进程（不用担心，一旦退出Vim，一切都还会在您离开的地方！）。当您启动Vim时，您将进入**normal**模式。Vim有许多模式，其中正常和**insert**是最有趣的探索。在正常模式下，您不能像在记事本或Word中那样开始输入。由于Vim设计为无需鼠标即可使用，因此它需要一种方式来操作文本。一些应用程序决定使用修改器（例如在记事本中按住*Shift*键），而Vim决定使用模式。让我们首先进入插入模式，以便我们可以开始输入一些文本。按*I*键，您的屏幕应该切换到插入模式：
- en: '![](img/0366e553-54fa-480c-ab7b-80a70e92fbfd.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0366e553-54fa-480c-ab7b-80a70e92fbfd.png)'
- en: 'We''ve taken the liberty of typing some text while in insert mode. Be sure
    to do the same and when you''re done, press *Esc* to go back to normal mode:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在插入模式下输入了一些文本。确保您也这样做，完成后按*Esc*返回到正常模式：
- en: '![](img/f96f9399-fda5-415e-b2fc-c8f96986d375.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f96f9399-fda5-415e-b2fc-c8f96986d375.png)'
- en: 'If you compare the two screenshots, you should a big difference: in the lower-left
    corner, the text `-- INSERT --` is gone! When you''re in a mode other than normal,
    that mode is clearly presented there. If you do not see anything, you can safely
    assume you''re in normal mode. In normal mode, we can navigate using the arrow
    keys. We can also manipulate characters, words, and even (multiple) lines with
    a few key presses! For example, hit `dd` and notice that your whole line just
    got deleted. If you want to get it back, hit `u` for undo.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你比较两个屏幕截图，你应该会看到一个很大的区别：在左下角，文本`-- INSERT --`消失了！当你处于正常模式以外的模式时，那个模式会清晰地显示在那里。如果你什么都看不到，你可以安全地假设你处于正常模式。在正常模式下，我们可以使用箭头键进行导航。我们还可以使用几个按键来操作字符、单词，甚至（多个）行！例如，按下`dd`，注意到你整行都被删除了。如果你想要恢复它，按`u`进行撤销。
- en: 'One challenge remains: exiting Vim. Normally, you might be tempted to use the
    *Esc* button to exit a program. If you''re a little familiar with Linux, you might
    even know that a nice *Ctrl + C* will probably exit most programs as well. However,
    neither will work for Vim: *Esc* will just land you in normal mode, while *Ctrl* +
    *C* will not do anything. To quit Vim, make sure you are in normal mode and enter
    the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个挑战：退出Vim。通常，你可能会想要使用*Esc*按钮退出程序。如果你对Linux有一些了解，你可能甚至知道一个不错的*Ctrl + C*也可以退出大多数程序。然而，这两种方法对Vim都不起作用：*Esc*只会让你进入正常模式，而*Ctrl* +
    *C* 则不会有任何作用。要退出Vim，请确保你处于正常模式，并输入以下内容：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This exits your current document, without saving anything. If you want to *save
    and exit*, use the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将退出你当前的文档，而不保存任何内容。如果你想*保存并退出*，请使用以下命令：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This saves your current document as `filename.txt` and returns you to your
    Terminal. Note that normally you''ll start Vim on an already existing file by
    using the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将保存你当前的文档为`filename.txt`并返回到你的终端。请注意，通常你会使用以下命令在已经存在的文件上启动Vim：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, you do not need to enter a filename when saving and exiting; using
    `:x` is enough in that case. `:x` is actually shorthand for `:wq`. `:w` is the
    *write* action, which you use to save a file, and `:q` is used to *quit.* Combined,
    they are used to *save and quit*. If you want to save your file at any other time
    during editing, you can just use `:w` to accomplish this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当保存和退出时，你不需要输入文件名；在这种情况下，使用`:x`就足够了。`:x`实际上是`:wq`的缩写。`:w`是*写*操作，用于保存文件，`:q`用于*退出*。结合起来，它们用于*保存并退出*。如果你在编辑过程中想随时保存文件，你可以使用`:w`来完成这个操作。
- en: Vim summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vim摘要
- en: Vim has many commands that power users appreciate. For now, remember that there
    are two important modes, normal and insert. You can go from normal to insert by
    pressing *I*, and you can go back to normal mode by pressing *Esc*. When in insert
    mode, Vim behaves just like Notepad or Word, but in normal mode you can perform
    easy text manipulation, for example deleting the whole line currently selected.
    If you want to exit Vim, go to normal mode and enter either `:q!` or `:x`, depending
    on whether you want to save the changes or not.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Vim有许多命令，受力用户欣赏。现在，记住有两个重要的模式，正常和插入。你可以通过按*I*从正常模式切换到插入模式，你可以通过按*Esc*返回到正常模式。在插入模式下，Vim的行为就像记事本或Word一样，但在正常模式下，你可以进行简单的文本操作，例如删除当前选择的整行。如果你想退出Vim，进入正常模式，然后输入`:q!`或`:x`，取决于你是否想保存更改。
- en: Don't be afraid to start using Vim. While it might seem daunting at first, once
    you get the hang of it you can really perform file-related tasks on servers much
    more quickly. If you want to get a head start, take 30 minutes of your time and
    work through **vimtutor**. This command-line tool will get you up to speed with
    the basic usage of Vim really quickly! To start, simply navigate to your virtual
    machine, type `vimtutor`, and press *Enter*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕开始使用Vim。虽然一开始可能会让人望而生畏，但一旦你掌握了它，你就可以更快地在服务器上执行与文件相关的任务。如果你想提前了解，花30分钟的时间通过**vimtutor**。这个命令行工具会让你迅速掌握Vim的基本用法！要开始，只需导航到你的虚拟机，输入`vimtutor`，然后按*Enter*。
- en: .vimrc
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .vimrc
- en: 'The `.vimrc` file can be used to set some persistent options for Vim. Using
    this file, you can customize your Vim experience. There are many possibilities
    for customization: popular examples include setting the color scheme, converting
    between tabs and spaces, and setting search options.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`.vimrc`文件可用于为Vim设置一些持久选项。使用这个文件，你可以自定义你的Vim体验。有许多定制的可能性：常见的例子包括设置颜色方案，转换制表符和空格，以及设置搜索选项。'
- en: 'To create a `.vimrc` file that will be used when starting Vim, do the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个在启动Vim时使用的`.vimrc`文件，请执行以下操作：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first command places you in your `home` directory (don''t worry, this will
    be explained in greater detail later in this book). The second starts a Vim editor
    for the `.vimrc` file. Don''t forget the dot in front, as this is how Linux deals
    with hidden files (again, more on this later on). We''re using the following configuration
    in our `.vimrc` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将你放在你的`home`目录中（不用担心，这将在本书的后面更详细地解释）。第二个命令为`.vimrc`文件启动了一个Vim编辑器。不要忘记前面的点，因为这是Linux处理隐藏文件的方式（同样，稍后会更详细地介绍）。我们在`.vimrc`文件中使用以下配置：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In order, the following things are achieved with this configuration:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序，通过这个配置实现了以下几件事：
- en: '`set expandtab`: Converts tabs to spaces.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set expandtab`：将制表符转换为空格。'
- en: '`set tabstop=2`: Each tab is converted to two spaces.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set tabstop=2`：每个制表符转换为两个空格。'
- en: '`syntax on`: Turns on syntax highlighting (by using different colors).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syntax on`：打开语法高亮（使用不同的颜色）。'
- en: '`colorscheme peachpuff`: Uses the peachpuff color scheme.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorscheme peachpuff`：使用peachpuff颜色方案。'
- en: '`set ignorecase`: Ignores case when searching.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set ignorecase`：在搜索时忽略大小写。'
- en: '`set smartcase`: Doesn''t ignore case when searching with one or more uppercase
    letters.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set smartcase`：在搜索时不忽略一个或多个大写字母的大小写。'
- en: '`set number`: shows line numbers.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set number`：显示行号。'
- en: Vim cheat sheet
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vim速查表
- en: To get you started off with some great-to-know commands for Vim, we've incorporated
    a cheat sheet. After working through **vimtutor**, having this cheat sheet nearby
    almost guarantees you can properly use Vim!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您熟悉一些Vim的常用命令，我们提供了一个速查表。通过**vimtutor**学习后，有了这个速查表，几乎可以保证您能够正确地使用Vim！
- en: 'Keystrokes are entered directly. Note that the keystrokes are case sensitive,
    so *a* is different from *A*. You can either hold *Shift* for the capital letters
    or use the *Caps Lock* key. However, the most practical approach would be to use
    *Shift*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按键直接输入。请注意，按键区分大小写，因此*a*与*A*不同。您可以按住*Shift*键输入大写字母，或使用*大写锁定*键。然而，最实用的方法是使用*Shift*：
- en: '| **Keystroke** | **Effect** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **按键** | **效果** |'
- en: '| Esc | Exit insert mode, go back to command mode. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| Esc | 退出插入模式，返回命令模式。 |'
- en: '| i | Enter insert mode before the current location of the cursor. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| i | 在光标当前位置之前进入插入模式。 |'
- en: '| a | Enter insert mode after the current location of the cursor. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| a | 在光标当前位置之后进入插入模式。 |'
- en: '| I | Enter insert mode at the beginning of the current line. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| I | 在当前行的开头进入插入模式。 |'
- en: '| A | Enter insert mode at the end of the current line. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| A | 在当前行的末尾进入插入模式。 |'
- en: '| o | Enter insert mode with a new line below the current line. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| o | 在当前行下方插入新行进入插入模式。 |'
- en: '| O | Enter insert mode with a new line above the current line. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| O | 在当前行上方插入新行进入插入模式。 |'
- en: '| dd | Delete the current line. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| dd | 删除当前行。 |'
- en: '| u | Undo the changes made in the previous insert mode. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| u | 撤消上一个插入模式中所做的更改。 |'
- en: '| Ctrl + r | Redo an undo. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl + r | 重做撤消。 |'
- en: '| yy | ''Yank'' the current line (=copy). |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| yy | ''复制''当前行。 |'
- en: '| p | Paste the last yanked line below the current line. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| p | 在当前行下方粘贴最后复制的行。 |'
- en: '| P | Paste the last yanked line above the current line. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| P | 在当前行上方粘贴最后复制的行。 |'
- en: '| H | Navigate to the beginning of the file. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| H | 导航到文件开头。 |'
- en: '| M | Navigate to the middle of the file. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| M | 导航到文件中间。 |'
- en: '| G | Navigate to the end of the file. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| G | 导航到文件末尾。 |'
- en: '| dH | Delete all lines until the beginning of the file (including the current
    line). |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| dH | 删除直到文件开头的所有行（包括当前行）。 |'
- en: '| dG | Delete all lines until the end of the file (including the current line).
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| dG | 删除直到文件末尾的所有行（包括当前行）。 |'
- en: nano
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nano
- en: GNU nano, commonly referred to as just nano, is another command-line editor
    that is present by default on most Linux installations. As the name might suggest,
    it is part of the GNU project, no different than many other parts that make up
    a Linux distribution (remember, Bash is also GNU project software). Nano was first
    released in 1999, with the intention of replacing the Pico text editor, a simple
    text editor created for Unix systems.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: GNU nano，通常简称为nano，是另一个默认存在于大多数Linux安装中的命令行编辑器。正如名称所示，它是GNU项目的一部分，与构成Linux发行版的许多其他部分并无不同（请记住，Bash也是GNU项目软件）。Nano于1999年首次发布，旨在取代Pico文本编辑器，Pico是为Unix系统创建的简单文本编辑器。
- en: Nano is much more than a **What You See Is What You Get** (**WYSIWYG**) tool,
    definitely when compared to Vim. Similar to Notepad and Word, nano does not use
    different modes; it's always ready to start typing your documents or scripts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与Vim相比，Nano远不止是一个所见即所得（WYSIWYG）工具。类似于记事本和Word，nano不使用不同的模式；它总是准备好开始输入您的文档或脚本。
- en: 'On your virtual machine, open a nano editor screen:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的虚拟机上，打开一个nano编辑器屏幕：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A screen similar to the following should come up:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 应该出现类似以下的屏幕：
- en: '![](img/04bddff3-a1a2-4e48-9e33-b3156ec1e49d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04bddff3-a1a2-4e48-9e33-b3156ec1e49d.png)'
- en: 'Feel free to start typing something. It should look something like the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 随意开始输入一些内容。它应该看起来像以下内容：
- en: '![](img/bd94cf3c-1c98-454b-a34e-72ef9ea521ae.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd94cf3c-1c98-454b-a34e-72ef9ea521ae.png)'
- en: 'As you can see, the bottom of the screen is reserved for presenting what nano
    calls **control keys**. While it might not be obvious at first, the `^` is shorthand
    for *Ctrl*. If you want to exit, you hold down *Ctrl* and press *X*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，屏幕底部保留用于显示nano所称的**控制键**。虽然一开始可能不太明显，但`^`是*Ctrl*的简写。如果您想退出，您可以按住*Ctrl*并按*X*：
- en: '![](img/b3e70af4-3613-45f3-8f9e-bc7fb0df21da.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3e70af4-3613-45f3-8f9e-bc7fb0df21da.png)'
- en: 'You will be prompted whether you''d like to exit with or without saving your
    file. In this case, we press *Y* for Yes. If we started nano with a filename,
    the save and exit would be completed right away, but because we started nano without
    a filename, another choice will be presented to us:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示是否要保存或不保存文件并退出。在这种情况下，我们按*Y*表示是。如果我们使用文件名启动nano，保存和退出将立即完成，但因为我们没有使用文件名启动nano，另一个选择将被呈现给我们：
- en: '![](img/f4464db7-e895-4239-9dc1-257af9ca09fb.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4464db7-e895-4239-9dc1-257af9ca09fb.png)'
- en: 'Enter a filename and press *Enter*. You will be back in your previous Terminal
    screen, in the directory where you started nano. If everything went well, you
    can see the file with the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件名并按*Enter*。您将回到之前的终端屏幕，在您启动nano的目录中。如果一切顺利，您可以使用以下命令查看文件：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/1bd5b969-f2d2-4890-945c-45dc176a0c63.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bd5b969-f2d2-4890-945c-45dc176a0c63.png)'
- en: While nano has more advanced features, for basic usage we have discussed the
    most important features. While it's initially easier to use than Vim, it's also
    not as powerful. Simply said, nano is simple, Vim is powerful.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管nano具有更多高级功能，但对于基本用法，我们已经讨论了最重要的功能。虽然最初使用比Vim更容易，但它也没有那么强大。简而言之，nano很简单，Vim很强大。
- en: 'If you do not have any experience and/or preference, our recommendation would
    be to spend a little bit of time learning Vim and stick with it. After spending
    more time with Linux and Bash scripting, the advanced features of Vim become hard
    to live without. However, if you can''t get used to Vim, don''t be ashamed to
    use nano: it''s a fine editor that will get most jobs done without too much hassle!'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有任何经验和/或偏好，我们建议您花点时间学习Vim并坚持使用它。在花费更多时间学习Linux和Bash脚本之后，Vim的高级功能变得不可或缺。但是，如果您无法习惯Vim，不要害羞地使用nano：这是一个很好的编辑器，可以在不太麻烦的情况下完成大部分工作！
- en: Combining graphical editors with command-line editors when writing shell scripts
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在编写shell脚本时，将图形编辑器与命令行编辑器相结合
- en: To give you an impression of how we like to combine GUI tools with command-line
    editors, we've given the following example workflow. Don't worry about not understanding
    all steps yet; at the end of the book, you should come back to this example and
    understand exactly what we're talking about.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解我们喜欢如何将GUI工具与命令行编辑器结合使用，我们给出了以下示例工作流程。不要担心现在不理解所有步骤；在本书结束时，您应该回到这个示例并准确理解我们在谈论什么。
- en: 'When you''re writing shell scripts, you normally go through a few phases:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写shell脚本时，通常会经历几个阶段：
- en: Gather requirements for the shell script.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集shell脚本的要求。
- en: Design the shell script.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计shell脚本。
- en: Write the shell script.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写shell脚本。
- en: Test and adjust the shell script.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试和调整shell脚本。
- en: (Optional) Submit the working shell scripts to your version control system.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）将工作的shell脚本提交到您的版本控制系统。
- en: 'Phases 1 and 2 are often done without writing actual code. You think about
    the purpose of the script, how it could be implemented, and what is gained by
    creating the script. These steps often involve research and looking for best practices.
    When you feel like you have a good idea about why, what, and how you''re going
    to write your shell script, you move on to phase 3: writing the script. At this
    point, you would open your favorite GUI-based editor and start typing away. Because
    the GUI editor has autocomplete, syntax highlighting, and other productivity features
    built in, you can efficiently write most of the shell script code. After you feel
    like your script is ready for testing, you need to move away from your GUI: the
    script has to be tested on the system it''s been designed for.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段1和2通常在不编写实际代码的情况下完成。您会思考脚本的目的，它如何实现，以及创建脚本会带来什么好处。这些步骤通常涉及研究和寻找最佳实践。当您觉得对为什么、什么以及如何编写shell脚本有了很好的想法时，就可以进入第3阶段：编写脚本。在这一点上，您会打开您最喜欢的基于GUI的编辑器并开始输入。由于GUI编辑器具有自动完成、语法高亮和其他内置的生产力功能，您可以高效地编写大部分shell脚本代码。在您觉得脚本准备好进行测试之后，您需要离开GUI：脚本必须在其设计的系统上进行测试。
- en: Phase 4 begins. You copy and paste the script to the server, using either Vim
    or nano. Once the script is on the server, you run it. Most of the time, it will
    not actually do everything you expected it to do. Tiny mistakes are easy to make
    and easy to fix, but it would be a small hassle to go back to the GUI editor,
    change it, save it, transfer it to the server, and run it again! Luckily, we can
    use either Vim or nano to make minor changes to fix the script right there on
    the server and try again. A missing `;`or `"` will make a shell script unusable,
    but it's fixed quickly (although errors like that are often highlighted in the
    GUI editors, so those are unlikely to make it onto the server, even for the first
    version).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 第4阶段开始。您可以使用Vim或nano将脚本复制并粘贴到服务器上。一旦脚本在服务器上，您就可以运行它。大多数情况下，它实际上不会做您期望它做的一切。小错误很容易犯错，也很容易修复，但是如果要回到GUI编辑器更改、保存、传输到服务器并再次运行，这将是一个小麻烦！幸运的是，我们可以使用Vim或nano在服务器上进行微小更改以修复脚本，并再次尝试。一个丢失的`;`或`"`将使shell脚本无法使用，但可以快速修复（尽管GUI编辑器通常会突出显示这样的错误，因此这些错误不太可能出现在服务器上，即使是第一个版本）。
- en: Finally, after a number of iterations, your script will work as expected. Now
    you have to make sure the full and correct script is uploaded to your version
    control system. It's recommended to transfer the script from the GUI to the server
    one last time, to see whether you have applied all the changes you made on the
    server to your GUI session as well. Once that is done, commit it, and you're finished!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在经过多次迭代后，您的脚本将按预期工作。现在，您必须确保完整且正确的脚本已上传到您的版本控制系统。建议将脚本从GUI传输到服务器最后一次，以查看您是否已将服务器上所做的所有更改应用到您的GUI会话中。完成后，提交它，您就完成了！
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we discussed four text editing tools, divided into two types:
    GUI-based editors (Atom and Notepad++) and command-line editors  (Vim and GNU
    nano), before showing how to use these tools together.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了四种文本编辑工具，分为两种类型：基于GUI的编辑器（Atom和Notepad++）和命令行编辑器（Vim和GNU nano），然后展示了如何将这些工具结合使用。
- en: Atom is a powerful text editor that can be configured exactly how you want .
    By default, it has support for many different coding languages, including shell.
    It also comes with Git and GitHub integration. We also briefly discussed Notepad++.
    While not as powerful as Atom, it is also suitable for our purposes, as it is
    basically an enhanced Notepad with all the important features for shell scripting.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Atom是一个功能强大的文本编辑器，可以按照您的要求进行配置。默认情况下，它支持许多不同的编程语言，包括shell。它还具有Git和GitHub集成。我们还简要讨论了Notepad++。虽然不如Atom强大，但它也适用于我们的目的，因为它基本上是一个增强版的记事本，具有所有shell脚本的重要功能。
- en: Vim and nano are the two most popular Linux command-line text editors. We have
    learned that while Vim is very powerful, it is also harder to learn than nano.
    However, learning how to properly use Vim will speed up many things you do on
    a Linux system and is a very valuable skill to have. For a great hands-on introduction
    to Vim, go through the vimtutor. Nano is much easier to use, as it more closely
    resembles the WYSIWYG editing style also found in Microsoft Word and Notepad.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Vim和nano是两种最流行的Linux命令行文本编辑器。我们已经了解到，虽然Vim非常强大，但比nano更难学习。然而，学会如何正确使用Vim将加快您在Linux系统上的许多操作，并且是一项非常有价值的技能。要了解Vim的实际操作，请通过vimtutor进行实践性的介绍。Nano更容易使用，因为它更接近所见即所得的编辑风格，这种风格也在Microsoft
    Word和记事本中找到。
- en: We ended the chapter with an example of a shell scripting journey. We gave a
    brief overview of how to use GUI-based editors in combination with command-line
    editors.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以一个shell脚本编写的示例结束了本章。我们简要概述了如何在命令行编辑器中使用基于GUI的编辑器。
- en: 'The following commands were introduced in this chapter: `vim`, `nano`, and `ls`.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了以下命令：`vim`、`nano`和`ls`。
- en: Questions
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is syntax highlighting an important feature for text editors?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么语法高亮是文本编辑器的重要特性？
- en: How can we extend the functionality already provided by Atom?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何扩展Atom已提供的功能？
- en: What are the benefits of autocomplete when writing shell scripts?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写shell脚本时，自动补全有什么好处？
- en: How could we describe the difference between Vim and GNU nano?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vim和GNU nano之间的区别如何描述？
- en: Which are the two most interesting modes in Vim?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vim中最有趣的两种模式是哪两种？
- en: What is the `.vimrc` file?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`.vimrc`文件？
- en: What do we mean when we call nano a WYSIWYG editor?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们称nano为所见即所得的编辑器时，我们是什么意思？
- en: Why would we want to combine GUI editors with command-line editors?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们希望将图形界面编辑器与命令行编辑器结合使用？
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resource might be interesting if you''d like to go deeper into
    the subjects of this chapter:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更深入地了解本章的主题，以下资源可能会很有趣：
- en: '*Hacking Vim 7.2* by Kim Schulz, Packt Publishing: [https://www.packtpub.com/application-development/hacking-vim-72](https://www.packtpub.com/application-development/hacking-vim-72)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kim Schulz的*Hacking Vim 7.2*，Packt Publishing：[https://www.packtpub.com/application-development/hacking-vim-72](https://www.packtpub.com/application-development/hacking-vim-72)
