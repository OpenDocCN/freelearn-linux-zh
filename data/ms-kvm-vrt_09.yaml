- en: '*Chapter 7*: Virtual Machines: Installation, Configuration, and Life Cycle
    Management'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：虚拟机：安装、配置和生命周期管理'
- en: In this chapter, we will discuss different ways of installing and configuring
    `virt-manager`, `virt-install`, oVirt) and build upon our knowledge gained from
    previous chapters. Then, we will have a lengthy discussion about VM migration,
    one of the most fundamental aspects of virtualization, as it's pretty much unimaginable
    to use virtualization without migration options. To be able to configure our environment
    for VM migration, we will also use topics discussed in [*Chapter 4*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062),
    *Libvirt Networking*, and [*Chapter 5*](B14834_05_Final_ASB_ePub.xhtml#_idTextAnchor079),
    *Libvirt Storage*, as there are pre-requisites that need to be met for VM migration
    to work.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论安装和配置`virt-manager`、`virt-install`、oVirt的不同方式，并建立在前几章中获得的知识基础上。然后，我们将对虚拟机迁移进行详细讨论，这是虚拟化的最基本方面之一，因为几乎无法想象在没有迁移选项的情况下使用虚拟化。为了能够为虚拟机迁移配置我们的环境，我们还将使用[*第4章*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062)中讨论的主题，*Libvirt网络*，以及[*第5章*](B14834_05_Final_ASB_ePub.xhtml#_idTextAnchor079)中讨论的主题，*Libvirt存储*，因为虚拟机迁移需要满足一些先决条件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a new VM using `virt-manager`, using `virt` commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`virt-manager`创建新的虚拟机，使用`virt`命令
- en: Creating a new VM using oVirt
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用oVirt创建新的虚拟机
- en: Configuring your VM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置您的虚拟机
- en: Adding and removing virtual hardware from your VM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向虚拟机添加和删除虚拟硬件
- en: Migrating VMs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移虚拟机
- en: Creating a new VM using virt-manager
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用virt-manager创建新的虚拟机
- en: '`virt-manager` (a GUI tool for managing VMs) and `virt-install` (a command-line
    utility for managing VMs) are two of the most commonly used utilities in `virt-*`
    command stack that are very, very useful.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`virt-manager`（用于管理虚拟机的图形界面工具）和`virt-install`（用于管理虚拟机的命令行实用程序）是`virt-*`命令堆栈中最常用的实用程序之一，非常有用。'
- en: Let's start with `virt-manager` and its familiar GUI.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`virt-manager`及其熟悉的图形界面开始。
- en: Using virt-manager
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用virt-manager
- en: '`virt-manager` is the go-to GUI utility to manage KVM VMs. It''s very intuitive
    and easy to use, albeit lacking in functionality a bit, as we will describe a
    bit later. This is the main `virt-manager` window:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`virt-manager`是管理KVM虚拟机的首选图形界面实用程序。它非常直观和易于使用，尽管在功能上有点欠缺，我们稍后会描述一下。这是主`virt-manager`窗口：'
- en: '![ Figure 7.1 – Main virt-manager window'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 - 主virt-manager窗口'
- en: '](img/B14834_07_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_01.jpg)'
- en: Figure 7.1 – Main virt-manager window
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 - 主virt-manager窗口
- en: 'From this screenshot, we can already see that there are three VMs installed
    on this server. We can use the top-level menus (**File**, **Edit**, **View**,
    and **Help**) to further configure our KVM server and/or VMs, as well as to connect
    to other KVM hosts on the network, as you can see in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个屏幕截图中，我们已经可以看到在此服务器上安装了三个虚拟机。我们可以使用顶级菜单（**文件**，**编辑**，**查看**和**帮助**）进一步配置我们的KVM服务器和/或虚拟机，以及连接到网络上的其他KVM主机，如下面的屏幕截图所示：
- en: '![Figure 7.2 – Connecting to other KVM hosts by using the Add Connection… option'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2 - 使用“添加连接...”选项连接到其他KVM主机'
- en: '](img/B14834_07_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_02.jpg)'
- en: Figure 7.2 – Connecting to other KVM hosts by using the Add Connection… option
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 - 使用“添加连接...”选项连接到其他KVM主机
- en: 'After we select the `virt-manager`. The process is shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`virt-manager`后。该过程如下截图所示：
- en: '![Figure 7.3 – Connecting to remote KVM host'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3 - 连接到远程KVM主机'
- en: '](img/B14834_07_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_03.jpg)'
- en: Figure 7.3 – Connecting to remote KVM host
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 - 连接到远程KVM主机
- en: 'At this point, you can start freely installing the VM on that remote KVM host,
    should you choose to do so, by right-clicking on the hostname and selecting **New**,
    as illustrated in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以通过右键单击主机名并选择**新建**来自由在远程KVM主机上安装虚拟机，如果选择这样做，如下截图所示：
- en: '![Figure 7.4 – Creating a new VM on a remote KVM host'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 - 在远程KVM主机上创建新的虚拟机'
- en: '](img/B14834_07_04.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_04.jpg)'
- en: Figure 7.4 – Creating a new VM on a remote KVM host
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 - 在远程KVM主机上创建新的虚拟机
- en: 'As this wizard is the same as the wizard for installing VMs on your local server,
    we''ll cover both of these scenarios in one go. The first step in the **New VM**
    wizard is selecting *where* you''re installing your VM *from*. As you can see
    in the following screenshot, there are four available options:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此向导与在本地服务器上安装虚拟机的向导相同，我们将一次性涵盖这两种情况。**新建虚拟机**向导的第一步是选择您要从哪里安装虚拟机。如下截图所示，有四个可用选项：
- en: '![Figure 7.5 – Selecting boot media'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 - 选择引导介质'
- en: '](img/B14834_07_05.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_05.jpg)'
- en: Figure 7.5 – Selecting boot media
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 - 选择引导介质
- en: 'The choices are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择如下：
- en: If you already have an **International Organization for Standardization** (**ISO**)
    file available on your local machine (or as a physical device), select the first
    option.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已经在本地计算机上（或作为物理设备）有一个**国际标准化组织**（**ISO**）文件可用，请选择第一个选项。
- en: If you want to install from the network, select the second option.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想从网络安装，请选择第二个选项。
- en: If you have a **Preboot eXecution Environment** (**PXE**) boot set up in your
    environment and you can boot your VM installation from the network, select the
    third option.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在环境中设置了**预引导执行环境**（**PXE**）引导，并且可以从网络引导您的虚拟机安装，请选择第三个选项。
- en: If you have a VM disk and you just want to underlay that to a VM you're defining,
    select the fourth option.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有一个虚拟机磁盘，并且只想将其作为底层定义为虚拟机，请选择第四个选项。
- en: Commonly, we're talking about network installations (second option) or PXE-booted
    network installations (third option), as these are the most popular use cases
    in production. The reason for this is very simple—there's absolutely no reason
    to waste local disk space on ISO files, which are quite big nowadays. For example,
    a CentOS 8 v1905 ISO file is roughly 8 **gigabytes** (**GB**) in size. If you
    need to be able to install multiple operating systems, or even multiple versions
    of these operating systems, you're better off with some sort of centralized storage
    space for ISO files only.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们谈论网络安装（第二个选项）或PXE引导网络安装（第三个选项），因为这些是生产中最常见的用例。原因非常简单 - 没有理由在ISO文件上浪费本地磁盘空间，而这些文件现在相当大。例如，CentOS
    8 v1905 ISO文件大约为8 **GB**。如果需要能够安装多个操作系统，甚至是这些操作系统的多个版本，最好使用一种仅用于ISO文件的集中存储空间。
- en: In VMware **ESX integrated** (**ESXi**)-based infrastructures, people often
    use ISO datastores or content libraries for this functionality. In Microsoft Hyper-V-based
    infrastructures, people usually have a **Server Message Block** (**SMB**) file
    share with ISO files needed for a VM installation. It would be quite pointless
    to have a copy of an operating system ISO per host, so some kind of a shared approach
    is much more convenient and is a good space-saving mechanism.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于VMware **ESX集成**（**ESXi**）的基础设施中，人们通常使用ISO数据存储或内容库来实现此功能。在基于Microsoft Hyper-V的基础设施中，人们通常拥有一个用于VM安装所需ISO文件的**服务器消息块**（**SMB**）文件共享。每台主机都拷贝一个操作系统ISO文件是毫无意义的，因此一种共享的方法更加方便，也是一个很好的节省空间的机制。
- en: 'Let''s say that we''re installing a VM from a network (**HyperText Transfer
    Protocol** (**HTTP**), **HyperText Transfer Protocol Secure** (**HTTPS**), or
    **File Transfer Protocol** (**FTP**)). We''re going to need a couple of things
    to proceed, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在从网络（**超文本传输协议**（**HTTP**）、**超文本传输安全协议**（**HTTPS**）或**文件传输协议**（**FTP**））安装VM。我们需要一些东西来继续，如下所示：
- en: A `8.x.x` directory, and then go to `BaseOS/x86_64/os`.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`8.x.x`目录，然后转到`BaseOS/x86_64/os`。
- en: Obviously, a functional internet connection—as fast as possible, as we are going
    to download all the necessary installation packages from the preceding URL.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显然，需要一个功能正常的互联网连接，尽可能快，因为我们将从前面的URL下载所有必要的安装包。
- en: 'Optionally, we can open the **URL options** triangle and use additional options
    for the kernel line—most commonly, kickstart options with something such as the
    following:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，我们可以展开**URL选项**三角形，并使用内核行的附加选项，最常见的是使用类似以下内容的kickstart选项：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, let''s type that in, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们输入如下内容：
- en: '![Figure 7.6 – URL and guest operating system selection'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.6 - URL和客户操作系统选择'
- en: '](img/B14834_07_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_06.jpg)'
- en: Figure 7.6 – URL and guest operating system selection
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 - URL和客户操作系统选择
- en: Note that we *manually* selected `virt-manager` doesn't currently recognize
    CentOS 8 (1905) as the guest operating system from the URL that we specified.
    If the operating system had been on the list of currently recognized operating
    systems, we could've just selected the **Automatically detect from installation
    media / source** checkbox, which you sometimes need to re-check and uncheck a
    couple of times before it works.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们*手动*选择的`virt-manager`目前不认识我们指定的URL中的CentOS 8（1905）作为客户操作系统。如果操作系统在当前识别的操作系统列表中，我们可以只需选择**从安装媒体/源自动检测**复选框，有时需要多次重新检查和取消检查才能使其正常工作。
- en: 'After clicking on the **Forward** button, we''re faced with memory and **central
    processing unit** (**CPU**) settings for this VM. Again, you can go in two different
    directions here, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**前进**按钮后，我们需要为此VM设置内存和**中央处理单元**（**CPU**）设置。同样，您可以选择两种不同的方向，如下所示：
- en: Select the bare minimum of resources (for example, 1 **virtual CPU** (**vCPU**)
    and 1 GB of memory), and then change that afterward if you need more CPU horsepower
    and/or more memory.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择最少的资源（例如，1个**虚拟CPU**（**vCPU**）和1GB内存），然后根据需要更改。
- en: Select a decent amount of resources (for example, 2 vCPU and 4 GB of memory)
    with a specific usage in mind. For example, if the intended use case for this
    VM is a file server, you won't get an awful lot of performance if you add 16 vCPUs
    and 64 GB of memory to it, but there might be other use cases in which this will
    be appropriate.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择适量的资源（例如，2个vCPU和4GB内存），并考虑特定的用途。例如，如果此VM的预期用途是文件服务器，如果添加16个vCPU和64GB内存，性能将不会很好，但在其他用例中可能会适用。
- en: 'The next step is configuring the VM storage. There are two available options,
    as we can see in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置VM存储。如下截图所示，有两个可用选项：
- en: '![Figure 7.7 – Configuring VM storage'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.7 - 配置VM存储'
- en: '](img/B14834_07_07.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_07.jpg)'
- en: Figure 7.7 – Configuring VM storage
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 - 配置VM存储
- en: It's very important that you select a *proper* storage device for the VM, as
    you might have various problems in the future if you don't. For example, if you
    put your VM on the wrong storage device in a production environment, you'll have
    to migrate storage of that VM to another storage device, which is a tedious and
    time-consuming process that will have some nasty side effects if you have loads
    of VMs running on the source or destination storage device. For starters, it will
    seriously impact their performance. Then, if you have some dynamic workload management
    mechanism in your environment, it could trigger additional VM or VM storage movement
    in your infrastructure. Features such as VMware's **Distributed Resource Scheduler**
    (**DRS**)/Storage DRS, Hyper-V performance and resource optimization (with **System
    Center Operations Manager** (**SCOM**) integration), and oVirt/Red Hat Enterprise
    Virtualization cluster scheduling policies do things such as that. So, adopting
    the *think twice, do once* strategy might be the correct approach here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为VM选择一个*合适*的存储设备非常重要，因为如果你不这样做，将来可能会遇到各种问题。例如，如果你在生产环境中将VM放在错误的存储设备上，你将不得不将该VM的存储迁移到另一个存储设备，这是一个繁琐且耗时的过程，会对你的VM产生一些不好的副作用，特别是如果你的源或目标存储设备上有大量的VM在运行。首先，它会严重影响它们的性能。然后，如果你的环境中有一些动态工作负载管理机制，它可能会触发基础设施中的额外VM或VM存储移动。像VMware的**分布式资源调度器**（**DRS**）/存储DRS，带有**System
    Center Operations Manager**（**SCOM**）集成的Hyper-V性能和资源优化，以及oVirt/Red Hat Enterprise
    Virtualization集群调度策略等功能就是这样做的。因此，采用*三思而后行*的策略可能是正确的方法。
- en: If you select the first available option, `virt-manager` will create a VM hard
    disk in its default location—for `/var/lib/libvirt/images` directory. Make sure
    that you have enough space for your VM hard disk. Let's say that we have 8 GB
    of space available in the `/var/lib/libvirt/images` directory and its underlying
    partition. If we leave everything as-is from the previous screenshot, we'd get
    an error message because we tried to create a 10 GB file on a local disk where
    only 8 GB is available.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择第一个可用选项，`virt-manager`将在其默认位置创建一个VM硬盘——在`/var/lib/libvirt/images`目录中。确保你有足够的空间来存放你的VM硬盘。假设我们在`/var/lib/libvirt/images`目录及其底层分区中有8GB的可用空间。如果我们保持前面截图中的一切不变，我们会收到一个错误消息，因为我们试图在只有8GB可用的本地磁盘上创建一个10GB的文件。
- en: 'After we click the `virt-manager`), customize the configuration before the
    installation process, and select which virtual network the VM will use. We will
    cover the hardware customization of the VM a bit later in the chapter. After you
    click **Finish**, as shown in the following screenshot, your VM will be ready
    for deployment and—after we install the operating system—use:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们点击`virt-manager`之后，在安装过程之前自定义配置，并选择VM将使用的虚拟网络。我们将在本章稍后讨论VM的硬件定制。当你点击**完成**时，如下截图所示，你的VM将准备好部署，并且在我们安装操作系统后使用：
- en: '![Figure 7.8 – Final virt-manager configuration step'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.8 – 最终virt-manager配置步骤'
- en: '](img/B14834_07_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_08.jpg)'
- en: Figure 7.8 – Final virt-manager configuration step
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 最终virt-manager配置步骤
- en: Using `virt-manager` to create some VMs definitely wasn't a difficult task,
    but in real-life production environments, you won't necessarily find a GUI installed
    on a server. Therefore, our logical next task is to get to know command-line utilities
    to manage VMs—specifically, `virt-*` commands. Let's do that next.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`virt-manager`创建一些VM绝对不是一项困难的任务，但在现实生产环境中，你不一定会在服务器上找到GUI。因此，我们的逻辑下一个任务是了解命令行工具来管理VM——具体来说是`virt-*`命令。让我们接着做。
- en: Using virt-* commands
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用virt-*命令
- en: As previously mentioned, we need to learn some new commands to master the task
    of basic VM administration. For this specific purpose, we have stack of `virt-*`
    commands. Let's briefly go over some of the most important ones and learn how
    to use them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要学习一些新的命令来掌握基本VM管理任务。为了这个特定的目的，我们有一堆`virt-*`命令。让我们简要地介绍一些最重要的命令，并学习如何使用它们。
- en: virt-viewer
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: virt-viewer
- en: As we've already used the `virt-install` command heavily before (check out [*Chapter
    3*](B14834_03_Final_ASB_ePub.xhtml#_idTextAnchor049), *Installing a Kernel-based
    Virtual Machine (KVM) Hypervisor, libvirt, and ovirt*, where we installed quite
    a few VMs by using this command), we're going to cover the remaining commands.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们之前已经大量使用了`virt-install`命令（查看[*第3章*](B14834_03_Final_ASB_ePub.xhtml#_idTextAnchor049)，*安装基于内核的虚拟机（KVM）超级监视器，libvirt和ovirt*，我们使用这个命令安装了相当多的VM），我们将覆盖剩下的命令。
- en: Let's start with `virt-viewer`, as we've used this application before. Every
    time we double-click on a VM in `virt-viewer`, we open a VM console, and that
    happens to be `virt-viewer` in the background of this procedure. But if we wanted
    to use `virt-viewer` from a shell—as people often do—we need some more information
    about it. So, let's use a couple of examples.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`virt-viewer`开始，因为我们之前使用过这个应用程序。每次我们在`virt-viewer`中双击一个虚拟机，我们就打开了一个虚拟机控制台，这恰好是这个过程背后的`virt-viewer`。但是如果我们想要从shell中使用`virt-viewer`——就像人们经常做的那样——我们需要一些关于它的更多信息。所以，让我们举几个例子。
- en: 'First, let''s connect to a local KVM called `MasteringKVM01`, which resides
    on the host that we''re currently connected to as `root` , by running the following
    command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过运行以下命令连接到一个名为`MasteringKVM01`的本地KVM，它位于我们当前以`root`连接的主机上：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We could also connect to the VM in `kiosk` mode, which means that `virt-viewer`
    will close when we shut down the VM that we connect to. To do this, we would run
    the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以`kiosk`模式连接到VM，这意味着当我们关闭连接的VM时，`virt-viewer`也会关闭。要做到这一点，我们将运行以下命令：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we need to connect to a *remote* host, we can also use `virt-viewer`, but
    we need a couple of additional options. The most common way to authenticate to
    a remote system is through SSH, so we can do the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要连接到*远程*主机，我们也可以使用`virt-viewer`，但我们需要一些额外的选项。连接到远程系统的最常见方式是通过SSH，所以我们可以这样做：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we configured SSH keys and copied them to `username@remote-host`, this previous
    command wouldn't ask us for a password. But if we didn't, it is going to ask us
    for a password twice—to establish connection to the hypervisor and then to establish
    connection to the VM **Virtual Network Computing** (**VNC**) session.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们配置了SSH密钥并将它们复制到`username@remote-host`，这个前面的命令就不会要求我们输入密码。但如果没有，它将会要求我们输入密码两次——一次是建立与hypervisor的连接，另一次是建立与VM
    **Virtual Network Computing** (**VNC**) 会话的连接。
- en: virt-xml
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: virt-xml
- en: 'The next command-line utility on our list is `virt-xml`. We can use it with
    `virt-install` command-line options to change the VM configuration. Let''s start
    with a basic example—let''s just enable the boot menu for the VM, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列表中的下一个命令行实用程序是`virt-xml`。我们可以使用它与`virt-install`命令行选项来更改VM配置。让我们从一个基本的例子开始——让我们只是为VM启用引导菜单，如下所示：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, let''s add a thin-provisioned disk to the VM, in three steps— first,
    create the disk itself, and then attach it to the VM and check that everything
    worked properly. The output can be seen in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们向VM添加一个薄配置的磁盘，分三步——首先，创建磁盘本身，然后将其附加到VM，并检查一切是否正常工作。输出可以在下面的截图中看到：
- en: '![Figure 7.9 – Adding a thin-provision QEMU copy-on-write (qcow2) format virtual
    disk to a VM'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.9 – 向VM添加一个薄配置QEMU写时复制（qcow2）格式的虚拟磁盘'
- en: '](img/B14834_07_09.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_09.jpg)'
- en: Figure 7.9 – Adding a thin-provision QEMU copy-on-write (qcow2) format virtual
    disk to a VM
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 向VM添加一个薄配置QEMU写时复制（qcow2）格式的虚拟磁盘
- en: As we can see, `virt-xml` is quite useful. By using it, we added another virtual
    disk to our VM, and that's one of the simplest things that it can do. We can use
    it to deploy any additional piece of VM hardware to an existing VM. We can also
    use it to edit a VM configuration, which is really handy in larger environments,
    especially when you have to script and automate such procedures.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`virt-xml`非常有用。通过使用它，我们向我们的VM添加了另一个虚拟磁盘，这是它可以做的最简单的事情之一。我们可以使用它向现有的VM部署任何额外的VM硬件。我们还可以使用它编辑VM配置，在较大的环境中特别方便，特别是当你必须对这样的过程进行脚本化和自动化时。
- en: virt-clone
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: virt-clone
- en: 'Let''s now check `virt-clone` by using a couple of examples. Let''s say we
    just want a quick and easy way to clone an existing VM without any additional
    hassle. We can do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过几个例子来检查`virt-clone`。假设我们只是想要一种快速简单的方式来克隆现有的VM而不需要任何额外的麻烦。我们可以这样做：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As a result, this will produce a VM named `VirtualMachineName-clone` that we
    can start using right away. Let''s see this in action, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，这将产生一个名为`VirtualMachineName-clone`的VM，我们可以立即开始使用。让我们看看这个过程，如下所示：
- en: '![Figure 7.10 – Creating a VM clone with virt-clone'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.10 – 使用virt-clone创建VM克隆'
- en: '](img/B14834_07_10.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_10.jpg)'
- en: Figure 7.10 – Creating a VM clone with virt-clone
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 使用virt-clone创建VM克隆
- en: 'Let''s see how this could be a bit more *customized*. By using `virt-clone`,
    we are going to create a VM named `MasteringKVM05`, by cloning a VM named `MasteringKVM04`,
    and we are going to customize virtual disk names as well, as illustrated in the
    following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使这个更加*定制化*。通过使用`virt-clone`，我们将创建一个名为`MasteringKVM05`的VM，克隆一个名为`MasteringKVM04`的VM，并且我们还将自定义虚拟磁盘名称，如下面的截图所示：
- en: '![Figure 7.11 – Customized VM creation: customizing VM names and virtual hard
    disk filenames'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.11 – 自定义VM创建：自定义VM名称和虚拟硬盘文件名'
- en: '](img/B14834_07_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_11.jpg)'
- en: 'Figure 7.11 – Customized VM creation: customizing VM names and virtual hard
    disk filenames'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 自定义VM创建：自定义VM名称和虚拟硬盘文件名
- en: There are situations in real life that require you to convert VMs from one virtualization
    technology to another. The bulk of that work is actually converting the VM disk
    format from one format to another. That's what `virt-convert` is all about. Let's
    learn how it does its job.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，有时需要将VM从一种虚拟化技术转换为另一种。其中大部分工作实际上是将VM磁盘格式从一种格式转换为另一种格式。这就是`virt-convert`的工作原理。让我们学习一下它是如何工作的。
- en: qemu-img
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: qemu-img
- en: 'Let''s now check how we will convert a virtual disk to another format, and
    how we will convert a VM *configuration file* from one virtualization method to
    another. We will use an empty VMware VM as a source and convert its `vmdk` virtual
    disk and `.vmx` file to a new format, as illustrated in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何将一个虚拟磁盘转换为另一种格式，以及如何将一个VM *配置文件*从一种虚拟化方法转换为另一种。我们将使用一个空的VMware VM作为源，并将其`vmdk`虚拟磁盘和`.vmx`文件转换为新格式，如下面的截图所示：
- en: '![Figure 7.12 – Converting VMware virtual disk to qcow2 format for KVM'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.12 – 将VMware虚拟磁盘转换为KVM的qcow2格式'
- en: '](img/B14834_07_12.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_12.jpg)'
- en: Figure 7.12 – Converting VMware virtual disk to qcow2 format for KVM
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 – 将VMware虚拟磁盘转换为KVM的qcow2格式
- en: If we are faced with projects that involve moving or converting VMs between
    these platforms, we need to make sure that we use these utilities as they are
    easy to use and understand and only require one thing—a bit of time. For example,
    if we have a 1 `qcow2` format, so we have to be patient. Also, we need to be prepared
    to edit `vmx` configuration files from time to time as the conversion process
    from `vmx` to `kvm` format isn't 100% smooth, as we might expect it to be. During
    the course of this process, a new configuration file is created. The default directory
    for KVM VM configuration files is `/etc/libvirt/qemu`, and we can easily see `virsh`
    list output.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们面对需要在这些平台之间移动或转换VM的项目，我们需要确保使用这些实用程序，因为它们易于使用和理解，只需要一点时间。例如，如果我们有一个1 `qcow2`格式，所以我们必须耐心等待。此外，我们需要随时准备好编辑`vmx`配置文件，因为从`vmx`到`kvm`格式的转换过程并不是100%顺利，正如我们可能期望的那样。在这个过程中，会创建一个新的配置文件。KVM
    VM配置文件的默认目录是`/etc/libvirt/qemu`，我们可以轻松地看到`virsh`列表输出。
- en: There are also some new utilities in CentOS 8 that will make it easier for us
    to manage not only the local server but also VMs. The Cockpit web interface is
    one of those—it has the capability to do basic VM management on a KVM host. All
    we need to do is connect to it via a web browser, and we mentioned this web application
    in [*Chapter 3*](B14834_03_Final_ASB_ePub.xhtml#_idTextAnchor049), *Installing
    a Kernel-based VM (KVM) Hypervisor, libvirt, and ovirt*, when discussing the deployment
    of oVirt appliances. So, let's familiarize ourselves with VM management by using
    Cockpit.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS 8中还有一些新的实用工具，这些工具将使我们更容易管理不仅本地服务器还有VM。Cockpit web界面就是其中之一——它具有在KVM主机上进行基本VM管理的功能。我们只需要通过Web浏览器连接到它，我们在[*第3章*](B14834_03_Final_ASB_ePub.xhtml#_idTextAnchor049)中提到过这个Web应用程序，*安装基于内核的VM（KVM）Hypervisor，libvirt和ovirt*，当讨论oVirt设备的部署时。因此，让我们通过使用Cockpit来熟悉VM管理。
- en: Creating a new VM using Cockpit
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Cockpit创建新的VM
- en: 'To use Cockpit for the management of our server and its VMs, we need to install
    and start Cockpit and its additional packages. Let''s start with that, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Cockpit管理我们的服务器及其VM，我们需要安装和启动Cockpit及其附加包。让我们从那开始，如下所示：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After this, we can start Firefox and point it to `https://kvm-host:9090/`,
    as this is the default port where Cockpit can be reached, and log in as `root`
    with the root password, which will give us the following **user interface** (**UI**):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们可以启动Firefox并将其指向`https://kvm-host:9090/`，因为这是Cockpit可以访问的默认端口，并使用root密码登录为`root`，这将给我们以下**用户界面**（**UI**）：
- en: '![Figure 7.14 – Cockpit web console, which we can use to deploy VMs'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.14 – Cockpit web控制台，我们可以用它来部署VM'
- en: '](img/B14834_07_14.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_14.jpg)'
- en: Figure 7.14 – Cockpit web console, which we can use to deploy VMs
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14 – Cockpit web控制台，我们可以用它来部署VM
- en: 'In the previous step, when we installed `cockpit*`, we also installed `cockpit-machines`,
    which is a plugin for the Cockpit web console that enables us to manage `libvirt`
    VMs in the Cockpit web console. So, after we click on **VMs**, we can easily see
    all of our previously installed VMs, open their configuration, and install new
    VMs via a simple wizard, as illustrated in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一步中，当我们安装了`cockpit*`时，我们还安装了`cockpit-machines`，这是Cockpit web控制台的一个插件，它使我们能够在Cockpit
    web控制台中管理`libvirt` VM。因此，在我们点击**VMs**后，我们可以轻松地看到我们以前安装的所有VM，打开它们的配置，并通过简单的向导安装新的VM，如下面的屏幕截图所示：
- en: '![Figure 7.15 – Cockpit VM management'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.15 – Cockpit VM管理'
- en: '](img/B14834_07_15.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_15.jpg)'
- en: Figure 7.15 – Cockpit VM management
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15 – Cockpit VM管理
- en: 'The wizard for VM installation is really simple—we just need to configure basic
    settings for our new VM and we can start installing, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: VM安装向导非常简单——我们只需要为我们的新VM配置基本设置，然后我们就可以开始安装，如下所示：
- en: '![Figure 7.16 – Installing KVM VM from Cockpit web console'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.16 – 从Cockpit web控制台安装KVM VM'
- en: '](img/B14834_07_16.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_16.jpg)'
- en: Figure 7.16 – Installing KVM VM from Cockpit web console
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16 – 从Cockpit web控制台安装KVM VM
- en: Now that we covered how we can install VMs *locally*—meaning without some sort
    of centralized management application—let's go back and check how we can install
    VMs via oVirt.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何*本地*安装VM——意味着没有某种集中管理应用程序，让我们回过头来看看如何通过oVirt安装VM。
- en: Creating a new VM using oVirt
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用oVirt创建新的VM
- en: 'If we added a host to oVirt, when we log in to it, we can go to **Compute-VMs**
    and start deploying VMs by using a simple wizard. So, after clicking on the **New**
    button in that menu, we can do just that, and we will be taken to the following
    screen:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将主机添加到oVirt，当我们登录时，我们可以转到**Compute-VMs**，并通过简单的向导开始部署VM。因此，在该菜单中点击**New**按钮后，我们可以这样做，然后我们将被带到以下屏幕：
- en: '![Figure 7.17 – New VM wizard in oVirt'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.17 – oVirt中的新VM向导'
- en: '](img/B14834_07_17.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_17.jpg)'
- en: Figure 7.17 – New VM wizard in oVirt
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17 – oVirt中的新VM向导
- en: Having in mind that oVirt is a centralized management solution for KVM hosts,
    we have *loads* of additional options when compared to local VM installation on
    a KVM host—we can select a cluster that will host this VM; we can use a template,
    configure the optimization and instance type, configure **high availability**
    (**HA**), resource allocation, boot options... basically, it's what we jokingly
    refer to as *option paralysis*, although it's for our own benefit, as centralized
    solutions will always be a bit different than any kind of local solution.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到oVirt是KVM主机的集中管理解决方案，与在KVM主机上进行本地VM安装相比，我们有*大量*的额外选项——我们可以选择一个将托管此VM的集群；我们可以使用模板，配置优化和实例类型，配置**高可用性**（**HA**），资源分配，引导选项...基本上，这就是我们开玩笑称之为*选项麻痹*，尽管这对我们自己有利，因为集中化解决方案总是与任何一种本地解决方案有些不同。
- en: 'At a minimum, we will have to configure general VM properties—name, operating
    system, and VM network interface. Then, we will move to the **System** tab, where
    we will configure memory size and virtual CPU count, as illustrated in the following
    screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，我们将不得不配置一般的VM属性——名称、操作系统和VM网络接口。然后，我们将转到**System**选项卡，在那里我们将配置内存大小和虚拟CPU数量，如下面的屏幕截图所示：
- en: '![Figure 7.18 – Selecting VM configuration: virtual CPUs and memory'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.18 – 选择VM配置：虚拟CPU和内存'
- en: '](img/B14834_07_18.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_18.jpg)'
- en: 'Figure 7.18 – Selecting VM configuration: virtual CPUs and memory'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18 – 选择VM配置：虚拟CPU和内存
- en: 'We will definitely want to configure boot options—attach a CD/ISO, add a virtual
    hard disk, and configure the boot order, as illustrated in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们肯定会想要配置引导选项——连接CD/ISO，添加虚拟硬盘，并配置引导顺序，如下面的屏幕截图所示：
- en: '![Figure 7.19 – Configuring VM boot options in oVirt'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.19 – 在oVirt中配置VM引导选项'
- en: '](img/B14834_07_19.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_19.jpg)'
- en: Figure 7.19 – Configuring VM boot options in oVirt
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19 – 在oVirt中配置VM引导选项
- en: We can customize our VM post-installation by using `sysprep` or `cloud-init`,
    which we will discuss in [*Chapter 9*](B14834_09_Final_ASB_ePub.xhtml#_idTextAnchor165),
    *Customizing a VM with cloud-init*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`sysprep`或`cloud-init`来自定义VM的安装后设置，我们将在[*第9章*](B14834_09_Final_ASB_ePub.xhtml#_idTextAnchor165)中讨论，*使用cloud-init自定义VM*。
- en: 'Here''s what the basic configuration in oVirt looks like:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是oVirt中基本的配置外观：
- en: '![Figure 7.20 – Installing KVM VM from oVirt: make sure that you select correct
    boot options'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.20-从oVirt安装KVM VM：确保选择正确的启动选项'
- en: '](img/B14834_07_20.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_20.jpg)'
- en: 'Figure 7.20 – Installing KVM VM from oVirt: make sure that you select correct
    boot options'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20-从oVirt安装KVM VM：确保选择正确的启动选项
- en: Realistically, if you're managing an environment that has more than two to three
    KVM hosts, you'll want to use some kind of centralized utility to manage them.
    oVirt is really good for that, so don't skip it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果您管理的环境有两到三个以上的KVM主机，您会希望使用某种集中式实用程序来管理它们。oVirt非常适合这一点，所以不要跳过它。
- en: Now that we have done the whole deployment procedure in a variety of different
    ways, it's time to think about the VM configuration. Keeping in mind that a VM
    is an object that has many important attributes—such as the number of virtual
    CPUs, amount of memory, virtual network cards, and so on—it's very important that
    we learn how to customize the VM settings. So, let's make that our next topic.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经以各种不同的方式完成了整个部署过程，是时候考虑VM配置了。请记住，VM是一个具有许多重要属性的对象，例如虚拟CPU的数量、内存量、虚拟网络卡等，因此学习如何自定义VM设置非常重要。所以，让我们把它作为下一个主题。
- en: Configuring your VM
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置您的VM
- en: 'When we were using `virt-manager`, if you go all the way to the last step,
    there''s an interesting option that you could''ve selected, which is the **Customize
    configuration before install** option. The same configuration window can be accessed
    if you check the VM configuration post-install. So, whichever way we go, we''ll
    be faced with the full scale of configuration options for every VM hardware device
    that was assigned to the VM we just created, as can be seen in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`virt-manager`时，如果您一直进行到最后一步，您可以选择一个有趣的选项，即**在安装前自定义配置**选项。如果您在安装后检查VM配置，也可以访问相同的配置窗口。因此，无论我们选择哪种方式，我们都将面临为分配给我们刚创建的VM的每个VM硬件设备的全面配置选项，如下截图所示：
- en: '![Figure 7.21 – VM configuration options'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.21-VM配置选项'
- en: '](img/B14834_07_21.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_21.jpg)'
- en: Figure 7.21 – VM configuration options
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21-VM配置选项
- en: 'For example, if we click on the **CPUs** option on the left-hand side, you
    will see the number of available CPUs (current and maximum allocation), and we''ll
    also see some pretty advanced options such as **CPU topology** (**Sockets**/**Cores**/**Threads**),
    which enables us to configure specific **non-uniform memory access** (**NUMA**)
    configuration options. Here''s what that configuration window looks like:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们在左侧点击**CPU**选项，您将看到可用CPU的数量（当前和最大分配），还将看到一些非常高级的选项，例如**CPU拓扑**（**插槽**/**核心**/**线程**），它使我们能够配置特定的**非均匀内存访问**（**NUMA**）配置选项。这就是该配置窗口的样子：
- en: '![Figure 7.22 – VM CPU configuration'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.22-VM CPU配置'
- en: '](img/B14834_07_22.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_22.jpg)'
- en: Figure 7.22 – VM CPU configuration
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22-VM CPU配置
- en: This is a *very* important part of VM configuration, especially if you're designing
    an environment that hosts loads of virtualized servers. Furthermore, it becomes
    even more important if virtualized servers host **input/output** (**I/O**)-intensive
    applications such as databases. If you want to learn more about this, you can
    check a link at the end of this chapter, in the *Further reading* section, as
    it will give you loads of additional information about VM design.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是VM配置的*非常*重要部分，特别是如果您正在设计一个承载大量虚拟服务器的环境。此外，如果虚拟化服务器承载**输入/输出**（**I/O**）密集型应用程序，例如数据库，这一点变得更加重要。如果您想了解更多信息，可以在本章末尾的*进一步阅读*部分中查看链接，它将为您提供有关VM设计的大量额外信息。
- en: 'Then, if we open the `virt-*` commands. This is what a `virt-manager` **Memory**
    configuration option looks like:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果我们打开`virt-*`命令。这是`virt-manager` **内存**配置选项的外观：
- en: '![Figure 7.23 – VM memory configuration'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.23-VM内存配置'
- en: '](img/B14834_07_23.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_23.jpg)'
- en: Figure 7.23 – VM memory configuration
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23-VM内存配置
- en: 'One of the most important configuration option sets available in `virt-manager`
    is located in the **Boot Options** sub-menu, which is shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`virt-manager`中最重要的配置选项集之一位于**启动选项**子菜单中，如下截图所示：'
- en: '![Figure 7.24 – VM boot configuration options'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.24-VM启动配置选项'
- en: '](img/B14834_07_24.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_24.jpg)'
- en: Figure 7.24 – VM boot configuration options
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24-VM启动配置选项
- en: 'There, you can do two very important things, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，您可以做两件非常重要的事情，如下所示：
- en: Select this VM to be auto-started with the host
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择此VM在主机启动时自动启动
- en: Enable the boot menu and select a boot device and boot device priorities
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用启动菜单并选择启动设备和启动设备优先级
- en: 'In terms of configuration options, by far the most feature-rich configuration
    menu for `virt-manager` is the virtual storage menu—in our case, **VirtIO Disk
    1**. If we click on that, we''re going to get the following selection of configuration
    options:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 就配置选项而言，`virt-manager`中功能最丰富的配置菜单是虚拟存储菜单，即我们的情况下的**VirtIO Disk 1**。如果我们点击它，我们将得到以下配置选项的选择：
- en: '![Figure 7.25 – Configuring VM hard disk and storage controller options'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.25-配置VM硬盘和存储控制器选项'
- en: '](img/B14834_07_25.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_25.jpg)'
- en: Figure 7.25 – Configuring VM hard disk and storage controller options
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25-配置VM硬盘和存储控制器选项
- en: 'Let''s see what the significance of some of these configuration options is,
    as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看其中一些配置选项的重要性，如下所示：
- en: '**Disk bus**—There are usually five options here, **VirtIO** being the default
    (and the best) one. Just as with Vmware, ESXi, and Hyper-V, KVM has different
    virtual storage controllers available. For example, VMware has BusLogic, LSI Logic,
    Paravirtual, and other types of virtual storage controllers, while Hyper-V has
    the **integrated drive electronics** (**IDE**) and **small computer system interface**
    (**SCSI**) controllers. This option defines the storage controller that the VM
    is going to see inside its guest operating system.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**磁盘总线** - 这里通常有五个选项，**VirtIO**是默认（也是最好的）选项。与Vmware、ESXi和Hyper-V一样，KVM有不同的虚拟存储控制器可用。例如，VMware有BusLogic、LSI
    Logic、Paravirtual和其他类型的虚拟存储控制器，而Hyper-V有**集成驱动电子学**（**IDE**）和**小型计算机系统接口**（**SCSI**）控制器。此选项定义了VM在其客户操作系统中将看到的存储控制器。 '
- en: '`qcow2` and `raw` (`dd` type format). The most common option is `qcow2` as
    it offers the most flexibility for VM management—for example, it supports thin
    provisioning and snapshots.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qcow2`和`raw`（`dd`类型格式）。最常见的选项是`qcow2`，因为它为VM管理提供了最大的灵活性 - 例如，它支持薄配置和快照。'
- en: '`Cache` mode—There are six types: `writethrough`, `writeback`, `directsync`,
    `unsafe`, `none`, and `default`. These modes explain how data gets written from
    an I/O that originated from the VM to the storage underlay below the VM. For example,
    if we''re using `writethrough`, the I/O gets cached on the KVM host and is written
    through to the VM disk as well. On the other hand, if we''re using `none`, there''s
    no caching on the host (except for the disk `writeback` cache), and data gets
    written to the VM disk directly. Different modes have different pros and cons,
    but generally, `none` is the best option for VM management. You can read more
    about them in the *Further reading* section.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`缓存`模式 - 有六种类型：`writethrough`，`writeback`，`directsync`，`unsafe`，`none`和`default`。这些模式解释了从VM发起的I/O如何从VM下面的存储层写入数据。例如，如果我们使用`writethrough`，I/O会被缓存在KVM主机上，并且也会通过写入到VM磁盘。另一方面，如果我们使用`none`，主机上没有缓存（除了磁盘`writeback`缓存），数据直接写入VM磁盘。不同的模式有不同的优缺点，但通常来说，`none`是VM管理的最佳选择。您可以在*进一步阅读*部分了解更多信息。'
- en: '`IO` mode—There are two modes: `native` and `threads`. Depending on this setting,
    the VM I/O will be either written via kernel asynchronous I/O or via pool of threads
    in the user space (which is the default value, as well). When working with `qcow2`
    format, it''s generally accepted that `threads` mode is better as `qcow2` format
    first allocates sectors and then writes to them, which will hog vCPUs allocated
    to the VM and have direct influence on I/O performance.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IO`模式 - 有两种模式：`native`和`threads`。根据此设置，VM I/O将通过内核异步I/O或用户空间中的线程池进行写入（这是默认值）。当使用`qcow2`格式时，通常认为`threads`模式更好，因为`qcow2`格式首先分配扇区，然后写入它们，这将占用分配给VM的vCPU，并直接影响I/O性能。'
- en: '`Discard` mode—There are two available modes here, called `ignore` and `unmap`.
    If you select `unmap`, when you delete files from your VM (which translates to
    free space in your `qcow2` VM disk file), the `qcow2` VM disk file will shrink
    to reflect the newly freed capacity. Depending on which Linux distribution, kernel,
    and kernel patches you have applied and the **Quick Emulator** (**QEMU**) version,
    this function *might* only be available on a SCSI disk bus. It''s supported for
    QEMU version 4.0+.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`丢弃`模式 - 这里有两种可用模式，称为`忽略`和`取消映射`。如果选择`取消映射`，当您从VM中删除文件（这会转换为`qcow2` VM磁盘文件中的可用空间），`qcow2`
    VM磁盘文件将缩小以反映新释放的容量。取决于您使用的Linux发行版、内核和内核补丁以及**快速仿真器**（**QEMU**）版本，此功能*可能*仅适用于SCSI磁盘总线。它支持QEMU版本4.0+。'
- en: '`Detect zeroes`—There are three modes available: `off`, `on`, and `unmap`.
    If you select `unmap`, zero write will be translated as an unmapping operation
    (as explained in discard mode). If you set it to `on`, zero writes by the operating
    system will be translated to specific zero write commands.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`检测零` - 有三种可用模式：`关闭`，`打开`和`取消映射`。如果您选择`取消映射`，零写入将被转换为取消映射操作（如丢弃模式中所解释的）。如果将其设置为`打开`，操作系统的零写入将被转换为特定的零写入命令。'
- en: During the lifespan of any given VM, there's a significant chance that we will
    reconfigure it. Whether that means adding or removing virtual hardware (of course,
    usually, it's adding), it's an important aspect of a VM's life cycle. So, let's
    learn how to manage that.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定VM的寿命期内，有很大的机会我们会重新配置它。无论是添加还是删除虚拟硬件（当然，通常是添加），这是VM生命周期的一个重要方面。因此，让我们学习如何管理它。
- en: Adding and removing virtual hardware from your VM
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从VM添加和删除虚拟硬件
- en: 'By using the VM configuration screen, we can easily add additional hardware,
    or remove hardware as well. For example, if we click on the **Add Hardware** button
    in the bottom-left corner, we can easily add a device—let''s say, a virtual network
    card. The following screenshot illustrates this process:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用VM配置屏幕，我们可以轻松添加额外的硬件，或者删除硬件。例如，如果我们点击左下角的**添加硬件**按钮，我们可以轻松添加一个设备 - 比如，一个虚拟网络卡。以下截图说明了这个过程：
- en: '![Figure 7.26 – After clicking on Add Hardware, we can select which'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.26 - 点击“添加硬件”后，我们可以选择要'
- en: virtual hardware device we want to add to our VM
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加到我们的VM的虚拟硬件设备
- en: '](img/B14834_07_26.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_26.jpg)'
- en: Figure 7.26 – After clicking on Add Hardware, we can select which virtual hardware
    device we want to add to our VM
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26 - 点击“添加硬件”后，我们可以选择要添加到虚拟机的虚拟硬件设备
- en: 'On the other hand, if we select a virtual hardware device (for example, **Sound
    ich6**) and press the **Remove** button that will then appear, we can also remove
    this virtual hardware device, after confirming that we want to do so, as illustrated
    in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们选择一个虚拟硬件设备（例如**Sound ich6**）并按下随后出现的**删除**按钮，我们也可以删除这个虚拟硬件设备，确认我们要这样做后，如下截图所示：
- en: '![Figure 7.27 – Process for removing a VM hardware device: select it on the'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.27 - 删除VM硬件设备的过程：在'
- en: left-hand side and click Remove
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧并单击删除
- en: '](img/B14834_07_27.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_27.jpg)'
- en: 'Figure 7.27 – Process for removing a VM hardware device: select it on the left-hand
    side and click Remove'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27 – 删除虚拟机硬件设备的流程：在左侧选择它，然后单击删除
- en: As you can see, adding and removing VM hardware is as easy as one-two-three.
    We actually touched on the subject before, when we were working with virtual networking
    and storage ([*Chapter 4*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062), *Libvirt
    Networking*), but there, we used shell commands and XML file definitions. Check
    out those examples if you want to learn more about that.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，添加和删除虚拟机硬件就像123一样简单。我们之前确实提到过这个话题，当时我们正在处理虚拟网络和存储（[*第4章*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062)，*Libvirt网络*），但那里，我们使用了shell命令和XML文件定义。如果您想了解更多，请查看这些示例。
- en: Virtualization is all about flexibility, and being able to place VMs on any
    given host in our environment is a huge part of that. Having that in mind, VM
    migration is one of the features in virtualization that can be used as a marketing
    poster for virtualization and its many advantages. What is VM migration all about?
    That's what we're going to learn next.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化的关键在于灵活性，能够在我们的环境中将虚拟机放置在任何给定的主机上是其中的重要部分。考虑到这一点，虚拟机迁移是虚拟化中可以用作营销海报的功能之一，它有许多优势。虚拟机迁移到底是什么？这就是我们接下来要学习的内容。
- en: Migrating VMs
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移虚拟机
- en: In simple terms, migration enables you to move your VM from one physical machine
    to another physical machine, with a very minimal downtime or no downtime. We can
    also move VM storage, which is a resource-hog type of operation that needs to
    be carefully planned and—if possible —executed after hours so that it doesn't
    affect other VMs' performance as much as it could.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，迁移使您能够将虚拟机从一台物理机器移动到另一台物理机器，几乎没有或没有任何停机时间。我们还可以移动虚拟机存储，这是一种资源密集型的操作，需要仔细规划，并且—如果可能—在工作时间之后执行，以便它不会像可能影响其他虚拟机的性能那样影响其他虚拟机的性能。
- en: 'There are various different types of migration, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种不同类型的迁移，如下：
- en: Offline (cold)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线（冷）
- en: Online (live)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线（实时）
- en: Suspended migration
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停迁移
- en: 'There are also various different types of online migrations, depending on what
    you''re moving, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 还有各种不同类型的在线迁移，具体取决于您要移动的内容，如下：
- en: The compute part of the VM (moving the VM from one KVM host to another KVM host)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机的计算部分（将虚拟机从一个KVM主机移动到另一个KVM主机）
- en: The storage part of the VM (moving VM files from one storage pool to another
    storage pool)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机的存储部分（将虚拟机文件从一个存储池移动到另一个存储池）
- en: Both (moving the VM from host to host and storage pool to storage pool at the
    same time)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者（同时将虚拟机从主机迁移到主机和从存储池迁移到存储池）
- en: There are some differences in terms of which migration scenarios are supported
    if you're using just a plain KVM host versus oVirt or Red Hat Enterprise Virtualization.
    If you want to do a live storage migration, you can't do it on a KVM host directly,
    but you can easily do it if the VM is shut down. If you need a live storage migration,
    you will have to use oVirt or Red Hat Enterprise Virtualization.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只是使用普通的KVM主机，与使用oVirt或Red Hat企业虚拟化相比，支持的迁移场景有一些差异。如果您想进行实时存储迁移，您不能直接在KVM主机上执行，但如果虚拟机已关闭，则可以轻松执行。如果您需要进行实时存储迁移，您将需要使用oVirt或Red
    Hat企业虚拟化。
- en: We discussed **single-root input-output virtualization** (**SR-IOV**), **Peripheral
    Component Interconnect** (**PCI**) device passthrough, **virtual graphics processing
    units** (**vGPUs**), and similar concepts as well (in [*Chapter 2*](B14834_02_Final_ASB_ePub.xhtml#_idTextAnchor029),
    *KVM as a Virtualization Solution*, and [*Chapter 4*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062),
    *Libvirt Networking*). In CentOS 8, you can't live-migrate a VM that has either
    one of these options assigned to a running VM.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了**单根输入输出虚拟化**（**SR-IOV**）、**外围组件互连**（**PCI**）设备透传、**虚拟图形处理单元**（**vGPUs**）等概念（在[*第2章*](B14834_02_Final_ASB_ePub.xhtml#_idTextAnchor029)中，*KVM作为虚拟化解决方案*，以及[*第4章*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062)中，*Libvirt网络*）。在CentOS
    8中，您不能对具有这些选项之一分配给运行中的虚拟机的虚拟机进行实时迁移。
- en: Whatever the use case is, we need to be aware of the fact that migration needs
    to be performed either as the `root` user or as a user that belongs to the `libvirt`
    user group (what Red Hat refers to as system versus user `libvirt` session).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 无论用例是什么，我们都需要意识到迁移需要以`root`用户或属于`libvirt`用户组的用户（Red Hat所称的系统与用户`libvirt`会话）执行。
- en: There are different reasons why VM migration is a valuable tool to have in your
    arsenal. Some of these reasons are obvious; others, less so. Let's try to explain
    different use cases for VM migration and its benefits.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机迁移是一个有价值的工具的原因有很多。有些原因很明显，而其他原因则不那么明显。让我们尝试解释虚拟机迁移的不同用例和其好处。
- en: Benefits of VM migration
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟机迁移的好处
- en: 'The most important benefits of VM live migration are listed as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机实时迁移的最重要的好处如下：
- en: '**Increased uptime and reduced downtime**—A carefully designed virtualized
    environment will give you the maximum uptime for your application.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加的正常运行时间和减少的停机时间**—精心设计的虚拟化环境将为您的应用程序提供最大的正常运行时间。'
- en: '**Saving energy and going green**—You can easily consolidate your VMs based
    on their load and usage to a smaller number of hypervisors during off hours. Once
    the VMs are migrated, you can power off the unused hypervisors.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节约能源，走向绿色**—您可以根据虚拟机的负载和使用情况在非工作时间将它们合并到较少的虚拟化主机上。一旦虚拟机迁移完成，您可以关闭未使用的虚拟化主机。'
- en: '**Easy hardware/software upgrade process by moving your VM between different
    hypervisors**—Once you have the capability to move your VMs freely between different
    physical servers, the benefits are countless.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在不同的虚拟化主机之间移动您的虚拟机，轻松进行硬件/软件升级过程—一旦您有能力在不同的物理服务器之间自由移动您的虚拟机，好处是无穷无尽的。
- en: VM migration needs proper planning to be put in place. There are some basic
    requirements the migration looks for. Let's see them one by one.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机迁移需要适当的规划。迁移有一些基本要求。让我们逐一看看它们。
- en: 'The migration requirements for production environments are the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 生产环境的迁移要求如下：
- en: The VM should be using a storage pool that is created on a shared storage.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VM应该使用在共享存储上创建的存储池。
- en: The name of the storage pool and the virtual disk's path should remain the same
    on both hypervisors (source and destination hypervisors).
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储池的名称和虚拟磁盘的路径应该在两个超级主机（源和目标超级主机）上保持相同。
- en: Check out [*Chapter 4*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062), *Libvirt
    Networking*, and [*Chapter 5*](B14834_05_Final_ASB_ePub.xhtml#_idTextAnchor079),
    *Libvirt Storage*, to remind yourself how to create a storage pool using shared
    storage.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[*第4章*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062)，*Libvirt网络*，以及[*第5章*](B14834_05_Final_ASB_ePub.xhtml#_idTextAnchor079)，*Libvirt存储*，以便回顾如何使用共享存储创建存储池。
- en: 'There are, as always, some rules that apply here. These are rather simple,
    so we need to learn them before starting migration processes. They are as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这里总是有一些适用的规则。这些规则相当简单，所以我们需要在开始迁移过程之前学习它们。它们如下：
- en: It is possible to do a live storage migration using a storage pool that is created
    on non-shared storage. You only need to maintain the same storage pool name and
    file location, but shared storage is still recommended in a production environment.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用在非共享存储上创建的存储池进行实时存储迁移。您只需要保持相同的存储池名称和文件位置，但在生产环境中仍建议使用共享存储。
- en: If there is an unmanaged virtual disk attached to a VM that uses a **Fiber Channel**
    (**FC**), an **Internet Small Computer Systems Interface** (**iSCSI**), **Logical
    Volume Manager** (**LVM**), and so on, the same storage should be available on
    both hypervisors.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果连接到使用**光纤通道**（**FC**）、**Internet小型计算机系统接口**（**iSCSI**）、**逻辑卷管理器**（**LVM**）等的VM的未管理虚拟磁盘，则相同的存储应该在两个超级主机上都可用。
- en: The virtual networks used by the VMs should be available on both hypervisors.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VM使用的虚拟网络应该在两个超级主机上都可用。
- en: A bridge that is configured for a networking communication should be available
    on both the hypervisors.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网络通信配置的桥接应该在两个超级主机上都可用。
- en: Migration may fail if the major versions of `libvirt` and `qemu-kvm` on the
    hypervisors are different, but you should be able to migrate the VMs running on
    a hypervisor that has a lower version of `libvirt` or `qemu-kvm` to a hypervisor
    that has higher versions of those packages, without any issues.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果超级主机上的`libvirt`和`qemu-kvm`的主要版本不同，迁移可能会失败，但您应该能够将运行在具有较低版本`libvirt`或`qemu-kvm`的超级主机上的VM迁移到具有这些软件包较高版本的超级主机上，而不会出现任何问题。
- en: The time on both the source and destination hypervisors should be synced. It
    is highly recommended that you sync the hypervisors using the same **Network Time
    Protocol** (**NTP**) or **Precision Time Protocol** (**PTP**) servers.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源和目标超级主机上的时间应该同步。强烈建议您使用相同的**网络时间协议**（**NTP**）或**精密时间协议**（**PTP**）服务器同步超级主机。
- en: It is important that the systems use a `/etc/hosts` will not work. You should
    be able to resolve the hostnames using the `host` command.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要的是系统使用`/etc/hosts`将无法工作。您应该能够使用`host`命令解析主机名。
- en: There are some pre-requisites that we need to have in mind when planning our
    environment for VM migration. For the most part, these pre-requisites are mostly
    the same for all virtualization solutions. Let's discuss these pre-requisites
    and, in general, how to set up our environment for VM migration next.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在为VM迁移规划环境时，我们需要牢记一些先决条件。在大多数情况下，这些先决条件对所有虚拟化解决方案都是相同的。让我们讨论这些先决条件，以及如何为VM迁移设置环境。
- en: Setting up the environment
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'Let''s build the environment to do VM migration—both offline and live migrations.
    The following diagram depicts two standard KVM virtualization hosts running VMs
    with a shared storage:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建环境来进行VM迁移 - 离线和实时迁移。以下图表描述了两个标准的KVM虚拟化主机，运行具有共享存储的VM：
- en: '![Figure 7.28 –  VMs on shared storage'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.28 - 共享存储上的VM'
- en: '](img/B14834_07_28.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_07_28.jpg)'
- en: Figure 7.28 – VMs on shared storage
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28 - 共享存储上的VM
- en: We start this by setting up a shared storage. In this example, we are using
    `libvirt`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过设置共享存储来开始。在本例中，我们使用`libvirt`。
- en: We're going to create a NFS share on CentOS 8 server. It's going to be hosted
    in `/testvms` directory, which we're going to export via NFS. The name of the
    server is `nfs-01`. (in our case, IP address of `nfs-01` is `192.168.159.134`)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在CentOS 8服务器上创建一个NFS共享。它将托管在`/testvms`目录中，我们将通过NFS导出它。服务器的名称是`nfs-01`。（在我们的情况下，`nfs-01`的IP地址是`192.168.159.134`）
- en: 'The first step is creating and exporting the `/testvms` directory from `nfs-01`
    and turning off SELinux (check [*Chapter 5*](B14834_05_Final_ASB_ePub.xhtml#_idTextAnchor079),
    *Libvirt Storage*, Ceph section to see how):'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是从`nfs-01`创建和导出`/testvms`目录，并关闭SELinux（查看[*第5章*](B14834_05_Final_ASB_ePub.xhtml#_idTextAnchor079)，*Libvirt存储*，Ceph部分以了解如何）：
- en: '[PRE7]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, allow the NFS service in the firewall by executing the following code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过执行以下代码在防火墙中允许NFS服务：
- en: '[PRE8]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Start the NFS service, as follows:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动NFS服务，如下所示：
- en: '[PRE9]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Confirm that the share is accessible from your KVM hypervisors. In our case,
    it is `PacktPhy01` and `PacktPhy02`. Run the following code:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认共享是否可以从您的KVM超级主机访问。在我们的情况下，它是`PacktPhy01`和`PacktPhy02`。运行以下代码：
- en: '[PRE10]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If mounting fails, reconfigure the firewall on the NFS server and recheck the
    mount. This can be done by using the following commands:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果挂载失败，请重新配置NFS服务器上的防火墙并重新检查挂载。可以使用以下命令完成：
- en: '[PRE11]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Unmount the volume once you have verified the NFS mount point from both hypervisors,
    as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证了两个超级主机的NFS挂载点后，卸载卷，如下所示：
- en: '[PRE12]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On `PacktPhy01` and `PacktPhy02`, create a storage pool named `testvms`, as
    follows:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PacktPhy01`和`PacktPhy02`上创建名为`testvms`的存储池，如下所示：
- en: '[PRE13]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `testvms` storage pool is now created and started on two hypervisors.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`testvms`存储池现在在两个超级主机上创建并启动。'
- en: 'In this next example, we are going to isolate the migration and VM traffic.
    It is highly recommended that you do this isolation in your production environment,
    especially if you do a lot of migrations, as it will offload that demanding process
    to a separate network interface, thus freeing other congested network interfaces.
    So, there are two main reasons for this, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将隔离迁移和VM流量。特别是在生产环境中，如果您进行大量迁移，强烈建议您进行此隔离，因为它将把这个要求严格的过程转移到一个单独的网络接口，从而释放其他拥挤的网络接口。因此，这样做有两个主要原因，如下所示：
- en: '`ens192` interfaces on `PacktPhy01` and `PacktPhy02` are used for migration
    as well as administrative tasks. They have an IP assigned and connected to a network
    switch. A `br1` bridge is created using `ens224` on both `PacktPhy01` and `PacktPhy02`.
    `br1` does not have an IP address assigned and is used exclusively for VM traffic
    (uplink for the switch that the VMs are connected to). It is also connected to
    a (physical) network switch.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PacktPhy01`和`PacktPhy02`上的`ens192`接口用于迁移以及管理任务。它们有一个IP地址，并连接到网络交换机。使用`PacktPhy01`和`PacktPhy02`上的`ens224`创建了一个`br1`桥。`br1`没有分配IP地址，专门用于VM流量（连接到VM的交换机的上行）。它也连接到一个（物理）网络交换机。'
- en: '**Security reasons**: It is always recommended that you keep your management
    network and virtual network isolated for security reasons, as well. You don''t
    want your users to mess with your management network, where you access your hypervisors
    and do the administration.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全原因**：出于安全原因，建议您将管理网络和虚拟网络隔离。您不希望用户干扰您的管理网络，您可以在其中访问您的虚拟化程序并进行管理。'
- en: We will discuss three of the most important scenarios— offline migration, non-live
    migration (suspended), and live migration (online). Then, we will discuss storage
    migration as a separate scenario that requires additional planning and forethought.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论三种最重要的场景——离线迁移、非实时迁移（挂起）和实时迁移（在线）。然后，我们将讨论存储迁移作为一个需要额外规划和考虑的单独场景。
- en: Offline migration
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离线迁移
- en: As the name suggests, during offline migration, the state of the VM will be
    either shut down or suspended. The VM will be then resumed or started at the destination
    host. In this migration model, `libvirt` will just copy the VM's XML configuration
    file from the source to the destination KVM host. It also assumes that you have
    the same shared storage pool created and ready to use at the destination. As the
    first step in the migration process, you need to set up two-way passwordless SSH
    authentication on the participating KVM hypervisors. In our example, they are
    called `PacktPhy01` and `PacktPhy02`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，在离线迁移期间，VM的状态将被关闭或挂起。然后在目标主机上恢复或启动VM。在这种迁移模型中，`libvirt`只会将VM的XML配置文件从源KVM主机复制到目标KVM主机。它还假定您在目标地点已经创建并准备好使用相同的共享存储池。在迁移过程的第一步中，您需要在参与的KVM虚拟化程序上设置双向无密码SSH身份验证。在我们的示例中，它们被称为`PacktPhy01`和`PacktPhy02`。
- en: For the following exercises, disable **Security-Enhanced Linux** (**SELinux**)
    temporarily.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，暂时禁用**安全增强型Linux**（**SELinux**）。
- en: 'In `/etc/sysconfig/selinux`, use your favorite editor to modify the following
    line of code:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/etc/sysconfig/selinux`中，使用您喜欢的编辑器修改以下代码行：
- en: '[PRE14]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This needs to be modified as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 需要修改如下：
- en: '[PRE15]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, in the command line, as `root`, we need to temporarily set SELinux mode
    to permissive, as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在命令行中，作为`root`，我们需要临时将SELinux模式设置为宽松模式，如下所示：
- en: '[PRE16]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On `PacktPhy01`, as `root`, run the following command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PacktPhy01`上，作为`root`，运行以下命令：
- en: '[PRE17]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On `PacktPhy02`, as `root`, run the following commands:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PacktPhy02`上，作为`root`，运行以下命令：
- en: '[PRE18]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should now be able to log in to both of these hypervisors as `root` without
    typing a password.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够以`root`身份登录到这两个虚拟化程序，而无需输入密码。
- en: 'Let''s do an offline migration of `MasteringKVM01`, which is already installed,
    from `PacktPhy01` to `PacktPhy02`. The general format of the migration command
    looks similar to the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对已经安装的`MasteringKVM01`进行离线迁移，从`PacktPhy01`迁移到`PacktPhy02`。迁移命令的一般格式看起来类似于以下内容：
- en: '[PRE19]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'On `PacktPhy01`, run the following code:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PacktPhy01`上，运行以下代码：
- en: '[PRE20]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'On `PacktPhy02`, run the following code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PacktPhy02`上，运行以下代码：
- en: '[PRE21]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When a VM is on shared storage and you have some kind of issue with one of the
    hosts, you could also manually register a VM on another host. That means that
    you might end up in a situation where the same VM is registered on two hypervisors,
    after you repair the issue on your host that had an initial problem. It's something
    that happens when you're manually managing KVM hosts without a centralized management
    platform such as oVirt, which wouldn't allow such a scenario. So, what happens
    if you're in that kind of situation? Let's discuss this scenario.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当VM在共享存储上，并且您在其中一个主机上遇到了一些问题时，您也可以手动在另一个主机上注册VM。这意味着在您修复了初始问题的主机上，同一个VM可能会在两个虚拟化程序上注册。这是在没有像oVirt这样的集中管理平台的情况下手动管理KVM主机时会发生的情况。那么，如果您处于这种情况下会发生什么呢？让我们讨论这种情况。
- en: What if I start the VM accidently on both the hypervisors?
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果我意外地在两个虚拟化程序上启动VM会怎么样？
- en: Accidently starting the VM on both the hypervisors can be a sysadmin's nightmare.
    It can lead to VM filesystem corruption, especially when the filesystem inside
    the VM is not cluster-aware. Developers of `libvirt` thought about this and came
    up with a locking mechanism. In fact, they came up with two locking mechanisms.
    When enabled, these will prevent the VMs from starting at the same time on two
    hypervisors.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 意外地在两个虚拟化程序上启动VM可能是系统管理员的噩梦。这可能导致VM文件系统损坏，特别是当VM内部的文件系统不是集群感知时。`libvirt`的开发人员考虑到了这一点，并提出了一个锁定机制。事实上，他们提出了两种锁定机制。启用这些锁定机制将防止VM同时在两个虚拟化程序上启动。
- en: 'The two locking mechanisms are as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 两个锁定机制如下：
- en: '`lockd`: `lockd` makes use of the `POSIX fcntl()` advisory locking capability.
    It was started by the `virtlockd` daemon. It requires a shared filesystem (preferably
    NFS), accessible to all the hosts that share the same storage pool.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lockd`：`lockd`利用了`POSIX fcntl()`的咨询锁定功能。它由`virtlockd`守护程序启动。它需要一个共享文件系统（最好是NFS），可供共享相同存储池的所有主机访问。'
- en: '`sanlock`: This is used by oVirt projects. It uses a disk `paxos` algorithm
    for maintaining continuously renewed leases.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sanlock`：这是oVirt项目使用的。它使用磁盘`paxos`算法来维护持续更新的租约。'
- en: For `libvirt`-only implementations, we prefer `lockd` over `sanlock`. It is
    best to use `sanlock` for oVirt.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅使用`libvirt`的实现，我们更喜欢`lockd`而不是`sanlock`。最好在oVirt中使用`sanlock`。
- en: Enabling lockd
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用lockd
- en: 'For image-based storage pools that are POSIX-compliant, you can enable `lockd`
    easily by uncommenting the following command in `/etc/libvirt/qemu.conf` or on
    both hypervisors:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 对于符合POSIX标准的基于镜像的存储池，您可以通过取消注释`/etc/libvirt/qemu.conf`中的以下命令或在两个虚拟化程序上启用`lockd`：
- en: '[PRE22]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, enable and start the `virtlockd` service on both the hypervisors. Also,
    restart `libvirtd` on both the hypervisors, as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在两个虚拟化程序上启用并启动`virtlockd`服务。另外，在两个虚拟化程序上重新启动`libvirtd`，如下所示：
- en: '[PRE23]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Start `MasteringKVM01` on `PacktPhy02`, as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PacktPhy02`上启动`MasteringKVM01`，如下所示：
- en: '[PRE24]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Start the same `MasteringKVM01` VM on `PacktPhy01`, as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PacktPhy01`上启动相同的`MasteringKVM01`虚拟机，如下所示：
- en: '[PRE25]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Another method to enable `lockd` is to use a hash of the disk's file path. Locks
    are saved in a shared directory that is exported through NFS, or similar sharing,
    to the hypervisors. This is very useful when you have virtual disks that are created
    and attached using a multipath `fcntl()` cannot be used in such cases. We recommend
    that you use the methods detailed next to enable the locking.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 启用`lockd`的另一种方法是使用磁盘文件路径的哈希。锁保存在通过NFS或类似共享导出到虚拟化程序的共享目录中。当您有通过多路径创建和附加的虚拟磁盘时，这是非常有用的，在这种情况下无法使用`fcntl()`。我们建议您使用下面详细介绍的方法来启用锁定。
- en: 'On the NFS server, run the following code (make sure that you''re not running
    any virtual machines from this NFS server first!):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在NFS服务器上运行以下代码（确保您首先不要从此NFS服务器运行任何虚拟机！）：
- en: '[PRE26]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following code to both the hypervisors in `/etc/fstab` and type in
    the rest of these commands:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/etc/fstab`中为两个虚拟化程序添加以下代码，并输入其余命令：
- en: '[PRE27]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Reboot both hypervisors, and, once rebooted, verify that the `libvirtd` and
    `virtlockd` daemons started correctly on both the hypervisors, as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动两个虚拟化程序，并在重新启动后验证`libvirtd`和`virtlockd`守护程序在两个虚拟化程序上是否正确启动，如下所示：
- en: '[PRE28]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`MasteringKVM01` has two virtual disks, one created from an NFS storage pool
    and the other created directly from a LUN. If we try to power it on the `PacktPhy02`
    hypervisor host, `MasteringKVM01` fails to start, as can be seen in the following
    code snippet:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`MasteringKVM01`有两个虚拟磁盘，一个是从NFS存储池创建的，另一个是直接从LUN创建的。如果我们尝试在`PacktPhy02`虚拟化程序主机上启动它，`MasteringKVM01`将无法启动，如下面的代码片段所示：'
- en: '[PRE29]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When using LVM volumes that can be visible across multiple host systems, it
    is desirable to do the locking based on the `libvirt` to do UUID-based locking
    for LVM:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用可以跨多个主机系统可见的LVM卷时，最好基于`libvirt`对LVM执行基于UUID的锁定：
- en: '[PRE30]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When using SCSI volumes that can be visible across multiple host systems, it
    is desirable to do locking based on the UUID associated with each volume, instead
    of their paths. Setting the following path causes `libvirt` to do UUID-based locking
    for SCSI:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用可以跨多个主机系统可见的SCSI卷时，最好基于每个卷关联的UUID进行锁定，而不是它们的路径。设置以下路径会导致`libvirt`对SCSI执行基于UUID的锁定：
- en: '[PRE31]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As with `file_lockspace_dir`, the preceding directories should also be shared
    with the hypervisors.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 与`file_lockspace_dir`一样，前面的目录也应该与虚拟化程序共享。
- en: Important note
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are not able to start VMs due to locking errors, just make sure that
    they are not running anywhere and then delete the lock files. Start the VM again.
    We deviated a little from migration for the `lockd` topic. Let's get back to migration.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于锁定错误而无法启动虚拟机，只需确保它们没有在任何地方运行，然后删除锁定文件。然后再次启动虚拟机。我们在`lockd`主题上偏离了一点。让我们回到迁移。
- en: Live or online migration
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时或在线迁移
- en: In this type of migration, the VM is migrated to the destination host while
    it's running on the source host. The process is invisible to the users who are
    using the VMs. They won't even know that the VM they are using has been transferred
    to another host while they are working on it. Live migration is one of the main
    features that have made virtualization so popular.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型的迁移中，虚拟机在运行在源主机上的同时迁移到目标主机。这个过程对正在使用虚拟机的用户是不可见的。他们甚至不会知道他们正在使用的虚拟机在他们使用时已经被迁移到另一个主机。实时迁移是使虚拟化如此受欢迎的主要功能之一。
- en: Migration implementation in KVM does not need any support from the VM. It means
    that you can live-migrate any VMs, irrespective of the operating system they are
    using. A unique feature of KVM live migration is that it is almost completely
    hardware-independent. You should ideally be able to live-migrate a VM running
    on a hypervisor that has an **Advanced Micro Devices** (**AMD**) processor to
    an Intel-based hypervisor.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: KVM中的迁移实现不需要虚拟机的任何支持。这意味着您可以实时迁移任何虚拟机，而不管它们使用的操作系统是什么。KVM实时迁移的一个独特特性是它几乎完全与硬件无关。您应该能够在具有**Advanced
    Micro Devices**（**AMD**）处理器的虚拟化程序上实时迁移运行在Intel处理器上的虚拟机。
- en: We are not saying that this will work in 100% of the cases or that we in any
    way recommend having this type of mixed environment, but in most of the cases,
    it should be possible.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不是说这在100%的情况下都会奏效，或者我们以任何方式推荐拥有这种混合环境，但在大多数情况下，这是可能的。
- en: Before we start the process, let's go a little deeper to understand what happens
    under the hood. When we do a live migration, we are moving a live VM while users
    are accessing it. This means that users shouldn't feel any disruption in VM availability
    when you do a live migration.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这个过程之前，让我们深入了解一下在幕后发生了什么。当我们进行实时迁移时，我们正在移动一个正在被用户访问的活动虚拟机。这意味着用户在进行实时迁移时不应该感受到虚拟机可用性的任何中断。
- en: 'Live migration is a five-stage, complex process, even though none of these
    processes are exposed to the sysadmins. `libvirt` will do the necessary work once
    the VM migration action is issued. The stages through which a VM migration goes
    are explained in the following list:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这些过程对系统管理员不可见，活迁移是一个包含五个阶段的复杂过程。一旦发出VM迁移操作，`libvirt`将会完成必要的工作。VM迁移经历的阶段如下所述：
- en: '`libvirt` (`SLibvirt`) will contact the destination `libvirt` (`DLibvirt`)
    with the details of the VM that is going to be transferred live. `DLibvirt` will
    pass this information to the underlying QEMU, with relevant options to enable
    live migration. QEMU will start the actual live migration process by starting
    the VM in `pause` mode and will start listening on a `DLibvirt` will inform `SLibvirt`,
    with the details of QEMU. By this time, QEMU, at the source, is ready to transfer
    the VM and connects to the destination TCP port.'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`libvirt`（`SLibvirt`）将与目的地`libvirt`（`DLibvirt`）联系，并提供将要进行实时传输的VM的详细信息。`DLibvirt`将将此信息传递给底层的QEMU，并提供相关选项以启用实时迁移。QEMU将通过在`pause`模式下启动VM并开始侦听来自`DLibvirt`的连接到目的地TCP端口的实际实时迁移过程。'
- en: '`pause` mode at the destination.'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目的地处于`pause`模式。
- en: b) In one go, it will transfer all the memory used by the VM to the destination.
    The speed of transfer depends upon the network bandwidth. Suppose the VM is using
    10 `migrate-setmaxdowntime`, which is in milliseconds.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: b)一次性将VM使用的所有内存传输到目的地。传输速度取决于网络带宽。假设VM使用10 `migrate-setmaxdowntime`，单位为毫秒。
- en: '**Stopping the VM on the source host**: Once the number of dirty pages reaches
    the said threshold, QEMU will stop the VM on the source host. It will also sync
    the virtual disks.'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**停止源主机上的虚拟机**：一旦脏页的数量达到所述阈值，QEMU将停止源主机上的虚拟机。它还将同步虚拟磁盘。'
- en: '**Transferring the VM state**: At this stage, QEMU will transfer the state
    of the VM''s virtual devices and remaining dirty pages to the destination as quickly
    as possible. We cannot limit the bandwidth at this stage.'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**传输VM状态**：在此阶段，QEMU将尽快将VM的虚拟设备状态和剩余的脏页传输到目的地。我们无法在此阶段限制带宽。'
- en: '**Continuing the VM**: At the destination, the VM will be resumed from the
    paused state. Virtual **network interface controllers** (**NICs**) become active,
    and the bridge will send out gratuitous **Address Resolution Protocols** (**ARPs**)
    to announce the change. After receiving the announcement from the bridge, the
    network switches will update their respective ARP cache and start forwarding the
    data for the VM to the new hypervisors.'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**继续VM**：在目的地，VM将从暂停状态恢复。虚拟**网络接口控制器**（**NICs**）变为活动状态，桥接将发送自由**地址解析协议**（**ARPs**）以宣布更改。在收到桥接的通知后，网络交换机将更新各自的ARP缓存，并开始将VM的数据转发到新的hypervisor。'
- en: Note that *Steps 3, 4, and 5* will be completed in milliseconds. If some errors
    happen, QEMU will abort the migration and the VM will continue running on the
    source hypervisor. All through the migration process, `libvirt` services from
    both participating hypervisors will be monitoring the migration process.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*步骤3、4和5*将在毫秒内完成。如果发生错误，QEMU将中止迁移，VM将继续在源hypervisor上运行。在整个迁移过程中，来自两个参与的hypervisor的`libvirt`服务将监视迁移过程。
- en: Our VM called `MasteringKVM01` is now running on `PacktPhy01` safely, with `lockd`
    enabled. We are going to live-migrate `MasteringKVM01` to `PacktPhy02`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的VM称为`MasteringKVM01`，现在安全地在`PacktPhy01`上运行，并启用了`lockd`。我们将要将`MasteringKVM01`实施活迁移到`PacktPhy02`。
- en: 'We need to open the necessary TCP ports used for migration. You only need to
    do that at the destination server, but it''s a good practice to do this in your
    whole environment so that you don''t have to micro-manage these configuration
    changes as you need them in the future, one by one. Basically, you have to open
    the ports on all the participating hypervisors by using the following `firewall-cmd`
    command for the default zone (in our case, the `public` zone):'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要打开用于迁移的必要TCP端口。您只需要在目的地服务器上执行此操作，但最好在整个环境中执行此操作，以便以后不必逐个微观管理这些配置更改。基本上，您需要使用以下`firewall-cmd`命令为默认区域（在我们的情况下是`public`区域）在所有参与的hypervisor上打开端口：
- en: '[PRE32]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Check the name resolution on both the servers, as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 检查两台服务器上的名称解析，如下所示：
- en: '[PRE33]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Check and verify all the virtual disks attached are available at the destination,
    on the same path, with the same storage pool name. This is applicable to attached
    unmanaged (iSCSI and FC LUNs, and so on) virtual disks also.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 检查和验证所有附加的虚拟磁盘是否在目的地上可用，路径相同，并且存储池名称相同。这也适用于附加的未管理（iSCSI和FC LUN等）虚拟磁盘。
- en: 'Check and verify all the network bridges and virtual networks used by the VM
    available at the destination. After that, we can start the migration process by
    running the following code:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 检查和验证目的地可用的VM所使用的所有网络桥接和虚拟网络。之后，我们可以通过运行以下代码开始迁移过程：
- en: '[PRE34]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Our VM is using only 4,096 `--persistent` option is optional, but we recommend
    adding this.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的VM只使用4,096 `--persistent`选项是可选的，但我们建议添加这个选项。
- en: 'This is the output of `ping` during the migration process (`10.10.48.24` is
    the IP address of `MasteringKVM01`):'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这是迁移过程中`ping`的输出（`10.10.48.24`是`MasteringKVM01`的IP地址）：
- en: '[PRE35]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you get the following error message, change `cache` to `none` on the virtual
    disk attached:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果收到以下错误消息，请将附加的虚拟磁盘上的`cache`更改为`none`：
- en: '[PRE36]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`target` is the disk to change the cache. You can find the target name by running
    the following command:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`target`是要更改缓存的磁盘。您可以通过运行以下命令找到目标名称：'
- en: '[PRE37]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can try a few more options while performing a live migration, as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行活迁移时，您可以尝试一些其他选项，如下所示：
- en: '`--undefine domain`: Option used to remove a KVM domain from a KVM host.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --未定义域：用于从KVM主机中删除KVM域的选项。
- en: '`--suspend domain`: Suspends a KVM domain—that is, pauses a KVM domain until
    we unsuspend it.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --暂停域：暂停KVM域，即暂停KVM域，直到我们恢复它。
- en: '`--compressed`: When we do a VM migration, this option enables us to compress
    memory. That will mean a faster migration process, based on the –`comp-methods`
    parameter.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--compressed`：当我们进行虚拟机迁移时，此选项使我们能够压缩内存。这将意味着更快的迁移过程，基于`–comp-methods`参数。'
- en: '`--abort-on-error`: If the migration process throws an error, it is automatically
    stopped. This is a safe default option as it will help in situations where any
    kind of corruption might happen during the migration process.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--abort-on-error`：如果迁移过程出现错误，它会自动停止。这是一个安全的默认选项，因为它将有助于在迁移过程中发生任何类型的损坏的情况下。'
- en: '`--unsafe`: Kind of like the polar opposite of the `–abort-on-error` option.
    This option forces migration at all costs, even in the case of error, data corruption,
    or any other unforeseen scenario. Be very careful with this option—don''t use
    it often, or in any situation where you want to be 100% sure that VM data consistency
    is a key pre-requisite.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--unsafe`：这个选项有点像`–abort-on-error`选项的反面。这个选项会不惜一切代价进行迁移，即使出现错误、数据损坏或其他意外情况。对于这个选项要非常小心，不要经常使用，或者在任何您想要确保虚拟机数据一致性的情况下使用。'
- en: 'You can read more about these options in the RHEL 7—Virtualization Deployment
    and Administration guide (you can find the link in the *Further reading* section
    at the end of this chapter). Additionally, the `virsh` command also supports the
    following options:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在RHEL 7—虚拟化部署和管理指南中阅读更多关于这些选项的信息（您可以在本章末尾的*进一步阅读*部分找到链接）。此外，`virsh`命令还支持以下选项：
- en: '`virsh migrate-setmaxdowntime <domain>`: When migrating a VM, it''s inevitable
    that, at times, a VM is going to be unavailable for a short period of time. This
    might happen—for example—because of the hand-off process, when we migrate a VM
    from one host to the other, and we''re just coming to the point of state equilibrium
    (that is, when the source and destination host have the same VM content and are
    ready to remove the source VM from the source host inventory and make it run on
    the destination host). Basically, a small pause happens as the source VM gets
    paused and killed, and the destination host VM gets unpaused and continues. By
    using this command, the KVM stack is trying to estimate how long this stopped
    phase will last. It''s a viable option, especially for VMs that are really busy
    and are therefore changing their memory content a lot while we''re migrating them.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh migrate-setmaxdowntime <domain>`：在迁移虚拟机时，不可避免地会有时候虚拟机会短暂不可用。这可能发生，例如，因为交接过程，当我们将虚拟机从一个主机迁移到另一个主机时，我们刚好到达状态平衡点（也就是说，源主机和目标主机具有相同的虚拟机内容，并准备好从源主机清除源虚拟机并在目标主机上运行）。基本上，源虚拟机被暂停和终止，目标主机虚拟机被取消暂停并继续。通过使用这个命令，KVM堆栈试图估计这个停止阶段将持续多长时间。这是一个可行的选择，特别是对于非常繁忙的虚拟机，因此在迁移过程中它们的内存内容会发生很大变化。'
- en: '`virsh migrate-setspeed <domain> bandwidth`: We can treat this as a quasi-**Quality
    of Service** (**QoS**) option. By using it, we can set the amount of bandwidth
    in MiB/s that we''re giving to the migration process. This is a very good option
    to use if our network is busy (for example, if we have multiple **virtual local
    area networks** (**VLANs**) going across the same physical network and we have
    bandwidth limitations because of it. Lower numbers will slow the migration process.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh migrate-setspeed <domain> bandwidth`：我们可以将这个选项视为准**服务质量**（**QoS**）选项。通过使用它，我们可以设置以MiB/s为单位的迁移过程中的带宽量。如果我们的网络很忙，这是一个非常好的选择（例如，如果我们在同一物理网络上有多个**虚拟局域网**（**VLANs**），并且由于此原因有带宽限制）。较低的数字会减慢迁移过程。'
- en: '`virsh migrate-getspeed <domain>`: We can treat this as a *get information*
    option to the `migrate-setspeed` command, to check which settings we assigned
    to the `virsh migrate-setspeed` command.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virsh migrate-getspeed <domain>`：我们可以将这个选项视为`migrate-setspeed`命令的*获取信息*选项，以检查我们为`virsh
    migrate-setspeed`命令分配了哪些设置。'
- en: As you can see, migration is a complex process from a technical standpoint,
    and has multiple different types and loads of additional configuration options
    that you can use for management purposes. That being said, it's still such an
    important capability of a virtualized environment that it's very difficult to
    imagine working without it.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，从技术角度来看，迁移是一个复杂的过程，有多种不同类型和大量额外的配置选项，可以用于管理目的。尽管如此，它仍然是虚拟化环境中非常重要的功能，很难想象在没有它的情况下工作。
- en: Summary
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered different ways of creating VMs and configuring VM
    hardware. We also covered VM migration in detail, and live and offline VM migration.
    In the next chapter, we will work with VM disks, VM templates, and snapshots.
    These concepts are very important to understand as they will make your life administering
    a virtualized environment a lot easier.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了创建虚拟机和配置虚拟机硬件的不同方法。我们还详细介绍了虚拟机迁移，以及在线和离线虚拟机迁移。在下一章中，我们将学习虚拟机磁盘、虚拟机模板和快照。了解这些概念非常重要，因为它们将使您在管理虚拟化环境时更加轻松。
- en: Questions
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which command-line tools can we use to deploy VMs in `libvirt`?
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪些命令行工具来在`libvirt`中部署虚拟机？
- en: Which GUI tools can we use to deploy VMs in `libvirt`?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪些图形界面工具来在`libvirt`中部署虚拟机？
- en: When configuring our VMs, which configuration aspects should we be careful with?
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置我们的虚拟机时，我们应该注意哪些配置方面？
- en: What's the difference between online and offline VM migration?
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在线和离线虚拟机迁移有什么区别？
- en: What's the difference between VM migration and VM storage migration?
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟机迁移和虚拟机存储迁移有什么区别？
- en: How can we configure bandwidth for the migration process?
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何为迁移过程配置带宽？
- en: Further reading
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please refer to the following links for more information regarding what was
    covered in this chapter:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接，了解本章涵盖的更多信息：
- en: 'Managing VMs with `virt-manager`: [https://virt-manager.org/](https://virt-manager.org/)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`virt-manager`管理虚拟机：[https://virt-manager.org/](https://virt-manager.org/)
- en: 'oVirt—Installing Linux VMs: [https://www.ovirt.org/documentation/vmm-guide/chap-Installing_Linux_Virtual_Machines.html](https://www.ovirt.org/documentation/vmm-guide/chap-Installing_Linux_Virtual_Machines.html)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: oVirt-安装Linux VM：[https://www.ovirt.org/documentation/vmm-guide/chap-Installing_Linux_Virtual_Machines.html](https://www.ovirt.org/documentation/vmm-guide/chap-Installing_Linux_Virtual_Machines.html)
- en: 'Cloning VMs: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/cloning-virtual-machines_configuring-and-managing-virtualization](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/cloning-virtual-machines_configuring-and-managing-virtualization)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆VM：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/cloning-virtual-machines_configuring-and-managing-virtualization](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/cloning-virtual-machines_configuring-and-managing-virtualization)
- en: 'Migrating VMs: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/migrating-virtual-machines_configuring-and-managing-virtualization](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/migrating-virtual-machines_configuring-and-managing-virtualization)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移VM：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/migrating-virtual-machines_configuring-and-managing-virtualization](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_virtualization/migrating-virtual-machines_configuring-and-managing-virtualization)
- en: 'Caching: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_tuning_and_optimization_guide/sect-virtualization_tuning_optimization_guide-blockio-caching](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_tuning_and_optimization_guide/sect-virtualization_tuning_optimization_guide-blockio-caching)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_tuning_and_optimization_guide/sect-virtualization_tuning_optimization_guide-blockio-caching](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_tuning_and_optimization_guide/sect-virtualization_tuning_optimization_guide-blockio-caching)
- en: 'Influence of NUMA and memory locality on Microsoft SQL Server 2019 performance:
    [https://www.daaam.info/Downloads/Pdfs/proceedings/proceedings_2019/049.pdf](https://www.daaam.info/Downloads/Pdfs/proceedings/proceedings_2019/049.pdf)'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NUMA和内存局部性对Microsoft SQL Server 2019性能的影响：[https://www.daaam.info/Downloads/Pdfs/proceedings/proceedings_2019/049.pdf](https://www.daaam.info/Downloads/Pdfs/proceedings/proceedings_2019/049.pdf)
- en: 'Virtualization deployment and administration guide: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/index)'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化部署和管理指南：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/index)
