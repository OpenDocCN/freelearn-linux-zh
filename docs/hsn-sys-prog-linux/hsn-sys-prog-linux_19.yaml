- en: Troubleshooting and Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除和最佳实践
- en: A brief overview on newer Linux troubleshooting tools and utilities, as well
    as industry best practices to follow when designing, developing, and deploying
    real-world Linux systems apps, is the focus of this chapter. We wish to make it
    very clear, though, that this is a book on Linux systems programming; the troubleshooting
    tips and best practices described here are exclusively with regard to the system-level
    development of applications (typically written in C/C++) on a Linux system; we
    do not deal with generic troubleshooting on Linux (topics such as troubleshooting
    network or configuration issues, system administration tips, and tricks).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了较新的Linux故障排除工具和实用程序，以及在设计、开发和部署真实世界Linux系统应用程序时应遵循的行业最佳实践。但我们要非常清楚，这是一本关于Linux系统编程的书；这里描述的故障排除技巧和最佳实践仅与Linux系统上应用程序的系统级开发有关（通常用C/C++编写）；我们不涉及Linux上的通用故障排除（例如故障排除网络或配置问题、系统管理技巧和窍门）。
- en: For this chapter in particular (mainly due to the vast scope and size of the
    content it only mentions in passing), we have provided several useful online articles
    and books in the *Further reading *section on the GitHub repository. Please do
    browse through them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于本章（主要是由于内容的广泛范围和规模，它只是顺便提到），我们在GitHub存储库的“进一步阅读”部分提供了几篇有用的在线文章和书籍。请浏览一下。
- en: 'This chapter serves to round off this book; here, with respect to Linux systems
    programming, the reader will be given the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在结束本书；在这里，关于Linux系统编程，读者将得到以下内容：
- en: An overview of (newer) troubleshooting tools and techniques
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （较新）故障排除工具和技术概述
- en: An overview of industry best practices—in terms of design, software engineering,
    programming implementation, and testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计、软件工程、编程实施和测试方面的行业最佳实践概述
- en: Troubleshooting tools
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除工具
- en: 'In this section, we will mention several tools and utilities that can help
    the application developer identify system bottlenecks and performance issues.
    (Note that here, to save space and time, we do not delve into the dozens of usual
    suspects—well-known system monitoring utilities on Linux such as `ps`, `pstree`,
    `top`, `htop`, `pidstat`, `vmstat`, `dstat`, `sar`, `nagios`, `iotop`, `iostat`,
    `ionice`, `lsof`, `nmon`, `iftop`, `ethtool`, `netstat`, `tcpdump`, `wireshark`—and
    instead mention the newer ones). Here is an important thing to remember when performing
    data collection (or benchmarking) for later analysis: take the trouble to set
    up a test rig and, when using it, change (as far as is possible) only one variable
    at a time for a given run so that you can see its impact.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提到几个工具和实用程序，可以帮助应用程序开发人员识别系统瓶颈和性能问题。（请注意，在这里，为了节省空间和时间，我们不深入研究数十个常见的系统监控实用程序，如`ps`，`pstree`，`top`，`htop`，`pidstat`，`vmstat`，`dstat`，`sar`，`nagios`，`iotop`，`iostat`，`ionice`，`lsof`，`nmon`，`iftop`，`ethtool`，`netstat`，`tcpdump`，`wireshark`，而是提到了较新的工具）。在进行数据收集（或基准测试）以供后续分析时，有一件重要的事情需要记住：费心设置一个测试装置，并在使用时，尽可能只改变一个变量，以便在给定的运行中看到其影响。
- en: perf
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: perf
- en: Performance measurement and analysis is an enormous topic; the identification,
    analysis, and determination of the root cause for performance issues is no trivial
    task. In recent years, the `perf(1)` and `htop(1)` utility has emerged as the
    fundamental tool for performance measurement and analysis on the Linux platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测量和分析是一个庞大的主题；对性能问题的识别、分析和确定根本原因并不是一项微不足道的任务。近年来，`perf(1)`和`htop(1)`实用程序已成为Linux平台上性能测量和分析的基本工具。
- en: 'Sometimes, all you need is to see what is consuming the most CPU; traditionally,
    we use the well-known `top(1)` utility to do so. Try, instead, the very useful
    `perf` variant, like so: `sudo perf top`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您只需要查看哪些进程占用了最多的CPU；传统上，我们使用众所周知的`top(1)`实用程序来做到这一点。请尝试使用非常有用的`perf`变体，如：`sudo
    perf top`。
- en: 'Also, you can exploit some of the features with the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以利用以下一些功能：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Essentially, this is the `perf` workflow: record a session (data files get
    saved) and generate a report. (See the links in *Further reading* section on the
    GitHub repository.)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这是“perf”工作流程：记录一个会话（数据文件被保存）并生成报告。（请参阅GitHub存储库中“进一步阅读”部分中的链接。）
- en: 'Excellent diagrams available on Brendan Gregg''s blog clearly show the dozens
    of tools available for performing observation, performance analysis, and dynamic
    tracing on Linux:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Brendan Gregg的博客上提供了出色的图表，清楚地展示了Linux上可用于观察、性能分析和动态跟踪的数十种工具：
- en: Linux performance tools: [http://www.brendangregg.com/Perf/linux_perf_tools_full.png](http://www.brendangregg.com/Perf/linux_perf_tools_full.png)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux性能工具：[http://www.brendangregg.com/Perf/linux_perf_tools_full.png](http://www.brendangregg.com/Perf/linux_perf_tools_full.png)
- en: Linux performance observability tools: [http://www.brendangregg.com/Perf/linux_observability_tools.png](http://www.brendangregg.com/Perf/linux_observability_tools.png)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux性能可观测工具：[http://www.brendangregg.com/Perf/linux_observability_tools.png](http://www.brendangregg.com/Perf/linux_observability_tools.png)
- en: Due to its visual impact, Brendan Gregg's Flame Graph scripts are very interesting
    too; check out the links in the *Further reading *section on the GitHub repository.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其视觉冲击力，Brendan Gregg的Flame Graph脚本也非常有趣；请查看GitHub存储库中“进一步阅读”部分中的链接。
- en: 'Brendan Gregg also leads the development of a project called perf-tools. Here
    are some words from the project: performance analysis tools based on Linux `perf_events`
    *(*aka perf) and Ftrace. Several very useful shell script wrappers (over Perf,
    Ftrace, and Kprobes) make up the tools; do clone the GitHub repository and try
    them out.* (*[https://github.com/brendangregg/perf-tools](https://github.com/brendangregg/perf-tools).)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Brendan Gregg还领导了一个名为perf-tools的项目。以下是该项目的一些话：基于Linux `perf_events`（又名perf）和Ftrace的性能分析工具。这些工具包括几个非常有用的shell脚本包装程序（覆盖了Perf、Ftrace和Kprobes）；请克隆GitHub存储库并尝试它们。(*[https://github.com/brendangregg/perf-tools](https://github.com/brendangregg/perf-tools).)
- en: Tracing tools
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪工具
- en: 'In-depth tracing often has the desirous side effect of having the developer
    or tester spot performance bottlenecks as well as debug systems-level latencies
    and issues. Linux has a plethora of frameworks and tools available for tracing,
    both at user space and at the level of the kernel; some of the more relevant ones
    are mentioned here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 深入追踪往往会产生令人渴望的副作用，即开发人员或测试人员可以发现性能瓶颈，以及调试系统级的延迟和问题。Linux有大量的框架和工具可用于跟踪，无论是在用户空间还是在内核级别；这里提到了一些更相关的工具：
- en: '**User space**: `ltrace(1)` (trace library APIs), `strace(1)` (trace system
    calls; also try doing `sudo perf trace`), LTTng-ust, uprobes.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户空间**：`ltrace(1)`（跟踪库API），`strace(1)`（跟踪系统调用；也尝试使用`sudo perf trace`），LTTng-ust，uprobes。'
- en: '**Kernel space**: LTTng, ftrace (plus several frontends such as `tracecmd(1)`,
    kernelshark GUIm), Kprobes—(including Jprobes—up to Kernel Version 4.14), Kretprobes;
    SystemTaprm) eBPF.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核空间**：LTTng，ftrace（以及几个前端，如`tracecmd(1)`，kernelshark GUIm），Kprobes—（包括Jprobes—直到内核版本4.14），Kretprobes；SystemTaprm）eBPF。'
- en: The Linux proc filesystem
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux proc文件系统
- en: 'Linux has a very rich and powerful filesystem called **procfs**—`proc` for
    process. It is usually mounted under `/proc`, and it contains pseudo-files and
    directories that contain valuable runtime-generated information on processes and
    internals information. In a nutshell, procfs serves as a UI for two key purposes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有一个非常丰富和强大的文件系统，称为**procfs**—`proc`代表进程。它通常挂载在`/proc`下，包含伪文件和目录，其中包含有关进程和内部信息的有价值的运行时生成的信息。简而言之，procfs用于两个关键目的的用户界面：
- en: It serves as a viewport into detailed process, thread, OS, and hardware information.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它作为一个窗口，可以查看详细的进程、线程、操作系统和硬件信息。
- en: It serves as the place to query and set kernel-level tunables (switches and
    values for the core kernel, scheduling, memory, and network parameters).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它用于查询和设置内核级可调参数（核心内核、调度、内存和网络参数的开关和值）的地方。
- en: Taking the trouble to study and use the Linux proc filesystem is well worth
    it. Pretty much all the user space monitoring and analysis tools are ultimately
    based on procfs. Find further information in the links provided in *Further reading *section
    on the GitHub repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 花时间学习和使用Linux的proc文件系统是非常值得的。几乎所有用户空间的监控和分析工具最终都是基于procfs的。在GitHub存储库的*进一步阅读*部分提供的链接中可以找到更多信息。
- en: Best practices
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: In this section, we briefly enumerate what we consider to be industry best practices,
    though they are mostly generic and thus broad in scope; we will particularly look
    at them through the lens of the Linux systems programmer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们简要列举了我们认为是行业最佳实践的内容，尽管它们大多是通用的，因此范围广泛；我们将特别从Linux系统程序员的角度来看待它们。
- en: The empirical approach
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经验主义方法
- en: 'The word *empirical* (according to the *Cambridge English dictionary*) means
    based on what is experienced or seen, rather than on theory. This is perhaps the
    critical principle to be followed. A fascinating article by Gustavo Duarte (mentioned
    here: [https://www.infoq.com/news/2008/02/realitydrivendevelopment](https://www.infoq.com/news/2008/02/realitydrivendevelopment))
    states: "*Action and experimentation are the cornerstones of empiricism. No attempt
    is made to subdue reality by extensive analysis and copious documentation. Reality
    is invited in via experiments. Instead of agonizing over market research, an empirical
    company hires interns and develops a product in one summer. A non-empirical company
    has 43 people planning an off-button design for one year."* Throughout this book,
    too, we have always tried to consciously follow an empirical approach; we definitely
    urge the reader to cultivate and embed the empirical principle in design and development.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据《剑桥英语词典》，*经验主义*一词意味着基于所经历或所见，而不是基于理论。这可能是应该遵循的关键原则。Gustavo Duarte在一篇引人入胜的文章中提到（在这里提到：[https://www.infoq.com/news/2008/02/realitydrivendevelopment](https://www.infoq.com/news/2008/02/realitydrivendevelopment)）：“行动和实验是经验主义的基石。不会通过广泛的分析和大量的文档来压制现实。通过实验邀请现实。非经验主义公司花费一年时间，由43人规划一个关机按钮设计。”在整本书中，我们也一直试图有意识地遵循经验主义方法；我们强烈建议读者在设计和开发中培养和嵌入经验主义原则。
- en: Software engineering wisdom in a nutshell
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工程的智慧
- en: 'Frederick P Brooks wrote his famous treatise *The Mythical Man-Month: Essays
    on Software Engineering* back in 1975, and this book is to date billed as the
    most influential book on software project management. This is no wonder: certain
    truths are just that—truths. Here are a few gems from this volume:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Frederick P Brooks在1975年写了他著名的论著《神话般的程序员月份：软件工程论文》，这本书至今被誉为对软件项目管理最有影响力的书。这并不奇怪：某些真理就是真理。以下是这本书中的一些精彩之处：
- en: Plan to throw one away; you will anyway.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划扔掉一个；你无论如何都会扔掉一个。
- en: There is no silver bullet.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有银弹。
- en: Good cooking takes time. If you are made to wait, it is to serve you better,
    and to please you.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好菜需要时间。如果你被迫等待，那是为了更好地为你服务，让你满意。
- en: The bearing of a child takes nine months, no matter how many women are assigned.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生孩子需要九个月，无论分配多少个女人。
- en: Good judgment comes from experience, and experience comes from bad judgment.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好判断来自经验，经验来自糟糕的判断。
- en: Interestingly, and, of course, the design philosophy of the venerable Unix OS
    indeed incorporates great design principles, principles that remain in effect
    to this day on Linux. We covered this in [Chapter 1](c17af8c2-a426-4ab6-aabb-aa1374e56cc4.xhtml), *Linux
    System Architecture*, in the section, *The Unix philosophy in a nutshell*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，当然，古老的Unix操作系统的设计哲学确实包含了伟大的设计原则，这些原则至今在Linux上仍然有效。我们在《Linux系统架构》的章节《Unix哲学概述》中有所涉及。
- en: Programming
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程
- en: Let's now move on to the more mundane but really important things to be kept
    in mind by the developer.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转向开发人员需要牢记的更世俗但非常重要的事情。
- en: A programmer’s checklist – seven rules
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序员的清单-七条规则
- en: 'We suggest seven rules as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议以下七条规则：
- en: 'Rule #1 : Check all APIs for their failure case.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃1：检查所有API的失败情况。
- en: 'Rule #2 : Compile with warnings on (`-Wall -Wextra`) and eliminate all warnings
    as far as is possible.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃2：使用警告编译（`-Wall -Wextra`）并尽可能消除所有警告。
- en: 'Rule #3 : Never trust (user) input; validate it.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃3：永远不要相信（用户）输入；验证它。
- en: 'Rule #4 : Use assertions in your code.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃4：在你的代码中使用断言。
- en: 'Rule #5 : Eliminate unused (or dead) code from the codebase immediately.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃5：立即从代码库中消除未使用的（或死代码）。
- en: 'Rule #6 : Test thoroughly; 100% code coverage is the objective. Take the time
    and trouble to learn to use powerful tools: memory checkers (Valgrind, the sanitizer
    toolset), static and dynamic analyzers, security checkers (checksec), fuzzers (see
    the following explanation).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃6：彻底测试；100％的代码覆盖率是目标。花时间和精力学习使用强大的工具：内存检查器（Valgrind，sanitizer工具集），静态和动态分析器，安全检查器（checksec），模糊器（见下面的解释）。
- en: 'Rule #7 : Do not assume anything (*assume* makes an *ass* out of *u* and *me*).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则＃7：不要假设任何事情（*假设*会让*你*和*我*都成为*驴*）。
- en: 'Here are some examples of how serious failures can result from not following
    the rules: An Ariane 5 unmanned rocket crashed early in its launch (June 4, 1996);
    the bug was ultimately traced to a register overflow issue, a single type casting
    error (rule #5). The Knight Capital Group lost $460 million in 45 minutes. Don’t
    assume the size of a page. Use the `getpagesize(2)` system call or the `sysconf(3)`
    to obtain it. Further along these lines, see the blog article entitled *Low-Level
    Software Design* (there are links to these in the *Further reading* section on
    GitHub repository).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些不遵循规则可能导致严重失败的例子：阿丽亚娜5号无人火箭在发射初期坠毁（1996年6月4日）；最终发现错误是由于寄存器溢出问题，一个单一的类型转换错误（规则＃5）。Knight
    Capital Group在45分钟内损失了4.6亿美元。不要假设页面的大小。使用`getpagesize(2)`系统调用或`sysconf(3)`来获取它。此外，还可以查看名为*Low-Level
    Software Design*的博客文章（GitHub存储库的*进一步阅读*部分中有链接）。
- en: Better testing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的测试
- en: Testing is a critical activity; thorough and continual testing (including regression
    testing) leads to a stable product in which both the engineering team and the
    customer have deep confidence.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是一项关键活动；彻底和持续的测试（包括回归测试）会导致一个稳定的产品，工程团队和客户都对其深信不疑。
- en: 'Here is an often-overlooked truth: complete code coverage testing is critical!
    Why? Simple—there are often hidden defects lurking in sections of code that never
    actually get tested (error handling being the typical example); the fact is though,
    they will be hit one fine day, and this can cause terrible failures.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个经常被忽视的事实：完整的代码覆盖测试至关重要！为什么？简单——通常会有隐藏的缺陷潜伏在从未被测试过的代码部分（错误处理是典型的例子）；事实是，它们总有一天会被触发，这可能导致严重的失败。
- en: Then again, unfortunately, testing can only reveal the presence of errors, not
    their absence; nevertheless, good and thorough testing is absolutely critical. Most
    testing performed (test cases written) tends to be positive test cases; interestingly,
    the majority of software (security) vulnerabilities escape unnoticed by this kind
    of testing. Negative test cases help catch these failures; a class of software
    testing called **fuzzing** helps greatly in this regard. Testing code on different
    machine architectures can help expose hidden defects as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不幸的是，测试只能揭示错误的存在，而不能揭示它们的缺失；尽管如此，良好和彻底的测试绝对至关重要。大多数进行的测试（编写的测试用例）往往是正面的测试用例；有趣的是，大多数软件（安全）漏洞都逃脱了这种测试的注意。负面测试用例有助于捕捉这些失败；一类名为**fuzzing**的软件测试在这方面大有帮助。在不同的机器架构上测试代码也可以帮助暴露隐藏的缺陷。
- en: Using the Linux kernel's control groups
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Linux内核的控制组
- en: 'Use the Linux kernel''s **cgroups** (control groups) technology to specify
    and constrain resource allocation and bandwidth. The cgroup controllers on a modern
    Linux system include the following: CPU (limits on CPU usage), CPU set (the modern
    way to perform CPU affinity  constraining a group of processes to a set of CPUs),
    blkio (limits on I/O), devices (limits on which processes can use which devices),
    freezer (suspend/resume task execution), memory (limits on memory usage), `net_cls`
    (network packets tagging with classid), `net_prio` (limit network traffic per
    interface), **namespaces** (**ns**), `perf_event` (for performance analysis).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Linux内核的**cgroups**（控制组）技术来指定和限制资源分配和带宽。现代Linux系统上的cgroup控制器包括以下内容：CPU（限制CPU使用），CPU
    set（执行CPU亲和性的现代方式，将一组进程限制在一组CPU上），blkio（I/O限制），devices（限制哪些进程可以使用哪些设备），freezer（暂停/恢复任务执行），memory（内存使用限制），`net_cls`（网络数据包标记classid），`net_prio`（限制每个接口的网络流量），**namespaces**（**ns**），`perf_event`（性能分析）。
- en: 'Limiting resources is critical not only from a requirements angle, but from
    a security perspective too (think about malicious attackers dreaming up [D]DoS
    attacks). Incidentally, containers (essentially a lightweight virtualization technique),
    a hot topic nowadays, are largely a reality because of the combination of two
    Linux kernel technologies that have sufficiently evolved: cgroups and namespaces.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 限制资源不仅在需求角度上至关重要，而且在安全角度上也是如此（想想恶意攻击者梦想中的[D]DoS攻击）。顺便说一句，容器（基本上是一种轻量级虚拟化技术），现在是一个热门话题，主要是因为两个足够发展的Linux内核技术的结合：cgroups和命名空间。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Question: What''s the biggest room in the world?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：世界上最大的房间是什么？
- en: 'Answer: The room for improvement!'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：改进的空间！
- en: This, in general, should sum up the attitude you should have when working on
    enormous projects, and keep learning for life topics such as Linux. We, again,
    urge the reader to not only read for conceptual understanding—that's important!—but
    to also get their hands dirty and write the code. Make mistakes, fix them, and
    learn from them. Contributing to open source is a fantastic way to do so.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这应该总结出你在处理庞大项目时应该具有的态度，并且要终身学习诸如Linux之类的主题。我们再次敦促读者不仅要阅读以获得概念上的理解——这很重要！——还要动手编写代码。犯错误，修复错误，并从中学习。为开源项目做出贡献是一个绝佳的方式。
