- en: '*Chapter 9*: Visual Studio Code and WSL'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：Visual Studio Code和WSL'
- en: In the book so far, the focus has been on WSL and working with WSL directly.
    In this chapter, we will step up a level and start to look at how we can work
    on top of WSL when developing applications. In particular, in this chapter, we
    will explore Visual Studio Code, a free editor from Microsoft.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书的重点一直是WSL和直接使用WSL进行工作。在本章中，我们将提升一个层次，开始探讨在开发应用程序时如何在WSL之上工作。特别是在本章中，我们将探索微软提供的免费编辑器Visual
    Studio Code。
- en: We have already seen how WSL interoperability allows us to access files in our
    WSL distros from Windows. Visual Studio Code allows us to go a step deeper by
    having the graphical editing experience in Windows connecting to the supporting
    editor services running inside our WSL distro. In this way, Visual Studio Code
    provides us with abilities such as a graphical debugging experience for Linux
    applications running inside WSL. This gives us the ability to work with tools
    and dependencies in WSL while keeping the rich Windows-based editing experience
    in Visual Studio Code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到WSL的互操作性允许我们从Windows访问WSL分发中的文件。Visual Studio Code允许我们更深入地进行操作，通过在Windows中连接到运行在WSL分发中的支持编辑器服务，实现图形化编辑体验。通过这种方式，Visual
    Studio Code为我们提供了一些能力，例如在WSL中运行的Linux应用程序的图形化调试体验。这使我们能够在Visual Studio Code中保持丰富的基于Windows的编辑体验的同时，与WSL中的工具和依赖项一起工作。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主要内容：
- en: Introducing Visual Studio Code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Visual Studio Code
- en: Introducing Visual Studio Code Remote
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Visual Studio Code Remote
- en: Tips for working with Remote-WSL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Remote-WSL的工作提示
- en: We'll start the chapter by introducing Visual Studio Code and getting it installed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从介绍Visual Studio Code并安装它开始本章。
- en: Introducing Visual Studio Code
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Visual Studio Code
- en: '**Visual Studio Code** is a free, cross-platform, open source code editor from
    Microsoft. Out of the box, it comes with support for JavaScript (and TypeScript)
    applications, but support for a wide range of languages (including C++, Java,
    PHP, Python, Go, C#, and SQL) is available as extensions. Let''s begin by installing
    Visual Studio Code.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**是微软提供的一个免费、跨平台、开源的代码编辑器。它默认支持JavaScript（和TypeScript）应用程序，但可以通过扩展支持各种语言（包括C++、Java、PHP、Python、Go、C#和SQL）。让我们开始安装Visual
    Studio Code。'
- en: To install Visual Studio Code, go to [https://code.visualstudio.com/](https://code.visualstudio.com/),
    click on the download link, and run the installer when it has downloaded. The
    install process is fairly straightforward, but if you want any more details (including
    how to install the Insiders version, which provides nightly builds), see [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Visual Studio Code，请访问[https://code.visualstudio.com/](https://code.visualstudio.com/)，点击下载链接，并在下载完成后运行安装程序。安装过程相当简单，但如果你想要更多详细信息（包括如何安装Insiders版本，提供每夜构建），请参阅[https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)。
- en: 'Once installed, launching Visual Studio Code will present a window like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动Visual Studio Code将呈现如下窗口：
- en: '![Figure 9.1 – A screenshot of Visual Studio Code'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 - Visual Studio Code的截图'
- en: '](img/Figure_9.1_B16412.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.1_B16412.jpg)'
- en: Figure 9.1 – A screenshot of Visual Studio Code
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 - Visual Studio Code的截图
- en: In this screenshot, you can see the **Welcome** page in Visual Studio Code.
    This page gives links to some common actions (such as opening a folder), recent
    folders that have been opened (you won't have these when first installing), and
    various handy help pages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，你可以看到Visual Studio Code中的**欢迎**页面。该页面提供了一些常见操作的链接（如打开文件夹），最近打开的文件夹（在首次安装时没有这些），以及各种有用的帮助页面。
- en: In general, the basic usage of Visual Studio Code will likely feel familiar
    to other graphical editors. There are some great introductory videos in the documentation
    ([https://code.visualstudio.com/docs/getstarted/introvideos](https://code.visualstudio.com/docs/getstarted/introvideos))
    as well as written tips and tricks ([https://code.visualstudio.com/docs/getstarted/tips-and-tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks)).
    These links provide a lot of handy techniques to help you get the most out of
    Visual Studio Code and are recommended to boost your productivity.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，使用Visual Studio Code的基本用法可能会让人感到熟悉，与其他图形化编辑器类似。文档中有一些很好的入门视频（[https://code.visualstudio.com/docs/getstarted/introvideos](https://code.visualstudio.com/docs/getstarted/introvideos)）以及书面的技巧和技巧（[https://code.visualstudio.com/docs/getstarted/tips-and-tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks)）。这些链接提供了许多有用的技巧，可以帮助你充分利用Visual
    Studio Code，并推荐提高你的工作效率。
- en: 'There are various options for opening a folder to get started:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种选项可以打开一个文件夹开始工作：
- en: Use the **Open folder…** link on the **Welcome** page shown in *Figure 9.1.*
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**欢迎**页面上使用**打开文件夹...**链接，如*图9.1*所示。
- en: Use the **Open folder…** item in the **File** menu.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**文件**菜单中使用**打开文件夹...**选项。
- en: 'Use the **File: Open folder…** item in the command palette.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令面板中使用**文件：打开文件夹...**选项。
- en: 'The last option here, to use the command palette, is a powerful one as it provides
    a quick way to search for any command in Visual Studio Code. You can access the
    command palette by pressing *Ctrl* + *Shift* + *P*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的最后一个选项，使用命令面板，是一个强大的选项，因为它提供了在Visual Studio Code中快速搜索任何命令的方法。你可以通过按下*Ctrl*
    + *Shift* + *P*来访问命令面板：
- en: '![Figure 9.2 – A screenshot showing the command palette'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 - 显示命令面板的截图'
- en: '](img/Figure_9.2_B16412.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.2_B16412.jpg)'
- en: Figure 9.2 – A screenshot showing the command palette
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 - 显示命令面板的截图
- en: 'This screenshot shows the command palette open. The command palette provides
    access to all the commands for actions in Visual Studio Code (including actions
    from installed extensions). As you type in the command palette, the action list
    is filtered down. In this screenshot, you can see that I have filtered on `file
    open` and that this gives quick access to the **File: Open Folder…** action. It''s
    also worth noting that the command palette also shows the keyboard shortcuts for
    commands, giving an easy way to learn shortcuts for commonly used commands.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了命令面板打开的情况。命令面板提供对Visual Studio Code中所有命令（包括已安装扩展的命令）的访问。在命令面板中输入时，操作列表会被过滤。在此截图中，您可以看到我已经过滤了“文件打开”，这样可以快速访问“文件：打开文件夹…”操作。值得注意的是，命令面板还显示了命令的键盘快捷键，为学习常用命令的快捷方式提供了一种简单的方法。
- en: 'As previously mentioned, there is a wide range of extensions for Visual Studio
    Code, and these can be browsed at https://marketplace.visualstudio.com/vscode
    or you can select **Extensions: Install Extensions** from the command palette
    to browse and install directly in Visual Studio Code. Extensions can add features
    to Visual Studio Code, including support for new languages, providing new editor
    themes, or adding new functionality. In the examples in this chapter, we will
    use a Python app, but the principles apply to other languages. To find out more
    about adding language support, see [https://code.visualstudio.com/docs/languages/overview](https://code.visualstudio.com/docs/languages/overview).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '如前所述，Visual Studio Code有各种各样的扩展，可以在https://marketplace.visualstudio.com/vscode上浏览，或者您可以从命令面板中选择**Extensions:
    Install Extensions**来直接在Visual Studio Code中浏览和安装。扩展可以为Visual Studio Code添加功能，包括支持新的语言，提供新的编辑器主题或添加新的功能。在本章的示例中，我们将使用一个Python应用程序，但这些原则也适用于其他语言。要了解如何添加语言支持的更多信息，请参阅[https://code.visualstudio.com/docs/languages/overview](https://code.visualstudio.com/docs/languages/overview)。'
- en: Before we start looking at our sample app, let's look at an extension that adds
    rich WSL support to Visual Studio Code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看示例应用程序之前，让我们先看一下一个为Visual Studio Code添加了丰富的WSL支持的扩展。
- en: Introducing Visual Studio Code Remote
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Visual Studio Code Remote
- en: One way of working with files from a WSL distro's file system is to open them
    using the `\\wsl$` share that WSL provides (as discussed in [*Chapter 4*](B16412_04_Final_JC_ePub.xhtml#_idTextAnchor047),
    *Windows to Linux Interoperability*, in the *Accessing Linux files from Windows*
    section). For example, I can access the `wsl-book` folder from my home directory
    in the `\\wsl$\Ubuntu-20.04\home\stuart\wsl-book`. However, while this works,
    it incurs the cost of Windows-to-Linux file interop and doesn't provide me with
    an integrated environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从WSL发行版的文件系统中处理文件的一种方法是使用WSL提供的`\\wsl$`共享（如[*第4章*](B16412_04_Final_JC_ePub.xhtml#_idTextAnchor047)中所讨论的*Windows与Linux的互操作性*中的*从Windows访问Linux文件*部分）。例如，我可以从`\\wsl$\Ubuntu-20.04\home\stuart\wsl-book`中的我的主目录访问`wsl-book`文件夹。然而，尽管这样可以工作，但它会产生Windows到Linux文件互操作的成本，并且不能为我提供一个集成的环境。
- en: On Windows, if we have Python installed along with the Python extension for
    Visual Studio Code, then we get an integrated experience for running and debugging
    our code. If we open code via the `\\wsl$` share, then Visual Studio Code will
    still give us the Windows experience, rather than using the installation of Python
    and its dependencies and tools from WSL. However, with the **Remote-WSL extension**
    from Microsoft, we can fix that!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，如果我们安装了Python以及Visual Studio Code的Python扩展，那么我们可以获得一个集成的体验来运行和调试我们的代码。如果我们通过`\\wsl$`共享打开代码，那么Visual
    Studio Code仍然会给我们提供Windows体验，而不是使用WSL中Python及其依赖和工具的安装。然而，通过Microsoft的**Remote-WSL扩展**，我们可以解决这个问题！
- en: With the Remote Development extensions, Visual Studio Code now separates the
    experience into the Visual Studio Code user interface and the Visual Studio Code
    server. The server portion is responsible for loading the source code, launching
    the application, running the debugger, launching terminal processes, and similar
    other activities. The user interface portion provides the Windows user interface
    functionality by communicating with the server.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Remote Development扩展，Visual Studio Code现在将体验分为Visual Studio Code用户界面和Visual
    Studio Code服务器。服务器部分负责加载源代码，启动应用程序，运行调试器，启动终端进程等其他活动。用户界面部分通过与服务器通信提供Windows用户界面功能。
- en: 'There are various flavors of the remote extensions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 远程扩展有各种不同的版本：
- en: Remote-WSL, which runs the server in WSL
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Remote-WSL，在WSL中运行服务器
- en: Remote-SSH, which allows you to connect to a remote machine over SSH to run
    the server
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Remote-SSH，允许您通过SSH连接到远程机器来运行服务器
- en: Remote-Containers, which allows you to use containers to run the server in
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Remote-Containers，允许您使用容器来运行服务器
- en: We will spend the rest of this chapter looking at Remote-WSL and the next chapter
    will cover Remote-Containers. For more information on the Remote-Development extensions
    (including Remote-SSH), see https://code.visualstudio.com/docs/remote/remote-overview.
    Let's get started with Remote-WSL.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的其余部分介绍Remote-WSL，下一章将介绍Remote-Containers。有关Remote-Development扩展的更多信息（包括Remote-SSH），请参阅https://code.visualstudio.com/docs/remote/remote-overview。让我们开始使用Remote-WSL。
- en: Getting started with Remote-WSL
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Remote-WSL
- en: 'The Remote-WSL extension is included in the Remote-Development extension pack
    ([https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)),
    which provides an easy way to install Remote-WSL, Remote-SSH, and Remote-Containers
    in a single step. If you prefer to just install Remote-WSL, then do that here:
    [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Remote-WSL扩展包含在Remote-Development扩展包中（[https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)），它提供了一种简单的方式来一键安装Remote-WSL、Remote-SSH和Remote-Containers。如果你只想安装Remote-WSL，请在这里进行安装：[https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)。
- en: To follow along with this, make sure that you have the code for the book cloned
    in a Linux distro. You can find the code at [https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques](https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本书进行操作，请确保在Linux发行版中克隆了本书的代码。你可以在[https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques](https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques)找到代码。
- en: 'The sample code uses Python 3, which should already be installed if you are
    using a recent version of Ubuntu. You can test whether Python 3 is installed by
    running `python3 -c ''print("hello")''` in your Linux distro. If the command completes
    successfully, then you''re all set. If not, refer to the Python documentation
    for instructions on installing: [https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码使用Python 3，如果你使用的是最新版本的Ubuntu，它应该已经安装好了。你可以通过在Linux发行版中运行`python3 -c 'print("hello")'`来测试是否安装了Python
    3。如果命令成功完成，则说明一切准备就绪。如果没有，请参考Python文档中的安装说明：[https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download)。
- en: Now let's open the sample code in Visual Studio Code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在Visual Studio Code中打开示例代码。
- en: Opening a folder with Remote-WSL
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Remote-WSL打开文件夹
- en: 'Once you have installed Remote-WSL, open Visual Studio Code and select **Remote-WSL:
    New Window** from the command palette (*Ctrl* + *Shift* + *P*):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '安装完Remote-WSL后，打开Visual Studio Code并从命令面板（*Ctrl* + *Shift* + *P*）选择**Remote-WSL:
    New Window**：'
- en: '![Figure 9.3 – A screenshot showing the Remote-WSL commands in the command
    palette'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 - 显示命令面板中的Remote-WSL命令的屏幕截图'
- en: '](img/Figure_9.3_B16412.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.3_B16412.jpg)'
- en: Figure 9.3 – A screenshot showing the Remote-WSL commands in the command palette
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 - 显示命令面板中的Remote-WSL命令的屏幕截图
- en: 'This screenshot shows the new commands that the Remote-WSL extension has added,
    with **Remote-WSL: New Window** selected. This will open a new Visual Studio Code
    window, start up the Visual Studio Code server in your default WSL distro and
    connect to it. If you want to choose which distro to connect to, pick the **Remote-WSL:
    New Window using Distro…** option instead.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '此屏幕截图显示Remote-WSL扩展添加的新命令，选择**Remote-WSL: New Window**。这将打开一个新的Visual Studio
    Code窗口，在默认的WSL发行版中启动Visual Studio Code服务器并连接到它。如果你想选择连接的发行版，请选择**Remote-WSL: New
    Window using Distro…**选项。'
- en: 'Once the new Visual Studio Code window opens, the very bottom left of the window
    will show **WSL: Ubuntu-18.04** (or whatever distro you have open) to indicate
    that this instance of Visual Studio Code is connected via Remote-WSL.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '新的Visual Studio Code窗口打开后，窗口的左下角将显示**WSL: Ubuntu-18.04**（或者你打开的其他发行版），表示此实例的Visual
    Studio Code通过Remote-WSL连接。'
- en: 'Now we can choose **File: Open Folder…** from the command palette to open the
    sample code. When performing this action in Visual Studio Code without connecting
    through Remote-WSL, this will open the standard Windows file dialog. However,
    since we''re connected with Remote-WSL, this command will now prompt us to pick
    a folder in the distro that we connected to:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，我们可以从命令面板中选择**File: Open Folder…**来打开示例代码。在没有通过Remote-WSL连接时，在Visual Studio
    Code中执行此操作将打开标准的Windows文件对话框。然而，由于我们通过Remote-WSL连接，这个命令现在会提示我们选择连接的发行版中的一个文件夹：'
- en: '![Figure 9.4 – A screenshot showing the Remote-WSL folder picker'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4 - 显示Remote-WSL文件夹选择器的屏幕截图'
- en: '](img/Figure_9.4_B16412.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.4_B16412.jpg)'
- en: Figure 9.4 – A screenshot showing the Remote-WSL folder picker
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 - 显示Remote-WSL文件夹选择器的屏幕截图
- en: 'This screenshot shows selecting the folder to open from the WSL distribution
    file system. Note that I cloned the code for the book into `wsl-book` in my `home`
    folder. Depending on where you saved the code, you may have a path such as `/home/<your-user>/WSL-2-Tips-Tricks-and-Techniques/chapter-09/web-app`.
    Once you have opened the folder, Visual Studio starts processing the contents
    and will prompt you to install recommended extensions if you haven''t already
    got the Python extension installed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示从WSL分发文件系统中选择要打开的文件夹。请注意，我将本书的代码克隆到了`home`文件夹中的`wsl-book`中。根据你保存代码的位置，你可能会有一个类似于`/home/<your-user>/WSL-2-Tips-Tricks-and-Techniques/chapter-09/web-app`的路径。打开文件夹后，Visual
    Studio开始处理内容，并提示你安装推荐的扩展（如果你还没有安装Python扩展）：
- en: '![Figure 9.5 – A screenshot showing the recommended extensions prompt'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.5 - 显示推荐扩展提示的屏幕截图'
- en: '](img/Figure_9.5_B16412.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.5_B16412.jpg)'
- en: Figure 9.5 – A screenshot showing the recommended extensions prompt
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 - 显示推荐扩展提示的屏幕截图
- en: 'The prompt in this screenshot appears because the folder you just opened contains
    a `.vscode/extensions.json` file that lists the Python extension. When the prompt
    appears, either click **Install All** to install the extension or click **Show
    Recommendations** to check the extension before installing. Note that you might
    be prompted, even if you had previously installed the Python extension in Visual
    Studio Code before using Remote-WSL:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图中的提示出现是因为您刚刚打开的文件夹包含一个列出Python扩展的`.vscode/extensions.json`文件。当提示出现时，要么单击**Install
    All**安装扩展，要么单击**Show Recommendations**在安装之前检查扩展。请注意，即使您之前在使用Remote-WSL之前已在Visual
    Studio Code中安装了Python扩展，您也可能会收到提示：
- en: '![Figure 9.6 – A screenshot showing Python installed in Windows but not WSL'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.6 - 显示在Windows中安装了Python但未安装WSL的屏幕截图'
- en: '](img/Figure_9.6_B16412.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.6_B16412.jpg)'
- en: Figure 9.6 – A screenshot showing Python installed in Windows but not WSL
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 - 显示在Windows中安装了Python但未安装WSL的屏幕截图
- en: This screenshot shows the **EXTENSIONS** view in Visual Studio Code indicating
    that the Python extension is already installed in Windows and prompting us to
    install Remote-WSL for the distro that the current project is loaded in. If you
    see this, click the **Install** button to install in WSL.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了Visual Studio Code中的**EXTENSIONS**视图，指示Python扩展已在Windows中安装，并提示我们安装当前项目所加载的WSL发行版的Remote-WSL。如果您看到此提示，请单击**Install**按钮以在WSL中安装。
- en: At this point, we have the Visual Studio Code user interface running in Windows
    and connected to a server component running in our WSL distro. The server has
    loaded the code for the web app and we've installed the Python extension, which
    is now running in the server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们在Windows中运行Visual Studio Code用户界面，并连接到在我们的WSL发行版中运行的服务器组件。服务器已加载了Web应用程序的代码，并且我们已安装了Python扩展，该扩展现在在服务器中运行。
- en: With this set up, let's look at how to run the code under the debugger.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，让我们看看如何在调试器下运行代码。
- en: Running the app
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the app, we first need to ensure that the Python extension is using
    the correct version of Python (we want Python 3). To do this, look along the status
    bar at the bottom of the Visual Studio Code window until you see something that
    says **Python 2.7.18 64-bit** or similar. Clicking on this section brings up the
    Python version picker:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，我们首先需要确保Python扩展正在使用正确的Python版本（我们想要Python 3）。为此，请查看Visual Studio Code窗口底部的状态栏，直到看到类似于**Python
    2.7.18 64位**的内容。单击此部分会弹出Python版本选择器：
- en: '![Figure 9.7 – A screenshot showing the Python version picker'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7 - 显示Python版本选择器的屏幕截图'
- en: '](img/Figure_9.7_B16412.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.7_B16412.jpg)'
- en: Figure 9.7 – A screenshot showing the Python version picker
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 - 显示Python版本选择器的屏幕截图
- en: As shown in this screenshot, the version picker shows any versions of Python
    it has detected and allows you to pick the one that you want (here, we picked
    a Python 3 version). Notice that the paths shown in this list are all Linux paths,
    confirming that the Python extension is running in the Visual Studio Code server
    in WSL. If you prefer to work with Python virtual environments ([https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html))
    and have created one for the project, these will also show in this list for you
    to select.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如此屏幕截图所示，版本选择器显示它检测到的任何Python版本，并允许您选择您想要的版本（在这里，我们选择了Python 3版本）。请注意，此列表中显示的路径都是Linux路径，确认Python扩展正在WSL中的Visual
    Studio Code服务器中运行。如果您喜欢使用Python虚拟环境（[https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)）并为项目创建了一个虚拟环境，这些虚拟环境也会显示在此列表中供您选择。
- en: Before we can run the app, we need to install the dependencies. From the command
    palette, choose `pip3 install -r requirements.txt` to install our dependencies.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序之前，我们需要安装依赖项。从命令面板中选择`pip3 install -r requirements.txt`以安装我们的依赖项。
- en: Tip
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you don't have pip3 installed, run `sudo apt-update && sudo apt install python3-pip`
    to install.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装pip3，请运行`sudo apt-update && sudo apt install python3-pip`进行安装。
- en: 'Alternatively, follow the instructions here: [https://packaging.python.org/guides/installing-using-linux-tools/](https://packaging.python.org/guides/installing-using-linux-tools/).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，按照此处的说明进行操作：[https://packaging.python.org/guides/installing-using-linux-tools/](https://packaging.python.org/guides/installing-using-linux-tools/)。
- en: 'Next, open up `app.py` from the `app.py` open, we can launch the debugger by
    pressing *F5*, which will prompt you to select which configuration to use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从`app.py`打开`app.py`，我们可以通过按下*F5*来启动调试器，这将提示您选择要使用的配置：
- en: '![Figure 9.8 – A screenshot showing the Python configuration picker'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.8 - 显示Python配置选择器的屏幕截图'
- en: '](img/Figure_9.8_B16412.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.8_B16412.jpg)'
- en: Figure 9.8 – A screenshot showing the Python configuration picker
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 - 显示Python配置选择器的屏幕截图
- en: 'This screenshot shows the set of common debug options that the Python extension
    allows you to pick from. We''ll see how to configure it for full flexibility in
    a moment, but for now, pick **Flask**. This will launch the app using the Flask
    framework and attach the debugger:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了Python扩展允许您选择的一组常见调试选项。我们将在稍后看到如何配置它以实现完全灵活性，但现在选择**Flask**。这将使用Flask框架启动应用程序并附加调试器：
- en: '![Figure 9.9 – A screenshot showing the application running under the debugger'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.9 - 显示在调试器下运行应用程序的屏幕截图'
- en: '](img/Figure_9.9_B16412.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.9_B16412.jpg)'
- en: Figure 9.9 – A screenshot showing the application running under the debugger
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 - 显示在调试器下运行应用程序的屏幕截图
- en: 'In the previous screenshot, you can see that the integrated terminal window
    has been opened, and Visual Studio Code has launched our Flask application. When
    the application starts, it outputs the URL that it is listening on (`http://127.0.0.1:5000`
    in this example). Hovering over this link with the cursor invites you to *Ctrl*
    + *click* to open the link. Doing this will open the URL in your default browser:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中，您可以看到已打开集成终端窗口，并且Visual Studio Code已启动了我们的Flask应用程序。当应用程序启动时，它会输出它正在侦听的URL（在此示例中为`http://127.0.0.1:5000`）。将光标悬停在此链接上会提示您使用*Ctrl*
    + *单击*打开链接。这样做将在默认浏览器中打开URL：
- en: '![Figure 9.10 – A screenshot showing the web app in the browser'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.10-浏览器中显示Web应用程序的屏幕截图'
- en: '](img/Figure_9.10_B16412.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.10_B16412.jpg)'
- en: Figure 9.10 – A screenshot showing the web app in the browser
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10-浏览器中显示Web应用程序的屏幕截图
- en: This screenshot shows the output from the web app in the browser, which includes
    the OS name and kernel version that the web app server is running on. Again, this
    demonstrates that while the Visual Studio Code user interface is running in Windows,
    all of the code is being handled and is running in our WSL distro. The combination
    of Visual Studio Code's Remote-WSL and the WSL traffic forwarding for localhost
    addresses gives us a rich and natural experience spanning Windows and Linux.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了浏览器中Web应用程序的输出，其中包括Web应用程序服务器正在运行的操作系统名称和内核版本。同样，这证明了虽然Visual Studio
    Code用户界面在Windows中运行，但所有代码都在我们的WSL分发中处理和运行。Visual Studio Code的Remote-WSL和WSL用于本地主机地址的流量转发的组合为我们提供了跨Windows和Linux的丰富和自然的体验。
- en: So far, we've just used the debugger as a convenient way to launch our app.
    Next, let's look at using the debugger to step through our code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是将调试器用作启动应用程序的便捷方式。接下来，让我们看看如何使用调试器逐步执行代码。
- en: Debugging our app
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试我们的应用程序
- en: In this section, we'll take a look at how to step through the code in our project
    in the debugger. Again, this allows us to use the Visual Studio Code user interface
    in Windows to connect to and debug the application running in our WSL distribution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何在调试器中逐步查看项目中的代码。同样，这使我们可以使用Windows中的Visual Studio Code用户界面连接到和调试在WSL分发中运行的应用程序。
- en: 'In the last section, we saw how we can use *F5* to run our Python app and it
    prompted us for a configuration to use (we chose *Flask*). Since we haven''t configured
    the debugger for our project, we will be prompted to select the environment each
    time. Before we dig into the debugger, let''s set up the configuration so that
    *F5* automatically launches our app correctly. To do this, open the **RUN** view
    either by pressing *Ctrl* + *Shift* + *D* or selecting the **Run: Focus on Run
    View** command from the command palette:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '在上一节中，我们看到了如何使用*F5*运行Python应用程序，并提示我们选择要使用的配置（我们选择了*Flask*）。由于我们还没有为项目配置调试器，因此每次都会提示我们选择环境。在深入研究调试器之前，让我们设置配置，以便*F5*自动正确启动我们的应用程序。为此，请打开**RUN**视图，可以通过按下*Ctrl*
    + *Shift* + *D*或从命令面板中选择**Run: Focus on Run View**命令来打开：'
- en: '![Figure 9.11 – A screenshot showing the Run view in Visual Studio Code'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.11-Visual Studio Code中显示运行视图的屏幕截图'
- en: '](img/Figure_9.11_B16412.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.11_B16412.jpg)'
- en: Figure 9.11 – A screenshot showing the Run view in Visual Studio Code
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11-Visual Studio Code中显示运行视图的屏幕截图
- en: 'This screenshot shows the `launch.json` file. You will be prompted with the
    same set of options as in *Figure 9.7* and should again choose `.vscode/launch.json`
    file in the folder we have open:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了`launch.json`文件。您将收到与*图9.7*中相同的一组选项，并且应再次选择我们打开的文件夹中的`.vscode/launch.json`文件：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As this content shows, `launch.json` contains a `env` property.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如此内容所示，`launch.json`包含一个`env`属性。
- en: 'With the debug options configured, let''s switch back to the `app.py` file
    and set a breakpoint. In `app.py` we have a `home` method, which returns some
    HTML and includes the output of the `get_os_info` function. Navigate to the `return`
    statement in that function and press *F9* to add a breakpoint (there are other
    ways to do this – see https://code.visualstudio.com/docs/editor/debugging). Now
    we can press *F5* to run our app and it will pause in the debugger when it is
    processing a request. To trigger the breakpoint, open the browser as before and
    switch back to Visual Studio Code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 配置了调试选项后，让我们切换回`app.py`文件并设置一个断点。在`app.py`中，我们有一个`home`方法，它返回一些HTML并包含`get_os_info`函数的输出。在该函数的`return`语句处导航并按下*F9*添加一个断点（还有其他方法可以做到这一点-请参阅https://code.visualstudio.com/docs/editor/debugging）。现在，我们可以按下*F5*运行我们的应用程序，当它处理请求时，它将在调试器中暂停。要触发断点，请像之前一样打开浏览器并切换回Visual
    Studio Code：
- en: '![Figure 9.12 – A screenshot of Visual Studio Code debugging a Python app in
    WSL'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.12-Visual Studio Code在WSL中调试Python应用程序的屏幕截图'
- en: '](img/Figure_9.12_B16412.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.12_B16412.jpg)'
- en: Figure 9.12 – A screenshot of Visual Studio Code debugging a Python app in WSL
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12-Visual Studio Code在WSL中调试Python应用程序的屏幕截图
- en: This screenshot shows Visual Studio Code debugging our app. On the left, we
    can see the local variables (for example, the content of the `sysname` variable)
    and the call stack. We can use the controls at the top of the window (or their
    keyboard shortcuts) to resume execution or step through the code. The bottom of
    the window shows the terminal that was used to run the application, and we can
    switch that to the `sysname="Hello"` and then pressing *F5* to resume the app.
    Switching back to the browser, you will see `Hello` in the output in the browser,
    showing that we updated the variable's value in the debugger.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了Visual Studio Code调试我们的应用程序。在左侧，我们可以看到局部变量（例如，`sysname`变量的内容）和调用堆栈。我们可以使用窗口顶部的控件（或它们的键盘快捷键）来恢复执行或逐步执行代码。窗口底部显示了用于运行应用程序的终端，我们可以将其切换到`sysname="Hello"`，然后按下*F5*恢复应用程序。切换回浏览器，您将在浏览器的输出中看到`Hello`，显示我们在调试器中更新了变量的值。
- en: 'Here, we''ve seen the rich support Visual Studio Code has for working with
    multiple languages (by installing language support through extensions). By installing
    and using the *Remote-WSL* extension, we can get the rich features of Visual Studio
    Code with the user experience in Windows and all the code services executed in
    WSL. In the example, we walked through all the code services that were running
    in WSL: the Python interpreter, the language service to enable refactoring, the
    debugger, and the application being debugged. All of that execution happens in
    WSL, so we are able to set up the environment in Linux and then have the rich
    UI over the top of that as we develop our application.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到了Visual Studio Code对多种语言的丰富支持（通过安装语言支持扩展）。通过安装和使用*Remote-WSL*扩展，我们可以在Windows中获得Visual
    Studio Code的丰富功能，并在WSL中执行所有代码服务。在这个例子中，我们演示了在WSL中运行的所有代码服务：Python解释器、语言服务以实现重构、调试器和正在调试的应用程序。所有这些执行都发生在WSL中，因此我们可以在Linux中设置环境，然后在开发应用程序时在其上方拥有丰富的用户界面。
- en: Now that we've had a look at the core experience, we'll dip into a few tips
    for making the most of Remote-WSL.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了核心体验，我们将深入了解一些使用Remote-WSL的技巧。
- en: Tips for working with Remote-WSL
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Remote-WSL的技巧
- en: This section will call out a number of tips that can help to further refine
    your experience when working with Visual Studio Code and Remote-WSL.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍一些技巧，可以帮助您在使用Visual Studio Code和Remote-WSL时进一步优化您的体验。
- en: Loading Visual Studio Code from your terminal
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从终端加载Visual Studio Code
- en: In Windows, you can launch Visual Studio Code from a terminal using the `code
    <path>` command to open the specified path. For example, you can use `code .`
    to open the current folder (`.`) in Visual Studio Code. This actually uses a `code.cmd`
    script file, but Windows allows you to drop the extension.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，您可以使用`code <路径>`命令从终端启动Visual Studio Code，以打开指定的路径。例如，您可以使用`code .`来打开当前文件夹（`.`）在Visual
    Studio Code中。实际上，这使用了一个`code.cmd`脚本文件，但Windows允许您省略扩展名。
- en: When working with WSL, it is common to have a terminal open, and with Remote-WSL,
    you also get a `code` command. So, you can navigate to your project folder in
    the terminal in WSL and run `code .` and it will launch Visual Studio Code and
    open the specified folder (the current folder in this case) using the Remote-WSL
    extension. This integration is a nice option to have and maintains a sense of
    parity and integration between Windows and WSL environments.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用WSL时，通常会打开一个终端，并且使用Remote-WSL，您还可以获得一个`code`命令。因此，您可以在WSL的终端中导航到项目文件夹并运行`code
    .`，它将启动Visual Studio Code并使用Remote-WSL扩展打开指定的文件夹（在这种情况下是当前文件夹）。这种集成是一个很好的选择，可以在Windows和WSL环境之间保持一致和集成。
- en: Here, we saw how to get to Visual Studio Code from your terminal. Next, we'll
    look at the opposite.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到了如何从终端进入Visual Studio Code。接下来，我们将看相反的情况。
- en: Opening an external terminal in Windows Terminal
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows终端中打开外部终端
- en: 'Sometimes you''re in Visual Studio Code working on your app and you want a
    new terminal to run some commands. Visual Studio Code has the `Windows Terminal
    Integration` in the Visual Studio Code extensions view or open https://marketplace.visualstudio.com/items?itemName=Tyriar.windows-terminal.
    Once installed, there are a number of new commands available:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你在Visual Studio Code中工作，想要一个新的终端来运行一些命令。Visual Studio Code在Visual Studio
    Code扩展视图中有`Windows终端集成`，或者打开https://marketplace.visualstudio.com/items?itemName=Tyriar.windows-terminal。安装完成后，会有一些新的命令可用：
- en: '![Figure 9.13 – A screenshot showing the new Windows Terminal commands'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.13 - 展示新的Windows终端命令的截图'
- en: '](img/Figure_9.13_B16412.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.13_B16412.jpg)'
- en: Figure 9.13 – A screenshot showing the new Windows Terminal commands
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13 - 展示新的Windows终端命令的截图
- en: This screenshot shows the new commands available in the command palette. The
    **Open** command opens Windows Terminal to the Visual Studio Code workspace folder
    using the default profile in Windows Terminal. The **Open Active File's Folder**
    command opens the folder containing the currently open file in the default profile.
    The two additional commands that add **With Profile** correspond to the previous
    commands but allow you to pick which Windows Terminal profile to open the path
    with.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图展示了命令面板中的新命令。**打开**命令使用Windows终端中的默认配置打开Visual Studio Code工作区文件夹。**打开活动文件夹**命令在默认配置中打开包含当前打开文件的文件夹。另外两个命令**使用配置文件打开**对应于前面的命令，但允许您选择使用哪个Windows终端配置文件打开路径。
- en: 'In addition to commands accessible from the command palette, this extension
    also adds new items to the right-click menu for files and folders in the Explorer
    view:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从命令面板中访问的命令外，该扩展还为资源管理器视图中的文件和文件夹添加了右键菜单的新项目：
- en: '![Figure 9.14 – A screenshot showing the right-click menu commands'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.14 - 展示右键菜单命令的截图'
- en: '](img/Figure_9.14_B16412.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.14_B16412.jpg)'
- en: Figure 9.14 – A screenshot showing the right-click menu commands
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14 - 展示右键菜单命令的截图
- en: In this screenshot, I clicked on a folder in the Explorer view and there are
    two menu items that the extension has added for opening the path in Windows Terminal.
    The first of these opens the path in the default profile and the second prompts
    for a path to open.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我在资源管理器视图中点击了一个文件夹，扩展添加了两个菜单项，用于在Windows终端中打开路径。其中第一个菜单项在默认配置中打开路径，第二个菜单项会提示打开路径。
- en: This extension makes it quick and easy to get a Windows Terminal instance open
    in the context of your Visual Studio Code project to keep you in the flow and
    productive.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展可以快速方便地在Visual Studio Code项目的上下文中打开一个Windows终端实例，让您保持流畅和高效。
- en: Next, we'll look at some tips for working with Git.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一些使用Git的技巧。
- en: Using Visual Studio Code as your Git editor
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code作为您的Git编辑器
- en: Visual Studio Code provides integrated visual tools for working with Git repositories.
    Depending on your personal preferences, you may use the `git` command-line tool
    for some or all of your Git interactions. For some operations, Git opens a temporary
    file to gather further input, for example, to get the commit message on a merge
    commit or to determine what actions to take on an interactive rebase.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code提供了与Git存储库一起工作的集成可视化工具。根据个人喜好，您可以使用`git`命令行工具来进行一些或全部的Git交互。对于某些操作，Git会打开一个临时文件以获取进一步的输入，例如在合并提交上获取提交消息或确定在交互式rebase上采取哪些操作。
- en: Unless you have configured an alternative, Git will use `vi` as its default
    editor. If you are comfortable with `vi` then that's great, but if you would prefer
    to use Visual Studio Code then we can leverage the `code` command we saw earlier
    in the chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您配置了其他编辑器，否则Git将使用`vi`作为其默认编辑器。如果您熟悉`vi`，那很好，但如果您更喜欢使用Visual Studio Code，我们可以利用本章前面看到的`code`命令。
- en: 'To configure Git to use Visual Studio Code, we can run `git config --global
    core.editor "code --wait"`. The `--global` switch sets the config value for all
    repositories (unless they override it), and we are setting the `core.editor` value,
    which controls the editor that `git` uses. The value we are assigning to this
    setting is `code --wait`, which uses the `code` command we saw in the last section.
    Running the `code` command without the `--wait` switch launches Visual Studio
    Code and then exits (leaving Visual Studio Code running), which is generally what
    you want when using it to open a file or folder. However, when `git` launches
    an editor, it expects the process to block until the file is closed and the `--wait`
    switch gives us that behavior:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置Git使用Visual Studio Code，我们可以运行`git config --global core.editor "code --wait"`。`--global`开关设置所有存储库的配置值（除非它们覆盖它），我们正在设置`core.editor`值，该值控制`git`使用的编辑器。我们为此设置分配的值是`code
    --wait`，它使用我们在上一节中看到的`code`命令。运行`code`命令而不使用`--wait`开关会启动Visual Studio Code然后退出（保持Visual
    Studio Code运行），这通常是在使用它打开文件或文件夹时所希望的行为。但是，当`git`启动编辑器时，它期望进程阻塞直到文件关闭，而`--wait`开关提供了这种行为：
- en: '![Figure 9.15 – A screenshot showing Visual Studio Code as the Git editor for
    WSL'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.15 - 显示Visual Studio Code作为WSL的Git编辑器的屏幕截图'
- en: '](img/Figure_9.15_B16412.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.15_B16412.jpg)'
- en: Figure 9.15 – A screenshot showing Visual Studio Code as the Git editor for
    WSL
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15 - 显示Visual Studio Code作为WSL的Git编辑器的屏幕截图
- en: In this screenshot, you can see an interactive `git rebase` command in the terminal
    at the bottom, and the `git-rebase-todo` file that Git uses to capture the actions
    loaded in Visual Studio Code after configuring the Git editor.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，您可以在底部的终端中看到一个交互式的`git rebase`命令，以及在配置了Git编辑器后加载到Visual Studio Code中的`git-rebase-todo`文件，用于捕获操作。
- en: Next, we'll continue looking at Git, exploring ways to view Git history.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将继续查看Git，探索查看Git历史记录的方法。
- en: Viewing Git history
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看Git历史记录
- en: 'When working on a project using Git for version control, it is likely that
    you will want to view the commit history at some point. There are various approaches
    to this, and you may well have your own preferred tool. Despite the bare-bones
    user interface style, I often use `gitk` because it is ubiquitous as it is included
    as part of the Git install. When working on Windows, you can simply run `gitk`
    from a folder with a Git repository. In WSL, we need to run `gitk.exe` so that
    it launches the Windows application (note that this requires Git to be installed
    on Windows):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Git进行版本控制的项目中工作时，您可能会想要在某个时候查看提交历史记录。有各种方法可以实现这一点，您可能也有自己首选的工具。尽管界面风格简单，但我经常使用`gitk`，因为它是普遍存在的，作为Git安装的一部分包含在其中。在Windows上工作时，您可以直接从Git存储库的文件夹中运行`gitk`。在WSL中，我们需要运行`gitk.exe`以便启动Windows应用程序（请注意，这需要在Windows上安装Git）：
- en: '![Figure 9.16 – A screenshot showing gitk.exe run from WSL'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.16 - 显示从WSL运行的gitk.exe的屏幕截图'
- en: '](img/Figure_9.16_B16412.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.16_B16412.jpg)'
- en: Figure 9.16 – A screenshot showing gitk.exe run from WSL
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16 - 显示从WSL运行的gitk.exe的屏幕截图
- en: In this screenshot, you can see the `gitk` Windows application run from a WSL
    Git repository and accessing the content through the file system mapping. If you
    have an alternative Windows app you prefer for viewing Git history, then this
    approach should also work, providing the application is in your path. If you find
    yourself forgetting to add the `.exe` when running these commands, you may wish
    to look at in [*Chapter 5*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054), *Linux
    to Windows Interoperability*, in the *Creating aliases for Windows applications*
    section.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，您可以看到从WSL Git存储库运行的`gitk` Windows应用程序，并通过文件系统映射访问内容。如果您有其他首选的用于查看Git历史记录的Windows应用程序，那么这种方法也可以工作，只要该应用程序在您的路径中。如果在运行这些命令时忘记添加`.exe`，您可能希望查看[*第5章*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054)，*Linux到Windows的互操作性*，*为Windows应用程序创建别名*部分。
- en: 'Because the Windows application is going via the Windows-to-Linux file mapping
    using the `\\wsl$` share, you may notice that the application loads more slowly
    for large Git repositories due to the overhead of this mapping. An alternative
    approach is to use an extension in Visual Studio Code such as **Git Graph** (https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Windows应用程序通过`\\wsl$`共享使用Windows到Linux文件映射，您可能会注意到对于大型Git存储库，应用程序加载速度较慢，因为这种映射的开销较大。另一种方法是在Visual
    Studio Code中使用扩展，例如**Git Graph**（https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph）：
- en: '![Figure 9.17 – A screenshot showing the Git Graph extension in Visual Studio
    Code'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.17 - 显示在Visual Studio Code中的Git Graph扩展'
- en: '](img/Figure_9.17_B16412.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.17_B16412.jpg)'
- en: Figure 9.17 – A screenshot showing the Git Graph extension in Visual Studio
    Code
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17 - 显示Visual Studio Code中的Git Graph扩展
- en: This screenshot shows the Git history using the **Git Graph** extension. By
    using a Visual Studio Code extension to render the Git history, the extension
    can be run by the server component running in WSL. This allows direct file access
    for querying the Git history and avoids the performance overhead of a Windows
    application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示了使用**Git Graph**扩展查看的Git历史记录。通过使用Visual Studio Code扩展来渲染Git历史记录，扩展可以由在WSL中运行的服务器组件来运行。这样可以直接访问文件来查询Git历史记录，并避免了Windows应用程序的性能开销。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you've had an overview of Visual Studio Code and seen that
    it is a flexible editor with a rich ecosystem of extensions that provide support
    for a wide range of languages and add extra capabilities to the editor.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经对Visual Studio Code有了一个概述，并且看到它是一个灵活的编辑器，具有丰富的扩展生态系统，为各种语言提供支持，并为编辑器添加额外的功能。
- en: One extension in particular is Remote-WSL, which allows the editor to be split
    in two with the user interface portion running in Windows and other functionality
    running in WSL (including file access, language services, and the debugger).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个扩展是Remote-WSL，它允许将编辑器分为两部分，用户界面部分在Windows中运行，其他功能在WSL中运行（包括文件访问、语言服务和调试器）。
- en: This capability enables you to work seamlessly with the rich functionality of
    Visual Studio Code (including extensions) but with your source code and applications
    all running in WSL. In this way, you can take full advantage of the tools and
    libraries available for your WSL distro.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能使您能够无缝地使用Visual Studio Code的丰富功能（包括扩展），但是您的源代码和应用程序都在WSL中运行。通过这种方式，您可以充分利用适用于您的WSL发行版的工具和库。
- en: In the next chapter, we will explore another of the Visual Studio Code Remote
    extensions, this time looking at running services in containers to automate development
    environments and provide isolation of dependencies.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索另一个Visual Studio Code Remote扩展，这次将研究在容器中运行服务以自动化开发环境并提供依赖项的隔离。
