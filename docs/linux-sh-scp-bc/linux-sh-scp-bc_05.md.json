["```\n#!/bin/sh\n#\n# 5/16/2017\n#\necho \"script1 - Linux Scripting Book\"\n\necho \"Enter 'q' to quit.\"\nrc=0\nwhile [ $rc -eq 0 ]\ndo\n echo -n \"Enter a string: \"\n read str\n echo \"str: $str\"\n if [ \"$str\" = \"q\" ] ; then\n  rc=1\n fi\ndone\n\necho \"End of script1\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 5/16/2017\n# Chapter 5 - Script 2\n#\nlinecnt=1                    # line counter\nloop=0                       # loop control var\nwhile [ $loop -eq 0 ]\ndo\n echo \"$linecnt  $RANDOM\"    # display next random number\n let linecnt++\n if [ $linecnt -eq $LINES ] ; then\n  linecnt=1\n  echo -n \"Press Enter to continue or q to quit: \"\n  read str                   # pause\n  if [ \"$str\" = \"q\" ] ; then\n   loop=1                    # end the loop\n  fi\n fi\ndone\n\necho \"End of script2\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 5/16/2017\n#\necho \"script3 - Linux Scripting Book\"\n\nif [ \"$1\" = \"--help\" ] ; then\n echo \"Usage: script3\"\n echo \" Queries the user for values and puts them into an array.\"\n echo \" Entering 'q' will halt the script.\"\n echo \" Running 'script3 --help' shows this Usage message.\"\n exit 255\nfi\n\nx=0                          # subscript into array\nloop=0                       # loop control variable\nwhile [ $loop -eq 0 ]\ndo\n echo -n \"Enter a value or q to quit: \"\n read value\n if [ \"$value\" = \"q\" ] ; then\n  loop=1\n else\n  array[$x]=\"$value\"\n  let x++\n fi\ndone\n\nlet size=x\nx=0\nwhile [ $x -lt $size ]\ndo\n echo \"array $x: ${array[x]}\"\n let x++\ndone\n\necho \"End of script3\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 5/16/2017\n#\necho \"script4 - Linux Scripting Book\"\n\nchecktermsize()\n{\n rc1=0                       # default is no error\n if [[ $LINES -lt $1 || $COLUMNS -lt $2 ]] ; then\n  rc1=1                      # set return code\n fi\n return $rc1\n}\n\nrc=0                         # default is no error\nchecktermsize 40 90          # check terminal size\nrc=$?\nif [ $rc -ne 0 ] ; then\n echo \"Return code: $rc from checktermsize\"\nfi\n\nexit $rc\n```", "```\n#!/bin/sh\n#\n# 5/27/2017\n#\necho \"script5 - Linux Scripting Book\"\n\n# Subroutines\ncls()\n{\n tput clear\n}\n\nmove()                       # move cursor to row, col\n{\n tput cup $1 $2\n}\n\nmovestr()                    # move cursor to row, col\n{\n tput cup $1 $2\n echo -n \"$3\"                # display string\n}\n\nchecktermsize()\n{\n rc1=0                       # default is no error\n if [[ $LINES -lt $1 || $COLUMNS -lt $2 ]] ; then\n  rc1=1                      # set return code\n fi\n return $rc1\n}\n\ninit()                       # set up the cursor position array\n{\n srow[0]=2;  scol[0]=7       # name\n srow[1]=4;  scol[1]=12      # address 1\n srow[2]=6;  scol[2]=12      # address 2\n srow[3]=8;  scol[3]=7       # city\n srow[4]=8;  scol[4]=37      # state\n srow[5]=8;  scol[5]=52      # zip code\n srow[6]=10; scol[6]=8       # email\n}\n\ndrawscreen()                 # main screen draw routine\n{\n cls                         # clear the screen\n movestr 0 25 \"Chapter 5 - Script 5\"\n movestr 2 1 \"Name:\"\n movestr 4 1 \"Address 1:\"\n movestr 6 1 \"Address 2:\"\n movestr 8 1 \"City:\"\n movestr 8 30 \"State:\"\n movestr 8 42 \"Zip code:\"\n movestr 10 1 \"Email:\"\n}\n\ngetdata()\n{\n x=0                         # array subscript\n rc1=0                       # loop control variable\n while [ $rc1 -eq 0 ]\n do\n  row=${srow[x]}; col=${scol[x]}\n  move $row $col\n  read array[x]\n  let x++\n  if [ $x -eq $sizeofarray ] ; then\n   rc1=1\n  fi\n done\n return 0\n}\n\nshowdata()\n{\n fn=0\n echo \"\"\n read -p \"Enter filename, or just Enter to skip: \" filename\n if [ -n \"$filename\" ] ; then       # if not blank\n  echo \"Writing to '$filename'\"\n fn=1                       # a filename was given\n fi\n echo \"\"                     # skip 1 line\n echo \"Data array contents: \"\n y=0\n while [ $y -lt $sizeofarray ]\n do\n  echo \"$y - ${array[$y]}\"\n  if [ $fn -eq 1 ] ; then\n   echo \"$y - ${array[$y]}\">>\"$filename\"\n  fi\n  let y++\n done\n return 0\n}\n\n# Code starts here\nsizeofarray=7                # number of array elements\n\nif [ \"$1\" = \"--help\" ] ; then\n echo \"Usage: script5 --help\"\n echo \" This script shows how to create an interactive screen program.\"\n exit 255\nfi\n\nchecktermsize 25 80\nrc=$?\nif [ $rc -ne 0 ] ; then\n echo \"Please size the terminal to 25x80 and try again.\"\n exit 1\nfi\n\ninit                         # initialize the screen array\ndrawscreen                   # draw the screen\ngetdata                      # cursor movement and data input routine\nshowdata                     # display the data\n\nexit 0\n```", "```\nread var\nWait for input of characters into the variable var.\nread -p \"string\" var\nDisplay contents of string, stay on the line, and wait for input.\n\nread -p \"Enter password:\" -s var\nDisplay \"Enter password:\", but do not echo the typing of the input. Note that a carriage return is not output after Enter is pressed.\n\nread -n 1 var\n```", "```\n#!/bin/sh\n#\n# 5/27/2017\n#\necho \"Chapter 5 - Script 6\"\n\nrc=0                         # return code\nwhile [ $rc -eq 0 ]\ndo\n read -p \"Enter value or q to quit: \" var\n echo \"var: $var\"\n if [ \"$var\" = \"q\" ] ; then\n  rc=1\n fi\ndone\n\nrc=0                         # return code\nwhile [ $rc -eq 0 ]\ndo\n read -p \"Password: \" -s var\n echo \"\"                     # carriage return\n echo \"var: $var\"\nif [ \"$var\" = \"q\" ] ; then\n  rc=1\n fi\ndone\n\necho \"Press some keys and q to quit.\"\nrc=0                         # return code\nwhile [ $rc -eq 0 ]\ndo\n read -n 1 -s var            # wait for 1 char, does not output it\n echo $var                   # output it here\n if [ \"$var\" = \"q\" ] ; then\n  rc=1\n fi\ndone\n\nexit $rc\n```", "```\n#!/bin/sh\n#\n# 5/16/2017\n#\necho \"script7 - Linux Scripting Book\"\n\ntrap catchCtrlC INT          # Initialize the trap\n\n# Subroutines\ncatchCtrlC()\n{\n echo \"Entering catchCtrlC routine.\"\n}\n\n# Code starts here\n\necho \"Press Ctrl-C to trigger the trap, 'Q' to exit.\"\n\nloop=0\nwhile [ $loop -eq 0 ]\ndo\n read -t 1 -n 1 str          # wait 1 sec for input or for 1 char\n rc=$?\n\n if [ $rc -gt 128 ] ; then\n  echo \"Timeout exceeded.\"\n fi\n\n if [ \"$str\" = \"Q\" ] ; then\n  echo \"Exiting the script.\"\n  loop=1\n fi\n\ndone\n\nexit 0\n```", "```\n guest1 $ ps auxw | grep script7\n guest1   17813  0.0  0.0 106112  1252 pts/32   S+   17:23   0:00 /bin/sh ./script7\n guest1   17900  0.0  0.0 103316   864 pts/18   S+   17:23   0:00 grep script7\n guest1   29880  0.0  0.0  10752  1148 pts/17   S+   16:47   0:00 kw script7\n guest1 $ kill -9 17813\n guest1 $\n```", "```\n#!/bin/sh\n#\n# 5/16/2017\n#\necho \"script8 - Linux Scripting Book\"\n\n# Subroutines\ncls()\n{\n tput clear\n}\n\nmove()                       # move cursor to row, col\n{\n tput cup $1 $2\n}\n\nmovestr()                    # move cursor to row, col\n{\n tput cup $1 $2\n echo -n \"$3\"                # display string\n}\n\ninit()                       # set initial values\n{\n minrow=1                    # terminal boundaries\n maxrow=24\n mincol=0\n maxcol=79\n startrow=1\n startcol=0\n}\n\nrestart()                    # clears screen, sets initial cursor position\n{\n cls\n movestr 0 0 \"Arrow keys move cursor. 'x' to draw, 'd' to erase, '+' to restart, 'Q' to quit.\"\n row=$startrow\n col=$startcol\n\n draw=0                      # default is not drawing\n drawchar=\"\"\n}\n\nchecktermsize2()             # must be the specified size\n{\n rc1=0                       # default is no error\n if [[ $LINES -ne $1 || $COLUMNS -ne $2 ]] ; then\n  rc1=1                      # set return code\n fi\n return $rc1\n}\n\n# Code starts here\nif [ \"$1\" = \"--help\" ] ; then\n echo \"Usage: script7 --help\"\n echo \" This script shows the basics on how to create a game.\"\n echo \" Use the arrow keys to move the cursor.\"\n echo \" Press c to restart and Q to quit.\"\n exit 255\nfi\n\nchecktermsize2 25 80         # terminal must be this size\nrc=$?\nif [ $rc -ne 0 ] ; then\n echo \"Please size the terminal to 25x80 and try again.\"\n exit 1\nfi\n\ninit                         # initialize values\nrestart                      # set starting cursor pos and clear screen\n\nloop=1\nwhile [ $loop -eq 1 ]\ndo\n move $row $col              # position the cursor here\n read -n 1 -s ch\n\n case \"$ch\" in\n  A) if [ $row -gt $minrow ] ; then\n      let row--\n     fi\n     ;;\n  B) if [ $row -lt $maxrow ] ; then\n      let row++\n     fi\n     ;;\n  C) if [ $col -lt $maxcol ] ; then\n      let col++\n     fi\n     ;;\n  D) if [ $col -gt $mincol ] ; then\n      let col--\n     fi\n     ;;\n  d) echo -n \"\"             # delete char\n     ;;\n  x) if [ $col -lt $maxcol ] ; then\n      echo -n \"X\"            # put char\n      let col++\n     fi\n     ;;\n  +) restart ;;\n  Q) loop=0 ;;\n esac\ndone\n\nmovestr 24 0 \"Script completed normally.\"\necho \"\"                      # carriage return\n\nexit 0\n```"]