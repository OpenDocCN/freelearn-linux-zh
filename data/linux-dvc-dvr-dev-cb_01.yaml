- en: Installing the Development System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装开发系统
- en: In this chapter, we will present and set up our working platform. In fact, even
    if we write and then test our own device drivers on our working PC, it is recommended
    to use a second device to test the code. This is because we're going to work in
    the kernel space where even a little bug can cause severe malfunctioning! Also,
    using a platform where several kinds of peripherals are available allows us to
    test a large variety of devices that are not always available on a PC. Of course,
    you are free to use your own system to write and test your drivers but, in this
    case, you should take care of the modifications needed to fit your board specifications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍并设置我们的工作平台。实际上，即使我们在工作PC上编写并测试自己的设备驱动程序，建议使用第二台设备来测试代码。这是因为我们将在内核空间工作，即使有一个小错误也可能导致严重的故障！此外，使用一个平台，可以测试各种外设，这些外设并不总是在PC上可用。当然，您可以自由选择使用自己的系统来编写和测试驱动程序，但在这种情况下，您需要注意适应您的板规格所需的修改。
- en: 'In this book, I''m going to use the **Marvell ESPRESSObin** system, which is
    a powerful **Advanced RISC Machines **(**ARM**) 64-bit machine with a lot of interesting
    features. In the following figure, you can see the ESPRESSObin alongside a credit
    card and can gain an idea about the real dimensions of the board:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用**Marvell ESPRESSObin**系统，这是一台功能强大的**ARM** 64位机器，具有许多有趣的功能。在下图中，您可以看到ESPRESSObin与信用卡并排，可以了解到板的真实尺寸：
- en: '![](img/4cd2a298-bcef-4ffd-8782-d274bab23e70.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cd2a298-bcef-4ffd-8782-d274bab23e70.png)'
- en: My board is the v5 release of ESPRESSObin while the latest version at the time
    of writing (announced on September 2018) is v7, so the reader should be able to
    get this new release by the time this book is published. The new ESPRESSObin v7
    will feature 1GB DDR4 and 2GB DDR4 configurations (while v5 has DDR3 RAM chips),
    and a new 1.2GHz chipset will replace the currently sold configurations, which
    sports 800MHz and 1GHz CPU frequency limits. Even by taking a quick look at the
    new board layout, we see that a single SATA connector has taken the place of the
    existing two-pieces combination of SATA power and interface, the LED layout is
    now rearranged in a row, and an on-board eMMC is now in place. Moreover, this
    new revision will ship with an optional 802.11ac + Bluetooth 4.2 mini PCIe Wi-Fi
    card, which is sold separately.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是ESPRESSObin的v5版本，而在撰写本书时最新版本（于2018年9月宣布）是v7，因此读者应该能够在本书出版时获得这个新版本。新的ESPRESSObin
    v7将提供1GB DDR4和2GB DDR4配置（而v5使用DDR3 RAM芯片），并且新的1.2GHz芯片组将取代目前销售的配置，其CPU频率限制为800MHz和1GHz。即使快速查看新的板布局，我们可以看到单个SATA连接器取代了现有的SATA电源和接口的组合，LED布局现在重新排列成一行，并且现在放置了一个内置的eMMC。此外，这个新版本将配备一个可选的802.11ac
    +蓝牙4.2迷你PCIe无线网络卡，需另外购买。
- en: Lastly, you will now have the option to order your v7 ESPRESSObin with a complete
    enclosure. This product has FCC and CE certifications to help to enable mass deployment.
    Further information regarding the revision v7 (and v5) can be found at [http://wiki.espressobin.net/tiki-index.php?page=Quick+User+Guide](http://wiki.espressobin.net/tiki-index.php?page=Quick+User+Guide).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您现在可以选择订购带有完整外壳的v7 ESPRESSObin。该产品已获得FCC和CE认证，有助于实现大规模部署。有关修订版v7（和v5）的更多信息，请访问[http://wiki.espressobin.net/tiki-index.php?page=Quick+User+Guide](http://wiki.espressobin.net/tiki-index.php?page=Quick+User+Guide)。
- en: 'In order to test our new drivers, we will cover the following recipes in this
    first chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的新驱动程序，我们将在本章中涵盖以下内容：
- en: Setting up the host machine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置主机
- en: Working with the serial console
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用串行控制台
- en: Configuring and building the kernel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和构建内核
- en: Setting up the target machine
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标机器
- en: Doing native compiling on foreign hardware
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在外部硬件上进行本地编译
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Following are some interesting URLs where we can get useful technical information
    regarding the board:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的技术信息的网址，我们可以在这些网址上获取有关板的技术信息：
- en: 'The home page: [http://espressobin.net/](http://espressobin.net/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页：[http://espressobin.net/](http://espressobin.net/)
- en: 'The documentation wiki: [http://wiki.espressobin.net/tiki-index.php](http://wiki.espressobin.net/tiki-index.php)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档维基：[http://wiki.espressobin.net/tiki-index.php](http://wiki.espressobin.net/tiki-index.php)
- en: 'Forums: [http://espressobin.net/forums/](http://espressobin.net/forums/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 论坛：[http://espressobin.net/forums/](http://espressobin.net/forums/)
- en: 'Taking a look at the technical specifications at [http://espressobin.net/tech-spec/](http://espressobin.net/tech-spec/),
    we get the following information where we can see what the ESPRESSObin v5 can
    offer in terms of computational power, storage, networking, and expandability:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[http://espressobin.net/tech-spec/](http://espressobin.net/tech-spec/)上的技术规格，我们得到以下信息，可以看到ESPRESSObin
    v5在计算能力、存储、网络和可扩展性方面的优势：
- en: '| **System on chip** (**SoC**) | Marvell Armada 3700LP (88F3720) dual core
    ARM Cortex A53 processor up to 1.2GHz |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **系统芯片** (**SoC**) | Marvell Armada 3700LP (88F3720) 双核 ARM Cortex A53 处理器，最高1.2GHz
    |'
- en: '| System memory | 1 GB DDR3 or optional 2GB DDR3 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 系统内存 | 1GB DDR3或可选2GB DDR3 |'
- en: '| Storage | 1x SATA interface 1x micro SD card slot with footprint for an optional
    4GB EMMC |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 存储 | 1x SATA接口 1x微型SD卡槽，可选4GB EMMC |'
- en: '| Network connectivity | 1x Topaz Networking Switch 2x GbE Ethernet LAN'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '| 网络连接 | 1x Topaz网络交换机 2x GbE以太网LAN'
- en: 1x Ethernet WAN
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1x 以太网WAN
- en: 1x MiniPCIe slot for wireless/BLE peripherals |
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 1x 用于无线/蓝牙低功耗外设的MiniPCIe插槽 |
- en: '| USB | 1x USB 3.0 1x USB 2.0'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '| USB | 1x USB 3.0 1x USB 2.0'
- en: 1x micro USB port |
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 1x 微型USB端口 |
- en: '| Expansion | 2x 46-pin GPIO headers for accessories and shields with I2C,
    GPIOs, PWM, UART, SPI, MMC, and so on. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 扩展 | 2个46针GPIO头，用于连接I2C、GPIO、PWM、UART、SPI、MMC等附件和扩展板。 |'
- en: '| Misc | Reset button and JTAG interface |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 杂项 | 复位按钮和JTAG接口 |'
- en: '| Power supply | 12V DC jack or 5V via micro USB port |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 电源供应 | 12V DC插孔或通过微型USB端口5V |'
- en: '| Power consumption | Less than 1W thermal dissipation at 1 GHz |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 功耗 | 1GHz时小于1W的热耗散 |'
- en: 'In particular, the following screenshot shows the top view of the Marvell ESPRESSObin
    v5 (from now on, please take into account that I''m not going to explicitly add
    "v5" anymore):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，下一张截图显示了Marvell ESPRESSObin v5的顶部视图（从现在开始，请注意我不会再明确添加“v5”）：
- en: '![](img/c50fb9d8-fdad-4677-ab8b-5931067dcbb2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c50fb9d8-fdad-4677-ab8b-5931067dcbb2.png)'
- en: 'In the preceding screenshot, we can see the following components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到以下组件：
- en: The power connector (12V DC jack)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源连接器（12V DC插孔）
- en: The reset switch
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置开关
- en: The micro USB device port (serial console)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微型USB设备端口（串行控制台）
- en: The Ethernet ports
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网端口
- en: The USB host ports
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB主机端口
- en: 'The next screenshot shows the bottom view of the board where the microSD slot
    is located; this is where we should plug in the microSD we''re going to create
    later on in this chapter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了板子的底部视图，微型SD卡槽位于其中；这是我们将在本章后面创建的微型SD卡的插入位置：
- en: '![](img/2a93e27f-64bf-41e2-99b0-d6164c1bc1db.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a93e27f-64bf-41e2-99b0-d6164c1bc1db.png)'
- en: In this book, we'll see how we can manage (and reinstall) a complete Debian
    distribution, something that will allow us to have a wide set of ready-to-run
    software packages, as in a normal PC (in fact, the Debian ARM64 version is equivalent
    to the Debian x86 version). Afterward, we will develop our device drivers for
    the board, and then, when possible, we will test them with real devices connected
    to the ESPRESSObin itself. A little tutorial about how to set up the host system
    is also present in this chapter, and you can use it to set up a GNU/Linux-based
    working machine or a dedicated virtual one.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将看到如何管理（和重新安装）完整的Debian发行版，这将使我们能够拥有一系列准备运行的软件包，就像在普通PC上一样（事实上，Debian
    ARM64版本等同于Debian x86版本）。之后，我们将为板载开发设备驱动程序，然后在可能的情况下，将它们与连接到ESPRESSObin本身的真实设备进行测试。本章还包括有关如何设置主机系统的简短教程，您可以使用它来设置基于GNU/Linux的工作机器或专用虚拟机。
- en: The code and other files used in this chapter can be downloaded from GitHub
    at [https://github.com/giometti/linux_device_driver_development_cookbook/tree/master/chapter_01](https://github.com/giometti/linux_device_driver_development_cookbook/tree/master/chapter_01).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码和其他文件可以从GitHub上下载：[https://github.com/giometti/linux_device_driver_development_cookbook/tree/master/chapter_01](https://github.com/giometti/linux_device_driver_development_cookbook/tree/master/chapter_01)。
- en: Setting up the host machine
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置主机机器
- en: As every good device driver developer knows, a host machine is absolutely necessary.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如每个优秀的设备驱动程序开发者所知，主机机器是绝对必要的。
- en: Even if the embedded devices are getting more powerful nowadays (and the ESPRESSObin
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 即使嵌入式设备如今变得更加强大（以及ESPRESSObin
- en: is one of these), there are some resource-consuming tasks where a host machine
    can help.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 是其中之一），主机机器可以帮助处理一些资源密集型的任务。
- en: That's why, in this section, we're going to show how to set up our host machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本节中，我们将展示如何设置我们的主机机器。
- en: The host machine we decide to use could be a normal PC or a virtualized one—they
    are equivalent—but the important thing is that it must run a GNU/Linux-based OS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定使用的主机机器可以是普通PC或虚拟机——它们是等效的——但重要的是它必须运行基于GNU/Linux的操作系统。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this book, I will use an Ubuntu 18.04 LTS based system but you can decide
    to try to replicate some settings and installation commands that we will use during
    the course of this book into another major Linux distribution, with little effort
    for a Debian derivative, or in a bit more of a complicated manner in the case
    of non-Debian derivative distributions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用基于Ubuntu 18.04 LTS的系统，但您可以决定尝试在另一个主要的Linux发行版中复制一些设置和安装命令，对于Debian衍生版来说，这将需要很少的努力，或者在非Debian衍生版发行版中需要更多的复杂操作。
- en: I'm not going to show how to install a fresh Ubuntu system on a PC nor on a
    virtualized machine since it's a really easy task for a real programmer; however,
    as the last step of this chapter (the *Doing native compiling on foreign hardware*
    recipe), I will introduce, with detailed steps about how to install it, an interesting
    cross-platform environment that proved useful to compile foreign target code on
    the host machine as we were on the target. This procedure is very useful when
    we need several different OSes running on your development PC.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算展示如何在PC上或虚拟机上安装全新的Ubuntu系统，因为对于真正的程序员来说，这是一项非常容易的任务；然而，作为本章的最后一步（*在外部硬件上进行本地编译*配方），我将介绍一个有趣的跨平台环境，并详细介绍如何安装它，这个环境被证明对于在主机机器上编译外部目标代码非常有用。当我们需要在开发PC上运行多个不同的操作系统时，这个过程非常有用。
- en: So, at this point, the reader should have their own PC running (natively or
    virtualized) a fresh installed Ubuntu 18.04 LTS OS.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，此时，读者应该已经拥有自己的PC运行（本地或虚拟化）全新安装的Ubuntu 18.04 LTS操作系统。
- en: The main usage of a host PC is to edit and then cross-compile our new device
    drivers and to manage our target device via the serial console, to create its
    root filesystem, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 主机PC的主要用途是编辑和交叉编译我们的新设备驱动程序，并通过串行控制台管理我们的目标设备，创建其根文件系统等等。
- en: In order to do it properly, we need some basic tools; some of them are general
    while others depend on the specific platform onto which we are going to write
    our drivers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确执行此操作，我们需要一些基本工具；其中一些是通用的，而其他一些取决于我们将要编写驱动程序的特定平台。
- en: General tools are surely an editor, a version control system, and a compiler
    and its related components, while specific platform tools are essentially the
    cross-compiler and its related components (on some platforms we may need additional
    tools but our mileage may vary and, in any case, each manufacturer will give us
    all of the needed requirements for a comfortable compilation environment).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通用工具肯定包括编辑器、版本控制系统和编译器及其相关组件，而特定平台工具主要是交叉编译器及其相关组件（在某些平台上，我们可能需要额外的工具，但我们的需求可能有所不同，在任何情况下，每个制造商都会为我们提供所有所需的舒适编译环境）。
- en: 'About the editor: I''m not going to spend any words on it because the reader
    can use whatever they want (regarding myself, for example, I''m still programming
    with vi editor) but regarding others tools, I''ll have to be more specific.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关于编辑器：我不打算在上面浪费任何言语，因为读者可以使用他们想要的任何编辑器（例如，我仍然使用vi编辑器进行编程），但是对于其他工具，我将不得不更具体。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now that our GNU/Linux distribution is up and running on our host PC we can
    start to install some programs we''re going to use in this book:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的GNU/Linux发行版已经在我们的主机PC上运行起来了，我们可以开始安装一些我们在本书中要使用的程序：
- en: 'First of all, let''s install the basic compiling tools:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们安装基本的编译工具：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you know already, the `sudo` command is used to execute a command as a privileged
    user. It should be already present in your system, otherwise you can install it
    by using the `apt install sudo` command as the root user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经知道的那样，`sudo`命令用于以特权用户身份执行命令。它应该已经存在于您的系统中，否则您可以使用`apt install sudo`命令作为root用户进行安装。
- en: 'Next, we have to test the compiling tools. We should be able to compile a C
    program. As a simple test, let''s use the following standard *Hello World* code
    stored in the `helloworld.c` file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须测试编译工具。我们应该能够编译一个C程序。作为一个简单的测试，让我们使用存储在`helloworld.c`文件中的以下标准*Hello
    World*代码：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Remember that code can be downloaded from our GitHub repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，代码可以从我们的GitHub存储库中下载。
- en: 'Now, we should be able to compile it by using the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该能够通过使用以下命令来编译它：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding command, we used both the compiler and the `make` tool, which
    is required to compile every Linux driver in a comfortable and reliable manner.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的命令中，我们同时使用了编译器和`make`工具，这是在舒适和可靠的方式下编译每个Linux驱动程序所必需的。
- en: You can get more information regarding `make` by taking a look at [https://www.gnu.org/software/make/](https://www.gnu.org/software/make/),
    and for `gcc`, you can go to [https://www.gnu.org/software/gcc/](https://www.gnu.org/software/gcc/).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看[https://www.gnu.org/software/make/](https://www.gnu.org/software/make/)来获取有关`make`的更多信息，对于`gcc`，您可以转到[https://www.gnu.org/software/gcc/](https://www.gnu.org/software/gcc/)。
- en: 'Finally, we can test it on the host PC, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以在主机PC上进行测试，如下所示：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next step is to install the cross-compiler. Since we''re going to work
    with an ARM64 system, we need a cross-compiler and its related tools. To install
    them, we simply use the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装交叉编译器。由于我们将使用ARM64系统，我们需要一个交叉编译器及其相关工具。要安装它们，我们只需使用以下命令：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we can also use an external toolchain as reported in the ESPRESSObin
    wiki at [http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Toolchain](http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Toolchain);
    however, the Ubuntu toolchain works perfectly!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还可以使用ESPRESSObin维基中报告的外部工具链，网址为[http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Toolchain](http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Toolchain)；但是，Ubuntu工具链运行得很完美！
- en: 'When the installation is complete, test our new cross-compiler by using the
    preceding *Hello World* program, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，通过使用上述*Hello World*程序来测试我们的新交叉编译器，如下所示：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that I've removed the previously compiled `helloworld` program in order
    to be able to correctly compile this new version. To do so, I used the `mv helloworld
    helloworld.x86_64` command due to the fact I'll need the x86 version again.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我已经删除了先前编译的`helloworld`程序，以便能够正确编译这个新版本。为此，我使用了`mv helloworld helloworld.x86_64`命令，因为我将再次需要x86版本。
- en: Also, note that since Ubuntu doesn't automatically create the standard cross-compiler
    name, `aarch64-linux-gnu-gcc`, we have to do it manually by using the preceding
    `ln` command before executing `make`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，由于Ubuntu不会自动创建标准的交叉编译器名称`aarch64-linux-gnu-gcc`，我们必须在执行`make`之前手动执行上述`ln`命令。
- en: 'OK, now we can verify that newly created version of the `helloworld` program
    for ARM64 by using the following `file` command. This will point out which platform
    the program is compiled for:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好了，现在我们可以通过使用以下`file`命令来验证为ARM64新创建的`helloworld`程序的版本。这将指出程序编译为哪个平台：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we again use the `file` command on the previously renamed version, `helloworld.x86_64`,
    we get the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次在先前重命名的版本`helloworld.x86_64`上使用`file`命令，我们会得到以下结果：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To test whether this new release is really for the ARM64 platform, we can use
    **QEMU**, which is an open source and generic machine emulator and virtualizer
    that is able to execute foreign code on the running platform. To install it, we
    can use `apt` command as in the preceding code, specifying the `qemu-user-static`
    package:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这个新版本是否真的是为ARM64平台而编译的，我们可以使用**QEMU**，这是一个开源的通用机器模拟器和虚拟化程序，能够在运行平台上执行外部代码。要安装它，我们可以使用`apt`命令，如上述代码中所示，指定`qemu-user-static`包：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we can execute our ARM64 program:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以执行我们的ARM64程序：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To get further information about QEMU, a good staring point is its home page
    at [https://www.qemu.org/](https://www.qemu.org/).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关QEMU的更多信息，一个很好的起点是它的主页[https://www.qemu.org/](https://www.qemu.org/)。
- en: 'The next step is to install the version control system. We must install the
    version control system used for the Linux project, that is, `git`. To install
    it, we can use the following command in a similar manner as before:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装版本控制系统。我们必须安装用于Linux项目的版本控制系统，即`git`。要安装它，我们可以像之前一样使用以下命令：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If everything works well, we should be able to execute it as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，我们应该能够按如下方式执行它：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this book, I'm going to explain every `git` command used but for complete
    knowledge of this powerful tool, I suggest you start reading [https://git-scm.com/](https://git-scm.com/).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将解释每个使用的`git`命令，但是为了完全了解这个强大的工具，我建议您开始阅读[https://git-scm.com/](https://git-scm.com/)。
- en: See also
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For further information regarding Debian's packages management, you can surf
    the internet, but a good starting point is at [https://wiki.debian.org/Apt,](https://wiki.debian.org/Apt)
    while regarding the compiling tools (`gcc`, `make`, and other GNU software), the
    best documentation is at [https://www.gnu.org/software/](https://www.gnu.org/software/).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Debian软件包管理的更多信息，您可以在互联网上搜索，但一个很好的起点是[https://wiki.debian.org/Apt，](https://wiki.debian.org/Apt)而有关编译工具（`gcc`，`make`和其他GNU软件）的最佳文档在[https://www.gnu.org/software/](https://www.gnu.org/software/)。
- en: Then, the best place for better documentation about `git` is at [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2),
    where the wonderful book *Pro Git* is available online!
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，有关`git`的更好文档的最佳位置在[https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)，那里有在线提供的精彩书籍*Pro
    Git*！
- en: Working with the serial console
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用串行控制台
- en: As already stated (and as any real programmer of embedded devices knows), the
    serial console is a must-have during the device drivers development stages! So,
    let's see how we can get access to our ESPRESSObin through its serial console.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如已经说明的（以及任何嵌入式设备的真正程序员所知道的），串行控制台在设备驱动程序开发阶段是必不可少的！因此，让我们看看如何通过其串行控制台访问我们的ESPRESSObin。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As shown in the screenshot in the *Technical requirements* section, a micro
    USB connector is available and it's directly connected with ESPRESSObin's serial
    console. So, using a proper USB cable, we can connect it to our host PC.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如*技术要求*部分的截图所示，有一个微型USB连接器可用，并且直接连接到ESPRESSObin的串行控制台。因此，使用适当的USB电缆，我们可以将其连接到我们的主机PC。
- en: If all connections are OK, we can execute any serial Terminal emulator to see
    data from the serial console. Regarding this tool, I have to state that, as editor
    program, we can use whatever we prefer. However, I'm going to show how to install
    two of the more used Terminal emulation programs—`minicom` and `screen`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有连接都正常，我们可以执行任何串行终端仿真器来查看串行控制台的数据。关于这个工具，我必须声明，作为编辑程序，我们可以使用任何我们喜欢的。但是，我将展示如何安装两个更常用的终端仿真程序——`minicom`和`screen`。
- en: Note that this tool is not strictly required and its usage depends on the platform
    you're going to work on; however, in my humble opinion, this is the most powerful
    development and debugging tool ever! So, you definitely need it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此工具并非绝对必需，其使用取决于您将要使用的平台；但是，在我看来，这是有史以来最强大的开发和调试工具！因此，您绝对需要它。
- en: 'To install `minicom`, use the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`minicom`，请使用以下命令：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, to install the Terminal emulator named `screen`**,** we just have to replace
    `minicom` string with the `screen` packet name, as shown in the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要安装名为`screen`的终端仿真器**，**我们只需将`minicom`字符串替换为`screen`数据包名称，如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Both of them need a serial port to work on and the invocation command is quite
    similar. For brevity, I'm going to report their usage to get connected with the
    ESPRESSObin only; however, for further information about them, you should refer
    to their man pages (use `man minicom` and `man screen` to show them).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都需要一个串行端口来工作，并且调用命令非常相似。为简洁起见，我将仅报告它们与ESPRESSObin连接的用法；但是，有关它们的更多信息，您应该参考它们的手册页（使用`man
    minicom`和`man screen`来显示它们）。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To test the serial connection with our target system we can do the following
    steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试与目标系统的串行连接，我们可以执行以下步骤：
- en: 'First of all, we have to locate the right serial port. Since the ESPRESSObin
    uses an USB emulated serial port (at 115,200 baud rate), usually our target port
    is named `ttyUSB0` (but your mileage may vary, so let''s verify it before continuing)
    so the `minicom` command we have to use to get connected with the ESPRESSObin
    serial console is the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须找到正确的串行端口。由于ESPRESSObin使用USB模拟串行端口（波特率为115,200），通常我们的目标端口被命名为`ttyUSB0`（但您的情况可能有所不同，因此在继续之前让我们验证一下），因此我们必须使用以下`minicom`命令来连接ESPRESSObin串行控制台：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To correctly get access to the serial console, we may need proper privileges.
    In fact, we may try to execute the preceding `minicom` command, and we don''t
    get an output! This is because the `minicom` command silently exits if we don''t
    have enough privileges to get access to the port. We can verify our access to
    privileges by simply using another command on it, as shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确访问串行控制台，我们可能需要适当的权限。实际上，我们可以尝试执行前面的`minicom`命令，但是我们没有输出！这是因为如果我们没有足够的权限访问端口，`minicom`命令会悄悄退出。我们可以通过简单地使用另一个命令来验证我们的权限，如下所示：
- en: '**`$ cat /dev/ttyUSB0`**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ cat /dev/ttyUSB0`**'
- en: '`cat: /dev/ttyUSB0: Permission denied`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat: /dev/ttyUSB0: Permission denied`'
- en: 'In this case, the `cat` command perfectly tells us what''s wrong so we can
    fix this issue using `sudo` or, even better, by properly adding our system''s
    user to the right group as shown here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`cat`命令完美地告诉我们出了什么问题，因此我们可以使用`sudo`来解决这个问题，或者更好的是，通过正确将我们系统的用户添加到正确的组，如下所示：
- en: '**`$ ls -l /dev/ttyUSB0`** `crw-rw---- 1 root dialout 188, 0 Jan 12 23:06 /dev
    /ttyUSB0`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ ls -l /dev/ttyUSB0`** `crw-rw---- 1 root dialout 188, 0 Jan 12 23:06 /dev
    /ttyUSB0`'
- en: '**`$ sudo adduser $LOGNAME dialout`**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ sudo adduser $LOGNAME dialout`**'
- en: Then, we log out and log in again, and we can access the serial devices without
    any problem.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们注销并重新登录，就可以无问题地访问串行设备了。
- en: 'The equivalent command by using `screen` is reported as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`screen`的等效命令如下所示：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that, on `minicom`, I didn't specify the serial communication options (baud
    rate, parity, and so on) while, for `screen`, I've added the baud rate on the
    command line; this is because my default `minicom` configuration automatically
    uses correct communication options while `screen` uses 9,600 baud as a default
    baud rate. Please refer to the program man pages for further information about
    how to do this setting in order to fit your needs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`minicom`上，我没有指定串行通信选项（波特率，奇偶校验等），而对于`screen`，我在命令行上添加了波特率；这是因为我的默认`minicom`配置会自动使用正确的通信选项，而`screen`使用9,600波特率作为默认波特率。有关如何进行此设置以适应您的需求的进一步信息，请参阅程序手册页。
- en: 'If everything works well, after executing your Terminal emulator on the right
    serial port, turn on our ESPRESSObin (simply by plugging in the power). We should
    see the following output on our Terminal:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，在正确的串行端口上执行终端仿真器后，打开我们的ESPRESSObin（只需插入电源）。我们应该在终端上看到以下输出：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information about how to get connected with the ESPRESSObin serial
    port, you can take a look at its wiki section about serial connections at [http://wiki.espressobin.net/tiki-index.php?page=Serial+connection+-+Linux](http://wiki.espressobin.net/tiki-index.php?page=Serial+connection+-+Linux).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关如何连接ESPRESSObin串行端口的更多信息，您可以查看其关于串行连接的wiki部分[http://wiki.espressobin.net/tiki-index.php?page=Serial+connection+-+Linux](http://wiki.espressobin.net/tiki-index.php?page=Serial+connection+-+Linux)。
- en: Configuring and building the kernel
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和构建内核
- en: 'Now, it''s time to download the kernel sources and then configure and build
    them. This step is needed for several reasons: the first one is that we need a
    kernel for our ESPRESSObin in order to boot an OS, and the second one is that
    we need a configured kernel sources tree to compile our drivers into.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候下载内核源代码，然后配置和构建它们了。这一步是必需的，原因有几个：第一个是我们需要一个内核来引导我们的ESPRESSObin以启动操作系统，第二个是我们需要一个配置好的内核源树来编译我们的驱动程序。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Since our ESPRESSObin is now supported into vanilla kernel since the 4.11 release,
    we can get Linux sources by using the following `git` command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的ESPRESSObin现在已经支持到vanilla内核自4.11版本以来，我们可以使用以下`git`命令获取Linux源代码：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command will take a lot of time to finish so I would suggest you take a
    break by drinking your favorite cup of coffee (as real programmers should do).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令需要很长时间才能完成，所以我建议您喝杯您最喜欢的咖啡休息一下（就像真正的程序员应该做的那样）。
- en: 'When finished, we can enter into the `linux` directory to see the Linux sources:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以进入`linux`目录查看Linux源代码：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'These sources are related to the latest kernel release that could be unstable,
    so to be sure that we''re using a stable kernel release (or a *long-term release*),
    let''s extract release 4.18, which is the current stable release at time of writing
    this chapter, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些源代码与最新的内核发布相关，可能不稳定，因此为了确保我们使用的是稳定的内核发布（或*长期发布*），让我们提取4.18版本，这是撰写本章时的当前稳定发布，如下所示：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Before starting the compilation, we have to configure the kernel and our compiling
    environment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编译之前，我们必须配置内核和我们的编译环境。
- en: 'The last task is quite easy and it consists of executing the following environment
    variables assignments:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个任务非常简单，它包括执行以下环境变量分配：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we can select the ESPRESSObin standard kernel configuration by simply
    using the following command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过简单地使用以下命令选择ESPRESSObin标准内核配置：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Depending on the kernel release you're using, the default configuration file
    may be also called `mvebu_defconfig` or either `mvebu_v5_defconfig` or `mvebu_v7_defconfig`.
    So, please take a look into the `linux/arch/arm64/configs/` directory in order
    to see which file is present that best suits your needs.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您使用的内核版本，默认配置文件也可能称为`mvebu_defconfig`，也可能称为`mvebu_v5_defconfig`或`mvebu_v7_defconfig`。因此，请查看`linux/arch/arm64/configs/`目录，以查看哪个文件最适合您的需求。
- en: 'In my system, I have the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统中，我有以下内容：
- en: '**`$ ls linux/arch/arm64/configs/`**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ ls linux/arch/arm64/configs/`**'
- en: '`defconfig`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`defconfig`'
- en: 'If we wish to modify this default configuration, we can execute the `make menuconfig`
    command, which will show us a pretty menu where we can enter our modifications
    in order to fit our needs. The following screenshot shows how the kernel configuration
    menu appears on the Terminal:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们希望修改此默认配置，可以执行`make menuconfig`命令，这将显示一个漂亮的菜单，我们可以在其中输入我们的修改以满足我们的需求。以下屏幕截图显示了内核配置菜单在终端上的外观：
- en: '![](img/0b6ceb4e-3a6e-4ace-b9f6-6eca264c1138.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b6ceb4e-3a6e-4ace-b9f6-6eca264c1138.png)'
- en: Before continuing, we must be sure that the **Distributed Switch Architecture**
    (**DSA**) is enabled into the kernel, otherwise we're not able to use the Ethernet
    ports at all! This is because the ESPRESSObin has a complex (and really powerful)
    internal network switch that must be managed by using this special support.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，我们必须确保**分布式交换架构**（**DSA**）已经在内核中启用，否则我们将无法使用以太网端口！这是因为ESPRESSObin具有一个复杂（而且非常强大）的内部网络交换机，必须使用此特殊支持进行管理。
- en: For further information regarding the DSA, you can start reading the `linux/Documentation/networking/dsa/dsa.txt`
    file, located in the kernel sources we're currently working on.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有关DSA的更多信息，您可以开始阅读`linux/Documentation/networking/dsa/dsa.txt`文件，该文件位于我们目前正在处理的内核源代码中。
- en: 'To enable DSA support, just navigate into the kernel menu at Networking support.
    Go to Networking options and, at the end, enable the entry Distributed Switch
    Architecture support. After that, we have to go back to the menu''s top level
    and then select these entries: Device Drivers | Network device support | Distributed
    Switch Architecture drivers and then enable Marvell 88E6xxx Ethernet switch fabric
    support, which is the ESPRESSObin''s on-board switch chip.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用DSA支持，只需在内核菜单中导航至网络支持。转到网络选项，最后启用分布式交换架构支持条目。之后，我们必须返回到菜单的顶层，然后选择这些条目：设备驱动程序
    | 网络设备支持 | 分布式交换架构驱动程序，然后启用Marvell 88E6xxx以太网交换芯片支持，这是ESPRESSObin的内置交换芯片。
- en: Remember that, to enable a kernel feature as a module or a built-in, you need
    to highlight the desired feature and then press the spacebar until the character
    inside the <> characters changes to * (which means built-in, that is, <*>) or
    to M (which means module, that is, <M>).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，要将内核功能启用为模块或内置，您需要突出显示所需的功能，然后按空格键，直到<>字符内的字符更改为*（表示内置，即<*>)或M（表示模块，即<M>)。
- en: Note that, to enable DSA as a built-in instead of as a module, we have to disable
    802.1d Ethernet Bridging support (that is, the entry just above).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要将DSA作为内置启用而不是作为模块，我们必须禁用802.1d以太网桥接支持（即上面的条目）。
- en: 'Well, after all kernel settings are in place, we can start the kernel compilation
    by using the following `make` command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好了，所有内核设置都就绪后，我们可以使用以下`make`命令开始内核编译：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, as the downloading command, this command will need a lot of time to
    finish, so let me suggest you take another break. However, in order to speed up
    the compilation process, you may try using the `-j` option argument in order to
    tell `make` to use several simultaneous process to compile the code. For example,
    on my machine, having eight CPU threads, I use the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 与下载命令一样，此命令将需要很长时间才能完成，因此让我建议您再休息一下。但是，为了加快编译过程，您可以尝试使用`-j`选项参数，告诉`make`使用多个并行进程来编译代码。例如，在我的机器上，有八个CPU线程，我使用以下命令：
- en: '**`$ make -j8 Image dtbs modules`**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ make -j8 Image dtbs modules`**'
- en: 'So, let''s try using the following `lscpu` command to get how many CPUs your
    system has:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尝试使用以下`lscpu`命令来获取系统的CPU数量：
- en: '**`lscpu | grep ''^CPU(s):''`**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**`lscpu | grep ''^CPU(s):''`**'
- en: '`CPU(s): 8`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`CPU(s): 8`'
- en: 'Alternatively, on Ubuntu/Debian, there''s also the pre-installed `nproc` utility,
    so the following command also does the trick:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在Ubuntu/Debian上，还有预安装的`nproc`实用程序，因此以下命令也可以完成任务：
- en: '**`$ make -j$(nproc)`**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ make -j$(nproc)`**'
- en: When finished, we should have the kernel image into the `arch/arm64/boot/Image`
    file and the device tree binary into the `arch/arm64/boot/dts/marvell/armada-3720-espressobin.dtb`
    file, which are ready to be transferred into the microSD we're going to build
    in the next recipe, *Setting up the target machine*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们应该将内核映像放入`arch/arm64/boot/Image`文件中，并将设备树二进制文件放入`arch/arm64/boot/dts/marvell/armada-3720-espressobin.dtb`文件中，这些文件已准备好传输到我们将在下一个配方中构建的microSD中，*设置目标机器*。
- en: See also
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For further information regarding available ESPRESSObin's kernel releases and
    how to get them and compile and install them, just take a look at ESPRESSObin's
    wiki pages at [http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Kernel](http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Kernel).
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关可用的ESPRESSObin内核版本以及如何获取、编译和安装它们的进一步信息，请参阅ESPRESSObin的维基页面[http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Kernel](http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Kernel)。
- en: Setting up the target machine
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置目标机器
- en: Now, it's time to install whatever we needed on our target system; since the
    ESPRESSObin is sold with just the bootloader, we have to do some work in order
    to get a fully functional system with a proper OS.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在目标系统上安装我们需要的东西了；由于ESPRESSObin只带有引导加载程序出售，我们必须做一些工作，以便获得一个具有适当操作系统的完全功能系统。
- en: In this book, I'm going to use a Debian OS for the ESPRESSObin but you may use
    other OSes as reported at [http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo](http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo).
    On this site, you can get more detailed information about how to properly set
    up your ESPRESSObin to fit your needs.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用Debian OS为ESPRESSObin，但您可以使用其他OS，如[http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo](http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo)中所述。在这个网站上，您可以获取有关如何正确设置ESPRESSObin以满足您需求的更详细信息。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Even if the ESPRESSObin can boot from different media, we're going to use a
    microSD since it's the most easy and useful way to set up the system. For different
    media, please refer to the ESPRESSObin's wiki pages—see [http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Ubuntu](http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Ubuntu)
    for some examples.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 即使ESPRESSObin可以从不同的介质引导，我们将使用microSD，因为这是设置系统的最简单和最有用的方式。有关不同介质，请参阅ESPRESSObin的维基页面—参见[http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Ubuntu](http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Ubuntu)以获取一些示例。
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: To set up the microSD, we have to use our host PC, so plug it in and then locate
    the corresponding device.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置microSD，我们必须使用我们的主机PC，因此插入它，然后找到相应的设备。
- en: 'If we''re using an SD/microSD slot, as soon as we plug the media in, we''ll
    get something like this in the kernel messages:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用SD/microSD插槽，一旦插入介质，我们将在内核消息中得到类似以下内容：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To get kernel messages on the Terminal, we can use the `dmesg` command.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要在终端上获取内核消息，我们可以使用`dmesg`命令。
- en: 'However, if we''re going to use a microSD to USB adapter kernel, messages will
    look like the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们要使用microSD到USB适配器内核，消息将如下所示：
- en: '[PRE24]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Another easy way to locate the media is by using the `lsblk` command, as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个查找介质的简单方法是使用`lsblk`命令，如下所示：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It''s now obvious that our microSD card is here listed as `/dev/mmcblk0` but
    it is not empty. Since we want to clear everything from it, we have to clear it
    first by using the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在很明显，我们的microSD卡在此列为`/dev/mmcblk0`，但它不是空的。由于我们想要清除它的所有内容，我们必须首先使用以下命令清除它：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You may need to unmount the device before proceeding with the clearing in order
    to work safely on the media device, so let''s unmount all of the device''s partitions
    by using the `umount` command on all of them as I will do in the following with
    the only defined partition on my microSD:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行清除之前，您可能需要卸载设备，以便在媒体设备上安全工作，因此让我们使用`umount`命令在所有设备的所有分区上卸载它们，就像我将在我的microSD上的唯一定义的分区中所做的那样：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You have to just repeat this command for each defined partition on your microSD.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于microSD上定义的每个分区，您必须重复此命令。
- en: 'Now, we will create a new partition, `/dev/mmcblk0p1`, on the empty SD card
    with the next command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用下一个命令在空SD卡上创建一个新分区`/dev/mmcblk0p1`：
- en: '[PRE28]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If everything works well, our microSD media should appear formatted, as in
    the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，我们的microSD介质应该显示为格式化的，如下所示：
- en: '[PRE29]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we have to format it as EXT4 with the following command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须使用以下命令将其格式化为EXT4：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Note that this command line works for the `e2fsprogs` version >=1.43 only!
    If you''re using an older release, you should use the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此命令行仅适用于`e2fsprogs`版本>=1.43！如果您使用较旧的版本，应使用以下命令：
- en: '**`$ sudo mkfs.ext4 -L root /dev/mmcblk0p1`**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ sudo mkfs.ext4 -L root /dev/mmcblk0p1`**'
- en: 'Next, mount this partition on your local Linux machine:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在本地Linux机器上挂载此分区：
- en: '[PRE31]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Note that, on some OSes (and especially on Ubuntu), as soon as we unplug and
    then we plug in the media device again, it is mounted automatically into `/media/$USER/root`
    where `$USER` is an environment variable holding your username. For instance,
    on my machine, I have the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在某些操作系统（特别是Ubuntu）上，一旦我们拔掉然后再次插入媒体设备，它就会自动挂载到`/media/$USER/root`中，其中`$USER`是一个保存您用户名的环境变量。例如，在我的机器上，我有以下内容：
- en: '**`$ ls -ld /media/$USER/root`**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ ls -ld /media/$USER/root`**'
- en: '`drwxr-xr-x 3 root root 4096 Jan 10 14:28 /media/giometti/root/`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`drwxr-xr-x 3 root root 4096 Jan 10 14:28 /media/giometti/root/`'
- en: Adding Debian files
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Debian文件
- en: 'I decided to use Debian as the target OS since it''s my favorite distribution
    for development (and, when possible, for production) systems:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定使用Debian作为目标操作系统，因为它是我用于开发（并且在可能的情况下用于生产）系统的最喜欢的发行版：
- en: 'To install it, we use QEMU software again, using the following command:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装它，我们再次使用QEMU软件，使用以下命令：
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You could see warnings about keyring here; they are harmless and they can be
    safely ignored:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会看到有关密钥环的警告；它们是无害的，可以安全地忽略：
- en: '`W: Cannot check Release signature;`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`W: 无法检查发布签名；`'
- en: I suppose this is another coffee-break command.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我想这是另一个咖啡时间的命令。
- en: 'Once finished, we should find, in `debian-stretch-arm64`, a clean Debian root
    filesystem for the ESPRESSObin but, before transferring it into the microSD, we
    should fix the `hostname` file contents as shown here:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们应该在`debian-stretch-arm64`中找到一个干净的Debian根文件系统，但是，在将其转移到microSD之前，我们应该像这样修复`hostname`文件的内容：
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, we have to add the serial device `ttyMV0` to the `/etc/securetty` file
    in order to be able to log in as the root user through the serial device, `/dev/ttyMV0`.
    Use the following command:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须将串行设备`ttyMV0`添加到`/etc/securetty`文件中，以便能够通过串行设备`/dev/ttyMV0`登录为根用户。使用以下命令：
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Use `man securetty` for further information about the root login through a serial
    connection.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`man securetty`获取有关通过串行连接登录根用户的更多信息。
- en: 'And, as a last step, we have to set up a root password:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步，我们必须设置根密码：
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, I used the `root` string as password for the root user (it is up to you
    to choose yours).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用`root`字符串作为根用户的密码（您可以选择自己的密码）。
- en: In order to have further information regarding this usage of the `chroot` command,
    you can use the `man chroot` command or continue reading till the end of this
    chapter where I'm going to explain a bit better how it works.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步了解`chroot`命令的使用，您可以使用`man chroot`命令，或者继续阅读本章的最后，我将更好地解释它的工作原理。
- en: 'Now, we can safely copy all files into our microSD using the following command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令将所有文件安全地复制到我们的microSD中：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is what the microSD content should look like:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是microSD内容应该是这样的：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Adding the kernel
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加内核
- en: 'After OS files, we need also kernel images to get a running kernel and, in
    the previous section, we got the kernel image into the `arch/arm64/boot/Image`
    file and the device tree binary into the `arch/arm64/boot/dts/marvell/armada-3720-espressobin.dtb`
    file, which are ready to be transferred into our freshly created microSD:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS文件之后，我们还需要内核映像来获得运行的内核，并且在前面的部分中，我们将内核映像放入`arch/arm64/boot/Image`文件中，并将设备树二进制文件放入`arch/arm64/boot/dts/marvell/armada-3720-espressobin.dtb`文件中，这些文件已准备好转移到我们新创建的microSD中：
- en: 'Let''s copy them into the `/boot` directory as done here:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将它们复制到`/boot`目录中，就像这样：
- en: '[PRE38]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If the `/boot` directory was not present in the microSD and the preceding command
    returned an error, you can recover by using the following command and rerun the
    preceding `cp` command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果microSD中没有`/boot`目录，并且前面的命令返回错误，您可以使用以下命令进行恢复，并重新运行前面的`cp`命令：
- en: '`$ sudo mkdir /media/$USER/root/boot`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo mkdir /media/$USER/root/boot`'
- en: 'Then, the `/boot` directory should look like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`/boot`目录应该是这样的：
- en: '[PRE39]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The preceding files are sufficient to boot the system; however, to also install
    kernel modules and headers files, which are useful for compiling new software,
    we can use the next commands after all Debian files have been installed into the
    microSD (to avoid overwriting with Debian files):'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的文件足以启动系统；但是，为了安装内核模块和头文件，这对于编译新软件很有用，我们可以在将所有Debian文件安装到microSD后使用下一个命令（以避免用Debian文件覆盖）：
- en: '[PRE40]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Well, now we are finally ready to tie it all up and run our new Debian system,
    so let's unmount the microSD and plug it into the ESPRESSObin.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们终于准备好将所有内容绑定在一起并运行我们的新Debian系统，所以让我们卸载microSD并将其插入ESPRESSObin。
- en: Setting up the booting variables
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置引导变量
- en: 'After powering up, we should get the bootloader''s messages from the serial
    console and then we should see a timeout running to 0 before doing the autoboot:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 上电后，我们应该从串行控制台获得引导加载程序的消息，然后我们应该看到超时运行到0，然后执行自动引导：
- en: 'Quickly stop the countdown by hitting the *Enter* key on the keyboard to get
    the bootloader''s prompt, as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按键盘上的*Enter*键快速停止倒计时，以获得引导加载程序的提示，如下所示：
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The ESPRESSObin's bootloader is U-Boot, which has its home page at [https://www.denx.de/wiki/U-Boot](https://www.denx.de/wiki/U-Boot).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: ESPRESSObin的引导加载程序是U-Boot，其主页位于[https://www.denx.de/wiki/U-Boot](https://www.denx.de/wiki/U-Boot)。
- en: 'Now, let''s check again that the microSD card has the necessary files using
    the `ext4ls` command, as follows:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们再次使用`ext4ls`命令检查microSD卡是否具有必要的文件，如下所示：
- en: '[PRE42]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: OK, everything is in place, so there are only a few variables required to boot
    from the microSD card.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，一切就绪，所以只需要一些变量就可以从microSD卡启动。
- en: 'We can display the currently defined variables at any point by using the `echo`
    command and optionally reconfigure them by using `setenv` command. First, check
    and set proper image and device tree paths and names:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`echo`命令在任何时候显示当前定义的变量，并且可以使用`setenv`命令可选地重新配置它们。首先，检查并设置正确的镜像和设备树路径和名称：
- en: '[PRE43]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note that, filenames were correct but the path names were not; that's why I
    used the `setenv` command to correctly redefine them.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件名是正确的，但路径名不正确；这就是为什么我使用`setenv`命令正确重新定义它们。
- en: 'Next, define the `bootcmd` variable, which we will use to boot from the microSD
    card:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义`bootcmd`变量，我们将使用它从microSD卡启动：
- en: '[PRE44]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We must be careful to set the preceding root path to point to where we have
    extracted the Debian filesystem (the first partition in our case).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须小心设置前面的根路径，指向我们提取Debian文件系统的位置（在我们的情况下是第一个分区）。
- en: Save the set variables at any time using the `saveenv` command.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`saveenv`命令随时保存设置的变量。
- en: 'Finally, we boot up the ESPRESSObin by simply typing the `reset` command and,
    if everything works well, we should see the system start and running and, at the
    end, we should get system login prompt, as follows:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过简单输入`reset`命令启动ESPRESSObin，如果一切正常，我们应该看到系统启动并运行，最后，我们应该看到系统登录提示，如下所示：
- en: '[PRE45]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, log in as root with the `root` password that was previously set up:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用之前设置的`root`密码以root身份登录：
- en: '[PRE46]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Setting up the networking
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置网络
- en: 'OK, now our ESPRESSObin is ready to execute our code and our drivers! However,
    before ending this section, let''s take a look at the networking configuration
    since it can be further useful to log in to the board using an SSH connection
    or just to copy files from/to the board quickly (even if we can remove the microSD
    and then copy our files from the host PC directly):'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们的ESPRESSObin已经准备好执行我们的代码和驱动程序了！然而，在结束本节之前，让我们看一下网络配置，因为使用SSH连接登录到板上或者快速复制文件可能会进一步有用（即使我们可以移除microSD，然后直接从主机PC复制文件）：
- en: 'Taking a look at available network interfaces on the ESPRESSObin, we see the
    following:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看ESPRESSObin上可用的网络接口，我们看到以下内容：
- en: '[PRE47]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `eth0` interface is the one that connects the CPU with the Ethernet switch
    while the `wan`, `lan0`, and `lan1` interfaces are the ones where we can physically
    connect our Ethernet cables (note that the system calls them `wan@eth0`, `lan0@eth0`,
    and `lan1@eth1` just to underline the fact they are slaves of `eth0`). Following
    is a photograph of the ESPRESSObin, where we can see each Ethernet port with its
    label:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`eth0`接口是将CPU与以太网交换机连接的接口，而`wan`、`lan0`和`lan1`接口是我们可以物理连接以太网电缆的接口（请注意，系统将它们称为`wan@eth0`、`lan0@eth0`和`lan1@eth1`，以突出它们是`eth0`的从属）。以下是ESPRESSObin的照片，我们可以看到每个以太网端口及其标签：'
- en: '![](img/ef6d52cc-44e8-47c7-a928-cefca0bcfe87.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef6d52cc-44e8-47c7-a928-cefca0bcfe87.png)'
- en: 'Despite their names, all ports are equivalent so connect the Ethernet cable
    into one port (I''m going to use `wan`) and then enable it after `eth0`, as follows:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管它们的名称不同，但所有端口都是等效的，因此将以太网电缆连接到一个端口（我将使用`wan`），然后在`eth0`之后启用它，如下所示：
- en: '[PRE48]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note that, in the preceding output, there are also kernel messages that show
    what you should see if everything is working well.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上述输出中，还有显示一切正常时应看到的内核消息。
- en: 'Now, we can manually set an IP address or we can ask our DHCP server whatever
    we need to surf the internet with the `dhclient` command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以手动设置IP地址，或者使用`dhclient`命令询问DHCP服务器，以获取上网所需的信息：
- en: '[PRE49]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here is my network configuration:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的网络配置：
- en: '[PRE50]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, we''re ready to install new software or to try to establish an SSH connection
    to the ESPRESSObin; to do so, let''s verify that we have the following SSH server''s
    configuration in the`/etc/ssh/sshd_config` file:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好安装新软件，或者尝试建立与ESPRESSObin的SSH连接；为此，让我们验证`/etc/ssh/sshd_config`文件中是否有以下SSH服务器的配置：
- en: '[PRE51]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If we get no output, we cannot log in as root into our ESPRESSObin, so we must
    change the `PermitRootLogin` setting to `yes` and then restart the daemon:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们没有输出，就无法以root身份登录到我们的ESPRESSObin，因此我们必须将`PermitRootLogin`设置更改为`yes`，然后重新启动守护程序：
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, on the host PC, we can try the login via SSH, as follows:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在主机PC上，我们可以尝试通过SSH登录，如下所示：
- en: '[PRE53]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: See also
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: To get more information regarding how to set up the ESPRESSObin even on different
    OSes, you can take a look at [http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo](http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo).
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取有关如何在不同操作系统上设置ESPRESSObin的更多信息，您可以查看[http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo](http://wiki.espressobin.net/tiki-index.php?page=Software+HowTo)。
- en: 'For further information regarding `qemu-debootstrap`, a good starting point
    is at [https://wiki.ubuntu.com/ARM/RootfsFromScratch/QemuDebootstrap](https://wiki.ubuntu.com/ARM/RootfsFromScratch/QemuDebootstrap).
    To manage Ethernet devices and for further information about networking on a Debian
    OS, you can take a look at the following: [https://wiki.debian.org/NetworkConfiguration](https://wiki.debian.org/NetworkConfiguration).'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`qemu-debootstrap`的更多信息，一个很好的起点是[https://wiki.ubuntu.com/ARM/RootfsFromScratch/QemuDebootstrap](https://wiki.ubuntu.com/ARM/RootfsFromScratch/QemuDebootstrap)。要管理以太网设备并获取有关Debian操作系统上网络的更多信息，您可以查看以下内容：[https://wiki.debian.org/NetworkConfiguration](https://wiki.debian.org/NetworkConfiguration)。
- en: Doing native compiling on foreign hardware
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在外部硬件上进行本地编译
- en: Before ending this chapter, I'd like to introduce an interesting cross-platform
    system that's useful when we need several different OSes running on your development
    PC. This step is very useful when we need a complete OS to compile a device driver
    or an application but we do not have a target device to compile onto. We can use
    our host PC to compile code for a foreign hardware across different OS and OS
    release.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，我想介绍一个有趣的跨平台系统，当我们需要在开发PC上运行多个不同的操作系统时非常有用。当我们需要一个完整的操作系统来编译设备驱动程序或应用程序，但没有目标设备来进行编译时，这一步非常有用。我们可以使用我们的主机PC来跨不同的操作系统和操作系统版本为外部硬件编译代码。
- en: Getting ready
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: During my career, I worked with tons of different platforms and having one virtual
    machine for all of them is very complex and really system consuming (especially
    if we decide to run several of them at the same time!). That's why it can be interesting
    to have a lightweight system that can execute foreign code on your PC. Of course,
    this method cannot be used to test a device driver (we need real hardware for
    that), but we can use it to run a native compiler and/or native userspace code
    really quickly just in case our embedded platform is not working. Let's see what
    I'm talking about.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我使用了大量不同的平台，并且为它们所有都有一个虚拟机非常复杂且真正消耗系统资源（特别是如果我们决定同时运行其中几个！）。这就是为什么拥有一个可以在您的PC上执行外部代码的轻量级系统可能会很有趣。当然，这种方法不能用于测试设备驱动程序（我们需要真正的硬件来进行测试），但我们可以用它来快速运行本地编译器和/或本地用户空间代码，以防我们的嵌入式平台出现问题。让我们看看我在说什么。
- en: In the *Setting up the target machine* recipe, regarding the Debian OS installation,
    we used the `chroot` command to set up the root's password. This command worked
    thanks to QEMU; in fact, in the `debian-stretch-arm64` directory, we have an ARM64
    root filesystem, which can be executed on an x86_64 platform by using QEMU only.
    It's then clear that, in this manner, we should be able to execute whatever command
    we'd like and, of course, we will be able to execute the Bash shell as in the
    next recipe.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在*设置目标机器*配方中，关于Debian OS安装，我们使用`chroot`命令设置根密码。这个命令得到了QEMU的支持；事实上，在`debian-stretch-arm64`目录中，我们有一个ARM64根文件系统，可以在x86_64平台上仅使用QEMU执行。很明显，以这种方式，我们应该能够执行任何我们想要的命令，当然，我们将能够像下一个配方中一样执行Bash
    shell。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now it''s time to see how `chroot` works:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看`chroot`是如何工作的了：
- en: 'Execute an ARM64 `bash` command by using our x86_64 host, as follows:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用我们的x86_64主机执行ARM64 `bash`命令，如下所示：
- en: '[PRE54]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then, we can use each ARM64 command as we did on the ESPRESSObin; for example,
    to list files into the current directory; we can use the following:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以像在ESPRESSObin上那样使用每个ARM64命令；例如，要列出当前目录中的文件，我们可以使用以下命令：
- en: '[PRE55]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'However, there are some traps; for instance, we completely miss the `/proc`
    and `/sys` directories and programs, which rely on them and will fail for sure:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，也有一些陷阱；例如，我们完全错过了`/proc`和`/sys`目录和程序，这些程序依赖于它们，肯定会失败：
- en: '[PRE56]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: To resolve these problems, we can manually mount these missing directories before
    executing `chroot`, but this is quite annoying due to the fact that they are so
    many, so we can try using the `schroot` utility, which, in turn, can do all of
    these steps for us. Let's see how.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，我们可以在执行`chroot`之前手动挂载这些缺失的目录，但由于它们太多了，这相当麻烦，所以我们可以尝试使用`schroot`实用程序，它反过来可以为我们完成所有这些步骤。让我们看看如何做。
- en: For detailed information regarding `schroot`, you can see its man pages with
    `man schroot`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`schroot`的详细信息，您可以使用`man schroot`查看其手册页面。
- en: Installing and configuring schroot
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置schroot
- en: 'This task is quite trivial in Ubuntu:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu中，这个任务非常简单：
- en: 'First of all, we install the program in the usual way:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们以通常的方式安装程序：
- en: '[PRE57]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, we have to configure it in order to correctly enter into our ARM64 system.
    To do so, let''s copy the root filesystem created before into a dedicated directory
    (where we can also add any other distributions we wish to emulate with `schroot`):'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须配置它，以便正确进入我们的ARM64系统。为此，让我们将之前创建的根文件系统复制到一个专用目录中（在那里我们还可以添加任何其他我们希望用`schroot`模拟的发行版）：
- en: '[PRE58]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, we must create a proper configuration for our new system by adding a
    new file into the `schroot` configuration directory, as follows:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须通过在`schroot`配置目录中添加一个新文件来为我们的新系统创建适当的配置，如下所示：
- en: '[PRE59]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note that the `directory` parameter is set to the path holding our ARM64 system
    and `users` is set to `giometti`, which is my username (this is a comma-separated
    list of users that are allowed access to the `chroot` environment—see `man schroot.conf`).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`directory`参数设置为包含我们的ARM64系统的路径，`users`设置为`giometti`，这是我的用户名（这是允许访问`chroot`环境的用户的逗号分隔列表—请参阅`man
    schroot.conf`）。
- en: 'Looking at the preceding settings, we see that the `profile` parameter is set
    to `desktop`; this means that it will be taking into account all files in the
    `/etc/schroot/desktop/` directory. In particular, the `fstab` file holds all mount
    points we''d like to be mounted into our system. So, we should verify that it
    holds at least the following lines:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的设置中，我们看到`profile`参数设置为`desktop`；这意味着它将考虑`/etc/schroot/desktop/`目录中的所有文件。特别是，`fstab`文件包含我们希望挂载到系统中的所有挂载点。因此，我们应该验证它至少包含以下行：
- en: '[PRE60]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, we have to restart the `schroot` service, as follows:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须重新启动`schroot`服务，如下所示：
- en: '[PRE61]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Note that you can also restart using the old-fashioned way:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您也可以使用老式的方法重新启动：
- en: '**`$ sudo /etc/init.d/schroot restart`**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ sudo /etc/init.d/schroot restart`**'
- en: 'Now we can list all available environments by asking them to `schroot`, as
    follows:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过要求它们`schroot`来列出所有可用的环境，如下所示：
- en: '[PRE62]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'OK, everything is in place and we can enter into the emulated ARM64 system:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，一切就绪，我们可以进入模拟的ARM64系统了：
- en: '[PRE63]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Since we haven't installed any locale support, the preceding warning is quite
    obvious and it should be safely ignored.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有安装任何区域设置支持，因此前面的警告是相当明显的，应该可以安全地忽略。
- en: 'Now, to verify we''re really executing ARM64 code, let''s try some commands.
    For example, we can ask for some system information with the `uname` command:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了验证我们是否真的在执行ARM64代码，让我们尝试一些命令。例如，我们可以使用`uname`命令请求一些系统信息：
- en: '[PRE64]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As we can see, the system says that its platform is `aarch64`, which is ARM64\.
    Then, we can try to execute our `helloworld` program that was cross-compiled before;
    since, after `chroot`, the current directory is not changed (and our home directory
    is still the same), we can simply go back where we did the compilation and then
    execute the program as usual:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，系统显示其平台为`aarch64`，即ARM64。然后，我们可以尝试执行之前交叉编译的`helloworld`程序；因为在`chroot`之后，当前目录没有改变（我们的主目录仍然是相同的），我们可以简单地回到编译的地方，然后像往常一样执行程序：
- en: '[PRE65]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The program still executes as when we were on an ARM64 system. Great!
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序仍然像我们在ARM64系统上时一样执行。太棒了！
- en: Configuring the emulated OS
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置模拟的操作系统
- en: 'What we just saw about `schroot` is nothing if we do not configure our new
    system to do native compilation, and to do so, we can use every Debian tool we
    use on our host PC:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不配置新系统进行本地编译，那么我们刚才看到的关于`schroot`的一切都没有意义，为了这样做，我们可以使用我们在主机PC上使用的每个Debian工具：
- en: 'To install a complete compiling environment, we can issue the following command
    once inside the `schroot` environment:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完整的编译环境后，我们可以在`schroot`环境中执行以下命令：
- en: '[PRE66]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note that `sudo` will ask your usual password, that is, the password you currently
    use to log in to your host PC.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`sudo`将要求您通常的密码，也就是您当前用于登录到主机PC的密码。
- en: 'You might not get a password request from `sudo` with the following error message:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不会从`sudo`获得密码请求，而会收到以下错误消息：
- en: '`sudo: no tty present and no askpass program specified`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo: no tty present and no askpass program specified`'
- en: You can try executing the preceding `sudo` command again, adding to it the `-S`
    option argument.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试再次执行前面的`sudo`命令，并添加`-S`选项参数。
- en: It could be possible that the `apt` command will notify you that some packages
    cannot be authenticated. Just ignore this warning and continue installation, answering
    yes by pressing the *Y* key.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`apt`命令可能会通知您某些软件包无法得到验证。只需忽略此警告并继续安装，按下*Y*键回答是。'
- en: 'If everything works well, we should now be able to execute every compiling
    command we used before. For instance, we can try to recompile the `helloworld`
    program again but natively (we should remove the current executable in order;
    `make` will try to recompile it again):'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们现在应该能够执行之前使用的每个编译命令。例如，我们可以尝试再次本地重新编译`helloworld`程序（我们应该先删除当前的可执行文件；`make`将尝试重新编译它）：
- en: '[PRE67]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note that networking support is fully functional so we're now working on an
    emulated ARM64 environment on our hosts PC as we were on the ESPRESSObin.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，网络支持是完全功能的，因此我们现在正在主机PC上的模拟ARM64环境上工作，就像我们在ESPRESSObin上一样。
- en: See also
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: On the internet, there are several examples regarding `schroot` usage and a
    good starting point is [https://wiki.debian.org/Schroot](https://wiki.debian.org/Schroot).
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在互联网上，有关`schroot`使用的几个示例，一个很好的起点是[https://wiki.debian.org/Schroot](https://wiki.debian.org/Schroot)。
