- en: '*Chapter 4*: The Linux Firewall'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：Linux防火墙'
- en: 'Linux has almost always had an integrated firewall available for use by administrators.
    With the native firewall tools, you can craft a traditional perimeter firewall
    with address translation or a proxy server. These aren''t, however, typical use
    cases in a modern data center. The typical use cases for host firewalls in modern
    infrastructure are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linux几乎一直都有集成的防火墙可供管理员使用。使用本机防火墙工具，您可以创建传统的周边防火墙，包括地址转换或代理服务器。然而，在现代数据中心，这些并不是典型的用例。现代基础设施中主机防火墙的典型用例如下：
- en: Inbound access controls, to limit access to administrative interfaces
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入站访问控制，限制对管理界面的访问
- en: Inbound access controls, to restrict access to other installed services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入站访问控制，限制对其他安装的服务的访问
- en: Logging of accesses for any subsequent incident response, after a security exposure,
    breach, or another incident
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录访问，以备后续的事件响应，如安全暴露、违规或其他事件。
- en: While egress filtering (outbound access controls) is certainly recommended,
    this is more often implemented at network perimeters – on firewalls and routers
    between VLANs or facing less-trusted networks such as the public internet.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管出站过滤（出站访问控制）当然是建议的，但这更常见地是在网络边界上实施 - 在VLAN之间的防火墙和路由器上，或者面向不太受信任的网络，如公共互联网。
- en: In this chapter, we'll focus on implementing a set of rules that govern access
    to a host that implements a web service for general access, and an SSH service
    for administrative access.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍实施一组规则，以管理对实施通用访问的主机的访问，以及对管理员访问的SSH服务。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Configuring iptables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置iptables
- en: Configuring nftables
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置nftables
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the examples in this chapter, we'll continue to build on our existing
    Ubuntu host or virtual machine. We'll be focusing on the Linux firewall in this
    chapter, so a second host might be handy to test your firewall changes with.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章的示例，我们将继续在现有的Ubuntu主机或虚拟机上进行。本章将重点介绍Linux防火墙，因此可能需要第二台主机来测试防火墙更改。
- en: 'As we work through the various firewall configurations, we''ll only be using
    two main Linux commands:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们逐步进行各种防火墙配置时，我们将只使用两个主要的Linux命令：
- en: '![](img/Table_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_01.jpg)'
- en: Configuring iptables
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置iptables
- en: At the time of writing (2021), we're in flux on firewall architectures. iptables
    is still the default host firewall on many distributions, including our example
    Ubuntu distribution. However, the industry has started moving toward a newer architecture,
    nftables (Netfilter). Red Hat and CentOS v8 (on the Linux kernel 4.18), for instance,
    have nftables as their default firewall. Just for context, when iptables was introduced
    in kernel version 3.13 (around 2014), it in turn replaced the `ipchains` package
    (which was introduced in kernel version 2.2, in 1999). The main reasons for moving
    to the new commands are to move toward a more consistent command set, provide
    better support of IPv6, and deliver better programmatic support for configuration
    operations using APIs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时（2021年），我们对防火墙架构还在变化中。iptables仍然是许多发行版的默认主机防火墙，包括我们的示例Ubuntu发行版。然而，该行业已开始向更新的架构nftables（Netfilter）迈进。例如，红帽和CentOS
    v8（在Linux内核4.18上）将nftables作为默认防火墙。仅供参考，当iptables在内核版本3.13中引入时（大约在2014年），它取代了`ipchains`包（该包在1999年的内核版本2.2中引入）。转移到新命令的主要原因是朝着更一致的命令集前进，提供更好的IPv6支持，并使用API提供更好的编程支持进行配置操作。
- en: While there are definitely some advantages to the nftables architecture (which
    we'll cover in this chapter), there are decades of inertia in the current iptables
    approach. Entire automation frameworks and products are based on iptables. Once
    we get into the syntax, you'll see that this may look do-able, but keep in mind
    that often, Linux hosts will be deployed with lifetimes that stretch into decades
    – think cash registers, medical devices, elevator controls, or hosts that work
    with manufacturing equipment such as PLCs. In many cases, these long-lived hosts
    may not be configured to auto-update, so depending on the type of organization,
    at any time you can easily expect to work with hosts with complete OS versions
    from 5, 10, or 15 years ago. Also, because of what these devices are, even if
    they are connected to the network, they might not be inventoried as "computers."
    What this means is that while the migration of the default firewall from iptables
    to nftables may go quickly on the new versions of any particular distribution,
    there will be a long tail of legacy hosts that will run iptables for many years
    to come.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管nftables架构确实有一些优势（我们将在本章中介绍），但当前的iptables方法已经有数十年的惯性。整个自动化框架和产品都是基于iptables的。一旦我们进入语法，您会发现这看起来可能是可行的，但请记住，通常情况下，Linux主机将被部署并使用数十年之久
    - 想想收银机、医疗设备、电梯控制或与制造设备（如PLC）一起工作的主机。在许多情况下，这些长寿命的主机可能没有配置自动更新，因此根据组织的类型，您可能随时可以轻松地预期使用来自5年、10年或15年前的完整操作系统版本的主机。此外，由于这些设备的特性，即使它们连接到网络，它们可能不会被列入“计算机”清单。这意味着，尽管默认防火墙从iptables迁移到nftables可能在任何特定发行版的新版本上迅速进行，但将有大量的遗留主机将继续使用iptables多年。
- en: Now that we know what iptables and nftables are, let's get on with configuring
    them, starting with iptables.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了iptables和nftables是什么，让我们开始配置它们，首先是iptables。
- en: iptables from a high level
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iptables的高级概述
- en: itables is a Linux firewall application, installed by default in most modern
    distributions. If it's enabled, it governs all traffic in and out of the host.
    The firewall configuration is in a text file, as you would expect on Linux, which
    is organized into tables consisting of sets of rules called **chains**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: iptables是一个Linux防火墙应用程序，在大多数现代发行版中默认安装。如果启用了iptables，它将管理主机的所有流量。防火墙配置位于文本文件中，与您在Linux上所期望的一样，它被组织成包含一组规则的表**chains**。
- en: 'When a packet matches a rule, the rule outcome will be a target. A target can
    be another chain, or it can be one of three main actions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据包匹配规则时，规则的结果将是一个目标。目标可以是另一个链，也可以是三个主要操作之一：
- en: '**Accept**: The packet is passed through.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接受**：数据包被传递。'
- en: '**Drop**: The packet is dropped; it is not passed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丢弃**：数据包被丢弃；不会被传递。'
- en: '**Return**: Stops the packet from traversing this chain; tells it to go back
    to the previous chain.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**返回**：阻止数据包穿过此链；告诉它返回到上一个链。'
- en: 'One of the default tables is called **filter**. This table has three default
    chains:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个默认表称为**filter**。这个表有三个默认链：
- en: '**Input**: Controls packets inbound into the host'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：控制进入主机的数据包'
- en: '**Forward**: Processes incoming packets to be forwarded elsewhere'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转发**：处理传入的数据包以转发到其他地方。'
- en: '**Output**: Processes packets leaving the host'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：处理离开主机的数据包'
- en: The other two default tables are **NAT** and **Mangle**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个默认表是**NAT**和**Mangle**。
- en: As always with a new command, take a look at the iptables manual page, and also
    take a quick look at the iptables help text. To make it easier to read, you can
    run the help text through the `less` command, using `iptables -- help | less`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有新命令一样，查看iptables手册页，并快速查看iptables帮助文本。为了更容易阅读，您可以通过“less”命令运行帮助文本，使用“iptables
    -- help | less”。
- en: 'Out of the gate, by default iptables is not configured. We can see from `iptables
    –L -v` (for "list") that no rules are in any of the three default chains:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，iptables默认情况下未配置。我们可以从“iptables –L -v”（用于“list”）中看到三个默认链中没有规则：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can see that the service is running, though the packets and bytes on the
    `INPUT` and `OUTPUT` chains are non-zero and increasing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到服务正在运行，尽管“INPUT”和“OUTPUT”链上的数据包和字节数都不为零且在增加。
- en: 'In order to add a rule to a chain, we use the `-A` parameter. This command
    can take several arguments. Some commonly used parameters are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向链中添加规则，我们使用“-A”参数。这个命令可以带几个参数。一些常用的参数如下：
- en: '![](img/Table_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_02.jpg)'
- en: 'So, for instance, these two rules would allow hosts from network `1.2.3.0/24`
    to port `tcp/22` on our host, and anything is allowed to connect to `tcp/443`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，这两条规则将允许来自网络“1.2.3.0/24”的主机连接到我们主机的端口“tcp/22”，并且任何东西都可以连接到“tcp/443”：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Port `tcp/22` is the SSH service and `tcp/443` is HTTPS, but there's nothing
    stopping you from running some other service on either port if you choose to.
    Of course, the rules come to nothing if you don't have anything running on those
    ports.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 端口“tcp/22”是SSH服务，“tcp/443”是HTTPS，但如果选择的话，没有什么可以阻止您在任一端口上运行其他服务。当然，如果这些端口上没有任何运行的东西，规则就毫无意义了。
- en: 'With that executed, let''s look at our ruleset again. We''ll add line numbers
    with `- -line-numbers`, and skip any DNS resolution on addresses by using `–n`
    (for numeric):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完毕后，让我们再次查看我们的规则集。我们将使用“- -line-numbers”添加行号，并使用“-n”（用于数字）跳过地址的任何DNS解析：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The list of rules is processed sequentially from top to bottom, so if you wanted
    to, for instance, just deny access to our `https` server for one host but allow
    everything else, you would add a line number to the `INPUT` specifier. Note that
    we''ve changed up the `List` syntax in the second command of the following code
    block – we''re specifying just `INPUT` rules, and also specifying the `filter`
    table (the default if you don''t specify anything):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 规则列表按顺序从上到下进行处理，因此如果您希望，例如，仅拒绝一个主机访问我们的“https”服务器但允许其他所有内容，您将在“INPUT”规范符号中添加行号。请注意，我们已经在以下代码块的第二条命令中改变了“List”语法-我们只指定了“INPUT”规则，并且还指定了“filter”表（如果您没有指定任何内容，则默认为filter）：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we used the `–I` parameter to insert a rule at a specific
    location in the chain. If, however, you have things planned out and are building
    your ruleset sequentially, you might find it easier to use the `–A` (append) parameter,
    which appends the rule to the bottom of the list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用了“-I”参数在链中的特定位置插入规则。然而，如果您已经计划好并且正在按顺序构建规则集，您可能会发现使用“-A”（追加）参数更容易，它将规则追加到列表底部。
- en: In your source, you can define hosts rather than subnets, either just by IP
    address (with no mask) or by a range of addresses, for instance, `--src-range
    192.168.122.10-192.168.122.20`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的源中，您可以定义主机而不是子网，可以只使用IP地址（没有掩码）或一系列地址，例如，“--src-range 192.168.122.10-192.168.122.20”。
- en: 'This concept can be used to protect specific services running on a server.
    For instance, often you will want to restrict access to ports that allow administrative
    access (for instance, SSH) to only administrators of that host, but allow access
    more broadly to the main application on the host (for instance, HTTPS). The rules
    we''ve just defined are a start on exactly that, assuming the server''s administrators
    are on the `1.2.3.0/24` subnet. What we''ve missed, though, is the "deny" that
    stops people from connecting to SSH from other subnets:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念可以用来保护服务器上运行的特定服务。例如，通常您会希望限制对允许管理员访问的端口（例如SSH）的访问仅限于该主机的管理员，但允许更广泛地访问主机上的主要应用程序（例如HTTPS）。我们刚刚定义的规则是对此的一个开始，假设服务器的管理员在“1.2.3.0/24”子网上。然而，我们错过了阻止其他子网的人连接到SSH的“拒绝”：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These rules can become complex pretty quickly. It''s good to get into the habit
    of "grouping" protocol rules together. In our example, we''ve kept the SSH adjacent
    to each other and in a logical order, and the same for the HTTPS rules. You''ll
    want the default action for each protocol/port to be the last in each group, with
    the preceding exceptions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则很快就会变得复杂。习惯于将协议规则“分组”是很好的。在我们的例子中，我们将SSH保持相邻并按逻辑顺序排列，HTTPS规则也是如此。您希望每个协议/端口的默认操作都是每个组中的最后一个，前面是例外情况：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because the rules are processed sequentially, for performance reasons, you will
    want to put the rules most frequently "hit" toward the top of the list. So, in
    our example, we may have put our rules in backward. On many servers, you might
    rather have the application ports (in this case `tcp/443`) at the top of the list,
    with the admin permissions (which usually see lower volume traffic) toward the
    bottom of the list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于规则是按顺序处理的，出于性能原因，您将希望将最频繁“命中”的规则放在列表的顶部。因此，在我们的示例中，我们可能已经反向放置了规则。在许多服务器上，您可能更愿意将应用程序端口（在本例中为`tcp/443`）放在列表的顶部，而将管理员权限（通常看到较低的流量）放在列表的底部。
- en: 'To delete a specific rule by number (for instance, `INPUT` rule 5 if we had
    one), use the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过数字删除特定规则（例如，如果我们有一个`INPUT`规则5），请使用以下命令：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since a network administrator should maintain a focus on security in this book,
    keep in mind that restricting traffic using iptables is just the first half of
    the process. We can't look back on what happened in the past unless we have iptables
    logging enabled. To log a rule, add `-j LOG` to it. In addition to just logging,
    we can also add a logging level with the `- -log-level` parameter and some descriptive
    text with `- -log-prefix 'text goes here'`. What can you get from that?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网络管理员应该在本书中保持对安全性的关注，请记住，使用iptables限制流量只是过程的前半部分。除非启用了iptables日志记录，否则我们无法回顾过去发生的事情。要记录规则，请向其添加`-j
    LOG`。除了仅记录外，我们还可以使用`- -log-level`参数添加日志级别，并使用`- -log-prefix 'text goes here'`添加一些描述性文本。您可以从中获得什么？
- en: Logging permitted SSH sessions allows us to track people that might be port-scanning
    the administrative services on our host.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录允许的SSH会话可以帮助我们跟踪可能正在对我们主机上的管理服务进行端口扫描的人员。
- en: Logging blocked SSH sessions tracks people trying to connect to administrative
    services from non-admin subnets.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录被阻止的SSH会话可以跟踪试图从非管理员子网连接到管理服务的人员。
- en: Logging successful and failed HTTPS connections allows us to correlate web server
    logs with local firewall logs when troubleshooting.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录成功和失败的HTTPS连接可以帮助我们在故障排除时将Web服务器日志与本地防火墙日志相关联。
- en: 'To just log everything, use the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅记录所有内容，请使用以下命令：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To just log traffic from one subnet, use the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅记录来自一个子网的流量，请使用以下命令：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To add both a logging level and some descriptive text, use the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加日志级别和一些描述性文本，请使用以下命令：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Where do the logs go? In Ubuntu (our example OS), they are added to `/var/log/kern.log`.
    In Red Hat or Fedora, look for them in `/var/log/messages`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 日志存储在哪里？在Ubuntu（我们的示例操作系统）中，它们被添加到`/var/log/kern.log`。在Red Hat或Fedora中，可以在`/var/log/messages`中找到它们。
- en: What else should we consider doing? Like everything else in information technology,
    if you can build a thing and have it document itself, that often saves you from
    writing separate documentation (which is often outdated days after it's completed).
    To add a comment, simply add `–m comment - -comment "Comment Text Here"` to any
    rule.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该考虑做什么？就像信息技术中的其他一切一样，如果您可以构建一个东西并让它自行记录，通常可以避免编写单独的文档（通常在完成后几天就过时了）。要添加注释，只需向任何规则添加`-m
    comment - -comment "Comment Text Here"`。
- en: 'So, for our small four-rule firewall table, we''ll add comments to each rule:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于我们的小型四条规则防火墙表，我们将向每条规则添加注释：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A final note on iptables rules: there is a default rule that is the last entry
    in your chain, called `default policy`. The default value for this is `ACCEPT`,
    so that if a packet makes it all the way to the bottom of the list, it will be
    accepted. This is the commonly desired behavior if you plan to deny some traffic
    then permit the rest – for instance, if you are protecting a "mostly public" service,
    such as most web servers.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 关于iptables规则的最后说明：在您的链中有一个默认规则，称为`默认策略`，这是最后一个条目。默认值为`ACCEPT`，因此如果数据包一直到列表底部，它将被接受。这通常是期望的行为，如果您计划拒绝一些流量然后允许其余流量
    - 例如，如果您正在保护“大多数公共”服务，例如大多数Web服务器。
- en: If the desired behavior, however, is rather to permit some traffic then deny
    the rest, you may want to change that default policy to `DENY`. To make this change
    for the `INPUT` chain, use the `iptables –P INPUT DENY` command. `ACCEPT`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果所需的行为是允许一些流量然后拒绝其余流量，您可能希望将默认策略更改为`DENY`。要更改`INPUT`链的默认策略，请使用`iptables
    –P INPUT DENY`命令。`ACCEPT`。
- en: You can always add a final rule, though, that permits all or denies all to override
    the default policy (whatever that is).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以添加一个最终规则，允许所有或拒绝所有以覆盖默认策略（无论是什么）。
- en: Now that we've got a basic ruleset in place, like so many things, you'll need
    to remember that this ruleset is not permanent – it's just running in memory so
    it won't survive a system restart. You can easily save your rules with the `iptables-save`
    command. If you've made an error in configuration and want to revert to the saved
    table without a reload, you can always use the `iptables-restore` command. While
    these commands are installed by default in the Ubuntu distribution, you may need
    to install a package to add them to other distributions. For example, in Debian-based
    distributions, check for or install the `iptables-persistent` package, or in Red
    Hat-based distributions, check for or install the `iptables-services` package.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个基本的规则集，就像许多其他事情一样，您需要记住这个规则集不是永久的 - 它只是在内存中运行，因此不会在系统重新启动后保留。您可以使用`iptables-save`命令轻松保存您的规则。如果在配置中出现错误并希望恢复到保存的表而不重新加载，您可以随时使用`iptables-restore`命令。虽然这些命令在Ubuntu发行版中默认安装，但您可能需要安装一个软件包将它们添加到其他发行版中。例如，在基于Debian的发行版中，检查或安装`iptables-persistent`软件包，或在基于Red
    Hat的发行版中，检查或安装`iptables-services`软件包。
- en: Now that we have a firm handle on the basic permit and deny rules, let's explore
    the **Network Address Translation** (**NAT**) table.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经牢牢掌握了基本的允许和拒绝规则，让我们来探索**网络地址转换**（**NAT**）表。
- en: The NAT table
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NAT表
- en: NAT is used to translate traffic that's coming from (or going to) one IP address
    or subnet and instead make it appear as another.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: NAT用于转换来自（或前往）一个IP地址或子网的流量，并使其看起来像另一个IP地址。
- en: This is perhaps most commonly done in internet gateways or firewalls, where
    the "inside" addresses are in one or more of the RFC1918 ranges, and the "outside"
    interface connects to the entire internet. In this example, the internal subnets
    will be translated to routable internet addresses. In many cases, all internal
    addresses will map to a single "outside" address, the outside IP of the gateway
    host. In this example, this is done by mapping each "tuple" (source IP, source
    port, destination IP, destination port, and protocol) to a new tuple, where the
    source IP is now a routable outside IP, and the source port is just the next free
    source port (the destination and protocol values remain the same).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是在互联网网关或防火墙中最常见的情况，其中“内部”地址位于RFC1918范围中的一个或多个，而“外部”接口连接到整个互联网。在这个例子中，内部子网将被转换为可路由的互联网地址。在许多情况下，所有内部地址都将映射到单个“外部”地址，即网关主机的外部IP。在这个例子中，这是通过将每个“元组”（源IP、源端口、目标IP、目标端口和协议）映射到一个新的元组来实现的，其中源IP现在是一个可路由的外部IP，源端口只是下一个空闲的源端口（目标和协议值保持不变）。
- en: The firewall keeps this mapping from the inside tuple to the outside tuple in
    a "NAT table" in memory. When the return traffic arrives, it uses this table to
    map the traffic back to the real inside source IP and port. If a specific NAT
    table entry is for a TCP session, the TCP session teardown process removes the
    mapping for that entry. If a specific NAT table entry is for UDP traffic, that
    entry is usually removed after some period of inactivity.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙将这种从内部元组到外部元组的映射保留在内存中的“NAT表”中。当返回流量到达时，它使用这个表将流量映射回真实的内部源IP和端口。如果特定的NAT表条目是针对TCP会话的，TCP会话拆除过程将删除该条目的映射。如果特定的NAT表条目是针对UDP流量的，那么在一段时间的不活动后，该条目通常会被删除。
- en: 'How does this look for real? Let''s use an example of an internal network of
    `192.168.10.0/24`, and a NET configuration where all inside hosts have this "overload
    NAT" configuration, all using the outside interface of the gateway host:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这在实际中是什么样子？让我们以一个内部网络`192.168.10.0/24`的例子来说明，以及一个NET配置，其中所有内部主机都使用网关主机的外部接口的这种“过载NAT”配置：
- en: '![Figure 4.1 – Linux as a perimeter firewall'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1–Linux作为周界防火墙'
- en: '](img/B16336_04_001.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_04_001.jpg)'
- en: Figure 4.1 – Linux as a perimeter firewall
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1–Linux作为周界防火墙
- en: 'Let''s be more specific. We''ll add a host, `192.168.10.10`, with that host
    making a DNS query to `8.8.8.8`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更具体一些。我们将添加一个主机，`192.168.10.10`，该主机将向`8.8.8.8`发出DNS查询：
- en: '![Figure 4.2 – Perimeter firewall example, showing NAT and state (session tracking
    or mapping)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2–周界防火墙示例，显示NAT和状态（会话跟踪或映射）'
- en: '](img/B16336_04_002.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_04_002.jpg)'
- en: Figure 4.2 – Perimeter firewall example, showing NAT and state (session tracking
    or mapping)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2–周界防火墙示例，显示NAT和状态（会话跟踪或映射）
- en: 'So, using this example, what does our configuration look like? It''s as simple
    as the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用这个例子，我们的配置是什么样子的？就像以下这样简单：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This tells the gateway host to masquerade all traffic leaving interface `eth1`
    using the IP address of `eth1`. The `POSTROUTING` keyword tells it to use the
    `POSTROUTING` chain, meaning that this `MASQERADE` operation happens after the
    packet is routed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉网关主机使用`eth1`接口的IP地址对离开接口的所有流量进行伪装。`POSTROUTING`关键字告诉它使用`POSTROUTING`链，这意味着这个`MASQERADE`操作发生在数据包路由之后。
- en: Whether an operation happens pre- or post-routing starts to make a much bigger
    impact when we start to introduce encryption. For instance, if we encrypt traffic
    before or after a NAT operation, it may mean that traffic is encrypted in one
    instance but not the other. So, in this case, the outbound NAT would be the same
    pre- or post-routing. It's a good idea to start defining the order so that there's
    no confusion.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始引入加密时，操作是在路由前还是路由后发生将产生更大的影响。例如，如果我们在NAT操作之前或之后加密流量，这可能意味着流量在一个实例中被加密，而在另一个实例中则没有。因此，在这种情况下，出站NAT将在路由前或后是相同的。最好开始定义顺序，以避免混淆。
- en: There are hundreds of variations on this, but the important thing at this point
    is that you have the basics of how NAT works (in particular the mapping process).
    Let's leave our NAT example and look at how the mangle table works.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这有数百种变体，但在这一点上重要的是你已经了解了NAT的工作原理（特别是映射过程）。让我们离开我们的NAT示例，看看混淆表是如何工作的。
- en: The mangle table
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混淆表
- en: The mangle table is used to manually adjust values in the IP packet as it transits
    our Linux host. Let's consider a brief example – using our firewall example from
    the previous section, what if the internet uplink on interface `eth1` is using
    a `1500` byte packet. DSL links, for instance, usually have some encapsulation
    overhead, and satellite links simply use smaller packets (so that any single-packet
    errors affect less traffic).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 混淆表用于手动调整IP数据包在我们的Linux主机中传输时的值。让我们考虑一个简短的例子–使用我们上一节中的防火墙示例，如果`eth1`接口上的互联网上行使用`1500`字节的数据包。例如，DSL链接通常有一些封装开销，而卫星链接则使用较小的数据包（这样任何单个数据包错误都会影响较少的流量）。
- en: '"No problem," you say. "There''s a whole MTU "discovery" process that happens
    when sessions start up, where the two hosts that are communicating figure out
    what the largest packet possible is between the two parties." However, especially
    with older applications or specific Windows services, this process breaks. Another
    thing that might cause this is if the carrier network is blocking ICMP for some
    reason. This may seem like an extreme special case, but in practice, it comes
    up fairly frequently. Especially with legacy protocols, it''s common to see this
    MTU discovery process break. In situations like this, the mangle table is your
    friend!'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题，”你说。“在会话启动时有一个完整的MTU“发现”过程，通信的两个主机会找出两方之间可能的最大数据包。”然而，特别是对于较旧的应用程序或特定的Windows服务，这个过程会中断。可能导致这种情况的另一件事是，如果运营商网络由于某种原因阻止了ICMP。这可能看起来像是一个极端特例，但实际上，它经常出现。特别是对于传统协议，常见的是发现这个MTU发现过程中断。在这种情况下，混淆表就是你的朋友！
- en: 'This example tells the mangle table "when you see a `SYN` packet, adjust the
    `1412` in this example):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子告诉操纵表“当您看到一个`SYN`数据包时，调整这个例子中的`1412`”：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you are working out the configuration for real, how do you get this "smaller
    number"? If ICMP is being passed, you can use the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在为实际配置进行计算，如何获得这个“较小的数字”？如果ICMP被传递，您可以使用以下命令：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This tells `ping`, "Don't fragment the packet; send a `1400` byte size packet
    with a destination of `8.8.8.8`."
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`ping`，“不要分段数据包；发送一个目的地为`8.8.8.8`的`1400`字节大小的数据包。”
- en: Often, it's a hunt-and-peck procedure to find the "real" size. Keep in mind
    that there are 28 bytes of packet header that's included in this size.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，查找“真实”大小是一个试错过程。请记住，这个大小包括在这个大小中的28个字节的数据包头。
- en: 'Or if ICMP isn''t working, you can use `nping` (from our NMAP section). Here
    we''re telling `nping` to use TCP, port `53`, `mtu` value of `1400` for 1 second
    only:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果ICMP不起作用，您可以使用`nping`（来自我们的NMAP部分）。在这里，我们告诉`nping`使用TCP，端口`53`，`mtu`值为`1400`，仅持续1秒：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In both cases (`ping` and `nping`), you're looking for the largest number that
    works (in `nping`'s case, that would be the largest number where you are still
    seeing `RCVD` packets) to determine that help number for MSS.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下（`ping`和`nping`），您都在寻找适用的最大数字（在`nping`的情况下，这将是您仍然看到`RCVD`数据包的最大数字），以确定MSS的帮助数字。
- en: You can see from this example that the mangle table gets used very infrequently.
    Often you are inserting or removing specific bits in the packet – for instance,
    you can, by traffic type, set the **Type of Service** (**TOS**) or **Differentiated
    Services field CodePoint** (**DSCP**) bits in the packet, to tell the upstream
    carrier what quality of service that specific traffic might need.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中可以看出，操纵表的使用非常少。通常，您会在数据包中插入或删除特定的位 - 例如，您可以根据流量类型设置数据包中的**服务类型**（**TOS**）或**区分服务字段代码点**（**DSCP**）位，以告诉上游运营商特定流量可能需要的服务质量。
- en: Now that we've covered some of the default tables in iptables, let's discuss
    why keeping the order of operations can be critical when building complex tables.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了一些iptables中的默认表，让我们讨论一下在构建复杂表时保持操作顺序的重要性。
- en: Order of operations in iptables
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iptables的操作顺序
- en: With some of the main iptables discussed, why is the order of operations important?
    We touched on one instance already – if you are encrypting traffic using IPSEC,
    there's normally a "match list" to define what traffic is being encrypted. Normally,
    you want this to match on traffic before it gets processed by the NAT table.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 已经讨论了一些主要的iptables，为什么操作顺序很重要？我们已经提到了一个例子 - 如果您正在使用IPSEC加密流量，通常会有一个“匹配列表”来定义哪些流量正在被加密。通常情况下，您希望在NAT表处理流量之前进行匹配。
- en: Similarly, you might be doing policy-based routing. For example, you might want
    to match traffic by source, destination, and protocol, and, for instance, forward
    your backup traffic over the link that has a lower per-packet cost and forward
    your regular traffic over the link that has better speed and latency characteristics.
    You'll usually want to make that decision prior to NAT as well.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可能正在进行基于策略的路由。例如，您可能希望通过源、目的地和协议匹配流量，并且，例如，将备份流量转发到具有较低每个数据包成本的链路上，并将常规流量转发到具有更好速度和延迟特性的链路上。您通常希望在NAT之前做出这个决定。
- en: 'There are several diagrams available to work out what iptables operations happen
    in which sequence. I normally refer to the one maintained by *Phil Hagen* at [https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png](https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个图表可用于确定iptables操作发生的顺序。我通常参考由*Phil Hagen*维护的图表，网址为[https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png](https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png)：
- en: '![Figure 4.3 – Order of operation in iptables'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 - iptables的操作顺序'
- en: '](img/B16336_04_003.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_04_003.jpg)'
- en: Figure 4.3 – Order of operation in iptables
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 - iptables的操作顺序
- en: As you can see, configuring, processing, and especially debugging iptables configurations
    can become extremely complex. In this chapter, we're focusing on the input table,
    specifically to restrict or permit access to services that are running on the
    host. As we proceed on to discuss various services running on Linux, you should
    be able to use this knowledge to see where input rules can be used to protect
    services in your environment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，配置、处理，尤其是调试iptables配置可能变得非常复杂。在本章中，我们专注于输入表，特别是限制或允许在主机上运行的服务的访问。随着我们继续讨论Linux上运行的各种服务，您应该能够利用这些知识，看到输入规则可以用来保护您环境中的服务。
- en: Where can you go next with iptables? As always, review the man page again –
    with roughly 100 pages of syntax and examples, the iptables man pages are a great
    resource if you want to dive deeper into this feature. For instance, as we discussed,
    you can run a Linux host as a router or a NAT-based firewall just using iptables
    and some static routes. These aren't normal use cases in a regular data center,
    though. It's common to run features like this on Linux hosts, but in most cases,
    you would see these executed on a prepackaged Linux distribution such as the VyOS
    distribution or FRR/Zebra package for routers, or the pfSense or OPNsense firewall
    distributions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来您可以用iptables做什么？像往常一样，再次查看man页面 - 大约有100页的语法和示例，如果您想深入了解这个功能，iptables man页面是一个很好的资源。例如，正如我们讨论过的，您可以使用iptables和一些静态路由将Linux主机作为路由器或基于NAT的防火墙。然而，这些不是常规数据中心的正常用例。在Linux主机上运行这些功能是很常见的，但在大多数情况下，您会看到这些功能在预打包的Linux发行版上执行，比如VyOS发行版或路由器的FRR/Zebra软件包，或者pfSense或OPNsense防火墙发行版。
- en: With the basics of iptables mastered, let's tackle the configuration of the
    nftables firewall.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了iptables的基础知识，让我们来解决nftables防火墙的配置。
- en: Configuring nftables
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置nftables
- en: As we discussed at the beginning of this chapter, iptables is being deprecated
    and eventually retired in Linux, in favor of nftables. With that in mind, what
    advantages does using nftables bring?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头讨论的那样，iptables正在被弃用，并最终在Linux中被nftables取代。考虑到这一点，使用nftables有什么优势？
- en: Deploying nftables rules is much quicker than in iptables – under the hood,
    iptables modifies the kernel as each rule is added. This doesn't happen in nftables.
    Related to that, nftables also has an API. This makes it much easier to configure
    using orchestration or "network as code" tools. These tools include apps such
    as Terraform, Ansible, Puppet, Chef, and Salt. What this allows system administrators
    to do is more easily automate the deployment of hosts, so that a new virtual machine
    can be deployed into a private or public cloud in minutes, rather than in hours.
    More importantly, applications that might involve several hosts can be deployed
    in parallel.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 部署nftables规则比在iptables中快得多——在底层，iptables在添加每条规则时都会修改内核。而nftables不会这样做。与此相关，nftables还有一个API。这使得使用编排或“网络即代码”工具更容易进行配置。这些工具包括Terraform、Ansible、Puppet、Chef和Salt等应用程序。这使得系统管理员更容易地自动化主机的部署，因此新的虚拟机可以在几分钟内部署到私有或公共云中，而不是几小时。更重要的是，可能涉及多个主机的应用程序可以并行部署。
- en: nftables also operates much more efficiently in the Linux kernel, so for any
    given ruleset, you can count on nftables to take less CPU. This may not seem like
    a big deal for our ruleset of just four rules, but if you had 40, 400, or 4,000
    rules, or 40 rules on 400 virtual machines, this could add up in a hurry!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: nftables在Linux内核中的操作效率也要高得多，因此对于任何给定的规则集，您可以指望nftables占用更少的CPU。对于我们的仅有四条规则的规则集来说，这可能看起来并不重要，但是如果您有40条、400条或4000条规则，或者在400台虚拟机上有40条规则，这可能会很快累积起来！
- en: 'nftables uses a single command for all operations – `nft`. While you can use
    iptables syntax for compatibility, what you''ll find is that there are no predefined
    tables or chains, and more importantly, you can have multiple operations within
    a single rule. We haven''t talked much about IPv6 yet, but iptables just on its
    own doesn''t handle IPv6 (you''ll need to install a new package for that: ip6tables).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: nftables使用单个命令进行所有操作——“nft”。虽然您可以使用iptables语法进行兼容性，但您会发现没有预定义的表或链，更重要的是，您可以在单个规则中进行多个操作。我们还没有讨论太多关于IPv6的内容，但是iptables本身无法处理IPv6（您需要安装一个新的软件包：ip6tables）。
- en: With the basics covered, let's dive into the command line and the details of
    using the `nft` command to configure the nftables firewall.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 基本知识覆盖后，让我们深入研究命令行和使用“nft”命令配置nftables防火墙的细节。
- en: nftables basic configuration
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nftables基本配置
- en: At this point, it's likely wise to look at the man page for nftables. Also,
    take a look at the man page for the main nftables command – `nft`. This manual
    is even more lengthy and complex than iptables; it's upward of 600 pages long.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，看一下nftables的man页面可能是明智的。还要查看主要nftables命令“nft”的man页面。这个手册比iptables更长、更复杂；长达600多页。
- en: With that in mind, let's deploy the same example configuration that we did for
    iptables. A straight `INPUT` firewall to protect the host is by far the most often-seen
    style of Linux firewall in most data centers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们部署与iptables相同的示例配置。保护主机的直接“INPUT”防火墙是大多数数据中心中最常见的Linux防火墙风格。
- en: First, be sure to document any existing iptables and ip6tables rules that you
    have in place (`iptables –L` and `ip6tables –L`), then clear both (with the `–F`
    option). Just because you can run iptables and nftables simultaneously, doesn't
    mean that it's a good idea to do so. Think of the next person who administers
    this host; they'll see one or the other firewall and think that's all that's been
    deployed. It's always wise to configure things for the next person who will inherit
    the host you're working on!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保记录您已经存在的iptables和ip6tables规则（`iptables –L`和`ip6tables –L`），然后清除两者（使用`-F`选项）。即使您可以同时运行iptables和nftables，也并不意味着这样做是明智的。考虑一下将管理此主机的下一个人；他们将只看到一个防火墙，认为这就是所有已部署的。为了下一个继承您正在处理的主机的人，配置事物总是明智的！
- en: 'If you have an existing iptables ruleset, especially if it''s a complex ruleset,
    then the `iptables-translate` command will turn hours of work into minutes of
    work:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有现有的iptables规则集，特别是如果它是一个复杂的规则集，那么“iptables-translate”命令将把几小时的工作转化为几分钟的工作：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using this syntax, our iptables rules turn into a very similar set of nftables
    rules:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种语法，我们的iptables规则变成了一组非常相似的nftables规则：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that we created a table and a chain first, before we could add rules.
    Now to list our ruleset:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在添加规则之前，我们首先创建了一个表和一个链。现在来列出我们的规则集：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As in so many Linux network constructs, nftables rules are not persistent at
    this point; they'll only be there until the next system reload (or service restart).
    The default `nftools` ruleset is in `/etc/nftools.conf`. You can make our new
    rules persistent by adding them to this file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多Linux网络构造一样，nftables规则在这一点上并不是持久的；它们只会在下一次系统重新加载（或服务重新启动）之前存在。默认的“nftools”规则集在“/etc/nftools.conf”中。您可以通过将它们添加到此文件中使我们的新规则持久。
- en: Especially in a server configuration, updating the `nftools.conf` file can end
    up with a pretty complex construction. This can be simplified considerably by
    breaking the `nft` configuration into logical sections and breaking them out into
    `include` files.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在服务器配置中，更新“nftools.conf”文件可能会变得非常复杂。通过将“nft”配置分解为逻辑部分并将其拆分为“include”文件，可以大大简化这一过程。
- en: Using include files
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用包含文件
- en: 'What else can you do? You can set up a "case" structure, segmenting your firewall
    rules to match your network segments:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以做什么？您可以设置一个“case”结构，将防火墙规则分段以匹配您的网络段：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the three chains defined have their own sets of inbound rules or outbound
    rules.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，定义的三个链都有自己的入站规则或出站规则集。
- en: You can see that each rule is a `match` clause, which then jumps the matching
    traffic to a ruleset that governs the subnet.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到每个规则都是一个“match”子句，然后将匹配的流量跳转到管理子网的规则集。
- en: 'Rather than making a single, monolithic nftables file, you can separate statements
    in a logical way by using `include` statements. This allows you to, for instance,
    maintain a single rules file for all web servers, SSH servers, or whatever other
    server or service class, so that you end up with a number of standard `include`
    files. These files can then be included as needed, in a logical order in the master
    file on each host:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与其制作一个单一的、庞大的nftables文件，不如使用`include`语句以逻辑方式分隔语句。这样你可以维护一个单一的规则文件，用于所有web服务器、SSH服务器或其他服务器或服务类，这样你最终会得到一些标准的`include`文件。这些文件可以根据需要在每个主机的主文件中以逻辑顺序包含：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Or, you can make rules more and more complex – to the point where you have rules
    based on IP header fields such as **Differentiated Services Code Point** (**DSCP**),
    which are six bits in the packet that are used to determine or enforce **Quality
    of Service** (**QOS**), in particular for the voice of video packets. You might
    also decide to apply firewall rules pre- or post-routing (which really helps if
    you are doing IPSEC encryption).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使规则变得越来越复杂-到了你基于IP头字段的规则，比如**区分服务代码点**（**DSCP**），这是数据包中用于确定或强制执行**服务质量**（**QOS**）的六位，特别是对于语音或视频数据包。你可能还决定在路由前或路由后应用防火墙规则（如果你正在进行IPSEC加密，这真的很有帮助）。
- en: Removing our Firewall Configuration
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除我们的防火墙配置
- en: 'Before we can proceed to the next chapter, we should remove our example firewall
    configuration, with the following two commands:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以继续下一章之前，我们应该删除我们的示例防火墙配置，使用以下两个命令：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: While many distributions still have iptables as their default firewall, over
    time we can expect to see that situation shift to the newer nftables architecture.
    It will take some years before this transition is complete, and even then the
    odd "surprise" will pop up, as you find hosts that you didn't have in your inventory,
    or devices that you didn't realize were Linux-based computers – **Internet of
    Things** (**IoT**) devices such as thermostats, clocks, or elevator controls come
    to mind. This chapter has gotten us started with both architectures.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然许多发行版仍将iptables作为默认防火墙，但随着时间的推移，我们可以预期这种情况会转向更新的nftables架构。在这个过渡完成之前还需要一些年头，即使在那时，也会出现一些“意外”，比如你发现了你清单中没有的主机，或者你没有意识到的基于Linux的设备-物联网设备，比如恒温器、时钟或电梯控制器。本章让我们对这两种架构有了初步了解。
- en: With roughly 150 pages in the man pages for nftables and 20 for iptables, that
    documentation is essentially a standalone book all on its own. We've scratched
    the surface of the tool, but in a modern data center, defining an ingress filter
    on each host is the most common use you'll see for nftables. However, as you explore
    the security requirements in your data center, outbound and transit rules may
    certainly have a place in your strategy. I hope this discussion is a good start
    on your journey!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在nftables手册页面中大约有150页，iptables手册页面中有20页，这些文档本质上就是一本独立的书。我们已经初步了解了这个工具，但在现代数据中心，为每个主机定义入口过滤器是你最常见的nftables用法。然而，当你探索数据中心的安全要求时，出站和过境规则可能确实在你的策略中占据一席之地。我希望这次讨论对你的旅程是一个良好的开始！
- en: If you find any of the concepts that we've discussed in this chapter fuzzy at
    all, now is a great time to review them. In the next chapter, we'll be discussing
    an overall hardening approach to Linux servers and services – the Linux firewall,
    of course, is a key part of this discussion!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现我们在本章讨论的任何概念都有些模糊，现在是一个很好的时间来复习它们。在下一章中，我们将讨论Linux服务器和服务的整体加固方法-当然，Linux防火墙是这次讨论的关键部分！
- en: Questions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是一些问题列表，供你测试对本章材料的了解。你可以在*附录*的*评估*部分找到答案：
- en: If you were starting a new firewall strategy, which method would you choose?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你要开始一个新的防火墙策略，你会选择哪种方法？
- en: How would you implement central standards for firewalls?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何实施防火墙的中央标准？
- en: Further reading
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Man pages for iptables: [https://linux.die.net/man/8/iptables](https://https://linux.die.net/man/8/iptables%0D)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iptables的手册页面：[https://linux.die.net/man/8/iptables](https://https://linux.die.net/man/8/iptables%0D)
- en: 'iptables processing flowchart (Phil Hagen):'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iptables处理流程图（Phil Hagen）：
- en: '[https://stuffphilwrites.com/2014/09/iptables-processing-flowchart/](https://stuffphilwrites.com/2014/09/iptables-processing-flowchart/)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stuffphilwrites.com/2014/09/iptables-processing-flowchart/](https://stuffphilwrites.com/2014/09/iptables-processing-flowchart/)'
- en: '[https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png](https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png](https://stuffphilwrites.com/wp-content/uploads/2014/09/FW-IDS-iptables-Flowchart-v2019-04-30-1.png)'
- en: 'Man pages for NFT: [https://www.netfilter.org/projects/nftables/manpage.html](https://https://www.netfilter.org/projects/nftables/manpage.html%0D)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFT的手册页面：[https://www.netfilter.org/projects/nftables/manpage.html](https://https://www.netfilter.org/projects/nftables/manpage.html%0D)
- en: 'nftables wiki: [https://wiki.nftables.org/wiki-nftables/index.php/Main_Page](https://https://wiki.nftables.org/wiki-nftables/index.php/Main_Page%0D)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nftables维基：[https://wiki.nftables.org/wiki-nftables/index.php/Main_Page](https://https://wiki.nftables.org/wiki-nftables/index.php/Main_Page%0D)
- en: '*nftables in 10 minutes*: [https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes](https://https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*10分钟内的nftables*：[https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes](https://https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes)'
