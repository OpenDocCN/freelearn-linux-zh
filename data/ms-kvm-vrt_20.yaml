- en: '*Chapter 16*: Troubleshooting Guidelines for the KVM Platform'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《第16章》：KVM平台的故障排除指南
- en: If you've followed this book all the way from [*Chapter 1*](B14834_01_Final_ASB_ePub.xhtml#_idTextAnchor016),
    *Understanding Linux Virtualization*, then you'll know we went through *a lot*
    together in this book – hundreds and hundreds of pages of concepts and practical
    aspects, including configuration examples, files and commands – everything. 700
    or so pages of it. So far, we've almost completely ignored troubleshooting as
    part of that journey. We didn't do this on the premise that everything just *works*
    in Linux and that we didn't have any issues at all and that we achieved a state
    of *nirvana* while going through this book cover to cover.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从《第1章》《理解Linux虚拟化》一直跟着这本书走到现在，那么您会知道在这本书中我们一起经历了很多 - 数百页的概念和实际方面，包括配置示例、文件和命令
    - 一切。大约700页。到目前为止，我们几乎完全忽略了故障排除作为旅程的一部分。我们并不是基于Linux中一切都只是“工作”，我们根本没有任何问题，而且我们在阅读全书的过程中达到了一种“涅槃”的状态。
- en: It was a journey riddled with various types of issues. Some of them aren't worth
    mentioning as they were our own mistakes. Mistakes like the ones we made (and
    you will surely make more too) mostly come from the fact that we mistyped something
    (in a command or configuration file). Basically, humans play a big role in IT.
    But some of these issues were rather frustrating. For example, implementing SR-IOV
    required a lot of time as we had to find different types of problems at the hardware,
    software, and configuration levels to make it work. oVirt was quite quirky, as
    we'll soon explain. Eucalyptus was interesting, to put it mildly. Although we
    used it *a lot* before, cloudbase-init was really complicated and required a lot
    of our time and attention, which turned out not to be due to something we did
    – it was just the cloudbase-init version. But overall, this just further proved
    a general point from our previous chapter – reading about various IT subjects
    in books, articles, and blog posts – is a really good approach to configuring
    a lot of things correctly from the start. But even then, you'll still need a bit
    of troubleshooting to make everything picture perfect.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一段充满各种问题的旅程。其中一些不值一提，因为它们是我们自己的错误。我们犯的错误（而且您肯定也会犯更多）大多来自于我们输入错误（在命令或配置文件中）。基本上，人类在IT中扮演着重要角色。但其中一些问题确实令人沮丧。例如，实施SR-IOV需要很多时间，因为我们不得不在硬件、软件和配置层面找到不同类型的问题才能使其正常工作。oVirt相当古怪，我们很快会解释。Eucalyptus有点有趣，姑且这么说。尽管我们之前经常使用它，但cloudbase-init真的很复杂，需要我们花费很多时间和注意力，结果证明这并不是由于我们做了什么
    - 它只是cloudbase-init的版本。但总的来说，这进一步证明了我们上一章的一个普遍观点 - 在书籍、文章和博客文章中阅读各种IT主题，是一个确实不错的方法，可以从一开始就正确配置很多东西。但即便如此，您仍然需要一些故障排除来使一切完美。
- en: Everything is great and amazing once you install a service and start using it,
    but it seldom happens that way the first time round. Everything we used in this
    book was actually installed to enable us to test different configurations and
    grab the necessary screenshots, but at the same time, we wanted to make sure that
    they can actually be installed and configured in a more structured, procedural
    way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了一个服务并开始使用它，一切都很棒和令人惊讶，但第一次很少会这样。我们在本书中使用的一切实际上都是为了测试不同的配置并抓取必要的截图而安装的，但与此同时，我们也希望确保它们实际上可以以更有结构、程序化的方式安装和配置。
- en: So, let's start with some simple things related to services, packages, and logging.
    Then, we'll move on to more advanced concepts and tools for troubleshooting, described
    through various examples that we have covered along the way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从与服务、软件包和日志记录相关的一些简单事物开始。然后，我们将继续介绍更高级的故障排除概念和工具，通过我们一路涵盖的各种示例进行描述。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Verifying the KVM service status
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证KVM服务状态
- en: KVM service logging
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM服务日志记录
- en: Enabling debug mode logging
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用调试模式日志记录
- en: Advanced troubleshooting tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级故障排除工具
- en: Best practices for troubleshooting KVM issues
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM问题的最佳实践
- en: Verifying the KVM service status
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证KVM服务状态
- en: We're starting off with the simplest of all examples – verifying the KVM service
    status and some of its normal influence on host configuration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最简单的示例开始 - 验证KVM服务状态及其对主机配置的一些正常影响。
- en: 'In [*Chapter 3*](B14834_03_Final_ASB_ePub.xhtml#_idTextAnchor049), *Installing
    a KVM Hypervisor, libvirt, and ovirt*, we did a basic installation of the overall
    KVM stack by installing `virt module` and using the `dnf` command to deploy various
    packages. There are a couple of reasons why this might not end up being a good
    idea:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在《第3章》《安装KVM Hypervisor、libvirt和ovirt》中，我们通过安装`virt module`并使用`dnf`命令部署各种软件包，对整个KVM堆栈进行了基本安装。有几个原因可能导致这不是一个好主意：
- en: 'A lot of servers, desktops, workstations, and laptops come pre-configured with
    virtualization turned off in BIOS. If you''re using an Intel-based CPU, make sure
    that you find all the VT-based options and enable them (VT, VT-d, VT I/O). If
    you''re using an AMD-based CPU, make sure that you turn on AMD-V. There''s a simple
    test that you can do to check if virtualization is enabled. If you boot any Linux
    live distribution, go to the shell and type in the following command:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多服务器、台式机、工作站和笔记本电脑在出厂时都预先配置为关闭BIOS中的虚拟化。如果您使用基于英特尔的CPU，请确保找到所有基于VT的选项并启用它们（VT、VT-d、VT
    I/O）。如果您使用基于AMD的CPU，请确保打开AMD-V。您可以进行一个简单的测试来检查虚拟化是否已启用。如果您启动任何Linux实时发行版，进入shell并输入以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also use the following command, if you already installed your Linux
    host and the appropriate packages that we mentioned in [*Chapter 3*](B14834_03_Final_ASB_ePub.xhtml#_idTextAnchor049),
    *Installing a KVM hypervisor, libvirt, and ovirt*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Linux主机和我们在《第3章》《安装KVM Hypervisor、libvirt和ovirt》中提到的适当软件包，您也可以使用以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you don't get any output from this command, your system either doesn't support
    virtualization (less likely) or doesn't have virtualization features turned on.
    Make sure that you check your BIOS settings.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从这个命令中没有得到任何输出，那么您的系统要么不支持虚拟化（可能性较小），要么没有打开虚拟化功能。确保您检查您的BIOS设置。
- en: Your networking configuration and/or package repository configuration might
    not be set up correctly. As we'll repeatedly state in this chapter, please, start
    with the simplest things – don't go off on a journey of trying to find some super
    complex reason why something isn't working. Keep it simple. For network tests,
    try using the `ping` command on some well-known server, such as google.com. For
    repository problems, make sure that you check your `/etc/yum.repos.d` directory.
    Try using the `yum clean all` and `yum update` commands. Repository problems are
    more likely to happen on some other distributions than CentOS/Red Hat, but still,
    they can happen.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的网络配置和/或软件包存储库配置可能没有正确设置。正如我们在本章中反复强调的，请从最简单的事情开始——不要试图找出某些超级复杂的原因，为什么某些东西不起作用。保持简单。对于网络测试，请尝试使用`ping`命令对一些知名服务器进行测试，比如google.com。对于存储库问题，请确保您检查`/etc/yum.repos.d`目录。尝试使用`yum
    clean all`和`yum update`命令。存储库问题更有可能发生在一些其他发行版而不是CentOS/Red Hat上，但仍然可能发生。
- en: 'After the deployment process has finished successfully, make sure that you
    start and enable KVM services by using the following commands:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署过程成功完成后，请确保使用以下命令启动和启用KVM服务：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Considering this, there are at least three things to remember:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，至少有三件事需要记住：
- en: 'Make sure that these two services are actually running by typing in the following
    commands:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保这两个服务实际上正在运行，通过输入以下命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you're configuring more advanced settings such as SR-IOV, make sure that
    you read your server's manual to select a correct slot that is SR-IOV compatible.
    On top of that, make sure that you have a compatible PCI Express card and BIOS
    that's configured correctly. Otherwise, you won't be able to make it work.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在配置更高级的设置，比如SR-IOV，请确保阅读服务器的手册，选择一个与SR-IOV兼容的正确插槽。此外，请确保您有兼容的PCI Express卡和正确配置的BIOS。否则，您将无法使其工作。
- en: When you start the libvirt service, it usually comes with some sort of pre-defined
    firewall configuration. Keep that in mind in case you ever decide to disable libvirt
    services as the firewall rules will almost always still be there. That might require
    a bit of additional configuration.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您启动libvirt服务时，它通常会带有某种预定义的防火墙配置。记住这一点，以防您决定禁用libvirt服务，因为防火墙规则几乎总是还在那里。这可能需要一些额外的配置。
- en: The next step in your troubleshooting journey will be checking through some
    of the log files. And there are plenty to choose from – KVM has its own, oVirt
    has its own, as does Eucalyptus, ELK, and so on. So, make sure that you know these
    services well so that you can check the correct log files for the situation you're
    trying to troubleshoot. Let's start with KVM services logging.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您故障排除旅程的下一步将是检查一些日志文件。有很多选择——KVM有自己的，oVirt有自己的，Eucalyptus也有自己的，ELK等等。因此，请确保您对这些服务非常了解，以便您可以检查正确的日志文件，以解决您要解决的情况。让我们从KVM服务日志开始。
- en: KVM services logging
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KVM服务日志
- en: 'When discussing KVM services logging, there are a couple of locations that
    we need to be aware of:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论KVM服务日志时，有一些位置是我们需要注意的：
- en: Let's say that you're logged in as root in the GUI and that you started virt-manager.
    This means that you have a `virt-manager.log` file located in the `/root/.cache/virt-manager`
    directory. It's really verbose, so be patient when reading through it.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设您以root用户身份登录到GUI，并启动了virt-manager。这意味着您在`/root/.cache/virt-manager`目录中有一个`virt-manager.log`文件。它非常冗长，所以在阅读时请耐心等待。
- en: The `/etc/libvirt/libvirtd.conf` file is libvirtd's configuration file and contains
    a lot of interesting options, but some of the most important options are actually
    located almost at the end of the file and are related to auditing. You can select
    the commented-out options (`audit_level` and `audit_logging`) to suit your needs.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/libvirt/libvirtd.conf`文件是libvirtd的配置文件，包含了许多有趣的选项，但一些最重要的选项实际上位于文件的末尾，并与审计相关。您可以选择注释掉的选项（`audit_level`和`audit_logging`）来满足您的需求。'
- en: The `/var/log/libvirt/qemu` directory contains logs and rotated logs for all
    of the virtual machines that were ever created on our KVM host.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/log/libvirt/qemu`目录包含了在我们的KVM主机上创建的所有虚拟机的日志和旋转日志。'
- en: Also, be sure to check out a command called `auvirt`. It's really handy as it
    tells you basic information about the virtual machines on your KVM host – both
    virtual machines that are still there and/or successfully running and the virtual
    machines that we tried to install and failed at doing so. It pulls its data from
    audit logs, and you can use it to display information about a specific virtual
    machine we need as well. It also has a very debug-level option called `--all-events`,
    if you want to check every single little detail about any virtual machine that
    was – or still is – an object on the KVM host.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请务必查看一个名为`auvirt`的命令。它非常方便，因为它可以告诉您有关KVM主机上的虚拟机的基本信息——仍然存在和/或成功运行的虚拟机，以及我们尝试安装但失败的虚拟机。它从审计日志中获取数据，您也可以使用它来显示我们需要的特定虚拟机的信息。它还有一个非常调试级别的选项叫做`--all-events`，如果您想检查关于KVM主机上的任何虚拟机的每一个细节。
- en: Enabling debug mode logging
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用调试模式日志记录
- en: 'There''s another approach to logging in KVM: configuring debug logging. In
    the libvirtd configuration file that we just mentioned, there are additional settings
    you can use to configure this very option. So, if we scroll down to the `Logging
    controls` part, these are the settings that we can work with:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在KVM中还有另一种日志记录方法：配置调试日志记录。在我们刚提到的libvirtd配置文件中，有其他设置可以用来配置这个选项。因此，如果我们滚动到`Logging
    controls`部分，这些是我们可以使用的设置：
- en: '`log_level`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_level`'
- en: '`log_filters`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_filters`'
- en: '`log_outputs`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_outputs`'
- en: 'Let''s explain them step by step. The first option – `log_level` – describes
    log verbosity. This option has been deprecated since libvirt version 4.4.0\. In
    the `Logging controls` section of the file, there''s additional documentation
    hardcoded into the file to make things easier. For this specific option, this
    is what the documentation says:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地解释它们。第一个选项 - `log_level` - 描述了日志详细程度。自从libvirt版本4.4.0起，此选项已被弃用。在文件的`日志控制`部分中，还有额外的文档硬编码到文件中，以使事情变得更容易。对于这个特定的选项，文档中是这样说的：
- en: '![Figure 16.1 – Logging controls in libvirtd.conf'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.1 - libvirtd.conf中的日志控制'
- en: '](img/B14834_16_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_01.jpg)'
- en: Figure 16.1 – Logging controls in libvirtd.conf
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 - libvirtd.conf中的日志控制
- en: What people usually do is see the first part of this output (Logging level description),
    go to the last line (`Iog_level`), set it to 1, save, restart the `libvirtd` service,
    and be done with it. The problem is the text part in-between. It specifically
    says that `journald` does rate limiting so that it doesn't get hammered with logs
    from one service only and instructs us to use the `log_filters` setting instead.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 人们通常会看到此输出的第一部分（日志级别描述），转到最后一行（`Iog_level`），将其设置为1，保存，重新启动`libvirtd`服务，然后完成。问题在于中间的文本部分。它明确表示`journald`进行速率限制，以便它不会被来自一个服务的日志淹没，并指示我们改用`log_filters`设置。
- en: 'Let''s do that, then – let''s use `log_filters`. A bit lower in the configuration
    file, there''s a section that looks like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们这样做 - 让我们使用`log_filters`。在配置文件的稍低处，有一个看起来像这样的部分：
- en: '![Figure 16.2 – Logging filters options in libvirtd.conf'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.2 - libvirtd.conf中的日志过滤器选项'
- en: '](img/B14834_16_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_02.jpg)'
- en: Figure 16.2 – Logging filters options in libvirtd.conf
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 - libvirtd.conf中的日志过滤器选项
- en: This gives us various options we can use to set different logging options per
    object types, which is great. It gives us options to increase the verbosity of
    things that we're interested in at a desired level, while keeping the verbosity
    of other object types to a minimum. What we need to do is remove the comment part
    of the last line (`#log_filters="1:qemu 1:libvirt 4:object 4:json 4:event 1:util"`
    should become `log_filters="1:qemu 1:libvirt 4:object 4:json 4:event 1:util"`)
    and configure its settings so that they match our requirements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了各种选项，我们可以使用不同的日志选项来设置不同的对象类型，这很棒。它为我们提供了增加我们感兴趣的事物的详细程度的选项，同时将其他对象类型的详细程度保持在最低水平。我们需要做的是删除最后一行的注释部分（`#log_filters="1:qemu
    1:libvirt 4:object 4:json 4:event 1:util"`应该变成`log_filters="1:qemu 1:libvirt 4:object
    4:json 4:event 1:util"`），并配置其设置以使其符合我们的要求。
- en: 'The third option relates to where we want our debug logging output file to
    be:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选项涉及我们想要将调试日志输出文件放在哪里：
- en: '![Figure 16.3 – Logging outputs options in libvirtd.conf'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.3 - libvirtd.conf中的日志输出选项'
- en: '](img/B14834_16_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_03.jpg)'
- en: Figure 16.3 – Logging outputs options in libvirtd.conf
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3 - libvirtd.conf中的日志输出选项
- en: Important Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: After changing any of these settings, we need to make sure that we restart the
    `libvirtd` service by typing in the `systemctl restart libvirtd` command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 更改任何这些设置后，我们需要确保通过键入`systemctl restart libvirtd`命令来重新启动`libvirtd`服务。
- en: 'If we''re only interested in client logs, we need to set an environment variable
    called `LIBVIRT_LOG_OUTPUTS` to something like this (let''s say we want DEBUG-level
    logging):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只对客户端日志感兴趣，我们需要设置一个名为`LIBVIRT_LOG_OUTPUTS`的环境变量为类似于这样的内容（假设我们想要DEBUG级别的日志）：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All these options are valid until the next `libvirtd` service restart, which
    is quite handy for permanent settings. However, there''s a runtime option that
    we can use when we need to debug a bit on the fly, without resorting to permanent
    configuration. That''s why we have a command called `virt-admin`. We can use it
    to set our own settings. For example, let''s see how we can use it to get our
    current settings, and then how to use it to set temporary settings:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选项都有效，直到下一次`libvirtd`服务重启，这对于永久设置非常方便。但是，当我们需要临时调试而不需要使用永久配置时，还有一个运行时选项可以使用。这就是为什么我们有一个名为`virt-admin`的命令。我们可以使用它来设置我们自己的设置。例如，让我们看看如何使用它来获取我们当前的设置，然后如何使用它来设置临时设置：
- en: '![Figure 16.4 – Runtime libvirtd debugging options'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.4 - Runtime libvirtd调试选项'
- en: '](img/B14834_16_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_04.jpg)'
- en: Figure 16.4 – Runtime libvirtd debugging options
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 - Runtime libvirtd调试选项
- en: 'We can also delete these settings by issuing the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过发出以下命令来删除这些设置：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is something that's definitely recommended after we're done debugging.
    We don't want to use our log space for nothing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是在我们完成调试后推荐的事情。我们不想把我们的日志空间用于无用的事情。
- en: 'In terms of straight-up debugging virtual machines – apart from these logging
    options – we can also use serial console emulation to hook up to the virtual machine
    console. This is something that we''d do if we can''t get access to a virtual
    machine in any other way, especially if we''re not using a GUI in our environments,
    which is often the case in production environments. Accessing the console can
    be done as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就纯粹调试虚拟机而言 - 除了这些日志选项之外 - 我们还可以使用串行控制台仿真来连接到虚拟机控制台。如果我们无法以其他方式访问虚拟机，尤其是在我们的环境中不使用GUI的情况下，这通常是在生产环境中的情况。访问控制台可以按以下方式完成：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding command, `kvm_domain_name` is the name of the virtual machine
    that we want to connect to via the serial console.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`kvm_domain_name`是我们想要通过串行控制台连接的虚拟机的名称。
- en: Advanced troubleshooting tools
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级故障排除工具
- en: 'Depending on the subject – networking, hardware and software problems, or specific
    application problems – there are different tools that we can use to troubleshoot
    problems in our environments. Let''s briefly go over some of these methods, with
    the chapters of this book in mind as we troubleshoot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据主题 - 网络、硬件和软件问题，或特定应用程序问题 - 我们可以使用不同的工具来排除我们环境中的问题。让我们简要地回顾一些这些方法，同时牢记本书的章节，以便我们排除故障：
- en: oVirt problems
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: oVirt问题
- en: Problems with snapshots and templates
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照和模板问题
- en: Virtual machine customization issues
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机定制问题
- en: Ansible issues
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible问题
- en: OpenStack problems
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack问题
- en: Eucalyptus and AWS combo problems
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eucalyptus和AWS组合问题
- en: ELK stack issues
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELK堆栈问题
- en: 'Interestingly enough, one thing that we usually don''t have problems with when
    dealing with KVM virtualization is networking. It''s really well documented –
    from KVM bridges all the way to open vSwitch – and it''s just the matter of following
    the documentation. The only exception is related to firewall rules, which can
    be a handful, especially when dealing with oVirt and remote database connections
    while keeping a minimal security footprint. If you''re interested in this, make
    sure that you check out the following link: [https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy](https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，当我们处理KVM虚拟化时，通常不会遇到网络问题。这些都有很好的文档支持——从KVM桥接到open vSwitch——只需要按照文档进行操作。唯一的例外是与防火墙规则相关的问题，特别是在处理oVirt和远程数据库连接时，同时保持最小的安全性。如果你对此感兴趣，请确保查看以下链接：[https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy](https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy)。
- en: There's a big table of ports later in that article describing which port gets
    used for what and which protocols they use. Also, there's a table of ports that
    need to be configured at the oVirt host level. We recommend that you use this
    article if you're putting oVirt into production.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章的后面有一个大表格描述了每个端口用于什么以及它们使用的协议。此外，还有一个需要在oVirt主机级别配置的端口表。如果你要将oVirt投入生产，我们建议你使用这篇文章。
- en: oVirt
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: oVirt
- en: 'There are two common problems that we often encounter when dealing with oVirt:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理oVirt时，我们经常遇到两个常见问题：
- en: '*Installation problems*: We need to slow down when we''re typing installation
    options into the engine setup and configure things correctly.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装问题*：当我们在引擎设置中输入安装选项并正确配置事物时，我们需要放慢速度。'
- en: '*Update problems* : These can either be related to incorrectly updating oVirt
    or the underlying system.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新问题*：这些问题可能与不正确地更新oVirt或底层系统有关。'
- en: Installation problems are fairly simple to troubleshoot as they usually happen
    when we're just starting to deploy oVirt. This means that we can afford the luxury
    of just stopping the installation process and starting from scratch. Everything
    else will just be too messy and complicated.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 安装问题通常很容易排除故障，因为它们通常发生在我们刚开始部署oVirt时。这意味着我们可以奢侈地停止安装过程，从头开始。其他一切都会变得太混乱和复杂。
- en: Update problems, however, deserve a special mention. Let's deal with both subsets
    of oVirt update issues and explain them in a bit more detail.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更新问题值得特别一提。让我们处理oVirt更新问题的两个子集并对它们进行更详细的解释。
- en: 'Updating the oVirt Engine itself requires doing the thing that most of us just
    dislike doing – reading through heaps and heaps of documentation. The first thing
    that we need to check is which version of oVirt are we running. If we''re – for
    example – running version 4.3.0 and we want to upgrade to 4.3.7, this is a minor
    update path that''s pretty straightforward. We need to back up our oVirt database
    first:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 更新oVirt Engine本身需要做的事情是我们大多数人都不喜欢做的——阅读大量的文档。我们需要首先检查我们正在运行的oVirt版本。例如，如果我们正在运行4.3.0版本，想要升级到4.3.7版本，这是一个相对简单的次要更新路径。我们需要首先备份我们的oVirt数据库：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We do this just as a precaution. Then, later on, if something does get broken,
    we can use the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做只是作为一种预防措施。然后，如果以后出现问题，我们可以使用以下命令：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you didn''t deploy the DWH service and its database, you can ignore the
    `--provision-dwh-db` option. Then, we can do the standard procedure:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有部署DWH服务及其数据库，可以忽略`--provision-dwh-db`选项。然后，我们可以执行标准程序：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This should take about 10 minutes and cause no harm at all. But it's still better
    to be safe than sorry and back up the database before doing that.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该大约需要10分钟，不会造成任何伤害。但最好还是小心为妙，在这之前备份数据库。
- en: 'If we''re, however, migrating from some older version of oVirt to the latest
    one – let''s say, from version 4.0.0, or 4.1.0, or 4.2.0 to version 4.3.7 – that''s
    a completely different procedure. We need to go to the ovirt.org website and read
    through the documentation. For example, let''s say that we''re updating from 4.0
    to 4.3\. There''s documentation on ovirt.org that describes all these processes.
    You can start here: [https://www.ovirt.org/documentation/upgrade_guide/](https://www.ovirt.org/documentation/upgrade_guide/).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们从旧版本的oVirt迁移到最新版本——比如从4.0.0版本、4.1.0版本或4.2.0版本迁移到4.3.7版本——那就是一个完全不同的过程。我们需要去ovirt.org网站阅读文档。例如，假设我们要从4.0升级到4.3。ovirt.org上有描述所有这些过程的文档。你可以从这里开始：[https://www.ovirt.org/documentation/upgrade_guide/](https://www.ovirt.org/documentation/upgrade_guide/)。
- en: This will give us 20 or so substeps that we need to complete to successfully
    upgrade. Please be careful and patient, as these steps are written in a very clear
    order and need to be implemented that way.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们大约20个子步骤，我们需要完成才能成功升级。请小心和耐心，因为这些步骤是按照非常清晰的顺序编写的，需要按照这种方式实施。
- en: Now that we've covered oVirt troubleshooting in terms of upgrading, let's delve
    into *OS and package upgrades* as that's an entirely different discussion with
    much more to consider.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了升级方面的oVirt故障排除，让我们深入研究*操作系统和软件包升级*，因为这是一个完全不同的讨论，需要考虑的事情更多。
- en: 'Keeping in mind that oVirt has its own prerequisites, ranging from CPU, memory,
    and storage requirements to firewall and repository requirements, we can''t just
    blindly go and use a system-wide command such as the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到oVirt有自己的先决条件，从CPU、内存和存储需求到防火墙和存储库需求，我们不能盲目地使用系统范围的命令，比如以下命令：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can't expect oVirt to be happy with that. It just won't, and this has happened
    to us many times, both in production environments and while writing this book.
    We need to check which packages are going to be deployed and check if they're
    in some co-dependent relationship to oVirt. If there are such packages, you need
    to make sure that you do the engine-backup procedure that we mentioned earlier
    in this chapter. It will save you from a lot of problems.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能指望oVirt对此感到满意。它不会，这在生产环境和写作本书时都发生过很多次。我们需要检查将部署哪些软件包，并检查它们是否与oVirt存在某种相互依赖关系。如果有这样的软件包，你需要确保按照本章前面提到的进行引擎备份过程。这将避免给你带来很多问题。
- en: It's not only the oVirt Engine that can be a problem – *updating KVM hosts*
    that oVirt has in its inventory can also be quite a bit melodramatic. The oVirt
    agent (`vdsm`) that gets deployed on hosts either by the oVirt Engine or our manual
    installation procedures, as well as its components, also have their own co-dependencies
    that can be affected by a system-wide `yum -y update` command. So, put the handbrake
    on before just accepting upgrades as it might bring a lot of pain later. Make
    sure that you check the `vdsm` logs (usually located in the `/var/log/vdsm` directory).
    These log files are very helpful when you're trying to decipher what went wrong
    with `vdsm`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅oVirt Engine可能会出问题-更新oVirt库存中的KVM主机也可能会相当戏剧化。oVirt引擎或我们的手动安装程序部署在主机上的oVirt代理（`vdsm`）及其组件，也有它们自己的相互依赖关系，可能会受到系统范围内的`yum
    -y update`命令的影响。因此，在接受升级之前，要先拉手刹，因为它可能会带来很多痛苦。确保你检查`vdsm`日志（通常位于`/var/log/vdsm`目录中）。当你试图解释`vdsm`出了什么问题时，这些日志文件非常有帮助。
- en: oVirt and KVM storage problems
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: oVirt和KVM存储问题
- en: Most storage problems that we come across are usually related to either LUN
    or share presentation to hosts. Specifically, when you're dealing with block storage
    (Fibre Channel or iSCSI), we need to make sure that we don't zone out or mask
    out a LUN from the host, as the host won't see it. The same principle applies
    to NFS shares, Gluster, CEPH, or any other kind of storage that we're using.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到的大多数存储问题通常与LUN或共享向主机的呈现有关。特别是当你处理块存储（光纤通道或iSCSI）时，我们需要确保不要从主机中排除或屏蔽LUN，否则主机将看不到它。相同的原则也适用于NFS共享、Gluster、CEPH或我们正在使用的任何其他类型的存储。
- en: The most common problem apart from these pre-configuration issues is related
    to failover – a scenario where a path toward a storage device fails. That's when
    we are very happy if we scaled out our storage or storage network infrastructure
    a bit – we added additional adapters, additional switches, configured multipathing
    (MPIO), and so on. Make sure that you check your storage device vendor's documentation
    and follow along with the best practices for a specific storage device. Believe
    us when we say this – iSCSI storage configuration and its default settings are
    a world apart from configuring Fibre Channel storage, especially when multipathing
    is concerned. For example, when using MPIO with iSCSI, it's much happier and snappier
    if you configure it properly. You'll find more details about this process in the
    *Further reading* section at the end of this chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些预配置问题之外，最常见的问题与故障转移有关-即路径指向存储设备失败的情况。这时，如果我们扩展了存储或存储网络基础设施一点-增加了额外的适配器、额外的交换机、配置了多路径(MPIO)等，我们会感到非常高兴。确保你查阅存储设备供应商的文档，并按照特定存储设备的最佳实践进行操作。相信我们说的-
    iSCSI存储配置及其默认设置与配置光纤通道存储有天壤之别，特别是涉及多路径时。例如，使用iSCSI的MPIO，如果正确配置，它会更加愉快和敏捷。你将在本章末尾的*进一步阅读*部分找到更多关于这个过程的细节。
- en: If you're using IP-based storage, make sure that multiple paths toward your
    storage device(s) use separate IP subnets as everything else is a bad idea. LACP-like
    technologies and iSCSI don't work in same sentence together and you'll be troubleshooting
    a technology that's not meant for storage connections and is working properly,
    while you're thinking that it's not. We need to know what we're troubleshooting;
    otherwise, troubleshooting makes no sense. Creating LACP for iSCSI equals still
    using one path for iSCSI connections, which means wasting network connectivity
    that doesn't actively get used except for in the case of a failover. And you don't
    really need LACP or similar technologies for that. One notable exception might
    be blade servers as you're really limited in terms of upgrade options on blades.
    But even then, the solution to the *we need more bandwidth from our host to storage*
    problem is to get a faster network or Fibre Channel adapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用基于IP的存储，请确保通向存储设备的多个路径使用单独的IP子网，因为其他一切都是一个坏主意。类似LACP的技术和iSCSI不应该出现在同一个句子中，否则你将会对一个不适用于存储连接并且正常工作的技术进行故障排除，而你却认为它没有正常工作。我们需要知道我们在进行故障排除的是什么；否则，故障排除就毫无意义。为iSCSI创建LACP等同于仍然使用一个路径进行iSCSI连接，这意味着浪费了网络连接，除了在故障转移的情况下，它并没有被主动使用。而你实际上并不需要LACP或类似的技术。唯一的例外可能是刀片服务器，因为在刀片上的升级选项确实有限。但即使是这样，解决*我们需要更多带宽从主机到存储*的问题的方法是获得更快的网络或光纤通道适配器。
- en: Problems with snapshots and templates – virtual machine customization
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快照和模板的问题-虚拟机定制
- en: To be quite honest, over the years of working on various virtualization technologies,
    which covers Citrix, Microsoft, VMware, Oracle, and Red Hat, we've seen a lot
    of different issues with snapshots. But it's only when you start working in enterprise
    IT and see how complicated operational, security, and backup procedures are that
    you start realizing how hazardous a *simple* procedure such as creating a snapshot
    can be.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，多年来在各种虚拟化技术上工作，涵盖了Citrix、微软、VMware、Oracle和Red Hat，我们看到了许多不同的快照问题。但只有当你开始在企业IT中工作，看到操作、安全和备份程序有多么复杂时，你才意识到创建快照这样一个*简单*的过程可能有多危险。
- en: 'We''ve seen things such as the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们见过以下情况：
- en: The backup application doesn't want to start because the virtual machine has
    a snapshot (a common one).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份应用程序不想启动，因为虚拟机有快照（常见情况）。
- en: A snapshot doesn't want to delete and assemble.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照不想删除和组装。
- en: Multiple snapshots don't want to delete and assemble.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个快照不想删除和组装。
- en: A snapshot crashes a virtual machine for quirky reasons.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照因古怪的原因使虚拟机崩溃。
- en: A snapshot crashes a virtual machine for valid reasons (lack of disk space on
    storage)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照因为存储空间不足而使虚拟机崩溃（常见情况）。
- en: A snapshot crashes an application running in a virtual machine as that application
    doesn't know how to tidy itself up before the snapshot and goes into a dirty state
    (VSS, sync problems)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照使虚拟机中运行的应用程序崩溃，因为该应用程序不知道如何在快照之前进行整理，进入脏状态（VSS，同步问题）。
- en: Snapshots get lightly misused, something happens, and we need to troubleshoot
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照被轻微滥用，发生了一些事情，我们需要进行故障排除
- en: Snapshots get heavily misused, something always happens, and we need to troubleshoot
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照被严重滥用，总是发生一些事情，我们需要进行故障排除
- en: This last scenario occurs far more often than expected as people really tend
    to flex their muscles regarding the number of snapshots they have if they're given
    permission to. We've seen virtual machines with 20+ snapshots running on a production
    environment and people complaining that they're slow. All you can do in that situation
    is breathe in, breathe out, shrug, and ask, "What did you expect, that 20+ snapshots
    are going to increase the speed of your virtual machine"?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况比预期的要频繁得多，因为人们确实倾向于在获得许可的情况下大量使用快照。我们曾看到在生产环境中运行的虚拟机拥有20多个快照，人们抱怨它们运行缓慢。在这种情况下，您只能深呼吸，深呼吸，耸耸肩，然后问：“你期望什么，20多个快照会增加虚拟机的速度吗”？
- en: 'Through it all, what got us through all these issues was three basic principles:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些问题中，帮助我们度过所有这些问题的是三个基本原则：
- en: Really learning how snapshots work on any given technology.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真正了解在任何给定技术上快照的工作原理。
- en: Making sure that, every time we even think of using snapshots, we first check
    the amount of available storage space on the datastore where the virtual machine
    is located, and then check if the virtual machine already has snapshots.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每次我们甚至考虑使用快照时，首先检查虚拟机所在数据存储中的可用存储空间量，然后检查虚拟机是否已经有快照。
- en: 'Constantly repeating the mantra: *snapshots are not backups* to all of our
    clients, over, and over again, and hammering them with additional articles and
    links explaining why they need to lay off the snapshots, even if that means denying
    someone permission to even take a snapshot.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断重复这句口头禅：“快照不是备份”，一遍又一遍地对我们的所有客户进行灌输，并用额外的文章和链接向他们解释为什么他们需要停止使用快照，即使这意味着拒绝某人甚至拍摄快照的许可。
- en: Actually, this last one has become a de facto policy in many environments we've
    encountered. We've even seen companies implementing a flat-out policy when dealing
    with snapshots, stating that the company policy is to have one or two snapshots,
    max, for a limited period of time. For example, in VMware environments, you can
    assign a virtual machine advanced property that sets the maximum number of snapshots
    to 1 (using a property called `snapshot.maxSnapshots`). In KVM, you're going to
    have to use storage-based snapshots for these situations and hope that the storage
    system has policy-based capabilities to set the snapshot number to something.
    However, this kind of goes against the idea of using storage-based snapshots in
    many environments.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，最后一个情况已经成为我们遇到的许多环境中的事实政策。我们甚至看到一些公司在处理快照时实施了一项明确的政策，规定公司政策是在有限的时间内最多拥有一两个快照。例如，在VMware环境中，您可以分配一个虚拟机高级属性，设置最大快照数为1（使用名为“snapshot.maxSnapshots”的属性）。在KVM中，您将不得不针对这些情况使用基于存储的快照，并希望存储系统具有基于策略的功能来设置快照数量。然而，在许多环境中，这有点违背了使用基于存储的快照的想法。
- en: Templating and virtual machine customization is another completely separate
    world of troubleshooting. Templating only rarely creates issues, apart from the
    warning we mentioned in [*Chapter 8*](B14834_08_Final_ASB_ePub.xhtml#_idTextAnchor143),
    *Creating and Modifying VM Disks, Templates, and Snapshots*, related to the serial
    use of `sysprep` on Windows machines. Creating Linux templates is pretty straightforward
    nowadays, and people use either `virt-sysprep`, `sys-unconfig`, or custom scripts
    to do that. But the next step – related to virtual machine customization – is
    a completely different thing. This is especially true when using cloudbase-init,
    as cloud-init has been a standard method used for preconfiguring Linux virtual
    machines in cloud environments for years.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 模板化和虚拟机定制是另一个完全不同的故障排除世界。模板化很少会引起问题，除了我们在[*第8章*]（B14834_08_Final_ASB_ePub.xhtml#_idTextAnchor143）中提到的警告之外，*创建和修改VM磁盘、模板和快照*，与在Windows机器上串行使用`sysprep`相关的警告。创建Linux模板现在非常简单，人们使用`virt-sysprep`、`sys-unconfig`或自定义脚本来执行。但与虚拟机定制相关的下一步是完全不同的事情。特别是在使用cloudbase-init时，因为多年来cloud-init一直是预配置Linux虚拟机在云环境中的标准方法。
- en: 'The following is a short list containing some of problems that we had with
    cloudbase-init:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简短的列表，列出了我们在cloudbase-init中遇到的一些问题：
- en: 'Cloudbase-init failed due to `Cannot load user profile: the device is not ready`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloudbase-init由于“无法加载用户配置文件：设备尚未准备好”而失败。
- en: Domain join doesn't work reliably.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域加入不可靠。
- en: Error during network setup.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设置期间出现错误。
- en: Resetting Windows passwords via cloudbase-init.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过cloudbase-init重置Windows密码。
- en: Getting cloudbase-init to execute a PowerShell script from a specified directory.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使cloudbase-init从指定目录执行PowerShell脚本。
- en: The vast majority of these and other problems are related to the fact that cloudbase-init
    has documentation that's really bad. It does have some config file examples, but
    most of it is more related to APIs or the programmatic approach than actually
    explaining how to create some kind of configuration via examples. Furthermore,
    we had various issues with different versions, as we mentioned in [*Chapter 10*](B14834_10_Final_ASB_ePub.xhtml#_idTextAnchor182),
    *Automated Windows guest deployment and customization*. We then settled on a pre-release
    version, which worked out-of-the-box with a configuration file that wasn't working
    on a stable release. But by and large, the biggest issue we had while trying to
    make it work was related to making it work with PowerShell properly. If we get
    it to execute PowerShell code properly, we can pretty much configure anything
    we want on a Windows-based system, so that was a big problem. Sometimes, it didn't
    want to execute a PowerShell script from a random directory on the Windows system
    disk.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些和其他问题的绝大多数都与cloudbase-init的文档非常糟糕有关。它确实有一些配置文件示例，但其中大部分更多与API或编程方法相关，而不是通过示例来解释如何创建某种配置。此外，我们在[*第10章*](B14834_10_Final_ASB_ePub.xhtml#_idTextAnchor182)中提到的不同版本也存在各种问题，*自动化Windows客户端部署和自定义*。然后，我们选择了一个预发布版本，它可以直接使用配置文件，而在稳定版本上无法正常工作。但总的来说，我们在尝试使其正常工作时遇到的最大问题是与PowerShell正确配合。如果我们能够正确执行PowerShell代码，我们几乎可以在Windows系统上配置任何我们想要的东西，所以这是一个大问题。有时，它不想从Windows系统磁盘上的随机目录执行PowerShell脚本。
- en: Make sure that you use examples in this book for your starting points. We deliberately
    made examples in [*Chapter 10*](B14834_10_Final_ASB_ePub.xhtml#_idTextAnchor182),
    *Automated Windows guest deployment and customization* as simple as possible,
    which includes the executed PowerShell code. Afterward, spread your wings and
    fly – do whatever needs to be done with it. PowerShell makes everything easier
    and more natural when you're working with Microsoft-based solutions, both local
    and hybrid ones.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在本书中使用示例作为起点。我们故意将[*第10章*](B14834_10_Final_ASB_ePub.xhtml#_idTextAnchor182)中的示例尽可能简单化，其中包括执行的PowerShell代码。之后，展开你的翅膀，做任何需要做的事情。当您使用基于Microsoft的解决方案时，无论是本地还是混合解决方案，PowerShell都会使一切变得更容易和更自然。
- en: Problems working with Ansible and OpenStack
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Ansible和OpenStack的问题
- en: Our first interaction with Ansible and OpenStack happened years ago – Ansible
    was introduced in 2012, and OpenStack in 2010\. We always thought that both were
    (are) very cool pieces of kit, albeit with a few problems. Some of these small
    niggles were related to the fast pace of development (OpenStack), with a large
    number of bugs being solved from version to version.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与Ansible和OpenStack的第一次互动发生在多年前 - Ansible于2012年推出，OpenStack于2010年推出。我们一直认为它们都是非常酷的工具，尽管存在一些问题。其中一些小问题与开发速度快（OpenStack）有关，大量的错误从一个版本到另一个版本得到解决。
- en: In terms of Ansible, we had loads of fights with people over it – one day, the
    subject was related to the fact that *we're used to using Puppet, why do we need
    Ansible?!*; the next day it was *argh, this syntax is so complex*; the day after
    that it was something else, and something else… and it was usually just related
    to the fact that the Ansible architecture is much simpler than all of them in
    terms of architecture, and a bit more involved – at least initially – in terms
    of syntax. With Ansible, it's all about the syntax, as we're sure that you either
    know or will find out soon enough.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible方面，我们与人们进行了大量的争论 - 一天，主题与“我们习惯使用Puppet，为什么需要Ansible？！”有关；第二天是“啊，这个语法太复杂了”；第三天是其他事情，还有其他事情……通常都与Ansible架构更简单，语法在一开始至少更复杂有关。对于Ansible来说，一切都取决于语法，我们相信您要么已经知道，要么很快就会发现。
- en: Troubleshooting Ansible playbooks is usually a process that has a 95% chance
    that we misspelled or mistyped something in the configuration file. We're talking
    about the initial phase in which you already had a chance to work with Ansible
    for a while. Make sure that you re-check outputs from Ansible commands and use
    their output for that. In that sense, it's really excellent. You don't need to
    do complex configuration (such as with `libvirtd`, for example) to get usable
    output from your executed procedures and playbooks. And that makes our job a lot
    easier.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除Ansible playbook通常是一个过程，有95%的机会是我们在配置文件中拼写错误或输入错误。我们谈论的是您已经有机会使用Ansible一段时间的初始阶段。确保重新检查Ansible命令的输出，并将其用于此目的。在这方面，它真的很出色。您不需要进行复杂的配置（例如`libvirtd`）来从执行的过程和playbook中获得可用的输出。这使我们的工作变得更加容易。
- en: 'Troubleshooting OpenStack is a completely different can of worms. There are
    some well-documented OpenStack problems out there, which can also be related to
    a specific device. Let''s use one example of that – check out the following link
    for issues when using NetApp storage: [https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html](https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除OpenStack是完全不同的一桩麻烦。有一些充分记录的OpenStack问题，这些问题也可能与特定设备有关。让我们举一个例子 - 查看以下链接，了解在使用NetApp存储时出现的问题：[https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html](https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html)。
- en: 'The following are some examples:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些例子：
- en: Creating volume fails
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建卷失败
- en: Cloning volume fails
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆卷失败
- en: Volume attachment fails
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷附加失败
- en: Volume upload to image operation fails
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷上传到镜像操作失败
- en: Volume backup and/or restore fails
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷备份和/或恢复失败
- en: 'Then, for example, check out these links:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，例如，查看这些链接：
- en: '[https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html](https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html](https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html)'
- en: '[https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html](https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html](https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html)'
- en: 'As you''ve probably deduced yourself, OpenStack is really, really picky when
    it comes to storage. That''s why storage companies usually create reference architectures
    for their own storage devices to be used in OpenStack-based environments. Check
    out these two documents from HPE and Dell EMC as good examples of that approach:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经推断出的那样，OpenStack在存储方面非常挑剔。这就是为什么存储公司通常为他们自己的存储设备创建参考架构，以在基于OpenStack的环境中使用。查看HPE和戴尔EMC的这两份文件，作为这种方法的良好示例：
- en: '[https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf](https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf](https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf)'
- en: '[https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html](https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html](https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html)'
- en: One last word of warning relates to the most difficult obstacle to surmount
    – OpenStack version upgrades. We can tell you loads of horror stories on this
    subject. That being said, we're also partially to blame here, because we, as users,
    deploy various third-party modules and utilities (vendor-based plugins, forks,
    untested solutions, and so on), forget about using them, and then we're really
    surprised and horrified when the upgrade procedure fails. This goes back to our
    multiple discussions about documenting environments that we had throughout this
    book. This is a subject that we'll revisit for one final time just a bit later
    in this chapter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要警告的是，最难克服的障碍与OpenStack版本升级有关。关于这个主题，我们可以告诉你很多恐怖故事。话虽如此，我们在这里也有部分责任，因为我们作为用户部署了各种第三方模块和实用程序（基于供应商的插件、分支、未经测试的解决方案等），忘记使用它们，然后当升级过程失败时，我们真的感到惊讶和恐惧。这可以追溯到我们在整本书中一直讨论的关于记录环境的多个讨论。这是一个我们将在本章稍后再次讨论的主题。
- en: Dependencies
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖关系
- en: Every administrator is completely aware that almost every service has some dependencies
    – either the services that depend on this particular service running or services
    that our service needs to work. Dependencies are also a big thing when working
    with packages – the whole point of package managers is to strictly pay attention
    to what needs to be installed and what depends on it so that our system works
    as it should.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每个管理员都完全意识到几乎每个服务都有一些依赖关系 - 要么是依赖于运行此特定服务的服务，要么是我们的服务需要工作的服务。在处理软件包时，依赖关系也是一个重要因素
    - 软件包管理器的整个目的是严格注意需要安装的内容以及依赖它的内容，以便我们的系统正常工作。
- en: What most admins do wrong is forget that, in larger systems, dependencies can
    stretch across multiple systems, clusters, and even data centers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数管理员犯的错误是忘记了，在更大的系统中，依赖关系可能延伸到多个系统、集群，甚至数据中心。
- en: Every single course that covers OpenStack has a dedicated lesson on starting,
    stopping, and verifying different OpenStack services. The reason for this is simple
    – OpenStack is usually run across a big number of nodes (hundreds, sometimes thousands).
    Some services must run on every node, some are needed by a set of nodes, some
    services are duplicated on every node instance, and some services can only exist
    as a single instance.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 每个涵盖OpenStack的课程都有一个专门的课程，介绍如何启动、停止和验证不同的OpenStack服务。其原因很简单 - OpenStack通常在大量节点上运行（数百，有时数千）。一些服务必须在每个节点上运行，一些服务需要一组节点，一些服务在每个节点实例上都是重复的，一些服务只能存在一个实例。
- en: Understanding the basics of each service and how it falls into the whole OpenStack
    schema is not only essential when installing the whole system but is also the
    most important thing to know when debugging why something is not working on OpenStack.
    Read the documentation at least once to *connect the dots*. Again, the *Further
    reading* section at the end of this chapter contains links that will point you
    in the right direction regarding OpenStack.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 了解每个服务的基础知识以及它如何融入整个OpenStack架构不仅在安装整个系统时至关重要，而且在调试为什么某些东西在OpenStack上不起作用时也是最重要的。至少阅读一次文档以“串联起点”。同样，在本章末尾的“进一步阅读”部分包含了指向OpenStack正确方向的链接。
- en: OpenStack is one of those systems that includes *how do I properly reboot a
    machine running X?* in the documentation. The reason for this is as simple as
    the whole system is complex – each part of the system both has something it depends
    on and something that is depending on it – if something breaks, you need to not
    only understand how this particular part of the system works, but also how it
    affects everything else. But there is a silver lining through all this – in a
    properly configured system, a lot of it is redundant, so sometimes, the easiest
    way of repairing something is to reinstall it.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack是那些在文档中包括“如何正确地重新启动运行X的机器？”的系统之一。其原因就像整个系统一样复杂 - 系统的每个部分既有它所依赖的东西，也有一些依赖它的东西
    - 如果某些东西出了问题，你不仅需要了解系统的这个特定部分是如何工作的，还需要了解它如何影响其他一切。但是在所有这些中有一线希望 - 在一个正确配置的系统中，很多东西都是冗余的，所以有时，修复某些东西最简单的方法是重新安装它。
- en: And this probably sums the whole troubleshooting story – trying to fix a simple
    system is usually more complicated and time-consuming than fixing a complex system.
    Understanding how each of them works is the most important part.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能总结了整个故障排除的故事 - 试图修复一个简单的系统通常比修复一个复杂的系统更复杂和耗时。了解它们各自的工作原理是最重要的部分。
- en: Troubleshooting Eucalyptus
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除Eucalyptus
- en: It would be a lie to say that once we started the installation process, everything
    went according to the manual – most of it did, and we are reasonably sure that
    if you follow the steps we documented, you will end up with a working service
    or system, but at any point in time, there are things that can – and will – go
    wrong. This is when you need to do the most complicated thing imaginable – troubleshoot.
    But how do you do that? Believe it or not, there is a more or less systematic
    approach that will enable you to troubleshoot almost any problem, not just KVM/OpenStack/AWS/Eucalyptus-related
    ones.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 说我们开始安装过程后一切都按照手册进行是不真实的 - 大部分是，我们相当肯定，如果您按照我们记录的步骤进行，您最终会得到一个可用的服务或系统，但在任何时候，都会有事情可能会出错。这时候你需要做的是最难以想象的事情
    - 故障排除。但你该怎么做呢？信不信由你，有一种更或多或少系统化的方法可以让你解决几乎任何问题，不仅仅是KVM/OpenStack/AWS/Eucalyptus相关的问题。
- en: Gathering information
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 收集信息
- en: 'Before we can do anything, we need to do some research. And this is the moment
    most people do the wrong thing, because the obvious answer is to go to the internet
    and search for the problem. Take a look at this screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做任何事情之前，我们需要做一些研究。这是大多数人做错事情的时刻，因为显而易见的答案是去互联网上搜索问题。看看这个屏幕截图：
- en: '![Figure 16.5 – Eucalyptus logs, part I – clean, crisp, and easy to read –
    every procedure that''s been done in Eucalyptus clearly visible in the log'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.5 - Eucalyptus日志，第一部分 - 清晰、简洁、易读 - Eucalyptus中已完成的每个过程在日志中清晰可见'
- en: '](img/B14834_16_05.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_05.jpg)'
- en: Figure 16.5 – Eucalyptus logs, part I – clean, crisp, and easy to read – every
    procedure that's been done in Eucalyptus clearly visible in the log
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 - Eucalyptus日志，第一部分 - 清晰、简洁、易读 - Eucalyptus中已完成的每个过程在日志中清晰可见
- en: 'If you haven''t noticed already, the internet is full of ready-made solutions
    to almost any imaginable problem, with a lot of them being wrong. There are two
    reasons why this is so: most of the people who worked on the solution didn''t
    understand what the problem was, so as soon as they found any solution that solved
    their particular problem, they simply stopped solving it. In other words – a lot
    of people in IT try to picture a path from point A (problem) to point B (solution)
    as a laser beam – super flat, the shortest possible path, no obstacles along the
    way. Everything is nice and crisp and designed to mess with our troubleshooting
    thought process as soon as the laser beam principle stops working. This is because,
    in IT, things are rarely that simple.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有注意到，互联网上充满了几乎任何想象问题的现成解决方案，其中很多是错误的。这是因为有两个原因：大多数解决方案的人并不了解问题是什么，所以一旦他们找到了解决他们特定问题的任何解决方案，他们就停止解决它。换句话说
    - 许多IT人员试图将从A点（问题）到B点（解决方案）的路径描绘成一束激光束 - 超级平坦，最短可能的路径，沿途没有障碍。一切都很好，设计得很干净，旨在在激光束原则停止工作时干扰我们的故障排除思维过程。这是因为，在IT领域，事情很少那么简单。
- en: Take, for example, any problem caused by DNS being misconfigured. Most of those
    can be *solved* by creating an entry in the *hosts* file. This solution usually
    works but is, at the same time, wrong on almost any level imaginable. The problem
    that is solved by this is solved on only one machine – the one that has the particular
    hosts file on it. And the DNS is still misconfigured; we just created a quick,
    undocumented workaround that will work in our particular case. Every other machine
    that has the same problem will need to be patched in this way, and there is a
    real possibility that our fix is going to create even more problems down the road.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由DNS配置错误引起的任何问题。其中大多数可以通过在*hosts*文件中创建一个条目来“解决”。这个解决方案通常有效，但同时在几乎任何层面上都是错误的。这个解决方案只在一个机器上解决了问题
    - 那个特定的主机文件所在的机器。而DNS仍然配置错误；我们只是创建了一个快速的、未记录的解决方法，它在我们的特定情况下有效。每台其他有相同问题的机器都需要以这种方式进行修补，而我们的修复可能会在未来产生更多问题的真正可能性。
- en: The real solution would obviously be to get to the root of the problem itself
    and solve the issue with DNS, but solutions like this are few and far between
    on the internet. This happens mainly because the majority of the commenters on
    the internet are not familiar with a lot of services, and quick fixes are basically
    the only ones they are able to apply.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的解决方案显然是找到问题的根源并解决DNS的问题，但在互联网上很少有这样的解决方案。这主要是因为互联网上的大多数评论者对许多服务不熟悉，快速修复基本上是他们能够应用的唯一方法。
- en: Another reason why the internet is mostly wrong is because of the famous *reinstall
    fixed the problem* solution. Linux has a better track record there as people who
    use it are less inclined to solve everything by wiping and reinstalling the system,
    but most of the solutions you will find for Windows problems are going to have
    at least one simple *reinstall fixed it*. Compared to just giving a random fix
    as the one that always works, this *reinstall* approach is far worse. Not only
    does it mean you are going to waste a lot of time reinstalling everything; it
    also means your problem may or may not be solved in the end, depending on what
    the problem actually was.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网大部分错误的另一个原因是因为著名的“重新安装解决了问题”的解决方案。Linux在这方面的记录更好，因为使用它的人不太倾向于通过擦除和重新安装系统来解决所有问题，但你会发现大多数Windows问题的解决方案至少会有一个简单的“重新安装解决了问题”。与仅仅给出一个随机的解决方案作为总是有效的解决方案相比，这种“重新安装”方法要糟糕得多。这不仅意味着你将浪费大量时间重新安装所有东西；它还意味着你的问题最终可能会或可能不会得到解决，这取决于问题实际上是什么。
- en: So, the first short piece of advice we will give is, *do not blindly trust the
    internet*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将给出的第一个简短建议是，“不要盲目相信互联网”。
- en: 'OK, but what should you actually do? Let''s take a look:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，但你实际上应该做什么呢？让我们来看看：
- en: '*Gather information about the problem*. Read the error message, read the logs
    (if the application has logs), and try to turn on debug mode if at all possible.
    Get some solid data. Find out what is crashing, how it is crashing, and what problems
    are causing it to crash. Take a look at the following screenshot:![Figure 16.6
    – Eucalyptus logs, part II – again, clean, crisp, and easy to read – information
    messages about what was updated and where'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*收集关于问题的信息*。阅读错误消息，阅读日志（如果应用程序有日志），并尽可能打开调试模式。获取一些实际数据。找出是什么导致了崩溃，以及是如何崩溃的，以及是什么问题导致了崩溃。看一下下面的截图：![图16.6
    - 桉树日志，第二部分 - 再次，干净，清晰，易于阅读 - 有关更新内容和位置的信息消息'
- en: '](img/B14834_16_06.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_06.jpg)'
- en: Figure 16.6 – Eucalyptus logs, part II – again, clean, crisp, and easy to read
    – information messages about what was updated and where
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6 - 桉树日志，第二部分 - 再次，干净，清晰，易于阅读 - 有关更新内容和位置的信息消息
- en: '*Read the documentation*. Is the thing you are trying to do even supported?
    What are the prerequisites for the functioning system? Are you missing something?
    A cache disk? Some amount of memory? A fundamental service that is a dependency
    for your particular system? A dependency that''s a library or additional packages?
    A firmware upgrade?'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*阅读文档*。你正在尝试的事情是否得到支持？功能系统的先决条件是什么？你是否遗漏了什么？缓存磁盘？一些内存？你特定系统的依赖基本服务？一个库或额外的软件包的依赖？固件升级？'
- en: Sometimes, you will run into an even bigger problem, especially in poorly written
    documentation – *some crucial system dependency may be mentioned in passing* and
    may cause your entire system to crash. Take, for example, an external identification
    service – maybe your directory uses a *wrong character set*, causing your system
    to crash when a particular user uses it in a particular way. Always make sure
    you understand how your systems are interconnected.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你会遇到一个更大的问题，特别是在文档写得很糟糕的情况下 - *可能会在次要提到一些关键的系统依赖项*，并可能导致整个系统崩溃。例如，外部识别服务
    - 也许你的目录使用了*错误的字符集*，导致当特定用户以特定方式使用时系统崩溃。始终确保你了解你的系统是如何相互连接的。
- en: Next, check your system. If you are installing a new system, check the prerequisites.
    Do you have *enough disk space* and *memory*? Are all the services your application
    requires readily available and working properly?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查你的系统。如果你正在安装一个新系统，请检查先决条件。你有*足够的磁盘空间*和*内存*吗？你的应用程序需要的所有服务是否都可用并正常工作？
- en: Search the internet. We mentioned previously that the internet has a simple,
    incorrect solution to all possible problems, but it usually also has the right
    solution hidden somewhere among the wrong ones. Having armed yourself with a lot
    of data about your particular system and your specific problem, the internet will
    soon become your friend. Since you understand what the problem is, you will be
    able to understand what solutions have been offered to you are simply wrong.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索互联网。我们之前提到过，互联网对所有可能的问题都有一个简单而不正确的解决方案，但通常也会在错误的解决方案中隐藏着正确的解决方案。当你武装自己拥有关于你特定系统和特定问题的大量数据后，互联网很快就会成为你的朋友。因为你了解问题是什么，你将能够理解提供给你的解决方案中哪些是错误的。
- en: Now, let's talk about a real-world problem we created while installing Eucalyptus
    on purpose, just to show you how important documentation is.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈我们故意在安装桉树时制造的一个现实世界的问题，只是为了向你展示文档有多重要。
- en: We showed you how to install Eucalyptus in [*Chapter 13*](B14834_13_Final_ASB_ePub.xhtml#_idTextAnchor238),
    *Scaling Out KVM with AWS* – we not only went through the installation process
    but also how to use this amazing service. If you want to learn something about
    how not to do it, continue reading. We will present you with a deliberate scenario
    of an unsuccessful Eucalyptus installation that won't finish because we *creatively
    forgot to do some steps that we knew we needed to do*. Let's put it this way –
    we acted as humans and used the method of *browsing the documentation* instead
    of *actually sitting down and reading the documentation*. Does that sound familiar?
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第13章*](B14834_13_Final_ASB_ePub.xhtml#_idTextAnchor238)中向你展示了如何安装桉树，*使用AWS扩展KVM*
    - 我们不仅经历了安装过程，还学会了如何使用这个令人惊叹的服务。如果你想学习一些关于如何不做的东西，继续阅读。我们将向你展示一个故意创建的桉树安装失败的场景，因为我们*创造性地忘记了一些我们知道需要做的步骤*。让我们这样说
    - 我们表现得像人类一样，使用了*浏览文档*的方法，而不是*实际坐下来阅读文档*。这听起来熟悉吗？
- en: 'Installing Eucalyptus should be a straightforward task since its installation
    is, in essence, an exercise in applied scripting. Eucalyptus even says so on the
    front page of the project: *just run this script*.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 安装桉树应该是一项简单的任务，因为它的安装本质上是一个应用脚本的练习。桉树甚至在项目的首页上都这样说：*只需运行这个脚本*。
- en: But the truth is much more complicated – Eucalyptus can definitely be installed
    using only this script, but certain prerequisites must be met. Of course, in your
    rush to test the new service, you will probably neglect to read the documentation,
    as we did, since we already had experience with Eucalyptus.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实要复杂得多 - 桉树确实可以只使用这个脚本进行安装，但必须满足一些先决条件。当然，在你急于测试新服务时，你可能会忽略阅读文档，就像我们一样，因为我们已经有了桉树的经验。
- en: 'We configured the system, we started the installation, and we ran into a problem.
    After confirming the initial configuration steps, our installation failed with
    an error that said it was unable to resolve a particular address: `192.168.1.1.nip.io`.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了系统，启动了安装，然后遇到了问题。在确认了初始配置步骤后，我们的安装失败了，错误消息显示无法解析特定地址：`192.168.1.1.nip.io`。
- en: DNS is one of the primary sources of problems in the IT infrastructure, and
    we quickly started debugging – the first thing we wanted to see was what this
    particular address is. There's actually a saying in IT – *It's always DNS*. It
    looks like a local address, so we started pinging it, and it seemed fine. But
    why is DNS even involved with IP addresses? DNS should be resolving domain names,
    not IP addresses. Then, we turned to the documentation, but that didn't yield
    much. The only thing that we found was that DNS must work for the whole system
    to work.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: DNS是IT基础设施中的主要问题之一，我们迅速开始调试 - 我们想要看到的第一件事是这个特定地址是什么。实际上，在IT中有一句话 - *总是DNS*。它看起来像一个本地地址，所以我们开始ping它，看起来还好。但为什么DNS甚至与IP地址有关？DNS应该解析域名，而不是IP地址。然后，我们转向文档，但没有得到太多信息。我们唯一发现的是DNS必须为整个系统工作。
- en: Then, it was time to try and debug the DNS. First, we tried resolving it from
    the machine we were installing it on. The DNS returned a timeout. We tried this
    on another machine and we got back the response we didn't expect – `127.0.0.1.nip.io`
    resolved as `127.0.0.1`, which meant localhost. Basically, we asked a DNS on the
    internet to give us an address, and it directed us to our local system.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，是时候尝试调试DNS了。首先，我们尝试从我们正在安装的机器上解析它。DNS返回超时。我们在另一台机器上尝试了一下，得到了我们没有预期的响应 - `127.0.0.1.nip.io`解析为`127.0.0.1`，这意味着本地主机。基本上，我们向互联网上的DNS请求一个地址，它将我们引导到我们的本地系统。
- en: So, we had an error we didn't understand, an address that resolved to an IP
    address we hadn't expected, and two different systems exhibiting completely different
    behaviors for an identical command. We turned our attention to the machine we
    were installing on and realized it was misconfigured – there was no DNS configured
    at all. The machine not only failed to resolve our *strange* IP address but failed
    to resolve anything.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们遇到了一个我们不理解的错误，一个解析为我们没有预期的IP地址的地址，以及两个不同的系统对相同命令表现出完全不同的行为。我们把注意力转向我们正在安装的机器，意识到它配置错误
    - 没有配置DNS。这台机器不仅无法解析我们*奇怪*的IP地址，而且无法解析任何东西。
- en: We fixed that by pointing to the right DNS server. Then, in true IT fashion,
    we restarted the installation so that we were able to go through with this part
    and everything was ok, or so it seemed. But what happened? Why is a local service
    resolving such strange names and why do they get resolved at all?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过指向正确的DNS服务器来解决了这个问题。然后，按照真正的IT方式，我们重新启动了安装，以便我们能够继续进行这一部分，一切都还好，或者看起来是这样。但发生了什么？为什么一个本地服务解析如此奇怪的名称，为什么它们会被解析？
- en: We turned to the internet and took a look at the name of the domain that our
    mystery name had at its end. What we found out is that the service, `nip.io`,
    actually does just the thing we observed it do – when asked for a particular name
    formed from an IP address in the local subnet range (as defined by `RFC 1918`),
    it returned that same IP.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们转向互联网，看了一下我们神秘名称末尾的域名。我们发现服务`nip.io`实际上就是我们观察到的事情 - 当要求返回本地子网范围内IP地址形成的特定名称时（由`RFC
    1918`定义），它返回相同的IP。
- en: Our next question was – why?
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的问题是 - 为什么？
- en: After some more reading, you will realize what the trick was here – Eucalyptus
    uses DNS names to talk to all of its components. The authors very wisely chose
    not to hardcode a single address into the application, so all the services and
    nodes of the system have to have a real DNS registered name. In a normal multi-node,
    multi-server installation, this works like a charm – every server and every node
    are first registered with their appropriate DNS server, and Eucalyptus will try
    and resolve them so it can communicate with the machine.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 经过更多阅读，您会意识到这里的诀窍是什么 - 桉树使用DNS名称与其所有组件进行通信。作者非常明智地选择不将单个地址硬编码到应用程序中，因此系统的所有服务和节点都必须具有真实的DNS注册名称。在正常的多节点，多服务器安装中，这就像魅力一样
    - 每个服务器和每个节点首先都要在适当的DNS服务器上注册，桉树将尝试解析它们以便与机器通信。
- en: We are installing a single machine that has all the services on it, and that
    makes installing easier, but nodes do not have separate names, and even our machine
    may not be registered with the DNS. So, the installer does a little trick. It
    turns local IP addresses into completely valid domain names and makes sure we
    can resolve them.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装一个拥有所有服务的单个机器，这使得安装更容易，但节点没有单独的名称，甚至我们的机器可能没有在DNS中注册。因此，安装程序做了一个小技巧。它将本地IP地址转换为完全有效的域名，并确保我们可以解析它们。
- en: So, now we know what happened (resolving process was not working) and why it
    happened (our DNS server settings were broken), but we also understood why DNS
    was needed in the first place.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们知道发生了什么（解析过程不起作用）以及为什么会发生（我们的DNS服务器设置出了问题），但我们也理解了为什么首先需要DNS。
- en: This brings us to the next point – *do not presume anything*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这带我们到下一个点 - *不要假设任何事情*。
- en: While we were troubleshooting and then following up on our DNS problem, our
    installation crashed. Eucalyptus is a complex system and its installation is a
    fairly complex thing – it automatically updates the machine you run it on, then
    it installs what seems like thousands of packages, and then it downloads, configures,
    and runs a small army of images and virtual packages. To keep things tidy, the
    user doesn't see everything that is happening, only the most important bits. The
    installer even has a nice ASCII graphic screen to keep you busy. Everything was
    OK up to a point, but suddenly, our installation completely crashed. All we got
    was a huge stack trace that looked like it belonged to the Python language. We
    reran the installation, but it failed again.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们排除故障并跟进我们的DNS问题时，我们的安装崩溃了。桉树是一个复杂的系统，它的安装是一件相当复杂的事情 - 它会自动更新您运行它的机器，然后安装似乎有成千上万的软件包，然后下载，配置和运行一小部分镜像和虚拟软件包。为了保持整洁，用户看不到发生的一切，只能看到最重要的部分。安装程序甚至有一个漂亮的ASCII图形屏幕让你忙碌。一切都还好，但突然之间，我们的安装完全崩溃了。我们得到的只是一个看起来像属于Python语言的巨大堆栈跟踪。我们重新运行了安装，但它再次失败了。
- en: The problem at this point was that we had no idea why all this was happening
    since the installation calls for a minimal installation of CentOS 7\. We were
    running our tests on a virtual machine, and we actually did a minimal install.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此时的问题是，我们不知道为什么会发生这一切，因为安装要求对CentOS 7进行最小安装。我们在虚拟机上运行测试，并确实进行了最小安装。
- en: We retried installing from scratch. Reinstalling the whole machine took a couple
    of minutes, and we retried the installation. The result was the same – a failed
    installation that left us with an unusable system. But there was a possible solution
    – or to be more precise, a way to understand what happened.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重新尝试从头安装。重新安装整个机器只花了几分钟，然后我们重新尝试安装。结果是一样的 - 一个失败的安装，让我们得到了一个无法使用的系统。但有一个可能的解决方案
    - 或者更准确地说，是了解发生了什么。
- en: 'As with all great installers of the IT universe, this one also has something
    reserved especially for this possibility: a log file. Take a look at the following
    screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 与IT宇宙中所有伟大的安装程序一样，这个安装程序也为这种可能性准备了特别的东西：一个日志文件。看一下下面的截图：
- en: '![Figure 16.7 – The Eucalyptus installation process takes time when you don''t
    read its documentation. And then some more time... and some more...'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.7 - 当你不阅读Eucalyptus的文档时，安装过程会花费很长时间。然后还需要更多的时间...还有更多...'
- en: '](img/B14834_16_07.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_07.jpg)'
- en: Figure 16.7 – The Eucalyptus installation process takes time when you don't
    read its documentation. And then some more time... and some more...
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7 - 当你不阅读Eucalyptus的文档时，安装过程会花费很长时间。然后还需要更多的时间...还有更多...
- en: This is the installation screen. We can't see any real information regarding
    what is happening, but the third line from the top contains the most important
    clue – the location of the log file. In order to stop your screen from being flooded
    with information, the installer shows this very nice figlet-coffee graphic (everyone
    who ever used IRC in the 1990s and 2000s will probably smile now), but also dumps
    everything that is happening into a log. By everything, we mean everything – every
    command, every input, and every output. This makes debugging easy – we just need
    to scroll to the end of this file and try to go from that point backward to see
    what broke. Once we did that, the solution was simple – we forgot to allocate
    enough memory for the machine. We gave it 8 GB of RAM, and officially it should
    have at least 16 GB to be able smoothly. There are reports of machines running
    with as little as 8 GB of RAM, but that makes absolutely no sense – we are running
    a virtualized environment after all.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是安装屏幕。我们看不到关于正在发生的事情的任何真实信息，但从顶部的第三行中可以找到最重要的线索 - 日志文件的位置。为了防止屏幕被信息淹没，安装程序显示了这个非常漂亮的figlet-coffee图形（所有在20世纪90年代和2000年代使用IRC的人现在可能会微笑），但也将正在发生的一切都转储到日志中。这里的一切，是指每个命令、每个输入和每个输出。这使得调试变得容易
    - 我们只需要滚动到文件的末尾，然后尝试从那个点开始向后查看是什么出了问题。一旦我们这样做了，解决方案就很简单 - 我们忘记为机器分配足够的内存。我们给了它8GB的RAM，而官方上应该至少有16GB才能顺利运行。有报道称有机器只有8GB的RAM也能运行，但这完全没有意义
    - 毕竟我们正在运行一个虚拟化环境。
- en: AWS and its verbosity, which doesn't help
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS及其冗长，这并不有助于解决问题
- en: Another thing we wanted to mention is AWS and how to troubleshoot it. AWS is
    an amazing service, but it has one huge problem – its size. There are so many
    services, components, and service parts that you need to use to get something
    to run on AWS that simple tasks can get very complicated. Our scenario involved
    trying to put up an EC2 instance that we used as our example.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想提到的另一件事是AWS以及如何对其进行故障排除。AWS是一个了不起的服务，但它有一个巨大的问题 - 就是它的规模。有这么多服务、组件和服务部分，你需要使用它们来在AWS上运行一些东西，简单的任务可能会变得非常复杂。我们的情景涉及尝试建立一个我们用作示例的EC2实例。
- en: This task is relatively straightforward and demonstrates how a simple problem
    can have a simple solution that can, at the same time, be completely not obvious.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务相对简单，演示了一个简单的问题可以有一个简单的解决方案，同时也可能完全不明显。
- en: Let's go back to what we were trying to do. We had a machine that was on a local
    disk. We had to transfer it to the cloud and then create a running VM out of it.
    This is probably one of the simplest things to do.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们试图做的事情。我们有一台机器在本地磁盘上。我们必须将它转移到云端，然后创建一个正在运行的虚拟机。这可能是最简单的事情之一。
- en: For that, we created an S3 bucket and got our machine from the local machine
    into the cloud. But after we tried to run the machine, all we got was an error.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们创建了一个S3存储桶，并将我们的机器从本地机器转移到了云端。但在我们尝试运行机器后，我们得到的只是一个错误。
- en: The biggest problem with a service like AWS is that it is enormous and that
    there is no way of understanding everything at once – you must build your knowledge
    block by block. So, we went back to the documentation. There are two kinds of
    documentation on AWS – extensive help that covers every command and every option
    on every service, and guided examples. Help is amazing, it really is, but if you
    have no idea what you are looking for, it will get you nowhere. Help in this form
    only works as long as you have a basic understanding of the concepts. If you are
    doing something for the first time, or you have a problem you haven't seen before,
    we suggest that you find an example of the task you are trying to do, and do the
    exercise.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 像AWS这样的服务最大的问题是它的庞大，没有办法一次性理解所有东西 - 你必须一块一块地建立你的知识。所以，我们回到了文档。AWS有两种文档 - 广泛的帮助，涵盖了每个服务的每个命令和每个选项，以及引导示例。帮助是令人惊叹的，但如果你不知道自己在找什么，它将毫无用处。这种形式的帮助只有在你对概念有基本的理解时才有效。如果你是第一次做某事，或者你遇到了以前没有遇到过的问题，我们建议你找到一个你正在尝试做的任务的示例，并进行练习。
- en: In our case, this was strange, since all we had to do was run a simple command.
    But our import was still failing. After a couple of hours of us banging our head
    against the wall, we decided to just behave like we knew nothing and went and
    did the *how do I import a VM into AWS?* example. Everything worked. Then, we
    tried importing our own machine; that didn't work. The commands were copy/pasted,
    but it still didn't work.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这很奇怪，因为我们只需要运行一个简单的命令。但我们的导入仍然失败。在我们碰头几个小时后，我们决定表现得像我们什么都不知道，然后做了*如何将VM导入AWS？*的示例。一切都很顺利。然后，我们尝试导入我们自己的机器；那不起作用。命令被复制/粘贴，但仍然不起作用。
- en: And then we realized the most important thing – *we need to pay attention to
    details*. Without this train of thought properly implemented and executed, we're
    inviting a world of problems upon ourselves.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们意识到最重要的一点是*我们需要注意细节*。如果没有正确实施和执行这种思维方式，我们将给自己带来一系列问题。
- en: Paying attention to details
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意细节
- en: To cut the story (that's way too long) short, what we did wrong was we misconfigured
    the identity service. In a cloud environment such as AWS, every service runs as
    an independent domain, completely separate from other services. When something
    needs to be done, the service doing it has to have some kind of authorization.
    There is a service that takes care of that – IAM – and the obvious default for
    every request from every service is to deny everything. Once we decide what needs
    to be done, it is our job to configure proper access and authorization. We knew
    that, and so we created all the roles and permissions for EC2 to access the files
    in S3\. Even though that may sound strange, we had to give a service we are using
    the permission to get the files we uploaded. If you are new to, this you might
    expect this to be automatic, but it isn't.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，我们做错的是错误配置了身份服务。在AWS等云环境中，每个服务都作为独立的域运行，与其他服务完全分开。当需要执行某项任务时，执行任务的服务必须具有某种授权。有一个服务负责处理这个问题-IAM-每个服务的每个请求的明显默认值是拒绝一切。一旦我们决定需要做什么，我们就有责任配置适当的访问和授权。我们知道这一点，所以我们为EC2访问S3中的文件创建了所有角色和权限。尽管这听起来可能有些奇怪，但我们必须授予我们正在使用的服务获取我们上传的文件的权限。如果你是新手，你可能期望这是自动的，但事实并非如此。
- en: 'Check out the following small excerpt, which is from the really long list of
    roles that AWS has predefined. Keep in mind that the complete list is much, much
    longer and that we''ve barely scratched the surface of all of the available roles.
    These are just roles that have names starting with the letter *A*:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下摘录，这是AWS预定义的角色列表中的一小部分。请记住，完整列表要长得多，我们只是触及了所有可用角色的表面。这些只是以字母*A*开头的角色：
- en: '![Figure 16.8 – AWS predefined roles'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.8 - AWS预定义角色'
- en: '](img/B14834_16_08.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_16_08.jpg)'
- en: Figure 16.8 – AWS predefined roles
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8 - AWS预定义角色
- en: What we misconfigured was the name of the role – to import the VM into the EC2
    instance, there needs to be a security role named `vmimport` giving EC2 the right
    permissions. We configured a role named `importvm` in our haste. When we completed
    the examples, we pasted the examples and everything was fine, but as soon as we
    started using our security settings, EC2 was failing to do its job. So, always
    *check the product documentation and read it carefully*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们错误配置的是角色的名称-为了将VM导入EC2实例，需要有一个名为`vmimport`的安全角色授予EC2正确的权限。我们匆忙配置了一个名为`importvm`的角色。当我们完成示例时，我们粘贴了示例，一切都很好，但一旦我们开始使用我们的安全设置，EC2就无法完成其工作。因此，始终*检查产品文档并仔细阅读*。
- en: Troubleshooting problems with the ELK stack
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决ELK堆栈的问题
- en: The ELK stack can be used to monitor our environment efficiently. It does require
    a bit of manual labor, additional configuration, and being a bit sneaky, but it
    can still offer reporting, automatic reporting, sending reports via email, and
    a whole lot of other valuable things.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ELK堆栈可以有效地用于监视我们的环境。它确实需要一些手动操作，额外的配置，并且需要有点诡计，但它仍然可以提供报告、自动报告、通过电子邮件发送报告以及许多其他有价值的东西。
- en: 'Out of the box, you can''t just send reports directly – you need to do some
    more snooping. You can use Watcher, but most of the functionality you need from
    it is commercial, so you''ll have to spend some cash on it. There are some other
    methods, as well:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 开箱即用，你不能直接发送报告-你需要再做一些调查。你可以使用Watcher，但你需要的大部分功能是商业化的，所以你需要在上面花一些钱。还有其他一些方法：
- en: 'Using snapshot for Kibana/Grafana – check out this URL: [https://github.com/parvez/snapshot](https://github.com/parvez/snapshot)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kibana/Grafana的快照-查看此网址：[https://github.com/parvez/snapshot](https://github.com/parvez/snapshot)
- en: 'Using ElastAlert – check out this URL: [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ElastAlert-查看此网址：[https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)
- en: 'Use Elastic Stack Features (formerly X-Pack) – check out this URL: [https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html](https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Elastic Stack功能（以前称为X-Pack）-查看此网址：[https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html](https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html)
- en: 'Here''s one more piece of advice: you can always centralize logs via `rsyslog`
    as it''s a built-in feature. There are free applications out there for browsing
    through log files if you create a centralized log server (Adiscon LogAnalyzer,
    for example). If dealing with ELK seems like a bit too much to handle, but you''re
    aware of the fact that you need something, start with something like that. It''s
    very easy to install and configure and offers a free web-like interface with regular
    expression support so that you can browse through log entries.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个建议：你可以通过`rsyslog`来集中日志，因为这是一个内置功能。如果你创建一个集中式日志服务器，那里有免费的应用程序可以浏览日志文件（例如Adiscon
    LogAnalyzer）。如果处理ELK似乎有点难以应付，但你意识到你需要一些东西，那就从这样的东西开始。它非常容易安装和配置，并提供一个带有正则表达式支持的免费Web界面，以便你可以浏览日志条目。
- en: Best practices for troubleshooting KVM issues
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KVM问题的故障排除最佳实践
- en: 'There are some common-sense best practices when approaching troubleshooting
    KVM issues. Let''s list some of them:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决KVM问题时，有一些常识最佳实践。让我们列出其中一些：
- en: '*Keep it simple, in configuration*: What good does a situation in which you
    deployed 50 OpenStack hosts across three subnets in one site do? Just because
    you can subnet to an inch of an IP range''s life doesn''t mean you should. Just
    because you have eight available connections on your server doesn''t mean that
    you should LACP all of them to access iSCSI storage. Think about end-to-end configuration
    (for example, Jumbo Frames configuration for iSCSI networks). Simple configuration
    almost always means simpler troubleshooting.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*保持简单，进行配置*：部署了50个OpenStack主机跨三个子网在一个站点中的情况有什么好处呢？仅仅因为你可以将子网划分到IP范围的极限并不意味着你应该这样做。仅仅因为你的服务器有八个可用连接并不意味着你应该将它们全部连接到iSCSI存储。考虑端到端的配置（例如，iSCSI网络的巨帧配置）。简单的配置几乎总是意味着更简单的故障排除。'
- en: '*Keep it simple, in troubleshooting*: Don''t go chasing the super-complex scenarios
    first. Start simple. Start with log files. Check what''s written there. With time,
    use your gut feeling as it will develop and you''ll be able to trust it.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在故障排除中保持简单*：不要首先追求超复杂的场景。从简单开始。从日志文件开始。检查那里写了什么。随着时间的推移，使用你的直觉，因为它会发展，你将能够信任它。'
- en: '*Use monitoring tools such as ELK stack*: Use something to monitor your environments
    constantly. Invest in some kind of large-screen display, hook it up to a separate
    computer, hang that display on a wall, and spend time configuring important dashboards
    for your environments.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用监控工具，如ELK堆栈*：使用某种工具不断监视你的环境。投资一些大屏幕显示器，将其连接到一台独立的计算机，挂在墙上，并花时间为你的环境配置重要的仪表板。'
- en: '*Use reporting tools* to create multiple automated reports about the state
    of your environment: Kibana supports report generation, for example, in PDF format.
    As you monitor your environment, you will notice some of the *more sensitive*
    parts of your environments, such as storage. Monitor the amount of available space.
    Monitor path activity and network connections being dropped from host to storage.
    Create reports and send them automatically to your email. There''s a whole world
    of options there, so use them.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用报告工具*创建关于环境状态的多个自动报告：例如，Kibana支持以PDF格式生成报告。当你监视你的环境时，你会注意到你的环境中一些*更敏感*的部分，比如存储。监视可用空间的数量。监视路径活动和从主机到存储的网络连接断开。创建报告并自动发送到你的电子邮件。那里有很多选择，所以利用它们。'
- en: '*Create notes while you configure your environment*: If nothing else, do this
    so that you have some starting point and/or a reference for future, as there will
    be many changes that are often done *on the fly*. And when the process of taking
    notes is finished, create documentation.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在配置环境时创建笔记*：如果没有别的，至少这样做，这样你就有了一些起点和/或未来的参考，因为经常会有许多*即兴*的更改。当记笔记的过程结束时，创建文档。'
- en: '*Create documentation*: Make these permanent, readable, and as simple as possible.
    Don''t *remember* things, *write things down*. Make it a mission to write everything
    down, and try to spread that culture all around you.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建文档*：使其永久，可读，并尽可能简单。不要*记住*事情，*把事情写下来*。使写下一切成为一项使命，并试图在你周围传播这种文化。'
- en: Get used to having a large portion of `<insert your favorite drink here>` available
    at all times and many sleepless nights if you want to work in IT as administrator,
    engineer, or DevOps engineer. Coffee, Pepsi, Coca-Cola, lemon juice, orange juice….
    whatever gets your intellectual mojo flowing. And sometimes, learn to walk away
    from a problem for a short period of time. Solutions often click in your head
    when you're thinking about something completely opposite to work.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯于随时拥有大量的<插入你最喜欢的饮料>，并且经常熬夜，如果你想成为IT管理员、工程师或DevOps工程师。咖啡、百事可乐、可口可乐、柠檬汁、橙汁……无论什么能让你的智力活力充沛。有时，学会暂时远离问题。解决方案通常会在你思考与工作完全相反的事情时在你脑海中闪现。
- en: And finally, remember to try and have fun while working. Otherwise, the whole
    ordeal of working with KVM or any other IT solution is just going to be an *Open
    Shortest Path First* to relentless frustration. And frustration is never fun.
    We prefer yelling at our computers or servers. It's therapeutic.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，记住在工作时要尽量享受乐趣。否则，与KVM或任何其他IT解决方案一起工作的整个过程只会成为无休止的挫败感。挫折从来不是一件有趣的事情。我们更喜欢对着计算机或服务器大喊大叫。这是一种治疗方法。
- en: Summary
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we tried to describe some basic troubleshooting steps that
    can be applied generally and when troubleshooting KVM. We also discussed some
    of the problems that we had to deal with while working with various subjects of
    this book – Eucalyptus, OpenStack, the ELK stack, cloudbase-init, storage, and
    more. Most of these issues were caused by misconfiguration, but there were quite
    a few where documentation was severely lacking. Whatever happens, don't give up.
    Troubleshoot, make it work, and celebrate when you do.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们试图描述一些基本的故障排除步骤，这些步骤通常适用于故障排除KVM。我们还讨论了在处理本书的各种主题时我们不得不处理的一些问题——Eucalyptus，OpenStack，ELK堆栈，cloudbase-init，存储等。这些问题大多是由于错误配置引起的，但也有一些严重缺乏文档的问题。无论发生什么，不要放弃。排除故障，让它工作，并在你做到时庆祝。
- en: Questions
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What do we need to check before deploying the KVM stack?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署KVM堆栈之前，我们需要检查什么？
- en: What do we need to configure after deploying the KVM stack in terms of making
    sure that virtual machines are going to run after reboot?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署KVM堆栈后，我们需要配置什么，以确保虚拟机在重新启动后能够运行？
- en: How do we check KVM guest log files?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何检查KVM客户端日志文件？
- en: How can we turn on and configure KVM debug logging permanently?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何永久打开和配置KVM调试日志？
- en: How can we turn on and configure KVM debug logging at runtime?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在运行时打开和配置KVM调试日志？
- en: What's the best way to solve oVirt's installation problems?
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决oVirt安装问题的最佳方法是什么？
- en: What's the best way to solve oVirt's minor and major version upgrade problems?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决oVirt的小版本和大版本升级问题的最佳方法是什么？
- en: What's the best way to manage the oVirt Engine and host updates?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理oVirt Engine和主机更新的最佳方法是什么？
- en: Why do we need to be careful with snapshots?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为什么需要小心快照？
- en: What are the common problems with templates and cloudbase-init?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板和cloudbase-init的常见问题是什么？
- en: What should be our first step when installing Eucalyptus?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Eucalyptus时我们的第一步应该是什么？
- en: What kind of advanced capabilities for monitoring and reporting can we use with
    the ELK stack?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用ELK堆栈的哪些高级监控和报告功能？
- en: What are some of the best practices when troubleshooting KVM-based environments?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在故障排除基于KVM的环境时有哪些最佳实践？
- en: Further reading
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多阅读
- en: 'Please refer to the following links for more information regarding what was
    covered in this chapter:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章涵盖内容的更多信息，请参考以下链接：
- en: 'Working with KVM debug logging: [https://wiki.libvirt.org/page/DebugLogs](https://wiki.libvirt.org/page/DebugLogs)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用KVM调试日志：[https://wiki.libvirt.org/page/DebugLogs](https://wiki.libvirt.org/page/DebugLogs)
- en: 'Firewall requirements for oVirt nodes and oVirt Engine: [https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy](https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: oVirt节点和oVirt Engine的防火墙要求：[https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy](https://www.ovirt.org/documentation/installing_ovirt_as_a_standalone_manager_with_remote_databases/#dns-requirements_SM_remoteDB_deploy)
- en: 'oVirt upgrade guide: [https://www.ovirt.org/documentation/upgrade_guide/](https://www.ovirt.org/documentation/upgrade_guide/)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: oVirt升级指南：[https://www.ovirt.org/documentation/upgrade_guide/](https://www.ovirt.org/documentation/upgrade_guide/)
- en: 'Common problems with NetApp and Openstack integration: [https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html](https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetApp和Openstack集成的常见问题：[https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html](https://netapp-openstack-dev.github.io/openstack-docs/stein/appendices/section_common-problems.html)
- en: 'Integrating the IBM Storwize family and SVC driver in OpenStack: [https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html](https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OpenStack中集成IBM Storwize家族和SVC驱动程序：[https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html](https://docs.openstack.org/cinder/queens/configuration/block-storage/drivers/ibm-storwize-svc-driver.html)
- en: 'Integrating IBM Storwize and OpenStack: [https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html](https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成IBM Storwize和OpenStack：[https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html](https://www.ibm.com/support/knowledgecenter/STHGUJ_8.2.1/com.ibm.storwize.v5100.821.doc/storwize_openstack_matrix.html)
- en: 'HPE Reference Architecture for the Red Hat OpenStack Platform on _HPE Synergy
    with Ceph Storage: [https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf](https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HPE Synergy上Red Hat OpenStack平台与Ceph存储的参考架构：[https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf](https://www.redhat.com/cms/managed-files/cl-openstack-hpe-synergy-ceph-reference-architecture-f18012bf-201906-en.pdf)
- en: 'Integrating Dell EMC Unity and OpenStack: [https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html](https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Dell EMC Unity和OpenStack：[https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html](https://docs.openstack.org/cinder/rocky/configuration/block-storage/drivers/dell-emc-unity-driver.html)
- en: 'DM-multipath configuration for Red Hat Enterprise Linux 7: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/dm_multipath/mpio_setup](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/dm_multipath/mpio_setup)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat Enterprise Linux 7的DM-multipath配置：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/dm_multipath/mpio_setup](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/dm_multipath/mpio_setup)
- en: 'DM-multipath configuration for Red Hat Enterprise Linux 8: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/pdf/configuring_device_mapper_multipath/Red_Hat_Enterprise_Linux-8-Configuring_device_mapper_multipath-en-US.pdf](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/pdf/configuring_device_mapper_multipath/Red_Hat_Enterprise_Linux-8-Configuring_device_mapper_multipath-en-US.pdf)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat Enterprise Linux 8的DM-multipath配置：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/pdf/configuring_device_mapper_multipath/Red_Hat_Enterprise_Linux-8-Configuring_device_mapper_multipath-en-US.pdf](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/pdf/configuring_device_mapper_multipath/Red_Hat_Enterprise_Linux-8-Configuring_device_mapper_multipath-en-US.pdf)
- en: 'Using snapshot for Kibana/Grafana: [https://github.com/parvez/snapshot](https://github.com/parvez/snapshot)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kibana/Grafana的快照：[https://github.com/parvez/snapshot](https://github.com/parvez/snapshot)
- en: 'Using ElastAlert: [https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ElastAlert：[https://github.com/Yelp/elastalert](https://github.com/Yelp/elastalert)
- en: 'Using Elastic Stack Features (formerly X-Pack): [https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Elastic Stack功能（以前称为X-Pack）：[https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html)
- en: 'Troubleshooting OpenStack Networking: [https://docs.openstack.org/operations-guide/ops-network-troubleshooting.html](https://docs.openstack.org/operations-guide/ops-network-troubleshooting.html)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack网络故障排除：[https://docs.openstack.org/operations-guide/ops-network-troubleshooting.html](https://docs.openstack.org/operations-guide/ops-network-troubleshooting.html)
- en: 'Troubleshooting OpenStack Compute: [https://docs.openstack.org/ocata/admin-guide/support-compute.html](https://docs.openstack.org/ocata/admin-guide/support-compute.html)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack Compute故障排除：[https://docs.openstack.org/ocata/admin-guide/support-compute.html](https://docs.openstack.org/ocata/admin-guide/support-compute.html)
- en: 'Troubleshooting OpenStack Object Storage: [https://docs.openstack.org/ocata/admin-guide/objectstorage-troubleshoot.html](https://docs.openstack.org/ocata/admin-guide/objectstorage-troubleshoot.html)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack对象存储故障排除：[https://docs.openstack.org/ocata/admin-guide/objectstorage-troubleshoot.html](https://docs.openstack.org/ocata/admin-guide/objectstorage-troubleshoot.html)
- en: 'Troubleshooting OpenStack Block Storage: [https://docs.openstack.org/ocata/admin-guide/blockstorage-troubleshoot.html](https://docs.openstack.org/ocata/admin-guide/blockstorage-troubleshoot.html)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack块存储故障排除：[https://docs.openstack.org/ocata/admin-guide/blockstorage-troubleshoot.html](https://docs.openstack.org/ocata/admin-guide/blockstorage-troubleshoot.html)
- en: 'Troubleshooting OpenStack Shared File Systems: [https://docs.openstack.org/ocata/admin-guide/shared-file-systems-troubleshoot.html](https://docs.openstack.org/ocata/admin-guide/shared-file-systems-troubleshoot.html)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack共享文件系统故障排除：[https://docs.openstack.org/ocata/admin-guide/shared-file-systems-troubleshoot.html](https://docs.openstack.org/ocata/admin-guide/shared-file-systems-troubleshoot.html)
- en: 'Troubleshooting a Bare Metal OpenStack service: [https://docs.openstack.org/ocata/admin-guide/baremetal.html#troubleshooting](https://docs.openstack.org/ocata/admin-guide/baremetal.html#troubleshooting)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除裸金属OpenStack服务：[https://docs.openstack.org/ocata/admin-guide/baremetal.html#troubleshooting](https://docs.openstack.org/ocata/admin-guide/baremetal.html#troubleshooting)
