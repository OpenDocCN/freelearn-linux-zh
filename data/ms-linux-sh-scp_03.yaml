- en: Chapter 3. Conditions Attached
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 附加条件
- en: I suppose we can say that we are now into the fine print of the script. These
    are the details that are written into our scripts using conditions to test if
    a statement should run or not. We are now ready to add some intelligence in scripts
    so our scripts become more robust, easier to use, and more reliable. Conditional
    statements can be written with simple command-line lists of `AND` or `OR` commands
    together or, more often, within traditional `if` statements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们现在可以说我们已经进入了脚本的细节部分。这些是使用条件编写到我们的脚本中的细节，用于测试语句是否应该运行。我们现在准备在脚本中添加一些智能，使我们的脚本变得更健壮，更易于使用和更可靠。条件语句可以用简单的命令行列表`AND`或`OR`命令一起编写，或者更常见的是在传统的`if`语句中。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Simple decision paths using command-line lists
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行列表进行简单决策路径
- en: Verifying user input with lists
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表验证用户输入
- en: Using the test shell built-in
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试shell内置
- en: Creating conditional statements using `if`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`if`创建条件语句
- en: Extending `if` with `else`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`else`扩展`if`
- en: More conditions with `elif`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`elif`添加更多条件
- en: Creating the `backup.sh` script using `elif`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`elif`创建`backup.sh`脚本
- en: Using case statements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用case语句
- en: Script – front-end with `grep`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本-使用`grep`的前端
- en: Simple decision paths using command-line lists
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行列表进行简单决策路径
- en: We have used command-line lists both in [Chapter 1](part0014_split_000.html#DB7S1-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 1. What and Why of Scripting with Bash"), *What and Why of Scripting
    with Bash* of this book and in some of the scripts found in [Chapter 2](part0020_split_000.html#J2B81-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 2. Creating Interactive Scripts"), *Creating Interactive Scripts*. Lists
    are one of the simplest conditional statements that we can create and so we thought
    that it was appropriate to use them in the earlier examples before fully explaining
    them here.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的[第一章](part0014_split_000.html#DB7S1-747571d9b4814e1dbffcdef2eb0dec8d "Chapter 1. What
    and Why of Scripting with Bash")和[第二章](part0020_split_000.html#J2B81-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 2. Creating Interactive Scripts")中的一些脚本中都使用了命令行列表。列表是我们可以创建的最简单的条件语句之一，因此我们认为在完全解释它们之前，在早期的示例中使用它们是合适的。
- en: 'Command-line lists are two or more statements that are joined using either
    the `AND` or `OR` notations:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行列表是使用`AND`或`OR`符号连接的两个或多个语句：
- en: '`&&`: `AND`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&&`: `AND`'
- en: '`||`: `OR`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`||`: `OR`'
- en: Where the two statements are joined using the `AND` notation, the second command
    only runs if the first command succeeds. Whereas, with the `OR` notation the second
    command will run only if the first command fails.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 两个语句使用`AND`符号连接时，只有在第一个命令成功运行时，第二个命令才会运行。而使用`OR`符号连接时，只有在第一个命令失败时，第二个命令才会运行。
- en: 'The decision of the success or failure of a command is taken by reading the
    exit code from the application. A zero represents a successful application completion
    and anything other than a zero will represent a failure. We can test the success
    or failure of an application by reading the exit status by means of the system
    variables `$?`. This is shown in the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的成功或失败取决于从应用程序读取的退出代码。零表示应用程序成功完成，而非零表示失败。我们可以通过读取系统变量`$?`来测试应用程序的成功或失败。下面是一个示例：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we need to ensure that a script is run from a user''s home directory, we
    can build this into the script''s logic. This can be tested from the command line
    and it does not have to be in a script. Consider the following command-line example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要确保脚本是从用户的主目录运行的，我们可以将这个构建到脚本的逻辑中。这可以从命令行测试，不一定要在脚本中。考虑以下命令行示例：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The double vertical bars denote an `OR` list. This ensures that the second statement
    is only executed when the first statement is not true. In simple terms, if we
    are not currently in the home directory we will be by the end of the command-line
    list. We will see more on the test command soon.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 双竖线表示`OR`列表。这确保了只有在第一个语句不成立时才执行第二个语句。简单来说，如果我们当前不在主目录中，那么在命令行列表结束时我们会在主目录中。我们很快会在测试命令中看到更多内容。
- en: 'We can build this into almost any command that we want and not just test. For
    example, we can query to see if a user is logged into the system, if they are
    then we can use the `write` command to directly message their console. Similar
    as before, we can test this in the command line prior to adding it to the script.
    This is shown in the following command-line example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个应用到几乎任何我们想要的命令，而不仅仅是测试。例如，我们可以查询用户是否已登录到系统，如果是，我们可以使用`write`命令直接向他们的控制台发送消息。与之前类似，我们可以在脚本之前在命令行中测试这个。下面是一个命令行示例：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we use this in a script, it is almost certain that we will replace the username
    with a variable. In general, if we have to refer to the same value more than once
    then a variable is a good idea. In this case, we are searching for the `pi` user.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在脚本中使用这个，几乎可以肯定我们会用变量替换用户名。一般来说，如果我们需要多次引用相同的值，那么使用变量是个好主意。在这种情况下，我们正在搜索`pi`用户。
- en: When we break the command-line list down, we first use the `who` command to
    list the users who are logged on. We pipe the list to `grep` to search for the
    desired username. We are not interested in the output from the search, just the
    success or failure. With this in mind, we redirect all our output to `/dev/null`.
    The double ampersand indicates that the second statement in the list runs only
    if the first returns true. If the `pi` user is logged on, we use `write` to message
    the user. The following screenshot illustrates this command and the output.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们分解命令行列表时，我们首先使用`who`命令列出已登录的用户。我们将列表传输到`grep`以搜索所需的用户名。我们对搜索的输出不感兴趣，只关心成功或失败。考虑到这一点，我们将所有输出重定向到`/dev/null`。双和符号表示只有在第一个语句返回true时，列表中的第二个语句才运行。如果`pi`用户已登录，我们使用`write`向用户发送消息。以下截图说明了这个命令和输出。
- en: '![Simple decision paths using command-line lists](img/00029.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用命令行列表进行简单决策路径](img/00029.jpeg)'
- en: Verifying user input with lists
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用列表验证用户输入
- en: In this script, we will ensure that a value has been supplied to the first positional
    parameter. We can modify the `hello2.sh` script that we created in [Chapter 1](part0014_split_000.html#DB7S1-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 1. What and Why of Scripting with Bash"), *What and Why of Scripting
    with Bash*, to check for user input before displaying the `hello` text.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们将确保第一个位置参数已经被提供了一个值。我们可以修改我们在[第1章](part0014_split_000.html#DB7S1-747571d9b4814e1dbffcdef2eb0dec8d
    "第1章。使用Bash进行脚本编写的什么和为什么")中创建的`hello2.sh`脚本，*使用Bash进行脚本编写的什么和为什么*，在显示`hello`文本之前检查用户输入。
- en: 'You can copy the `hello2.sh` script to `hello4.sh` or simply create a new script
    from scratch. There will not be a lot a typing and the script will be created
    as `$HOME/bin/hello4.sh`, as shown:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`hello2.sh`脚本复制到`hello4.sh`，或者从头开始创建一个新的脚本。输入的内容不会很多，脚本将被创建为`$HOME/bin/hello4.sh`，如下所示：
- en: '![Verifying user input with lists](img/00030.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用列表验证用户输入](img/00030.jpeg)'
- en: 'We can ensure that the script is executable with the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令确保脚本是可执行的：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can then run the script with or without arguments. The `test` statement is
    looking for the `$1` variable to be zero bytes. If it is, then we will not see
    the `hello` statement; otherwise it will print the **Hello** message. In simple
    terms, we will see the `hello` message if we supply a name.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以带参数或不带参数运行脚本。`test`语句正在寻找`$1`变量是否为零字节。如果是，那么我们将看不到`hello`语句；否则它将打印**Hello**消息。简单来说，如果我们提供一个名字，我们将看到`hello`消息。
- en: 'The following screenshot shows the output that you will see when you do not
    supply a parameter to the script, followed by the supplied parameter:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了当您没有向脚本提供参数时会看到的输出，然后是提供的参数：
- en: '![Verifying user input with lists](img/00031.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用列表验证用户输入](img/00031.jpeg)'
- en: Using the test shell builtin
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用测试shell内置
- en: It is probably time for us to pull over to the side of the scripting highway
    and look a little more at this command `test`. This is both a shell builtin and
    a file executable in its own right. Of course, we will have to hit the built-in
    command first, unless we specify the full path to the file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可能是时候我们停下来，看一看这个`test`命令。这既是一个shell内置命令，也是一个独立的可执行文件。当然，除非我们指定文件的完整路径，否则我们将首先使用内置命令。
- en: 'When the test command is run without any expressions to evaluate, then the
    test will return false. So, if we run the test as shown in the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行测试命令而没有任何表达式要评估时，测试将返回false。因此，如果我们运行如下命令所示的测试：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The exit status will be `1`, even though no error output is shown. The `test`
    command will always return either `True` or `False` or `0` or `1`, respectively.
    The basic syntax of `test` is:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 退出状态将是`1`，即使没有显示错误输出。`test`命令将始终返回`True`或`False`或`0`或`1`。`test`的基本语法是：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or, we can inverse the `test` command with:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下命令来反转`test`命令：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we need to include multiple expressions, these can be `AND` or `OR` together
    using the `-a` and `-o` options, respectively:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要包含多个表达式，这些表达式可以使用`-a`和`-o`选项分别进行`AND`或`OR`连接：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also write in a shorthand version replacing the test with square brackets
    to surround the expression as shown in the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以简写版本编写，用方括号替换测试以包围表达式，如下例所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Testing strings
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试字符串
- en: 'We can test for the equality or inequality of two strings. For example, one
    of the ways to test the root user is using the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测试两个字符串的相等或不相等。例如，测试root用户的一种方法是使用以下命令：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We could also write this using the square bracket notation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用方括号表示法来编写这个：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Equally, we could test for a non-root account with the following two methods:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用以下两种方法测试非root帐户：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can also test for zero values and non-zero values of strings. We saw this
    in an earlier example in this chapter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以测试字符串的零值和非零值。我们在本章的早些时候的一个示例中看到了这一点。
- en: 'To test if a string has a value, we could use the `-n` option. We can check
    to see if the current connection is made via SSH by checking for the existence
    of a variable in the user''s environment. We show this using `test` and square
    brackets in the following two examples:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试字符串是否有值，我们可以使用`-n`选项。我们可以通过检查用户环境中变量的存在来检查当前连接是否是通过SSH进行的。我们在以下两个示例中使用`test`和方括号来展示这一点：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If this is true, then the connection is made with SSH; if it is false, then
    the connection is not via SSH.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是真的，那么连接是通过SSH建立的；如果是假的，那么连接不是通过SSH。
- en: 'As we saw earlier, testing for a zero string value is useful when deciding
    if a variable is set:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，当决定一个变量是否设置时，测试零字符串值是有用的：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or, more simply, we could use:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更简单地，我们可以使用：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A true result for this query means that no input parameters have been supplied
    to the script.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个查询的真实结果意味着没有输入参数被提供给脚本。
- en: Testing integers
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试整数
- en: 'As well as, testing string values of bash scripts can test for integer values
    and whole numbers. Another way of testing input of a script is to count the numbers
    of positional parameters and also test that the number is above `0`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，bash脚本的测试字符串值可以测试整数值和整数。测试脚本的另一种方法是计算位置参数的数量，并测试该数字是否大于`0`：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or using the brackets, as shown:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用括号，如下所示：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When in relationship, top positional parameters the variable `$#` represents
    the number of parameters passed to the script. To test equality of integer values,
    the `-eq` option is used and not the `=` symbol.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系中，顶部位置参数变量`$#`表示传递给脚本的参数数量。要测试整数值的相等性，使用`-eq`选项，而不是`=`符号。
- en: Testing file types
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试文件类型
- en: 'While testing for values we can test for the existence of a file or file type.
    For example, we may only want to delete a file if it is a symbolic link. I use
    this while compiling a kernel. The `/usr/src/linux` directory should be a symbolic
    link to the latest kernel source code. If I download a newer version before compiling
    the new kernel, I need to delete the existing link and create a new link. Just
    in case someone has created the `/usr/src/linux` directory, we can test it as
    a link before removing it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试值时，我们可以测试文件的存在或文件类型。例如，我们可能只想在文件是符号链接时才删除文件。我在编译内核时使用这个功能。`/usr/src/linux`目录应该是最新内核源代码的符号链接。如果我在编译新内核之前下载了更新版本，我需要删除现有的链接并创建新的链接。以防万一有人创建了`/usr/src/linux`目录，我们可以在删除之前测试它是否是一个链接：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `-h` option tests that the file has a link. Other options include:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`-h`选项测试文件是否有链接。其他选项包括：'
- en: '`-d`: This shows that it''s a directory'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`：这显示它是一个目录'
- en: '`-e`: This shows that the file exists in any form'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e`：这显示文件以任何形式存在'
- en: '`-x`: This shows that the file is executable'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`：这显示文件是可执行的'
- en: '`-f`: This shows that the file is a regular file'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：这显示文件是一个普通文件'
- en: '`-r`: This shows that the file is readable'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`：这显示文件是可读的'
- en: '`-p`: This shows that the file is a named pipe'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`：这显示文件是命名管道'
- en: '`-b`: This shows that the file is a block device'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`：这显示文件是块设备'
- en: '`-c`: This shows that the file is a character device'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`：这显示文件是字符设备'
- en: More options do exist, so delve into the main pages as you need. We will use
    different options throughout the book; thus, giving you practical and useful examples.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多选项存在，因此根据需要深入主页。我们将在整本书中使用不同的选项；因此，为您提供实用和有用的示例。
- en: Creating conditional statements using if
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用if创建条件语句
- en: As we have seen so far, it is possible to build simple conditions using command-line
    lists. These conditionals can be written both with and without a test. As the
    complexity of the tasks increases, it will be easier to create statements using
    `if`. This certainly will ease both the readability of the script and the logic
    layout. To a degree, it also matches the way in which we think and speak, `if`
    is a semantic in our spoken language as it is within the bash script.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们迄今所见，可以使用命令行列表构建简单的条件。这些条件可以使用测试和不使用测试来编写。随着任务复杂性的增加，使用`if`创建语句将更容易。这肯定会提高脚本的可读性和逻辑布局。在某种程度上，它也符合我们的思维和语言表达方式，`if`在我们的口语中和bash脚本中都是语义的一部分。
- en: 'Even though it will take up more than a single line in the script, with an
    `if` statement we can achieve more and make the script more legible. With that
    said, let''s look at creating `if` conditions. The following is an example of
    a script using an `if` statement:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在脚本中占用多行，使用`if`语句也可以实现更多功能并使脚本更易读。说了这些，让我们来看看如何创建`if`条件。以下是使用`if`语句的脚本示例：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code within the `if` statement will run only when the condition evaluates
    to true and the end of the `if` block is denoted with `fi` - `if` backwards. The
    color coding in `vim` can be useful to aide readability, which you may see in
    the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句内的代码仅在条件评估为真时运行，`if`块的结尾用`fi`表示-`if`反过来。在`vim`中的颜色编码可以帮助提高可读性，您可以在以下截图中看到：'
- en: '![Creating conditional statements using if](img/00032.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用if创建条件语句](img/00032.jpeg)'
- en: Within the script, we can easily add in multiple statements to run when the
    condition is true. In our case, this includes exiting the script with an error
    indicated, as well as, the `usage` statement to assist the user. This ensures
    that we only display the **Hello** message if we have supplied a name to be welcomed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们可以轻松添加多个语句以在条件为真时运行。在我们的情况下，这包括使用错误指示退出脚本，以及使用`usage`语句来帮助用户。这确保我们只在提供要欢迎的名称时才显示**Hello**消息。
- en: 'We can view the script execution both with and without the argument in the
    following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中查看带有参数和不带参数的脚本执行：
- en: '![Creating conditional statements using if](img/00033.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用if创建条件语句](img/00033.jpeg)'
- en: 'To help us understand the layout of the `if` conditional statement, the following
    illustration demonstrates the syntax using a pseudo-code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们理解`if`条件语句的布局，以下插图演示了使用伪代码的语法：
- en: '![Creating conditional statements using if](img/00034.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用if创建条件语句](img/00034.jpeg)'
- en: Indenting the code is not required but it helps readability and is highly recommended.
    Adding the `then` statement to the same line as the `if`, again, assists in the
    readability of the code and the semi-colon is required to separate the `if` from
    the `then`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进代码并非必需，但有助于可读性，强烈建议这样做。将`then`语句添加到与`if`相同的行上，同样有助于代码的可读性，并且分号是必需的，用于将`if`与`then`分隔开来。
- en: Extending if with else
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用else扩展if
- en: 'When a script is required to continue regardless of the result of the `if`
    condition, it is often necessary to deal with both conditions of the evaluation.
    What to do when it is true, as well as, false. This is where we can make use of
    the `else` keyword. This allows the execution of one block of code when the condition
    is true and another when the condition is evaluated as false. The pseudo-code
    for this is shown in the next illustration:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本需要继续执行而不管`if`条件的结果时，通常需要处理评估的两种条件。当条件为真时该怎么办，以及当条件评估为假时该怎么办。这就是我们可以使用`else`关键字的地方。这允许在条件为真时执行一块代码，在条件为假时执行另一块代码。下图显示了这种情况的伪代码：
- en: '![Extending if with else](img/00035.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用else扩展if](img/00035.jpeg)'
- en: 'If we consider extending the `hello5.sh` script that we created earlier, it
    is easily possible to allow for correct execution regardless of the parameter
    being present or not. We can recreate this as `hello6.sh`, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑扩展之前创建的`hello5.sh`脚本，可以轻松地实现无论参数是否存在都能正确执行。我们可以将其重新创建为`hello6.sh`，如下所示：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The script sets a named variable now, it helps readability and we can assign
    the correct value to `$name` from the input parameter or from the `read` prompt,
    either way the script is working well and starting to take shape.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本现在设置了一个命名变量，这有助于可读性，我们可以从输入参数或`read`提示中为`$name`分配正确的值，无论哪种方式，脚本都能正常工作并开始成形。
- en: More conditions with elif
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多的elif条件
- en: 'Moving onto where we require a greater degree of control, we can use the `elif`
    keyword. Unlike `else`, `elif` requires an additional condition to be tested for
    each `elif`. In this way, we can provide for different circumstances. We can add
    in as many `elif` conditions as required. The following shows a pseudo-code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要更高程度的控制时，我们可以使用`elif`关键字。与`else`不同，`elif`需要为每个`elif`测试额外的条件。通过这种方式，我们可以应对不同的情况。我们可以添加尽可能多的`elif`条件。以下是伪代码示例：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A script may make life easier for the operator by providing a simplified selection
    for a more complex code. Even though the script becomes gradually more complex
    to meet the requirements, to the operator the execution is greatly simplified.
    It is our job to enable users to run more complex operations easily from the command
    line when creating scripts. Often, this will necessitate the addition of more
    complexity to our scripts; however, we will be rewarded with the reliability of
    the scripted application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本可以通过提供更简化的选择来为操作员提供更复杂的代码。尽管脚本逐渐变得更加复杂以满足要求，但对于操作员来说，执行变得大大简化了。我们的工作是使用户能够轻松地从命令行运行更复杂的操作。通常，这将需要向我们的脚本添加更多的复杂性；然而，我们将获得脚本化应用的可靠性。
- en: Creating the backup2.sh using elif
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用elif创建backup2.sh
- en: We can revisit the script that we created to run the earlier backup. This script,
    `$HOME/bin/backup.sh`, prompts the user for the file type and the directory to
    store the backup. The tools used for the backup are `find` and `cp`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重新查看我们创建的用于运行之前备份的脚本。这个脚本`$HOME/bin/backup.sh`提示用户选择文件类型和存储备份的目录。备份使用的工具是`find`和`cp`。
- en: With this new found knowledge, we can now allow the script to run the backup
    using the command `tar` and the level of compression selected by the operator.
    There is no requirement, to select the file type as the complete home directory
    will be backed up with the exclusion of the backup directory itself.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些新的知识，我们现在可以允许脚本使用`tar`命令和操作员选择的压缩级别运行备份。无需选择文件类型，因为完整的主目录将被备份，不包括备份目录本身。
- en: 'The operator can select the compression based on three letters `H`, `M`, and
    `L`. The selection will affect the options passed to the `tar` command and the
    backup file created. The selection of high will be using `bzip2` compression,
    medium using `gzip` compression and low creating an uncompressed `tar` archive.
    The logic exists in the extended `if` statement that follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员可以根据三个字母`H`、`M`和`L`选择压缩。选择将影响传递给`tar`命令的选项和创建的备份文件。选择高将使用`bzip2`压缩，中使用`gzip`压缩，低创建一个未压缩的`tar`存档。这个逻辑存在于后续的扩展`if`语句中：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Based on the user selection, we can configure the correct options for the `tar`
    command. As we have three conditions to evaluate the `if`, `elif`, and `else`
    statements are appropriate. To see how the variables are configured we can view
    the following extract from the script:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户的选择，我们可以为`tar`命令配置正确的选项。由于我们有三个条件需要评估，因此适合使用`if`、`elif`和`else`语句。要查看变量是如何配置的，我们可以查看脚本中的以下摘录：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The complete script can be created as `$HOME/bin/backup2.sh` and should read
    as the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本可以创建为`$HOME/bin/backup2.sh`，应该读取如下代码：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When we execute the script we need to select `H`, `M`, or `L` in upper-case
    as this is how the selection is made within the script. The following screenshot
    shows the initial script execution where the selection for `M` has been made:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行脚本时，需要以大写字母选择`H`、`M`或`L`，因为这是脚本内部进行选择的方式。以下截图显示了初始脚本执行，选择了`M`：
- en: '![Creating the backup2.sh using elif](img/00036.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![使用elif创建backup2.sh](img/00036.jpeg)'
- en: Using case statements
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用case语句
- en: Rather than using multiple `elif` statements, a `case` statement may provide
    a simpler mechanism when evaluations are made on a single expression.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用多个`elif`语句不同，当对单个表达式进行评估时，`case`语句可能提供了更简单的机制。
- en: 'The basic layout of a `case` statement is listed below using pseudo-code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用伪代码列出了`case`语句的基本布局：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The statement layout that we see is not dissimilar to `switch` statements that
    exist in other languages. In bash, we can use the `case` statement to test for
    simple values, such as strings or integers. Case statements can cater for a side
    range of letters, such as `[a-f]` or `a` through to `f`, but they cannot easily
    deal with integer ranges such as `[1-20]`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的语句布局与其他语言中存在的`switch`语句并没有太大不同。在bash中，我们可以使用`case`语句测试简单的值，比如字符串或整数。Case语句可以适用于各种字母，比如`[a-f]`或`a`到`f`，但它们不能轻松处理整数范围，比如`[1-20]`。
- en: The `case` statement will first expand the expression and then it will try to
    match it in turn with each item. When a match is found, all the statements are
    executed until the `;;`. This indicates the end of the code for that match. If
    there is no match, the case `else` statement indicated by the `*` will be matched.
    This needs to be the last item in the list.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`case`语句首先会展开表达式，然后尝试依次与每个项目进行匹配。当找到匹配时，所有语句都会执行直到`;;`。这表示该匹配的代码结束。如果没有匹配，将匹配`*`表示的`else`语句。这需要是列表中的最后一项。'
- en: 'Consider the following script `grade.sh`, used to evaluate grades:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下脚本`grade.sh`，用于评估成绩：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The script first uses an `if` statement to check that exactly two arguments
    have been supplied to the script. If they are not supplied, the script will exit
    with an error state:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本首先使用`if`语句检查脚本是否提供了确切的两个参数。如果没有提供，脚本将以错误状态退出：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `case` statement then expands the expression, which is the value of the
    `$2` variable in this example. This represents the grade that we supply. We then
    try to match first against the letters `A` through to `C` in both upper-case and
    lower-case. `[A-C]` is used to match `A` or `B` or `C`. The vertical bar then
    adds an additional `OR` to compare with `a`, `b`, or `c`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`case`语句扩展表达式，这是在这个例子中的`$2`变量的值。这代表我们提供的等级。然后我们尝试首先匹配大写和小写的字母`A`到`C`。`[A-C]`用于匹配`A`或`B`或`C`。竖线然后添加了一个额外的`OR`来与`a`、`b`或`c`进行比较：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We make similar tests for other supplied grades `A` through to `F`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对其他提供的等级`A`到`F`进行了类似的测试。
- en: 'The following screenshot show the script execution with different grades:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了不同等级的脚本执行：
- en: '![Using case statements](img/00037.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![使用case语句](img/00037.jpeg)'
- en: Script – building a front-end with grep
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本-使用grep构建前端
- en: 'As a finale to this chapter, we can group a few features that we have learned
    together and build a script that prompts the operator for a filename, a search
    string, and an operation to carry out with the `grep` command. We can create the
    script as `$HOME/bin/search.sh` and don''t forget to make it executable:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的结束，我们可以将我们学到的一些功能组合在一起，构建一个脚本，提示操作员输入文件名、搜索字符串和要使用`grep`命令执行的操作。我们可以将脚本创建为`$HOME/bin/search.sh`，不要忘记将其设置为可执行文件：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We start by checking for exactly three input arguments using the following
    code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过以下代码检查是否有三个输入参数：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The next check uses a command-line list to exit the script if the file argument
    is not a regular file using `test -f`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个检查使用命令行列表来退出脚本，如果文件参数不是常规文件，则使用`test -f`：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `case` statement allows for three operations:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`case`语句允许三种操作：'
- en: Counting the matching lines
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算匹配的行数
- en: Printing the matching lines
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印匹配的行
- en: Printing all but the matching lines
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印除匹配行之外的所有行
- en: 'The following screenshot shows the search of `/etc/ntp.conf` file for lines
    beginning with the string server. We choose the count option in this example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在`/etc/ntp.conf`文件中搜索以字符串server开头的行。在这个例子中，我们选择了计数选项：
- en: '![Script – building a front-end with grep](img/00038.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![脚本-使用grep构建前端](img/00038.jpeg)'
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: One of the most important and time consuming tasks in scripting is building
    all of the conditional statements that we need to make the script usable and robust.
    There is an 80-20 rule that is often spoken of. This is where 20 percent of your
    time is spent in writing the main script and 80 percent of the time is spent to
    ensure all of the possible eventualities that are correctly handled in the script.
    This is what I refer to as the procedural integrity of the script, where we try
    to cover each scenario carefully and accurately.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本编写中最重要且耗时的任务之一是构建所有我们需要使脚本可用和健壮的条件语句。经常提到80-20法则。这是指你花费20%的时间编写主要脚本，80%的时间用于确保脚本中正确处理所有可能的情况。这就是我所说的脚本的程序完整性，我们试图仔细和准确地涵盖每种情况。
- en: We started by looking at a simple test with command-line lists. If the actions
    needed are simple, then these provide great functionality and are easily added.
    Where more complexity is required, we will add `if` statements.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看了一个简单的命令行列表测试。如果需要的操作很简单，那么这些功能提供了很好的功能，并且很容易添加。如果需要更复杂的功能，我们将添加`if`语句。
- en: Using the `if` statements, we can extend them as required using the `else` and
    `elif` keywords. Don't forget that `elif` keywords need their own conditions to
    evaluate.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`语句，我们可以根据需要扩展它们，使用`else`和`elif`关键字。不要忘记`elif`关键字需要它们自己的条件来评估。
- en: Finally, we saw how we can use `case` where a single expression needs to be
    evaluated.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了如何在需要评估单个表达式的情况下使用`case`。
- en: In the next chapter, we will understand the importance of reading in from already
    prepared code snippets. We will create a sample `if` statement that can be saved
    as code snippets to be read into the script at the time of editing.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解从已准备好的代码片段中读取的重要性。我们将创建一个样本`if`语句，可以保存为代码片段，在编辑时读入脚本。
