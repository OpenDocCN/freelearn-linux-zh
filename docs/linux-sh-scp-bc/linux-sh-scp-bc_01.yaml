- en: Chapter 1. Getting Started with Shell Scripting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。开始使用Shell脚本
- en: This chapter is a brief introduction to shell scripting. It will assume the
    reader is mostly familiar with script basics and will serve as a refresher.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于shell脚本的简要介绍。它将假定读者对脚本基础知识大多熟悉，并将作为复习。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: The general format of a script.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本的一般格式。
- en: How to make a file executable.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使文件可执行。
- en: Creating a good Usage message and handling return codes.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建良好的使用消息和处理返回代码。
- en: Show how to pass parameters from the command line.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示如何从命令行传递参数。
- en: Show how to validate parameters by using conditional statements.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示如何使用条件语句验证参数。
- en: Explain how to determine the attributes of files.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释如何确定文件的属性。
- en: Getting started
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You will always be able to create these scripts under a guest account, and most
    will run from there. It will be clearly stated when root access is needed to run
    a particular script.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以在访客账户下创建这些脚本，并且大多数脚本都可以从那里运行。当需要root访问权限来运行特定脚本时，将明确说明。
- en: 'The book will assume that the user has put a (`.`) at the beginning of the
    path for that account. If not, to run a script prepend `./` to the filename. For
    example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将假定用户已在该帐户的路径开头放置了(`.`)。如果没有，请在文件名前加上`./`来运行脚本。例如：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The scripts will be made executable using the `chmod` command.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chmod`命令使脚本可执行。
- en: 'It is suggested that the user create a directory under his guest account specifically
    for the examples in this book. For example, something like this works well:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 建议用户在其访客账户下创建一个专门用于本书示例的目录。例如，像这样的东西效果很好：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of course, feel free to use whatever works best for you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，随意使用最适合您的方法。
- en: 'Following the general format of a bash script the very first line will contain
    this and nothing else:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循bash脚本的一般格式，第一行将只包含此内容：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that in every other case text following the `#` sign is treated as comments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在其他情况下，`#`符号后面的文本被视为注释。
- en: For example,
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: This entire line is a comment
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整行都是注释
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use comments however you deem appropriate. Some people comment every line, some
    don't comment anything. I try to strike a balance somewhere in the middle of those
    two extremes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要使用注释。有些人每行都加注释，有些人什么都不加注释。我试图在这两个极端之间取得平衡。
- en: Using a good text editor
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用好的文本编辑器
- en: I have found that most people are comfortable using vi to create and edit text
    documents under a UNIX/Linux environment. This is fine as vi is a very dependable
    application. I would suggest not using any type of word processing program, even
    if it claims to have a code development option. These programs might still put
    invisible control characters in the file which will probably cause the script
    to fail. This can take hours or even days to figure out unless you are good at
    looking at binary files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现大多数人在UNIX/Linux环境下使用vi创建和编辑文本文档时感到舒适。这很好，因为vi是一个非常可靠的应用程序。我建议不要使用任何类型的文字处理程序，即使它声称具有代码开发选项。这些程序可能仍然会在文件中放入不可见的控制字符，这可能会导致脚本失败。除非您擅长查看二进制文件，否则可能需要花费数小时甚至数天来解决这个问题。
- en: Also, in my opinion, if you plan to do a lot of script and/or code development
    I suggest looking at some other text editor other than vi. You will almost certainly
    become more productive.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我认为，如果您计划进行大量的脚本和/或代码开发，建议查看vi之外的其他文本编辑器。您几乎肯定会变得更加高效。
- en: Demonstrating the use of scripts
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示脚本的使用
- en: 'Here is an example of a very simple script. It might not look like much but
    this is the basis for every script:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的脚本示例。它可能看起来不起眼，但这是每个脚本的基础：
- en: Chapter 1 - Script 1
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 - 脚本1
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By convention, in this book the script lines will usually be numbered. This
    is for teaching purposes only, in an actual script the lines are not numbered.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，在本书中，脚本行通常会编号。这仅用于教学目的，在实际脚本中，行不会编号。
- en: 'Here is the same script with the lines numbered:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有行号的相同脚本：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is an explanation for each line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每行的解释：
- en: Line 1 tells the operating system which shell interpreter to use. Note that
    on some distributions `/bin/sh` is actually a symbolic link to the interpreter.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1行告诉操作系统要使用哪个shell解释器。请注意，在某些发行版上，`/bin/sh`实际上是指向解释器的符号链接。
- en: Lines that begin with a `#` are comments. Also, anything after a `#` is also
    treated as a comment.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`#`开头的行是注释。此外，`#`后面的任何内容也被视为注释。
- en: It is good practice to include a date in your scripts, either here in the comments
    section and/or in the `Usage` section (covered next).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本中包含日期是一个好习惯，可以在注释部分和/或“Usage”部分（下一节介绍）中包含日期。
- en: Line 5 is the return code from this script. This is optional but highly recommended.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5行是此脚本的返回代码。这是可选的，但强烈建议。
- en: Line 6 is a blank line and is the last line of the script.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6行是空行，也是脚本的最后一行。
- en: Using your favorite text editor, edit a new file named `script1` and copy the
    preceding script without the line numbers into it. Save the file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器，编辑一个名为`script1`的新文件，并将前面的脚本复制到其中，不包括行号。保存文件。
- en: 'To make the file into an executable script run this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文件转换为可执行脚本，请运行以下命令：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now run the script:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行脚本：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you did not prepend a `.` to your path as mentioned in the introduction
    then run:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有像介绍中提到的那样在路径前加上`.`，则运行：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now check the return code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查返回代码：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is a script that does something a little more useful:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个执行得更有用的脚本：
- en: Chapter 1 - Script 2
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 - 脚本2
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `ping` command returns a zero on success and non-zero on failure. As you
    can see, `echoing $?` shows the return value of the command preceding it. More
    on this later.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping`命令成功返回零，失败返回非零。如您所见，`echoing $?`显示了其前一个命令的返回值。稍后会详细介绍。'
- en: 'Now let''s pass a parameter and include a `Usage` statement:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们传递一个参数并包括一个“Usage”语句：
- en: Chapter 1 - Script 3
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 - 脚本3
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is an explanation for each line:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每行的解释：
- en: Line `5` checks to see if a parameter was given. If not, lines `6` through `9`
    are executed. Note that is it usually a good idea to include an informative `Usage`
    statement in your script. It is also good to provide a meaningful return code.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第`5`行检查是否给出了参数。如果没有，将执行第`6`到`9`行。请注意，通常最好在脚本中包含一个信息性的`Usage`语句。还要提供有意义的返回代码。
- en: Line `11` checks to see if the file exists and if so lines `12`-`13` are executed.
    Otherwise lines `14`-`17` are run.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第`11`行检查文件是否存在，如果是，则执行第`12`-`13`行。否则运行第`14`-`17`行。
- en: 'A word about return codes: It is standard practice under Linux/UNIX to return
    zero if the command was successful, and non-zero if not. In this way the code
    returned can mean something useful, not only to humans, but to other scripts and
    programs as well. However, it is not mandatory to do this. If you want your script
    to return codes that are not errors but indicate some other condition by all means
    do so.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于返回代码的说明：在Linux/UNIX下，如果命令成功，则返回零是标准做法，如果不成功则返回非零。这样返回的代码可以有一些有用的含义，不仅对人类有用，对其他脚本和程序也有用。但这并不是强制性的。如果你希望你的脚本返回不是错误而是指示其他条件的代码，那么请这样做。
- en: 'This next script expands on this topic:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个脚本扩展了这个主题：
- en: Chapter 1 - Script 4
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 - 脚本4
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is an explanation for each line:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每行的解释：
- en: 'Lines `5`-`9`: If the script is not run with a parameter display the `Usage`
    message and exit with a return code of `255`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第`5`-`9`行：如果脚本没有使用参数运行，则显示`Usage`消息并以返回代码`255`退出。
- en: Line `11` shows how to `echo` a string of text but still stay on the line (no
    linefeed).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第`11`行显示了如何`echo`一个文本字符串但仍然保持在同一行（没有换行）。
- en: Line `13` shows how to determine if the parameter given is an existing file.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第`13`行显示了如何确定给定的参数是否是现有文件。
- en: Line `15` leaves the script as there is no reason to continue if the file doesn't
    exist.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第`15`行如果文件不存在，则退出脚本没有继续的理由。
- en: The meaning of the remaining lines can be determined by the script itself. Note
    that there are many other checks that can be performed on a file, these are just
    a few.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的行的含义可以通过脚本本身确定。请注意，可以对文件执行许多其他检查，这只是其中的一部分。
- en: 'Here are some examples of running `script4` on my system:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在我的系统上运行`script4`的一些示例：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This next script shows how to determine the number of parameters that were
    passed to it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个脚本显示了如何确定传递给它的参数数量：
- en: Chapter 1 - Script 5
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 - 脚本5
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s try a few examples:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些例子：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that a quoted string is counted as 1 parameter. This is a way to pass
    strings that contain blank characters.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，引用的字符串被计算为1个参数。这是传递包含空格的字符串的一种方法。
- en: 'This next script shows how to handle multiple parameters in more detail:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个脚本显示了如何更详细地处理多个参数：
- en: Chapter 1 - Script 6
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 - 脚本6
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The lines of this script were not numbered as it is rather simple. The `$#`
    contains the number of parameters that were passed to the script.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的行没有编号，因为它相当简单。`$#`包含传递给脚本的参数数量。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we looked at the basics of script design. How to make a script
    executable was shown as was creating an informative `Usage` message. The importance
    of return codes was also covered as was the use and validation of parameters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了脚本设计的基础知识。展示了如何使脚本可执行，以及创建信息性的`Usage`消息。还介绍了返回代码的重要性，以及参数的使用和验证。
- en: The next chapter will go into more detail about variables and conditional statements.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将更详细地讨论变量和条件语句。
