["```\n  ifconfig  >  ifconfig.txt\n```", "```\n  ifconfig  >>  ifconfig.txt\n```", "```\n#!/bin/sh\n#\n# 6/1/2017\n#\necho \"Chapter 7 - Script 1\"\nFN=file1.txt\nrm $FN 2> /dev/null          # remove it silently if it exists\nx=1\nwhile [ $x -le 10 ]          # 10 lines\ndo\n echo \"x: $x\"\n echo \"Line $x\" >> $FN       # append to file\n let x++\ndone\necho \"End of script1\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/2/2017\n#\necho \"Chapter 7 - Script 2\"\n\nFN=filenum1.txt              # input/output filename\nMAXFILES=5                   # maximum number before going back to 1\n\nif [ ! -f $FN ] ; then\n  echo 1 > $FN               # create the file if it does not exist\nfi\n\necho -n \"Contents of $FN: \"\ncat $FN                      # display the contents\n\ncount=`cat $FN`              # put the output of cat into variable count\necho \"Initial value of count from $FN: $count\"\n\nlet count++\nif [ $count -gt $MAXFILES ] ; then\n count=1\nfi\n\necho \"New value of count: $count\"\necho $count > $FN\n\necho -n \"New contents of $FN: \"\ncat $FN\n\necho \"End of script2\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/1/2017\n#\necho \"Chapter 7 - Script 3\"\nFN=file1.txt                 # filename\nwhile IFS= read -r linevar   # use read to put line into linevar\ndo\n  echo \"$linevar\"            # display contents of linevar\ndone < $FN                   # the file to use as input\necho \"End of script3\"\nexit 0\n```", "```\n while IFS= read -r linevar\n```", "```\n done  <  $FN\n```", "```\n#!/bin/sh\n#\n# 6/1/2017\n#\necho \"Chapter 7 - Script 4\"\n\nFN=file1.txt                 # filename\nif [ ! -f $FN ] ; then\n echo \"File $FN does not exist.\"\n exit 100\nfi\n\nwhile IFS= read -r linevar   # use read to put line into linevar\ndo\n  echo \"$linevar\"            # display contents of linevar\ndone < $FN                   # the file to use as input\n\necho \"End of script4\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/1/2017\n#\necho \"Chapter 7 - Script 5\"\n\nif [ $# -ne 2 ] ; then\n echo \"Usage: script5 infile outfile\"\n echo \" Copies text file infile to outfile.\"\n exit 255\nfi\n\nINFILE=$1\nOUTFILE=$2\n\nif [ ! -f $INFILE ] ; then\n echo \"Error: File $INFILE does not exist.\"\n exit 100\nfi\n\nif [ $INFILE = $OUTFILE ] ; then\n echo \"Error: Cannot copy to same file.\"\n exit 101\nfi\n\nrm $OUTFILE 2> /dev/null       # remove it\necho \"Reading file $INFILE ...\"\n\nx=0\nwhile IFS= read -r linevar     # use read to put line into linevar\ndo\n  echo \"$linevar\" >> $OUTFILE  # append to file\n  let x++\ndone < $INFILE                 # the file to use as input\necho \"$x lines read.\"\n\ndiff $INFILE $OUTFILE          # use diff to check the output\nrc=$?\nif [ $rc -ne 0 ] ; then\n echo \"Error, files do not match.\"\n exit 103\nelse\n echo \"File $OUTFILE created.\"\nfi\n\nsum $INFILE $OUTFILE           # show the checksums\n\necho \"End of script5\"\nexit $rc\n```", "```\n#!/bin/sh\n# 6/2/2017\n# Chapter 7 - Script 6\n\ntrap catchCtrlC INT          # Initialize the trap\n\n# Subroutines\ncatchCtrlC()\n{\n move 13 0\n savefile\n movestr 23 0 \"Script terminated by user.\"\n echo \"\"                     # carriage return\n exit 0\n}\n\ncls()\n{\n tput clear\n}\n\nmove()                       # move cursor to row, col\n{\n tput cup $1 $2\n}\n\nmovestr()                    # move cursor to row, col\n{\n tput cup $1 $2\n echo -n \"$3\"                # display string\n}\n\nchecktermsize()\n{\n rc1=0                       # default is no error\n if [[ $LINES -lt $1 || $COLUMNS -lt $2 ]] ; then\n  rc1=1                      # set return code\n fi\n return $rc1\n}\n\ninit()                       # set up the cursor position array\n{\n srow[0]=2;  scol[0]=7       # name\n srow[1]=4;  scol[1]=12      # address 1\n srow[2]=6;  scol[2]=12      # address 2\n srow[3]=8;  scol[3]=7       # city\n srow[4]=8;  scol[4]=37      # state\n srow[5]=8;  scol[5]=52      # zip code\n srow[6]=10; scol[6]=8       # email\n}\n\ndrawscreen()                 # main screen draw routine\n{\n cls                         # clear the screen\n movestr 0 25 \"Chapter 7 - Script 6\"\n\n movestr 2 1  \"Name: ${array[0]}\"\n movestr 4 1  \"Address 1: ${array[1]}\"\n movestr 6 1  \"Address 2: ${array[2]}\"\n movestr 8 1  \"City: ${array[3]}\"\n movestr 8 30 \"State: ${array[4]}\"\n movestr 8 42 \"Zip code: ${array[5]}\"\n movestr 10 1 \"Email: ${array[6]}\"\n}\n\ngetdata()\n{\n x=0                         # start at the first field\n while [ true ]\n do\n  row=${srow[x]}; col=${scol[x]}\n  move $row $col\n  read var\n  if [ -n \"$var\" ] ; then    # if not blank assign to array\n    array[$x]=$var\n  fi\n  let x++\n  if [ $x -eq $sizeofarray ] ; then\n   x=0                       # go back to first field\n  fi\n done\n\n return 0\n}\n\nsavefile()\n{\n rm $FN 2> /dev/null         # remove any existing file\n echo \"Writing file $FN ...\"\n y=0\n while [ $y -lt $sizeofarray ]\n do\n  echo \"$y - '${array[$y]}'\"            # display to screen\n  echo \"${array[$y]}\" >> \"$FN\"          # write to file\n  let y++\n done\n echo \"File written.\"\n return 0\n}\n\ngetfile()\n{\n x=0\n if [ -n \"$FN\" ] ; then      # check that file exists\n  while IFS= read -r linevar # use read to put line into linevar\n  do\n   array[$x]=\"$linevar\"\n   let x++\n  done < $FN                 # the file to use as input\n fi\n return 0\n}\n\n# Code starts here\nif [ $# -ne 1 ] ; then\n echo \"Usage: script6 file\"\n echo \" Reads existing file or creates a new file\"\n echo \" and allows user to enter data into fields.\"\n echo \" Press Ctrl-C to end.\"\n exit 255\nfi\n\nFN=$1                        # filename (input and output)\nsizeofarray=7                # number of array elements\nchecktermsize 25 80\nrc=$?\nif [ $rc -ne 0 ] ; then\n echo \"Please size the terminal to 25x80 and try again.\"\n exit 1\nfi\n\ninit                         # initialize the screen array\ngetfile                      # read in file if it exists\ndrawscreen                   # draw the screen\ngetdata                      # read in the data and put into the fields\n\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/2/2017\n#\necho \"Chapter 7 - Script 7\"\n\nif [ $# -ne 3 ] ; then\n echo \"Usage: script7 -e|-d infile outfile\"\n echo \" Uses openssl to encrypt files.\"\n echo \" -e to encrypt\"\n echo \" -d to decrypt\"\n exit 255\nfi\n\nPARM=$1\nINFILE=$2\nOUTFILE=$3\n\nif [ ! -f $INFILE ] ; then\n echo \"Input file $INFILE does not exist.\"\n exit 100\nfi\n\nif [ \"$PARM\" = \"-e\" ] ; then\n echo \"Encrypting\"\n openssl enc -aes-256-cbc -in $INFILE -out $OUTFILE\nelif [ \"$PARM\" = \"-d\" ] ; then\n echo \"Decrypting\"\n openssl enc -aes-256-cbc -d -in $INFILE -out $OUTFILE\nelse\n echo \"Please specify either -e or -d.\"\n exit 101\nfi\n\nls -la $OUTFILE\n\necho \"End of script7\"\nexit 0\n```"]