- en: Introduction to Kernel Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核开发简介
- en: Linux started as a hobby project in 1991 for a Finnish student, Linus Torvalds.
    The project has gradually grown and still does, with roughly 1000 contributors
    around the world. Nowadays, Linux is a must, in embedded systems as well as on
    servers. A kernel is a center part of an operating system, and its development
    is not so obvious.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是1991年芬兰学生Linus Torvalds的一个业余项目。该项目逐渐增长，现在仍在增长，全球大约有1000名贡献者。如今，Linux在嵌入式系统和服务器上都是必不可少的。内核是操作系统的核心部分，它的开发并不那么明显。
- en: 'Linux offers many advantages over other operating systems:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux相对于其他操作系统有很多优势：
- en: It is free of charge
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费
- en: Well documented with a large community
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有着完善的文档和庞大的社区
- en: Portable across different platforms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同平台上可移植
- en: Provides access to the source code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供对源代码的访问
- en: Lots of free open source software
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量免费开源软件
- en: This book tries to be as generic as possible. There is a special topic, device
    tree, which is not a full x86 feature yet. That topic will then be dedicated to
    ARM processors, and all those fully supporting the device tree. Why those architectures?
    Because they are most used on the desktop and servers (for x86) and on embedded
    systems (ARM).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书试图尽可能通用。有一个特殊的主题，设备树，它还不是完全的x86特性。这个主题将专门用于ARM处理器，以及所有完全支持设备树的处理器。为什么选择这些架构？因为它们在台式机和服务器（对于x86）以及嵌入式系统（ARM）上最常用。
- en: 'This chapter deals among others with:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要涉及以下内容：
- en: Development environment setup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发环境设置
- en: Getting, configure, and build kernel sources
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取、配置和构建内核源代码
- en: Kernel source code organization
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核源代码组织
- en: Introduction to kernel coding style
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核编码风格简介
- en: Environment setup
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: 'Before one starts any development, you need to set an environment up. The environment
    dedicated to Linux development is quite simple, at least, on Debian based systems:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始任何开发之前，你需要设置一个环境。至少在基于Debian的系统上，专门用于Linux开发的环境是相当简单的：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are parts of codes in this book that are compatible with ARM **system
    on chip** (**SoC** ). One should install `gcc-arm` as well:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的一些代码部分与ARM**系统芯片**（**SoC**）兼容。你也应该安装`gcc-arm`：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I'm running Ubuntu 16.04, on an ASUS RoG, with an Intel core i7 (8 physical
    cores), 16 GB of RAM, 256 GB of SSD, and 1 TB of magnetic hard drive. My favorite
    editor is Vim, but you are free to use the one you are most comfortable with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在一台ASUS RoG上运行Ubuntu 16.04，配备英特尔i7处理器（8个物理核心），16GB内存，256GB固态硬盘和1TB磁性硬盘。我的最爱编辑器是Vim，但你可以自由选择你最熟悉的编辑器。
- en: Getting the sources
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取源代码
- en: 'In the early kernel days (until 2003), odd–even versioning styles were used;
    where odd numbers were stable, even numbers were unstable. When the 2.6 version
    was released, the versioning scheme switched to X.Y.Z, where:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的内核版本（直到2003年），使用了奇数-偶数版本样式；奇数版本是稳定的，偶数版本是不稳定的。当2.6版本发布时，版本方案切换为X.Y.Z，其中：
- en: '`X` : This was the actual kernel''s version, also called major, it incremented
    when there were backwards-incompatible API changes'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X`：这是实际内核的版本，也称为主要版本，当有不兼容的API更改时会增加。'
- en: '`Y` : This was the minor revision, it incremented after adding a functionality
    in a backwards-compatible manner'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Y`：这是次要修订版本，当以向后兼容的方式添加功能时增加。'
- en: '`Z` : This is also called PATCH, represented the version relative to bug fixes'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Z`：这也被称为PATCH，表示与错误修复相关的版本'
- en: This is called semantic versioning, and has been used until the 2.6.39 version;
    when Linus Torvalds decided to bump the version to 3.0, which also meant the end
    of semantic versioning in 2011, and then, an X.Y scheme was adopted.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为语义版本控制，一直使用到2.6.39版本；当Linus Torvalds决定将版本号提升到3.0时，这也意味着2011年语义版本控制的结束，然后采用了X.Y方案。
- en: 'When it came to the 3.20 version, Linus argued that he could no longer increase
    Y, and decided to switch to an arbitrary versioning scheme, incrementing X whenever
    Y got large enough that he ran out of fingers and toes to count it. This is the
    reason why the version has moved from 3.20 to 4.0 directly. Have a look at: [https://plus.google.com/+LinusTorvalds/posts/jmtzzLiiejc](https://plus.google.com/+LinusTorvalds/posts/jmtzzLiiejc)
    .'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当到了3.20版本时，Linus认为他不能再增加Y了，并决定切换到任意的版本方案，当Y变得足够大以至于他数不过来时，就增加X。这就是为什么版本从3.20直接变成了4.0的原因。请看：[https://plus.google.com/+LinusTorvalds/posts/jmtzzLiiejc](https://plus.google.com/+LinusTorvalds/posts/jmtzzLiiejc)。
- en: Now the kernel uses an arbitrary X.Y versioning scheme, which has nothing to
    do with semantic versioning.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在内核使用任意的X.Y版本方案，与语义版本控制无关。
- en: Source organization
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码组织
- en: For the needs of this book, you must use Linus Torvald's Github repository.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的需求，你必须使用Linus Torvald的Github存储库。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`arch/` : The Linux kernel is a fast growing project that supports more and
    more architectures. That being said, the kernel wants to be as generic as possible.
    Architecture specific code is separated from the rest, and falls in this directory.
    This directory contains processor-specific subdirectories such as `alpha/` , `arm/`
    , `mips/` , `blackfin/` , and so on.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arch/`：Linux内核是一个快速增长的项目，支持越来越多的架构。也就是说，内核希望尽可能地通用。架构特定的代码与其他代码分开，并放在这个目录中。该目录包含处理器特定的子目录，如`alpha/`，`arm/`，`mips/`，`blackfin/`等。'
- en: '`block/` : This directory contains codes for block storage devices, actually
    the scheduling algorithm.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block/`：这个目录包含块存储设备的代码，实际上是调度算法。'
- en: '`crypto/` : This directory contains the cryptographic API and the encryption
    algorithms code.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crypto/`：这个目录包含加密API和加密算法代码。'
- en: '`Documentation/` : This should be your favorite directory. It contains the
    descriptions of APIs used for different kernel frameworks and subsystems. You
    should look here prior to asking any questions on forums.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Documentation/`：这应该是你最喜欢的目录。它包含了用于不同内核框架和子系统的API描述。在向论坛提问之前，你应该先在这里查找。'
- en: '`drivers/` : This is the heaviest directory, continuously growing as device
    drivers get merged. It contains every device driver organized in various subdirectories.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drivers/`：这是最重的目录，随着设备驱动程序的合并而不断增长。它包含各种子目录中组织的每个设备驱动程序。'
- en: '`fs/` : This directory contains the implementation of different filesystems
    that the kernel actually supports, such as NTFS, FAT, ETX{2,3,4}, sysfs, procfs,
    NFS, and so on.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fs/`：此目录包含内核实际支持的不同文件系统的实现，如NTFS，FAT，ETX{2,3,4}，sysfs，procfs，NFS等。'
- en: '`include/` : This contains kernel header files.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include/`：这包含内核头文件。'
- en: '`init/` : This directory contains the initialization and start up code.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init/`：此目录包含初始化和启动代码。'
- en: '`ipc/` : This contains implementation of the **Inter-Process Communication**
    (**IPC** ) mechanisms, such as message queues, semaphores, and shared memory.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipc/`：这包含**进程间通信**（**IPC**）机制的实现，如消息队列，信号量和共享内存。'
- en: '`kernel/` : This directory contains architecture-independent portions of the
    base kernel.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel/`：此目录包含基本内核的与体系结构无关的部分。'
- en: '`lib/` : Library routines and some helper functions live here. They are: generic
    **kernel object** (**kobject** ) handlers and **Cyclic Redundancy Code** (**CRC**
    ) computation functions, and so on.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib/`：库例程和一些辅助函数位于此处。它们是：通用**内核对象**（**kobject**）处理程序和**循环冗余码**（**CRC**）计算函数等。'
- en: '`mm/` : This contains memory management code.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mm/`：这包含内存管理代码。'
- en: '`net/` : This contains networking (whatever network type it is) protocols code.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net/`：这包含网络（无论是什么类型的网络）协议代码。'
- en: '`scripts/` : This contains scripts and tools used during the kernel development.
    There are other useful tools here.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts/`：这包含内核开发期间使用的脚本和工具。这里还有其他有用的工具。'
- en: '`security/` : This directory contains the security framework code.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security/`：此目录包含安全框架代码。'
- en: '`sound/` : Audio subsystems codes fall here.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sound/`：音频子系统代码位于此处。'
- en: '`usr/:` This currently contains the initramfs implementation.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usr/：`目前包含initramfs实现。'
- en: The kernel must remain portable. Any architecture-specific code should be located
    in the `arch` directory. Of course, the kernel code related to user space API
    does not change (system calls, `/proc` , `/sys` ), as it would break the existing
    programs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 内核必须保持可移植性。任何特定于体系结构的代码应位于`arch`目录中。当然，与用户空间API相关的内核代码不会改变（系统调用，`/proc`，`/sys`），因为这会破坏现有的程序。
- en: The book deals with version 4.1 of the kernel. Therefore, any changes made until
    v4.11 version are covered too, at least this can be said about the frameworks
    and subsystems.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该书涉及内核4.1版本。因此，任何更改直到v4.11版本都会被覆盖，至少可以这样说关于框架和子系统。
- en: Kernel configuration
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核配置
- en: The Linux kernel is a makefile-based project, with 1000s of options and drivers.
    To configure your kernel, either use `make menuconfig` for an ncurse-based interface
    or `make xconfig` for an X-based interface. Once chosen, options will be stored
    in a `.config` file, at the root of the source tree.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核是一个基于makefile的项目，具有数千个选项和驱动程序。要配置内核，可以使用`make menuconfig`进行基于ncurse的界面，或者使用`make
    xconfig`进行基于X的界面。一旦选择，选项将存储在源树的根目录中的`.config`文件中。
- en: 'In most of the cases, there will be no need to start a configuration from scratch.
    There are default and useful configuration files available in each `arch` directory,
    which you can use as a start point:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，不需要从头开始配置。在每个`arch`目录中都有默认和有用的配置文件，可以用作起点：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For ARM-based CPUs, these configs files are located in `arch/arm/configs/`
    , and for an i.MX6 processor, the default file config is `arch/arm/configs/imx_v6_v7_defconfig`
    . Similarly for x86 processors, we find the files in `arch/x86/configs/` , with
    only two default configuration files, `i386_defconfig` and `x86_64_defconfig`
    , for 32 and 64 bits versions respectively. It is quite straightforward for an
    x86 system:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于ARM的CPU，这些配置文件位于`arch/arm/configs/`中，对于i.MX6处理器，默认文件配置为`arch/arm/configs/imx_v6_v7_defconfig`。同样，对于x86处理器，我们在`arch/x86/configs/`中找到文件，只有两个默认配置文件，`i386_defconfig`和`x86_64_defconfig`，分别用于32位和64位版本。对于x86系统来说，这是非常简单的：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Given an i.MX6-based board, one can start with `ARCH=arm make imx_v6_v7_defconfig`
    , and then `ARCH=arm make menuconfig` . With the former command, you will store
    the default option in `.config` file, and with the latter, you can update add/remove
    options, depending on the needs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个基于i.MX6的板，可以从`ARCH=arm make imx_v6_v7_defconfig`开始，然后`ARCH=arm make menuconfig`。使用前一个命令，您将把默认选项存储在`.config`文件中，使用后一个命令，您可以根据需要更新添加/删除选项。
- en: 'One may run into a Qt4 error with `xconfig` . In such a case, one should just
    use the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`xconfig`时可能会遇到Qt4错误。在这种情况下，应该使用以下命令：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Build your kernel
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您的内核
- en: Building the kernel requires you to specify the architecture for which it is
    built for, as well as the compiler. That says, it is not necessary for a native
    build.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 构建内核需要您指定为其构建的体系结构，以及编译器。也就是说，对于本地构建并非必需。
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, one will see something like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将看到类似以下内容：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From the kernel build, the result will be a single binary image, located in
    `arch/arm/boot/` . Modules are built with the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从内核构建中，结果将是一个单一的二进制映像，位于`arch/arm/boot/`中。模块使用以下命令构建：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can install them using the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装它们：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `modules_install` target expects an environment variable, `INSTALL_MOD_PATH`
    , which specifies where you should install the modules. If not set, the modules
    will be installed at `/lib/modules/$(KERNELRELEASE)/kernel/` . This is discussed
    in [Chapter 2,](text00034.html) *Device Driver Basis* .
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`modules_install`目标需要一个环境变量`INSTALL_MOD_PATH`，指定应该在哪里安装模块。如果未设置，模块将安装在`/lib/modules/$(KERNELRELEASE)/kernel/`中。这在[第2章](text00034.html)
    *设备驱动程序基础*中讨论过。'
- en: 'i.MX6 processors support device trees, which are files you use to describe
    the hardware (this is discussed in detail in [Chapter 6](text00162.html) , *The
    Concept of Device Tree* ). However, to compile every `ARCH` device tree, you can
    run the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: i.MX6处理器支持设备树，这是用来描述硬件的文件（这在[第6章](text00162.html)中详细讨论），但是，要编译每个`ARCH`设备树，可以运行以下命令：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, the `dtbs` option is not available on all platforms that support device
    tree. To build a standalone DTB, you should use:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，并非所有支持设备树的平台都支持`dtbs`选项。要构建一个独立的DTB，您应该使用：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Kernel habits
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核习惯
- en: The kernel code tries to follow standard rules through its evolution. In this
    chapter, we will just be introduced to them. They are all discussed in a dedicated
    chapter, starting from [Chapter 3](http://post) , *Kernel Facilities and Helper
    Functions,* we get a better overview of the kernel development process and tips,
    till [Chapter 13](http://post1) , *Linux Device Model* .
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 内核代码试图遵循标准规则。在本章中，我们只是介绍它们。它们都在专门的章节中讨论，从[第3章](http://post)开始，*内核设施和辅助函数*，我们可以更好地了解内核开发过程和技巧，直到[第13章](http://post1)，*Linux设备模型*。
- en: Coding style
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码风格
- en: Before going deep in this section, you should always refer to the kernel coding
    style manual, at `Documentation/CodingStyle` in the kernel source tree. This coding
    style is a set of rules you should respect, at least if you need to get its patches
    accepted by kernel developers. Some of these rules concern indentation, program
    flow, naming convention, and so on.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究本节之前，您应始终参考内核编码风格手册，位于内核源树中的`Documentation/CodingStyle`。这种编码风格是一组规则，您至少应该遵守这些规则，如果需要内核开发人员接受其补丁。其中一些规则涉及缩进、程序流程、命名约定等。
- en: 'Most popular ones are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的是：
- en: 'Always use tab indentation of 8 characters, and the line should be 80 columns
    long. If the indentation prevents you from writing your function, it is because
    this one has too many nesting levels. One can size the tabs and verify the line
    size using `scripts/cleanfile` script in from the kernel source:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用8个字符的制表符缩进，并且每行应为80列长。如果缩进阻止您编写函数，那是因为该函数的嵌套级别太多。可以使用内核源代码中的`scripts/cleanfile`脚本调整制表符大小并验证行大小：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can also indent the code correctly using the `indent` tool:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以使用`indent`工具正确缩进代码：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Every function/variable that is not exported should be declared as static.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个未导出的函数/变量都应声明为静态的。
- en: No spaces should be added around (inside) parenthesized expressions. *s = size
    of (struct file)* ; is accepted, whereas *s = size of( struct file )* ; is not.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在括号表达式（内部）周围不应添加空格。*s = size of (struct file)*；是可以接受的，而*s = size of( struct
    file )*；是不可以接受的。
- en: Using `typdefs` is forbidden.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁止使用`typdefs`。
- en: Always use `/* this */` comment style, not `// this`
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用`/* this */`注释样式，而不是`// this`
- en: 'BAD: `// do not use this please`'
  id: totrans-86
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不好：`// 请不要使用这个`
- en: 'GOOD: `/* Kernel developers like this */`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好的：`/* 内核开发人员喜欢这样 */`
- en: You should capitalise macros, but functional macros can be in lowercase.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏应该大写，但功能宏可以小写。
- en: A comment should not replace a code that is not illegible. Prefer rewriting
    the code rather than adding a comment.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释不应该替换不可读的代码。最好重写代码，而不是添加注释。
- en: Kernel structures allocation/initialization
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核结构分配/初始化
- en: The kernel always offers two possible allocation mechanisms for its data structures
    and facilities.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 内核始终为其数据结构和设施提供两种可能的分配机制。
- en: 'Some of these structures are:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些结构包括：
- en: Workqueue
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作队列
- en: List
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表
- en: Waitqueue
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待队列
- en: Tasklet
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tasklet
- en: Timer
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时器
- en: Completion
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成
- en: mutex
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥锁
- en: spinlock
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自旋锁
- en: 'Dynamical initializers are all macros it means they are always capitalized:
    `INIT_LIST_HEAD()` , `DECLARE_WAIT_QUEUE_HEAD()` , `DECLARE_TASKLET( )` , and
    so on.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 动态初始化器都是宏，这意味着它们始终大写：`INIT_LIST_HEAD()`，`DECLARE_WAIT_QUEUE_HEAD()`，`DECLARE_TASKLET()`等等。
- en: 'That being said, these are all discussed in [Chapter 3](text00023.html) , *Kernel
    Facilities and Helper Functions* . Therefore, data structures that represent framework
    devices are always allocated dynamically, each of which having its own allocation
    and deallocation API. These framework device types are:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，所有这些都在[第3章](text00023.html)中讨论，*内核设施和辅助函数*。因此，代表框架设备的数据结构始终是动态分配的，每个数据结构都有自己的分配和释放API。这些框架设备类型包括：
- en: Network
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: Input device
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入设备
- en: Char device
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符设备
- en: IIO device
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IIO设备
- en: Class
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Framebuffer
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帧缓冲
- en: Regulator
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调节器
- en: PWM device
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWM设备
- en: RTC
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RTC
- en: Scope of the static objects is visible in the whole driver, and by every device
    this driver manages. Dynamically allocated objects are visible only by the device
    that is actually using a given instance of the module.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 静态对象的作用域在整个驱动程序中可见，并且由此驱动程序管理的每个设备都可见。动态分配的对象仅由实际使用给定模块实例的设备可见。
- en: Classes, objects, and OOP
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类、对象和OOP
- en: The kernel implements OOP by means of a device and a class. Kernel subsystems
    are abstracted by means of classes. There are almost as many subsystems as there
    are directories under `/sys/class/` *.* The `struct kobject` structure is the
    center piece of this implementation. It even brings in a reference counter, so
    that the kernel may know how many users actually use the object. Every object
    has a parent, and has an entry in `sysfs` (if mounted).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 内核通过设备和类来实现OOP。内核子系统通过类进行抽象。几乎每个子系统都有一个`/sys/class/`下的目录。`struct kobject`结构是这种实现的核心。它甚至带有一个引用计数器，以便内核可以知道实际使用对象的用户数量。每个对象都有一个父对象，并且在`sysfs`中有一个条目（如果已挂载）。
- en: Every device that falls into a given subsystem has a pointer to an **operations**
    (**ops** ) structure, which exposes operations that can be executed on this device.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属于特定子系统的设备都有一个指向**操作**（**ops**）结构的指针，该结构公开了可以在此设备上执行的操作。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explained in a very short and simple manner how you should download
    the Linux source and process a first build. It also deals with some common concepts.
    That said, this chapter is quite brief and may not be enough, but never mind,
    it is just an introduction. That is why the next chapter gets more into the details
    of the kernel building process, how to actually compile a driver, either externally
    or as a part of the kernel, as well as some basics that one should learn before
    starting the long journey that kernel development represents.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以非常简短和简单的方式解释了如何下载Linux源代码并进行第一次构建。它还涉及一些常见概念。也就是说，这一章非常简短，可能不够，但没关系，这只是一个介绍。这就是为什么下一章会更深入地介绍内核构建过程，如何实际编译驱动程序，无论是作为外部模块还是作为内核的一部分，以及在开始内核开发这段漫长旅程之前应该学习的一些基础知识。
