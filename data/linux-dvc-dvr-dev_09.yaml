- en: Regmap API – A Register Map Abstraction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Regmap API - 寄存器映射抽象
- en: 'Before the regmap API was developed, there were redundant codes for the device
    drivers dealing with SPI core, I2C core, or both. The principle was the same;
    accessing the register for read/write operations. The following figure shows how
    either SPI or I2C API were standalone before Regmap was introduced to kernel:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发regmap API之前，处理SPI核心、I2C核心或两者的设备驱动程序存在冗余代码。原则是相同的；访问寄存器进行读/写操作。以下图显示了在Regmap引入内核之前，SPI或I2C
    API是如何独立存在的：
- en: '![](img/Image00016.gif)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00016.gif)'
- en: SPI and I2C subsystems before regmap
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: regmap之前的SPI和I2C子系统
- en: 'The regmap API was introduced in version 3.1 of the kernel, to factorize and
    unify the way kernel developers access SPI/I2C devices. It is then just a matter
    of how to initialize, configure a regmap, and process any read/write/modify operation
    fluently, whether it is SPI or I2C:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: regmap API是在内核的3.1版本中引入的，以因式分解和统一内核开发人员访问SPI/I2C设备的方式。然后只是如何初始化、配置regmap，并流畅地处理任何读/写/修改操作，无论是SPI还是I2C：
- en: '![](img/Image00017.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00017.jpg)'
- en: SPI and I2C subsystems after regmap
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: regmap之后的SPI和I2C子系统
- en: 'This chapter will walk through regmap framework by mean of:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将通过以下方式介绍regmap框架：
- en: Introducing the main data structures used in by the regmap framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了regmap框架中使用的主要数据结构
- en: Walking through regmap configuration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过regmap配置进行漫游
- en: Accessing devices using the regmap API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用regmap API访问设备
- en: Introducing the regmap caching system
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍regmap缓存系统
- en: Providing a complete driver that summarizes the concepts learned previously
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个总结先前学习的概念的完整驱动程序
- en: Programming with the regmap API
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用regmap API进行编程
- en: The regmap API is quite simple. There are only a few structures to know. The
    two most important structures of this API are `struct regmap_config` , which represents
    the configuration of the regmap, and `struct regmap` , which is the regmap instance
    itself. All of the regmap data structures are defined in `include/linux/regmap.h`
    .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: regmap API非常简单。只有少数结构需要了解。此API的两个最重要的结构是`struct regmap_config`，它表示regmap的配置，以及`struct
    regmap`，它是regmap实例本身。所有regmap数据结构都在`include/linux/regmap.h`中定义。
- en: regmap_config structure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: regmap_config结构
- en: '`struct regmap_config` stores the configuration of the regmap during the driver''s
    lifetime. What you set here affects read/write operations. It is the most important
    structure in the regmap API. The source looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct regmap_config`在驱动程序的生命周期内存储regmap的配置。您在这里设置的内容会影响读/写操作。这是regmap API中最重要的结构。源代码如下：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`reg_bits` : This mandatory field is the number of bits in a register''s address.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_bits`：这是寄存器地址中的位数，是强制性字段。'
- en: '`val_bits` : This represents the number of bits used to store a register''s
    value. It is a mandatory field.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`val_bits`：表示用于存储寄存器值的位数。这是一个强制性字段。'
- en: '`writeable_reg` : This is an optional callback function. If provided, it is
    used by the regmap subsystem when a register needs to be written. Before writing
    into a register, this function is automatically called to check whether the register
    can be written to or not:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writeable_reg`：这是一个可选的回调函数。如果提供，当需要写入寄存器时，regmap子系统将使用它。在写入寄存器之前，将自动调用此函数以检查寄存器是否可以写入：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`readable_reg` : This is the same as `writeable_reg` but for every register
    read operation.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readable_reg`：与`writeable_reg`相同，但用于每个寄存器读取操作。'
- en: '`volatile_reg` : This is a callback function called every time a register needs
    to be read or written through the regmap cache. If the register is volatile, the
    function should return true. A direct read/write is then performed to the register.
    If false is returned, it means the register is cacheable. In this case, the cache
    will be used for a read operation, and the cache will be written in the case of
    a write operation:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volatile_reg`：这是一个回调函数，每当需要通过regmap缓存读取或写入寄存器时都会调用。如果寄存器是易失性的，则函数应返回true。然后对寄存器执行直接读/写。如果返回false，则表示寄存器是可缓存的。在这种情况下，将使用缓存进行读取操作，并在写入操作的情况下写入缓存：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`wr_table` : Instead of providing a `writeable_reg` callback, one could provide
    a `regmap_access_table` , which is a structure holding a `yes_range` and a `no_range`
    field, both pointers to `struct regmap_range` . Any register that belongs to a
    `yes_range` entry is considered as writeable, and is considered as not writeable
    if it belongs to a `no_range` .'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr_table`：可以提供`writeable_reg`回调，也可以提供`regmap_access_table`，它是一个包含`yes_range`和`no_range`字段的结构，都指向`struct
    regmap_range`。属于`yes_range`条目的任何寄存器都被视为可写，并且如果属于`no_range`，则被视为不可写。'
- en: '`rd_table` : This is same as `wr_table` , but for any read operation.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rd_table`：与`wr_table`相同，但用于任何读取操作。'
- en: '`volatile_table` : Instead of `volatile_reg` , one could provide `volatile_table`
    . The principle is then the same as `wr_table` or `rd_table` , but for the caching
    mechanism.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volatile_table`：可以提供`volatile_reg`，也可以提供`volatile_table`。原则与`wr_table`或`rd_table`相同，但用于缓存机制。'
- en: '`max_register` : This is optional, it specifies the maximum valid register
    address, upon which no operation is permitted.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_register`：这是可选的，它指定了最大有效寄存器地址，超过该地址将不允许任何操作。'
- en: '`reg_read` : Your device may not support simple I2C/SPI read operations. You''ll
    then have no choice but to write your own customized read function. `reg_read`
    should then point to that function. That said most devices do not need that.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_read`：您的设备可能不支持简单的I2C/SPI读取操作。那么您别无选择，只能编写自己定制的读取函数。`reg_read`应指向该函数。也就是说，大多数设备不需要。'
- en: '`reg_write` : This is the same as `reg_read` but for write operations.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_write`：与`reg_read`相同，但用于写操作。'
- en: I highly recommend you look at `include/linux/regmap.h` for more details on
    each element.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您查看`include/linux/regmap.h`以获取有关每个元素的更多详细信息。
- en: 'The following is a kind of initialization of `regmap_config` :'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`regmap_config`的一种初始化方式：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: regmap initialization
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: regmap初始化
- en: As we said earlier, the regmap API supports both SPI and I2C protocols. Depending
    on the protocol you need to support in your driver, you will have to call either
    `regmap_init_i2c()` or `regmap_init_sp()i` in the `probe` function. To write a
    generic driver, regmap is the best choice.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，regmap API支持SPI和I2C协议。根据驱动程序中需要支持的协议，您将需要在`probe`函数中调用`regmap_init_i2c()`或`regmap_init_sp()`。要编写通用驱动程序，regmap是最佳选择。
- en: The regmap API is generic and homogenous. Only the initialization changes between
    bus types. Other functions are the same.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: regmap API 是通用和同质的。只有初始化在总线类型之间变化。其他函数都是一样的。
- en: It is a good practice to always initialize the regmap in the `probe` function,
    and one must always fill the `regmap_config` elements prior to initializing the
    regmap.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`probe`函数中始终初始化regmap是一个良好的实践，必须在初始化regmap之前始终填充`regmap_config`元素。
- en: 'Whether one allocated an I2C or SPI register map, it is freed with `regmap_exit`
    function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是分配了I2C还是SPI寄存器映射，都可以使用`regmap_exit`函数释放它：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function simply release a previously allocated register map.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数只是释放先前分配的寄存器映射。
- en: SPI initialization
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPI初始化
- en: Regmap SPI initialization consists of setting the regmap up, so that any device
    access will internally be translated into SPI commands. The function that does
    is `regmap_init_spi()` .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Regmap SPI初始化包括设置regmap，以便任何设备访问都会在内部转换为SPI命令。执行此操作的函数是`regmap_init_spi()`。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It takes a valid pointer to a `struct spi_device` structure as a parameter,
    which is the SPI device that will be interacted with, and a `struct regmap_config`
    that represents the configuration for the regmap. This function returns either
    a pointer to the allocated struct regmap on success, or a value that will be an
    `ERR_PTR()` on error.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它以一个有效的`struct spi_device`结构的指针作为参数，这是将要交互的SPI设备，以及代表regmap配置的`struct regmap_config`。此函数在成功时返回分配的struct
    regmap的指针，或者在错误时返回`ERR_PTR()`的值。
- en: 'A full example is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完整的例子如下：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I2C initialization
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I2C初始化
- en: 'On the other hand, I2C regmap initialization consists of calling `regmap_init_i2c()`
    on the regmap config, which will configure the regmap so that any device access
    will internally be translated into I2C commands:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，I2C regmap初始化包括在regmap配置上调用`regmap_init_i2c()`，这将配置regmap，以便任何设备访问都在内部转换为I2C命令：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The function takes a `struct i2c_client` structure as parameter, which is the
    I2C device that will used for interaction, along with a pointer to `struct regmap_config`
    which represents the configuration for the regmap. This function returns either
    a pointer to the allocated `struct regmap` on success, or a value that will be
    an `ERR_PTR()` on error.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数以`struct i2c_client`结构作为参数，这是将用于交互的I2C设备，以及代表regmap配置的指针`struct regmap_config`。此函数在成功时返回分配的`struct
    regmap`的指针，或者在错误时返回`ERR_PTR()`的值。
- en: 'A full example is:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完整的例子是：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Device access functions
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备访问函数
- en: 'The API handles data parsing, formatting, and transmission. In most cases,
    device accesses are performed with `regmap_read` , `regmap_write` and `regmap_update_bits`
    . These are the three most important functions you should always remember when
    it comes to storing/fetching data into/from the device. Their respective prototypes
    are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该API处理数据解析、格式化和传输。在大多数情况下，使用`regmap_read`、`regmap_write`和`regmap_update_bits`执行设备访问。这些是在存储/从设备中获取数据时应该始终记住的三个最重要的函数。它们的原型分别是：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`regmap_write` : This writes data to the device. If set in `regmap_config`
    , `max_register` , it will be used to check if the register address you need to
    read from is greater or lower. If the register address passed is lower than or
    equal to, `max_register` , then the write operation will be performed; otherwise,
    the regmap core will return invalid I/O error (`-EIO` ). Immediately after, the
    `writeable_reg` callback is called. The callback must return `true` before going
    on to the next step. If it returns `false` , then `-EIO` is returned and the write
    operation stopped. If `wr_table` is set instead of `writeable_reg` , then:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regmap_write`：向设备写入数据。如果在`regmap_config`中设置了`max_register`，则将用它来检查您需要从中读取的寄存器地址是大于还是小于。如果传递的寄存器地址小于或等于`max_register`，则将执行写入操作；否则，regmap核心将返回无效的I/O错误（`-EIO`）。紧接着，将调用`writeable_reg`回调。回调必须在进行下一步之前返回`true`。如果返回`false`，则返回`-EIO`并停止写操作。如果设置了`wr_table`而不是`writeable_reg`，则：'
- en: If the register address lies in `no_range` , `-EIO` is returned.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果寄存器地址位于`no_range`中，则返回`-EIO`。
- en: If the register address lies in `yes_range` , the next step is performed.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果寄存器地址位于`yes_range`中，则执行下一步。
- en: If the register address is present neither in `yes_range` nor `no_range` , then
    `-EIO` is returned and the operation is terminated.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果寄存器地址既不在`yes_range`也不在`no_range`中，则返回`-EIO`并终止操作。
- en: If `cache_type != REGCACHE_NONE` , then cache is enabled. In this case, the
    cache entry is first updated, and then a write to the hardware is performed; otherwise,
    a no cache action is performed.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`cache_type != REGCACHE_NONE`，则启用缓存。在这种情况下，首先更新缓存条目，然后执行硬件写入；否则，执行无缓存操作。
- en: If `reg_write` callback is provided, it is used to perform the write operation;
    otherwise, the generic regmap write function will be executed.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了`reg_write`回调，则将使用它执行写操作；否则，将执行通用的regmap写函数。
- en: '`regmap_read` : This reads data from the device. It works exactly like `regmap_write`
    with appropriate data structures (`readable_reg` , and `rd_table` ). Therefore,
    if provided, `reg_read` is used to perform the read operation; otherise, the generic
    remap read function will be performed.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regmap_read`：从设备中读取数据。它与`regmap_write`的工作方式完全相同，具有适当的数据结构（`readable_reg`和`rd_table`）。因此，如果提供了`reg_read`，则将使用它执行读取操作；否则，将执行通用的remap读取函数。'
- en: regmap_update_bits function
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: regmap_update_bits函数
- en: '`regmap_update_bits` is a three-in-one function. Its prototype is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`regmap_update_bits`是一个三合一的函数。其原型如下：'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It performs a read/modify/write cycle on the register map. It is a wrapper
    on `_regmap_update_bits` , which looks as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它在寄存器映射上执行读取/修改/写入循环。它是`_regmap_update_bits`的包装器，其形式如下：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This way, bits you need to update must be set to `1` in `mask` , and the corresponding
    bits should be set to the value you need to give to them in `val` .
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您需要更新的位必须在`mask`中设置为`1`，并且相应的位应在`val`中设置为您需要给予它们的值。
- en: As an example, to set the first and third bits to `1` , the mask should be `0b00000101`
    , and the value should be `0bxxxxx1x1` . To clear the seventh bit, mask must be
    `0b01000000` and the value should be `0bx0xxxxxx` , and so on.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将第一位和第三位设置为`1`，掩码应为`0b00000101`，值应为`0bxxxxx1x1`。要清除第七位，掩码必须为`0b01000000`，值应为`0bx0xxxxxx`，依此类推。
- en: Special regmap_multi_reg_write function
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊的regmap_multi_reg_write函数
- en: 'The purpose of `remap_multi_reg_write()` function is writing multiple registers
    to the device. Its prototype looks like as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`remap_multi_reg_write()`函数的目的是向设备写入多个寄存器。其原型如下所示：'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To see how to use that function, you need to know what `struct reg_sequence`
    is:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用该函数，您需要知道`struct reg_sequence`是什么：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And this is how it is used:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的使用方式：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Other device access functions
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他设备访问函数
- en: '`regmap_bulk_read()` and `regmap_bulk_write()` are used to read/write multiple
    registers from/to the device. Use them with large blocks of data.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`regmap_bulk_read()`和`regmap_bulk_write()`用于从/向设备读取/写入多个寄存器。将它们与大块数据一起使用。'
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Feel free to look into the regmap header file in the kernel source to see what
    choices you have.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 随时查看内核源中的regmap头文件，了解您有哪些选择。
- en: regmap and cache
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: regmap和缓存
- en: 'Obviously, regmap supports caching. Whether the cache system is used or not
    depends on the value of the `cache_type` field in `regmap_config` . Looking at
    `include/linux/regmap.h` , accepted values are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，regmap支持缓存。是否使用缓存系统取决于`regmap_config`中的`cache_type`字段的值。查看`include/linux/regmap.h`，接受的值为：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It is set to `REGCACHE_NONE` by default, meaning that the cache is disabled.
    Other values simply define how the cache should be stored.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它设置为`REGCACHE_NONE`，表示缓存已禁用。其他值只是定义缓存应如何存储。
- en: 'Your device may have a predefined power-on-reset value in certain registers.
    Those values can be stored in an array, so that any read operation returns the
    value contained in the array. However, any write operation affects the real register
    in the device, and updates the content in the array. It is a kind of a cache that
    we can use to speed up access to the device. That array is `reg_defaults` . Its
    structure looks like this in the source:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您的设备可能在某些寄存器中具有预定义的上电复位值。这些值可以存储在一个数组中，以便任何读操作都返回数组中包含的值。但是，任何写操作都会影响设备中的真实寄存器，并更新数组中的内容。这是一种我们可以使用的缓存，以加快对设备的访问速度。该数组是`reg_defaults`。它在源代码中的结构如下：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`reg_defaults` is ignored if `cache_type` is set to none. If no `default_reg`
    is set but you still enable the cache, the corresponding cache structure will
    be created for you.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`cache_type`设置为none，则将忽略`reg_defaults`。如果未设置`default_reg`但仍然启用缓存，则将为您创建相应的缓存结构。
- en: 'It is quite simple to use. Just declare it and pass it as a parameter to the
    `regmap_config` structure. Let''s have a look at the `LTC3589` regulator driver
    in `drivers/regulator/ltc3589.c` :'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用起来非常简单。只需声明它并将其作为参数传递给`regmap_config`结构。让我们看看`drivers/regulator/ltc3589.c`中的`LTC3589`调节器驱动程序：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Any read operation on any one of the registers present in the array will immediately
    return the value in the array. However, a write operation will be performed on
    the device itself, and updates the affected register in the array. This way, reading
    the `LTC3589_VRRCR` register will return `0xff` ; write any value in that register
    and it will update its entry in the array so that any new read operation will
    return the last written value, directly from the cache.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组中存在的任何寄存器进行任何读操作都会立即返回数组中的值。但是，写操作将在设备本身上执行，并更新数组中受影响的寄存器。这样，读取`LTC3589_VRRCR`寄存器将返回`0xff`；在该寄存器中写入任何值，它将更新数组中的条目，以便任何新的读操作将直接从缓存中返回最后写入的值。
- en: Putting it all together
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容放在一起
- en: 'Perform the following steps to set up regmap subsystem:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤设置regmap子系统：
- en: Set up a struct `regmap_config` , according to your device's characteristic.
    Set a register range if needed, default values if any, the `cache_type` if needed,
    and so on. If custom read/write functions are needed, pass them to `reg_read/reg_write`
    fields.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据设备的特性设置一个`regmap_config`结构。如果需要，设置寄存器范围，默认值，如果需要，`cache_type`等等。如果需要自定义读/写函数，请将它们传递给`reg_read/reg_write`字段。
- en: 'In the `probe` function, allocate a regmap using `regmap_init_i2c` or `regmap_init_spi`
    depending on the bus: I2C or SPI.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`probe`函数中，使用`regmap_init_i2c`或`regmap_init_spi`分配一个regmap，具体取决于总线：I2C或SPI。
- en: Whenever you need to read/write from/into registers, call `remap_[read|write]`
    functions.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当您需要从寄存器中读取/写入时，请调用`remap_[read|write]`函数。
- en: When you are done with the regmap, call `regmap_exit` to free the register map
    allocated in `probe` .
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您完成对regmap的操作后，调用`regmap_exit`来释放在`probe`中分配的寄存器映射。
- en: A regmap example
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个regmap示例
- en: 'To achieve our goal, let''s first describe a fake SPI device for which we can
    write a driver:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，让我们首先描述一个假的SPI设备，我们可以为其编写驱动程序：
- en: 8-bit register address
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8位寄存器地址
- en: 8-bit register values
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8位寄存器值
- en: 'Max register: 0x80'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大寄存器：0x80
- en: The write mask is 0x80
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入掩码为0x80
- en: 'Valid address range:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效地址范围：
- en: 0x20 to 0x4F
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x20到0x4F
- en: 0x60 to 0x7F
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x60到0x7F
- en: No custom read/write function needed.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要自定义读/写函数。
- en: 'The following is a fake skeleton:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个虚拟的骨架：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter is all about the regmap API. How easy it is, gives you an idea
    about how useful and widely used it is. This chapter has told you everything you
    need to know about the regmap API. Now you should be able to convert any standard
    SPI/I2C driver into a regmap. The next chapter will cover IIO devices, a framework
    for an analog to digital converter. Those kinds of device always sit on top of
    the SPI/I2C buses. It will be a challenge for us, at the end of the next chapter,
    to write an IIO driver using the regmap API.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讲述了regmap API。它有多么简单，让你了解了它有多么有用和广泛使用。本章告诉了你关于regmap API的一切你需要知道的东西。现在你应该能够将任何标准的SPI/I2C驱动程序转换成regmap。下一章将涵盖IIO设备，这是一个用于模数转换器的框架。这些类型的设备总是位于SPI/I2C总线的顶部。在下一章结束时，使用regmap
    API编写IIO驱动程序将是一个挑战。
