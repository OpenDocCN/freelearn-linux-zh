- en: 'Chapter 10: Working with Azure Kubernetes Service'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：使用Azure Kubernetes服务。
- en: In the previous chapter, we explored the world of container virtualization,
    and in particular Docker containers. This chapter is all about managing containerized
    workloads using **Azure Kubernetes Service** (**AKS**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探索了容器虚拟化的世界，特别是Docker容器。本章是关于使用**Azure Kubernetes服务**（**AKS**）管理容器化工作负载的。
- en: 'This chapter is different from all the other chapters in this book. Until now,
    every chapter has been about infrastructure and providing a platform: the classic
    system administrator working in the cloud. Even *Chapter 9*, *Container Virtualization
    in Azure*, contained questions such as ''''How do we install Docker?'''' and ''''How
    do we get the container up and running?'''' The questions we''ll answer in this
    chapter are the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章与本书中的所有其他章节都不同。到目前为止，每一章都是关于基础设施和提供平台：经典的云系统管理员。甚至*第9章*，*Azure中的容器虚拟化*，也包含诸如“我们如何安装Docker？”和“我们如何让容器运行起来？”的问题。本章将回答以下问题：
- en: How do we deploy and manage our workload during the development phase and afterward?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在开发阶段和之后如何部署和管理我们的工作负载？
- en: How can we scale up/down?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何进行扩展/缩减？
- en: What are the availability options?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性选项是什么？
- en: Kubernetes provides an important answer to all of these questions. It is a solution
    that is used to automate important tasks such as the deployment, management, scaling,
    networking, and management of the availability of container-based applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes为所有这些问题提供了重要的答案。它是一个解决方案，用于自动化重要任务，如部署、管理、扩展、网络和容器化应用程序的可用性管理。
- en: Kubernetes was originally designed by Google and is now maintained by the Cloud
    Native Computing Foundation ([https://www.cncf.io](https://www.cncf.io)). Microsoft
    is a big partner of this foundation and is an important contributor to Kubernetes
    projects in terms of money and code. Actually, one of the co-founders of Kubernetes,
    Brendan Burns, works for Microsoft and leads the teams that work on container
    orchestration within Microsoft. On top of that, Microsoft has started several
    open source projects with additional tooling for Kubernetes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes最初是由Google设计的，现在由Cloud Native Computing Foundation（[https://www.cncf.io](https://www.cncf.io)）维护。微软是这个基金会的重要合作伙伴，并且在金钱和代码方面是Kubernetes项目的重要贡献者。实际上，Kubernetes的联合创始人之一Brendan
    Burns就在微软工作，并领导着在微软内部从事容器编排工作的团队。此外，微软还启动了几个针对Kubernetes的开源项目，提供了额外的工具。
- en: Because Microsoft is so heavily involved in Kubernetes, it is able to implement
    a version of Kubernetes in Azure that is fully upstream-compatible. This is also
    important for developers so that they can use a local Kubernetes installation
    to develop software, and when the development is done, release it to the Azure
    cloud.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于微软在Kubernetes中的重要参与，它能够在Azure中实现一个完全与上游兼容的Kubernetes版本。这对开发人员也很重要，因此他们可以使用本地Kubernetes安装来开发软件，当开发完成后，将其发布到Azure云。
- en: AKS provides a fully managed containers-as-a-service solution for Kubernetes.
    This means that you don't have to think about the configuration, management, and
    upgrading of the Kubernetes software. The control plane is managed by Azure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: AKS为Kubernetes提供了一个完全托管的容器即服务解决方案。这意味着您不必考虑Kubernetes软件的配置、管理和升级。控制平面由Azure管理。
- en: 'AKS makes it easy to deploy and manage Kubernetes within Azure: it can handle
    the complete maintenance process, from provisioning to keeping your applications
    up to date and upscaling as per your needs.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: AKS使得在Azure中部署和管理Kubernetes变得容易：它可以处理从供应到保持应用程序最新和根据您的需求进行扩展的完整维护过程。
- en: Even the process of upgrading your Kubernetes cluster without any downtime can
    be done with AKS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至在不中断的情况下升级Kubernetes集群的过程也可以通过AKS完成。
- en: And last but not least, monitoring is available for every part of your Kubernetes
    cluster.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，监控对于Kubernetes集群的每个部分都是可用的。
- en: 'By the end of this chapter, you''ll be able to:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Explain what Kubernetes and AKS are.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释Kubernetes和AKS是什么。
- en: Use AKS to deploy and manage your clusters.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AKS来部署和管理您的集群。
- en: Maintain the complete life cycle of your applications in AKS.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AKS中维护应用程序的完整生命周期。
- en: So, let's go ahead and first understand what the technical requirements are
    before we actually start using AKS.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们实际开始使用AKS之前，让我们首先了解技术要求是什么。
- en: Technical Requirements
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'As stated in the introduction of this chapter, this chapter is different from
    all the other chapters and this affects the technical requirements. Until now,
    the technical requirements were simple: you just needed a bunch of virtual machines.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章介绍中所述，本章与所有其他章节都不同，这影响了技术要求。到目前为止，技术要求很简单：你只需要一堆虚拟机。
- en: This chapter needs a DevOps environment in which developers and operators are
    in the same team, working closely together, and where there is also someone who
    is doing both development- and operations-related tasks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要一个DevOps环境，在这个环境中，开发人员和运维人员在同一个团队中紧密合作，还有一个人既做开发又做运维相关的任务。
- en: 'Another choice has to be made: where do we develop? Locally, or in the Azure
    cloud? Both are possible and it shouldn''t make any difference! Cost-wise, it
    may be better to do it on a workstation. In this chapter, it''s sort of assumed
    that you''re doing it locally. So, you''ll need a workstation (or virtual machine).
    We need the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还必须做出选择：我们在哪里开发？本地还是在Azure云中？两者都可以，而且不应该有任何区别！从成本的角度来看，最好在工作站上进行。在本章中，假设您是在本地进行开发。因此，您需要一个工作站（或虚拟机）。我们需要以下内容：
- en: The Azure CLI.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI。
- en: Docker and build tools.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker和构建工具。
- en: Kubernetes.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes。
- en: Some essential developer tools, such as Git.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些基本的开发人员工具，比如Git。
- en: Some other tools, such as Helm, covered later on.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些其他工具，比如稍后介绍的Helm。
- en: A good **integrated development environment** (**IDE**). We prefer Microsoft
    **Visual Studio** (**VS**) Code with the Microsoft extensions for Docker and Kubernetes
    (only if a graphical interface is available; otherwise, use the Nano editor).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个很好的**集成开发环境**（**IDE**）。我们推荐使用Microsoft **Visual Studio**（**VS**）Code以及Docker和Kubernetes的Microsoft扩展（仅当有图形界面时；否则使用Nano编辑器）。
- en: Optionally, an orchestration tool such as Ansible. Please have a look at the
    Ansible `azure_rm_aks` and `8ks_raw` modules.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，可以使用诸如Ansible之类的编排工具。请查看Ansible `azure_rm_aks`和`8ks_raw`模块。
- en: Using WSL and VS Code
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用WSL和VS Code
- en: You can use **Windows Subsystem for Linux** (**WSL**) and VS Code along with
    the VS Code Remote WSL extension to get a Linux development environment on your
    Windows desktop or laptop without the overhead of having a virtual machine. This
    will enable you to access your Linux files from PowerShell or CMD and your Windows
    files from Bash. VS Code is a source code editor that can run on various platforms
    and supports many languages. You can develop, run, and debug Linux-based applications
    from your favorite Windows platform using WSL and VS Code. WSL features can be
    enabled using PowerShell and by installing Linux from the Microsoft Store. VS
    Code is available for Windows and Linux and can be downloaded from [https://code.visualstudio.com/](https://code.visualstudio.com/).
    Since the configuration settings of VS Code are maintained across both Windows
    and Linux platforms, you can easily switch back and forth from Windows to Linux
    and Linux to Windows.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**Windows子系统**（**WSL**）和VS Code以及VS Code远程WSL扩展，在Windows桌面或笔记本电脑上获得Linux开发环境，而无需使用虚拟机。这将使您能够从PowerShell或CMD访问Linux文件，并从Bash访问Windows文件。VS
    Code是一个可以在各种平台上运行并支持许多语言的源代码编辑器。您可以使用WSL和VS Code从您喜欢的Windows平台开发、运行和调试基于Linux的应用程序。可以使用PowerShell启用WSL功能，并从Microsoft
    Store安装Linux。VS Code适用于Windows和Linux，并可从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载。由于VS
    Code的配置设置在Windows和Linux平台上都是保持一致的，因此您可以轻松地在Windows和Linux之间切换。
- en: You can find the step-by-step tutorial for WSL at [https://docs.microsoft.com/en-us/learn/modules/get-started-with-windows-subsystem-for-linux/](https://docs.microsoft.com/en-us/learn/modules/get-started-with-windows-subsystem-for-linux/)
    and a detailed installation guide at [https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10).
    You can configure default shells and choose between PowerShell and WSL when running
    on Windows, and you can choose Zsh or Bash on Linux.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.microsoft.com/en-us/learn/modules/get-started-with-windows-subsystem-for-linux/](https://docs.microsoft.com/en-us/learn/modules/get-started-with-windows-subsystem-for-linux/)找到WSL的逐步教程，并在[https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)找到详细的安装指南。在Windows上运行时，您可以配置默认shell并在PowerShell和WSL之间进行选择，在Linux上可以选择Zsh或Bash。
- en: Installing Dependencies
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'We are going to use Ubuntu 18.04 LTS Desktop edition. But you can use an Ubuntu
    18.04 LTS server in an Azure virtual machine as well. With all the knowledge that
    you''ve gained in the other chapters, it''s easy to transfer what we''ll be doing
    to other Linux distributions, macOS, and even Windows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Ubuntu 18.04 LTS桌面版。但是您也可以在Azure虚拟机中使用Ubuntu 18.04 LTS服务器。有了其他章节中获得的所有知识，很容易将我们将要做的事情转移到其他Linux发行版、macOS甚至Windows上：
- en: 'First, upgrade Ubuntu:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，升级Ubuntu：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the developer tools, including some other dependencies and `openssh`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装开发人员工具，包括其他一些依赖项和`openssh`：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, we are going to install the Azure CLI.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将安装Azure CLI。
- en: 'You can install the Azure CLI by running a single command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行单个命令安装Azure CLI：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alternatively, you can use the following instructions for manual installation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下说明进行手动安装。
- en: 'Get the required package:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所需的软件包：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Get and install the signing key:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并安装签名密钥：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To install PowerShell and VS Code, we are using snaps, universal software packages
    similar to portable apps for Windows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装PowerShell和VS Code，我们使用的是snaps，这是类似于Windows上的便携式应用程序的通用软件包：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, you can use the following commands to install PowerShell Core:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下命令安装PowerShell Core：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Type `pwsh` to start PowerShell Core:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`pwsh`以启动PowerShell Core：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the PowerShell Core starts successfully, you will get the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果PowerShell Core成功启动，您将获得以下输出：
- en: '![Using the pwsh command to start PowerShell Core](img/B15455_10_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用pwsh命令启动PowerShell Core](img/B15455_10_01.jpg)'
- en: 'Figure 10.1: Starting PowerShell Core'
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.1：启动PowerShell Core
- en: 'Install the Azure cmdlet for Azure:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Azure的Azure cmdlet：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install Docker:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Docker：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will get the Docker version details as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得Docker版本详细信息如下：
- en: '![Getting the Docker version details](img/B15455_10_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![获取Docker版本详细信息](img/B15455_10_02.jpg)'
- en: 'Figure 10.2: Docker version details'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.2：Docker版本详细信息
- en: 'Stop Docker for now:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暂时停止Docker：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: kubectl Installation
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: kubectl安装
- en: 'kubectl is a command-line interface that can be used to manage your Kubernetes
    clusters. It can be used for many operations. For example, use `kubectl create`
    to create one or more files and use `kubectl delete` to delete resources from
    a file. We are going to use the Azure CLI to install `kubectl` and execute the
    following commands as root to grant the required permissions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: kubectl是一个命令行界面，可用于管理Kubernetes集群。它可用于许多操作。例如，使用`kubectl create`创建一个或多个文件，并使用`kubectl
    delete`从文件中删除资源。我们将使用Azure CLI来安装`kubectl`，并以root身份执行以下命令以授予所需的权限：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'First, you need to download the latest release using the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要使用以下命令下载最新版本：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, make it executable:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使其可执行：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, move it to your `PATH`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将其移动到您的`PATH`：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Verify the installation by asking for the version information:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过请求版本信息来验证安装：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To enable autocompletion, which could save you from a lot of typing. For Bash
    and Zsh in `kubectl`, execute the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用自动补全，可以为Bash和Zsh在`kubectl`中执行以下命令：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For Zsh, execute the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Zsh，请执行以下命令：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So far, we have installed the latest version of the kubectl binary with a `curl`
    command on Linux and enabled shell auto-completion for kubectl. We are now ready
    to use AKS.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用`curl`命令在Linux上安装了最新版本的kubectl二进制文件，并启用了kubectl的shell自动补全。现在我们准备使用AKS了。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are using kubectl and you get error messages similar to `Error from
    server (NotAcceptable): unknown (get nodes)`, downgrade your client using `https://dl.k8s.io/v1.10.6/kubernetes-client-linux-amd64.tar.gz`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你使用kubectl时收到类似`Error from server (NotAcceptable): unknown (get nodes)`的错误消息，使用`https://dl.k8s.io/v1.10.6/kubernetes-client-linux-amd64.tar.gz`降级你的客户端。'
- en: Though this is completely outside the scope of this book, we personally like
    to use the Zsh shell with a nice customization called Spaceship. The prompt gives
    you more insight into where you are and what you are doing while working with
    AKS.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这完全超出了本书的范围，但我们个人喜欢使用Zsh shell，并使用一个名为Spaceship的漂亮定制。提示符可以让你更清楚地了解你在哪里以及在处理AKS时在做什么。
- en: 'Here is the quick installation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '这是快速安装： '
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Starting to Use AKS
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用AKS
- en: 'Azure AKS makes it easy to deploy and manage your container applications. You
    can quickly define, deploy, and debug Kubernetes applications in addition to automatically
    containerizing your applications using Azure AKS. You can automate the monitoring,
    upgrading, repair, and scaling, which reduces the manual infrastructure maintenance.
    With kubectl installed, it''s time to set up and explore the Kubernetes environment
    in Azure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Azure AKS使得部署和管理容器应用变得容易。你可以快速定义、部署和调试Kubernetes应用程序，还可以使用Azure AKS自动将应用程序容器化。你可以自动化监控、升级、修复和扩展，从而减少手动基础设施维护。安装了kubectl后，现在是时候在Azure中设置和探索Kubernetes环境了：
- en: Create a cluster.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个集群。
- en: Find information about the cluster.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找有关集群的信息。
- en: Deploy a simple workload.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署一个简单的工作负载。
- en: Creating a Cluster with the Azure CLI
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Azure CLI创建一个集群
- en: In Kubernetes, we're going to work with clusters. A cluster contains a master
    or control plane that is in control of everything and one or more worker nodes.
    In Azure, we don't have to care about the master, only about the nodes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，我们将使用集群。一个集群包含一个主节点或控制平面，它控制着一切，以及一个或多个工作节点。在Azure中，我们不需要关心主节点，只需要关心节点。
- en: 'It''s a good idea to make a new resource group for the purposes of this chapter:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，最好为其创建一个新的资源组：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this resource group, we will deploy our cluster:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个资源组中，我们将部署我们的集群：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This command can take up to 10 minutes. As soon as you get your prompt back,
    verify it with the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令可能需要长达10分钟的时间。一旦你收到提示，用以下方法验证一下：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the output, you''ll find a lot of information, such as the fully qualified
    domain name, the name of the cluster, and so on:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你会找到很多信息，比如完全合格的域名，集群的名称等等：
- en: '![Getting the details of the cluster deployed](img/B15455_10_03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![获取已部署集群的详细信息](img/B15455_10_03.jpg)'
- en: 'Figure 10.3: Details of the deployed cluster'
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.3：部署集群的详细信息
- en: 'There is a web interface available called Kubernetes Dashboard that you can
    use to access the cluster. To make it available, execute the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为Kubernetes Dashboard的Web界面可供使用，你可以用它来访问集群。要使其可用，执行以下操作：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Point your browser to `http://127.0.0.1:8001`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的浏览器指向`http://127.0.0.1:8001`：
- en: '![The Kubernetes Dashboard with the details of the cluster and the resource
    group](img/B15455_10_04.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes Dashboard显示有关集群和资源组的详细信息](img/B15455_10_04.jpg)'
- en: 'Figure 10.4: Kubernetes Dashboard'
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.4：Kubernetes Dashboard
- en: The `az` utility is tunneling the portal to your localhost. Press *Ctrl* + *C*
    to exit the tunnel.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`az`实用程序正在将门户隧道传输到你的本地主机。按*Ctrl* + *C*退出隧道。'
- en: 'To be able to use the `kubectl` utility, we need to merge the configuration
    into the local configuration file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用`kubectl`实用程序，我们需要将配置合并到本地配置文件中：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Using the az aks get-credentials command to merge the configuration into
    the local configuration file](img/B15455_10_05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![使用az aks get-credentials命令将配置合并到本地配置文件](img/B15455_10_05.jpg)'
- en: 'Figure 10.5: Merging the configuration into the local configuration file'
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.5：将配置合并到本地配置文件
- en: 'Thanks to our fancy Command Prompt, you can see that we switched from our local
    Kubernetes cluster to the cluster in Azure. To see the available clusters, execute
    the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们时髦的命令提示符，你可以看到我们从本地Kubernetes集群切换到了Azure中的集群。要查看可用的集群，执行以下操作：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Viewing the available clusters using the kubectl config get-contexts command](img/B15455_10_06.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl config get-contexts命令查看可用的集群](img/B15455_10_06.jpg)'
- en: 'Figure 10.6: Viewing the available clusters'
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.6：查看可用的集群
- en: You can switch to the other cluster using `kubectl config use-context <cluster>`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`kubectl config use-context <cluster>`切换到另一个集群。
- en: 'You can also find information about your cluster using `kubectl`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`kubectl`找到有关你的集群的信息：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Getting the detailed information about the cluster using the kubectl cluster-info
    command](img/B15455_10_07.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl cluster-info命令获取有关集群的详细信息](img/B15455_10_07.jpg)'
- en: 'Figure 10.7: Information about the cluster'
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.7：有关集群的信息
- en: 'We created a Kubernetes cluster here called `Cluster01` using the `az aks create`
    command. Now let''s list the nodes, which are the worker machines of Kubernetes
    and are managed by a master node:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里创建了一个名为`Cluster01`的Kubernetes集群，使用了`az aks create`命令。现在让我们列出节点，这些节点是Kubernetes的工作机器，并由主节点管理：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Listing the nodes with the kubectl get nodes command](img/B15455_10_08.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl get nodes命令列出节点](img/B15455_10_08.jpg)'
- en: 'Figure 10.8: Listing the nodes'
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.8：列出节点
- en: First Deployment in AKS
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AKS中的第一个部署
- en: 'AKS allows you to build and deploy applications into a managed Kubernetes cluster,
    which manages the connectivity and availability of your containerized application.
    You can use a simple `kubectl create` command to deploy a Docker container in
    AKS:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: AKS 允许您构建和部署应用程序到托管的 Kubernetes 集群中，该集群管理容器化应用程序的连接和可用性。您可以使用简单的 `kubectl create`
    命令在 AKS 中部署 Docker 容器：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And within seconds, there is a message: `deployment.apps/nginx created`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟内，会出现消息：`deployment.apps/nginx created`。
- en: 'Verify the deployment using the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令验证部署：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Using the kubectl get deployment command to verify the deployment](img/B15455_10_09.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![使用 kubectl get deployment 命令验证部署](img/B15455_10_09.jpg)'
- en: 'Figure 10.9: Verifying the image deployment'
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.9：验证镜像部署
- en: 'When we executed the `run` command, the Docker container was deployed in the
    cluster. Or, more specifically, a pod was created with the container running in
    it. A pod is a group of containers with shared resources, such as storage and
    network resources and it also contains the specification for how to run the containers.
    To see the created pod, execute the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行 `run` 命令时，Docker 容器被部署到了集群中。更具体地说，一个 pod 被创建，并在其中运行容器。一个 pod 是一组共享资源的容器，比如存储和网络资源，它还包含了如何运行容器的规范。要查看创建的
    pod，请执行以下命令：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output of the preceding command returns the list of pod names, pod statuses
    (running, pending, succeeded, failed, or unknown), the number of restarts, and
    the uptime, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出返回了 pod 名称、pod 状态（运行中、挂起、成功、失败或未知）、重启次数和正常运行时间，如下所示：
- en: '![Getting the detials of the pods with the kubectl get pods command](img/B15455_10_10.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![使用 kubectl get pods 命令获取 pod 的详细信息](img/B15455_10_10.jpg)'
- en: 'Figure 10.10: Details of the pods'
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.10：pod 的详细信息
- en: 'Pods come and go; they are created dynamically while scaling up/down, among
    other things. Using the `explain` command, you can find all kinds of information
    about the pod:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Pods 来来去去；它们是动态创建的，可以在扩展上/下进行。使用 `explain` 命令，您可以找到有关 pod 的各种信息：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s delete the pod:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除 pod：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Execute `kubectl get pods` again; you should see that a new pod is available.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行 `kubectl get pods` 命令；您应该会看到一个新的 pod 可用。
- en: Creating Services
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建服务
- en: 'But actually, you shouldn''t care about the pod: the service is what''s important.
    A service is an object that makes the application accessible to the outside world.
    Behind the service, there are one or more pods. The service keeps tracks of the
    pods and their IP addresses, and it is an abstraction of a logical set of pods
    and their policies. You can use the following command to list all the services
    in a namespace:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，您不应该关心 pod：服务才是重要的。服务是使应用程序对外界可访问的对象。在服务的背后，有一个或多个 pod。服务跟踪 pod 及其 IP 地址，并且它是一组逻辑
    pod 及其策略的抽象。您可以使用以下命令列出命名空间中的所有服务：
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![Listing all the services in a namespace with the get services command](img/B15455_10_11.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![使用 get services 命令列出命名空间中的所有服务](img/B15455_10_11.jpg)'
- en: 'Figure 10.11: Listing all the services in a namespace'
  id: totrans-152
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.11：列出命名空间中的所有服务
- en: 'Only one service is found, `CLUSTER-IP`. More details can be found using the
    following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 只找到一个服务，`CLUSTER-IP`。可以使用以下命令找到更多详细信息：
- en: '[PRE33]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Getting the description of the services within Kubernetes](img/B15455_10_12.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![获取 Kubernetes 中服务的描述](img/B15455_10_12.jpg)'
- en: 'Figure 10.12: Getting the description of the Kubernetes services'
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.12：获取 Kubernetes 服务的描述
- en: 'Let''s get rid of our first deployment:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们摆脱我们的第一个部署：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Executing the kubectl delete deployment nginx command to delete the first
    deployment](img/B15455_10_13.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![使用 kubectl delete deployment nginx 命令删除第一个部署](img/B15455_10_13.jpg)'
- en: 'Figure 10.13: Deleting the first deployment'
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.13：删除第一个部署
- en: 'Let''s create a new one:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![Creating a new image for nginx](img/B15455_10_14.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![为 nginx 创建一个新镜像](img/B15455_10_14.jpg)'
- en: 'Figure 10.14: Creating a new nginx image'
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.14：创建一个新的 nginx 镜像
- en: 'Please note that we didn''t expose the ports. Let''s list the pods using `kubectl
    get pods`. To make the resource accessible, we add a service of the `LoadBalancer`
    type:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们没有暴露端口。让我们使用 `kubectl get pods` 命令列出 pod。为了使资源可访问，我们添加了一个 `LoadBalancer`
    类型的服务：
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output should be similar to the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '![Listing the pods and adding a service of the LoadBalancer type](img/B15455_10_15.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![列出 pod 并添加 LoadBalancer 类型的服务](img/B15455_10_15.jpg)'
- en: 'Figure 10.15: Listing the pods and adding a service of the LoadBalancer type'
  id: totrans-169
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.15：列出 pod 并添加 LoadBalancer 类型的服务
- en: Use the `EXTERNAL-IP` address in your browser. It will show you the welcome
    page of `nginx`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中使用 `EXTERNAL-IP` 地址。它会显示 `nginx` 的欢迎页面。
- en: Multi-Container Pods
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多容器 pod
- en: 'A pod is also an abstraction layer used by Kubernetes to maintain the container.
    There are many use cases and real-world scenarios to have multiple containers
    in a single pod to support microservices container applications to communicate
    with each other, as shown in the following diagram. The persistent storage in
    this diagram shows how each container communicates for read and write operations
    during the life of the pod and the shared persistent storage data is lost when
    you delete the pod:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 pod 也是 Kubernetes 用来维护容器的抽象层。有许多用例和真实场景需要在单个 pod 中有多个容器，以支持微服务容器应用程序之间的通信，如下图所示。此图中的持久存储显示了每个容器在
    pod 的生命周期中进行读写操作的通信方式，当您删除 pod 时，共享的持久存储数据会丢失：
- en: '![A block diagram depiciting the architecture of multi-container pods](img/B15455_10_16.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![一个块图表描述多容器 pod 的架构](img/B15455_10_16.jpg)'
- en: 'Figure 10.16: Architecture of multi-container pods'
  id: totrans-174
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.16：多容器 pod 的架构
- en: 'But there are use cases that are based on the fact that a pod provides shared
    resources for the containers within the pod, such as:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一些用例是基于 pod 为 pod 内的容器提供共享资源的事实，比如：
- en: Containers with helper applications such as logging and monitoring
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有辅助应用程序（如日志记录和监控）的容器
- en: Reverse proxies
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向代理
- en: 'Until now, we used the `—image` parameter to create a simple pod. For a more
    complex pod, we need to make a specification in YAML format. Create a file called
    `myweb.yaml` with the following content:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用`—image`参数创建了一个简单的pod。对于更复杂的pod，我们需要以YAML格式进行规范。创建一个名为`myweb.yaml`的文件，内容如下：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this file, a shared volume is created, called `journal`. The `emptydir` directive
    makes sure that the volume is created while creating the pod.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，创建了一个名为`journal`的共享卷。`emptydir`指令确保在创建pod时创建卷。
- en: 'To verify, execute the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 验证，执行以下命令：
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This command executes in the `myweb` pod on the `nginx` container by using the
    `findmnt` command. We have created containers, pods, and shared storage. Now let's
    shift our focus to Helm, which is the package manager for Kubernetes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令在`myweb` pod中的`nginx`容器上执行`findmnt`命令。我们已经创建了容器、pod和共享存储。现在让我们把注意力转移到Helm上，它是Kubernetes的包管理器。
- en: Note
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding option cannot be used as a cluster solution and you should probably
    mount one of the containers' filesystems as read-only using the `mountOptions`
    flag.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的选项不能作为集群解决方案使用，您可能需要使用`mountOptions`标志将其中一个容器的文件系统挂载为只读。
- en: Working with Helm
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Helm工作
- en: Helm ([https://helm.sh](https://helm.sh) and [https://github.com/helm](https://github.com/helm))
    is an application package manager for Kubernetes. You can compare it with `apt`
    and `yum` for Linux. It helps to manage Kubernetes using charts, which define,
    install, and upgrade the application you want to deploy on Kubernetes.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Helm ([https://helm.sh](https://helm.sh)和[https://github.com/helm](https://github.com/helm))是Kubernetes的应用程序包管理器。您可以将其与Linux的`apt`和`yum`进行比较。它帮助使用图表管理Kubernetes，这些图表定义、安装和升级您想要部署在Kubernetes上的应用程序。
- en: There are many charts available in Helm's GitHub repository and Microsoft, which
    is one of the biggest contributors to this project, also provides a repository
    with examples.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Helm的GitHub仓库和Microsoft提供了许多图表，Microsoft是该项目最大的贡献者之一。
- en: Installing Helm
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Helm
- en: 'If you are on an Ubuntu system, you have two choices—you can install Helm with
    a `snap` package or just download the binary from [https://github.com/kubernetes/helm/releases](https://github.com/kubernetes/helm/releases).
    Using the binary works for every Linux distribution, and the `snap` repository
    doesn''t always have the latest version of Helm. So, let''s use [https://github.com/helm/helm/releases](https://github.com/helm/helm/releases)
    to find the latest release of Helm and change `x` in the `helm-vx.x.x-linux-amd64.taz.gz`
    filename accordingly:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Ubuntu系统，有两种选择——您可以使用`snap`包安装Helm，或者只需从[https://github.com/kubernetes/helm/releases](https://github.com/kubernetes/helm/releases)下载二进制文件。使用二进制文件适用于每个Linux发行版，而`snap`存储库并不总是有Helm的最新版本。因此，让我们使用[https://github.com/helm/helm/releases](https://github.com/helm/helm/releases)找到Helm的最新版本，并相应更改`helm-vx.x.x-linux-amd64.taz.gz`文件名中的`x`：
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Always check for the latest release on the website and change the command accordingly.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 始终在网站上检查最新版本，并相应更改命令。
- en: 'macOS users can use Brew ([https://brew.sh/](https://brew.sh/)):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: macOS用户可以使用Brew ([https://brew.sh/](https://brew.sh/))：
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The client is installed, and with this client, we can deploy the server part,
    Tiller, into our Kubernetes cluster:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端已安装，有了这个客户端，我们可以将服务器部分Tiller部署到我们的Kubernetes集群中：
- en: '[PRE41]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![Using the helm init command to deploy Tiller into the Kubernetes Cluster](img/B15455_10_17.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![使用helm init命令将Tiller部署到Kubernetes集群中](img/B15455_10_17.jpg)'
- en: 'Figure 10.17: Deploying Tiller into the Kubernetes Cluster'
  id: totrans-198
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.17：将Tiller部署到Kubernetes集群中
- en: 'Verify the versions:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 验证版本：
- en: '[PRE42]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output should be similar to the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '![Verifying the Helm version](img/B15455_10_18.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![验证Helm版本](img/B15455_10_18.jpg)'
- en: 'Figure 10.18: Verifying the Helm version'
  id: totrans-203
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.18：验证Helm版本
- en: 'To allow Helm to get access to the Kubernetes cluster, a service account must
    be created with a corresponding role:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Helm能够访问Kubernetes集群，必须创建一个带有相应角色的服务账户：
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As shown in the following screenshot, we created Tiller service account in
    the `kube-system` namespace using the `kubectl create` command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，我们使用`kubectl create`命令在`kube-system`命名空间中创建了Tiller服务账户：
- en: '![Creating Tiller service account in the kube-system namespace](img/B15455_10_19.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![在kube-system命名空间中创建Tiller服务账户](img/B15455_10_19.jpg)'
- en: 'Figure 10.19: Creating Tiller service account in the kube-system namespace'
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.19：在kube-system命名空间中创建Tiller服务账户
- en: 'Grant cluster-admin access to Kubernetes resources to perform administrative
    tasks:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 授予Kubernetes资源的集群管理员访问权限以执行管理任务：
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'As shown in the following screenshot, you can create a custom role based on
    your requirements:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，您可以根据自己的需求创建自定义角色：
- en: '![Creating a custom role based with the kubectl create clusterrolebinding command](img/B15455_10_20.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl create clusterrolebinding命令创建基于自定义角色](img/B15455_10_20.jpg)'
- en: 'Figure 10.20: Creating a custom role'
  id: totrans-213
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.20：创建自定义角色
- en: 'Helm is the client installed on your local machine and Tiller is the server
    that is installed on your Kubernetes. To reconfigure Helm—that is, to make sure
    the version of Tiller matches with your local Helm—execute:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是安装在本地计算机上的客户端，Tiller是安装在Kubernetes上的服务器。要重新配置Helm，即确保Tiller的版本与本地Helm匹配，执行：
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Helm Repository Management
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Helm仓库管理
- en: 'A Helm repository is an HTTP server that can serve YAML files and consists
    of packaged charts and `index.yml` hosted on the same server. There are two repositories
    that are added during installation:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Helm仓库是一个HTTP服务器，可以提供YAML文件，并包含托管在同一服务器上的打包图表和`index.yml`。在安装期间添加了两个仓库：
- en: '[https://kubernetes-charts.storage.googleapis.com/](https://kubernetes-charts.storage.googleapis.com/)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://kubernetes-charts.storage.googleapis.com/](https://kubernetes-charts.storage.googleapis.com/)'
- en: http://127.0.0.1:8879/charts
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: http://127.0.0.1:8879/charts
- en: 'Let''s add the repository from Microsoft:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Microsoft添加仓库：
- en: '[PRE46]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![Adding the repository from Microsoft](img/B15455_10_21.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![添加来自Microsoft的仓库](img/B15455_10_21.jpg)'
- en: 'Figure 10.21: Adding the repository from Microsoft'
  id: totrans-223
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.21：从Microsoft添加存储库
- en: 'Check the available repositories:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 检查可用的存储库：
- en: '[PRE47]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output should be similar to the following:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![Using the helm repo list command to check the available repositories](img/B15455_10_22.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![使用helm repo list命令检查可用的存储库](img/B15455_10_22.jpg)'
- en: 'Figure 10.22: Checking the available repositories'
  id: totrans-228
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.22：检查可用的存储库
- en: 'To update the repository information, execute the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新存储库信息，请执行以下操作：
- en: '[PRE48]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can also remove repositories using the `remove` parameter.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`remove`参数删除存储库。
- en: Installing Applications with Helm
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Helm安装应用程序
- en: 'Let''s see what is available in the repositories:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看存储库中有什么可用的内容：
- en: '[PRE49]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '![The search result for wordpress giving the details about the chat version,
    app version, description and so on.](img/B15455_10_23.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![关于wordpress的搜索结果，提供有关聊天版本、应用程序版本、描述等详细信息。](img/B15455_10_23.jpg)'
- en: 'Figure 10.23: Searching the wordpress repository'
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.23：搜索wordpress存储库
- en: 'If you want information about the chart, how to use it, the available parameters,
    and so on, you can use the `helm inspect` command. For now, we''re just going
    to deploy it:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要有关图表的信息，如如何使用它、可用参数等，可以使用`helm inspect`命令。现在，我们只是要部署它：
- en: '[PRE50]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The installation output log from the preceding command contains the necessary
    details to access the `WordPress` instance.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的安装输出日志包含访问`WordPress`实例所需的必要详细信息。
- en: 'Verify the status of the Helm charts in the cluster using the following command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令验证集群中Helm图表的状态：
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The output of the preceding command returns the revision name, update timestamp,
    status, chart, and its namespace as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出返回修订名称、更新时间戳、状态、图表及其命名空间等信息：
- en: '![Using the helm ls command to Verify the status of the Helm charts](img/B15455_10_24.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![使用helm ls命令验证Helm图表的状态](img/B15455_10_24.jpg)'
- en: 'Figure 10.24: Verifying the status of the Helm charts'
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.24：验证Helm图表的状态
- en: 'Review the previous output of the installation process:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 审查安装过程的先前输出：
- en: '[PRE52]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This command returns the deployment timestamp, namespace, and status, in addition
    to resource details such as `v1/PersistentVolumeClaim`, `v1/Service`, `extensions/Deployment`,
    `v1/Secret`, and the `connection` details of the database server:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回部署时间戳、命名空间和状态，以及资源详细信息，如`v1/PersistentVolumeClaim`、`v1/Service`、`extensions/Deployment`、`v1/Secret`以及数据库服务器的`connection`详细信息：
- en: '![Using the helm status command to review the helm status](img/B15455_10_25.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![使用helm status命令审查helm状态](img/B15455_10_25.jpg)'
- en: 'Figure 10.25: Reviewing the helm status'
  id: totrans-250
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.25：审查helm状态
- en: 'And, of course, `kubectl` will also show you the following results:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`kubectl`也会向您显示以下结果：
- en: '![Using kubectl to get the deployment details](img/B15455_10_26.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl获取部署详细信息](img/B15455_10_26.jpg)'
- en: 'Figure 10.26: Using kubectl to get the deployment details'
  id: totrans-253
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.26：使用kubectl获取部署详细信息
- en: 'The following screenshot shows the output of the `kubectl get service` command:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`kubectl get service`命令的输出：
- en: '![Output of the kubectl get service command](img/B15455_10_27.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![kubectl get service命令的输出](img/B15455_10_27.jpg)'
- en: 'Figure 10.27: Output of the kubectl get service command'
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.27：kubectl get service命令的输出
- en: 'Let''s remove our deployment (the name can be found using `helm ls`):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除我们的部署（名称可以使用`helm ls`找到）：
- en: '[PRE53]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Removing the deployment with the helm delete command](img/B15455_10_28.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![使用helm delete命令删除部署](img/B15455_10_28.jpg)'
- en: 'Figure 10.28: Removing the deployment with the helm delete command'
  id: totrans-260
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.28：使用helm delete命令删除部署
- en: 'To customize the application, execute the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义应用程序，请执行以下操作：
- en: '[PRE54]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then, search for the WordPress settings:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，搜索WordPress设置：
- en: '![Searching for the WordPress settings](img/B15455_10_29.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![搜索WordPress设置](img/B15455_10_29.jpg)'
- en: 'Figure 10.29: Searching for the WordPress settings'
  id: totrans-265
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.29：搜索WordPress设置
- en: 'Create a YAML file, for instance, `custom.yaml`, with the following content:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个YAML文件，例如`custom.yaml`，其中包含以下内容：
- en: '[PRE55]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then, deploy the WordPress application:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，部署WordPress应用程序：
- en: '[PRE56]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You can verify the results using the `kubectl` command. First, get the Pod''s
    name:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`kubectl`命令验证结果。首先，获取Pod的名称：
- en: '[PRE57]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '![Verifying the deployment of the WordPress application with the kubectl get
    pod command](img/B15455_10_30.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl get pod命令验证WordPress应用程序的部署](img/B15455_10_30.jpg)'
- en: 'Figure 10.30: Verifying the deployment of the WordPress application'
  id: totrans-273
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.30：验证WordPress应用程序的部署
- en: 'After that, execute the following:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，执行以下操作：
- en: '[PRE58]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '![Usign the kubectl describe pod command to get the description of the pod](img/B15455_10_31.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl describe pod命令获取pod的描述](img/B15455_10_31.jpg)'
- en: 'Figure 10.31: Getting the pod description'
  id: totrans-277
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.31：获取pod描述
- en: For instance, in the `Events` section, you'll see that the `docker.io/bitnami/wordpress:4-ol-7`
    image is pulled.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在“事件”部分，您会看到拉取了`docker.io/bitnami/wordpress:4-ol-7`镜像。
- en: 'Clean everything up:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 清理一切：
- en: '[PRE59]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Don't bother about the stateful sets (`sts`); they were created by this application
    to have an ordered deployment and shared persistent storage.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心有状态的集合（`sts`）；它们是由该应用程序创建的，用于有序部署和共享持久存储。
- en: Creating Helm Charts
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Helm图表
- en: Helm charts are similar to software packages used in Linux distributions and
    you can browse the package repository (chart) directory structure using the Helm
    client. There are many charts created for you, and it is also possible to create
    your own.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Helm图表类似于Linux发行版中使用的软件包，您可以使用Helm客户端浏览软件包存储库（图表）目录结构。有许多为您创建的图表，也可以创建自己的图表。
- en: 'First, create a working directory and make it ready for use:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个工作目录，并准备好使用：
- en: '[PRE60]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The preceding command should give you a similar output:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令应该给出类似的输出：
- en: '![Creating a working directory and making it ready for use by first running
    cd myhelm and then executing ls -al command](img/B15455_10_32.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个工作目录，并通过首先运行cd myhelm然后执行ls -al命令使其准备好使用](img/B15455_10_32.jpg)'
- en: 'Figure 10.32: Creating a working directory'
  id: totrans-288
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.32：创建工作目录
- en: 'Some files and directories are created:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一些文件和目录：
- en: 'The `Chart.yaml` file: This file contains basic information about the chart.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`文件：该文件包含有关图表的基本信息。'
- en: 'The `values.yaml` file: The default configuration value.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml`文件：默认配置值。'
- en: 'The `charts` directory: The dependency charts.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charts`目录：依赖图表。'
- en: 'The `templates` directory: This is used to create manifest files for Kubernetes'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`目录：用于为Kubernetes创建清单文件'
- en: Additionally, you can add a `LICENSE` file, a `README.md` file, and a file with
    requirements, `requirements.yaml`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以添加一个`LICENSE`文件，一个`README.md`文件和一个带有要求的文件，`requirements.yaml`。
- en: 'Let''s modify `Chart.yaml` a little bit:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微修改`Chart.yaml`：
- en: '[PRE61]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The file is more or less self-explanatory: the maintainers are optional. `appVersion`
    refers to the version of, in this example, nginx.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件或多或少是自解释的：维护者是可选的。`appVersion`是指，在这个例子中，nginx的版本。
- en: 'Verify the configuration with the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令验证配置：
- en: '[PRE62]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Take some time to investigate the files in the `templates` directory and the
    `value.yaml` file. Of course, there is a reason why we used nginx as an example,
    because the files that are created by `helm create` also use nginx as an example.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间来调查`templates`目录和`value.yaml`文件中的文件。当然，我们之所以使用nginx作为示例，是因为`helm create`创建的文件也使用nginx作为示例。
- en: 'First, execute a dry run:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，执行干运行：
- en: '[PRE63]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This way, you can see the manifest that will be used to deploy the application.
    After that, you''re ready to install it:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您就可以看到将用于部署应用程序的清单。之后，您就可以安装它了：
- en: '[PRE64]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'After the installation, we realized that looking at the dry run, there is something
    that is not OK: the version of nginx is `nginx: stable`, which is version 1.14.0\.
    Open the `values.yaml` file and change `tag: stable` to `tag: 1.15.2`.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '安装后，我们意识到在干运行时，有一些不对劲：nginx的版本是`nginx: stable`，即版本1.14.0。打开`values.yaml`文件，将`tag:
    stable`更改为`tag: 1.15.2`。'
- en: 'Use `helm ls` to find the name and update it:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`helm ls`查找名称并更新它：
- en: '[PRE65]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'A new pod will be created; the old one will be deleted:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个新的pod；旧的将被删除：
- en: '![Finding the name of the pod and updating it by relacing the new pod with
    the old pod](img/B15455_10_33.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![通过将新的pod替换为旧的pod来查找pod的名称并更新它的输出](img/B15455_10_33.jpg)'
- en: 'Figure 10.33: Updating the pod version'
  id: totrans-310
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.33：更新pod版本
- en: 'There is even a `rollback` option if you want to revert back to your old version:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有一个`rollback`选项，如果您想恢复到旧版本：
- en: '[PRE66]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: You just need to specify the release and revision to which you want to revert.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要指定要恢复的发布和修订版本。
- en: Working with Draft
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用草稿
- en: Helm is typically something you're going to use, as a developer, on applications
    that are more or less production-ready and should be maintained. It's also most
    likely that you hosted the code on a version control system such as GitHub.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，您通常会使用Helm，用于准备就绪的应用程序，并且应该进行维护。您很可能还将代码托管在GitHub等版本控制系统上。
- en: This is where Draft ([https://github.com/Azure/draft](https://github.com/Azure/draft))
    comes in. It tries to streamline the process, starting with your code, in the
    Kubernetes cluster.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是草稿（[https://github.com/Azure/draft](https://github.com/Azure/draft)）的用武之地。它试图简化流程，从您的代码开始，在Kubernetes集群中进行。
- en: The tool is in heavy development. Draft is getting more popular and stable with
    new languages and features being added regularly.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具正在大力开发中。草稿变得越来越受欢迎和稳定，定期添加新的语言和功能。
- en: If the development phase turns into something that seems to be usable, you can
    still use Draft, but it's more likely that you'll switch to Helm as well.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发阶段变成了似乎可用的东西，您仍然可以使用草稿，但更有可能的是您也会转向Helm。
- en: 'To find out what programming languages are supported by Draft, you can execute
    the following commands after the installation:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解草稿支持哪些编程语言，您可以在安装后执行以下命令：
- en: '[PRE67]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Installing Draft
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装草稿
- en: To be able to use Draft, Helm must be installed and configured.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用草稿，必须安装和配置Helm。
- en: 'Get your copy from [https://github.com/Azure/draft/releases](https://github.com/Azure/draft/releases):'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://github.com/Azure/draft/releases](https://github.com/Azure/draft/releases)获取您的副本：
- en: '[PRE68]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Always check for the latest release on the website and change the command accordingly.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 始终在网站上检查最新版本，并相应更改命令。
- en: 'macOS users can install it with Brew:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: macOS用户可以使用Brew安装它：
- en: '[PRE69]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'You can see that the developers who work on Helm are also involved with the
    development of Draft. In both cases, many of them are Microsoft developers. Similar
    to Helm, after installing the client, you have to initialize Draft:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，使用Helm的开发人员也参与了Draft的开发。在这两种情况下，其中许多人是微软的开发人员。与Helm类似，在安装客户端后，您必须初始化草稿：
- en: '[PRE70]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This will install some default plugins and set up the repositories you can use
    within Draft.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装一些默认插件并设置您可以在草稿中使用的存储库。
- en: 'Check the version with the following:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查版本：
- en: '[PRE71]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'At the time of writing, its version is 0.16.0:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，其版本为0.16.0：
- en: '![The output showing the Draft version as 0.16.0 ](img/B15455_10_34.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示草稿版本为0.16.0](img/B15455_10_34.jpg)'
- en: 'Figure 10.34: Checking the Draft version'
  id: totrans-335
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.34：检查草稿版本
- en: The last step involves configuring a Docker repository, Docker Hub, or Azure.
    For the purposes of this book, we are using Azure.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步涉及配置Docker存储库、Docker Hub或Azure。在本书的目的中，我们使用的是Azure。
- en: 'Create an **Azure container registry** (**ACR**):'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 创建**Azure容器注册表**（**ACR**）：
- en: '[PRE72]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Log in to `LinuxStarACR`:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到`LinuxStarACR`：
- en: '[PRE73]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '![Logging in to LinuxStarACR with the az acr login --name LinuxStarACR command](img/B15455_10_35.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![使用az acr login --name LinuxStarACR命令登录到LinuxStarACR](img/B15455_10_35.jpg)'
- en: 'Figure 10.35: Logging in to LinuxStarACR'
  id: totrans-342
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.35：登录到LinuxStarACR
- en: 'Configure the repository:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 配置存储库：
- en: '[PRE74]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Log in to the registry:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到注册表：
- en: '[PRE75]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create trust between Draft and the ACR:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在草稿和ACR之间创建信任：
- en: '[PRE76]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: We have successfully installed Draft v0.16.0 and created ACR. Finally, we created
    trust between Draft and ACR. It's time to go ahead and start using Draft.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功安装了Draft v0.16.0并创建了ACR。最后，我们在Draft和ACR之间创建了信任。现在是时候继续开始使用草稿了。
- en: Using Draft
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用草稿
- en: 'Let''s develop some simple Draft code. For this, we''ll create a directory
    and name it `mynode`. In this directory, we''ll create a file called `mynode.js`
    with the following code:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开发一些简单的Draft代码。为此，我们将创建一个名为`mynode`的目录。在这个目录中，我们将创建一个名为`mynode.js`的文件，其中包含以下代码：
- en: '[PRE77]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This is a simple web server that serves a page saying `Hello World!`. We''re
    in a very early stage of our development process. To create a `package.json` file,
    execute the following:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的Web服务器，提供一个显示“Hello World!”的页面。我们处于开发过程的早期阶段。要创建一个`package.json`文件，请执行以下操作：
- en: '[PRE78]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Fill in the information:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 填写信息：
- en: '[PRE79]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now we are ready to execute Draft:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备执行Draft：
- en: '[PRE80]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '![Creating a Dockerfile using the draft create command](img/B15455_10_36.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![使用draft create命令创建Dockerfile](img/B15455_10_36.jpg)'
- en: 'Figure 10.36: Creating a Dockerfile using the draft create command'
  id: totrans-360
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.36：使用draft create命令创建Dockerfile
- en: This will create a Dockerfile and all the information for Helm.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个Dockerfile和所有Helm的信息。
- en: 'The last line of the output, `Ready to sail`, actually means that you are ready
    to execute:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的最后一行“准备启航”实际上意味着你已经准备好执行：
- en: '[PRE81]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The preceding command generates the following output:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令生成以下输出：
- en: '![Building and pushing the Docker image with the draft up command](img/B15455_10_37.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![使用draft up命令构建和推送Docker镜像](img/B15455_10_37.jpg)'
- en: 'Figure 10.37: Building and pushing the Docker image'
  id: totrans-366
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.37：构建和推送Docker镜像
- en: This will build the image and release the application.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建镜像并发布应用程序。
- en: 'Executing `helm ls` will show the `mynode` application:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`helm ls`将显示`mynode`应用程序：
- en: '![The output displaying the details of mynode application](img/B15455_10_38.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![显示mynode应用程序的详细信息的输出](img/B15455_10_38.jpg)'
- en: 'Figure 10.38: Getting the details of mynode application'
  id: totrans-370
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.38：获取mynode应用程序的详细信息
- en: 'Use `kubectl get services` to show the service:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl get services`来显示服务：
- en: '![Displaying the service using kubectl get services command](img/B15455_10_39.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl get services命令显示服务](img/B15455_10_39.jpg)'
- en: 'Figure 10.39: Using kubectl get services to display the service'
  id: totrans-373
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.39：使用kubectl get services显示服务
- en: 'Everything seems to be OK here, but `kubectl get pod` tells us otherwise:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这里一切似乎都很正常，但`kubectl get pod`告诉我们情况并非如此：
- en: '![Using the kubectl get pod command to check the status of the pod](img/B15455_10_40.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl get pod命令检查pod的状态](img/B15455_10_40.jpg)'
- en: 'Figure 10.40: Checking the status of the pod'
  id: totrans-376
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.40：检查pod的状态
- en: 'The `draft logs` command doesn''t show any errors. So, let''s find out what
    Kubernetes thinks:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`draft logs`命令没有显示任何错误。因此，让我们看看Kubernetes认为什么：'
- en: '[PRE82]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'It states `npm ERR! missing script: start`. On purpose, we made a mistake in
    the `package.json` file. Change the content, modifying the values as per the following
    example:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '它声明`npm ERR! missing script: start`。故意在`package.json`文件中制造了一个错误。根据以下示例修改内容，修改值：'
- en: '[PRE83]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Update the application by executing the following again:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 通过再次执行以下操作来更新应用程序：
- en: '[PRE84]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Connect to the application:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到应用程序：
- en: '[PRE85]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '![Connecting to the application with the draft connect command](img/B15455_10_41.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![使用draft connect命令连接应用程序](img/B15455_10_41.jpg)'
- en: 'Figure 10.41: Connecting to the application'
  id: totrans-386
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.41：连接到应用程序
- en: 'Open another terminal:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 打开另一个终端：
- en: '[PRE86]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The output must be `Hello World!`.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 输出必须是“Hello World!”。
- en: 'Press *Ctrl* + *C* in the terminal, run `draft connect`, and remove the deployment:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中按下*Ctrl* + *C*，运行`draft connect`，并删除部署：
- en: '[PRE87]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Check the cluster resources with `kubectl get all` and clean up, if needed.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl get all`检查集群资源，并根据需要进行清理。
- en: Managing Kubernetes
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理Kubernetes
- en: We've created a Kubernetes cluster, and we've learned about the `kubectl` utility
    and about some of the tools that are available to develop and maintain your applications
    in a Kubernetes cluster.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个Kubernetes集群，并且学习了`kubectl`实用程序以及一些可用于开发和维护Kubernetes集群中应用程序的工具。
- en: So, if you look back at our three questions in the introduction of this chapter,
    we've answered the first question. In this section, we are going to answer the
    other two questions and also cover how to update the Kubernetes version.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果回顾一下本章开头的三个问题，我们已经回答了第一个问题。在本节中，我们将回答另外两个问题，并介绍如何更新Kubernetes版本。
- en: Updating Applications
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新应用程序
- en: Earlier on, we used Helm and Draft to manage our application, which meant all
    the hard work was done for us. But you can also update the workload with the help
    of `kubectl`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们使用Helm和Draft来管理我们的应用程序，这意味着所有的辛苦工作都已经为我们完成。但是你也可以借助`kubectl`来更新工作负载。
- en: 'Normally, our cluster will be empty now, so let''s quickly deploy our `nginx`
    pod again:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们的集群现在应该是空的，所以让我们快速再次部署我们的`nginx` pod：
- en: '[PRE88]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Have a good look at the deployment:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看部署：
- en: '![The output showing that deployment of the nginx pod was successful](img/B15455_10_42.jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![显示nginx pod部署成功的输出](img/B15455_10_42.jpg)'
- en: 'Figure 10.42: Deploying the nginx pod'
  id: totrans-402
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.42：部署nginx pod
- en: 'This actually tells us that we wanted one instance, there is one running, it
    is up to date (the number of instances that were updated to match the desired
    capacity), and it is available. The version of nginx running is not the latest
    one, so we want to update it to version 1.17.5\. Execute the following:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上告诉我们，我们想要一个实例，有一个正在运行，它是最新的（已更新以匹配所需容量的实例数），并且它是可用的。运行的nginx版本不是最新的，所以我们想要将其更新到版本1.17.5。执行以下操作：
- en: '[PRE89]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Change the image to `nginx:1.17.5`:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 将镜像更改为`nginx:1.17.5`：
- en: '![Changing the image to nginx:1.17.5](img/B15455_10_43.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![将镜像更改为nginx:1.17.5](img/B15455_10_43.jpg)'
- en: 'Figure 10.43: Changing the image to nginx:1.17.5'
  id: totrans-407
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.43：将镜像更改为nginx:1.17.5
- en: The **kubectl rollout** command can be used to manage your resource deployment.
    Some of the valid rollout options are status, history, pause, restart, resume
    and undo. **kubectl rollout status** displays the current status of a rollout
    whereas **kubectl rollout history** lists previous revisions and configurations.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl rollout**命令可用于管理资源部署。一些有效的rollout选项包括status、history、pause、restart、resume和undo。**kubectl
    rollout status**显示部署的当前状态，而**kubectl rollout history**列出以前的修订和配置。'
- en: '[PRE90]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Alternatively, even better, you can use the `describe` command, which provides
    you with a more detailed output than the preceding two commands combined:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更好的是，您可以使用`describe`命令，它为您提供比前两个命令结合起来更详细的输出：
- en: '[PRE91]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '![Getting more detailed output for the nginx deployment with the kubectl describe
    deployment command](img/B15455_10_44.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: 使用kubectl describe deployment命令获取nginx部署的更详细输出
- en: 'Figure 10.44: Detailed information of the nginx deployment'
  id: totrans-413
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.44：nginx部署的详细信息
- en: 'Another way to update the deployment is by using the `set image` command to
    roll out the updated nginx containers with the new version, 1.17.5, of your deployment
    by updating the image as shown here:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 更新部署的另一种方法是使用`set image`命令，通过更新映像来部署更新的nginx容器，新版本为1.17.5，如下所示：
- en: '[PRE92]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: As you can see from the preceding screenshot, the nginx container image has
    been upgraded to version 1.17.5 successfully.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，nginx容器映像已成功升级为版本1.17.5。
- en: Scaling Applications
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展应用程序
- en: At the moment, there is one pod running, but to handle all the load coming in,
    you may need more instances and to load balance the incoming traffic. To do so,
    you'll need replicas to define a specified number of pod replicas that are running
    at any given time.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有一个正在运行的pod，但为了处理所有传入的负载，您可能需要更多实例并且需要负载平衡传入的流量。为此，您需要副本来定义任何给定时间运行的指定数量的pod副本。
- en: 'Let''s go back to `kubectl` and get the current deployment:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`kubectl`并获取当前的部署：
- en: '![Getting the status of the current deployment](img/B15455_10_45.jpg)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: 获取当前部署的状态
- en: 'Figure 10.45: Getting the status of the current deployment'
  id: totrans-421
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.45：获取当前部署的状态
- en: The desired (configured) state at this moment is `1`. The current situation
    is `1` and there is `1` available.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻的期望（配置）状态是`1`。当前情况是`1`，有`1`个可用。
- en: 'To scale up to three instances, execute the following:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展到三个实例，请执行以下操作：
- en: '[PRE93]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Run `kubectl get deployments` again; after that, look at the available pods:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`kubectl get deployments`；然后查看可用的pod：
- en: '[PRE94]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '![The output showing the status of the available pods after scaling up](img/B15455_10_46.jpg)'
  id: totrans-427
  prefs: []
  type: TYPE_IMG
  zh: 显示扩展后可用pod的状态的输出
- en: 'Figure 10.46: Checking the available pods after scaling up'
  id: totrans-428
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.46：扩展后检查可用的pod
- en: 'Create a load balancer service:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 创建负载均衡器服务：
- en: '[PRE95]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '![The output showing the creation of a load balancer service](img/B15455_10_47.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_IMG
  zh: 显示创建负载均衡器服务的输出
- en: 'Figure 10.47: Creating a load balancer service'
  id: totrans-432
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.47：创建负载均衡器服务
- en: Now every HTTP request is taken by the load balancer and traffic is spread over
    the instances.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每个HTTP请求都由负载均衡器处理，并且流量分布在实例之间。
- en: 'You can also use autoscaling. First, install Metrics Server:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用自动缩放。首先，安装Metrics Server：
- en: '[PRE96]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Configure autoscaling: if the load is above `50` percent, an extra instance
    is created, to a maximum of `10`:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 配置自动缩放：如果负载超过`50`％，则会创建额外的实例，最多为`10`：
- en: '[PRE97]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Of course, in this scenario, it makes sense to have at least two nodes available
    in your cluster:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在这种情况下，至少有两个节点在您的集群中是有意义的：
- en: '[PRE98]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Note that this process will take about 10 minutes. To view the status of the
    autoscaling, execute the following:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此过程大约需要10分钟。要查看自动缩放的状态，请执行以下操作：
- en: '[PRE99]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '![Using the kubectl get hpa command to view the status of the autoscaling](img/B15455_10_48.jpg)'
  id: totrans-442
  prefs: []
  type: TYPE_IMG
  zh: 使用kubectl get hpa命令查看自动缩放的状态
- en: 'Figure 10.48: Listing the autoscalers'
  id: totrans-443
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.48：列出自动缩放器
- en: Upgrading Kubernetes
  id: totrans-444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级Kubernetes
- en: As with any software or application, you need to keep your Kubernetes clusters
    up to date by upgrading them regularly. Upgrading is very important to get the
    most recent bug fixes and all the critical security features along with the latest
    Kubernetes features. Having multiple nodes available is also necessary if you
    want to upgrade the Kubernetes control plane without downtime. The following steps
    will show you how to quickly upgrade your Kubernetes clusters.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何软件或应用程序一样，您需要定期升级Kubernetes集群以使其保持最新状态。升级非常重要，可以获得最新的错误修复和所有关键的安全功能，以及最新的Kubernetes功能。如果要在不间断的情况下升级Kubernetes控制平面，则还需要有多个可用节点。以下步骤将向您展示如何快速升级Kubernetes集群。
- en: 'First, view the current version:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 首先查看当前版本：
- en: '[PRE100]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '![The output displaying the current version of Kubernetes as 1.13.12](img/B15455_10_49.jpg)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
  zh: 显示当前Kubernetes版本为1.13.12的输出
- en: 'Figure 10.49: Viewing the current version of Kubernetes'
  id: totrans-449
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.49：查看当前Kubernetes版本
- en: 'Ask for the versions available in your location:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 询问您位置的可用版本：
- en: '[PRE101]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '![Getting the the versions available in the East US location](img/B15455_10_50.jpg)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
  zh: 获取East US位置可用版本的输出
- en: 'Figure 10.50: Available versions for East US location'
  id: totrans-453
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.50：East US位置的可用版本
- en: 'We can upgrade to version 1.14.8:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以升级到版本1.14.8：
- en: '[PRE102]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Adding the `--no-wait` parameter has the effect that you'll get your prompt
    back almost directly.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`--no-wait`参数的效果是您几乎立即就能恢复提示符。
- en: This way, after about 3 minutes, you can start playing with `kubectl` to get
    the status of the nodes and pods (use the `-owide` parameter, for example, `kubectl
    get pods -o wide`) and find out that a new node has been created with the newest
    version. The workload is recreated on that node and the other node is updated.
    After that, the last one remaining is emptied and upgraded.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，大约3分钟后，您可以开始使用`kubectl`来获取节点和pod的状态（使用`-owide`参数，例如`kubectl get pods -o wide`），并了解已创建具有最新版本的新节点。工作负载在该节点上重新创建，并更新了另一个节点。之后，最后一个剩下的节点被清空并升级。
- en: Persistent Storage
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久存储
- en: In the previous chapter, we stated that there are multiple ways to use persistent
    storage in our container, and we also referred to this in this chapter.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们提到了在容器中使用持久存储的多种方法，并且在本章中也提到了这一点。
- en: Kubernetes can configure persistent storage, but you have to provide it, for
    instance, via an NFS container or by implementing a StorSimple iSCSI Virtual Array
    (which is especially useful if you need read/write access from multiple containers).
    Even if you are using Azure Storage, there are many choices to make. Do you want
    to use disks or Azure Storage? Do you want to create them on the fly (dynamically)
    or use existing ones (statically)? Most of these questions are answered based
    on cost and the need for services such as replication, backup, and snapshots.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可以配置持久存储，但您必须提供它，例如通过NFS容器或通过实施StorSimple iSCSI虚拟阵列（如果您需要从多个容器进行读/写访问，这将特别有用）。即使您使用Azure存储，也有许多选择要做。您想使用磁盘还是Azure存储？您想动态创建它们还是使用现有的（静态）？大多数这些问题都是基于成本和对复制、备份和快照等服务需求来回答的。
- en: In this section, we want to cover the dynamic options; orchestration-wise, it's
    a better choice because you can do everything within Kubernetes (or using the
    tooling around it).
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们想要涵盖动态选项；在编排方面，这是一个更好的选择，因为您可以在Kubernetes内部完成所有操作（或使用其周围的工具）。
- en: 'Whether you are using Azure Storage or disks, you''ll need a storage account
    in the same resource group as Kubernetes:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用Azure存储还是磁盘，您都需要在与Kubernetes相同的资源组中拥有一个存储账户：
- en: '[PRE103]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Please revisit *Chapter 2*, *Getting Started with the Azure Cloud*, for the
    syntax of the preceding command. Remember that the name must be unique.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看*第2章*，*开始使用Azure云*，以获取上述命令的语法。请记住，名称必须是唯一的。
- en: Azure Disk for Kubernetes
  id: totrans-465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes的Azure磁盘
- en: 'You can dynamically or statically provision persistent volume for use with
    one or many Kubernetes pods in an AKS cluster. There are two storage classes:
    standard Azure disk (the default) and premium Azure disk, which is a managed premium
    storage class:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以动态或静态地为在AKS集群中的一个或多个Kubernetes pod使用的持久卷提供存储类。有两种存储类：标准Azure磁盘（默认）和高级Azure磁盘，这是一种托管的高级存储类：
- en: 'First, create a YAML file to create the storage class. This makes it possible
    to automatically provision the storage:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个YAML文件来创建存储类。这样可以自动提供存储：
- en: '[PRE104]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Apply it with the following:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容应用它：
- en: '[PRE105]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Replace the filename with the name of the file you just created.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 用刚创建的文件名替换文件名。
- en: 'Another YAML file is needed to claim the persistent volume, or in other words,
    create it:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还需要另一个YAML文件来索赔持久卷，或者换句话说，创建它：
- en: '[PRE106]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Please note that the match is made in the annotations. Apply this file as well:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，匹配是在注释中完成的。也要应用这个文件：
- en: '[PRE107]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Verify the result with the following:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容验证结果：
- en: '[PRE108]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '![Executing the kubectl get sc command to verify the creation of the storage
    class](img/B15455_10_51.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_IMG
  zh: '![执行kubectl get sc命令以验证存储类的创建](img/B15455_10_51.jpg)'
- en: 'Figure 10.51: Verifying the creation of the storage class'
  id: totrans-479
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.51：验证存储类的创建
- en: 'To use the storage in a pod, you can use it in a similar way to the following
    example:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在pod中使用存储，可以像以下示例一样使用它：
- en: '[PRE109]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Azure Files for Kubernetes
  id: totrans-482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes的Azure文件
- en: 'When you mount your Azure disk with access mode type `ReadWriteOnce`, then
    it will be available to only a single pod in AKS. As such, you need to use Azure
    Files to share a persistent volume across multiple pods. The configuration for
    Azure Files is not that different than Azure Disk, as described in the preceding
    section. The YAML file to create the storage class is as follows:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 当您以`ReadWriteOnce`访问模式类型挂载Azure磁盘时，它将仅对AKS中的单个pod可用。因此，您需要使用Azure文件来在多个pod之间共享持久卷。Azure文件的配置与Azure磁盘并没有太大不同，如前一节所述。创建存储类的YAML文件如下：
- en: '[PRE110]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Use the persistent volume claim to provision the Azure file share by executing
    the following YAML file:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下YAML文件使用持久卷索赔来提供Azure文件共享：
- en: '[PRE111]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Apply these two YAML files as follows:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式应用这两个YAML文件：
- en: .
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: '![Using the persistent volume claim to create Azure file](img/B15455_10_52.jpg)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
  zh: '![使用持久卷索赔创建Azure文件](img/B15455_10_52.jpg)'
- en: 'Figure 10.52: Using the persistent volume claim to create Azure file'
  id: totrans-490
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.52：使用持久卷索赔创建Azure文件
- en: 'The result of executing the Azure file storage creation YAML and the storage
    volume claim YAML is as follows:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 执行Azure文件存储创建YAML和存储卷索赔YAML的结果如下：
- en: '![Verifying the creation of Azure files and Azure disks](img/B15455_10_53.jpg)'
  id: totrans-492
  prefs: []
  type: TYPE_IMG
  zh: '![验证Azure文件和Azure磁盘的创建](img/B15455_10_53.jpg)'
- en: 'Figure 10.53: Verifying the creation of Azure files and Azure disks'
  id: totrans-493
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.53：验证Azure文件和Azure磁盘的创建
- en: As you can see, the specification in the pod remains the same. With these step-by-step
    implementations, we have successfully created Azure disks and Azure files for
    our persistent storage requirements.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，pod中的规范保持不变。通过这些逐步实施，我们成功地为持久存储需求创建了Azure磁盘和Azure文件。
- en: Summary
  id: totrans-495
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter was all about Kubernetes. We started this chapter by describing
    a possible work environment for a developer: a good workstation with tooling to
    start local development, even with Kubernetes locally installed. We used Ubuntu
    Desktop as an example, but in fact, it doesn''t really matter as long as you are
    happy with your development environment.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论了Kubernetes。我们从描述开发人员可能的工作环境开始，即具有工具启动本地开发的良好工作站，即使在本地安装了Kubernetes。我们以Ubuntu
    Desktop为例，但实际上，只要您对开发环境满意，就没有关系。
- en: With everything in place locally, we covered the configuration of Kubernetes
    clusters in Azure using the Azure CLI and PowerShell.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，我们使用Azure CLI和PowerShell覆盖了在Azure中配置Kubernetes集群。
- en: The deployment of workloads in Azure can be as simple as executing `kubectl
    run`, but more complex scenarios were also explored, such as multi-container applications.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure中部署工作负载可以简单地执行`kubectl run`，但也探讨了更复杂的场景，如多容器应用程序。
- en: 'As a developer, two tools are available to help streamline your development
    process: Draft and Helm. Draft is used for the initial development phase, and
    Helm is used afterward to install and maintain the application.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，有两种工具可帮助简化您的开发流程：Draft和Helm。Draft用于初始开发阶段，Helm用于安装和维护应用程序之后。
- en: Kubernetes is a tool for managing your containers, making it easy to deploy,
    maintain, and update your workloads. Scalability is one of the advantages of using
    Kubernetes; it's even possible to automatically scale depending on the required
    CPU and memory resources.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个管理容器的工具，使得部署、维护和更新工作负载变得容易。可伸缩性是使用Kubernetes的优势之一；甚至可以根据所需的CPU和内存资源自动扩展。
- en: The last section of this chapter covered the use of persistent storage in Kubernetes,
    actually providing you with a much better way than storing data in a container
    or attaching storage directly to a container.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一节涵盖了在Kubernetes中使用持久存储，实际上为您提供了比在容器中存储数据或直接将存储附加到容器中更好的方式。
- en: In the next chapter, we're going back to the Ops part of DevOps – that is, troubleshooting
    and monitoring your workloads, and by workloads, we mean virtual machines with
    Linux installed, containers, and AKS.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到DevOps的Ops部分——即故障排除和监视您的工作负载，而工作负载指的是安装了Linux的虚拟机、容器和AKS。
- en: Questions
  id: totrans-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: What is a pod?
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Pod？
- en: What would be a good reason to create a multiple-container pod?
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建多容器Pod的一个好理由是什么？
- en: What methods can you use to deploy your application in Kubernetes?
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用哪些方法在Kubernetes中部署应用程序？
- en: What methods can you use to update your application in Kubernetes?
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用哪些方法来更新Kubernetes中的应用程序？
- en: Do you need to create extra nodes in Kubernetes if you want to upgrade the control
    plane?
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要升级控制平面，是否需要在Kubernetes中创建额外的节点？
- en: Can you think of any reason why you would want an iSCSI solution?
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能想到为什么要使用iSCSI解决方案的原因吗？
- en: As an exercise, recreate the multi-container pod using persistent storage.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为练习，重新创建使用持久存储的多容器Pod。
- en: Further Reading
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The goal of this chapter was to provide a practical approach to get your workload
    running in the Azure cloud. We hope it's the beginning of a journey into the world
    of Kubernetes for you. There is so much more to discover!
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是提供一个实用的方法，让您的工作负载在Azure云中运行。我们希望这是您进入Kubernetes世界的开始。还有很多东西等待您去发现！
- en: Nigel Poulton, an author who has already written a great book about Docker,
    has also written a book about Kubernetes, *The Kubernetes Book*. It's a good starting
    point if you are really new to Kubernetes. Gigi Sayfan has written *Mastering
    Kubernetes*. Make sure you buy the second edition! Not only because the first
    edition was not that good, but just because it's a must-have and provides much
    more information than the first edition.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: Nigel Poulton是一位已经写过关于Docker的优秀书籍的作者，他还写了一本关于Kubernetes的书籍*The Kubernetes Book*。如果您对Kubernetes真的很新，这是一个很好的起点。Gigi
    Sayfan写了*Mastering Kubernetes*。确保购买第二版！不仅因为第一版不太好，而且因为它是必备的，并提供比第一版更多的信息。
- en: 'As a developer, you should give *Kubernetes for Developers* a try: Joseph Heck
    can tell you much more about the development life cycle using Kubernetes, using
    examples in Node.js and Python. In the last chapter of his book, he mentions emerging
    projects such as Helm and Brigade. We hope this will be explored in more detail
    in a later edition, or maybe even in another book.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，您应该尝试*Kubernetes for Developers*：Joseph Heck可以告诉您更多关于使用Kubernetes的开发生命周期，使用Node.js和Python的示例。在他的书的最后一章中，他提到了Helm和Brigade等新兴项目。我们希望这将在以后的版本中更详细地探讨，甚至可能在另一本书中。
- en: Talking about Brigade, [https://brigade.sh](https://brigade.sh) is described
    on its own website as "*a tool for running scriptable, automated tasks in the
    cloud — as part of your Kubernetes cluster*." It's far beyond the scope of this
    book and it's more or less in the early stages of development. As a developer,
    you should invest some time in reading more about it and trying it.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到Brigade，[https://brigade.sh](https://brigade.sh)在其官方网站上被描述为“*在云中运行可编写脚本的自动化任务的工具——作为您的Kubernetes集群的一部分*。”这远远超出了本书的范围，而且它基本上还处于早期开发阶段。作为开发人员，您应该花一些时间阅读更多关于它并尝试它。
- en: 'Last but not least, another important source worth mentioning is the Open Service
    Broker for Azure (OSBA: [https://osba.sh](https://osba.sh)). It didn''t make it
    into this chapter because it''s not completely production-ready at the time of
    writing. OSBA is an open standard for communicating with external services such
    as databases and storage. It''s another solution for providing data to and storing
    data from your container.'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，另一个值得一提的重要资源是Azure的开放服务经纪人（OSBA：[https://osba.sh](https://osba.sh)）。它没有出现在本章中，因为在撰写本文时它还不完全具备生产能力。OSBA是与外部服务（如数据库和存储）通信的开放标准。这是另一种为容器提供数据和存储数据的解决方案。
