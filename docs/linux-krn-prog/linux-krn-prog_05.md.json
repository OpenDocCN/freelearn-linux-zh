["```\nsudo apt install gcc\n```", "```\n$ sudo apt install linux-headers-generic $ dpkg -l | grep linux-headers | awk '{print $1, $2}'\nii linux-headers-5.3.0-28\nii linux-headers-5.3.0-28-generic\nii linux-headers-5.3.0-40\nii linux-headers-5.3.0-40-generic\nii linux-headers-generic-hwe-18.04\n$ \n```", "```\ngit clone https://github.com/PacktPublishing/Linux-Kernel-Programming.git\n\n```", "```\n$ lsb_release -a 2>/dev/null |grep Description\nDescription:    Ubuntu 18.04.3 LTS\n$ uname -r\n5.0.0-36-generic\n$ find /lib/modules/$(uname -r)/ -name \"*.ko\" | wc -l\n5359\n```", "```\n$ ls /lib/modules/5.0.0-36-generic/kernel/\narch/  block/  crypto/  drivers/  fs/  kernel/  lib/  mm/  net/  samples/  sound/  spl/  ubuntu/  virt/  zfs/\n$ ls /lib/modules/5.4.0-llkd01/kernel/\narch/  crypto/  drivers/  fs/  net/  sound/\n$ \n```", "```\n$ lsmod | grep e1000\ne1000                 139264  0\n```", "```\n$ ls -l /lib/modules/5.0.0-36-generic/kernel/drivers/net/ethernet/intel/e1000\ntotal 220\n-rw-r--r-- 1 root root 221729 Nov 12 16:16 e1000.ko\n$ modinfo /lib/modules/5.0.0-36-generic/kernel/drivers/net/ethernet/intel/e1000/e1000.ko\nfilename:       /lib/modules/5.0.0-36-generic/kernel/drivers/net/ethernet/intel/e1000/e1000.ko\nversion:        7.3.21-k8-NAPI\nlicense:        GPL v2\ndescription:    Intel(R) PRO/1000 Network Driver\nauthor:         Intel Corporation, <linux.nics@intel.com>\nsrcversion:     C521B82214E3F5A010A9383\nalias:          pci:v00008086d00002E6Esv*sd*bc*sc*i*\n[...]\nname:           e1000\nvermagic:       5.0.0-36-generic SMP mod_unload \n[...]\nparm:           copybreak:Maximum size of packet that is copied to a new \n                buffer on receive (uint)\nparm:           debug:Debug level (0=none,...,16=all) (int)\n$  \n```", "```\n// ch4/helloworld_lkm/hellowworld_lkm.c\n#include <linux/init.h>\n#include <linux/kernel.h>\n#include <linux/module.h>\n\nMODULE_AUTHOR(\"<insert your name here>\");\nMODULE_DESCRIPTION(\"LLKD book:ch4/helloworld_lkm: hello, world, our first LKM\");\nMODULE_LICENSE(\"Dual MIT/GPL\");\nMODULE_VERSION(\"0.1\");\n\nstatic int __init helloworld_lkm_init(void)\n{\n    printk(KERN_INFO \"Hello, world\\n\");\n    return 0;     /* success */\n}\n\nstatic void __exit helloworld_lkm_exit(void)\n{\n    printk(KERN_INFO \"Goodbye, world\\n\");\n}\n\nmodule_init(helloworld_lkm_init);\nmodule_exit(helloworld_lkm_exit);\n```", "```\n$ cd <...>/ch4/helloworld_lkm\n$ ../../lkm helloworld_lkm\nVersion info:\nDistro:     Ubuntu 18.04.3 LTS\nKernel: 5.0.0-36-generic\n[...]\ndmesg[ 5399.230367] Hello, world\n$ \n```", "```\n$ ls -l /lib/modules/$(uname -r)/\ntotal 5552\nlrwxrwxrwx  1 root root      39 Nov 12 16:16 build -> /usr/src/linux-headers-5.0.0-36-generic/\ndrwxr-xr-x  2 root root    4096 Nov 28 08:49 initrd/\n[...]\n```", "```\n$ ls -l /usr/src/linux-headers-5.0.0-36-generic/include/linux/init.h\n-rw-r--r-- 1 root root 9704 Mar  4  2019 /usr/src/linux-headers-5.0.0-36-generic/include/linux/init.h\n```", "```\nmodule_init(helloworld_lkm_init);\nmodule_exit(helloworld_lkm_exit);\n```", "```\nstatic int  __init <modulename>_init(void);\nstatic void __exit <modulename>_exit(void);\n```", "```\n[...]\nptr = kmalloc(87, GFP_KERNEL);\nif (!ptr) {\n    pr_warning(\"%s:%s:%d: kmalloc failed!\\n\", __FILE__, __func__, __LINE__);\n    return -ENOMEM;\n}\n[...]\nreturn 0;   /* success */\n```", "```\nstruct mystruct * myfunc(void)\n{\n    struct mystruct *mys = NULL;\n    mys = kzalloc(sizeof(struct mystruct), GFP_KERNEL);\n    if (!mys)\n        return ERR_PTR(-ENOMEM);\n    [...]\n    return mys;\n}\n```", "```\n[...]\ngmys = myfunc();\nif (IS_ERR(gmys)) {\n    pr_warn(\"%s: myfunc alloc failed, aborting...\\n\", OURMODNAME);\n    stat = PTR_ERR(gmys); /* sets 'stat' to the value -ENOMEM */\n    goto out_fail_1;\n}\n[...]\nreturn stat;\nout_fail_1:\n    return stat;\n}\n```", "```\n cd <book-code-dir>/ch4/helloworld_lkm\n```", "```\n$ pwd\n*<book-code-dir>*/ch4/helloworld_lkm\n$ ls -l\ntotal 8\n-rw-rw-r-- 1 llkd llkd 1211 Jan 24 13:01 helloworld_lkm.c\n-rw-rw-r-- 1 llkd llkd  333 Jan 24 13:01 Makefile\n$ \n```", "```\n$ insmod ./helloworld_lkm.ko \ninsmod: ERROR: could not insert module ./helloworld_lkm.ko: Operation not permitted\n$ \n```", "```\n$ sudo insmod ./helloworld_lkm.ko\n[sudo] password for llkd: \n$ echo $?\n0\n```", "```\nprintk(KERN_INFO \"Hello, world\\n\");\n```", "```\n$ dmesg | tail -n2\n[ 2912.880797] hello: loading out-of-tree module taints kernel.\n[ 2912.881098] Hello, world\n$ \n```", "```\n$ lsmod | head\nModule                  Size  Used by\nhelloworld_lkm         16384  0\nisofs                  32768  0\nfuse                  139264  3\ntun                    57344  0\n[...]\ne1000                 155648  0\ndm_mirror              28672  0\ndm_region_hash         20480  1 dm_mirror\ndm_log                 20480  2 dm_region_hash,dm_mirror\ndm_mod                151552  11 dm_log,dm_mirror\n$\n```", "```\n$ rmmod \nrmmod: ERROR: missing module name.\n$ rmmod helloworld_lkm\nrmmod: ERROR: could not remove 'helloworld_lkm': Operation not permitted\nrmmod: ERROR: could not remove module helloworld_lkm: Operation not permitted\n$ sudo rmmod helloworld_lkm\n[sudo] password for llkd: \n$ dmesg |tail -n2\n[ 2912.881098] Hello, world\n[ 5551.863410] Goodbye, world\n$\n```", "```\n$ ls -l $(which insmod) ; ls -l $(which lsmod) ; ls -l $(which rmmod)\nlrwxrwxrwx 1 root root 9 Oct 24 04:50 /sbin/insmod -> /bin/kmod\nlrwxrwxrwx 1 root root 9 Oct 24 04:50 /sbin/lsmod -> /bin/kmod\nlrwxrwxrwx 1 root root 9 Oct 24 04:50 /sbin/rmmod -> /bin/kmod\n$ \n```", "```\n#!/bin/bash\n# lkm : a silly kernel module dev - build, load, unload - helper wrapper script\n[...]\nunset ARCH\nunset CROSS_COMPILE\nname=$(basename \"${0}\")\n\n# Display and run the provided command.\n# Parameter(s) : the command to run\nruncmd()\n{\n    local SEP=\"------------------------------\"\n    [ $# -eq 0 ] && return\n    echo \"${SEP}\n$*\n${SEP}\"\n    eval \"$@\"\n    [ $? -ne 0 ] && echo \" ^--[FAILED]\"\n}\n\n### \"main\" here\n[ $# -ne 1 ] && {\n  echo \"Usage: ${name} name-of-kernel-module-file (without the .c)\"\n  exit 1\n}\n[[ \"${1}\" = *\".\"* ]] && {\n  echo \"Usage: ${name} name-of-kernel-module-file ONLY (do NOT put any extension).\"\n  exit 1\n}\necho \"Version info:\"\nwhich lsb_release >/dev/null 2>&1 && {\n  echo -n \"Distro: \"\n  lsb_release -a 2>/dev/null |grep \"Description\" |awk -F':' '{print $2}'\n}\necho -n \"Kernel: \" ; uname -r\nruncmd \"sudo rmmod $1 2> /dev/null\"\nruncmd \"make clean\"\nruncmd \"sudo dmesg -c > /dev/null\"\nruncmd \"make || exit 1\"\n[ ! -f \"$1\".ko ] && {\n  echo \"[!] ${name}: $1.ko has not been built, aborting...\"\n  exit 1\n}\nruncmd \"sudo insmod ./$1.ko && lsmod|grep $1\"\nruncmd dmesg\nexit 0\n```", "```\n$ pwd\n<...>/ch4/helloworld_lkm\n$ ../../lkm\nUsage: lkm name-of-kernel-module-file (without the .c)\n$ ../../lkm helloworld_lkm\nVersion info:\nDistro:          Ubuntu 18.04.3 LTS\nKernel: 5.0.0-36-generic\n------------------------------\nsudo rmmod helloworld_lkm 2> /dev/null\n------------------------------\n[sudo] password for llkd: \n------------------------------\nsudo dmesg -C\n------------------------------\n------------------------------\nmake || exit 1\n------------------------------\nmake -C /lib/modules/5.0.0-36-generic/build/ M=/home/llkd/book_llkd/Learn-Linux-Kernel-Development/ch4/helloworld_lkm modules\nmake[1]: Entering directory '/usr/src/linux-headers-5.0.0-36-generic'\n  CC [M]  /home/llkd/book_llkd/Learn-Linux-Kernel-Development/ch4/helloworld_lkm/helloworld_lkm.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /home/llkd/book_llkd/Learn-Linux-Kernel-Development/ch4/helloworld_lkm/helloworld_lkm.mod.o\n  LD [M]  /home/llkd/book_llkd/Learn-Linux-Kernel-Development/ch4/helloworld_lkm/helloworld_lkm.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-5.0.0-36-generic'\n------------------------------\nsudo insmod ./helloworld_lkm.ko && lsmod|grep helloworld_lkm\n------------------------------\nhelloworld_lkm         16384  0\n------------------------------\ndmesg\n------------------------------\n[ 8132.596795] Hello, world\n$ \n```", "```\nprintk(KERN_INFO \"Hello, world\\n\");\n```", "```\nkernel/printk/printk.c:\n#define __LOG_BUF_LEN (1 << CONFIG_LOG_BUF_SHIFT)\nstatic char __log_buf[__LOG_BUF_LEN] __aligned(LOG_ALIGN);\n```", "```\nlog_buf_len=n[KMG]   Sets the size of the printk ring buffer,\n                     in bytes. n must be a power of two and greater                \n                     than the minimal size. The minimal size is defined\n                     by LOG_BUF_SHIFT kernel config parameter. There is\n                     also CONFIG_LOG_CPU_MAX_BUF_SHIFT config parameter\n                     that allows to increase the default size depending  \n                     on the number of CPUs. See init/Kconfig for more \n                     details.\n```", "```\n#--- a few journalctl(1) aliases\n# jlog: current (from most recent) boot only, everything\nalias jlog='/bin/journalctl -b --all --catalog --no-pager'\n# jlogr: current (from most recent) boot only, everything,\n#  in *reverse* chronological order\nalias jlogr='/bin/journalctl -b --all --catalog --no-pager --reverse'\n# jlogall: *everything*, all time; --merge => _all_ logs merged\nalias jlogall='/bin/journalctl --all --catalog --merge --no-pager'\n# jlogf: *watch* log, akin to 'tail -f' mode;\n#  very useful to 'watch live' logs\nalias jlogf='/bin/journalctl -f'\n# jlogk: only kernel messages, this (from most recent) boot\nalias jlogk='/bin/journalctl -b -k --no-pager'\n```", "```\n$ journalctl -k |tail -n2\nMar 17 17:33:16 llkd-vbox kernel: Hello, world\nMar 17 17:47:26 llkd-vbox kernel: Goodbye, world\n$  \n```", "```\n[timestamp] [hostname] [source]: [... log message ...]\n```", "```\nShow all kernel logs from previous boot:\n    journalctl -k -b -1\n\nShow a live log display from a system service apache.service:\n    journalctl -f -u apache\n```", "```\nprintk(KERN_INFO \"Hello, world\\n\");\n```", "```\n// include/linux/kern_levels.h\n#ifndef __KERN_LEVELS_H__\n#define __KERN_LEVELS_H__\n\n#define KERN_SOH       \"\\001\"             /* ASCII Start Of Header */\n#define KERN_SOH_ASCII '\\001'\n\n#define KERN_EMERG    KERN_SOH      \"0\"   /* system is unusable */\n#define KERN_ALERT    KERN_SOH      \"1\"   /* action must be taken  \n                                             immediately */\n#define KERN_CRIT     KERN_SOH      \"2\"   /* critical conditions */\n#define KERN_ERR      KERN_SOH      \"3\"   /* error conditions */\n#define KERN_WARNING  KERN_SOH      \"4\"   /* warning conditions */\n#define KERN_NOTICE   KERN_SOH      \"5\"   /* normal but significant \n                                             condition */\n#define KERN_INFO     KERN_SOH      \"6\"   /* informational */\n#define KERN_DEBUG    KERN_SOH      \"7\"   /* debug-level messages */\n\n#define KERN_DEFAULT  KERN_SOH      \"d\"   /* the default kernel loglevel */\n```", "```\n// drivers/char/hangcheck-timer.c[...]if (hangcheck_reboot) {\n  printk(KERN_CRIT \"Hangcheck: hangcheck is restarting the machine.\\n\");\n  emergency_restart();\n} else {\n[...]\n```", "```\n// drivers/char/lp.c[...]\n if (last != LP_PERRORP) {\n     last = LP_PERRORP;\n     printk(KERN_INFO \"lp%d on fire\\n\", minor);\n }\n```", "```\n// arch/x86/kernel/cpu/mce/p5.c\n[...]\n pr_emerg(\"CPU#%d: Machine Check Exception: 0x%8X (type 0x%8X).\\n\",\n         smp_processor_id(), loaddr, lotype);\n\n    if (lotype & (1<<5)) {\n        pr_emerg(\"CPU#%d: Possible thermal failure (CPU on fire ?).\\n\",\n             smp_processor_id());\n    } \n[...]\n```", "```\n// include/linux/printk.h:\n[...]\n/*\n * These can be used to print at the various log levels.\n * All of these will print unconditionally, although note that pr_debug()\n * and other debug macros are compiled out unless either DEBUG is defined\n * or CONFIG_DYNAMIC_DEBUG is set.\n */\n#define pr_emerg(fmt, ...) \\\n        printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)\n#define pr_alert(fmt, ...) \\\n        printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)\n#define pr_crit(fmt, ...) \\\n        printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)\n#define pr_err(fmt, ...) \\\n        printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)\n#define pr_warning(fmt, ...) \\\n        printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)\n#define pr_warn pr_warning\n#define pr_notice(fmt, ...) \\\n        printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)\n#define pr_info(fmt, ...) \\\n        printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)\n[...]\n/* pr_devel() should produce zero code unless DEBUG is defined */\n#ifdef DEBUG\n#define pr_devel(fmt, ...) \\\n    printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)\n#else\n#define pr_devel(fmt, ...) \\\n    no_printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)\n#endif\n```", "```\nrpi # tty\n/dev/ttyS0\n```", "```\n$ cat /proc/sys/kernel/printk\n4    4    1    7\n$ \n```", "```\n# echo \"8 4 1 7\" > /proc/sys/kernel/printk\n```", "```\n// ch4/printk_loglvl/printk_loglvl.c\nstatic int __init printk_loglvl_init(void)\n{\n    pr_emerg (\"Hello, world @ log-level KERN_EMERG   [0]\\n\");\n    pr_alert (\"Hello, world @ log-level KERN_ALERT   [1]\\n\");\n    pr_crit  (\"Hello, world @ log-level KERN_CRIT    [2]\\n\");\n    pr_err   (\"Hello, world @ log-level KERN_ERR     [3]\\n\");\n    pr_warn  (\"Hello, world @ log-level KERN_WARNING [4]\\n\");\n    pr_notice(\"Hello, world @ log-level KERN_NOTICE  [5]\\n\");\n    pr_info  (\"Hello, world @ log-level KERN_INFO    [6]\\n\");\n    pr_debug (\"Hello, world @ log-level KERN_DEBUG   [7]\\n\");\n    pr_devel(\"Hello, world via the pr_devel() macro\"\n        \" (eff @KERN_DEBUG) [7]\\n\");\n    return 0; /* success */\n}\nstatic void __exit printk_loglvl_exit(void)\n{\n    pr_info(\"Goodbye, world @ log-level KERN_INFO [6]\\n\");\n}\nmodule_init(printk_loglvl_init);\nmodule_exit(printk_loglvl_exit);\n```", "```\nrpi # rmmod printk_loglvl\nrpi # dmesg\n[...]\n[ 1408.603812] Hello, world @ log-level KERN_EMERG   [0]\n[ 1408.611335] Hello, world @ log-level KERN_ALERT   [1]\n[ 1408.618625] Hello, world @ log-level KERN_CRIT    [2]\n[ 1408.625778] Hello, world @ log-level KERN_ERR     [3]\n[ 1408.625781] Hello, world @ log-level KERN_WARNING [4]\n[ 1408.625784] Hello, world @ log-level KERN_NOTICE  [5]\n[ 1408.625787] Hello, world @ log-level KERN_INFO    [6]\n[ 1762.985496] Goodbye, world @ log-level KERN_INFO    [6]\nrpi # \n```", "```\nCFLAGS_printk_loglvl.o := -DDEBUG\n```", "```\nEXTRA_CFLAGS += -DDEBUG\n```", "```\n# Enable the pr_debug() as well (rm the comment from one of the lines below)\n#EXTRA_CFLAGS += -DDEBUG\n#CFLAGS_printk_loglvl.o := -DDEBUG\n```", "```\n# exit                      << exit from the previous root shell >>\n$ ../../lkm printk_loglvl Version info:\nDistro:     Ubuntu 18.04.3 LTS\nKernel: 5.4.0-llkd01\n------------------------------\nsudo rmmod printk_loglvl 2> /dev/null\n------------------------------\n[...]\nsudo insmod ./printk_loglvl.ko && lsmod|grep printk_loglvl\n------------------------------\nprintk_loglvl          16384  0\n------------------------------\ndmesg\n------------------------------\n[  975.271766] Hello, world @ log-level KERN_EMERG [0]\n[  975.277729] Hello, world @ log-level KERN_ALERT [1]\n[  975.283662] Hello, world @ log-level KERN_CRIT [2]\n[  975.289561] Hello, world @ log-level KERN_ERR [3]\n[  975.295394] Hello, world @ log-level KERN_WARNING [4]\n[  975.301176] Hello, world @ log-level KERN_NOTICE [5]\n[  975.306907] Hello, world @ log-level KERN_INFO [6]\n[  975.312625] Hello, world @ log-level KERN_DEBUG [7]\n[  975.312628] Hello, world via the pr_devel() macro (eff @KERN_DEBUG) [7]\n$\n```", "```\nsudo bash -c \"echo Y > /sys/module/printk/parameters/ignore_loglevel\"\n```", "```\nprintk_ratelimit:\nSome warning messages are rate limited. printk_ratelimit specifies\nthe minimum length of time between these messages (in jiffies), by\ndefault we allow one every 5 seconds.\nA value of 0 will disable rate limiting.\n==============================================================\nprintk_ratelimit_burst:\nWhile long term we enforce one message per printk_ratelimit\nseconds, we do allow a burst of messages to pass through.\nprintk_ratelimit_burst specifies the number of messages we can\nsend before ratelimiting kicks in.\n```", "```\n$ cat /proc/sys/kernel/printk_ratelimit /proc/sys/kernel/printk_ratelimit_burst\n5\n10\n$ \n```", "```\n[ 1000.154763] kprobe schedule pre_handler: intr ctx = 0 :process systemd-journal:237\n[ 1005.162183] handler_pre_schedule: 5860 callbacks suppressed\n[ 1005.162185] kprobe schedule pre_handler: intr ctx = 0 :process dndX11:1071\n```", "```\nstatic void rtc_dropped_irq(struct timer_list *unused)\n{ \n[...]\n    spin_unlock_irq(&rtc_lock);\n    printk_ratelimited(KERN_WARNING \"rtc: lost some interrupts at         %ldHz.\\n\", freq);\n    /* Now we have new data */\n    wake_up_interruptible(&rtc_wait);\n[...]\n}\n```", "```\npr_emerg_ratelimited(fmt, ...)\npr_alert_ratelimited(fmt, ...)\npr_crit_ratelimited(fmt, ...) \npr_err_ratelimited(fmt, ...)  \npr_warn_ratelimited(fmt, ...) \npr_notice_ratelimited(fmt, ...)\npr_info_ratelimited(fmt, ...)  \n```", "```\ntest_script: msg 1 ; kernel_module: msg n, msg n+1, ..., msg n+m ; test_script: msg 2 ; ...\n```", "```\necho \"test_script: msg 1\" > /dev/kmsg\n```", "```\n$ sudo echo \"test_script: msg 1\" > /dev/kmsg\nbash: /dev/kmsg: Permission denied\n$ sudo bash -c \"echo \\\"test_script: msg 1\\\" > /dev/kmsg\"\n[sudo] password for llkd:\n$ dmesg |tail -n1\n[55527.523756] test_script: msg 1\n$ \n```", "```\n$ alias dmesg='/bin/dmesg --decode --nopager --color --ctime'\n$ dmesg | tail -n1\nuser :warn : [Sat Dec 14 17:21:50 2019] test_script: msg 1\n$ \n```", "```\n$ sudo bash -c \"echo \\\"<6>test_script: test msg at KERN_INFO\\\"   \\\n   > /dev/kmsg\"\n$ dmesg | tail -n2\nuser :warn : [Fri Dec 14 17:21:50 2018] test_script: msg 1\nuser :info : [Fri Dec 14 17:31:48 2018] test_script: test msg at KERN_INFO\n```", "```\npr_warning(\"%s:%s():%d: kmalloc failed!\\n\", OURMODNAME,  __func__, __LINE__);\n```", "```\n// ch5/lkm_template/lkm_template.c\n[ ... ]\n */\n#define pr_fmt(fmt) \"%s:%s(): \" fmt, KBUILD_MODNAME, __func__\n\n#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/kernel.h>\n[ ... ]\nstatic int __init lkm_template_init(void)\n{\n    pr_info(\"inserted\\n\");\n    [ ... ]\n```", "```\n[381534.391966] lkm_template:lkm_template_init(): inserted\n```", "```\n// ch4/printk_loglvl/Makefile\nPWD       := $(shell pwd)obj-m     += printk_loglvl.o\n\n# Enable the pr_debug() as well (rm the comment from the line below)\n#EXTRA_CFLAGS += -DDEBUG\n#CFLAGS_printk_loglvl.o := -DDEBUG\n\nall:\n    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules\ninstall:\n    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules_install\nclean:\n    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) clean\n```", "```\ntarget: [dependent-source-file(s)]\n        rule(s)\n```", "```\nobj-m += printk_loglvl.o\n```", "```\nall:\n    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules\n```"]