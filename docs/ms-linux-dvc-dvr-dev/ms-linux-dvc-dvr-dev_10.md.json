["```\ndevice {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0#address-cells = <1>;\n\u00a0\u00a0\u00a0\u00a0#size-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0port@0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#address-cells = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#size-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endpoint@0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endpoint@1 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0port@1 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endpoint { ... };\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\ndevice-1 {\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device_1_output: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&device_2_input>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\ndevice-2 {\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device_2_input: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&device_1_output>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n}\n```", "```\nstruct device_node {\n[...]\n\u00a0\u00a0\u00a0\u00a0struct fwnode_handle fwnode;\n[...]\n};\n```", "```\nstruct acpi_device\t{\n[...]\n\u00a0\u00a0\u00a0\u00a0struct fwnode_handle fwnode;\n[...]\n};\n```", "```\nstruct fwnode_endpoint {\n\u00a0\u00a0\u00a0\u00a0unsigned int port;\n\u00a0\u00a0\u00a0\u00a0unsigned int id;\n\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *local_fwnode;\n};\n```", "```\nstruct v4l2_fwnode_endpoint {\n\u00a0\u00a0\u00a0\u00a0struct fwnode_endpoint base;\n\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0* Fields below this line will be zeroed by\n\u00a0\u00a0\u00a0\u00a0\u00a0* v4l2_fwnode_endpoint_parse()\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0enum v4l2_mbus_type bus_type;\n\u00a0\u00a0\u00a0\u00a0union {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_fwnode_bus_parallel parallel;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_fwnode_bus_mipi_csi1 mipi_csi1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_fwnode_bus_mipi_csi2 mipi_csi2;\n\u00a0\u00a0\u00a0\u00a0} bus;\n\u00a0\u00a0\u00a0\u00a0u64 *link_frequencies;\n\u00a0\u00a0\u00a0\u00a0unsigned int nr_of_link_frequencies;\n};\n```", "```\n    enum v4l2_mbus_type {\n    \u00a0\u00a0\u00a0\u00a0V4L2_MBUS_PARALLEL,\n    \u00a0\u00a0\u00a0\u00a0V4L2_MBUS_BT656,\n    \u00a0\u00a0\u00a0\u00a0V4L2_MBUS_CSI1,\n    \u00a0\u00a0\u00a0\u00a0V4L2_MBUS_CCP2,\n    \u00a0\u00a0\u00a0\u00a0V4L2_MBUS_CSI2,\n    };\n    ```", "```\n&i2c1 {\n\u00a0\u00a0\u00a0\u00a0#address-cells = <1>;\n\u00a0\u00a0\u00a0\u00a0#size-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0mt9v032@5c {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compatible = \"aptina,mt9v032\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0x5c>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mt9v032_out: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&isc_0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0link-frequencies =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/bits/ 64 <13000000 26600000 27000000>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hsync-active = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vsync-active = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pclk-sample = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n&isc {\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isc_0: endpoint@0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&mt9v032_out>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hsync-active = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vsync-active = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pclk-sample = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\n-\u00a0\u00a0\u00a0\u00a0struct device_node *of_node;\n+\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode;\n-\u00a0\u00a0\u00a0\u00a0of_node = ddev->of_node;\n+\tfwnode = dev_fwnode(dev);\n```", "```\n[...]\nstruct fwnode_handle *fwnode_get_parent(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *fwnode);\nstruct fwnode_handle *fwnode_get_next_child_node(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *child);\nstruct fwnode_handle *fwnode_get_next_available_child_node(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *child);\n#define fwnode_for_each_child_node(fwnode, child) \\\n\u00a0\u00a0\u00a0\u00a0for (child = fwnode_get_next_child_node(fwnode, NULL); child; \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0child = fwnode_get_next_child_node(fwnode, child))\n#define fwnode_for_each_available_child_node(fwnode, child) \\\n\u00a0\u00a0\u00a0\u00a0for (child = fwnode_get_next_available_child_node(fwnode,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0child; \\\n\u00a0\u00a0\u00a0child = fwnode_get_next_available_child_node(fwnode, child))\nstruct fwnode_handle *fwnode_get_named_child_node(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *childname);\nstruct fwnode_handle *fwnode_handle_get(struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fwnode_handle *fwnode);\nvoid fwnode_handle_put(struct fwnode_handle *fwnode);\n```", "```\n[...]\nbool fwnode_device_is_available(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode); \nbool fwnode_property_present(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *propname);\nint fwnode_property_read_string(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *propname, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char **val);\nint fwnode_property_match_string(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *propname, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *string);\n```", "```\n/* to switch from fwnode to of */\nstruct device_node *of_node = to_of_node(fwnode);\n/* to switch from of to fw */\nstruct fwnode_handle *fwnode = of_fwnode_handle(node)\n/* to switch from fwnode to acpi handle, the below macro has\n * been introduced\n *\n * #define ACPI_HANDLE_FWNODE(fwnode)\t\\\n *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0acpi_device_handle(to_acpi_device_node(fwnode))\n *\n * and to switch from acpi device to fwnode:\n *\n *\u00a0\u00a0\u00a0struct fwnode_handle *\n *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0acpi_fwnode_handle(struct acpi_device *adev)\n *\n */\n```", "```\nstruct fwnode_handle\n\u00a0\u00a0\u00a0*fwnode_graph_get_next_endpoint(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *prev);\nstruct fwnode_handle\n\u00a0\u00a0\u00a0*fwnode_graph_get_port_parent(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode);\nstruct fwnode_handle\n\u00a0\u00a0\u00a0*fwnode_graph_get_remote_port_parent(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *fwnode);\nstruct fwnode_handle\n\u00a0\u00a0\u00a0*fwnode_graph_get_remote_port(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode);\nstruct fwnode_handle \n\u00a0\u00a0\u00a0*fwnode_graph_get_remote_endpoint(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct fwnode_handle *fwnode);\n#define fwnode_graph_for_each_endpoint(fwnode, child) \\\n\u00a0\u00a0\u00a0\u00a0for (child = NULL;\t\\\n\u00a0\u00a0\u00a0\u00a0(child = fwnode_graph_get_next_endpoint(fwnode, child)); )\nint fwnode_graph_parse_endpoint(const \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_endpoint *endpoint);\n[...]\n```", "```\nint v4l2_fwnode_endpoint_parse(struct fwnode_handle *fwnode,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_fwnode_endpoint *vep);\n```", "```\nint err;\nstruct fwnode_handle *ep;\nstruct v4l2_fwnode_endpoint bus_cfg;\n/* We grab the fwnode corresponding to the device */\nstruct fwnode_handle *fwnode = dev_fwnode(dev);\n/* We grab its endpoint(s) node */\nep = fwnode_graph_get_next_endpoint(fwnode, NULL);\n/* We parse the endpoint common properties as well as\n * v4l2 related properties  */\nerr = v4l2_fwnode_endpoint_parse(ep, &bus_cfg);\nif (err) {\u00a0\u00a0\u00a0/* handle error */ }\n/* At this point we can access parameters such as bus_type,  * bus.flags\u00a0\u00a0\n * (in case of mipi csi2 or parallel buses), V4L2_MBUS_*  * which are the \n * media bus flags\n */\n/* we drop the reference on the enpoint */\nfwnode_handle_put(ep);\n```", "```\nu32 bus_type = 0;\nfwnode_property_read_u32(fwnode, \"bus-type\", &bus_type);\n```", "```\nbus-type = <3>;\n```", "```\nstruct v4l2_fwnode_bus_parallel {\n\u00a0\u00a0\u00a0\u00a0unsigned int flags;\n\u00a0\u00a0\u00a0\u00a0unsigned char bus_width;\n\u00a0\u00a0\u00a0\u00a0unsigned char data_shift;\n};\n```", "```\nstruct v4l2_fwnode_bus_mipi_csi2 {\n\u00a0\u00a0\u00a0\u00a0unsigned int flags;\n\u00a0\u00a0\u00a0\u00a0unsigned char data_lanes[V4L2_FWNODE_CSI2_MAX_DATA_LANES]; \n\u00a0\u00a0\u00a0\u00a0unsigned char clock_lane;\n\u00a0\u00a0\u00a0\u00a0unsigned short num_data_lanes;\n\u00a0\u00a0\u00a0\u00a0bool lane_polarities[1 + V4L2_FWNODE_CSI2_MAX_DATA_LANES];\n};\n```", "```\n[...]\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tc358743_out: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&mipi_csi2_in>; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clock-lanes = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-lanes = <1 2 3 4>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lane-polarities = <1 1 1 1 1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clock-noncontinuous;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n```", "```\nstruct v4l2_fwnode_bus_mipi_csi1 {\n\u00a0\u00a0\u00a0\u00a0bool clock_inv;\n\u00a0\u00a0\u00a0\u00a0bool strobe;\n\u00a0\u00a0\u00a0\u00a0bool lane_polarity[2];\n\u00a0\u00a0\u00a0\u00a0unsigned char data_lane;\n\u00a0\u00a0\u00a0\u00a0unsigned char clock_lane;\n};\n```", "```\nstruct v4l2_async_notifier {\n\u00a0\u00a0\u00a0\u00a0const struct v4l2_async_notifier_operations *ops;\n\u00a0\u00a0\u00a0\u00a0unsigned int num_subdevs;\n\u00a0\u00a0\u00a0\u00a0unsigned int max_subdevs;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_async_subdev **subdevs;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_device *v4l2_dev;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev *sd;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_async_notifier *parent;\n\u00a0\u00a0\u00a0\u00a0struct list_head waiting;\n\u00a0\u00a0\u00a0\u00a0struct list_head done;\n\u00a0\u00a0\u00a0\u00a0struct list_head list;\n};\n```", "```\nstruct v4l2_async_subdev {\n\u00a0\u00a0\u00a0\u00a0enum v4l2_async_match_type match_type;\n\u00a0\u00a0\u00a0\u00a0union {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *device_name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int adapter_id;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned short address;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} i2c;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool (*match)(struct device *,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_subdev *);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *priv;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} custom;\n\u00a0\u00a0\u00a0\u00a0} match;\n\u00a0\u00a0\u00a0\u00a0/* v4l2-async core private: not to be used by drivers */\n\u00a0\u00a0\u00a0\u00a0struct list_head list;\n};\n```", "```\nstruct v4l2_async_notifier_operations {\n\u00a0\u00a0\u00a0\u00a0int (*bound)(struct v4l2_async_notifier *notifier,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev *subdev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_subdev *asd);\n\u00a0\u00a0\u00a0\u00a0int (*complete)(struct v4l2_async_notifier *notifier);\n\u00a0\u00a0\u00a0\u00a0void (*unbind)(struct v4l2_async_notifier *notifier,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev *subdev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_subdev *asd);\n};\n```", "```\nstatic int bar_probe(struct device *dev)\n{\n\u00a0\u00a0\u00a0\u00a0int ret;\n\u00a0\u00a0\u00a0\u00a0ret = v4l2_async_register_subdev(subdev);\n\u00a0\u00a0\u00a0\u00a0if (ret) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(dev, \"ouch\\n\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -ENODEV;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\n/* struct foo_device */\nstruct foo_device {\n\u00a0\u00a0\u00a0\u00a0struct media_device mdev;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_device v4l2_dev;\n\u00a0\u00a0\u00a0\u00a0struct video_device *vdev;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_async_notifier notifier;\n\u00a0\u00a0\u00a0\u00a0struct *subdevs[FOO_MAX_SUBDEVS];\n};\n/* foo_probe() */\nstatic int foo_probe(struct device *dev)\n{\n\u00a0\u00a0\u00a0\u00a0struct foo_device *foo = kmalloc(sizeof(*foo)); \n\u00a0\u00a0\u00a0\u00a0media_device_init(&bar->mdev);\n\u00a0\u00a0\u00a0\u00a0foo->dev = dev;\n\u00a0\u00a0\u00a0\u00a0foo->notifier.subdevs = kcalloc(FOO_MAX_SUBDEVS,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sizeof(struct v4l2_async_subdev)); \n\u00a0\u00a0\u00a0\u00a0foo_parse_nodes(foo);\n\u00a0\u00a0\u00a0\u00a0foo->notifier.bound = foo_bound;\n\u00a0\u00a0\u00a0\u00a0foo->notifier.complete = foo_complete; \n\u00a0\u00a0\u00a0\u00a0return \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v4l2_async_notifier_register(&foo->v4l2_dev, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&foo->notifier);\n}\n```", "```\nstruct foo_async {\n\u00a0\u00a0\u00a0\u00a0struct v4l2_async_subdev asd;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev *sd;\n};\n/* Either */\nstatic void foo_parse_nodes(struct device *dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_notifier *n)\n{\n\u00a0\u00a0\u00a0\u00a0struct device_node *node = NULL;\n\u00a0\u00a0\u00a0\u00a0while ((node = of_graph_get_next_endpoint(dev->of_node, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node))) { \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct foo_async *fa = kmalloc(sizeof(*fa));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n->subdevs[n->num_subdevs++] = &fa->asd;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fa->asd.match.of.node = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of_graph_get_remote_port_parent(node); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fa->asd.match_type = V4L2_ASYNC_MATCH_OF;\n\u00a0\u00a0\u00a0\u00a0}\n}\n/* Or */\nstatic void foo_parse_nodes(struct device *dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_notifier *n)\n{\n\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *fwnode = dev_fwnode(dev);\n\u00a0\u00a0\u00a0\u00a0struct fwnode_handle *ep = NULL;\n\u00a0\u00a0\u00a0\u00a0while ((ep = fwnode_graph_get_next_endpoint(ep, fwnode))) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct foo_async *fa = kmalloc(sizeof(*fa));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n->subdevs[n->num_subdevs++] = &fa->asd;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fa->asd.match.fwnode =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fwnode_graph_get_remote_port_parent(ep);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fa->asd.match_type = V4L2_ASYNC_MATCH_FWNODE;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```\n/* foo_bound() and foo_complete() */\nstatic int foo_bound(struct v4l2_async_notifier *n,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev *sd, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_subdev *asd)\n{\n\u00a0\u00a0\u00a0\u00a0struct foo_async *fa = container_of(asd, struct bar_async, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0asd);\n\u00a0\u00a0\u00a0\u00a0/* One can use subdev_call here */\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0fa->sd = sd;\n}\nstatic int foo_complete(struct v4l2_async_notifier *n)\n{\n\u00a0\u00a0\u00a0\u00a0struct foo_device *foo =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container_of(n, struct foo_async, notifier);\n\u00a0\u00a0\u00a0\u00a0struct v4l2_device *v4l2_dev = &isp->v4l2_dev;\n\u00a0\u00a0\u00a0\u00a0/* Create /dev/sub-devX if applicable */ \n\u00a0\u00a0\u00a0\u00a0v4l2_device_register_subdev_nodes(&foo->v4l2_dev);\n\u00a0\u00a0\u00a0\u00a0/* setup the video device: fops, queue, ioctls ... */\n[...]\n\u00a0\u00a0\u00a0\u00a0/* Register the video device */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = video_register_device(foo->vdev, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VFL_TYPE_GRABBER, -1);\n\u00a0\u00a0\u00a0\u00a0/* Register with the media controller framework */ \n\u00a0\u00a0\u00a0\u00a0return media_device_register(&bar->mdev);\n}\n```", "```\ncsi1: csi@1cb4000 {\n\u00a0\u00a0\u00a0\u00a0compatible = \"allwinner,sun8i-v3s-csi\";\n\u00a0\u00a0\u00a0\u00a0reg = <0x01cb4000 0x1000>;\n\u00a0\u00a0\u00a0\u00a0interrupts = <GIC_SPI 84 IRQ_TYPE_LEVEL_HIGH>;\n\u00a0\u00a0\u00a0\u00a0/* we omit clock and others */\n[...]\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csi1_ep: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&ov7740_ep>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* We omit v4l2 related properties */\n[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\n&i2c1 {\n\u00a0\u00a0\u00a0\u00a0#address-cells = <1>;\n\u00a0\u00a0\u00a0\u00a0#size-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0ov7740: camera@21 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compatible = \"ovti,ov7740\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0x21>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* We omit clock or pincontrol or everything else */\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ov7740_ep: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&csi1_ep>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* We omit v4l2 related properties */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0};\n};\n```", "```\nstruct v4l2_device {\n[...]\n\u00a0\u00a0\u00a0\u00a0struct media_device *mdev;\n[...]\n};\n```", "```\nstruct video_device\n{\n#if defined(CONFIG_MEDIA_CONTROLLER)\n\u00a0\u00a0\u00a0\u00a0struct media_entity entity;\n\u00a0\u00a0\u00a0\u00a0struct media_intf_devnode *intf_devnode;\n\u00a0\u00a0\u00a0\u00a0struct media_pipeline pipe;\n#endif\n[...]\n};\nstruct v4l2_subdev {\n#if defined(CONFIG_MEDIA_CONTROLLER)\n\u00a0\u00a0\u00a0\u00a0struct media_entity entity;\n#endif\n[...]\n};\n```", "```\nstruct media_device {\n\u00a0\u00a0\u00a0\u00a0/* dev->driver_data points to this struct. */\n\u00a0\u00a0\u00a0\u00a0struct device *dev;\n\u00a0\u00a0\u00a0\u00a0struct media_devnode *devnode;\n\u00a0\u00a0\u00a0\u00a0char model[32];\n\u00a0\u00a0\u00a0\u00a0char driver_name[32];\n[...]\n\u00a0\u00a0\u00a0\u00a0char serial[40];\n\u00a0\u00a0\u00a0\u00a0u32 hw_revision;\n\u00a0\u00a0\u00a0\u00a0u64 topology_version;\n\u00a0\u00a0\u00a0\u00a0struct list_head entities;\n\u00a0\u00a0\u00a0\u00a0struct list_head pads;\n\u00a0\u00a0\u00a0\u00a0struct list_head links;\n\u00a0\u00a0\u00a0\u00a0struct list_head entity_notify;\n\u00a0\u00a0\u00a0\u00a0struct mutex graph_mutex;\n[...]\n\u00a0\u00a0\u00a0\u00a0const struct media_device_ops *ops;\n};\n```", "```\nstruct media_entity {\n\u00a0\u00a0\u00a0\u00a0struct media_gobj graph_obj;\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0enum media_entity_type obj_type;\n\u00a0\u00a0\u00a0\u00a0u32 function;\n\u00a0\u00a0\u00a0\u00a0unsigned long flags;\n\u00a0\u00a0\u00a0\u00a0u16 num_pads;\n\u00a0\u00a0\u00a0\u00a0u16 num_links;\n\u00a0\u00a0\u00a0\u00a0u16 num_backlinks;\n\u00a0\u00a0\u00a0\u00a0int internal_idx;\n\u00a0\u00a0\u00a0\u00a0struct media_pad *pads;\n\u00a0\u00a0\u00a0\u00a0struct list_head links;\n\u00a0\u00a0\u00a0\u00a0const struct media_entity_operations *ops;\n\u00a0\u00a0\u00a0\u00a0int stream_count;\n\u00a0\u00a0\u00a0\u00a0int use_count;\n\u00a0\u00a0\u00a0\u00a0struct media_pipeline *pipe;\n[...]\n};\n```", "```\nstruct media_pad {\n[...]\n\u00a0\u00a0\u00a0\u00a0struct media_entity *entity;\n\u00a0\u00a0\u00a0\u00a0u16 index;\n\u00a0\u00a0\u00a0\u00a0unsigned long flags;\n};\n```", "```\nstruct media_link {\n\u00a0\u00a0\u00a0\u00a0struct media_gobj graph_obj;\n\u00a0\u00a0\u00a0\u00a0struct list_head list;\n[...]\n\u00a0\u00a0\u00a0\u00a0struct media_pad *source;\n\u00a0\u00a0\u00a0\u00a0struct media_pad *sink;\n[...]\n\u00a0\u00a0\u00a0\u00a0struct media_link *reverse;\n\u00a0\u00a0\u00a0\u00a0unsigned long flags;\n\u00a0\u00a0\u00a0\u00a0bool is_backlink;\n};\n```", "```\nint media_entity_pads_init(struct media_entity *entity,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u16 num_pads, struct media_pad *pads);\n```", "```\nstruct mydrv_state_struct {\n\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev sd;\n\u00a0\u00a0\u00a0\u00a0struct media_pad pad;\n[...]\n};\nstatic int my_probe(struct i2c_client *client,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct i2c_device_id *id)\n{\n\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev *sd;\n\u00a0\u00a0\u00a0\u00a0struct mydrv_state_struct *my_struct;\n[...]\n\u00a0\u00a0\u00a0\u00a0sd = &my_struct->sd;\n\u00a0\u00a0\u00a0\u00a0my_struct->pad.flags = MEDIA_PAD_FL_SINK | \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MEDIA_PAD_FL_MUST_CONNECT;\n\u00a0\u00a0\u00a0\u00a0ret = media_entity_pads_init(&sd->entity, 1, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&my_struct->pad);\n[...]\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nmedia_device_unregister_entity(struct media_entity *entity);\n```", "```\nmedia_entity_cleanup(struct media_entity *entity);\n```", "```\nstruct media_entity_operations {\n\u00a0\u00a0\u00a0\u00a0int (*get_fwnode_pad)(struct fwnode_endpoint *endpoint);\n\u00a0\u00a0\u00a0\u00a0int (*link_setup)(struct media_entity *entity,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct media_pad *local,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct media_pad *remote, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u32 flags);\n\u00a0\u00a0\u00a0\u00a0int (*link_validate)(struct media_link *link);\n};\n```", "```\nstruct v4l2_subdev_pad_ops {\n[...]\n\u00a0\u00a0\u00a0\u00a0int (*enum_mbus_code)(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_mbus_code_enum *code);\n\u00a0\u00a0\u00a0\u00a0int (*enum_frame_size)(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_frame_size_enum *fse);\n\u00a0\u00a0\u00a0\u00a0int (*enum_frame_interval)(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_frame_interval_enum *fie); \n\u00a0\u00a0\u00a0\u00a0int (*get_fmt)(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format *format);\n\u00a0\u00a0\u00a0\u00a0int (*set_fmt)(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format *format);\n#ifdef CONFIG_MEDIA_CONTROLLER\n\u00a0\u00a0\u00a0\u00a0int (*link_validate)(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct media_link *link,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format *source_fmt,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format *sink_fmt);\n#endif /* CONFIG_MEDIA_CONTROLLER */\n[...]\n};\n```", "```\nstruct v4l2_subdev_pad_config {\n\u00a0\u00a0\u00a0\u00a0struct v4l2_mbus_framefmt try_fmt;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_rect try_crop;\n[...]\n};\n```", "```\nstruct v4l2_subdev_format {\n\u00a0\u00a0\u00a0\u00a0__u32 which;\n\u00a0\u00a0\u00a0\u00a0__u32 pad;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_mbus_framefmt format;\n[...]\n};\n```", "```\nstruct v4l2_mbus_framefmt {\n\u00a0\u00a0\u00a0\u00a0__u32\twidth;\n\u00a0\u00a0\u00a0\u00a0__u32\theight;\n\u00a0\u00a0\u00a0\u00a0__u32\tcode;\n\u00a0\u00a0\u00a0\u00a0__u32\tfield;\n\u00a0\u00a0\u00a0\u00a0__u32\tcolorspace;\n[...]\n};\n```", "```\nstatic int rcsi2_set_pad_format(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format *format)\n{\n\u00a0\u00a0\u00a0\u00a0struct v4l2_mbus_framefmt *framefmt;\n\u00a0\u00a0\u00a0\u00a0/* retrieve the private data structure */\n\u00a0\u00a0\u00a0\u00a0struct rcar_csi2 *priv = sd_to_csi2(sd);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* Store the requested format so that it can be applied to\n\u00a0\u00a0\u00a0\u00a0\u00a0* the device when the pipeline starts\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0if (format->which == V4L2_SUBDEV_FORMAT_ACTIVE) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0priv->mf = format->format;\n\u00a0\u00a0\u00a0\u00a0} else { /* V4L2_SUBDEV_FORMAT_TRY */ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* set the .try_fmt of this pad config with the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* value of the requested \"try\" format\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0framefmt = v4l2_subdev_get_try_format(sd, cfg, 0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*framefmt = format->format;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* driver is free to update any format->* field */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstatic int rcsi2_get_pad_format(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format *format)\n{\n\u00a0\u00a0\u00a0\u00a0struct rcar_csi2 *priv = sd_to_csi2(sd);\n\u00a0\u00a0\u00a0\u00a0if (format->which == V4L2_SUBDEV_FORMAT_ACTIVE)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format->format = priv->mf;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format->format = *v4l2_subdev_get_try_format(sd, cfg, 0);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\n/*\n * Initializes the TRY format to the ACTIVE format on all pads\n * of a subdev. Can be used as the .init_cfg pad operation.\n */\nint imx_media_init_cfg(struct v4l2_subdev *sd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_pad_config *cfg)\n{\n\u00a0\u00a0\u00a0\u00a0struct v4l2_mbus_framefmt *mf_try;\n\u00a0\u00a0\u00a0\u00a0struct v4l2_subdev_format format;\n\u00a0\u00a0\u00a0\u00a0unsigned int pad;\n\u00a0\u00a0\u00a0\u00a0int ret;\n\u00a0\u00a0\u00a0\u00a0for (pad = 0; pad < sd->entity.num_pads; pad++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memset(&format, 0, sizeof(format));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format.pad = pad;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format.which = V4L2_SUBDEV_FORMAT_ACTIVE;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret = v4l2_subdev_call(sd, pad, get_fmt, NULL, &format);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ret)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mf_try = v4l2_subdev_get_try_format(sd, cfg, pad);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*mf_try = format.format;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nstatic int isp_subdev_notifier_complete(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct v4l2_async_notifier *async)\n{\n\u00a0\u00a0\u00a0\u00a0struct isp_device *isp =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container_of(async, struct isp_device, notifier);\n[...]\n\u00a0\u00a0\u00a0\u00a0return media_device_register(&isp->media_dev);\n}\nstatic const\nstruct v4l2_async_notifier_operations isp_subdev_notifier_ops = {\n\u00a0\u00a0\u00a0\u00a0.complete = isp_subdev_notifier_complete,\n};\n```", "```\nmedia-ctl --links\\\n\"<entitya>:<srcpadn> -> <entityb>:<sinkpadn>[<flags>]\n```", "```\n$ media-ctl --print-topology\n```", "```\n$ media-ctl --device /dev/mediaN --print-topology\n```", "```\n$ media-ctl --print-dot > graph.dot\n$ dot -Tpng graph.dot > graph.png\n```", "```\n# media-ctl -l \"'ov5640 2-003c':0 -> 'imx6-mipi-csi2':0[1]\"\n# media-ctl -l \"'imx6-mipi-csi2':2 -> 'ipu1_csi1':0[1]\"\n# media-ctl -l \"'ipu1_csi1':1 -> 'ipu1_ic_prp':0[1]\"\n# media-ctl -l \"'ipu1_ic_prp':1 -> 'ipu1_ic_prpenc':0[1]\"\n# media-ctl -l \"'ipu1_ic_prpenc':1 -> 'ipu1_ic_prpenc capture':0[1]\" \n```", "```\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\\\nMIPI Camera Input --> MIPI CSI-2 -- > | \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| M |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| U | --> CSI --> Capture\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| X |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0/\nParallel Camera Input --------------> | /\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|/\n```", "```\n# Setup links\nmedia-ctl --reset\nmedia-ctl -l \"'ov2680 1-0036':0 -> 'imx7-mipi-csis.0':0[1]\"\nmedia-ctl -l \"'imx7-mipi-csis.0':1 -> 'csi_mux':1[1]\"\nmedia-ctl -l \"'csi_mux':2 -> 'csi':0[1]\"\nmedia-ctl -l \"'csi':1 -> 'csi capture':0[1]\"\n```", "```\nmedia-ctl -r -l '\"ov2680 1-0036\":0->\"imx7-mipi-csis.0\":0[1], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"imx7-mipi-csis.0\":1 ->\"csi_mux\":1[1], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"csi_mux\":2->\"csi\":0[1], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"csi\":1->\"csi capture\":0[1]'\n```", "```\n# Configure pads for pipeline\nmedia-ctl -V \"'ov2680 1-0036':0 [fmt:SBGGR10_1X10/800x600 field:none]\" \nmedia-ctl -V \"'csi_mux':1 [fmt:SBGGR10_1X10/800x600 field:none]\"\nmedia-ctl -V \"'csi_mux':2 [fmt:SBGGR10_1X10/800x600 field:none]\"\nmedia-ctl \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-V \"'imx7-mipi-csis.0':0 [fmt:SBGGR10_1X10/800x600 field:none]\"\nmedia-ctl -V \"'csi':0 [fmt:SBGGR10_1X10/800x600 field:none]\"\n```", "```\nmedia-ctl \\\n\u00a0\u00a0\u00a0\u00a0-f '\"ov2680 1-0036\":0 [SGRBG10 800x600 (32,20)/800x600], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"csi_mux\":1 [SGRBG10 800x600], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"csi_mux\":2 [SGRBG10 800x600], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"mx7-mipi-csis.0\":2 [SGRBG10 800x600], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"imx7-mipi-csi.0\":0 [SGRBG10 800x600], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"csi\":0 [UYVY 800x600]'\n```", "```\ngpr: iomuxc-gpr@30340000 {\n[...]\n\u00a0\u00a0\u00a0\u00a0video_mux: csi-mux {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compatible = \"video-mux\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mux-controls = <&mux 0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#address-cells = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#size-cells = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status = \"disabled\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port@0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port@1 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csi_mux_from_mipi_vc0: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&mipi_vc0_to_csi_mux>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port@2 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <2>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csi_mux_to_csi: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&csi_from_csi_mux>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0}; \n};\n```", "```\nmipi_csi: mipi-csi@30750000 {\n\u00a0\u00a0\u00a0\u00a0compatible = \"fsl,imx7-mipi-csi2\";\n[...]\n\u00a0\u00a0\u00a0\u00a0status = \"disabled\";\n\u00a0\u00a0\u00a0\u00a0port@0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0>;\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0port@1 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mipi_vc0_to_csi_mux: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&csi_mux_from_mipi_vc0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n[...]\ncsi: csi@30710000 {\n\u00a0\u00a0\u00a0\u00a0compatible = \"fsl,imx7-csi\"; [...]\n\u00a0\u00a0\u00a0\u00a0status = \"disabled\";\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csi_from_csi_mux: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&csi_mux_to_csi>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\n&video_mux {\n\u00a0\u00a0\u00a0\u00a0status = \"okay\";\n};\n&mipi_csi {\n\u00a0\u00a0\u00a0\u00a0clock-frequency = <166000000>;\n\u00a0\u00a0\u00a0\u00a0fsl,csis-hs-settle = <3>;\n\u00a0\u00a0\u00a0\u00a0status = \"okay\";\n\u00a0\u00a0\u00a0\u00a0port@0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reg = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mipi_from_sensor: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&ov2680_to_mipi>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-lanes = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n&i2c2 {\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0status = \"okay\";\n\u00a0\u00a0\u00a0\u00a0ov2680: camera@36 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compatible = \"ovti,ov2680\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0port {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ov2680_to_mipi: endpoint {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remote-endpoint = <&mipi_from_sensor>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clock-lanes = <0>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-lanes = <1>;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0};\n};\n```", "```\nroot@imx7s-warp:~# media-ctl -p\nMedia controller API version 4.17.0\nMedia device information\n------------------------\ndriver\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imx7-csi\nmodel\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imx-media\nserial\nbus info\nhw revision\u00a0\u00a0\u00a0\u00a0\u00a00x0\ndriver version\u00a0\u00a04.17.0\nDevice topology\n- entity 1: csi (2 pads, 2 links)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type V4L2 subdev subtype Unknown flags 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device node name /dev/v4l-subdev0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad0: Sink\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:SBGGR10_1X10/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<- \"csi-mux\":2 [ENABLED]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad1: Source\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:SBGGR10_1X10/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-> \"csi capture\":0 [ENABLED]\n- entity 4: csi capture (1 pad, 1 link)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type Node subtype V4L flags 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device node name /dev/video0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad0: Sink\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<- \"csi\":1 [ENABLED]\n- entity 10: csi-mux (3 pads, 2 links)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type V4L2 subdev subtype Unknown flags 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device node name /dev/v4l-subdev1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad0: Sink\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:unknown/0x0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad1: Sink\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:unknown/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<- \"imx7-mipi-csis.0\":1 [ENABLED]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad2: Source\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:unknown/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-> \"csi\":0 [ENABLED]\n- entity 14: imx7-mipi-csis.0 (2 pads, 2 links)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type V4L2 subdev subtype Unknown flags 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device node name /dev/v4l-subdev2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad0: Sink\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:SBGGR10_1X10/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<- \"ov2680 1-0036\":0 [ENABLED]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad1: Source\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:SBGGR10_1X10/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-> \"csi-mux\":1 [ENABLED]\n- entity 17: ov2680 1-0036 (1 pad, 1 link)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type V4L2 subdev subtype Sensor flags 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0device node name /dev/v4l-subdev3\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pad0: Source\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[fmt:SBGGR10_1X10/800x600 field:none]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-> \"imx7-mipi-csis.0\":0 [ENABLED]\n```"]