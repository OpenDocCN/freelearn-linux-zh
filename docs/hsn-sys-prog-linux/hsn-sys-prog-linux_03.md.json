["```\n$ dd if=/dev/urandom of=tst count=1024 bs=1M\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB, 1.0 GiB) copied, 15.2602 s, 70.4 MB/s\n$ ls -lh tst \n-rw-rw-r-- 1 kai kai 1.0G Jan  4 12:19 tst\n$ \n```", "```\ndd if=/dev/urandom of=tst count=1024 bs=1G\n```", "```\n$ ulimit -f\nunlimited\n$ \n```", "```\n[...] If limit is given, it is the new value of the specified resource (the -a option is display only). If no option is given, then -f is assumed. Values are in 1024-byte increments, except for -t, which is in seconds, -p, which is in units of 512-byte blocks, and -T, -b, -n, and -u, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit. [...]\n```", "```\n$ ulimit -aS\ncore file size          (blocks, -c) unlimited\ndata seg size           (kbytes, -d) unlimited\nscheduling priority             (-e) 0\nfile size               (blocks, -f) unlimited\npending signals                 (-i) 63260\nmax locked memory       (kbytes, -l) 64\nmax memory size         (kbytes, -m) unlimited\nopen files                      (-n) 1024\npipe size            (512 bytes, -p) 8\nPOSIX message queues     (bytes, -q) 819200\nreal-time priority              (-r) 0\nstack size              (kbytes, -s) 8192\ncpu time               (seconds, -t) unlimited\nmax user processes              (-u) 63260\nvirtual memory          (kbytes, -v) unlimited\nfile locks                      (-x) unlimited\n$ \n```", "```\n$ ps\n  PID TTY          TIME CMD\n23843 pts/6    00:00:00 bash\n29305 pts/6    00:00:00 ps\n$ $ ulimit -aS > ulimit-aS.txt $ ulimit -aH > ulimit-aH.txt $ meld ulimit-aS.txt ulimit-aH.txt & \n```", "```\n$ ulimit -n\n1024\n$ ulimit -aS |grep \"open files\"\nopen files                      (-n) 1024\n$ ulimit -aH |grep \"open files\"\nopen files                      (-n) 4096\n$ \n$ ulimit -n 3000\n$ ulimit -aS |grep \"open files\"\nopen files                      (-n) 3000\n$ ulimit -aH |grep \"open files\"\nopen files                      (-n) 3000\n$ ulimit -n 3001\nbash: ulimit: open files: cannot modify limit: Operation not permitted\n$ ulimit -n 2000\n$ ulimit -n\n2000\n$ ulimit -aS |grep \"open files\"\nopen files                      (-n) 2000\n$ ulimit -aH |grep \"open files\"\nopen files (-n) 2000\n$ ulimit -n 3000\nbash: ulimit: open files: cannot modify limit: Operation not permitted\n$ \n```", "```\n$ ulimit -n\n1024\n$ sudo bash -c \"ulimit -n 2000 && exec ulimit -n\"\n[sudo] password for kai: xxx\n2000\n$ \nChapter 9, *Process Execution.*\n```", "```\nprlimit [options] [--resource[=limits] [--pid PID]\nprlimit [options] [--resource[=limits] command [argument...]\n```", "```\n$ prlimit \n```", "```\n$ ps\n  PID TTY          TIME CMD\n 2917 pts/7    00:00:00 bash\n 3339 pts/7    00:00:00 ps\n$ prlimit --pid=2917\nRESOURCE   DESCRIPTION                             SOFT      HARD UNITS\nAS         address space limit                unlimited unlimited bytes\nCORE       max core file size                 unlimited unlimited bytes\nCPU        CPU time                           unlimited unlimited seconds\n[...]\n$ \n```", "```\n$ prlimit --pid=2917 --fsize=2048000 --stack=12582912 \n$ prlimit --pid=2917 | egrep -i \"fsize|stack\"\nFSIZE    max file size    2048000   2048000  bytes\nSTACK    max stack size   12582912  12582912 bytes\n$ \n```", "```\n$ ./rlimit_primes \nUsage: ./rlimit_primes limit-to-generate-primes-upto CPU-time-limit\n arg1 : max is 10000000\n arg2 : CPU-time-limit:\n  -2 = don't set\n  -1 = unlimited\n   0 = 1s\n$ prlimit --cpu=2 ./rlimit_primes 8000000 -2\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, \n  59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, \n\n  [...]\n\n  18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, \n  18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523,  \n  18539, 18541, 18553, 18583, 18587, 18593, \nKilled\n$ \n```", "```\n#include <sys/time.h>\n#include <sys/resource.h>\n\nint prlimit(pid_t pid, int resource, \n            const struct rlimit *new_limit, struct rlimit *old_limit);\n```", "```\nstruct rlimit {\n     rlim_t rlim_cur;  /* Soft limit */\n     rlim_t rlim_max;  /* Hard limit (ceiling for rlim_cur) */\n};\n```", "```\n/* From ch3/rlimits_show.c */\n#define ARRAY_LEN(arr) (sizeof((arr))/sizeof((arr)[0]))\nstatic void query_rlimits(void)\n{\n    unsigned i;\n    struct rlimit rlim;\n    struct rlimpair {\n        int rlim;\n        char *name;\n    };\n    struct rlimpair rlimpair_arr[] = {\n        {RLIMIT_CORE, \"RLIMIT_CORE\"},\n        {RLIMIT_DATA, \"RLIMIT_DATA\"},\n        {RLIMIT_NICE, \"RLIMIT_NICE\"},\n        {RLIMIT_FSIZE, \"RLIMIT_FSIZE\"},\n        {RLIMIT_SIGPENDING, \"RLIMIT_SIGPENDING\"},\n        {RLIMIT_MEMLOCK, \"RLIMIT_MEMLOCK\"},\n        {RLIMIT_NOFILE, \"RLIMIT_NOFILE\"},\n        {RLIMIT_MSGQUEUE, \"RLIMIT_MSGQUEUE\"},\n        {RLIMIT_RTTIME, \"RLIMIT_RTTIME\"},\n        {RLIMIT_STACK, \"RLIMIT_STACK\"},\n        {RLIMIT_CPU, \"RLIMIT_CPU\"},\n        {RLIMIT_NPROC, \"RLIMIT_NPROC\"},\n        {RLIMIT_AS, \"RLIMIT_AS\"},\n        {RLIMIT_LOCKS, \"RLIMIT_LOCKS\"},\n    };\n    char tmp1[16], tmp2[16];\n\n    printf(\"RESOURCE LIMIT                 SOFT              HARD\\n\");\n    for (i = 0; i < ARRAY_LEN(rlimpair_arr); i++) {\n        if (prlimit(0, rlimpair_arr[i].rlim, 0, &rlim) == -1)\n              handle_err(EXIT_FAILURE, \"%s:%s:%d: prlimit[%d] failed\\n\",\n                        __FILE__, __FUNCTION__, __LINE__, i);\n\n        snprintf(tmp1, 16, \"%ld\", rlim.rlim_cur);\n        snprintf(tmp2, 16, \"%ld\", rlim.rlim_max);\n        printf(\"%-18s:  %16s  %16s\\n\",\n               rlimpair_arr[i].name,\n               (rlim.rlim_cur == -1 ? \"unlimited\" : tmp1),\n               (rlim.rlim_max == -1 ? \"unlimited\" : tmp2)\n            );\n    }\n} \n```", "```\n$ make rlimits_show\n[...]\n$ ./rlimits_show\nRESOURCE LIMIT                 SOFT              HARD\nRLIMIT_CORE       :         unlimited         unlimited\nRLIMIT_DATA       :         unlimited         unlimited\nRLIMIT_NICE       :                 0                 0\nRLIMIT_FSIZE      :         unlimited         unlimited\nRLIMIT_SIGPENDING :             63229             63229\nRLIMIT_MEMLOCK    :             65536             65536\nRLIMIT_NOFILE     :              1024              4096\nRLIMIT_MSGQUEUE   :            819200            819200\nRLIMIT_RTTIME     :         unlimited         unlimited\nRLIMIT_STACK      :           8388608         unlimited\nRLIMIT_CPU        :         unlimited         unlimited\nRLIMIT_NPROC      :             63229             63229\nRLIMIT_AS         :         unlimited         unlimited\nRLIMIT_LOCKS      :         unlimited         unlimited\n$ ulimit -f\nunlimited\n$ ulimit -f 512000\n$ ulimit -f\n512000\n$ ./rlimits_show | grep FSIZE\nRLIMIT_FSIZE      :         524288000         524288000\n$ \n```", "```\n#define MAX    10000000         // 10 million\nstatic void simple_primegen(int limit)\n{\n    int i, j, num = 2, isprime;\n\n    printf(\"  2,  3, \");\n    for (i = 4; i <= limit; i++) {\n        isprime = 1;\n        for (j = 2; j < limit / 2; j++) {\n            if ((i != j) && (i % j == 0)) {\n                isprime = 0;\n                break;\n            }\n        }\n        if (isprime) {\n            num++;\n            printf(\"%6d, \", i);\n         /* Wrap after WRAP primes are printed on a line;\n          * this is crude; in production code, one must query\n          * the terminal window's width and calculate the column\n          * to wrap at.\n          */\n#define WRAP 16\n            if (num % WRAP == 0)\n                printf(\"\\n\");\n        }\n    }\n    printf(\"\\n\");\n}\n```", "```\n/* \n * Setup the CPU resource limit to 'cpulimit' seconds\n */\nstatic void setup_cpu_rlimit(int cpulimit)\n{\n    struct rlimit rlim_new, rlim_old;\n\n    if (cpulimit == -1)\n        rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;\n    else\n        rlim_new.rlim_cur = rlim_new.rlim_max = (rlim_t)cpulimit;\n\n    if (prlimit(0, RLIMIT_CPU, &rlim_new, &rlim_old) == -1)\n          FATAL(\"prlimit:cpu failed\\n\");\n    printf\n        (\"CPU rlimit [soft,hard] new: [%ld:%ld]s : old [%ld:%ld]s (-1 = unlimited)\\n\",\n         rlim_new.rlim_cur, rlim_new.rlim_max, rlim_old.rlim_cur,\n         rlim_old.rlim_max);\n}\n```", "```\n$ prlimit | grep \"CPU time\"\nCPU     CPU time         unlimited unlimited seconds\n$ ./rlimit_primes\nUsage: ./rlimit_primes limit-to-generate-primes-upto CPU-time-limit\n arg1 : max is 10000000\n arg2 : CPU-time-limit:\n  -2 = don't set\n  -1 = unlimited\n   0 = 1s\n$ ./rlimit_primes 100 -2\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, \n    59, 61, 67, 71, 73, 79, 83, 89, 97, \n$ \n$ ./rlimit_primes 90000 5 CPU rlimit [soft,hard] new: [5:5]s : old [-1:-1]s (-1 = unlimited)  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\n[...]\n\n89753, 89759, 89767, 89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989,\n$ \n```", "```\n$ prlimit | grep \"CPU time\" CPU          CPU time          unlimited unlimited seconds\n$ ./rlimit_primes 200000 1 > /tmp/prm\nKilled\n$ tail -n1 /tmp/prm\n 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 54869, 54877, 54881, $\n```"]