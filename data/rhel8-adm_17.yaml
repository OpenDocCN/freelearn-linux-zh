- en: '*Chapter 14*: Advanced Storage Management with Stratis and VDO'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：使用Stratis和VDO进行高级存储管理'
- en: In this chapter, we will learn about **Stratis** and **Virtual Data Optimizer**
    (**VDO**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习**Stratis**和**虚拟数据优化器**（**VDO**）。
- en: Stratis is a storage management tool to simplify running the most typical daily
    tasks. It uses the underlying technologies explained in the previous chapters,
    such as LVM, partition schemas, and filesystems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Stratis是一个存储管理工具，用于简化运行最典型的日常任务。它使用前几章中解释的基础技术，如LVM、分区模式和文件系统。
- en: VDO is a storage layer that includes a driver that sits between our applications
    and the storage devices to provide deduplication and compression of the data stored,
    as well as tools to manage this functionality. This will allow us, for example,
    to maximize the ability of our system to hold virtual machine (VM) instances that
    will only consume disk space based on what makes them unique, but just storing
    once the data that is common to them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: VDO是一个存储层，包括一个驱动程序，位于我们的应用程序和存储设备之间，提供数据的去重和压缩，以及管理此功能的工具。这将使我们能够最大化系统容纳虚拟机（VM）实例的能力，这些实例将仅基于使它们独特的内容占用磁盘空间，但只存储它们共同的数据一次。
- en: We can also use VDO for storing different copies of our backups, knowing that
    disk usage will still be optimized.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用VDO来存储我们备份的不同副本，知道磁盘使用仍将被优化。
- en: By the end of this chapter, we will know how VDO works and what is required
    to set it up for our system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将了解VDO的工作原理以及为系统设置它所需的内容。
- en: 'We will explore how to prepare, configure, and use our systems in the following
    sections:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下部分中探讨如何准备、配置和使用我们的系统：
- en: Understanding Stratis
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Stratis
- en: Installing and enabling Stratis
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和启用Stratis
- en: Managing storage pools and filesystems with Stratis
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Stratis管理存储池和文件系统
- en: Preparing systems to use VDO
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备系统以使用VDO
- en: Creating a VDO volume
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建VDO卷
- en: Assigning a VDO volume to LVM
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将VDO卷分配给LVM
- en: Testing a VDO volume and reviewing stats
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试VDO卷并查看统计信息
- en: Let's jump into preparing our systems to use VDO.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始准备我们的系统以使用VDO。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: It is possible to continue the practice of using the VM created at the beginning
    of this book in [*Chapter 1*](B16799_01_Final_SK_ePub.xhtml#_idTextAnchor014),
    *Installing RHEL8*. Any additional packages required for this chapter will be
    indicated and can be downloaded from [https://github.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration](https://github.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以继续使用本书开头创建的VM的做法[*第1章*](B16799_01_Final_SK_ePub.xhtml#_idTextAnchor014)，*安装RHEL8*。本章所需的任何其他软件包将被指示，并可以从[https://github.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration](https://github.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration)下载。
- en: We will need, for the *Understanding Stratis* section, the same two disks added
    in [*Chapter 13*](B16799_13_Final_SK_ePub.xhtml#_idTextAnchor169), *Flexible Storage
    Management with LVM*, after all the LVM components have been cleaned up from them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在*理解Stratis*部分，我们将需要与[*第13章*](B16799_13_Final_SK_ePub.xhtml#_idTextAnchor169)中添加的相同两个磁盘，*使用LVM进行灵活的存储管理*，在所有LVM组件都已从中清理出来后。
- en: Understanding Stratis
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Stratis
- en: As a new feature, to manage storage, **Stratis** was included in RHEL 8 as a
    technology preview (as of version 8.3 of RHEL). Stratis was created to manage
    local storage by combining a system service, **stratisd**, with the well-known
    tools in LVM (explained in [*Chapter 13*](B16799_13_Final_SK_ePub.xhtml#_idTextAnchor169),
    *Flexible Storage Management with LVM*) and the XFS filesystem (explained in [*Chapter
    12*](B16799_12_Final_SK_ePub.xhtml#_idTextAnchor160), *Managing Local Storage
    and Filesystems*), which makes it very solid and reliable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一项新功能，为了管理存储，**Stratis**作为技术预览包含在RHEL 8中（截至RHEL 8.3版本）。Stratis是为了通过将系统服务**stratisd**与LVM中的知名工具（在[*第13章*](B16799_13_Final_SK_ePub.xhtml#_idTextAnchor169)中解释，*使用LVM进行灵活的存储管理*）和XFS文件系统（在[*第12章*](B16799_12_Final_SK_ePub.xhtml#_idTextAnchor160)中解释，*管理本地存储和文件系统*）相结合来管理本地存储，这使其非常稳固和可靠。
- en: Important note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The filesystems/pools created with Stratis should always be managed with it,
    and not with the LVM/XFS tools. In the same way, already-created LVM volumes should
    not be managed with Stratis.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Stratis创建的文件系统/池应始终使用它来管理，而不是使用LVM/XFS工具。同样，已创建的LVM卷不应使用Stratis来管理。
- en: 'Stratis combines local disks into **pools** and then distributes the storage
    in **filesystems**, as shown in the following diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Stratis将本地磁盘组合成**池**，然后将存储分配到**文件系统**中，如下图所示：
- en: '![Figure 14.1 – Stratis simplified architecture diagram'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.1 - Stratis简化架构图'
- en: '](img/B16799_14_001.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_001.jpg)'
- en: Figure 14.1 – Stratis simplified architecture diagram
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 - Stratis简化架构图
- en: As can be seen, when compared to LVM, Stratis provides a much simpler and easy-to-understand
    interface to storage management. In the following sections, we will install and
    enable Stratis and then use the same disks created in [*Chapter 13*](B16799_13_Final_SK_ePub.xhtml#_idTextAnchor169),
    *Flexible Storage Management with LVM*, to create a pool and a couple of filesystems.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，与LVM相比，Stratis提供了一个更简单和易于理解的存储管理界面。在接下来的部分中，我们将安装和启用Stratis，然后使用在[*第13章*](B16799_13_Final_SK_ePub.xhtml#_idTextAnchor169)中创建的相同磁盘，*使用LVM进行灵活的存储管理*，来创建一个池和一对文件系统。
- en: Installing and enabling Stratis
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和启用Stratis
- en: 'To be able to work with Stratis, we will start by installing it. The two packages
    required to work with it are these:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用Stratis，我们将从安装它开始。与之一起使用的两个软件包是这些：
- en: '`stratis-cli`: A command-line tool to execute storage management tasks'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stratis-cli`：执行存储管理任务的命令行工具'
- en: '`stratisd`: A system service (also known as a daemon) that takes commands and
    executes the low-level tasks'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stratisd`：一个系统服务（也称为守护程序），接收命令并执行低级任务'
- en: 'To install them, we will use the `dnf` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它们，我们将使用`dnf`命令：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we can start the `stratisd` service with `systemctl`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`systemctl`启动`stratisd`服务：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we shall enable it to start at boot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将启用它以在启动时启动：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: We can do both tasks with one command, which would be `systemctl enable --now
    stratisd`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用一个命令完成这两个任务，即`systemctl enable --now stratisd`。
- en: 'Let''s check with `stratis-cli` that the daemon (also known as system service)
    is running:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`stratis-cli`检查守护进程（也称为系统服务）是否正在运行：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have it all ready, so it's time to start working on disks. Let's move on
    to the next sub-section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备就绪，现在是时候开始处理磁盘了。让我们继续下一个子部分。
- en: Managing storage pools and filesystems with Stratis
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Stratis管理存储池和文件系统
- en: 'In order to have some storage available for Stratis, we will use the `/dev/vdb`
    and `/dev/vdc` disks. We need to be sure that they do not have any logical volumes
    or partitions on them. Let''s review them:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为Stratis提供一些存储空间，我们将使用`/dev/vdb`和`/dev/vdc`磁盘。我们需要确保它们上面没有任何逻辑卷或分区。让我们检查一下它们：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We are good: all the LVM-created objects are on disk `/dev/vda`. Let''s check
    the other two disks, `/dev/vdb` and `/dev/vdc`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很好：所有由LVM创建的对象都在磁盘`/dev/vda`上。让我们检查另外两个磁盘，`/dev/vdb`和`/dev/vdc`：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Disk `/dev/vdc` has no partition table label. We are good with this one. However,
    disk `/dev/vdb` has a partition table. Let''s remove it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘`/dev/vdc`没有分区表标签。这个没问题。然而，磁盘`/dev/vdb`有一个分区表。让我们移除它：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `dd` command, which stands for disk dump, is used to dump data from devices
    and to devices. The special device `/dev/zero` simply generates zeroes, which
    we use to overwrite the initial sectors of the disk, where the label lives. Please
    use `dd` with care; it may overwrite anything without warning.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`dd`命令，代表磁盘转储，用于从设备转储数据和到设备。特殊设备`/dev/zero`只是生成零，我们用它来覆盖磁盘的初始扇区，标签所在的位置。请谨慎使用`dd`；它可能在没有警告的情况下覆盖任何内容。'
- en: 'Now we are ready to create the first pool with the `stratis` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备使用`stratis`命令创建第一个池：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We currently have the pool created, as shown in the following diagram:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前已经创建了池，如下图所示：
- en: '![Figure 14.2 – Stratis pool created'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.2 – 创建的Stratis池'
- en: '](img/B16799_14_002.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_002.jpg)'
- en: Figure 14.2 – Stratis pool created
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 – 创建的Stratis池
- en: 'We have the pool created; we can now create a filesystem on top of it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了池；现在可以在其上创建文件系统：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The status of the storage is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的状态如下：
- en: '![Figure 14.3 – Stratis filesystem created'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.3 – 创建的Stratis文件系统'
- en: '](img/B16799_14_003.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_003.jpg)'
- en: Figure 14.3 – Stratis filesystem created
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 – 创建的Stratis文件系统
- en: 'Let''s prepare to mount the filesystem. We need to add the following line in
    `/etc/fstab`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备挂载文件系统。我们需要在`/etc/fstab`中添加以下行：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In order for a Stratis filesystem to be mounted correctly during boot, we shall
    add the `x-systemd.requires=stratisd.service` option so it is mounted after the
    `stratisd` service is started.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在启动过程中正确挂载Stratis文件系统，我们应该添加`x-systemd.requires=stratisd.service`选项，以便在`stratisd`服务启动后挂载它。
- en: 'Now we can mount it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以挂载它：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s now extend the pool:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们扩展池：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As the underlying layer uses thin-pooling, we do not need to extend the filesystem.
    The storage is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于底层层使用了薄池，我们不需要扩展文件系统。存储如下：
- en: '![Figure 14.4 – Stratis pool extended'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.4 – Stratis池扩展'
- en: '](img/B16799_14_004.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_004.jpg)'
- en: Figure 14.4 – Stratis pool extended
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – Stratis池扩展
- en: 'Time to use the `stratis snapshot` command to create a snapshot. Let''s create
    some data and then snapshot it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`stratis snapshot`命令创建快照的时间。让我们创建一些数据，然后对其进行快照：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'To see the internal pieces of Stratis, you can run the `lsblk` command. With
    it, you will see the components used by Stratis in a tree: physical devices, allocations
    for metadata and data, pools, and filesystems. All of that is abstracted by Stratis.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看Stratis的内部组件，可以运行`lsblk`命令。通过它，您将看到Stratis在树中使用的组件：物理设备、元数据和数据的分配、池和文件系统。所有这些都被Stratis抽象化了。
- en: With this, we have seen an overview of Stratis in order to cover the basics
    of its management. Remember that Stratis is in preview and therefore it should
    not be used in production systems.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经了解了Stratis的概述，以便覆盖其管理的基础知识。请记住，Stratis目前处于预览阶段，因此不应在生产系统中使用。
- en: Let's move on now to other advanced topics in storage management by reviewing
    data deduplication with VDO.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续研究存储管理中的其他高级主题，通过回顾使用VDO进行数据去重。
- en: Preparing systems to use VDO
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备系统使用VDO
- en: 'As mentioned earlier, VDO is a driver, specifically a Linux device-mapper driver,
    that uses two kernel modules:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，VDO是一个驱动程序，具体来说是一个Linux设备映射器驱动程序，它使用两个内核模块：
- en: '`kvdo`: This does data compression.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kvdo`：这做数据压缩。'
- en: '`uds`: This is in charge of deduplication.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uds`：这负责去重。'
- en: 'Regular storage devices such as local disks, **Redundant Array of Inexpensive
    Disks** (**RAID**), and so on are the final backend where data is stored; the
    VDO layer on top reduces disk usage via the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 常规存储设备，如本地磁盘、**廉价磁盘冗余阵列**（**RAID**）等，是数据存储的最终后端；顶部的VDO层通过以下方式减少磁盘使用：
- en: The removal of zeroed blocks, only storing them in the metadata.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去除零块，只在元数据中存储它们。
- en: 'Deduplication: Duplicate data blocks are referenced in the metadata but stored
    only once.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去重：重复的数据块在元数据中被引用，但只存储一次。
- en: 'Compression, using 4 KB data blocks with a lossless compression algorithm (LZ4:
    [https://lz4.github.io/lz4/](https://lz4.github.io/lz4/)).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用4KB数据块和无损压缩算法（LZ4：[https://lz4.github.io/lz4/](https://lz4.github.io/lz4/)）进行压缩。
- en: These techniques have been used in the past in other solutions, such as in thin-provisioned
    **VMs** that only kept the differences between VMs, but VDO makes this happen
    transparently.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术过去在其他解决方案中被使用过，比如只保留虚拟机之间的差异的薄配置**VMs**，但VDO使这一切变得透明。
- en: Similar to thin-provisioning, VDO can mean faster data throughput, as data can
    be cached by the system controller and several services or even VMs can use that
    data without there being a need for additional disk reads to access it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与薄配置类似，VDO可以意味着更快的数据吞吐量，因为数据可以被系统控制器和多个服务或甚至虚拟机缓存，而无需额外的磁盘读取来访问它。
- en: 'Let''s install the required packages on our system in order to create VDO volumes
    by installing the `vdo` and `kmod-kvdo` packages:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装所需的软件包，以便通过安装`vdo`和`kmod-kvdo`软件包来创建VDO卷：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, with the packages installed, we're ready to create our first volume in
    the next section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装了软件包，我们准备在下一节创建我们的第一个卷。
- en: Creating a VDO volume
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建VDO卷
- en: 'To create a VDO device, we will make use of the loopback device we created
    in [*Chapter 12*](B16799_12_Final_SK_ePub.xhtml#_idTextAnchor160), *Managing Local
    Storage and Filesystems*, so we will check first whether it''s mounted or not
    by executing this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建VDO设备，我们将利用我们在[*第12章*](B16799_12_Final_SK_ePub.xhtml#_idTextAnchor160)中创建的回环设备，*管理本地存储和文件系统*，所以我们首先检查它是否已挂载，执行以下命令：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If no output is shown, we''re set for creating our `vdo` volume on top of it
    with the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有输出显示，我们可以准备在其上创建我们的`vdo`卷，使用以下命令：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在以下截图中：
- en: '![Figure 14.5 – vdo volume creation'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.5 - vdo卷创建'
- en: '](img/B16799_14_005.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_005.jpg)'
- en: Figure 14.5 – vdo volume creation
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 - vdo卷创建
- en: 'Once the volume has been created, we can execute `vdo status` to get detailed
    information about the volume created, as seen in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 卷创建后，我们可以执行`vdo status`来获取有关创建的卷的详细信息，如下截图所示：
- en: '![Figure 14.6 – Output of vdo status'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 - vdo状态输出
- en: '](img/B16799_14_006.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_006.jpg)'
- en: Figure 14.6 – Output of vdo status
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 - vdo状态输出
- en: As we can see, there's information about the `kvdo` version, the configuration
    file being used, and our volumes (size, compression status, and so on).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这里有关于`kvdo`版本、正在使用的配置文件以及我们的卷（大小、压缩状态等）的信息。
- en: The new volume can now be seen via `/dev/mapper/myvdo` (the name we assigned
    with `–n`) and it's ready to be used.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 新卷现在可以通过`/dev/mapper/myvdo`看到（我们使用`–n`分配的名称），并且可以使用了。
- en: 'We can execute `vdo status|egrep -i "compression|dedupli"` and get an output
    that looks as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行`vdo status|egrep -i "compression|dedupli"`并获得以下输出：
- en: '![Figure 14.7 – Checking vdo status for compression and deduplication'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 - 检查VDO压缩和重复数据删除的状态
- en: '](img/B16799_14_007.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_007.jpg)'
- en: Figure 14.7 – Checking vdo status for compression and deduplication
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 - 检查VDO压缩和重复数据删除的状态
- en: This means that both compression and deduplication are enabled on our volume,
    so we're ready to test the functionality by adding it to an LVM volume in the
    next section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的卷上同时启用了压缩和重复数据删除，所以我们准备在下一节将其添加到LVM卷中进行功能测试。
- en: Assigning a VDO volume to an LVM volume
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将VDO卷分配给LVM卷
- en: In the previous section, we created a VDO volume, which will now become our
    **physical volume** (**PV**) when creating an LVM volume group and some logical
    volumes on top of it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们创建了一个VDO卷，现在将成为我们创建LVM卷组和一些逻辑卷的**物理卷**（**PV**）。
- en: 'Let''s create the PV by running the following sequence of commands:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令序列创建PV：
- en: '`pvcreate /dev/mapper/myvdo`'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pvcreate /dev/mapper/myvdo`'
- en: '`vgcreate myvdo /dev/mapper/myvdo`'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vgcreate myvdo /dev/mapper/myvdo`'
- en: '`lvcreate -L 15G –n myvol myvdo`'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lvcreate -L 15G –n myvol myvdo`'
- en: 'At this point, our `/dev/myvdo/myvol` is ready to be formatted. Let''s use
    the XFS filesystem:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的`/dev/myvdo/myvol`已准备好格式化。让我们使用XFS文件系统：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the filesystem has been created, let''s put some data on it by mounting
    as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统创建后，让我们通过挂载放一些数据：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now let's test the VDO volume in the next section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在下一节测试VDO卷。
- en: Testing a VDO volume and reviewing the stats
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试VDO卷并查看统计信息
- en: In order to test deduplication and compression, we will test with a big file,
    such as the RHEL 8 KVM guest image available at [https://access.redhat.com/downloads/content/479/ver=/rhel---8/8.3/x86_64/product-software](https://access.redhat.com/downloads/content/479/ver=/rhel---8/8.3/x86_64/product-software).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试重复数据删除和压缩，我们将使用一个大文件进行测试，比如在[https://access.redhat.com/downloads/content/479/ver=/rhel---8/8.3/x86_64/product-software](https://access.redhat.com/downloads/content/479/ver=/rhel---8/8.3/x86_64/product-software)上可用的RHEL
    8 KVM客户机镜像。
- en: 'Once downloaded, save it as `rhel-8.3-x86_64-kvm.qcow2` and copy it four times
    to our VDO volume:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，将其保存为`rhel-8.3-x86_64-kvm.qcow2`并将其复制四次到我们的VDO卷：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This would be the typical case for a server holding VMs that start of the same
    base disk image, but do we see any improvement?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个典型情况，对于一个持有以相同基础磁盘镜像启动的VM的服务器，但我们是否看到了任何改进？
- en: 'Let''s execute `vdostats --human-readable` to verify the data. Note that the
    image downloaded is 1.4 GB, as reported by `ls –si`. The output obtained from
    `vdostats --human-readable` is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行`vdostats --human-readable`来验证数据。请注意，从`ls –si`报告的图像下载大小为1.4 GB。从`vdostats
    --human-readable`获得的输出如下：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The original volume (the loopback file) was 20 GB, so that's the size we can
    see, but the LVM volume we created was 15 GB, judging from the output, and we
    see that approximately only 1.2 GB has been consumed, even if we've got four files
    of 1.4 GB each.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 原始卷（回环文件）为20 GB，所以我们可以看到这个大小，但是从输出来看，我们创建的LVM卷为15 GB，而且我们看到只消耗了大约1.2 GB，即使我们有四个大小为1.4
    GB的文件。
- en: The percentage is also very clear. We've saved 75% of the space (three files
    out of four are exact copies). If we make an additional copy, we will see that
    the percentage goes to 80% (1 out of 5 copies).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 百分比也非常清楚。我们节省了75%的空间（四个文件中有三个是完全相同的）。如果我们再复制一份，我们会看到百分比变为80%（5份复制中有1份）。
- en: 'Let''s check out one of the other approaches, by creating an empty file (filled
    with zeros):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一种方法，通过创建一个空文件（填充为零）：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As we can see, we were able to write 9.4 GB before the disk completely filled,
    but let''s check the `vdo` stats again with `vdostats --human-readable` as seen
    in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，磁盘完全填满之前，我们能够写入9.4 GB，但让我们再次使用`vdostats --human-readable`检查`vdo`统计信息，如下截图所示：
- en: '![Figure 14.8 – Checking the vdostats output'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.8 - 检查vdostats输出'
- en: '](img/B16799_14_008.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_008.jpg)'
- en: Figure 14.8 – Checking the vdostats output
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 - 检查vdostats输出
- en: As we can see, we still have 14.8 GB available and we've increased the disk
    space saved from 80% to 92%, because this big file is empty.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们仍然有14.8GB可用，并且我们已经将磁盘空间从80%增加到92%，因为这个大文件是空的。
- en: Wait – how, if we're using deduplication and compression, have we filled the
    volume if 92% of it has been saved?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 等等 - 如果我们使用去重和压缩，为什么我们填满了92%的卷呢？
- en: As we did not indicate the logical size of the VDO volume, it set by default
    a 1:1 ratio with the underlying device. This is the safest approach, but we're
    not taking real advantage of the compression and deduplication beyond performance.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有指定VDO卷的逻辑大小，默认情况下它与底层设备的比例为1:1。这是最安全的方法，但我们没有真正利用压缩和去重的性能。
- en: 'To make the most of the optimizations, we can create a bigger logical drive
    on top of the volume we have. For example, if after a long period of time we''re
    pretty sure that the disk optimizations might be similar, we can grow the logical
    size with the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用优化，我们可以在现有卷的基础上创建一个更大的逻辑驱动器。例如，如果经过长时间后我们相当确定磁盘优化可能是相似的，我们可以使用以下命令扩展逻辑大小：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will, of course, not increase the available size, as we defined a PV with
    a volume group and a logical volume on top. So, we will also need to extend it
    by executing these commands:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这不会增加可用的大小，因为我们定义了一个PV与卷组和顶部的逻辑卷。因此，我们还需要通过执行以下命令来扩展它：
- en: '`pvresize /dev/mapper/myvdo`'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pvresize /dev/mapper/myvdo`'
- en: '`lvresize –L +14G /dev/myvdo/myvol`'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lvresize –L +14G /dev/myvdo/myvol`'
- en: '`xfs_growfs /mnt`'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`xfs_growfs /mnt`'
- en: With this, we have extended the physical volume, increased the size of the logical
    volume, and extended the filesystem, so the space is now available to be used.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们扩展了物理卷，增加了逻辑卷的大小，并扩展了文件系统，因此现在可以使用这些空间。
- en: 'If we now execute `df|grep vdo`, we will see something like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在执行`df|grep vdo`，我们会看到类似这样的内容：
- en: '![Figure 14.9 – Disk space availability after resizing the volume'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.9 - 调整卷大小后的磁盘空间可用性'
- en: '](img/B16799_14_009.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16799_14_009.jpg)'
- en: Figure 14.9 – Disk space availability after resizing the volume
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9 - 调整卷大小后的磁盘空间可用性
- en: From this point on, we must be extremely careful, as our real usage of disk
    space might not be as optimized in terms of possible compression as it was before,
    resulting in failures in writes. It is then required to monitor available disk
    space as well as VDO status to ensure that we're not attempting to use more space
    than is available, for example, if the files stored can't be compressed or deduplicated
    at the same ratio.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，我们必须非常小心，因为我们对磁盘空间的实际使用可能不像以前那样在可能的压缩方面进行了优化，导致写入失败。因此，需要监视可用的磁盘空间以及VDO状态，以确保我们没有尝试使用比可用空间更多的空间，例如，如果存储的文件无法以相同的比例进行压缩或去重。
- en: Important note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It's tempting to set a really big logical volume out of our real physical disk
    space, but we should plan ahead and think about avoiding future problems, such
    as the likelihood of compression ratios not being as high as our optimism. Adequately
    profiling the actual data being stored and the typical compression ratios for
    it can give us a better idea of what is a safe approach to be used while we continue
    to actively monitor disk usage evolution, both for the logical volume and for
    the physical one.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 诱人的是，我们可以从真实的物理磁盘空间中设置一个非常大的逻辑卷，但我们应该提前计划并考虑避免未来可能出现的问题，比如压缩比可能不像我们的乐观主义那样高的可能性。充分地对存储的实际数据和其典型的压缩比进行分析可以让我们更好地了解在继续积极监视逻辑卷和物理卷的磁盘使用情况演变时使用的安全方法。
- en: Long ago, when disk space was really expensive (and hard drives were 80 MB in
    total), it became very popular to use tools that allowed an *increase* in disk
    space by using a transparent layer of compression that could make some estimations
    and report bigger space; but in reality, we know that content such as images and
    movies don't compress as well as other document formats such as text files. Some
    document formats, such as the ones used by LibreOffice, are already compressed
    files, so no extra compression benefits are gained.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，当磁盘空间非常昂贵（硬盘总共只有80MB）时，使用工具来通过透明的压缩层增加磁盘空间变得非常流行，这些工具可以通过一些估算和报告更大的空间来实现*增加*磁盘空间；但实际上，我们知道像图片和电影这样的内容并不像文本文件这样的其他文档格式那样容易压缩。一些文档格式，比如LibreOffice使用的格式，已经是压缩文件，因此不会获得额外的压缩好处。
- en: But this changes when we speak about VMs, where the base for each one is more
    or less equal (based on company policies and standards) and are deployed via cloning
    disk images and later performing small customization, but in essence, sharing
    most of the disk contents.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当我们谈论虚拟机时，情况就不同了，每个虚拟机的基础更多或更少是相等的（基于公司政策和标准），并且是通过克隆磁盘映像部署的，然后进行一些小的定制，但本质上，大部分磁盘内容是共享的。
- en: Tip
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In general, bear in mind that optimizations really just mean trade-offs. In
    the case of tuned profiles, you're adjusting throughput for latency, and in our
    case, you're trading CPU and memory resources for disk availability. The only
    way to tell whether something's a worthwhile trade-off is to implement it and
    see how it performs, look at the benefits gained, and then continue to monitor
    performance over time.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，要记住优化实际上只是一种权衡。在调整配置文件的情况下，您是在调整吞吐量以换取延迟，而在我们的情况下，您是在交换CPU和内存资源以换取磁盘可用性。判断某种东西是否值得权衡的唯一方法是实施它并查看其性能，看看获得了什么好处，然后继续随着时间的推移监视性能。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about VDO and Stratis. We've looked at simple
    ways to manage storage, how to save disk space transparently, and how to gain
    some throughput in the process.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了VDO和Stratis。我们看了一些简单的管理存储的方法，如如何透明地节省磁盘空间以及如何在过程中获得一些吞吐量。
- en: With Stratis, we have created a pool with two disks and assigned it to a mountpoint.
    It takes fewer steps than doing so with LVM, but on the other hand, we have less
    control over what we are doing. In any case, we learned how to use this preview
    technology in RHEL 8.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Stratis，我们创建了一个具有两个磁盘的池，并将其分配给一个挂载点。这比使用LVM要简单一些，但另一方面，我们对我们所做的事情的控制更少。无论如何，我们学会了如何在RHEL
    8中使用这个预览技术。
- en: With VDO, we used the volume we created to define an LVM PV and, on top of it,
    a volume group and a logical volume that we've formatted using the knowledge gained
    in previous chapters to store a VM disk image several times, to simulate a scenario
    where several VMs are started from the same base.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用VDO，我们使用创建的卷来定义一个LVM PV，并在其上创建了一个卷组和一个逻辑卷，我们使用在之前章节中获得的知识来格式化它，以存储多个VM磁盘映像，模拟从同一基础启动多个VM的场景。
- en: We also learned how to check the VDO optimizations and the amount of disk saved.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学会了如何检查VDO的优化和节省的磁盘空间量。
- en: Now, we're ready to use Stratis instead of LVM to group and distribute storage
    (though not for production). We can also implement VDO for our servers to start
    optimizing disk usage.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用Stratis而不是LVM来组合和分配存储（尽管不用于生产）。我们还可以为我们的服务器实施VDO来开始优化磁盘使用。
- en: In the next chapter, we will learn about the boot process.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于引导过程。
