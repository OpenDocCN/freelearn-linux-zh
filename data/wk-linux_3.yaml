- en: Chapter 3. Vim kung fu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 Vim功夫
- en: Vim's default configuration is usually pretty average. In order to better use
    Vim's powers, we will unleash its full potential through the help of its config
    files. Then, we will learn to explore some keyboard shortcuts that will help us
    speed up our workflow. We will also look at some commonly used plugins that make
    Vim even better. We will see how Vim can come in handy with its option of encrypting
    files for storing your passwords. The chapters will end by showing how we can
    automate Vim and configure a work environment easily.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Vim的默认配置通常相当一般。为了更好地使用Vim的功能，我们将通过其配置文件发挥其全部潜力。然后，我们将学习一些键盘快捷键，帮助我们加快工作流程。我们还将介绍一些常用的插件，使Vim变得更好用。我们将看到Vim如何通过加密文件来存储密码。每章结束时，将展示如何自动化Vim并轻松配置工作环境。
- en: 'In this chapter, we will be covering the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Working with Vim
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vim工作
- en: Exploring Plugin steroids for Vim
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Vim的插件功能
- en: Using the Vim password manager to store passwords
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vim密码管理器存储密码
- en: Automating Vim configuration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化Vim配置
- en: When it comes to being productive in the terminal, one important aspect is to
    never leave the terminal! And when getting stuff done, a lot of the time we find
    ourselves having to edit files and opening an external (GUI) editor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中提高生产力时，一个重要的方面是永远不要离开终端！当完成任务时，我们经常需要编辑文件并打开一个外部（GUI）编辑器。
- en: Bad move!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 走错了！
- en: To double our productivity, we need to leave those days behind and get the job
    done right there, in the terminal, without opening full-fledged IDEs just to edit
    one simple line of text. Now, there is a lot of debate going on about which is
    the best text editor for your terminal, and each one has its pros and cons. We
    recommend Vim, an editor which is ultra-configurable and, once mastered, can even
    outmatch an IDE.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高我们的生产力，我们需要抛弃那些过去的日子，在终端中完成工作，而不是打开完整的IDE来编辑一行简单的文本。现在，关于哪个是最好的终端文本编辑器的争论很多，每个编辑器都有其优缺点。我们推荐Vim，这是一个超级可配置的编辑器，一旦掌握，甚至可以胜过一个IDE。
- en: The first thing we need to do in order to kickstart our Vim productivity is
    to have a well configured `vimrc` file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动我们的Vim生产力，我们首先需要一个配置良好的`vimrc`文件。
- en: Supercharging Vim
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化Vim
- en: 'Let''s start by opening a new hidden file called `.vimrc` in our `home` folder
    and pasting a few lines:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在我们的`home`文件夹中打开一个名为`.vimrc`的新隐藏文件，并粘贴几行代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Supercharging Vim](img/image_03_001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Supercharging Vim](img/image_03_001.jpg)'
- en: Now let's close and reopen the file, so that we can see the configuration take
    effect. Let's go into a little more detail regarding some of the options.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关闭并重新打开文件，以便我们可以看到配置生效。让我们更详细地了解一些选项。
- en: 'First of all, as you''ve probably guessed, the lines starting with `"` are
    comments, so they can be ignored. Lines 5, 6, and 7 tell `vim` to always use spaces
    instead of tabs and to set the tab size to 4 spaces. Lines 10 to 12 tell `vim`
    to always open a file and set the cursor in the same position as the last time
    the file was open:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，正如你可能已经猜到的，以`"`开头的行是注释，可以忽略。第5、6和7行告诉`vim`始终使用空格而不是制表符，并将制表符大小设置为4个空格。第10到12行告诉`vim`始终打开一个文件，并将光标设置为上次打开文件时的位置：
- en: '`syntax on`: This enables syntax highlighting, so it is easier to read code'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syntax on`：这个命令启用语法高亮，使得代码更容易阅读'
- en: '`set nopaste`: This sets `nopaste` mode, which means you can paste code without
    having Vim try to guess how to format it'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set nopaste`：这个命令设置为`nopaste`模式，这意味着你可以粘贴代码而不让Vim尝试猜测如何格式化它'
- en: '`set number`: This tells Vim to always show the line numbers'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set number`：这告诉Vim始终显示行号'
- en: '`set undolevels=1000`: This tells Vim to remember the last 1000 changes we
    made to the file, so that we can easily undo and redo'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set undolevels=1000`：这告诉Vim记住我们对文件所做的最后1000次更改，以便我们可以轻松地撤销和重做'
- en: Now, most of these features can be easily turned on or off. Say, for example,
    we want to copy, paste some lines from a file opened in Vim to another file. With
    this configuration, we are also going to paste the line number. What can be done
    is to quickly switch off the line number by typing `:set nonumber`, or, if the
    syntax is annoying, we can easily switch it off by running `syntax off`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，大多数这些功能可以很容易地打开或关闭。例如，假设我们想要从在Vim中打开的文件中复制、粘贴几行到另一个文件中。使用这个配置，我们也会粘贴行号。可以通过输入`:set
    nonumber`快速关闭行号，或者如果语法很烦人，可以通过运行`syntax off`轻松关闭它。
- en: 'Another common feature is the status line, which can be configured by pasting
    these options:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的功能是状态行，可以通过粘贴以下选项进行配置：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Close the file and open it again. Now we can see at the bottom of the page a
    status bar with extra information. This is also ultra-configurable, so we can
    put a lot of different stuff inside. This particular status bar contains the name
    of the file, the current directory, the line and column numbers and also the paste
    mode (on or off). To set it to on, we use `:set paste` and the changes will be
    showed in the status bar.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文件并重新打开。现在我们可以在页面底部看到一个带有额外信息的状态栏。这个状态栏也是可以高度配置的，我们可以在里面放很多不同的东西。这个特定的状态栏包含了文件名、当前目录、行号和列号，还有粘贴模式（开启或关闭）。要将粘贴模式设置为开启，我们使用`:set
    paste`命令，状态栏上会显示出相应的更改。
- en: 'Vim also has the option of changing the color scheme. To do this, go to /`usr/share/vim/vim74/colors`
    and choose a color scheme from there:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Vim还有更改配色方案的选项。要做到这一点，进入`/usr/share/vim/vim74/colors`目录，从中选择一个配色方案：
- en: '![Supercharging Vim](img/image_03_002.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Supercharging Vim](img/image_03_002.jpg)'
- en: Let's choose desert!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择desert！
- en: Color scheme desert
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配色方案desert
- en: Close and reopen the file; you will see it's not that different from the previous
    color theme. If we want a more radical one, we can set the color scheme to blue,
    which will drastically change the way Vim looks. But during the rest of this course,
    we will stick to **desert**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭并重新打开文件，你会发现它与之前的配色主题并没有太大的不同。如果我们想要一个更激进的配色方案，我们可以将配色方案设置为蓝色，这将大大改变Vim的外观。但在本课程的其余部分，我们将坚持使用**desert**。
- en: 'Vim can also be supercharged with the help of external tools. In the world
    of programming, we often find ourselves editing JSON files and that can be a very
    difficult task if the JSON is not indented. There is a Python module that we can
    use to automatically indent JSON files and Vim can be configured to use it internally.
    All we need to do is to open the configuration file and paste the following line:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Vim还可以通过外部工具进行超级增强。在编程世界中，我们经常发现自己在编辑JSON文件，如果JSON没有缩进，这可能是一项非常困难的任务。有一个Python模块可以用来自动缩进JSON文件，Vim可以配置为在内部使用它。我们只需要打开配置文件并粘贴以下行：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Essentially this is telling Vim that, when in visual mode, if we press *J*,
    it should call Python with the selected text. Let's manually write a `json` string,
    go to visual mode by pressing *V*, select the text using our arrows, and hit *J*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这告诉Vim，当处于可视模式时，如果我们按下*J*，它应该调用Python并使用选定的文本。让我们手动编写一个`json`字符串，通过按下*V*进入可视模式，使用箭头选择文本，然后按下*J*。
- en: 'And, with no extra packages, we added a JSON formatting shortcut:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，不需要额外的软件包，我们添加了一个JSON格式化的快捷方式：
- en: '![Color scheme desert](img/image_03_003.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![配色方案desert](img/image_03_003.jpg)'
- en: 'We can do the same thing for `xml` files, but first we need to install a tool
    for working with them:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对`xml`文件执行相同的操作，但首先我们需要安装一个用于处理它们的工具：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Color scheme desert](img/image_03_004.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![配色方案desert](img/image_03_004.jpg)'
- en: 'To install the XML utility package, we must add the following line to our configuration
    file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装XML实用程序包，我们必须将以下行添加到配置文件中：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This maps the *L* key when in visual mode to `xmllint`. Let's write a HTML snippet,
    which is actually a valid `xml` file, hit `V` for visual mode, select the text,
    and press *L*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当处于可视模式时，将*L*键映射为`xmllint`。让我们编写一个HTML片段，实际上是一个有效的`xml`文件，按下`V`进入可视模式，选择文本，然后按下*L*。
- en: This type of extension (and also spell checkers, linters, dictionaries, and
    much more) can be brought to Vim and be instantly available to use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的扩展（以及拼写检查器、语法检查器、字典等等）可以带到Vim中，并立即可用。
- en: A well configured `vim` file can spare you a lot of time in the command line.
    Although it might take some time in the beginning to get things set up and to
    find the configuration that is right for you, this investment can pay off bigtime
    in the future, as time passes and we spend more and more time in Vim. A lot of
    times we don't even have the luxury of opening a GUI editor, like when working
    remotely through an `ssh` session. Believe it or not, command line editors are
    life savers and productivity is hard to achieve without them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个配置良好的`vim`文件可以节省您在命令行中的大量时间。虽然在开始时可能需要一些时间来设置和找到适合您的配置，但随着时间的推移，这种投资将在未来产生巨大的回报，因为我们在Vim中花费的时间越来越多。很多时候，我们甚至没有打开GUI编辑器的奢侈，比如在通过`ssh`会话远程工作时。信不信由你，命令行编辑器是救命稻草，没有它们很难实现高效的工作。
- en: Keyboard kung fu
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘功夫
- en: Now that we have Vim all set up, it's time to learn some more command line shortcuts.
    The first thing we will be looking at is indentation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了Vim，是时候学习一些更多的命令行快捷方式了。我们将首先看一下缩进。
- en: 'Indentation can be done in Vim by going into visual mode and typing *V* for
    selecting portions of text or *V* for selecting full lines, followed by *>* or
    *<* to indent right or left. Afterwards press `.` to repeat the last operation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vim中可以通过进入可视模式并键入*V*选择文本的部分或键入*V*选择整行，然后键入*>*或*<*进行缩进。然后按下`.`重复上次的操作：
- en: '![Keyboard kung fu](img/image_03_005.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![键盘功夫](img/image_03_005.jpg)'
- en: Any operation can be undone by hitting `u` and can then be redone by hitting
    *Ctrl* + *R* (as in undo and redo). This is the equivalent of *Ctrl* + *Z* and
    *Ctrl* + *Shift* + *Z* in most popular editors.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下`u`可以撤消任何操作，然后通过按下*Ctrl* + *R*（即撤消和重做）可以重做。这相当于大多数流行编辑器中的*Ctrl* + *Z*和*Ctrl*
    + *Shift* + *Z*。
- en: 'When in visual mode, we have the option of changing the case of letters by
    hitting *U* to make all text upper case, *u* for lower case and *~* to reverse
    current case:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视模式下，我们可以通过按下*U*将所有文本转换为大写，按下*u*将所有文本转换为小写，按下*~*来反转当前大小写：
- en: '![Keyboard kung fu](img/image_03_006.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![键盘功夫](img/image_03_006.jpg)'
- en: 'Other handy shortcuts are:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其他方便的快捷方式包括：
- en: '`G`: Go to end of file'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`G`：转到文件末尾'
- en: '`gg`: Go to start of file'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gg`：转到文件开头'
- en: '`Select all`: This is not really a shortcut, but a combination of commands:
    `gg V G`, as in go to start of file, select full line, and move to the end.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`全选`：这实际上不是一个快捷方式，而是一组命令的组合：`gg V G`，即转到文件开头，选择整行，然后移动到末尾。'
- en: 'Vim also has a handy shortcut for opening man pages for the word under the
    cursor. Just hit K and a man page will show up for that specific word (if there
    is one, that is):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Vim还有一个方便的快捷方式，可以打开光标下的单词的man页。只需按下K，就会显示该特定单词的man页（如果有的话）：
- en: '![Keyboard kung fu](img/image_03_007.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![键盘功夫](img/image_03_007.jpg)'
- en: Finding text in Vim is as easy as hitting */*. Just type */* *+* the text to
    find, and hit *Enter* to start searching. Vim will go to the first occurrence
    of that text. Hit `n` for next occurrence, *N* for previous occurrence.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vim中查找文本就像按下`/`一样简单。只需输入`/*`加上要查找的文本，然后按下*Enter*开始搜索。Vim将转到该文本的第一个出现位置。按下`n`查找下一个出现位置，*N*查找上一个出现位置。
- en: 'Our favorite editor has a powerful find and replace feature, similar to the
    `sed` command. Let''s say we want to replace all occurrences of the string `CWD`
    with the string `DIR`. For this, just type:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最喜欢的编辑器具有强大的查找和替换功能，类似于`sed`命令。假设我们想要将所有出现的字符串`CWD`替换为字符串`DIR`。只需输入：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Keyboard kung fu](img/image_03_008.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![键盘功夫](img/image_03_008.jpg)'
- en: 'Let''s do another common example that often comes up in programming: commenting
    lines of code. Let''s say that we want to comment out lines 10 to 20 in a shell
    script. To do this, type:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一个常见的例子，这在编程中经常出现：注释代码行。假设我们想要在shell脚本中注释掉第10到20行。要做到这一点，输入：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Keyboard kung fu](img/image_03_009.jpg)![Keyboard kung fu](img/image_03_010.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![键盘功夫](img/image_03_009.jpg)![键盘功夫](img/image_03_010.jpg)'
- en: 'This means substitute the beginning of the line with # and space. For deleting
    lines of text, type:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着用#和空格替换行的开头。要删除文本行，请输入：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will delete everything from line 30 till the end.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除从第30行到末尾的所有内容。
- en: More information about regular expressions can be found in the chapters. Also
    check out the parts on `sed` for more text manipulation examples. These commands
    are some of the longest in Vim and often we get them wrong. To edit the command
    we just wrote and run it again, we can open the command history by hitting *q:*,
    navigate to the line containing the command to edit, press Insert, update the
    line, and press *Esc* and *Enter* to run the command. It's as simple as that!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有关正则表达式的更多信息可以在各章节中找到。还可以查看关于`sed`的部分，以获取更多的文本操作示例。这些命令是Vim中最长的命令之一，我们经常会弄错。要编辑我们刚刚写的命令并再次运行它，我们可以通过按下*q:*打开命令历史记录，然后导航到包含要编辑的命令的行，按下Insert键，更新该行，然后按下*Esc*和*Enter*运行命令。就是这么简单！
- en: '![Keyboard kung fu](img/image_03_011.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: ！[键盘功夫](img/image_03_011.jpg)
- en: 'Another operation that is often useful is sorting. Let''s create a file with
    unsorted lines of text from the classic lorem ipsum text:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个经常有用的操作是排序。让我们创建一个包含未排序文本行的文件，使用经典的lorem ipsum文本：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Keyboard kung fu](img/image_03_012.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: ！[键盘功夫](img/image_03_012.jpg)
- en: Open `sort.txt` and `run :sort`. We see that the lines are all sorted alphabetically.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`sort.txt`并运行`:sort`。我们可以看到行都按字母顺序排序了。
- en: '![Keyboard kung fu](img/image_03_013.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: ！[键盘功夫](img/image_03_013.jpg)
- en: 'Now let''s move forward to window management. Vim has the option to split the
    screen for editing files in parallel. Just write `:split` for horizontal split,
    and `:vsplit` for vertical split:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续讲解窗口管理。Vim有将屏幕分割为并行编辑文件的选项。只需输入`:split`进行水平分割，输入`:vsplit`进行垂直分割：
- en: '![Keyboard kung fu](img/image_03_014.jpg)![Keyboard kung fu](img/image_03_015.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: ！[键盘功夫](img/image_03_014.jpg)！[键盘功夫](img/image_03_015.jpg)
- en: When Vim splits the screen, it opens the same file in the other pane; to open
    another file just hit `:e`. The good thing here is that we have autocomplete,
    so we can just hit *Tab* and Vim will start writing filenames for us. If we don't
    know what files we want to choose, we can just run any arbitrary shell command
    directly from Vim and come back once we've finished. For example, when we type
    `:!ls,` the shell opens, shows us the output of the command, and waits until we
    hit *Enter* to come back to the file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当Vim分割屏幕时，它会在另一个窗格中打开相同的文件；要打开另一个文件，只需输入`:e`。好处在于我们有自动补全功能，所以我们只需按下*Tab*，Vim就会为我们开始写文件名。如果我们不知道要选择哪些文件，我们可以直接从Vim中运行任意的shell命令，完成后再返回。例如，当我们输入`:!ls`时，shell会打开，显示命令的输出，并等待我们按下*Enter*键返回到文件中。
- en: When in split mode, press *Ctrl* + *W* to switch between windows. To close a
    window, press `:q`. If you want to save a file under a different name (think of
    the `save as` command from other editors), just hit `:w` followed by the new file
    name, say `mycopy.txt`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在分割模式下，按下*Ctrl* + *W*可以在窗口之间切换。要关闭窗口，按下`:q`。如果要将文件另存为不同的名称（类似于其他编辑器的“另存为”命令），只需按下`:w`，然后输入新文件名，比如`mycopy.txt`。
- en: 'Vim also has the option of opening multiple files at once; just specify a list
    of files after the `vim` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Vim还可以同时打开多个文件；只需在`vim`命令后指定文件列表：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After the files are open, use `:bn` to move to the next file. To close all the
    files, hit `:qa`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 文件打开后，使用`:bn`移动到下一个文件。要关闭所有文件，按下`:qa`。
- en: 'Vim also has an built in explorer. Just open Vim and hit `:Explore`. After
    this, we can navigate through the directory layout and we can open new files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Vim还有一个内置的资源管理器。只需打开Vim并输入`:Explore`即可。之后，我们可以浏览目录结构并打开新文件：
- en: '![Keyboard kung fu](img/image_03_016.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: ！[键盘功夫](img/image_03_016.jpg)
- en: It also has a different option. Let's open a file, delete one of the lines,
    and save it under a new name. Exit and open the two files with `vimdiff`. Now
    we can see the differences between them visually. This applies to all sorts of
    changes and is way better than the plain old diff command output.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有另一个选项。让我们打开一个文件，删除其中一行，并将其保存为新名称。退出并使用`vimdiff`打开这两个文件。现在我们可以直观地看到它们之间的差异。这适用于各种更改，比起普通的diff命令输出要好得多。
- en: Keyboard shortcuts really make a difference and open a whole new world of possibilities
    when using Vim. It's kind of hard to remember in the beginning, but once you start
    using them, it will be as simple as clicking a button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘快捷键确实让使用Vim时有很大的不同，并开启了一个全新的可能性世界。一开始可能有点难记住，但一旦开始使用，就会像点击一个按钮一样简单。
- en: Plugin steroids for Vim
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vim的插件增强
- en: 'In this section, we will be looking at how we can add external plugins to Vim.
    Vim has its own programming language for writing plugins, which we saw a glimpse
    of when writing the `vimrc` file. Luckily, we won''t have to learn all of that
    because most of the stuff we can think of already has a plugin out there. To manage
    plugins, let''s install the plugin manager pathogen. Open: [https://github.com/tpope/vim-pathogen](https://github.com/tpope/vim-pathogen).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何向Vim添加外部插件。Vim有自己的编程语言用于编写插件，我们在编写`vimrc`文件时已经看到了一瞥。幸运的是，我们不必学习所有这些，因为我们可以想到的大部分东西都已经有插件了。为了管理插件，让我们安装插件管理器pathogen。打开：[https://github.com/tpope/vim-pathogen](https://github.com/tpope/vim-pathogen)。
- en: 'Follow the installation instructions. As you can see, it''s a one-line command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 按照安装说明进行操作。如您所见，这只是一个一行命令：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And after it finishes, add pathogen to your `.vimrc`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，在`.vimrc`中添加pathogen：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Most IDEs show a tree layout of the folder structure, in parallel with the open
    files. Vim can do this also, and the simplest way to achieve this is by installing
    the plugin called **NERDtree**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数集成开发环境都会显示文件夹结构的树形布局，与打开的文件并行显示。Vim也可以做到这一点，最简单的方法是安装名为**NERDtree**的插件。
- en: 'Open: [https://github.com/scrooloose/nerdtree](https://github.com/scrooloose/nerdtree),
    and follow the instructions for installing it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打开：[https://github.com/scrooloose/nerdtree](https://github.com/scrooloose/nerdtree)，并按照安装说明进行操作：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we should be all set. Let's open a file and type `:NERDtree`. We see the
    tree-like structure of our current folder here, where we can browse and open new
    files. If we want Vim to replace our IDE, this is certainly a mandatory plugin!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该准备好了。让我们打开一个文件，输入`:NERDtree`。我们可以在这里看到当前文件夹的树状结构，可以浏览和打开新文件。如果我们想要用Vim替代我们的IDE，这绝对是一个必备插件！
- en: '![Plugin steroids for Vim](img/image_03_017.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Vim插件类固醇](img/image_03_017.jpg)'
- en: 'Another awesome plugin that comes in really handy is called **Snipmate** and
    is used for writing code snippets. To install it, go to this link and follow the
    instructions: [https://github.com/garbas/vim-snipmate](https://github.com/garbas/vim-snipmate).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常方便的插件是称为**Snipmate**的插件，用于编写代码片段。要安装它，请访问此链接并按照说明进行操作：[https://github.com/garbas/vim-snipmate](https://github.com/garbas/vim-snipmate)。
- en: '![Plugin steroids for Vim](img/image_03_018.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Vim插件类固醇](img/image_03_018.jpg)'
- en: 'As we can see, before installing `snipmate`, there is another set of plugins
    that needs to be installed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在安装`snipmate`之前，还需要安装另一组插件：
- en: '`git clone https://github.com/tomtom/tlib_vim.git`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone https://github.com/tomtom/tlib_vim.git`'
- en: '`git clone https://github.com/MarcWeber/vim-addon-mw-utils.git`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone https://github.com/MarcWeber/vim-addon-mw-utils.git`'
- en: '`git clone https://github.com/garbas/vim-snipmate.git`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone https://github.com/garbas/vim-snipmate.git`'
- en: '`git clone https://github.com/honza/vim-snippets.git`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone https://github.com/honza/vim-snippets.git`'
- en: If we take a look at the readme, we can see an example for C files, which has
    auto completion for the `for` keyword. Let's open a file with a `.c` extension,
    type `for` and hit *Tab*. We can see the autocomplete working.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看readme文件，可以看到一个C文件的示例，其中包含了“for”关键字的自动补全。让我们打开一个扩展名为.c的文件，输入“for”，然后按下*Tab*键。我们可以看到自动补全的效果。
- en: 'We have also installed the `vim-snipmate` package, which comes with lots of
    snippets for different languages. If we take a look at `~/.vim/bundle/vim-snippets/snippets/`,
    we can see lots of snippet files:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还安装了`vim-snipmate`包，其中包含了许多不同语言的代码片段。如果我们查看`~/.vim/bundle/vim-snippets/snippets/`，我们可以看到许多代码片段文件：
- en: '![Plugin steroids for Vim](img/image_03_019.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Vim插件类固醇](img/image_03_019.jpg)'
- en: 'Let''s check the `javascript` one:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`javascript`的代码片段：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Plugin steroids for Vim](img/image_03_020.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Vim插件类固醇](img/image_03_020.jpg)'
- en: Here we can see all the snippets available. Type `fun` and hit *Tab* for the
    function autocomplete. The snippets are preconfigured with variables so that you
    can write a function name and hit *Tab* to go to the next variable to complete.
    There is a snippet for writing if-else blocks, one for writing `console.log,`
    and lots of others for common code blocks. The best way to learn them is to go
    through the file and start using the snippets.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到所有可用的代码片段。输入`fun`并按下*Tab*键进行函数自动补全。代码片段预先配置了变量，这样您可以输入函数名并按下*Tab*键来进入下一个变量以完成。有一个用于编写if-else代码块的代码片段，一个用于编写`console.log`的代码片段，以及许多其他用于常见代码块的代码片段。学习它们的最佳方式是浏览文件并开始使用代码片段。
- en: There are lots of plugins out there. People have made all sorts of plugin packs
    that are guaranteed to put your Vim on steroids. One cool project is [http://vim.spf13.com/](http://vim.spf13.com/)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多插件可供选择。人们制作了各种插件包，保证能让您的Vim变得更强大。一个很酷的项目是[http://vim.spf13.com/](http://vim.spf13.com/)
- en: It's nicknamed the ultimate Vim plugin pack and it basically has plugins and
    keyboard shortcuts for everything. This is for more advanced users, so be sure
    to understand the basic concepts before jumping to plugin packs. Remember, the
    best way to learn is to install plugins manually and play with them one by one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 它被昵称为终极Vim插件包，基本上包含了所有插件和键盘快捷键。这是给更高级用户使用的，所以在使用插件包之前一定要理解基本概念。记住，学习的最佳方式是手动安装插件并逐个尝试它们。
- en: Vim password manager
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vim密码管理器
- en: 'Vim can also be used to safely store information, by encrypting text files
    with different `cryp` methods. To see the `cryp` method that Vim is currently
    using, type:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Vim还可以用于安全存储信息，通过使用不同的`cryp`方法对文本文件进行加密。要查看Vim当前使用的`cryp`方法，输入：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can see in our case it is `zip`, which is not actually a `crypto` method
    and does not offer much in terms of security. To see what different alternatives
    we have, we can type:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在我们的例子中是`zip`，它实际上不是一种`crypto`方法，安全性方面并不提供太多。要查看不同的替代方法，我们可以输入：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Vim password manager](img/image_03_021.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Vim密码管理器](img/image_03_021.jpg)'
- en: 'A page describing the different encryption methods comes up. We can choose
    from `zip`, `blowfish,` and `blowfish2`.The most secure and recommended one is,
    of course, `blowfish2`. To change the encryption method, type:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 出现了一个描述不同加密方法的页面。我们可以选择`zip`、`blowfish`和`blowfish2`。最安全和推荐的方法当然是`blowfish2`。要更改加密方法，输入：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This can be also added to `vimrc` so that it becomes the default encryption.
    Now we can safely encrypt files using Vim.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以添加到`vimrc`中，以便成为默认的加密方式。现在我们可以安全地使用Vim加密文件。
- en: A common scenario would be storing a passwords file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的场景是存储密码文件。
- en: Let's open up a new file named `passwords.txt`, add some dummy passwords inside,
    and save it. The next step is to encrypt the file with a password, and for this
    we type `:X`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开一个名为`passwords.txt`的新文件，里面添加一些虚拟密码，并保存。下一步是用密码加密文件，我们输入`:X`。
- en: Vim will prompt you for a password twice. If you exit without saving the file,
    the encryption will not be applied. Now, encrypt it again, save, and exit the
    file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Vim会提示您输入密码两次。如果您在不保存文件的情况下退出，加密将不会应用。现在，再次加密它，保存并退出文件。
- en: 'When we reopen it, Vim will ask for the same password. If we get this wrong,
    Vim will show some random characters that come from the failed decryption. Only
    if we type the correct password will we get the actual file content:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重新打开文件时，Vim会要求输入相同的密码。如果我们输入错误，Vim会显示一些来自解密失败的随机字符。只有输入正确的密码，我们才能得到实际的文件内容：
- en: '![Vim password manager](img/image_03_022.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Vim密码管理器](img/image_03_022.jpg)'
- en: 'Saving encrypted files with Vim, combined with backing up the file in places
    like a private `git` repository or a private Dropbox folder, can be an effective
    way of storing your passwords:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vim保存加密文件，结合在私有的`git`仓库或私有的Dropbox文件夹等地方备份文件，可以是一种有效的存储密码的方式：
- en: '![Vim password manager](img/image_03_023.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: Vim密码管理器
- en: It also has the benefit that it's sort of a unique method of storing passwords,
    compared to using online services that are pretty standard and might get compromised.
    This can also be referred to as *security throug* *h obscurity*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有一个好处，就是相对于使用相当标准且可能被破解的在线服务来说，它是一种存储密码的独特方法。这也可以称为*安全通过模糊性*。
- en: Instant configuration restoring
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即时配置恢复
- en: The configuration we have seen in this chapter might take some time to set up
    manually, but, once everything is configured, we can create a script that will
    restore the Vim configuration instantly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中看到的配置可能需要一些时间来手动设置，但是一旦一切都配置好了，我们可以创建一个脚本，可以立即恢复Vim配置。
- en: 'For this, we paste all the commands issued up to now into a bash script that
    can be run to bring Vim to the exact same configuration. All that is missing from
    this script is the `vimrc` file from the `home` folder, which we can also restore
    through a technique called heredocs. Just type cat, redirect the output to `vimrc`,
    and use heredoc as input, delimited by `eof`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将到目前为止发出的所有命令粘贴到一个bash脚本中，可以运行该脚本以将Vim配置还原到完全相同的状态。这个脚本缺少的只是`home`文件夹中的`vimrc`文件，我们也可以通过一个称为heredocs的技术来恢复它。只需键入cat，将输出重定向到`vimrc`，并使用heredoc作为输入，以`eof`为分隔符：
- en: '![Instant configuration restoring](img/image_03_025.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: 即时配置恢复
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using heredocs is a common technique for manipulating large chunks of text inside
    bash scripts. Basically it treats a section of code like a separate file (in our
    case everything after the cat and until the EOF). With this script, we can restore
    all the Vim configurations we have done and we can also run it on any computer
    we work on, so that we get our Vim set up in no time!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用heredocs是在bash脚本中操作大块文本的常用技术。基本上，它将代码部分视为一个单独的文件（在我们的例子中是cat之后直到EOF之前的所有内容）。通过这个脚本，我们可以恢复我们所做的所有Vim配置，并且可以在任何我们工作的计算机上运行它，这样我们就可以立即设置好我们的Vim！
- en: We hope you have enjoyed this material and see you in the chapter!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您喜欢这个材料，我们在下一章见！
