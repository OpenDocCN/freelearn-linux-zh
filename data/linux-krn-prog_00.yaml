- en: Preface
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 前言
- en: This book has been explicitly written with a view to helping you learn Linux
    kernel development in a practical, hands-on fashion, along with the necessary
    theoretical background to give you a well-rounded view of this vast and interesting
    topic area. It deliberately focuses on kernel development via the powerful **Loadable
    Kernel Module** (**LKM**) framework; the vast majority of kernel projects and
    products, which includes device driver development, are done in this manner.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书明确地旨在帮助你以实际、动手的方式学习Linux内核开发，同时提供必要的理论背景，使你对这个广阔而有趣的主题有一个全面的了解。它有意地专注于通过强大的**可加载内核模块**（**LKM**）框架进行内核开发；绝大多数的内核项目和产品，包括设备驱动程序开发，都是以这种方式完成的。
- en: The focus is kept on both working hands-on with, and understanding at a sufficiently
    deep level, the internals of the Linux OS. In these regards, we cover everything
    from building the Linux kernel from source through understanding and working with
    complex topics such as synchronization within the kernel.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 重点放在实际操作和对Linux操作系统内部的深入理解上。在这方面，我们涵盖了从源代码构建Linux内核到理解和处理内核中的同步等复杂主题的方方面面。
- en: To guide you on this exciting journey, we divide this book into three sections.
    The first section covers the basics – setting up a workspace required for kernel
    development, building the kernel from source, and writing your first kernel module.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指导你进行这激动人心的旅程，我们将这本书分为三个部分。第一部分涵盖了基础知识-设置内核开发所需的工作空间，从源代码构建内核，以及编写你的第一个内核模块。
- en: The next section, a key one, will help you understand important and essential
    kernel internals – the Linux kernel architecture, the task structure, and user
    and kernel-mode stacks. Memory management is a key and interesting topic – we
    devote three whole chapters to it (covering the internals to a sufficient extent,
    and importantly, how exactly to allocate any free kernel memory). The working
    and deeper details of CPU scheduling on Linux round off this section.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一部分，一个关键部分，将帮助你理解重要和必要的内核内部- Linux内核架构、任务结构以及用户和内核模式堆栈。内存管理是一个重要且有趣的主题-我们专门撰写了三整章来涵盖它（充分涵盖了内部内容，以及如何准确分配任何空闲内核内存）。Linux上的CPU调度的工作和更深入的细节结束了这一部分。
- en: The last section of the book deals with the more advanced topic of kernel synchronization
    – a necessity for professional design and code on the Linux kernel. We devote
    two whole chapters to covering key topics within this.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后一部分涉及更高级的内核同步主题-这是Linux内核专业设计和编码的必要内容。我们专门撰写了两整章来涵盖这些关键主题。
- en: The book uses the, at the time of writing, latest 5.4 **Long Term Support**
    (**LTS**) Linux kernel. It's a kernel that will be maintained (both bug and security
    fixes) from November 2019 right through December 2025! This is a key point, ensuring
    that this book's content remains current and valid for years to come!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了截至撰写时最新的5.4 **长期支持**（**LTS**）Linux内核。这是一个将从2019年11月一直维护（包括错误修复和安全修复）到2025年12月的内核！这是一个关键点，确保了本书的内容在未来多年仍然保持最新和有效！
- en: 'We very much believe in a hands-on approach: over 20 kernel modules (besides
    several user apps and shell scripts) on this book''s GitHub repository make the
    learning come alive, making it fun, interesting, and useful.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常相信实践：本书的GitHub仓库上有超过20个内核模块（以及几个用户应用程序和shell脚本），使学习变得生动、有趣和有用。
- en: We highly recommend you also make use of this book's companion guide, *Linux
    Kernel Programming (Part 2)*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议你也使用本书的配套指南*Linux Kernel Programming (Part 2)*。
- en: It's an excellent industry-aligned beginner's guide to writing `misc` character
    drivers, performing I/O on peripheral chip memory and handling hardware interrupts.
    You can get this book for free along with your copy, alternately you can also
    find this eBook in the GitHub repository at: [https://github.com/PacktPublishing/Linux-Kernel-Programming/tree/master/Linux-Kernel-Programming-(Part-2)](https://github.com/PacktPublishing/Linux-Kernel-Programming/tree/master/Linux-Kernel-Programming-(Part-2)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本与行业接轨的初学者指南，涵盖了编写`misc`字符驱动程序、在外围芯片内存上执行I/O以及处理硬件中断。你可以免费获取这本书，同时也可以在GitHub仓库中找到这本电子书：[https://github.com/PacktPublishing/Linux-Kernel-Programming/tree/master/Linux-Kernel-Programming-(Part-2)](https://github.com/PacktPublishing/Linux-Kernel-Programming/tree/master/Linux-Kernel-Programming-(Part-2))。
- en: We really hope you learn from and enjoy this book. Happy reading!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真诚地希望你能从这本书中学到东西并且享受阅读。祝阅读愉快！
- en: Who this book is for
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: This book is primarily for those of you beginning your journey in the vast arena
    of Linux kernel module development and, to some extent, Linux device driver development.
    It's also very much targeted at those of you who have already been working on
    Linux modules and/or drivers, who wish to gain a much deeper, well-structured
    understanding of Linux kernel architecture, memory management, and synchronization.
    This level of knowledge about the underlying OS, covered in a properly structured
    manner, will help you no end when you face difficult-to-debug real-world situations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书主要是为那些刚开始涉足Linux内核模块开发以及在一定程度上Linux设备驱动程序开发的人而写的。它也非常针对那些已经在Linux模块和/或驱动程序上工作的人，他们希望对Linux内核架构、内存管理和同步有更深入、结构良好的理解。这种对底层操作系统的了解，以适当的结构方式进行覆盖，将在面对难以调试的现实情况时帮助你无比。
- en: What this book covers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](ad75db43-a1a2-4f3f-92c7-a544f47baa23.xhtml), *Kernel Workspace
    Setup*, guides you on setting up a full-fledged Linux kernel development workspace
    (typically, as a fully virtualized guest system). You will learn how to install
    all required software packages on it, including a cross toolchain. You will also
    learn about several other open source projects that will be useful on your journey
    to becoming a professional kernel/driver developer. Once this chapter is done,
    you will be ready to build a Linux kernel as well as to start writing and testing
    kernel code (via the loadable kernel module framework). In our view, it''s very
    important for you to actually use this book in a hands-on fashion, trying out
    and experimenting with code. The best way to learn something is to do so empirically
    – not taking anyone''s word on anything at all, but by trying it out and experiencing
    it for yourself.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章，“内核工作空间设置”，指导您设置一个完整的Linux内核开发工作空间（通常作为一个完全虚拟化的客户系统）。您将学习如何在其中安装所有必需的软件包，包括交叉工具链。您还将了解其他几个开源项目，这些项目对您成为专业内核/驱动程序开发人员的旅程将会有用。完成本章后，您将准备好构建Linux内核，以及开始编写和测试内核代码（通过可加载内核模块框架）。在我们看来，您实际上使用这本书进行动手操作，尝试和实验代码非常重要。学习某件事情的最好方法是通过经验主义
    - 不是完全相信任何人的话，而是通过尝试和亲身体验来学习。
- en: '[Chapter 2](e0b89a37-18a3-424d-8983-58c4ac0725f6.xhtml), *Building the 5.x
    Linux Kernel from Source – Part 1*, is the first part of explaining how to build
    the modern Linux kernel from scratch with source code. In this part, you will
    be given necessary background information – the version nomenclature, the different
    source trees, the layout of the kernel source – on the kernel source tree. Next,
    you will be shown in detail how exactly to download a stable vanilla Linux kernel
    source tree onto the VM. We shall then learn a little regarding the layout of
    the kernel source code, getting, in effect, a "10,000-foot view" of the kernel
    code base. The actual work of extracting and configuring the Linux kernel then
    follows. Creating and using a custom menu entry for kernel configuration is also
    shown.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，“从源代码构建5.x Linux内核 - 第1部分”，是解释如何从头开始使用源代码构建现代Linux内核的第一部分。在这一部分，您将获得必要的背景信息
    - 版本命名、不同的源树、内核源代码的布局。接下来，您将详细了解如何将稳定的vanilla Linux内核源代码树下载到虚拟机上。然后，我们将学习一些关于内核源代码布局的知识，实际上是对内核代码库的“鸟瞰”。然后是提取和配置Linux内核的实际工作。还展示了创建和使用自定义菜单条目进行内核配置。
- en: '[Chapter 3](93e5c09d-6c80-47e7-91ab-d3f3f25d00e1.xhtml), *Building the 5.x
    Linux Kernel from Source – Part 2*, is the second part on performing kernel builds
    from source code. In this part, you will continue from the previous chapter, now
    actually building the kernel, installing kernel modules, understanding what exactly
    `initramfs` (`initrd`) is and how to generate it, as well as setting up the bootloader
    (for x86). Also, as a valuable add-on, this chapter then explains how to cross-compile
    the kernel for a typical embedded ARM target (using the popular Raspberry Pi as
    a target device). Several tips and tricks on kernel builds, and even kernel security
    (hardening), are mentioned as well.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“从源代码构建5.x Linux内核 - 第2部分”，是关于从源代码执行内核构建的第二部分。在这一部分，您将继续上一章的内容，现在实际上构建内核，安装内核模块，了解`initramfs`（`initrd`）的确切含义以及如何生成它，以及设置引导加载程序（对于x86）。此外，作为有价值的附加内容，本章还解释了如何为典型的嵌入式ARM目标（使用流行的树莓派作为目标设备）交叉编译内核。还提到了一些关于内核构建的技巧和窍门，甚至内核安全（加固）的内容。
- en: '[Chapter 4](1c494ebd-e7ec-4a78-8695-5b97bdc3d6be.xhtml),* Writing Your First
    Kernel Module – LKMs Part 1*, is the first of two parts that cover a fundamental
    aspect of Linux kernel development – the LKM framework, and how it is to be understood
    and used by the "module user," by you – the kernel module or device driver programmer.
    It covers the basics of the Linux kernel architecture and then, in great detail,
    every step involved in writing a simple "Hello, world" kernel module, compiling,
    inserting, checking, and removing it from the kernel space. We also cover kernel
    logging via the ubiquitous printk API in detail.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“编写您的第一个内核模块 - LKMs第1部分”，是涵盖Linux内核开发的一个基本方面的两个部分之一 - LKM框架，以及模块用户（您 - 内核模块或设备驱动程序程序员）如何理解和使用它。它涵盖了Linux内核架构的基础知识，然后详细介绍了编写一个简单的“Hello,
    world”内核模块的每个步骤，包括编译、插入、检查和从内核空间中删除。我们还详细介绍了通过普遍的printk API进行内核日志记录。
- en: '[Chapter 5](408b6f9d-42dc-4c59-ab3d-1074d595f9e2.xhtml), *Writing Your First
    Kernel Module – LKMs Part 2*, is the second part that covers the LKM framework.
    Here, we begin with something critical – learning how to use a "better" Makefile,
    which will help you generate more robust code (having several code-checking, correction,
    static analysis targets, and so on). We then show in detail the steps to successfully
    cross-compile a kernel module for an alternate architecture, how to emulate "library-like"
    code in the kernel (via both the "linking" and the module-stacking approaches),
    defining and using passing parameters to your kernel module. Additional topics
    include the auto-loading of modules at boot, important security guidelines, and
    some information on the kernel documentation and how to access it. Several example
    kernel modules make the learning more interesting.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“编写您的第一个内核模块 - LKMs第2部分”，是涵盖LKM框架的第二部分。在这里，我们首先要学习如何使用“更好”的Makefile，这将帮助您生成更健壮的代码（具有多个代码检查、纠正、静态分析目标等）。然后我们详细展示了成功交叉编译内核模块到另一个架构的步骤，以及如何在内核中模拟“类库”代码（通过“链接”和模块堆叠方法），定义和使用传递参数给内核模块。其他主题包括在启动时自动加载模块、重要的安全指南，以及有关内核文档的一些信息以及如何访问它。几个示例内核模块使学习更加有趣。
- en: '[Chapter 6](e13fb379-a77f-4ba5-9de6-d6707b0214e6.xhtml), *Kernel Internals
    Essentials – Processes and Threads, *delves into some essential kernel internals
    topics. We begin with what is meant by execution in process and interrupt contexts,
    and minimal but required coverage of the process user **virtual address space**
    (**VAS**) layout. This sets the stage for you; you''ll then learn about Linux
    kernel architecture in more depth, focusing on the organization of process/thread
    task structures and their corresponding stacks – user- and kernel-mode. We then
    show you more on the kernel task structure (a "root" data structure), how to practically
    glean information from it, and even iterate over various (task) lists. Several
    kernel modules make the topic come alive.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，*内核内部要点-进程和线程*，深入探讨了一些基本的内核内部主题。我们首先介绍了进程和中断上下文中执行的含义，以及进程用户**虚拟地址空间**（VAS）布局的最小但必需的覆盖范围。这为您铺平了道路；然后您将更深入地了解Linux内核架构，重点关注进程/线程任务结构及其相应的堆栈（用户模式和内核模式）。然后我们向您展示了更多关于内核任务结构（一个“根”数据结构），如何从中实际获取信息，甚至遍历各种（任务）列表。几个内核模块使这个主题更加生动。
- en: '[Chapter 7](06ee05b5-3e71-482d-93b8-235c27ce23bc.xhtml), *Memory Management
    Internals – Essentials, *a key chapter, delves into essential internals of the
    Linux memory management subsystem, to the level of detail required for the typical
    module author or driver developer. This coverage is thus necessarily more theoretical
    in nature; nevertheless, the knowledge gained here is crucial to you, the kernel
    developer, both for deep understanding and usage of appropriate kernel memory
    APIs as well as for performing meaningful debugging at the level of the kernel.
    We cover the VM split (and how it is on various actual architectures), gaining
    deep insight into the user VAS (our procmap utility will be an eye-opener), as
    well as the kernel segment (or kernel VAS). We then briefly delve into the security
    technique of memory layout randomization ([K]ASLR), and end this chapter with
    a discussion on physical memory organization within Linux.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，*内存管理内部要点-基础知识*，是一个关键章节，深入探讨了Linux内存管理子系统的基本内部结构，以满足典型模块作者或驱动程序开发人员所需的详细程度。因此，这种覆盖范围在本质上更加理论化；然而，在这里获得的知识对于您作为内核开发人员来说至关重要，无论是为了深入理解和使用适当的内核内存API，还是为了在内核层面进行有意义的调试。我们涵盖了VM分割（以及它在各种实际架构上的情况），深入了解用户VAS（我们的procmap实用程序将让您大开眼界），以及内核段（或内核VAS）。然后我们简要地探讨了内存布局随机化（[K]ASLR）的安全技术，并以讨论Linux内部的物理内存组织结束了本章。
- en: '[Chapter 8](e78245d1-5a99-4b9e-a98c-cb16b15f3bee.xhtml), *Kernel Memory Allocation
    for Module Authors Part 1, *gets our hands dirty with the kernel memory allocation
    (and obviously, deallocation) APIs. You will first learn about the two allocation
    "layers" within Linux – the slab allocator that''s layered above the kernel memory
    allocation "engine," and the page allocator (or BSA). We shall briefly learn about
    the underpinnings of the page allocator algorithm and its "freelist" data structure;
    this information is valuable when deciding which layer to use. Next, we dive straight
    into the hands-on work of learning about the usage of these key APIs. The ideas
    behind the slab allocator (or cache) and the primary kernel allocator APIs – the
    `kzalloc`/`kfree` – are covered. Importantly, the size limitations, downsides,
    and caveats when using these common APIs are covered in detail as well. Also,
    especially useful for driver authors, we cover the kernel''s modern resource-managed
    memory allocation APIs (the `devm_*()` routines).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章，*模块作者的内核内存分配第1部分*，让我们亲自动手使用内核内存分配（和显然的释放）API。您将首先了解Linux内部的两种分配“层”-位于内核内存分配“引擎”上方的slab分配器，以及页面分配器（或BSA）。我们将简要了解页面分配器算法的基础和其“空闲列表”数据结构；在决定使用哪一层时，这些信息是有价值的。接下来，我们直接投入到学习这些关键API的实际工作中。我们将涵盖slab分配器（或缓存）的背后思想以及主要的内核分配器API-`kzalloc`/`kfree`。重要的是，详细介绍了使用这些常见API时的大小限制、缺点和注意事项。此外，特别适用于驱动程序作者的是，我们涵盖了内核的现代资源管理内存分配API（`devm_*()`例程）。
- en: '[Chapter 9](dbb888a2-8145-4132-938c-1313a707b2f2.xhtml), *Kernel Memory Allocation
    for Module Authors Part 2*, goes further, in a logical fashion, from the previous
    chapter. Here, you will learn how to create custom slab caches (useful for high-frequency
    (de)allocations for, say, a custom driver), along with some help regarding debugging
    memory allocations at the slab layer. Next, you''ll understand and use the `vmalloc()`
    API (and friends). Very importantly, having covered many APIs for kernel memory
    (de)allocation, you will now learn how to pick and choose an appropriate API given
    the real-world situation you find yourself in. This chapter is rounded off with
    important coverage of the kernel''s **Out Of Memory** (**OOM**) "killer" framework.
    Understanding it will also lead to a much deeper understanding of how user space
    memory allocation really works, via the demand paging technique.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章，*模块作者的内核内存分配第2部分*，在逻辑上进一步发展了前一章。在这里，您将学习如何创建自定义slab缓存（对于高频（de）分配，例如自定义驱动程序非常有用），以及关于在slab层调试内存分配的一些帮助。接下来，您将了解并使用`vmalloc()`
    API（及其相关内容）。非常重要的是，在涵盖了许多内核内存（de）分配API之后，您现在将学习如何根据您所处的实际情况选择适当的API。本章以对内核的**内存不足**（OOM）“killer”框架的重要覆盖结束。了解它也将导致您对用户空间内存分配的工作原理有更深入的理解，通过需求分页技术。
- en: '[Chapter 10](5391e3c1-30ad-4c75-a106-301259064881.xhtml), *The CPU Scheduler
    - Part 1*, the first part of two chapters, covers a useful mix of theory and practice
    regarding CPU scheduling on the Linux OS. The minimal necessary theoretical background
    on the thread as the KSE and available kernel scheduling policies are topics initially
    covered. Next, sufficient kernel internal details on CPU scheduling are covered
    to have you understand how scheduling on the modern Linux OS works. Along the
    way, you will learn how to "visualize" PU scheduling with powerful tools such
    as perf; thread scheduling attributes (policy and real-time priority) are delved
    into as well.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章，“CPU调度器-第1部分”，是两章中的第一部分，涵盖了关于Linux操作系统上CPU调度的理论和实践的有用混合内容。首先介绍了关于线程作为KSE以及可用的内核调度策略的最低必要理论背景。接下来，介绍了足够的内核CPU调度的细节，以便让您了解现代Linux操作系统上的调度工作原理。在学习的过程中，您将学习如何使用强大的工具（如perf）“可视化”PU调度；还深入探讨了线程调度属性（策略和实时优先级）。
- en: '[Chapter 11](d6e5ebd3-1f04-40e8-a240-2607c58b1299.xhtml), *The CPU Scheduler
    – Part 2,* the second part on CPU scheduling, continues to cover the topic in
    more depth. Here, we cover further visualization tools for CPU scheduling (leveraging
    powerful software such as LTTng and the trace-cmd utility). Next, the CPU affinity
    mask and how to query/set it, controlling scheduling policy and priority on a
    per-thread basis – such a powerful feature! – are delved into. An overview of
    the meaning and importance of control groups (cgroups), along with an interesting
    example on CPU bandwidth allocation via cgroups v2 is seen. Can you run Linux
    as an RTOS? Indeed you can! The details on actually doing so are then shown. We
    round off this chapter with a discussion on (scheduling) latencies and how to
    measure them.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章，“CPU调度器-第2部分”，是关于CPU调度的第二部分，继续更深入地介绍了这个主题。在这里，我们介绍了更多用于CPU调度的可视化工具（利用强大的软件，如LTTng和trace-cmd实用程序）。接下来，深入探讨了CPU亲和性掩码以及如何查询/设置它，以及在每个线程基础上控制调度策略和优先级的功能。还概述了控制组（cgroups）的含义和重要性，以及通过cgroups
    v2进行CPU带宽分配的有趣示例。您可以将Linux作为RTOS运行吗？确实可以！然后展示了实际操作的详细信息。最后，我们讨论了（调度）延迟以及如何测量它们。
- en: '[Chapter 12](4a13cf52-b1b2-4536-93f4-4c7b3e9a862d.xhtml), *Kernel Synchronization
    – Part 1*, first covers the key concepts regarding critical sections, atomicity,
    what a lock conceptually achieves and, very importantly, the why of all this.
    We then cover concurrency concerns when working within the Linux kernel; this
    moves us naturally on to important locking guidelines, what deadlock means, and
    key approaches to preventing deadlock. Two of the most popular kernel locking
    technologies – the mutex lock and the spinlock – are then discussed in depth along
    with several (driver) code examples.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章，“内核同步-第1部分”，首先介绍了关于临界区、原子性、锁概念的关键概念，以及所有这些的重要性。然后我们介绍了在Linux内核中工作时的并发问题；这自然地引出了重要的锁定准则，死锁的含义，以及预防死锁的关键方法。然后深入讨论了两种最流行的内核锁技术——互斥锁和自旋锁——以及几个（驱动程序）代码示例。
- en: '[Chapter 13](4cdb6ffc-0afc-4031-a20e-1f1a0170a163.xhtml), *Kernel Synchronization
    – Part 2*, continues the journey on kernel synchronization. Here, you''ll learn
    about key locking optimizations – using lightweight atomic and (the more recent)
    refcount operators to safely operate on integers, RMW bit operators to safely
    perform bit ops, and the usage of the reader-writer spinlock over the regular
    one. Inherent risks, such as cache "false sharing" are discussed as well. An overview
    of lock-free programming techniques (with an emphasis on per-CPU variables and
    their usage, along with examples) is then covered. A critical topic – lock debugging
    techniques, including the usage of the kernel''s powerful "lockdep" lock validator,
    is then covered. The chapter is rounded off with a brief look at memory barriers
    (along with an example).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第13章，“内核同步-第2部分”，继续介绍内核同步的内容。在这里，您将了解关键的锁定优化——使用轻量级原子和（更近期的）引用计数运算符来安全地操作整数，使用RMW位运算符来安全地执行位操作，以及使用读者-写者自旋锁而不是常规自旋锁。还讨论了缓存“虚假共享”等固有风险。然后概述了无锁编程技术（重点是每CPU变量及其用法，并提供示例）。然后介绍了关键主题——锁调试技术，包括使用内核强大的“lockdep”锁验证器。最后简要介绍了内存屏障（并提供了一个示例）。
- en: To get the most out of this book
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了充分利用本书
- en: 'To get the most out of this book, we expect you to have knowledge and experience
    in the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本书，我们希望您具有以下知识和经验：
- en: Know your way around a Linux system, on the command line (the shell).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉Linux系统的命令行（shell）。
- en: The C programming language.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C编程语言。
- en: It's not mandatory but experience with Linux system programming concepts and
    technologies will greatly help.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这不是强制性的，但具有Linux系统编程概念和技术的经验将大大有助于。
- en: The details on hardware and software requirements, as well as their installation,
    are covered completely and in depth in [Chapter 1](ad75db43-a1a2-4f3f-92c7-a544f47baa23.xhtml), *Kernel
    Workspace Setup*. It's critical that you read it in detail and follow the instructions
    therein.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关硬件和软件要求以及其安装的详细信息在第1章，“内核工作区设置”中完整而深入地介绍。您必须详细阅读并遵循其中的说明。
- en: 'Also, we have tested all the code in this book (it has its own GitHub repository
    as well) on these platforms:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还在这些平台上测试了本书中的所有代码（它还有自己的GitHub存储库）：
- en: x86_64 Ubuntu 18.04 LTS guest OS (running on Oracle VirtualBox 6.1)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 Ubuntu 18.04 LTS客户操作系统（在Oracle VirtualBox 6.1上运行）
- en: x86_64 Ubuntu 20.04.1 LTS guest OS (running on Oracle VirtualBox 6.1)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 Ubuntu 20.04.1 LTS客户操作系统（在Oracle VirtualBox 6.1上运行）
- en: x86_64 Ubuntu 20.04.1 LTS native OS
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 Ubuntu 20.04.1 LTS本机操作系统
- en: ARM Raspberry Pi 3B+ (running both its "distro" kernel as well as our custom
    5.4 kernel); lightly tested
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARM Raspberry Pi 3B+（同时运行其“发行版”内核和我们的自定义5.4内核）；轻度测试
- en: x86_64 CentOS 8 guest OS (running on Oracle VirtualBox 6.1); lightly tested
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86_64 CentOS 8客户操作系统（在Oracle VirtualBox 6.1上运行）；轻度测试
- en: We assume that, when running Linux as a guest (VM), the host system is either
    Windows 10 or later (of course, even Windows 7 will work), or a recent Linux distribution
    (for example, Ubuntu or Fedora), or even macOS.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设在作为客户机（VM）运行Linux时，主机系统要么是Windows 10或更高版本（当然，甚至Windows 7也可以），要么是最新的Linux发行版（例如Ubuntu或Fedora），甚至是macOS。
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or, better, access the code via the GitHub repository (link
    available in the next section). Doing so will help you avoid any potential errors
    related to the copying and pasting of code.**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您使用本书的数字版本，我们建议您自己输入代码，或者更好的是通过GitHub存储库访问代码（链接在下一节中提供）。这样做将有助于避免与复制和粘贴代码相关的任何潜在错误。'
- en: I strongly recommend that you follow the *empirical approach: not taking anyone's
    word on anything at all, but trying it out and experiencing it for yourself. *Hence,
    this book gives you many hands-on experiments and kernel code examples that you
    can and must try out yourself; this will greatly aid you in making real progress
    and deeply learning and understanding various aspects of Linux kernel development.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您遵循*经验主义方法：不要轻信任何人的话，而是亲自尝试并体验。*因此，本书为您提供了许多实践实验和内核代码示例，您可以并且必须亲自尝试；这将极大地帮助您取得实质性进展，并深入学习和理解Linux内核开发的各个方面。
- en: Download the example code files
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Linux-Kernel-Programming](https://github.com/PacktPublishing/Linux-Kernel-Programming). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub上下载本书的示例代码文件，链接为[https://github.com/PacktPublishing/Linux-Kernel-Programming](https://github.com/PacktPublishing/Linux-Kernel-Programming)。如果代码有更新，将在现有的GitHub存储库上进行更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有来自我们丰富书籍和视频目录的其他代码包，可在**[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**上找到。去看看吧！
- en: Download the color images
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载彩色图像
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781789953435_ColorImages.pdf](_ColorImages.pdf).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个PDF文件，其中包含本书中使用的屏幕截图/图表的彩色图像。您可以在这里下载：[http://www.packtpub.com/sites/default/files/downloads/9781789953435_ColorImages.pdf](_ColorImages.pdf)。
- en: Conventions used
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "The `ioremap()` API returns a KVA of the `void *` type (since
    it''s an address location)"'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：表示文本中的代码字词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter用户名。这是一个例子：“`ioremap()`
    API返回`void *`类型的KVA（因为它是一个地址位置）”'
- en: 'A block of code is set as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都是按照以下方式编写的：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示新术语、重要单词或屏幕上看到的单词。例如，菜单或对话框中的单词会以这种形式出现在文本中。这是一个例子：“从管理面板中选择系统信息”。'
- en: Warnings or important notes appear like this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会出现在这样的形式中。
- en: Tips and tricks appear like this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这种形式出现。
- en: Get in touch
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈意见。
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有疑问，请在您的消息主题中提及书名，并通过电子邮件联系我们，邮箱为`customercare@packtpub.com`。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经非常注意确保内容的准确性，但错误是难免的。如果您在本书中发现错误，我们将不胜感激，如果您能向我们报告。请访问[www.packtpub.com/support/errata](https://www.packtpub.com/support/errata)，选择您的书，点击勘误提交表单链接，并输入详细信息。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上发现我们作品的任何形式的非法副本，我们将不胜感激，如果您能向我们提供位置地址或网站名称。请通过`copyright@packt.com`与我们联系，并提供材料链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果您在某个专业领域有专长，并且有兴趣撰写或为书籍做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com/)。'
- en: Reviews
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评论
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下评论。在阅读并使用本书后，为什么不在购买书籍的网站上留下评论呢？潜在的读者可以看到并使用您的客观意见来做出购买决定，我们在Packt可以了解您对我们产品的看法，我们的作者也可以看到您对他们书籍的反馈。谢谢！
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Packt 的更多信息，请访问 [packt.com](http://www.packt.com/)。
