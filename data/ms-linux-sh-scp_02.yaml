- en: Chapter 2. Creating Interactive Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。创建交互式脚本
- en: 'In [Chapter 1](part0014_split_000.html#DB7S1-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 1. What and Why of Scripting with Bash"), *What and Why of Scripting
    with Bash*, of this book we learned how to create a script and use some of its
    basics elements. These include optional parameters that we can pass through to
    the script when it is executed. In this chapter, we will extend this by using
    the read shell built-in command to allow for interactive scripts. Interactive
    scripts are scripts that prompt for information during the script execution. In
    doing so, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](part0014_split_000.html#DB7S1-747571d9b4814e1dbffcdef2eb0dec8d "第1章。使用Bash脚本的什么和为什么")的*使用Bash脚本的什么和为什么*中，我们学习了如何创建脚本以及使用一些基本元素。这些包括我们在执行脚本时可以传递的可选参数。在本章中，我们将通过使用read
    shell内置命令来扩展这一点，以允许交互式脚本。交互式脚本是在脚本执行期间提示信息的脚本。在这样做的过程中，我们将涵盖以下主题：
- en: Using `echo` with options
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有选项的`echo`
- en: Basic script using `read`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`read`的基本脚本
- en: Adding comments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加注释
- en: Enhancing `read` scripts with prompts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提示增强`read`脚本
- en: Limiting the number of entered characters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制输入字符的数量
- en: Control the visibility of the entered text
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制输入文本的可见性
- en: Simple scripts to enforce our learning
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的脚本来强化我们的学习
- en: Using echo with options
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带有选项的echo
- en: 'So far, in this book we have been able to see that the `echo` command is very
    useful and is going to be in many of our scripts, if not all. We have also seen
    that this is both a built-in command as well as a command file. When running the
    `echo` command, the built-in command will be used unless we state the full path
    to the file. We can test this with the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经看到`echo`命令非常有用，并且将在我们的许多脚本中使用，如果不是全部。我们还看到这既是一个内置命令，也是一个命令文件。运行`echo`命令时，将使用内置命令，除非我们指定文件的完整路径。我们可以使用以下命令进行测试：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To gain help on the built-in command, we can use `man bash` and search for `echo`;
    however, the `echo` command is identical to the internal command so I will recommend
    that you use `man echo` in most cases in order to display command options.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得内置命令的帮助，我们可以使用`man bash`并搜索`echo`；但是，`echo`命令与内部命令相同，因此我建议您在大多数情况下使用`man
    echo`来显示命令选项。
- en: 'The basic use of `echo` that we have seen so far will produce a text output
    and a new line. This is often the desired response so we don''t have to be concerned
    that the next prompt will append to the end of the echoed text. The new line separates
    the script output from the next shell prompt. If we do not supply any text string
    to print, `echo` will print only the new line to `STDOUT`. We can test this with
    the following command directly from the command line. We do not need to run `echo`
    or in fact any other command from a script. To run `echo` from the command line
    will simply enter the command as shown:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到的`echo`的基本用法将产生文本输出和一个新行。这通常是期望的响应，所以我们不必担心下一个提示会附加到输出的末尾。新行将脚本输出与下一个shell提示分隔开。如果我们不提供任何文本字符串来打印，`echo`将只打印新行到`STDOUT`。我们可以直接从命令行使用以下命令进行测试。我们不需要从脚本运行`echo`或者实际上运行任何其他命令。从命令行运行`echo`将简单地输入如下命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will show a clear new line between the command we issued and the
    subsequent prompt. We can see this in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示我们发出的命令和随后的提示之间的清晰新行。我们可以在下面的截图中看到这一点：
- en: '![Using echo with options](img/00020.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![使用带有选项的echo](img/00020.jpeg)'
- en: 'If we want to suppress the new line, especially useful if we are to prompt
    users, we can do this in the following two ways with the help of `echo`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要抑制新行，特别是在提示用户时非常有用，我们可以通过以下两种方式使用`echo`来实现：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The result will be to suppress the line feed. In the initial example, the `-n`
    option is used to suppress the line feed. The second example uses the more generic
    `-e` option, which allows escape sequences to be added to the text string. To
    continue on the same line, we use `\c` as the escape sequence.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是抑制换行。在初始示例中，使用`-n`选项来抑制换行。第二个示例使用更通用的`-e`选项，允许在文本字符串中添加转义序列。为了在同一行上继续，我们使用`\c`作为转义序列。
- en: 'This does not look great as the final part of the script or when it is run
    from the command line, as the command prompt will follow. This is illustrated
    in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不太好，作为脚本的最后部分或者从命令行运行时，命令提示符将会跟随。如下截图所示：
- en: '![Using echo with options](img/00021.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![使用带有选项的echo](img/00021.jpeg)'
- en: Basic script using read
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用read的基本脚本
- en: 'When used as a part of a script that prompts for user input, the suppression
    of the line feed is exactly what we want. We will begin by copying the existing
    `hello2.sh` script to `hello3.sh` and build an interactive script. Initially,
    we will use `echo` as the prompt mechanism but as we gradually enhance the script,
    we will generate the prompt directly from the shell built-in `read` command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为提示用户输入的脚本的一部分使用时，抑制换行正是我们想要的。我们将首先将现有的`hello2.sh`脚本复制到`hello3.sh`，并构建一个交互式脚本。最初，我们将使用`echo`作为提示机制，但随着我们逐渐增强脚本，我们将直接从shell内置的`read`命令生成提示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit the `$HOME/bin/hello3.sh` script so that it reads as the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`$HOME/bin/hello3.sh`脚本，使其读取如下内容：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As we execute the script, we will be greeted and prompted with our own name.
    This is echoed out using the `$REPLY` variable in the `echo` statement. As we
    have not yet supplied a variable name to the `read` built-in command the default
    `$REPLY` variable is used. The script execution and output is shown in the following
    screenshot. Take some time to practice the script on your own system:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行脚本时，我们将被问候并提示输入我们自己的名字。这是使用`echo`语句中的`$REPLY`变量回显出来的。由于我们尚未向`read`内置命令提供变量名，因此使用了默认的`$REPLY`变量。脚本执行和输出如下截图所示。花些时间在您自己的系统上练习脚本：
- en: '![Basic script using read](img/00022.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![使用read的基本脚本](img/00022.jpeg)'
- en: This little step has taken us a long way and there are many uses of a script
    like this, we have all used installation scripts that prompt for options and directories
    as we run through the install. I do accept that it is still quite trivial but
    as we delve into the chapter, we get closer to some more useful scripts.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一小步已经让我们走了很长的路，而且像这样的脚本有很多用途，我们都使用过提示选项和目录的安装脚本。我承认这仍然相当琐碎，但随着我们深入本章，我们将更接近一些更有用的脚本。
- en: Script comments
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本注释
- en: We should always introduce commenting scripts early in the piece. A script comment
    is prefaced with a `#` symbol. Anything after the `#` symbol is a comment and
    is not evaluated by the script. The shebang, `#!/bin/bash`, is primarily a comment
    and, as such, is not evaluated by the script. The shell running the script reads
    the shebang so it knows which command interpreter to hand the script over to.
    A comment may be at the start of a line or partly into the line. Shell scripting
    does not have the notion of multi-line comments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在脚本的早期引入注释。脚本注释以`#`符号开头。`#`符号之后的任何内容都是注释，不会被脚本评估。shebang，`#!/bin/bash`，主要是一个注释，因此不会被脚本评估。运行脚本的shell读取shebang，因此知道要将脚本交给哪个命令解释器。注释可以位于行的开头或部分位置。Shell脚本没有多行注释的概念。
- en: If you are not already familiar with comments, then they are added to the script
    to tell all about who wrote the script, when it was written and last updated,
    and what the script does. It is the metadata of the script.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不熟悉注释，那么它们被添加到脚本中，告诉所有关于谁编写了脚本，脚本是何时编写和最后更新的，以及脚本的功能。这是脚本的元数据。
- en: 'The following is an example of comments in scripts:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是脚本中注释的示例：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is a good practice to comment and add comments that explain what the code
    is doing and why. This will help you and your colleagues, who need to edit the
    script at a later date.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注释和添加解释代码正在做什么以及为什么是一个很好的做法。这将帮助您和需要在以后编辑脚本的同事。
- en: Enhancing scripts with read prompts
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用read提示增强脚本
- en: We have seen how we can use the built in read to populate a variable. So far,
    we have used `echo` to produce the prompt but this can be passed to read itself
    using the `-p` option. The `read` command will surpass the additional linefeed,
    so we reduce both the line count and the complexity to some degree.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用内置的read来填充一个变量。到目前为止，我们已经使用`echo`来生成提示，但是这可以通过`-p`选项传递给read本身。`read`命令将忽略额外的换行符，因此在一定程度上减少了行数和复杂性。
- en: 'We can test this at the command line itself. Try typing the following command
    to see `read` in action:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在命令行本身测试这个。尝试输入以下命令以查看`read`的运行情况：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We use the `read` command with the `-p` option. The argument that follows the
    option is the text that appears in the prompt. Normally, we will make sure that
    there is a trailing space at the end of the text to ensure that we can clearly
    see what we type. The last argument supplied here is the variable we want to populate,
    we simply call it `name`. Variables are case-sensitive too. Even if we did not
    supply the last argument, we can still store the user's response, but this time
    in the `REPLY` variable.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`read`命令和`-p`选项。跟在选项后面的参数是出现在提示中的文本。通常，我们会确保文本末尾有一个空格，以确保我们可以清楚地看到我们输入的内容。这里提供的最后一个参数是我们想要填充的变量，我们简单地称之为`name`。变量也是区分大小写的。即使我们没有提供最后一个参数，我们仍然可以存储用户的响应，但这次是在`REPLY`变量中。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that when we return the value of a variable we use `$` but not when we
    write it. In simple terms when reading a variable we refer to `$VAR` when setting
    a variable we refer to `VAR=value`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当我们返回变量的值时，我们使用`$`，但在写入变量时不使用。简单来说，当读取变量时，我们引用`$VAR`，当设置变量时，我们引用`VAR=value`。
- en: 'The following illustration shows the `read` command with syntax using the `-p`
    option:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图显示了使用`-p`选项的`read`命令的语法：
- en: '![Enhancing scripts with read prompts](img/00023.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用read提示增强脚本](img/00023.jpeg)'
- en: 'We can edit the script so that it appears similar to the following extract
    from `hello3.sh`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编辑脚本，使其看起来类似于`hello3.sh`中的以下片段：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `read` prompt cannot evaluate commands within the message string, such as
    we used before.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`提示不能评估消息字符串中的命令，就像我们以前使用的那样。'
- en: Limiting the number of entered characters
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制输入字符的数量
- en: 'We do not need functionality in the scripts we have used so far, but we may
    need to ask users to hit any key to continue. At the moment, we have set it up
    in such a way that the variable is not populated until we hit the *Enter* key.
    Users have to hit *Enter* to continue. If we use the `-n` option followed by an
    integer, we can specify the characters to accept before continuing, we will set
    `1` in this case. Take a look at the following code extract:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的脚本不需要功能，但是我们可能需要要求用户按任意键继续。目前，我们已经设置了这样的方式，即在按下*Enter*键之前变量不会被填充。用户必须按*Enter*键继续。如果我们使用`-n`选项后跟一个整数，我们可以指定在继续之前要接受的字符，这里我们将设置为`1`。看一下以下代码片段：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, the script will pause after displaying the name until we press any key;
    literally, we can press any key before continuing, as we accept just `1` key stroke.
    Whereas, earlier we were required to leave the default behavior in place, as we
    could not know how long a entered name would be. We have to wait for the user
    to hit *Enter*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，脚本将在显示名称后暂停，直到我们按下任意键；实际上，我们可以在继续之前按下任意键，因为我们只接受`1`个按键。而在之前，我们需要保留默认行为，因为我们无法知道输入的名称有多长。我们必须等待用户按*Enter*键。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we add an additional echo here to ensure that a new line is issued
    before the script ends. This ensures that the shell prompt starts on a new line.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里添加了额外的echo以确保脚本结束前发出一个新行。这确保了shell提示从新行开始。
- en: Controlling the visibility of entered text
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制输入文本的可见性
- en: 'Even though we have limited the input to a single character, we do get to see
    the text on the screen. In the same way, if we type the name we get to see the
    entered text before we hit *Enter*. In this case, it is just untidy but if we
    were entering sensitive data, such as a pin or a password, we should hide the
    text. We can use the silent option or `-s` to achieve this. A simple edit in the
    script will set this in place:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将输入限制为单个字符，但我们确实可以在屏幕上看到文本。同样，如果我们输入名称，我们会在按下*Enter*之前看到输入的文本。在这种情况下，这只是不整洁，但如果我们输入敏感数据，比如PIN码或密码，我们应该隐藏文本。我们可以使用静默选项或`-s`来实现这一点。在脚本中进行简单编辑即可实现这一点：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, when we use a key to continue, it will not be displayed on the screen.
    We can see the behavior of the script in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们使用键继续时，它不会显示在屏幕上。我们可以在下面的截图中看到脚本的行为：
- en: '![Controlling the visibility of entered text](img/00024.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![控制输入文本的可见性](img/00024.jpeg)'
- en: Enhancing learning with simple scripts
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过简单脚本增强学习
- en: Our scripts are still a little trivial and we have not looked at conditional
    statements, so we can test for correct input, but let's take a look at some simple
    scripts that we can build with some functionality.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的脚本仍然有点琐碎，我们还没有看条件语句，所以我们可以测试正确的输入，但让我们看一些简单的脚本，我们可以用一些功能来构建。
- en: Backing-up with scripts
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本进行备份
- en: Now that we have created some scripts, we may want to back these up in a different
    location. If we create a script to prompt us, we can choose the location and the
    type of files that we want to backup.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一些脚本，我们可能希望将它们备份到不同的位置。如果我们创建一个提示我们的脚本，我们可以选择要备份的位置和文件类型。
- en: 'Consider the following script for your first practice. Create the script and
    name it as `$HOME/backup.sh`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下脚本作为您的第一个练习。创建脚本并将其命名为`$HOME/backup.sh`：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will see that the file is commented; though as black and white the readability
    is a little difficult. If you have an electronic copy of the book, you should
    see the colors in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到文件被注释了；尽管黑白的可读性有点困难。如果您有这本书的电子副本，您应该在下面的截图中看到颜色：
- en: '![Backing-up with scripts](img/00025.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用脚本进行备份](img/00025.jpeg)'
- en: 'As the script runs, you may choose `.sh` for the files to backup and `backup`
    as the directory. The script execution is shown in the following screenshot along
    with a listing of the directory:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本运行时，您可以选择`.sh`文件进行备份，并将`backup`作为目录。脚本执行如下截图所示，以及目录的列表：
- en: '![Backing-up with scripts](img/00026.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![使用脚本进行备份](img/00026.jpeg)'
- en: Now you can see if we can start to create meaningful scripts with trivial scripting;
    although I will strongly urge adding error checking the user input if this script
    has to be for something other than personal use. As we progress into the book
    will cover this.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以看到，如果我们可以开始创建有意义的脚本，尽管我强烈建议添加错误检查用户输入，如果这个脚本不是用于个人使用。随着我们进入书籍，我们将涵盖这一点。
- en: Connecting to a server
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到服务器
- en: Let's look at some practical scripts that we can use to connect to servers.
    First, we will look at ping and in the second script we will look at prompting
    for SSH credentials.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些实用的脚本，我们可以用来连接服务器。首先，我们将查看ping，然后在第二个脚本中，我们将查看提示SSH凭据。
- en: Version 1 – ping
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本1 - ping
- en: 'This is something we all can do as no special services are required. This will
    simplify the `ping` command for console users who may not know the details of
    the command. This will ping the server for just three counts rather than the normal
    infinite amount. There is no output if the server is alive but a failed server
    reports `Sever dead`. Create the script as `$HOME/bin/ping_server.sh`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们所有人都可以做到的，不需要特殊的服务。这将简化控制台用户可能不了解命令细节的`ping`命令。这将对服务器进行三次ping而不是正常的无限次数。如果服务器存活，则没有输出，但如果服务器失败，则报告`服务器死机`。将脚本创建为`$HOME/bin/ping_server.sh`：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows successful and failed output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了成功和失败的输出：
- en: '![Version 1 – ping](img/00027.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![版本1 - ping](img/00027.jpeg)'
- en: Version 2 – SSH
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本2 - SSH
- en: 'Often SSH is installed and running on servers, so you may be able to run this
    script if your system is running SSH or you have access to an SSH server. In this
    script, we prompt for the server address and username and pass them through to
    the SSH client. Create the script as `$HOME/bin/connect_server.sh`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在服务器上安装并运行SSH，因此如果您的系统正在运行SSH或者您可以访问SSH服务器，您可能可以运行此脚本。在此脚本中，我们提示服务器地址和用户名，并将它们传递给SSH客户端。将脚本创建为`$HOME/bin/connect_server.sh`：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note the use of the brace bracket to delimit the variable from the `@` symbol
    in the last line of the script.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意脚本最后一行中使用大括号来将变量与`@`符号分隔。
- en: Version 3 – MySQL/MariaDB
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本3 - MySQL/MariaDB
- en: 'In the next script, we will provide the detail for a database connection along
    with the SQL query to execute. You will be able to run this if you have a MariaDB
    or MySQL database server on your system or one that you can connect to. For the
    demonstration, I will use a Raspberry Pi running Ubuntu-Mate 15.04 and MariaDB
    version 10; however, this should work for any MySQL server or MariaDB from version
    5 onwards. The script collects user and password information as well as the SQL
    command to execute. Create the script as `$HOME/bin/run_mql.sh`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个脚本中，我们将提供数据库连接的详细信息以及要执行的SQL查询。如果您的系统上有MariaDB或MySQL数据库服务器，或者您可以连接到一个，您将能够运行此脚本。为演示，我将使用运行Ubuntu-Mate
    15.04和MariaDB版本10的Raspberry Pi；然而，这对于任何MySQL服务器或从版本5开始的MariaDB都应该适用。脚本收集用户和密码信息以及要执行的SQL命令。将脚本创建为`$HOME/bin/run_mql.sh`：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the script, we can see that we suppress the display of the MySQL password
    when we input it into the `read` command using the `-s` option. Again, we use
    `echo` directly to ensure that the next prompt starts on a new line.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们可以看到当我们将MySQL密码输入到`read`命令中时，我们使用`-s`选项来抑制密码的显示。同样，我们直接使用`echo`来确保下一个提示从新的一行开始。
- en: 'The script input is shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输入如下截图所示：
- en: '![Version 3 – MySQL/MariaDB](img/00028.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![版本3 - MySQL/MariaDB](img/00028.jpeg)'
- en: Now, we can easily see the password suppression working and the ease of adding
    to the MySQL commands.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以轻松地看到密码抑制的工作原理，以及向MySQL命令添加的便利性。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Feel proud that you have your "I can read" badge for shell scripting. We have
    developed our scripts to be interactive and prompting users for input during the
    script execution. These prompts can be used to simplify user operations on the
    command line. In this way, they do not need to remember the command line options
    or have passwords that end up stored in the command line history. When using passwords,
    we can silently store the value using the `read -sp` options.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为自己的shell脚本拥有“我会读”的徽章感到自豪。我们已经开发了交互式脚本，并在脚本执行过程中提示用户输入。这些提示可以用来简化用户在命令行上的操作。这样，他们就不需要记住命令行选项，也不会在命令行历史中存储密码。在使用密码时，我们可以使用`read
    -sp`选项来静默存储值。
- en: In the next chapter, we will take our time to look at the conditional statements
    in bash.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将花时间来研究bash中的条件语句。
