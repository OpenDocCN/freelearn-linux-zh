- en: Chapter 7. Creating Building Blocks with Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用函数创建构建块
- en: In this chapter, we will dive into the wonderful world of functions. We can
    look at these as modular building blocks creating powerful and adaptive scripts.
    By creating functions, we add the code in a single building block isolated from
    the rest of the script. Focusing on improvements of a single function is a lot
    easier than trying to improve the script as a single object. Without functions,
    it is difficult to hone in on problem areas and the code is often repeated, it
    means that updates need to happen in many locations. Functions are named as blocks
    of code or scripts within scripts and they can overcome many problems associated
    with a more complex code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解函数的奇妙世界。我们可以将这些视为创建强大和适应性脚本的模块化构建块。通过创建函数，我们将代码添加到一个单独的构建块中，与脚本的其余部分隔离开来。专注于改进单个函数要比尝试改进整个脚本容易得多。没有函数，很难专注于问题区域，代码经常重复，这意味着需要在许多位置进行更新。函数被命名为代码块或脚本中的脚本，并且它们可以克服与更复杂代码相关的许多问题。
- en: 'As we make our way through the chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本章中的学习，我们将涵盖以下主题：
- en: Functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Passing parameters to functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向函数传递参数
- en: Returning values
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值
- en: Menu using functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数的菜单
- en: Introducing functions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍函数
- en: 'Functions are blocks of code that exist in memory as **named elements**. These
    elements can be created within the shell environment, as well as within the script
    execution. When a command is issued at the command line, aliases are checked first
    and following this we check for a matching function name. To display the functions
    residing in your shell environment, you can use the following code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是作为**命名元素**存在于内存中的代码块。这些元素可以在shell环境中创建，也可以在脚本执行中创建。当在命令行上发出命令时，首先检查别名，然后检查匹配的函数名称。要显示驻留在您的shell环境中的函数，可以使用以下代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will vary depending on the distribution you are using and the number
    of functions you have created. On my Raspbian OS, the partial output is shown
    in the flowing screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将根据您使用的发行版和创建的函数数量而变化。在我的Raspbian OS上，部分输出显示在以下截图中：
- en: '![Introducing functions](img/00064.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![介绍函数](img/00064.jpeg)'
- en: 'Using the `-f` option, you can display the function and the associated definition.
    However, if we want to see just a single function definition, we can use the `type`
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-f`选项，您可以显示函数及其相关定义。但是，如果我们只想看到单个函数定义，我们可以使用`type`命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous code example will display the code block for the `quote` function,
    if it exists within your shell. We can see the output of this command in the following
    screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例将显示`quote`函数的代码块，如果它存在于您的shell中。我们可以在以下截图中看到此命令的输出：
- en: '![Introducing functions](img/00065.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![介绍函数](img/00065.jpeg)'
- en: 'The `quote` function in bash inserts single quotes around a supplied input
    parameter. For example, we can expand the `USER` variable and display the value
    as a string literal; this is shown in the following screenshot. The screenshot
    captures the command and output:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash中，`quote`函数会在提供的输入参数周围插入单引号。例如，我们可以展开`USER`变量并将值显示为字符串文字；这在以下截图中显示。截图捕获了命令和输出：
- en: '![Introducing functions](img/00066.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![介绍函数](img/00066.jpeg)'
- en: 'Most codes can be represented by a pseudo-code which shows an example layout.
    Functions are no different and the code to create a function is listed in the
    following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码都可以用伪代码表示，显示一个示例布局。函数也不例外，创建函数的代码列在以下示例中：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The function is created without a `do` and `done` block, as we have used in
    the previous loops. It is the purpose of the brace brackets to define the code
    block boundaries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数创建时没有`do`和`done`块，就像我们在之前的循环中使用的那样。大括号的目的是定义代码块的边界。
- en: 'A simple function to display aggregated system information is shown in the
    following code. This can be created at the command line and will be a resident
    in your shell. This will not persist the logins and will be lost when the shell
    is closed or the function is unset. To allow the function to persist, we need
    to add this to the login script of our user account. The sample code is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的函数，用于显示聚合系统信息的代码。这可以在命令行中创建，并将驻留在您的shell中。这将不会保留登录信息，并且在关闭shell或取消函数设置时将丢失。要使函数持久存在，我们需要将其添加到用户帐户的登录脚本中。示例代码如下：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can print the detail of the function similar to the prior instance using
    the type command; this is shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`type`命令打印函数的详细信息，类似于之前的示例；这在以下截图中显示：
- en: '![Introducing functions](img/00067.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![介绍函数](img/00067.jpeg)'
- en: 'To execute the function, we need to simply type `show_system` and we will see
    the static text and output from the three commands: `uptime`, `lscpu`, and `who`.
    This of course is a very simple function but we can start to add more functionality
    by allowing parameters to be passed at runtime.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行函数，我们只需输入`show_system`，我们将看到静态文本和来自`uptime`、`lscpu`和`who`三个命令的输出。当然，这是一个非常简单的函数，但我们可以通过允许在运行时传递参数来开始添加更多功能。
- en: Passing parameters to functions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向函数传递参数
- en: Earlier within this chapter, we referred to functions as scripts within scripts
    and we will still maintain that analogy. Similar to how a script can have input
    parameters, we can create functions that also accept parameters that can make
    their operation less static. Before we work on a script, we can look at a useful
    function in the command line.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们将函数称为脚本中的脚本，我们仍将保持这种类比。类似于脚本可以有输入参数，我们可以创建接受参数的函数，使它们的操作不那么静态。在我们开始编写脚本之前，我们可以看一下命令行中一个有用的函数。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One of my pet-peeves is over commented configuration files, especially where
    documentation exists to detail the options available.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我最讨厌过度注释的配置文件，尤其是存在文档详细说明可用选项的情况。
- en: The GNU Linux command `sed` can easily edit the file for us and remove commented
    lines and empty lines. We are introducing the stream editor, `sed`, here but we
    will look at it in more detail in the following chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GNU Linux命令`sed`可以轻松地编辑文件并删除注释行和空行。我们在这里引入了流编辑器`sed`，但我们将在下一章节中更详细地讨论它。
- en: 'The `sed` command line that runs the in-place edit will be:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 进行原地编辑的`sed`命令行将是：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can run out forensics in the command line by breaking it down element by
    element. Let''s take a deeper look:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过逐个元素地分解命令行来进行取证。让我们深入研究一下：
- en: '`sed -i.bak`: This edits the file and creates a backup with the extension `.bak`.
    The original file will then be accessible as `<filename>.bak`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed -i.bak`：这会编辑文件并创建一个带有扩展名`.bak`的备份。原始文件将以`<filename>.bak`的形式可访问。'
- en: '`/^`: Lines that start with, that is the first character of the line.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/^`：以...开头的行，也就是行的第一个字符。'
- en: '`\s*`: This means any amount of white space including no spaces or tabs.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\s*`：这意味着任意数量的空白，包括没有空格或制表符。'
- en: '`#/`: Followed by the comment. Altogether `/^\s*#/` we are looking for lines
    that begin with a comment or spaces and a comment.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#/`：后跟注释。整体上`/^\s*#/`表示我们正在寻找以注释或空格和注释开头的行。'
- en: '`d`: The action delete to remove matching lines.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：删除匹配行的操作。'
- en: '`;/^$/d`: The semi-colon is used to separate expressions and the second expression
    is similar to the first but this time we are preparing to delete empty lines or
    lines that being with the end of line marker `$`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`; /^$/d`：分号用于分隔表达式，第二个表达式与第一个类似，但这次我们准备删除空行或以行结束标记`$`开头的行。'
- en: 'To move this into a function, we will simply need to think of a great name.
    I like to build verbs into function names; it helps with the uniqueness and identifies
    the purpose of the function. We will create the `clean_file` function as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将此移入函数中，我们只需要考虑一个好名字。我喜欢在函数名中加入动词；这有助于确保唯一性并确定函数的目的。我们将创建`clean_file`函数如下：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As within scripts, we use positional parameters to accept command-line arguments.
    We can replace the hard-coded filename that we used previously with `$1` within
    the function. We will quote this variable to protect against spaces within the
    filename. To test the `clean_file` function, we will make a copy of a system file
    and work with the copy. In this way, we can be sure that no harm comes to any
    system file. We can assure all readers that no system files were harmed during
    the making of this book. The following are the detailed steps we need to follow
    to perform the test on the new function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与脚本中一样，我们使用位置参数来接受命令行参数。我们可以在函数中用`$1`替换之前使用的硬编码文件名。我们将引用这个变量以防止文件名中有空格。为了测试`clean_file`函数，我们将复制一个系统文件并使用副本进行操作。这样，我们可以确保不会对任何系统文件造成伤害。我们向所有读者保证，在编写本书的过程中没有损坏任何系统文件。以下是我们需要遵循的详细步骤，以对新函数进行测试：
- en: Create the `clean_file` function as described.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照描述创建`clean_file`函数。
- en: Move to your home directory using the `cd` command without arguments.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令而不带参数切换到你的主目录。
- en: 'Copy the time configuration file to your home directory: `cp /etc/ntp.conf
    $HOME`.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将时间配置文件复制到你的主目录：`cp /etc/ntp.conf $HOME`。
- en: 'Count the number of lines in the file with the following command: `wc -l $HOME/ntp.conf`.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算文件中的行数：`wc -l $HOME/ntp.conf`。
- en: 'Now, remove the commented and empty lines with: `clean_file $HOME/ntp.conf`.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令删除注释和空行：`clean_file $HOME/ntp.conf`。
- en: 'Now, recount the lines using: `wc -l $HOME/ntp.conf`.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`wc -l $HOME/ntp.conf`重新计算行数。
- en: 'From the backup of the original that we created: `wc -l $HOME/ntp.conf.bak`.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们创建的原始备份中：`wc -l $HOME/ntp.conf.bak`。
- en: 'The sequence of commands is shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 命令序列如下截图所示：
- en: '![Passing parameters to functions](img/00068.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![将参数传递给函数](img/00068.jpeg)'
- en: We can direct the attention of the function to the required file using the argument
    that was supplied while executing the function. If we need to persist this function,
    then we should add it to a login script. However, if we want to test this within
    a shell script, we can create the following file to do this and practice some
    of the other elements we have learned. We will need to take notice that the functions
    should always be created at the start of the script as they need to be stored
    in memory by the time they are called. Just think that your function needs to
    be unlocked and loaded before you pull the trigger.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用执行函数时提供的参数将函数的注意力引向所需的文件。如果我们需要保留此函数，那么我们应该将其添加到登录脚本中。但是，如果我们想要在shell脚本中测试这个函数，我们可以创建以下文件来做这个练习，并练习我们学到的其他一些元素。我们需要注意，函数应该始终在脚本的开头创建，因为它们需要在被调用时存储在内存中。只需想象你的函数需要在你扣动扳机之前被解锁和加载。
- en: 'We will create a new shell script, `$HOME/bin/clean.sh` and the execute permission,
    as always, will need to be set. The code of the script is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的shell脚本`$HOME/bin/clean.sh`，并且像往常一样，需要设置执行权限。脚本的代码如下：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have provided two functions within the script. The first, `is_file`, simply
    tests to ensure that the filename we have entered is a regular file. Then we declare
    the `clean_file` function with a little added functionality, displaying the line
    count of the file before and after the operation. We can also see that functions
    can be nested and we call the `is_file` function with `clean_file`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本中提供了两个函数。第一个`is_file`只是测试以确保我们输入的文件名是一个普通文件。然后我们声明`clean_file`函数并添加了一些额外的功能，显示操作前后文件的行数。我们还可以看到函数可以被嵌套，并且我们用`clean_file`调用`is_file`函数。
- en: Without the function definitions we have only three lines of code at the end
    of the file that we can see in the example code laid out in the previous code
    block and has been save as `$HOME/bin/clean.sh`. We first prompt for the filename
    and then run the `clean_file` function, which in turn calls the `is_file` function.
    The simplicity of the main code is important here. The complexity is in the functions,
    as each function can be worked on as a standalone unit.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 没有函数定义，我们在文件末尾只有三行代码，可以在之前的代码块中看到，并保存为`$HOME/bin/clean.sh`。我们首先提示输入文件名，然后运行`clean_file`函数，该函数又调用`is_file`函数。这里主要是主要代码的简单性。复杂性在函数中，因为每个函数都可以作为一个独立的单元进行处理。
- en: 'We can now test the script operation, first using a wrong filename, as we can
    see in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以测试脚本的操作，首先使用一个错误的文件名，如下面的截图所示：
- en: '![Passing parameters to functions](img/00069.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![向函数传递参数](img/00069.jpeg)'
- en: 'Now that we have seen the operation with an incorrect file, we can try again
    using an actual file! We can use the same system file we worked on before. We
    need to first return the files to their original state:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了对一个不正确的文件的操作，我们可以再试一次，使用一个实际的文件！我们可以使用之前操作过的同一个系统文件。我们需要首先将文件恢复到它们的原始状态：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the file now ready, we can execute the script from the `$HOME` directory
    as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 文件现在准备好了，我们可以在`$HOME`目录中执行脚本，如下面的截图所示：
- en: '![Passing parameters to functions](img/00070.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![向函数传递参数](img/00070.jpeg)'
- en: Returning values from functions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从函数返回值
- en: 'Whenever we have statements that are printed on the screen within the function,
    we can see their result. However, many times we will want the function to populate
    a variable within the script and not display anything. In this case, we use `return`
    in the function. This is especially important when we are gaining input from users.
    We may prefer the case to translate the input to a known case to make the condition
    testing easier. Embedding the code in a function allows it to be used many times
    within a script. The following code shows how we can achieve this by creating
    the `to_lower` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们在函数内打印在屏幕上的语句时，我们可以看到它们的结果。然而，很多时候我们希望函数在脚本中填充一个变量而不显示任何内容。在这种情况下，我们在函数中使用`return`。当我们从用户那里获得输入时，这一点尤为重要。我们可能更喜欢将输入转换为已知的情况，以使条件测试更容易。将代码嵌入函数中允许它在脚本中被多次使用。下面的代码显示了我们如何通过创建`to_lower`函数来实现这一点：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Stepping through the code we can begin to understand the operation of this
    function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过逐步分析代码，我们可以开始理解这个函数的操作：
- en: '`input="$1"`: This is more for ease than anything else; we assign the first
    input parameter to a named variable input.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input="$1"`：这更多是为了方便，我们将第一个输入参数分配给一个命名变量输入。'
- en: '`output=$(tr [A-Z] [a-z] <<< "$input")`: This is the main engine of the function
    where the translation from upper case to lower case occurs. The use of the here
    string operator `<<<` allows us to expand the variable to read in to the contents
    to the `tr` program. This is a form of input redirection.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output=$(tr [A-Z] [a-z] <<< "$input")`：这是函数的主要引擎，其中发生从大写到小写的转换。使用here string操作符`<<<`允许我们扩展变量以读取到`tr`程序的内容。这是一种输入重定向形式。'
- en: '`return$output`: This is how we create the return value.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return$output`：这是我们创建返回值的方法。'
- en: 'One use of this function will be within a script that reads the user''s input
    and simplifies the test to see if they choose `Q` or `q`. This can be seen in
    the following extract of code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的一个用途将在一个读取用户输入并简化测试以查看他们是否选择了`Q`或`q`的脚本中。这可以在以下代码片段中看到：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using functions in menus
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在菜单中使用函数
- en: 'In the last chapter, [Chapter 6](part0046_split_000.html#1BRPS1-747571d9b4814e1dbffcdef2eb0dec8d
    "Chapter 6. Iterating with Loops"), *Iterating with Loops* we created the `menu.sh`
    file. Menus are great targets to use functions, as the `case` statement is maintained
    very simply with single line entries, while the complexity can still be stored
    in each function. We should consider creating a function for each menu item. If
    we copy the previous `$HOME/bin/menu.sh` to `$HOME/bin/menu2.sh`, we can improve
    the functionality. The new menu should look like the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，[第6章](part0046_split_000.html#1BRPS1-747571d9b4814e1dbffcdef2eb0dec8d "第6章。使用循环迭代")，*使用循环迭代*，我们创建了`menu.sh`文件。菜单是使用函数的很好的目标，因为`case`语句非常简单地维护单行条目，而复杂性仍然可以存储在每个函数中。我们应该考虑为每个菜单项创建一个函数。如果我们将之前的`$HOME/bin/menu.sh`复制到`$HOME/bin/menu2.sh`，我们可以改进功能。新菜单应该如下代码所示：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, we still maintain the simplicity of the case statement; however,
    we can develop the script to add in more complexity through the functions. For
    example, when choosing option b for the calendar, we now check to see if the `ncal`
    command is available. If it is, we use `ncal` and use the `-w` option to print
    the week number. We can see this in the following screenshot where we have chosen
    to display the calendar and install `ncal`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们仍然保持`case`语句的简单性；然而，我们可以通过函数来增加脚本的复杂性。例如，当选择日历的选项b时，我们现在检查`ncal`命令是否可用。如果可用，我们使用`ncal`并使用`-w`选项来打印周数。我们可以在下面的截图中看到这一点，我们选择显示日历并安装`ncal`。
- en: '![Using functions in menus](img/00071.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![在菜单中使用函数](img/00071.jpeg)'
- en: We can also not be concerned about the caps-lock key as the `to_lower` function
    converts our selection to lower case. Over time it would be very easy to add additional
    elements to the functions knowing that we only affect that single function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不必担心大写锁定键，因为`to_lower`函数将我们的选择转换为小写。随着时间的推移，很容易向函数中添加额外的元素，因为我们知道只会影响到单个函数。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We are still making progress by leaps and bounds in script writing. I hope these
    ideas stay with you and you find the code examples useful. Functions are very
    important for the ease of maintenance of your scripts and their ultimate functionality.
    The easier the scripts are to maintain, the more likely you are to add improvements
    over time. We can define functions at the command line or within scripts but they
    need to be included in the script before they are used.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本编写方面仍在飞速进步。我希望这些想法能留在你心中，并且你会发现代码示例很有用。函数对于脚本的易维护性和最终功能非常重要。脚本越容易维护，你就越有可能随着时间的推移添加改进。我们可以在命令行或脚本中定义函数，但在使用之前，它们需要被包含在脚本中。
- en: The functions themselves are loaded in to memory while the script is running,
    but as long as the script is forked and not sourced, they will be released from
    memory once the script is finished. We have touched a little upon `sed` in this
    chapter and we will look more at using the stream editor (`sed`) in the next chapter.
    The `sed` command is very powerful and we can make good use of it within scripts.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 函数本身在脚本运行时加载到内存中，但只要脚本被分叉而不是被源化，它们将在脚本完成后从内存中释放。在本章中，我们已经稍微涉及了`sed`，在下一章中我们将更多地学习如何使用流编辑器（`sed`）。`sed`命令非常强大，我们可以在脚本中充分利用它。
