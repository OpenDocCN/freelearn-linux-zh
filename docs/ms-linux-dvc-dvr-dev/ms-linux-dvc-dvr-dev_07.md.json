["```\nstruct snd_soc_component_driver {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0/* Default control and setup, added after probe() is run */\n\u00a0\u00a0\u00a0\u00a0const struct snd_kcontrol_new *controls;\n\u00a0\u00a0\u00a0\u00a0unsigned int num_controls;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dapm_widget *dapm_widgets;\n\u00a0\u00a0\u00a0\u00a0unsigned int num_dapm_widgets;\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dapm_route *dapm_routes;\n\u00a0\u00a0\u00a0\u00a0unsigned int num_dapm_routes;\n\u00a0\u00a0\u00a0\u00a0int (*probe)(struct snd_soc_component *);\n\u00a0\u00a0\u00a0\u00a0void (*remove)(struct snd_soc_component *);\n\u00a0\u00a0\u00a0\u00a0int (*suspend)(struct snd_soc_component *);\n\u00a0\u00a0\u00a0\u00a0int (*resume)(struct snd_soc_component *);\n\u00a0\u00a0\u00a0\u00a0unsigned int (*read)(struct snd_soc_component *, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int);\n\u00a0\u00a0\u00a0\u00a0int (*write)(struct snd_soc_component *, unsigned int,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int);\n\u00a0\u00a0\u00a0\u00a0/* pcm creation and destruction */\n\u00a0\u00a0\u00a0\u00a0int (*pcm_new)(struct snd_soc_pcm_runtime *);\n\u00a0\u00a0\u00a0\u00a0void (*pcm_free)(struct snd_pcm *);\n\u00a0\u00a0\u00a0\u00a0/* component wide operations */\n\u00a0\u00a0\u00a0\u00a0int (*set_sysclk)(struct snd_soc_component *component, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int clk_id, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int source, unsigned int freq, int dir);\n\u00a0\u00a0\u00a0\u00a0int (*set_pll)(struct snd_soc_component *component,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int pll_id, int source, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq_in,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq_out);\n\u00a0\u00a0\u00a0\u00a0int (*set_jack)(struct snd_soc_component *component,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_jack *jack, void *data);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0const struct snd_pcm_ops *ops;\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0unsigned int non_legacy_dai_naming:1;\n};\n```", "```\nstruct snd_soc_dai_driver {\n\u00a0\u00a0\u00a0\u00a0/* DAI description */\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0/* DAI driver callbacks */\n\u00a0\u00a0\u00a0\u00a0int (*probe)(struct snd_soc_dai *dai);\n\u00a0\u00a0\u00a0\u00a0int (*remove)(struct snd_soc_dai *dai);\n\u00a0\u00a0\u00a0\u00a0int (*suspend)(struct snd_soc_dai *dai);\n\u00a0\u00a0\u00a0\u00a0int (*resume)(struct snd_soc_dai *dai);\n[...]\n\u00a0\u00a0\u00a0\u00a0/* ops */\n\u00a0\u00a0\u00a0\u00a0const struct snd_soc_dai_ops *ops;\n\u00a0\u00a0\u00a0\u00a0/* DAI capabilities */\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_pcm_stream capture;\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_pcm_stream playback;\n\u00a0\u00a0\u00a0\u00a0unsigned int symmetric_rates:1;\n\u00a0\u00a0\u00a0\u00a0unsigned int symmetric_channels:1;\n\u00a0\u00a0\u00a0\u00a0unsigned int symmetric_samplebits:1;\n[...]\n};\n```", "```\nstruct snd_soc_dai_ops {\n\u00a0\u00a0\u00a0\u00a0int (*set_sysclk)(struct snd_soc_dai *dai, int clk_id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq, int dir);\n\u00a0\u00a0\u00a0\u00a0int (*set_pll)(struct snd_soc_dai *dai, int pll_id, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int source,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq_in, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int freq_out);\n\u00a0\u00a0\u00a0\u00a0int (*set_clkdiv)(struct snd_soc_dai *dai, int div_id, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int div);\n\u00a0\u00a0\u00a0\u00a0int (*set_bclk_ratio)(struct snd_soc_dai *dai, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int ratio);\n\u00a0\u00a0\u00a0\u00a0int (*set_fmt)(struct snd_soc_dai *dai, unsigned int fmt);\n\u00a0\u00a0\u00a0\u00a0int (*xlate_tdm_slot_mask)(unsigned int slots,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *tx_mask, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *rx_mask); \n\u00a0\u00a0\u00a0\u00a0int (*set_tdm_slot)(struct snd_soc_dai *dai,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int tx_mask, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int rx_mask,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int slots, int slot_width);\n\u00a0\u00a0\u00a0\u00a0int (*set_channel_map)(struct snd_soc_dai *dai,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int tx_num, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *tx_slot,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int rx_num, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *rx_slot);\n\u00a0\u00a0\u00a0\u00a0int (*get_channel_map)(struct snd_soc_dai *dai,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *tx_num, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *tx_slot,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *rx_num, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *rx_slot);\n\u00a0\u00a0\u00a0\u00a0int (*set_tristate)(struct snd_soc_dai *dai, int tristate);\n\u00a0\u00a0\u00a0\u00a0int (*set_sdw_stream)(struct snd_soc_dai *dai, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *stream,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int direction);\n\u00a0\u00a0\u00a0\u00a0int (*digital_mute)(struct snd_soc_dai *dai, int mute);\n\u00a0\u00a0\u00a0\u00a0int (*mute_stream)(struct snd_soc_dai *dai, int mute, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int stream);\n\u00a0\u00a0\u00a0\u00a0int (*startup)(struct snd_pcm_substream *, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *);\n\u00a0\u00a0\u00a0\u00a0void (*shutdown)(struct snd_pcm_substream *, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *);\n\u00a0\u00a0\u00a0\u00a0int (*hw_params)(struct snd_pcm_substream *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_pcm_hw_params *, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *); \n\u00a0\u00a0\u00a0\u00a0int (*hw_free)(struct snd_pcm_substream *, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *);\n\u00a0\u00a0\u00a0\u00a0int (*prepare)(struct snd_pcm_substream *, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *);\n\u00a0\u00a0\u00a0\u00a0int (*trigger)(struct snd_pcm_substream *, int,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *);\n};\n```", "```\nstruct snd_soc_pcm_stream {\n\u00a0\u00a0\u00a0\u00a0const char *stream_name;\n\u00a0\u00a0\u00a0\u00a0u64 formats;\n\u00a0\u00a0\u00a0\u00a0unsigned int rates; \n\u00a0\u00a0\u00a0\u00a0unsigned int rate_min;\n\u00a0\u00a0\u00a0\u00a0unsigned int rate_max;\n\u00a0\u00a0\u00a0\u00a0unsigned int channels_min;\n\u00a0\u00a0\u00a0\u00a0unsigned int channels_max;\n\u00a0\u00a0\u00a0\u00a0unsigned int sig_bits;\n};\n```", "```\nint snd_soc_component_write(struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_component *component,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg, unsigned int val)\nint snd_soc_component_read(struct snd_soc_component *component,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int *val)\nint snd_soc_component_update_bits(struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_component *component, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int mask, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int val)\nint snd_soc_component_test_bits(struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_component *component, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int reg,\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int mask,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int value)\n```", "```\nstruct snd_kcontrol_new {\n\u00a0\u00a0\u00a0\u00a0snd_ctl_elem_iface_t iface;\n\u00a0\u00a0\u00a0\u00a0unsigned int device;\n\u00a0\u00a0\u00a0\u00a0unsigned int subdevice;\t\n\u00a0\u00a0\u00a0\u00a0const unsigned char *name;\n\u00a0\u00a0\u00a0\u00a0unsigned int index;\n\u00a0\u00a0\u00a0\u00a0unsigned int access;\n\u00a0\u00a0\u00a0\u00a0unsigned int count;\n\u00a0\u00a0\u00a0\u00a0snd_kcontrol_info_t *info;\n\u00a0\u00a0\u00a0\u00a0snd_kcontrol_get_t *get;\n\u00a0\u00a0\u00a0\u00a0snd_kcontrol_put_t *put;\n\u00a0\u00a0\u00a0\u00a0union {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_kcontrol_tlv_rw_t *c;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const unsigned int *p;\n\u00a0\u00a0\u00a0\u00a0} tlv;\n\u00a0\u00a0\u00a0\u00a0[...]\n};\n```", "```\nstatic DECLARE_TLV_DB_SCALE(db_scale_my_control, -4050, 150, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00);\n```", "```\nstatic struct snd_kcontrol_new my_control devinitdata = {\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0.access =\n\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_CTL_ELEM_ACCESS_READWRITE | \u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_CTL_ELEM_ACCESS_TLV_READ,\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0.tlv.p = db_scale_my_control,\n};\n```", "```\nint snd_soc_add_component_controls(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_component *component,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct snd_kcontrol_new *controls, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int num_controls);\n```", "```\nstatic const DECLARE_TLV_DB_SCALE(dac_tlv, -12750, 50, 1);\nstatic const DECLARE_TLV_DB_SCALE(out_tlv, -12100, 100, 1);\nstatic const DECLARE_TLV_DB_SCALE(bypass_tlv, -2100, 300, 0);\nstatic const struct snd_kcontrol_new wm8960_snd_controls[] = {\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0SOC_DOUBLE_R_TLV(\"Playback Volume\", WM8960_LDAC, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_RDAC, 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0255, 0, dac_tlv),\n\u00a0\u00a0\u00a0\u00a0SOC_DOUBLE_R_TLV(\"Headphone Playback Volume\", WM8960_LOUT1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_ROUT1, 0, 127, 0, out_tlv),\n\u00a0\u00a0\u00a0\u00a0SOC_DOUBLE_R(\"Headphone Playback ZC Switch\", WM8960_LOUT1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_ROUT1, 7, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DOUBLE_R_TLV(\"Speaker Playback Volume\", WM8960_LOUT2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_ROUT2, 0, 127, 0, out_tlv),\n\u00a0\u00a0\u00a0\u00a0SOC_DOUBLE_R(\"Speaker Playback ZC Switch\", WM8960_LOUT2, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_ROUT2, 7, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"Speaker DC Volume\", WM8960_CLASSD3, 3, 5, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"Speaker AC Volume\", WM8960_CLASSD3, 0, 5, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_ENUM(\"DAC Polarity\", wm8960_enum[1]),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE_BOOL_EXT(\"DAC Deemphasis Switch\", 0, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wm8960_get_deemph, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wm8960_put_deemph),\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"Noise Gate Threshold\", WM8960_NOISEG, 3, 31, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"Noise Gate Switch\", WM8960_NOISEG, 0, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DOUBLE_R_TLV(\"ADC PCM Capture Volume\", WM8960_LADC,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_RADC, 0, 255, 0, adc_tlv),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE_TLV(\"Left Output Mixer Boost Bypass Volume\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_BYPASS1, 4, 7, 1, bypass_tlv),\n};\n```", "```\nsnd_soc_add_component_controls(component, wm8960_snd_controls,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(wm8960_snd_controls));\n```", "```\n#define SOC_SINGLE(xname, reg, shift, max, invert) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_volsw, .get = snd_soc_get_volsw,\\\n\u00a0\u00a0\u00a0.put = snd_soc_put_volsw, \\\n\u00a0\u00a0\u00a0.private_value = SOC_SINGLE_VALUE(reg, shift, max, invert) }\n```", "```\nSOC_SINGLE(\"PCM Playback -6dB Switch\", WM8960_DACCTL1, 7, 1, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00),\n```", "```\nSOC_SINGLE_TLV(\"Input Volume of LINPUT1\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_LINVOL, 0, 63, 0, in_tlv),\n```", "```\nstatic const DECLARE_TLV_DB_SCALE(in_tlv, -1725, 75, 0);\n```", "```\nSOC_DOUBLE_R(\"Headphone ZC Switch\", WM8960_LOUT1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_ROUT1, 7, 1, 0),\n```", "```\nSOC_DOUBLE_R_TLV(\"PCM DAC Playback Volume\", WM8960_LDAC,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WM8960_RDAC, 0, 255, 0, dac_tlv),\n```", "```\nstatic const struct snd_kcontrol_new left_speaker_mixer[] = {\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"Input Switch\", WM8993_SPEAKER_MIXER, 7, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"IN1LP Switch\", WM8993_SPEAKER_MIXER, 5, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"Output Switch\", WM8993_SPEAKER_MIXER, 3, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_SINGLE(\"DAC Switch\", WM8993_SPEAKER_MIXER, 6, 1, 0),\n};\n```", "```\nstatic const char\u00a0\u00a0*aif_text[] = { \n\u00a0\u00a0\u00a0\u00a0\"Left\" , \"Right\"\n};\n```", "```\nstatic const struct\tsoc_enum aifinl_enum =\n\u00a0\u00a0\u00a0\u00a0SOC_ENUM_SINGLE(WM8993_AUDIO_INTERFACE_2, 15, 2, aif_text);\n```", "```\nstruct snd_soc_dapm_widget {\n\u00a0\u00a0\u00a0\u00a0enum snd_soc_dapm_type id;\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0const char *sname;\n[...]\n\u00a0\u00a0\u00a0\u00a0/* dapm control */\n\u00a0\u00a0\u00a0\u00a0int reg;\t/* negative reg = no direct dapm */\n\u00a0\u00a0\u00a0\u00a0unsigned char shift;\n\u00a0\u00a0\u00a0\u00a0unsigned int mask;\n\u00a0\u00a0\u00a0\u00a0unsigned int on_val;\n\u00a0\u00a0\u00a0\u00a0unsigned int off_val;\n[...]\n\u00a0\u00a0\u00a0\u00a0int (*power_check)(struct snd_soc_dapm_widget *w);\n\u00a0\u00a0\u00a0\u00a0/* external events */\n\u00a0\u00a0\u00a0\u00a0unsigned short event_flags;\n\u00a0\u00a0\u00a0\u00a0int (*event)(struct snd_soc_dapm_widget*,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_kcontrol *, int);\n\u00a0\u00a0\u00a0\u00a0/* kcontrols that relate to this widget */\n\u00a0\u00a0\u00a0\u00a0int num_kcontrols;\n\u00a0\u00a0\u00a0\u00a0const struct snd_kcontrol_new *kcontrol_news;\n\u00a0\u00a0\u00a0\u00a0struct snd_kcontrol **kcontrols;\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dobj dobj;\n\u00a0\u00a0\u00a0\u00a0/* widget input and output edges */\n\u00a0\u00a0\u00a0\u00a0struct list_head edges[2];\n\u00a0\u00a0\u00a0\u00a0/* used during DAPM updates */\n\u00a0\u00a0\u00a0\u00a0struct list_head dirty;\n[...]\n}\n```", "```\n/* codec domain */\n#define SND_SOC_DAPM_VMID(wname) \\\n\u00a0\u00a0\u00a0\u00a0.id = snd_soc_dapm_vmid, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0}\n```", "```\n#define SND_SOC_DAPM_SIGGEN(wname) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_siggen, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM }\n#define SND_SOC_DAPM_SINK(wname) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_sink, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM }\n#define SND_SOC_DAPM_INPUT(wname) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_input, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM }\n#define SND_SOC_DAPM_OUTPUT(wname) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_output, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM }\n#define SND_SOC_DAPM_MIC(wname, wevent) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_mic, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \\\n\u00a0\u00a0\u00a0\u00a0.event_flags = SND_SOC_DAPM_PRE_PMU | \u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_POST_PMD}\n#define SND_SOC_DAPM_HP(wname, wevent) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_hp, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \\\n\u00a0\u00a0\u00a0\u00a0.event_flags = SND_SOC_DAPM_POST_PMU | \u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PRE_PMD}\n#define SND_SOC_DAPM_SPK(wname, wevent) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_spk, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \\\n\u00a0\u00a0\u00a0\u00a0.event_flags = SND_SOC_DAPM_POST_PMU | \u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PRE_PMD}\n#define SND_SOC_DAPM_LINE(wname, wevent) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_line, .name = wname, \u00a0\u00a0\u00a0\u00a0.kcontrol_news = NULL, \\\n\u00a0\u00a0\u00a0\u00a0.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \\\n\u00a0\u00a0\u00a0\u00a0.event_flags = SND_SOC_DAPM_POST_PMU | \u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PRE_PMD}\n#define SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert) \\\n\u00a0\u00a0\u00a0\u00a0.reg = wreg, .mask = 1, .shift = wshift, \\\n\u00a0\u00a0\u00a0\u00a0.on_val = winvert ? 0 : 1, .off_val = winvert ? 1 : 0\n```", "```\n#define SND_SOC_DAPM_PGA(wname, wreg, wshift, winvert,\\ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wcontrols, wncontrols) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_pga, .name = wname, \\\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = wncontrols}\n#define SND_SOC_DAPM_OUT_DRV(wname, wreg, wshift, winvert,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wcontrols, wncontrols) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_out_drv, .name = wname, \\ \n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = wncontrols}\n#define SND_SOC_DAPM_MIXER(wname, wreg, wshift, winvert, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wcontrols, wncontrols)\\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_mixer, .name = wname, \\ \n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = wncontrols}\n#define SND_SOC_DAPM_MIXER_NAMED_CTL(wname, wreg, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wshift, winvert, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wcontrols, wncontrols)\\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_mixer_named_ctl, .name = wname, \\\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = wncontrols}\n#define SND_SOC_DAPM_SWITCH(wname, wreg, wshift, winvert, wcontrols) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_switch, .name = wname, \\ \n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = 1}\n#define SND_SOC_DAPM_MUX(wname, wreg, wshift, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0winvert, wcontrols) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_mux, .name = wname, \\\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = 1}\n#define SND_SOC_DAPM_DEMUX(wname, wreg, wshift, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0winvert, wcontrols) \\\n{\u00a0\u00a0\u00a0.id = snd_soc_dapm_demux, .name = wname, \\ \n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0.kcontrol_news = wcontrols, .num_kcontrols = 1}\n```", "```\n#define SND_SOC_DAPM_AIF_IN(wname, stname, wslot, wreg, wshift, winvert) \\\n{\u00a0\u00a0.id = snd_soc_dapm_aif_in, .name = wname, .sname = stname, \\\n\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), }\n#define SND_SOC_DAPM_AIF_IN_E(wname, stname, wslot, wreg, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wshift, winvert, wevent, wflags) \\\n{\u00a0\u00a0.id = snd_soc_dapm_aif_in, .name = wname, .sname = stname, \\\n\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0.event = wevent, .event_flags = wflags }\n#define SND_SOC_DAPM_AIF_OUT(wname, stname, wslot, wreg, wshift, winvert) \\\n{ .id = snd_soc_dapm_aif_out, .name = wname, .sname = stname, \\ \n\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), }\n#define SND_SOC_DAPM_AIF_OUT_E(wname, stname, wslot, wreg, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wshift, winvert, wevent, wflags) \\\n{ .id = snd_soc_dapm_aif_out, .name = wname, .sname = stname, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0\u00a0.event = wevent, .event_flags = wflags }\n```", "```\n#define SND_SOC_DAPM_DAC(wname, stname, wreg, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wshift, winvert) \\\n{\u00a0\u00a0\u00a0\u00a0.id = snd_soc_dapm_dac, .name = wname, .sname = stname, \\ \n\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert) }\n#define SND_SOC_DAPM_DAC_E(wname, stname, wreg, wshift, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0winvert, wevent, wflags) \\\n{\u00a0\u00a0\u00a0\u00a0.id = snd_soc_dapm_dac, .name = wname, .sname = stname, \\ \n\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0\u00a0.event = wevent, .event_flags = wflags}\n#define SND_SOC_DAPM_ADC(wname, stname, wreg, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wshift, winvert) \\\n{\u00a0\u00a0\u00a0\u00a0.id = snd_soc_dapm_adc, .name = wname, .sname = stname, \\ \n\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), }\n#define SND_SOC_DAPM_ADC_E(wname, stname, wreg, wshift,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0winvert, wevent, wflags) \\\n{\u00a0\u00a0\u00a0\u00a0.id = snd_soc_dapm_adc, .name = wname, .sname = stname, \\ \n\u00a0\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INIT_REG_VAL(wreg, wshift, winvert), \\\n\u00a0\u00a0\u00a0\u00a0\u00a0.event = wevent, .event_flags = wflags}\n#define SND_SOC_DAPM_CLOCK_SUPPLY(wname) \\\n{\u00a0\u00a0\u00a0\u00a0.id = snd_soc_dapm_clock_supply, .name = wname, \\\n\u00a0\u00a0\u00a0\u00a0.reg = SND_SOC_NOPM, .event = dapm_clock_event, \\\n\u00a0\u00a0\u00a0\u00a0.event_flags = SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD }\n```", "```\n/* dapm audio path between two widgets */\nstruct snd_soc_dapm_path {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0* source (input) and sink (output) widgets\n\u00a0\u00a0\u00a0\u00a0\u00a0* The union is for convenience, \u00a0\u00a0\u00a0\u00a0\u00a0* since it is a lot nicer to type\n\u00a0\u00a0\u00a0\u00a0\u00a0* p->source, rather than p->node[SND_SOC_DAPM_DIR_IN]\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0union {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_widget *source;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_widget *sink;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_widget *node[2];\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0/* status */\n\u00a0\u00a0\u00a0\u00a0u32 connect:1; /* source and sink widgets are connected */\n\u00a0\u00a0\u00a0\u00a0u32 walking:1; /* path is in the process of being walked */\n\u00a0\u00a0\u00a0\u00a0u32 weak:1; /* path ignored for power management */\n\u00a0\u00a0\u00a0\u00a0u32 is_supply:1;\u00a0\u00a0/* At least one of the connected widgets \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is a supply */\n\u00a0\u00a0\u00a0\u00a0int (*connected)(struct snd_soc_dapm_widget *source, struct\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_dapm_widget *sink);\n\u00a0\u00a0\u00a0\u00a0struct list_head list_node[2];\n\u00a0\u00a0\u00a0\u00a0struct list_head list_kcontrol;\n\u00a0\u00a0\u00a0\u00a0struct list_head list;\n};\n```", "```\nstruct snd_soc_dapm_route {\n\u00a0\u00a0\u00a0\u00a0const char *sink;\n\u00a0\u00a0\u00a0\u00a0const char *control;\n\u00a0\u00a0\u00a0\u00a0const char *source;\n\u00a0\u00a0\u00a0\u00a0/* Note: currently only supported for links where source is\n\u00a0\u00a0\u00a0\u00a0\u00a0a supply */\n\u00a0\u00a0\u00a0\u00a0int (*connected)(struct snd_soc_dapm_widget *source,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_widget *sink);\n};\n```", "```\n{Destination Widget, Switch, Source Widget},\n```", "```\n{end point, NULL, starting point},\n```", "```\n#define SOC_DAPM_SINGLE(xname, reg, shift, max, invert) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_volsw, \\\n\u00a0\u00a0\u00a0.get = snd_soc_dapm_get_volsw, \u00a0\u00a0\u00a0.put = snd_soc_dapm_put_volsw, \\\n\u00a0\u00a0\u00a0.private_value = SOC_SINGLE_VALUE(reg, shift, max, invert) } \n#define SOC_DAPM_SINGLE_TLV(xname, reg, shift, max, invert, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tlv_array) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_volsw, \\\n\u00a0\u00a0\u00a0.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_CTL_ELEM_ACCESS_READWRITE, \\\n\u00a0\u00a0\u00a0.tlv.p = (tlv_array), \\\n\u00a0\u00a0\u00a0.get = snd_soc_dapm_get_volsw,\u00a0\u00a0\n\u00a0\u00a0\u00a0.put = snd_soc_dapm_put_volsw, \\\n\u00a0\u00a0\u00a0.private_value = SOC_SINGLE_VALUE(reg, shift, max, invert) } \n#define SOC_DAPM_ENUM(xname, xenum) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_enum_double, \\\n\u00a0\u00a0\u00a0.get = snd_soc_dapm_get_enum_double, \\\n\u00a0\u00a0\u00a0.put = snd_soc_dapm_put_enum_double, \\\n\u00a0\u00a0\u00a0.private_value = (unsigned long)&xenum}\n#define SOC_DAPM_ENUM_VIRT(xname, xenum) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_enum_double, \\\n\u00a0\u00a0\u00a0.get = snd_soc_dapm_get_enum_virt, \\\n\u00a0\u00a0\u00a0.put = snd_soc_dapm_put_enum_virt, \\\n\u00a0\u00a0\u00a0.private_value = (unsigned long)&xenum} \n#define SOC_DAPM_ENUM_EXT(xname, xenum, xget, xput) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_enum_double, \\\n\u00a0\u00a0\u00a0.get = xget, \\\n\u00a0\u00a0\u00a0.put = xput, \\\n\u00a0\u00a0\u00a0.private_value = (unsigned long)&xenum }\n#define SOC_DAPM_VALUE_ENUM(xname, xenum) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \\\n\u00a0\u00a0\u00a0.info = snd_soc_info_enum_double, \\\n\u00a0\u00a0\u00a0.get = snd_soc_dapm_get_value_enum_double, \\\n\u00a0\u00a0\u00a0.put = snd_soc_dapm_put_value_enum_double, \\\n\u00a0\u00a0\u00a0.private_value = (unsigned long)&xenum }\n#define SOC_DAPM_PIN_SWITCH(xname) \\\n{\u00a0\u00a0.iface = SNDRV_CTL_ELEM_IFACE_MIXER, \u00a0\u00a0\u00a0.name = xname \" Switch\" , \\\n\u00a0\u00a0\u00a0.info = snd_soc_dapm_info_pin_switch, \\\n\u00a0\u00a0\u00a0.get = snd_soc_dapm_get_pin_switch, \\\n\u00a0\u00a0\u00a0.put = snd_soc_dapm_put_pin_switch, \\\n\u00a0\u00a0\u00a0.private_value = (unsigned long)xname }\n```", "```\nstatic const struct snd_kcontrol_new wm8960_loutput_mixer[] = {\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"PCM Playback Switch\", WM8960_LOUTMIX, 8,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"LINPUT3 Switch\", WM8960_LOUTMIX, 7, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"Boost Bypass Switch\", WM8960_BYPASS1, 7,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01, 0),\n};\nstatic const struct snd_kcontrol_new wm8960_routput_mixer[] = { \n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"PCM Playback Switch\", WM8960_ROUTMIX, 8,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"RINPUT3 Switch\", WM8960_ROUTMIX, 7, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"Boost Bypass Switch\", WM8960_BYPASS2, 7,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01, 0),\n};\nstatic const struct snd_kcontrol_new wm8960_mono_out[] = { \n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"Left Switch\", WM8960_MONOMIX1, 7, 1, 0),\n\u00a0\u00a0\u00a0\u00a0SOC_DAPM_SINGLE(\"Right Switch\", WM8960_MONOMIX2, 7, 1, 0),\n};\n```", "```\nstatic const struct snd_soc_dapm_widget wm8960_dapm_widgets[] = {\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INPUT(\"LINPUT3\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_INPUT(\"RINPUT3\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_SUPPLY(\"MICB\", WM8960_POWER1, 1, 0, NULL, 0),\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_DAC(\"Left DAC\", \"Playback\", WM8960_POWER2, 8,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_DAC(\"Right DAC\", \"Playback\", WM8960_POWER2, 7, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_MIXER(\"Left Output Mixer\", WM8960_POWER3, 3, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&wm8960_loutput_mixer[0], \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(wm8960_loutput_mixer)),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_MIXER(\"Right Output Mixer\", WM8960_POWER3, 2,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&wm8960_routput_mixer[0], \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(wm8960_routput_mixer)),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PGA(\"LOUT1 PGA\", WM8960_POWER2, 6, 0, NULL, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PGA(\"ROUT1 PGA\", WM8960_POWER2, 5, 0, NULL, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PGA(\"Left Speaker PGA\", WM8960_POWER2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04, 0, NULL, 0),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PGA(\"Right Speaker PGA\", WM8960_POWER2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03, 0, NULL, 0),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PGA(\"Right Speaker Output\", WM8960_CLASSD1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, 0, NULL, 0);\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_PGA(\"Left Speaker Output\", WM8960_CLASSD1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06, 0, NULL, 0),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"SPK_LP\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"SPK_LN\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"HP_L\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"HP_R\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"SPK_RP\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"SPK_RN\"),\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_OUTPUT(\"OUT3\"),\n};\nstatic const struct snd_soc_dapm_widget wm8960_dapm_widgets_out3[] = {\n\u00a0\u00a0\u00a0\u00a0SND_SOC_DAPM_MIXER(\"Mono Output Mixer\", WM8960_POWER2, 1,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&wm8960_mono_out[0], \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(wm8960_mono_out)),\n};\n```", "```\nstatic const struct snd_soc_dapm_route audio_paths[] = {\n\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0{\"Left Output Mixer\", \"LINPUT3 Switch\", \"LINPUT3\"},\n\u00a0\u00a0\u00a0{\"Left Output Mixer\", \"Boost Bypass Switch\", \u00a0\u00a0\u00a0\u00a0\"Left Boost Mixer\"},\n\u00a0\u00a0\u00a0{\"Left Output Mixer\", \"PCM Playback Switch\", \"Left DAC\"},\n\u00a0\u00a0\u00a0{\"Right Output Mixer\", \"RINPUT3 Switch\", \"RINPUT3\"},\n\u00a0\u00a0\u00a0{\"Right Output Mixer\", \"Boost Bypass Switch\", \u00a0\u00a0\u00a0\u00a0\"Right Boost Mixer\"},\n\u00a0\u00a0\u00a0{\"Right Output Mixer\", \"PCM Playback Switch\", \"Right DAC\"},\n\u00a0\u00a0\u00a0{\"LOUT1 PGA\", NULL, \"Left Output Mixer\"},\n\u00a0\u00a0\u00a0{\"ROUT1 PGA\", NULL, \"Right Output Mixer\"},\n\u00a0\u00a0\u00a0{\"HP_L\", NULL, \"LOUT1 PGA\"},\n\u00a0\u00a0\u00a0{\"HP_R\", NULL, \"ROUT1 PGA\"},\n\u00a0\u00a0\u00a0{\"Left Speaker PGA\", NULL, \"Left Output Mixer\"},\n\u00a0\u00a0\u00a0{\"Right Speaker PGA\", NULL, \"Right Output Mixer\"},\n\u00a0\u00a0\u00a0{\"Left Speaker Output\", NULL, \"Left Speaker PGA\"},\n\u00a0\u00a0\u00a0{\"Right Speaker Output\", NULL, \"Right Speaker PGA\"},\n\u00a0\u00a0\u00a0{\"SPK_LN\", NULL, \"Left Speaker Output\"},\n\u00a0\u00a0\u00a0{\"SPK_LP\", NULL, \"Left Speaker Output\"},\n\u00a0\u00a0\u00a0{\"SPK_RN\", NULL, \"Right Speaker Output\"},\n\u00a0\u00a0\u00a0{\"SPK_RP\", NULL, \"Right Speaker Output\"},\n};\nstatic const struct snd_soc_dapm_route audio_paths_out3[] = {\n\u00a0\u00a0\u00a0{\"Mono Output Mixer\", \"Left Switch\", \"Left Output Mixer\"},\n\u00a0\u00a0\u00a0{\"Mono Output Mixer\", \"Right Switch\", \"Right Output Mixer\"},\n\u00a0\u00a0\u00a0{\"OUT3\", NULL, \"Mono Output Mixer\"}\n};\n```", "```\nstatic int wm8960_add_widgets(struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_component *component)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_context *dapm =\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_component_get_dapm(component);\n\u00a0\u00a0\u00a0\u00a0struct snd_soc_dapm_widget *w;\n\u00a0\u00a0\u00a0\u00a0snd_soc_dapm_new_controls(dapm, wm8960_dapm_widgets, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(wm8960_dapm_widgets));\n\u00a0\u00a0\u00a0\u00a0snd_soc_dapm_add_routes(dapm, audio_paths, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(audio_paths)); \n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\nstatic int wm8960_probe(struct snd_soc_component *component)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0snd_soc_add_component_controls(component, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wm8960_snd_controls,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARRAY_SIZE(wm8960_snd_controls));\n\u00a0\u00a0\u00a0\u00a0wm8960_add_widgets(component);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\nstatic const struct snd_soc_component_driver \u00a0\u00a0\u00a0\u00a0\u00a0soc_component_dev_wm8960 = {\n\u00a0\u00a0\u00a0\u00a0.probe\t= wm8960_probe,\n\u00a0\u00a0\u00a0\u00a0.set_bias_level = wm8960_set_bias_level,\n\u00a0\u00a0\u00a0\u00a0.suspend_bias_off\t= 1,\n\u00a0\u00a0\u00a0\u00a0.idle_bias_on = 1,\n\u00a0\u00a0\u00a0\u00a0.use_pmdown_time = 1,\n\u00a0\u00a0\u00a0\u00a0.endianness\t= 1,\n\u00a0\u00a0\u00a0\u00a0.non_legacy_dai_naming\t= 1,\n};\nstatic int wm8960_i2c_probe(struct i2c_client *i2c,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct i2c_device_id *id)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0ret = devm_snd_soc_register_component(&i2c->dev, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&soc_component_dev_wm8960,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&wm8960_dai, 1);\n\u00a0\u00a0\u00a0\u00a0return ret;\n}\n```", "```\nint devm_snd_soc_register_component(struct device *dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_soc_component_driver *cmpnt_drv, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai_driver *dai_drv, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int num_dai)\n```", "```\nstatic const struct snd_soc_component_driver \u00a0\u00a0\u00a0\u00a0\u00a0soc_component_dev_wm8900 = {\n\u00a0\u00a0\u00a0\u00a0.probe\t= wm8900_probe,\n\u00a0\u00a0\u00a0\u00a0.suspend = wm8900_suspend,\n\u00a0\u00a0\u00a0\u00a0.resume = wm8900_resume,\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0/* control, widget and route setup */\n\u00a0\u00a0\u00a0\u00a0.controls\t= wm8900_snd_controls,\n\u00a0\u00a0\u00a0\u00a0.num_controls\t= ARRAY_SIZE(wm8900_snd_controls),\n\u00a0\u00a0\u00a0\u00a0.dapm_widgets\t= wm8900_dapm_widgets,\n\u00a0\u00a0\u00a0\u00a0.num_dapm_widgets\t= ARRAY_SIZE(wm8900_dapm_widgets),\n\u00a0\u00a0\u00a0\u00a0.dapm_routes \t= wm8900_dapm_routes,\n\u00a0\u00a0\u00a0\u00a0.num_dapm_routes\t= ARRAY_SIZE(wm8900_dapm_routes),\n};\n```", "```\nstatic const struct snd_soc_dai_ops wm8900_dai_ops = {\n\u00a0\u00a0\u00a0\u00a0.hw_params\t= wm8900_hw_params,\n\u00a0\u00a0\u00a0\u00a0.set_clkdiv\t= wm8900_set_dai_clkdiv,\n\u00a0\u00a0\u00a0\u00a0.set_pll\t= wm8900_set_dai_pll,\n\u00a0\u00a0\u00a0\u00a0.set_fmt\t= wm8900_set_dai_fmt,\n\u00a0\u00a0\u00a0\u00a0.digital_mute\t= wm8900_digital_mute,\n};\n```", "```\n#define WM8900_RATES (SNDRV_PCM_RATE_8000\u00a0\u00a0|\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_PCM_RATE_11025 |\\\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_PCM_RATE_16000 |\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_PCM_RATE_22050 |\\ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_PCM_RATE_44100 |\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_PCM_RATE_48000)\n#define WM8900_PCM_FORMATS \\\n\u00a0\u00a0\u00a0\u00a0(SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | \\ \n\u00a0\u00a0\u00a0\u00a0\u00a0SNDRV_PCM_FMTBIT_S24_LE)\nstatic struct snd_soc_dai_driver wm8900_dai = {\n\u00a0\u00a0\u00a0\u00a0.name = \"wm8900-hifi\",\n\u00a0\u00a0\u00a0\u00a0.playback = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.stream_name = \"HiFi Playback\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.channels_min = 1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.channels_max = 2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.rates = WM8900_RATES,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.formats = WM8900_PCM_FORMATS,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0.capture = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.stream_name = \"HiFi Capture\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.channels_min = 1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.channels_max = 2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.rates = WM8900_RATES,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.formats = WM8900_PCM_FORMATS,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0.ops = &wm8900_dai_ops,\n};\nstatic int wm8900_spi_probe(struct spi_device *spi)\n{\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0ret = devm_snd_soc_register_component(&spi->dev, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&soc_component_dev_wm8900, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&wm8900_dai, 1);\n\u00a0\u00a0\u00a0\u00a0return ret;\n}\n```", "```\nstatic const struct snd_soc_dai_ops rk_spdif_dai_ops = {\n\u00a0\u00a0\u00a0\u00a0[...]\n};\n/* SPDIF has no capture channel */\nstatic struct snd_soc_dai_driver rk_spdif_dai = {\n\u00a0\u00a0\u00a0\u00a0.probe = rk_spdif_dai_probe,\n\u00a0\u00a0\u00a0\u00a0.playback = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.stream_name = \"Playback\",\n[...]\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0.ops = &rk_spdif_dai_ops,\n};\n/* fill in the name only */\nstatic const struct snd_soc_component_driver rk_spdif_component = {\n\u00a0\u00a0\u00a0\u00a0.name = \"rockchip-spdif\",\n};\nstatic int rk_spdif_probe(struct platform_device *pdev)\n{\n\u00a0\u00a0\u00a0\u00a0struct device_node *np = pdev->dev.of_node;\n\u00a0\u00a0\u00a0\u00a0struct rk_spdif_dev *spdif;\n\u00a0\u00a0\u00a0\u00a0int ret;\n[...]\n\u00a0\u00a0\u00a0\u00a0spdif->playback_dma_data.addr = res->start + SPDIF_SMPDR;\n\u00a0\u00a0\u00a0\u00a0spdif->playback_dma_data.addr_width = \u00a0\u00a0\u00a0\u00a0DMA_SLAVE_BUSWIDTH_4_BYTES; \n\u00a0\u00a0\u00a0\u00a0spdif->playback_dma_data.maxburst = 4;\n\u00a0\u00a0\u00a0\u00a0ret = devm_snd_soc_register_component(&pdev->dev, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&rk_spdif_component, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&rk_spdif_dai, 1);\n\u00a0\u00a0\u00a0\u00a0if (ret) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&pdev->dev, \"Could not register DAI\\n\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto err_pm_runtime;\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);\n\u00a0\u00a0\u00a0\u00a0if (ret) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev_err(&pdev->dev, \"Could not register PCM\\n\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0goto err_pm_runtime;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```\nint devm_snd_dmaengine_pcm_register(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct device *dev,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const struct \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0snd_dmaengine_pcm_config *config, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int flags);\n```", "```\nstruct snd_dmaengine_pcm_config {\n\u00a0\u00a0\u00a0\u00a0int (*prepare_slave_config)(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_pcm_substream *substream,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_pcm_hw_params *params,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct dma_slave_config *slave_config);\n\u00a0\u00a0\u00a0\u00a0struct dma_chan *(*compat_request_channel)(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_pcm_runtime *rtd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_pcm_substream *substream);\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0dma_filter_fn compat_filter_fn;\n\u00a0\u00a0\u00a0\u00a0struct device *dma_dev;\n\u00a0\u00a0\u00a0\u00a0const char *chan_names[SNDRV_PCM_STREAM_LAST + 1];\n\u00a0\u00a0\u00a0\u00a0const struct snd_pcm_hardware *pcm_hardware;\n\u00a0\u00a0\u00a0\u00a0unsigned int prealloc_buffer_size;\n};\n```", "```\nstatic inline void snd_soc_dai_init_dma_data(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct snd_soc_dai *dai,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *playback, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *capture)\n{\n\u00a0\u00a0\u00a0\u00a0dai->playback_dma_data = playback;\n\u00a0\u00a0\u00a0\u00a0dai->capture_dma_data = capture;\n}\n```", "```\nstruct snd_dmaengine_dai_dma_data {\n\u00a0\u00a0\u00a0\u00a0dma_addr_t addr;\n\u00a0\u00a0\u00a0\u00a0enum dma_slave_buswidth addr_width;\n\u00a0\u00a0\u00a0\u00a0u32 maxburst;\n\u00a0\u00a0\u00a0\u00a0unsigned int slave_id;\n\u00a0\u00a0\u00a0\u00a0void *filter_data;\n\u00a0\u00a0\u00a0\u00a0const char *chan_name;\n\u00a0\u00a0\u00a0\u00a0unsigned int fifo_size;\n\u00a0\u00a0\u00a0\u00a0unsigned int flags;\n};\n```", "```\nstruct snd_pcm_hardware {\n\u00a0\u00a0\u00a0\u00a0unsigned int info;\n\u00a0\u00a0\u00a0\u00a0u64 formats;\n\u00a0\u00a0\u00a0\u00a0unsigned int rates;\n\u00a0\u00a0\u00a0\u00a0unsigned int rate_min;\n\u00a0\u00a0\u00a0\u00a0unsigned int rate_max;\n\u00a0\u00a0\u00a0\u00a0unsigned int channels_min;\n\u00a0\u00a0\u00a0\u00a0unsigned int channels_max;\n\u00a0\u00a0\u00a0\u00a0size_t buffer_bytes_max;\n\u00a0\u00a0\u00a0\u00a0size_t period_bytes_min;\n\u00a0\u00a0\u00a0\u00a0size_t period_bytes_max;\n\u00a0\u00a0\u00a0\u00a0unsigned int periods_min;\n\u00a0\u00a0\u00a0\u00a0unsigned int periods_max;\n\u00a0\u00a0\u00a0\u00a0size_t fifo_size;\n};\n```", "```\nstatic const struct snd_pcm_hardware stm32_i2s_pcm_hw = {\n\u00a0\u00a0\u00a0\u00a0.info = SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_MMAP,\n\u00a0\u00a0\u00a0\u00a0.buffer_bytes_max = 8 * PAGE_SIZE,\n\u00a0\u00a0\u00a0\u00a0.period_bytes_max = 2048,\n\u00a0\u00a0\u00a0\u00a0.periods_min = 2,\n\u00a0\u00a0\u00a0\u00a0.periods_max = 8,\n};\n```"]