- en: Chapter 3. Troubleshooting a Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。故障排除Web应用程序
- en: In the first and second chapters of this book, we covered the troubleshooting
    process, common locations for information, and useful troubleshooting commands.
    In this chapter, we will run through an example problem that has been created
    in order to demonstrate multiple troubleshooting and remediation steps. In particular,
    we will look at the steps required to troubleshoot issues with web-based applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一章和第二章中，我们介绍了故障排除过程、信息的常见位置和有用的故障排除命令。在本章中，我们将通过一个示例问题来运行，以演示多种故障排除和补救步骤。特别是，我们将看一下解决基于Web的应用程序问题所需的步骤。
- en: Throughout this chapter, I will go through each step of the troubleshooting
    process and explain the reasoning behind each step. While the problem that this
    chapter covers may not be an extremely common issue, it is important to look at
    the process and tools used. The process and tools used in this chapter can be
    applied to most web application issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将逐步介绍故障排除过程的每一步，并解释每一步背后的原因。虽然本章涵盖的问题可能不是一个非常常见的问题，但重要的是看待解决问题的过程和使用的工具。本章中使用的过程和工具可以应用于大多数Web应用程序问题。
- en: A small back story
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个小小的背景故事
- en: Within each chapter of this book, you will find an example issue that covers
    the common troubleshooting topics. While the focus of this book is to show the
    commands and concepts necessary to resolve these types of issues, it is also important
    to show the process around resolving them. To do this, we will explore these issues
    as if we were a new systems administrator who recently joined a new company.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的每一章中，您都会找到一个示例问题，涵盖了常见的故障排除主题。虽然本书的重点是展示解决这些类型问题所需的命令和概念，但展示解决问题的过程也是很重要的。为了做到这一点，我们将探讨这些问题，就好像我们是最近加入新公司的新系统管理员一样。
- en: Each issue will be presented a little differently, but each one will start with
    an issue being reported.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每个问题都会以稍微不同的方式呈现，但每个问题都将以报告问题的方式开始。
- en: The reported issue
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告的问题
- en: While starting our new role at a new company, we have been assigned to answer
    phone calls for the company's **Network Operations Center** (**NOC**). In this
    role, we will focus on resolving issues within the company's environment and are
    expected to do so very quickly. For our first issue, we have received a phone
    call; on the other end of this phone call is a business user who has an issue.
    *All of a sudden, our blog is showing an installation page and not our posts!*
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在新公司开始新角色时，我们被指派接听公司**网络运营中心**（**NOC**）的电话。在这个角色中，我们将专注于解决公司环境中的问题，并且期望能够非常快速地解决问题。对于我们的第一个问题，我们接到了一个电话；在电话的另一端是一个有问题的业务用户。*突然间，我们的博客显示的是一个安装页面，而不是我们的帖子！*
- en: Now that we have a reported issue, let's start working through the troubleshooting
    process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了一个报告的问题，让我们开始逐步进行故障排除过程。
- en: Data gathering
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据收集
- en: If we look back at [Chapter 1](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 1. Troubleshooting Best Practices"), *Troubleshooting Best Practices*,
    the first step in the troubleshooting process is to understand the problem statement.
    In this section, we are going to explore how the problem was reported and will
    try to collect any data that we can to find the root cause of the issue.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下[第一章](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "第一章。故障排除最佳实践")，*故障排除最佳实践*，故障排除过程的第一步是理解问题陈述。在本节中，我们将探讨问题是如何报告的，并尝试收集任何数据，以找到问题的根本原因。
- en: For this example, we were notified of the issue via a phone call. This is actually
    lucky as we have an end user on the phone and can ask questions to get more information
    from him/her.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们是通过电话通知的问题。这实际上是幸运的，因为我们有一个最终用户在电话那头，可以向他/她提问以获取更多信息。
- en: Before asking the person reporting the issue for more information, let's first
    take a look at what was already answered. *All of a sudden, our blog is showing
    an installation page and not our posts!*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在要求报告问题的人提供更多信息之前，让我们先看看已经得到的回答。*突然间，我们的博客显示的是一个安装页面，而不是我们的帖子！*
- en: At first, you may feel that this problem statement is vague; this is because
    it is vague. However, there is still quite a bit of useful information in this
    single sentence. If we dissect the reported issue, we can gain a better understanding
    of the problem.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，你可能觉得这个问题陈述模糊不清；这是因为它确实模糊不清。然而，在这个简单的句子中仍然包含了相当多有用的信息。如果我们分析一下报告的问题，我们就可以更好地理解问题。
- en: '"Our blog is showing an installation page"'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “我们的博客显示的是一个安装页面”
- en: '"All of a sudden"'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “突然间”
- en: '"not our posts!"'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “不是我们的帖子！”
- en: 'From these three segments, we can assume the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从这三个部分中，我们可以假设以下内容：
- en: The blog is showing an unexpected page
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 博客显示了一个意外的页面
- en: This blog was previously showing posts
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个博客以前显示过帖子
- en: At some point, this changed and it seems that it was somewhat recently
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某个时候，这种情况发生了变化，而且似乎是最近发生的
- en: While the above is a pretty good start for determining whether there is an issue
    and what it is related to, it does not give us enough to create a hypothesis yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然以上内容对于确定是否存在问题以及问题的相关性是一个不错的开始，但它还不足以让我们得出假设。
- en: Asking questions
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提问
- en: 'In order to formulate a hypothesis, we will need more information. One method
    of getting this information is to ask the person reporting the issue. In order
    to get more information, we will ask the business user the following questions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制定假设，我们需要更多信息。获取这些信息的一种方法是询问报告问题的人。为了获取更多信息，我们将向业务用户提出以下问题：
- en: When was the last time you saw the blog working?
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你上次看到博客工作是什么时候？
- en: Last night.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 昨晚。
- en: What is the blog's address?
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 博客的地址是什么？
- en: '`http://blog.example.com`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://blog.example.com`'
- en: Did you receive any other errors?
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你有收到其他错误吗？
- en: No.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 没有。
- en: While the above questions are not enough to identify the problem, they do give
    us a starting point of where to start looking.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然以上问题还不足以确定问题，但它们给了我们一个开始寻找问题的起点。
- en: Duplicating the issue
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制问题
- en: As previously stated in [Chapter 1](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 1. Troubleshooting Best Practices"), *Troubleshooting Best Practices*
    one of the best methods of finding information is to duplicate the issue. In this
    case, it seems that we can duplicate the issue by simply going to the address
    provided.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在[第1章](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4 "第1章。故障排除最佳实践")中，*故障排除最佳实践*中找到信息的最佳方法之一是复制问题。在这种情况下，似乎我们可以通过简单地访问提供的地址来复制问题。
- en: '![Duplicating the issue](img/00002.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![复制问题](img/00002.jpeg)'
- en: In the previous screenshot, we can see that the blog is performing just as the
    user described. When we went to the provided URL, we were presented with a default
    WordPress installation screen.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到博客的表现与用户描述的一样。当我们访问提供的URL时，我们看到了一个默认的WordPress安装界面。
- en: 'Does this give us any clue about what the cause of the issue is? No, not really,
    not unless we have seen this issue before. While this may not tell us the cause
    of the issue, it does confirm that the issue that the user has reported is reproducible.
    This step has also told us the name of the software that we are troubleshooting:
    WordPress.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否给我们提供了关于问题原因的任何线索？不，实际上并没有，除非我们之前见过这个问题。虽然这可能不告诉我们问题的原因，但它确实确认了用户报告的问题是可以重现的。这一步还告诉了我们正在排查的软件的名称：WordPress。
- en: WordPress is one of the most popular open source blogging platforms. In this
    chapter, it is assumed that we have no experience managing WordPress and will
    need to find any information that we need around this web application through
    online sources.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress是最流行的开源博客平台之一。在本章中，我们假设我们没有管理WordPress的经验，需要通过在线来源找到我们需要的关于这个Web应用程序的任何信息。
- en: Understanding the environment
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解环境
- en: Since we are the new systems administrator, at this point, we know very little
    about this environment, which means that we have little knowledge of how this
    blog is deployed. In fact, we do not even know which server it runs from.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们是新的系统管理员，在这一点上，我们对这个环境知之甚少，这意味着我们对这个博客是如何部署的知之甚少。事实上，我们甚至不知道它是从哪个服务器运行的。
- en: Where is this blog hosted?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这个博客托管在哪里？
- en: One thing that we do know, however, is that all servers managed by our company
    have IPs within the 192.168.0.0/16 subnet. In order to determine whether this
    is an issue that we can resolve, we first need to determine whether the blog is
    on a server managed by our company. If this blog doesn't exist on a server managed
    by this company, our troubleshooting options may be limited.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们知道的一件事是，我们公司管理的所有服务器的IP都在192.168.0.0/16子网内。为了确定这是否是我们可以解决的问题，我们首先需要确定博客是否在我们公司管理的服务器上。如果这个博客不是在我们公司管理的服务器上，我们的故障排除选项可能会受到限制。
- en: One way to determine where the blog is hosted is to simply look up the IP address
    of the `blog.example.com` address.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确定博客托管位置的一种方法是简单地查找`blog.example.com`地址的IP地址。
- en: Lookup IPs with nslookup
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用nslookup查找IP
- en: 'There are many ways to look up the IP address of a DNS name; the command that
    we will discuss is the `nslookup` command. To use this command, simply execute
    `nslookup` followed by the DNS name to look up: `blog.example.com` for this example.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以查找DNS名称的IP地址；我们将讨论的命令是`nslookup`命令。要使用这个命令，只需执行`nslookup`，然后是要查找的DNS名称：例如，对于这个例子，是`blog.example.com`。
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding output, the result may be a bit confusing for those unfamiliar
    with `nslookup`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，对于那些不熟悉`nslookup`的人来说，结果可能有点令人困惑。
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We know that the preceding information is the result of the `nslookup` query.
    This block is saying that the `blog.example.com` domain's address is `192.168.33.11`.
    The first block of output from `nslookup` is simply telling us which DNS server
    was used to look up this information.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道前面的信息是`nslookup`查询的结果。这个块表示`blog.example.com`域的地址是`192.168.33.11`。`nslookup`的输出的第一个块只是告诉我们使用了哪个DNS服务器来查找这些信息。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see from this block that the DNS server used was `192.0.2.1`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个块中我们可以看到使用的DNS服务器是`192.0.2.1`。
- en: What about ping, dig, or other tools?
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ping、dig或其他工具呢？
- en: There are many commands that we could have used to look up the IP address of
    this domain. We could have used `dig`, `host`, or even `ping`. The reason that
    we chose the `nslookup` command is that for the most part, it is included with
    most operating systems. So, irrespective of whether you need to look up an IP
    address from a Windows, Mac, or Linux desktop, you can always use the `nslookup`
    command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多命令可以用来查找这个域的IP地址。我们可以使用`dig`、`host`，甚至`ping`。我们选择`nslookup`命令的原因是，它大多数情况下都包含在大多数操作系统中。因此，无论您需要从Windows、Mac还是Linux桌面查找IP地址，您都可以使用`nslookup`命令。
- en: One caveat with the `nslookup` command, however, is that it specifically uses
    DNS to look up the address. It does not respect values in `/etc/hosts` or any
    other name service specified in `/etc/nsswitch.conf`. This is something that we
    will explore more in the later chapters; for now, we will assume that the IP address
    of `192.168.33.11` is the correct IP.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`nslookup`命令的一个注意事项是，它专门使用DNS来查找地址。它不尊重`/etc/hosts`中的值或`/etc/nsswitch.conf`中指定的任何其他名称服务。这是我们将在后面的章节中更多探讨的内容；现在，我们将假设`192.168.33.11`的IP地址是正确的。
- en: Ok, it's within our environment; now what?
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 好的，它在我们的环境中；现在怎么办？
- en: Since we are working with a Linux server, the most common way to manage that
    server is via **Secure Shell** (**SSH**). SSH is a secure network service that
    allows users to remotely access a server's shell. For this book, we are going
    to assume that you are already familiar with logging into a server via SSH. Whether
    you use the SSH command-line client or a desktop client like PuTTY, it is assumed
    that you are able to log into the server with SSH.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Linux服务器，管理该服务器的最常见方式是通过**Secure Shell**（**SSH**）。SSH是一种安全的网络服务，允许用户远程访问服务器的shell。对于本书，我们将假设您已经熟悉通过SSH登录服务器。无论您使用SSH命令行客户端还是像PuTTY这样的桌面客户端，我们假设您能够使用SSH登录服务器。
- en: In this scenario, we use a laptop that has its own shell environment. To log
    into our server, we simply execute the `ssh` command from our terminal window.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用的是一个具有自己shell环境的笔记本电脑。要登录到我们的服务器，我们只需从终端窗口执行`ssh`命令。
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once logged in, the first information-gathering command that we execute is the
    `w` command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，我们执行的第一个信息收集命令是`w`命令。
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In [Chapter 2](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 2. Troubleshooting Commands and Sources of Useful Information"), *Troubleshooting
    Commands and Sources of Useful Information*, we covered the `w` command and mentioned
    that it is the first command executed. We can see quite a bit of useful information
    in the output of the `w` command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4 "第2章。故障排除命令和有用信息的来源")中，*故障排除命令和有用信息的来源*，我们介绍了`w`命令，并提到它是第一个执行的命令。我们可以在`w`命令的输出中看到相当多有用的信息。
- en: 'From this output, we can determine the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个输出中，我们可以确定以下内容：
- en: Only 1 user is currently logged in (which is our login session)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前只有1个用户登录（这是我们的登录会话）
- en: The server in question has been up for 2 days
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题的服务器已经运行了2天
- en: The load average is low, which suggests normal
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载平均值很低，这表明正常
- en: Overall, at the first glance, the server seems to be performing normally. The
    fact that the issue started last night suggests that the issue did not start after
    the reboot 2 days ago. With the load average low, it is also safe at this point
    to assume that the issue is not related to the system load.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，乍一看，服务器似乎表现正常。问题是昨晚开始的，这表明问题并不是在2天前的重启之后开始的。负载平均值低，因此在这一点上可以安全地假设问题与系统负载无关。
- en: What services are installed and running?
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装并运行了哪些服务？
- en: Since we have never logged into this server before, and are completely new to
    this environment, the first thing that we should do is find out what services
    are running on this server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们以前从未登录过这台服务器，并且对这个环境完全不熟悉，我们应该首先找出这台服务器上运行着哪些服务。
- en: Since we know from the install page that the blog is a WordPress blog, we can
    search Google about the services that it requires. We can do this by using the
    search term "WordPress install requirements."
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们从安装页面得知博客是WordPress博客，我们可以搜索Google关于它所需服务的信息。我们可以通过使用搜索词“WordPress安装要求”来做到这一点。
- en: 'This search string returned with the following URL as the first result: [https://wordpress.org/about/requirements/](https://wordpress.org/about/requirements/).
    This page contains the installation requirements for WordPress and lists the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个搜索字符串返回了以下URL作为第一个结果：[https://wordpress.org/about/requirements/](https://wordpress.org/about/requirements/)。这个页面包含了WordPress的安装要求，并列出了以下内容：
- en: PHP 5.2.4
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 5.2.4
- en: MySQL 5.0 or higher
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 5.0或更高版本
- en: Either Apache or Nginx web servers
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要么是Apache要么是Nginx Web服务器
- en: From the fact that we can access the install page, we can assume that a web
    server and PHP are installed and somewhat working. However, it is always best
    to validate rather than assume.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们可以访问安装页面这一事实，我们可以假设已安装并且部分工作的是一个Web服务器和PHP。然而，最好的做法是验证而不是假设。
- en: Validate the web server
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证Web服务器
- en: Since WordPress recommends either the **Apache** or the **Nginx** web server,
    we first need to determine which is installed and, more importantly, identify
    which is in use for this WordPress application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于WordPress推荐使用**Apache**或**Nginx** Web服务器，我们首先需要确定安装了哪一个，更重要的是，确定这个WordPress应用程序正在使用哪一个。
- en: 'The following are a few ways to identify which web servers are installed and
    running:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几种识别已安装和正在运行的Web服务器的方法：
- en: We could use `rpm` to look at the packages installed
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`rpm`来查看已安装的软件包。
- en: We could use `ps` to look at the processes running
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`ps`来查看正在运行的进程
- en: We could simply go to a non-existent page via a browser and see whether the
    error page says which web server is running
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以简单地通过浏览器访问一个不存在的页面，看看错误页面显示的是哪个Web服务器在运行
- en: We can also go to `/var/logs` and look around to see what log files exist or
    don't exist
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以进入`/var/logs`并查看周围存在或不存在的日志文件
- en: All of these methods are valid and have their own benefits. For this example,
    we will use a *5th* method (not mentioned earlier), which will answer two questions
    about the web server configuration on this server.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都是有效的，并且都有自己的好处。在这个例子中，我们将使用一个*第五*种方法（之前没有提到过），它将回答关于这个服务器上Web服务器配置的两个问题。
- en: The first step of this method will be to determine which process is listening
    on port 80.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的第一步将是确定哪个进程在端口80上监听。
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As discussed in [Chapter 2](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 2. Troubleshooting Commands and Sources of Useful Information"), *Troubleshooting
    Commands and Sources of Useful Information*, the `netstat` command can be used
    to determine which ports are in use with the `–na` flags. If we simply add the
    `–p` (port) flag to `netstat`, we can also see which process is listening on each
    port.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4 "第2章。故障排除命令和有用信息的来源")中所讨论的，*故障排除命令和有用信息的来源*，`netstat`命令可以用来确定使用`-na`标志的端口。如果我们简单地添加`-p`（端口）标志到`netstat`，我们还可以看到每个端口上监听的进程。
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In order to identify which processes are listening on each port, the `netstat`
    command must be executed with **super user**-level permissions. As such, we use
    the `su` command to switch to the **root** user before executing `netstat`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定每个端口上监听的进程，必须以**超级用户**级别权限执行`netstat`命令。因此，我们使用`su`命令在执行`netstat`之前切换到**root**用户。
- en: Throughout this book, any command preceded with `$` is run as an unprivileged
    user, while commands preceded with `#` are executed as the root user.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，任何以`$`开头的命令都是作为非特权用户运行的，而以`#`开头的命令是作为root用户执行的。
- en: Port 80 is the default port for HTTP requests; as such, if we look back at the
    steps performed to duplicate the issue at hand, we can see that the address used
    was `http://blog.example.com`. Since this is an HTTP address and does not specify
    a different port, this means that the service that serves the WordPress installation
    page is listening on port 80.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 端口80是HTTP请求的默认端口；因此，如果我们回顾一下复制问题的步骤，我们可以看到使用的地址是`http://blog.example.com`。由于这是一个HTTP地址，没有指定不同的端口，这意味着提供WordPress安装页面的服务正在监听80端口。
- en: From the output of the `netstat` command, we can see that process 952 is listening
    on port 80\. The `netstat` output also shows that process 952 is running the `httpd`
    binary. On RHEL systems, this `httpd` binary is most often Apache.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从`netstat`命令的输出中，我们可以看到进程952正在监听80端口。`netstat`输出还显示进程952正在运行`httpd`二进制文件。在RHEL系统上，这个`httpd`二进制文件往往是Apache。
- en: 'We can validate whether this is the case with the `ps` command with the `–elf`
    flags discussed in [Chapter 2](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 2. Troubleshooting Commands and Sources of Useful Information"), *Troubleshooting
    Commands and Sources of Useful Information*. We will also search the output of
    the `ps` command with the `grep` command, searching for the string "952":'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ps`命令和[第2章](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "第2章。故障排除命令和有用信息来源"), *故障排除命令和有用信息来源*中讨论的`–elf`标志来验证这一点。我们还将使用`grep`命令搜索`ps`命令的输出，搜索字符串"952"：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the above output, we can see that process 952 and its child processes are
    running under the **apache** user. This confirms that the software in use is most
    likely Apache, but to be extra diligent, we can execute the `httpd` binary with
    the `–version` flag to print the version of the web server software.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上面的输出，我们可以看到进程952及其子进程是在**apache**用户下运行的。这证实了所使用的软件很可能是Apache，但为了更加谨慎，我们可以使用`httpd`二进制文件和`–version`标志来打印Web服务器软件的版本。
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The output of the `httpd` binary shows that it is in fact the Apache web server,
    which matches the WordPress requirements.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpd`二进制文件的输出显示，它实际上是Apache Web服务器，符合WordPress的要求。'
- en: 'At this point, we have found out the following facts about the web server in
    use for this server:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经发现了关于此服务器使用的Web服务器的以下事实：
- en: The web server is Apache
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务器是Apache
- en: The Apache process is running
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache进程正在运行
- en: The Apache version is 2.4.6
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache版本是2.4.6
- en: The Apache process is listening on port 80
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache进程正在监听80端口
- en: It is possible to identify the same information by using other methods such
    as `rpm`. The good part of this method is that if the server has two web server
    services installed, we know which of these services is listening on port 80\.
    This also tells us which service provides the WordPress install page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过其他方法识别相同的信息，比如使用`rpm`。这种方法的好处是，如果服务器安装了两个Web服务器服务，我们就知道这些服务中的哪一个正在监听80端口。这也告诉我们哪个服务提供了WordPress安装页面。
- en: Validating the database service
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证数据库服务
- en: A common WordPress implementation is to run the Apache, PHP, and MySQL services
    all on one server. Sometimes, however, the MySQL service will be run from another
    server or servers. To better understand the environment, we should check whether
    this environment runs MySQL locally or from another server.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的WordPress实现是在一个服务器上同时运行Apache、PHP和MySQL服务。然而，有时MySQL服务会从另一个服务器或多个服务器上运行。为了更好地了解环境，我们应该检查这个环境是在本地运行MySQL还是从另一个服务器运行。
- en: 'To check this, we will once again use the `ps` command; this time, however,
    we will use `grep` to search for a process that matches the string "mysql":'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查这一点，我们将再次使用`ps`命令；不过这一次，我们将使用`grep`来搜索与字符串"mysql"匹配的进程：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see from the preceding output, there is in fact a MySQL process
    currently running. It is also important to note that the `ps` output shows that
    the `mysqld` process is using the following option: `–log-error=/var/log/mariadb/mariadb.log`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看出，实际上有一个MySQL进程正在运行。还需要注意的是，`ps`输出显示`mysqld`进程正在使用以下选项：`–log-error=/var/log/mariadb/mariadb.log`。
- en: 'This is important for two reasons: The first is that this is the location of
    the log file for the `mysqld` process, and the second is the fact that this log
    file is for **MariaDB**, which is different from MySQL.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点很重要，有两个原因：第一，这是`mysqld`进程的日志文件的位置，第二，这个日志文件是**MariaDB**的，与MySQL不同。
- en: We can confirm whether MySQL or MariaDB is installed by using the `rpm` and
    `egrep` commands.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`rpm`和`egrep`命令来确认是否安装了MySQL或MariaDB。
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `egrep` command is similar to `grep`; however, it accepts search strings
    in the form of regular expressions. In the above command, we used `egrep` to search
    for either the string "`mariadb`" or the string "`mysql`." From the preceding
    output, we can see that this server does in fact have MariaDB installed but not
    MySQL.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`egrep`命令类似于`grep`；但是，它接受正则表达式形式的搜索字符串。在上面的命令中，我们使用`egrep`来搜索字符串"`mariadb`"或字符串"`mysql`"。从前面的输出中，我们可以看到这台服务器实际上安装了MariaDB，但没有安装MySQL。'
- en: With this information, we can make the assumption that the `mysqld` process
    that is running is in fact a MariaDB binary. We can verify this by using the `rpm`
    command with the `–q` (query) and `–l` (list all files) flags.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，我们可以假设正在运行的`mysqld`进程实际上是一个MariaDB二进制文件。我们可以使用`rpm`命令和`–q`（查询）以及`–l`（列出所有文件）标志来验证这一点。
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can see from the `rpm` command's output that the running `/usr/libexec/mysqld`
    binary is deployed as part of the **mariadb-server** package. Showing that the
    running database process is in fact MariaDB and was installed via the mariadb-server
    package.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`rpm`命令的输出中看到，运行的`/usr/libexec/mysqld`二进制文件是作为**mariadb-server**软件包的一部分部署的。这表明运行的数据库进程实际上是MariaDB，并且是通过mariadb-server软件包安装的。
- en: 'At this point, we have found the following facts about the database service
    running on this server:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经发现了关于此服务器上运行的数据库服务的以下事实：
- en: The database service is actually MariaDB
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库服务实际上是MariaDB
- en: MariaDB is running
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB正在运行
- en: The log files for this service are at `/var/log/mariadb/`
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此服务的日志文件位于`/var/log/mariadb/`
- en: While MariaDB is a drop-in replacement for MySQL, the requirements for WordPress
    do not list it as the preferred database service. It is important to make note
    of this difference as it may determine the root cause of the reported issue.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然MariaDB是MySQL的可替代品，但WordPress的要求中并未将其列为首选数据库服务。重要的是要注意这种差异，因为它可能确定报告的问题的根本原因。
- en: Validating PHP
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证PHP
- en: Since we know that PHP is required for WordPress, we should also check whether
    it is installed. We can validate this by again using the `rpm` command.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道WordPress需要PHP，我们还应该检查它是否已安装。我们可以再次使用`rpm`命令验证这一点。
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: PHP by itself is not designed to run as a service such as Apache or MySQL, but
    rather as a web server module. However, it is possible to use a service such as
    `php-fpm` as an application server. This allows PHP to run as a service and to
    be called by an upstream web server.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: PHP本身并不是设计为像Apache或MySQL那样作为服务运行，而是作为Web服务器模块。但是，可以使用诸如`php-fpm`之类的服务作为应用程序服务器。这允许PHP作为服务运行，并由上游Web服务器调用。
- en: To check whether this server runs `php-fpm` or any other service that frontends
    PHP, we can again use the `ps` and `grep` commands.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查此服务器是否运行`php-fpm`或任何其他用于前端PHP的服务，我们可以再次使用`ps`和`grep`命令。
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By using the `ps` command, we do not see any specific PHP service; however,
    when going to the blog, we were able to see the install page. This suggests that
    PHP is configured to run via Apache directly. We can validate this by executing
    the `httpd` binary again with the `–M` (modules) flag.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`ps`命令，我们没有看到任何特定的PHP服务；然而，当访问博客时，我们能够看到安装页面。这表明PHP配置为直接通过Apache运行。我们可以通过再次执行带有`-M`（模块）标志的`httpd`二进制文件来验证这一点。
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `–M` flag will tell the `httpd` binary to list all of the loaded modules.
    Included in this list is `php5_module`, which means that this installation of
    Apache is able to run PHP applications via `php5_module`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`-M`标志将告诉`httpd`二进制文件列出所有加载的模块。在此列表中包括`php5_module`，这意味着Apache的此安装能够通过`php5_module`运行PHP应用程序。'
- en: A summary of installed and running services
  id: totrans-126
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 已安装并正在运行的服务摘要
- en: 'At this point, we have identified the following from our data collection:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经从我们的数据收集中确定了以下内容：
- en: The WordPress requirement of Apache is installed and running
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并运行了Apache的WordPress要求
- en: The WordPress requirement of MySQL appears to be met by MariaDB, which is installed
    and running
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB似乎满足了WordPress对MySQL的要求，已安装并运行
- en: The WordPress requirement of PHP is installed and appears to be working
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并似乎正在运行WordPress的PHP要求
- en: It appears that WordPress is deployed in a single-server setup rather than a
    multi-server setup
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看起来WordPress部署在单服务器设置中，而不是多服务器设置中
- en: We can assume for now that these facts mean that the issue is not caused by
    a missing WordPress requirement.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时可以假设这些事实意味着问题不是由缺少WordPress要求引起的。
- en: By gathering all of these data points, we have not only learned more about the
    environment that we are troubleshooting but also eliminated several possible causes
    of this issue.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过收集所有这些数据点，我们不仅了解了我们正在解决故障的环境，还排除了这个问题的几种可能原因。
- en: Looking for error messages
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找错误消息
- en: Now that the installed and configured services have been identified, we know
    where to start looking for errors or helpful messages. In the next stage of data
    collection, we are going to look through the various log files of these services
    to try and to identify any errors that may indicate the cause of this issue.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经确定了已安装和配置的服务，我们知道从哪里开始查找错误或有用的消息。在数据收集的下一阶段，我们将浏览这些服务的各种日志文件，以尝试识别可能指示此问题原因的任何错误。
- en: Apache logs
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache日志
- en: Since Apache calls PHP when web requests are made, the most likely log file
    to contain PHP-related errors is the Apache error log. The default log location
    for RHEL's `httpd` package is `/var/log/httpd/`. However, we don't know just yet
    whether the running `httpd` service is the RHEL packaged version.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Apache在进行Web请求时调用PHP，最有可能包含与PHP相关错误的日志文件是Apache错误日志。RHEL的`httpd`软件包的默认日志位置是`/var/log/httpd/`。但是，我们还不知道运行的`httpd`服务是否是RHEL打包版本。
- en: Finding the location of Apache's logs
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找Apache日志的位置
- en: Since we don't know the location of Apache's logs, we will need to find them.
    One way to find log files is to simply look in `/var/log` for any file or folder
    that matches the name of the service in question. This solution, however, is a
    bit too simple for our example.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不知道Apache日志的位置，我们需要找到它们。查找日志文件的一种方法是简单地在`/var/log`中查找与所讨论服务的名称匹配的任何文件或文件夹。然而，这种解决方案对于我们的例子来说太简单了。
- en: To find the location of the `httpd` log files, we will use a method discussed
    in [Chapter 2](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 2. Troubleshooting Commands and Sources of Useful Information"), *Troubleshooting
    Commands and Sources of Useful Information* and search through the service's configuration
    files. The `/etc` folder is the default folder for system configuration files.
    It is also the standard location for service configurations. Therefore, it is
    fairly safe to assume that the `/etc/` folder will contain a configuration file
    or folder for the `httpd` service.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到`httpd`日志文件的位置，我们将使用[第2章](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "第2章。故障排除命令和有用信息来源")中讨论的一种方法，*故障排除命令和有用信息来源*，并搜索服务的配置文件。`/etc`文件夹是系统配置文件的默认文件夹。它也是服务配置的标准位置。因此，可以相当安全地假设`/etc/`文件夹将包含`httpd`服务的配置文件或文件夹。
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding commands, we can see that we can switch to the `/etc/httpd`
    folder, which contains several configuration files. Since we don't know which
    configuration file contains the logging configuration, we could spend quite a
    bit of time reading through each configuration file.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们可以看到我们可以切换到包含多个配置文件的`/etc/httpd`文件夹。由于我们不知道哪个配置文件包含日志配置，我们可能需要花费相当长的时间阅读每个配置文件。
- en: To make this process faster, we can use the `grep` command to search through
    all of the files for the string "`log`." Since the `/etc/httpd/` folder contains
    subfolders, we can simply add the `–r` (recursive) flag to cause the `grep` command
    to search through files contained in these subfolders.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快这个过程，我们可以使用`grep`命令来搜索所有文件中的字符串“`log`”。由于`/etc/httpd/`文件夹包含子文件夹，我们可以简单地添加`-r`（递归）标志，使`grep`命令搜索这些子文件夹中包含的文件。
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The defined logs use the relative path of `logs/`; this path is relative to
    the `httpd` services running folder. In this case, this means that the logs' folder
    is actually `/etc/httpd/logs`; however, this may not always be the case. To validate
    whether this is the case, we can simply perform a folder listing with the `ls`
    command in the `/etc/httpd` folder.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的日志使用相对路径`logs/`；这个路径是相对于运行文件夹的`httpd`服务。在这种情况下，这意味着日志文件夹实际上是`/etc/httpd/logs`；然而，这并不总是这种情况。要验证是否是这种情况，我们可以简单地在`/etc/httpd`文件夹中使用`ls`命令进行文件夹列表。
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: From the `ls` command, we can see that `/etc/httpd/logs` exists; however, this
    is not a folder but a symbolic link to `/var/log/httpd/`. This means that the
    two log files, namely `access_log` and `error_log`, are actually located within
    the `/var/log/httpd/` folder.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 从`ls`命令中，我们可以看到`/etc/httpd/logs`存在；然而，这不是一个文件夹，而是一个符号链接到`/var/log/httpd/`。这意味着这两个日志文件，即`access_log`和`error_log`，实际上位于`/var/log/httpd/`文件夹内。
- en: Reviewing the logs
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 审查日志
- en: Now that we know where the log files are located, we can search these log files
    for any useful information. To do this, we will use the `tail` command.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道日志文件的位置，我们可以搜索这些日志文件以获取任何有用的信息。为此，我们将使用`tail`命令。
- en: The `tail` command is a useful command that can be used to read the last part
    of a file or files. By default, when `tail` is executed without any flags, the
    command will print the last 10 lines of the specified file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail`命令是一个有用的命令，可以用来读取文件的最后部分。默认情况下，当`tail`没有任何标志地执行时，该命令将打印指定文件的最后10行。'
- en: For our troubleshooting, we want to not only see the last 10 lines of data but
    also watch the file for any new data being appended. To do this, we can use the
    `–f` (follow) flag, which tells `tail` to follow the specified file or files.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的故障排除，我们不仅想看到最后10行数据，还想观察文件是否有任何新的数据被追加。为此，我们可以使用`-f`（跟踪）标志，告诉`tail`跟踪指定的文件。
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The RHEL 7 implementation of the `tail` command can actually follow multiple
    files at the same time. To do this, simply specify all of the files that you wish
    to read or follow when executing the command. The above is an example of using
    `tail` to read two files at once.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: RHEL 7实现的`tail`命令实际上可以同时跟踪多个文件。要做到这一点，只需在执行命令时指定您希望读取或跟踪的所有文件。上面是使用`tail`同时读取两个文件的示例。
- en: While there are no immediate PHP errors caused by the last 10 lines of each
    file, this does not necessarily mean that these files will not show the errors
    that we need. As this is a web-based application, we may need to load the application
    in order to trigger any errors.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最后10行没有立即由PHP错误引起的错误，但这并不一定意味着这些文件不会显示我们需要的错误。由于这是一个基于Web的应用程序，我们可能需要加载应用程序以触发任何错误。
- en: 'We could simply open our browser and once again navigate to `http://blog.example.com`.
    However, for this example, we will utilize a very useful troubleshooting command:
    `curl`.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地打开我们的浏览器，再次导航到`http://blog.example.com`。然而，对于这个例子，我们将利用一个非常有用的故障排除命令：`curl`。
- en: Using curl to call our web application
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用curl调用我们的Web应用程序
- en: The `curl` command can be used as a client to access many different types of
    protocols, everything from FTP to SMTP. This command is particularly useful when
    troubleshooting a web application as it can be used as an HTTP client.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`命令可以用作客户端来访问许多不同类型的协议，从FTP到SMTP。这个命令在故障排除Web应用程序时特别有用，因为它可以用作HTTP客户端。'
- en: When troubleshooting a web application, you can use the `curl` command to make
    an `HTTP`, `GET`, or `POST` request to a specified URL, which when placed in the
    verbose mode with the `–v` (verbose) flag can produce quite a bit of interesting
    information.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在故障排除Web应用程序时，您可以使用`curl`命令向指定的URL发出`HTTP`，`GET`或`POST`请求，当以`-v`（详细）标志的详细模式放置时，可以产生相当多的有趣信息。
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding output shows four key pieces of information that I want to highlight.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示了我想要强调的四个关键信息。
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding line shows us that when we addressed the page called `blog.example.com`,
    we did in fact go to the server at `192.168.33.11`. While we already identified
    that `blog.example.com` resolved to `192.168.33.11`, this line confirms that the
    output from this command produces data from the expected system.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行显示了当我们访问名为`blog.example.com`的页面时，我们实际上去了`192.168.33.11`服务器。虽然我们已经确定`blog.example.com`解析为`192.168.33.11`，但这行确认了这个命令的输出产生了来自预期系统的数据。
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The second key piece of information shows the HTTP status code that was provided
    by the web server.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个关键信息显示了Web服务器提供的HTTP状态代码。
- en: In this case, the web server replied with a status code of `302`, which is used
    to indicate a temporary redirect. When a browser requests a page and the web server
    replies with a 302 status code, the browser knows to redirect the end user to
    another page.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Web服务器以`302`状态代码回复，用于指示临时重定向。当浏览器请求页面并且Web服务器以302状态代码回复时，浏览器知道将最终用户重定向到另一个页面。
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The next page is determined by the **Location** HTTP header. This header, which
    is assigned by the web server, along with the HTTP status code of 302 will cause
    any browser to redirect the end user to the `/wp-admin/install.php` page.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个页面由**Location** HTTP标头确定。这个标头由Web服务器分配，以及302的HTTP状态代码将导致任何浏览器将最终用户重定向到`/wp-admin/install.php`页面。
- en: This explains why we see an installation page when we navigate to `blog.example.com`
    as the web server simply responds with this 302 redirect.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了为什么当我们导航到`blog.example.com`时会看到一个安装页面，因为Web服务器只是以302重定向简单地响应。
- en: '[PRE24]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The fourth key piece of information is the HTTP header **X-Powered-By**; this
    is an HTTP header added by PHP. This header is added by PHP when the requested
    page is processed as by PHP, which means that our curl request was actually processed
    by PHP.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个关键信息是HTTP头**X-Powered-By**；这是PHP添加的HTTP头。当请求的页面被PHP处理时，PHP会添加这个头，这意味着我们的curl请求实际上是由PHP处理的。
- en: More importantly, we can see that the version of PHP (5.4.16) meets our minimum
    requirements as outlined by WordPress.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我们可以看到PHP的版本（5.4.16）符合WordPress规定的最低要求。
- en: Requesting a non-PHP page
  id: totrans-176
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 请求非PHP页面
- en: We can see when requesting a non-PHP page that no **X-Powered-By** header is
    added in the web server reply. We can do this by requesting an invalid URL.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求一个非PHP页面时，我们可以看到Web服务器的回复中没有添加**X-Powered-By**头。我们可以通过请求一个无效的URL来验证这一点。
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As we can see from the output obtained when requesting a non-PHP based page,
    the X-Powered-By header is not present. This indicates that the web server did
    not process this page as PHP.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们请求一个非PHP页面时，我们可以看到得到的输出中没有X-Powered-By头。这表明Web服务器没有将此页面处理为PHP。
- en: The presence of the X-Powered-By header tells us that when we requested the
    `blog.example.com` page, it was processed by PHP. This also means that the HTTP
    status code of 302 was a response provided by WordPress. This information is important
    as it means that PHP is most likely processing pages without any issue, thereby
    eliminating PHP as a possible root cause of the reported issue, at least for now.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: X-Powered-By头的存在告诉我们，当我们请求`blog.example.com`页面时，它是由PHP处理的。这也意味着302的HTTP状态码是WordPress提供的响应。这一信息很重要，因为它意味着PHP很可能在没有任何问题的情况下处理页面，至少目前来看，排除了PHP作为报告问题的可能根本原因。
- en: We can validate this further by reviewing any log entries generated from the
    abovementioned web requests.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看从上述Web请求生成的任何日志条目来进一步验证这一点。
- en: Reviewing generated log entries
  id: totrans-182
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 审查生成的日志条目
- en: When making the abovementioned requests with `curl`, we should have caused new
    log messages to be appended to the two `httpd` logs. Since we were using the `tail`
    command to continuously follow the log files, we can return to our terminal and
    review the new messages.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`curl`进行上述请求时，我们应该已经导致新的日志消息被追加到两个`httpd`日志中。由于我们使用`tail`命令持续跟踪日志文件，我们可以返回到我们的终端并查看新的消息。
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After our HTTP request to the blog URL, the only entry in either log was the
    preceding one. However, this is only an informational log message and not an error
    that would explain the issue. However, the informational log message is also a
    key data point. If there were an issue with the PHP code or processing, an error
    message similar to the following would have been generated.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对博客URL的HTTP请求之后，两个日志中唯一的条目是前面的一个。然而，这只是一个信息日志消息，而不是一个可以解释问题的错误。然而，信息日志消息也是一个关键的数据点。如果PHP代码或处理出现问题，类似以下的错误消息将会生成。
- en: '[PRE27]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The absence of a PHP error actually confirms that PHP is working as expected.
    This when combined with the `curl` results leads us to confidently assume that
    PHP is not the root cause.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: PHP错误的缺失实际上证实了PHP正在按预期工作。这与`curl`的结果结合起来，让我们有信心地假设PHP不是根本原因。
- en: What we learned from httpd logs
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们从httpd日志中学到了什么
- en: While the `httpd` service logs may not have shown us an error that could answer
    why this issue is appearing, they have allowed us to eliminate a possible cause.
    While troubleshooting, you will often find yourself ruling out many possible causes
    before finding the exact cause of an issue. The troubleshooting steps mentioned
    earlier are exactly that, thereby eliminating possible causes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`httpd`服务日志可能没有显示出可以解释为什么出现这个问题的错误，但它们已经帮助我们排除了一个可能的原因。在故障排除过程中，你经常会发现自己在找到问题的确切原因之前排除了许多可能的原因。前面提到的故障排除步骤就是这样，因此排除了可能的原因。
- en: Verifying the database
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证数据库
- en: Earlier while checking what services were running, we found that the MariaDB
    service was running. We did not, however, validate that we can access the service
    or that the WordPress application can access this database service.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候在检查哪些服务正在运行时，我们发现MariaDB服务正在运行。然而，我们没有验证我们是否可以访问该服务，或者WordPress应用程序是否可以访问这个数据库服务。
- en: To validate that we can access the MariaDB service, we can simply use the `mysql`
    command.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证我们是否可以访问MariaDB服务，我们可以简单地使用`mysql`命令。
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `mysql` command is actually a MariaDB client command. When run from the
    command line as the **root** user (as shown above), the `mysql` command by default
    will log into the MariaDB service as the MariaDB root user. While this is the
    default behavior, it is possible to configure the MariaDB service to disallow
    direct root login.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql`命令实际上是一个MariaDB客户端命令。当以**root**用户的身份从命令行运行（如上所示）时，默认情况下，`mysql`命令将作为MariaDB的root用户登录到MariaDB服务。虽然这是默认行为，但是可以配置MariaDB服务禁止直接的根登录。'
- en: The abovementioned results imply that MariaDB allows direct root login, which
    shows that the MariaDB service itself is up and accepting connections. What they
    do not reveal is whether or not the WordPress application can access the database.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结果暗示了MariaDB允许直接的根登录，这表明MariaDB服务本身正在运行并接受连接。它们没有透露的是WordPress应用程序是否能够访问数据库。
- en: To determine this, we will need to log into the MariaDB service with the same
    username and password as the application.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定这一点，我们需要使用与应用程序相同的用户名和密码登录到MariaDB服务。
- en: Verifying the WordPress database
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证WordPress数据库
- en: In order to connect to the MariaDB service with the same credentials as WordPress,
    we need to obtain these credentials. We could ask the person who reported the
    issue for these details, but being a business user, they most likely would not
    know. Even if they worked with WordPress daily, in general, the database username
    and password are configured by one person and only used during installation.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用与WordPress相同的凭据连接到MariaDB服务，我们需要获取这些凭据。我们可以向报告问题的人请求这些详细信息，但作为业务用户，他们很可能不知道。即使他们每天都在使用WordPress，通常数据库用户名和密码是由一个人配置并且只在安装过程中使用。
- en: This means that we must find this information for ourselves. One way to do this
    is to look through the configuration for WordPress as every web application that
    connects to a database has to obtain the login credentials from somewhere, and
    the most common way to do this is to store them within a configuration file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们必须自己找到这些信息。一种方法是查看WordPress的配置，因为每个连接到数据库的Web应用程序都必须从某个地方获取登录凭据，而最常见的方法是将它们存储在配置文件中。
- en: An interesting challenge to this approach is the fact that this chapter assumes
    that we have little-to-no knowledge of WordPress. Finding where WordPress stores
    its database credentials will be a bit tricky; this is particularly true since
    we also do not know offhand where the WordPress application is installed either.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个有趣挑战是，本章假设我们对WordPress知之甚少。找到WordPress存储其数据库凭据的位置将会有些棘手；特别是因为我们也不知道WordPress应用程序安装在哪里。
- en: Finding the installation path for WordPress
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找WordPress的安装路径
- en: What we do know is that WordPress is a web application served by the `httpd`
    service. This means that the `httpd` service will have the installation path defined
    somewhere within its configuration files.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道的是，WordPress是一个由`httpd`服务提供的Web应用程序。这意味着`httpd`服务将在其配置文件的某个地方定义安装路径。
- en: The default configuration for `httpd` is to serve a single domain from a default
    folder. The default folder can change from distribution to distribution, but in
    general, for RHEL systems, it is placed under `/var/www/html`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpd`的默认配置是从默认文件夹中为单个域提供服务。默认文件夹可能会因发行版而有所不同，但一般来说，对于RHEL系统，它位于`/var/www/html`下。'
- en: It is possible to configure `httpd` to serve multiple domains; this is done
    via a **Virtual Hosts** configuration. At this point, we do not know whether this
    system is configured to host multiple domains or one single domain.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 可以配置`httpd`来为多个域提供服务；这是通过**虚拟主机**配置完成的。此时，我们不知道这个系统是配置为托管多个域还是单个域。
- en: Checking the default configuration
  id: totrans-205
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查默认配置
- en: With the default single-domain configuration, any and all domains pointing to
    the server's IP would serve the same `.html` or `.php` files. With Virtual Hosts,
    you can configure Apache to serve specific `.html` or `.php` files depending on
    the domain that the request is being made to.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的单域配置中，指向服务器IP的任何和所有域都将提供相同的`.html`或`.php`文件。通过虚拟主机，您可以配置Apache根据请求所涉及的域来提供特定的`.html`或`.php`文件。
- en: We can determine whether the `httpd` service is configured for Virtual Hosts
    or a single domain by executing a simple `grep` command.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行简单的`grep`命令来确定`httpd`服务是配置为虚拟主机还是单域。
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Since the `/etc/httpd` folder has a multiple subfolder, we once again used the
    `–r` (recursive) flag for `grep`. The command searched the entire `/etc/httpd`
    folder structure for the **DocumentRoot** string.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`/etc/httpd`文件夹有多个子文件夹，我们再次使用了`-r`（递归）标志来进行`grep`。该命令在整个`/etc/httpd`文件夹结构中搜索**DocumentRoot**字符串。
- en: DocumentRoot is the Apache configuration item that specifies the local folder
    that contains the `.html` or `.php` files for the specified domain. The `DocumentRoot`
    setting will be present multiple times for systems that are configured for multiple
    domains and only one time for single-domain configurations.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: DocumentRoot是Apache配置项，指定包含指定域的`.html`或`.php`文件的本地文件夹。对于配置为多个域的系统，`DocumentRoot`设置将出现多次，而对于单域配置，只会出现一次。
- en: From the output above, we can see that on this server, `DocumentRoot` is only
    defined once and set to `/var/www/html`. As this is the default for RHEL systems,
    it is fairly safe to assume that the `httpd` service is configured in a single
    domain-based configuration.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的输出中，我们可以看到在这台服务器上，`DocumentRoot`只定义了一次，并设置为`/var/www/html`。由于这是RHEL系统的默认设置，可以相当安全地假设`httpd`服务配置为单域配置。
- en: To validate that this is the installation folder of WordPress, we can simply
    execute the `ls` command to list the files and folders within this path.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证这是否是WordPress的安装文件夹，我们可以简单地执行`ls`命令来列出此路径中的文件和文件夹。
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: From the `ls` command's output, we can see that WordPress is in fact installed
    in `/var/www/html/`. We can conclude this on the basis of the large number of
    `.php` files along with the "`wp-`" naming scheme of these files. This will be
    confirmed, however, by the next steps.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从`ls`命令的输出中，我们可以看到WordPress实际上是安装在`/var/www/html/`中的。我们可以根据大量的`.php`文件以及这些文件的"`wp-`"命名方案来得出这个结论。然而，下一步将对此进行确认。
- en: Finding the database credentials
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找数据库凭据
- en: Now that we have identified the installation folder, we simply need to find
    the database credentials within the WordPress application's configuration files.
    Unfortunately, we are not very familiar with WordPress and do not know which of
    these files hold the database credentials.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了安装文件夹，我们只需要在WordPress应用程序的配置文件中找到数据库凭据。不幸的是，我们对WordPress并不是很熟悉，也不知道这些文件中哪些包含数据库凭据。
- en: So, how are we going to find them? By googling it, of course.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们要如何找到它们呢？当然是通过谷歌搜索。
- en: As we covered in [Chapter 1](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 1. Troubleshooting Best Practices"), *Troubleshooting Best Practices*,
    Google can be a system administrator's best friend. Since WordPress is a common
    open source application, it is very likely that there will be online help documentation
    that covers how to configure or at least recover the database password.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4 "第1章。故障排除最佳实践")中所介绍的，*故障排除最佳实践*，Google可以成为系统管理员的好朋友。由于WordPress是一个常见的开源应用程序，很可能会有在线帮助文档，涵盖了如何配置或至少恢复数据库密码的内容。
- en: To get started, we will simply search *WordPress database configuration* via
    Google. While searching Google, we find that one of the first results is linked
    to the WordPress forum where a user asked where to find the database details in
    WordPress. ([https://wordpress.org/support/topic/finding-the-database-settings-in-wordpress](https://wordpress.org/support/topic/finding-the-database-settings-in-wordpress)).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们只需通过Google搜索*WordPress数据库配置*。在搜索Google时，我们发现其中一个最初的结果链接到WordPress论坛，一个用户询问在WordPress中如何找到数据库详细信息。
- en: The first answer was to look through the `wp-config.php` file.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个答案是查看`wp-config.php`文件。
- en: Tip
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: While googling this type of information is easy for popular open source projects,
    it can also be effective for closed source applications as well, as many times
    even closed source applications have their documentation online and indexed by
    Google.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于流行的开源项目来说，通过谷歌搜索这种类型的信息很容易，但对于闭源应用程序来说也同样有效，因为很多时候即使闭源应用程序也有在线文档，并被谷歌索引。
- en: To obtain the database details, we can read the `wp-config.php` file with the
    `less` command. The `less` command is a simple command that allows users to read
    files via the command line. This is particularly useful for large files as it
    buffers the output rather than simply dumping all contents to the screen as in
    the case of the `cat` command.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据库详细信息，我们可以使用`less`命令读取`wp-config.php`文件。`less`命令是一个简单的命令，允许用户通过命令行读取文件。对于大文件来说，这特别有用，因为它会缓冲输出，而不是像`cat`命令一样简单地将所有内容倒出到屏幕上。
- en: '[PRE31]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'By reading the configuration file, we can clearly see the database credentials,
    which are conveniently located towards the top of the file. The following is a
    list of the details that we could extract from this file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读配置文件，我们可以清楚地看到数据库凭据，这些凭据方便地位于文件的顶部。以下是我们可以从该文件中提取的详细信息列表：
- en: '`NAME` (`wordpress`) of the database that WordPress is trying to use'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress正在尝试使用的数据库的`NAME`（`wordpress`）
- en: '[PRE32]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`HOST` (`localhost`) that WordPress is attempting to connect to'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress正在尝试连接的`HOST`（`localhost`）
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `USER` (`wordpress`) database that WordPress is trying to authenticate with
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress正在尝试进行身份验证的`USER`（`wordpress`）数据库
- en: '[PRE34]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`PASSWORD` (`password`) that it is using for authentication'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PASSWORD`（`password`）它用于身份验证'
- en: '[PRE35]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: With the above details, we can connect to the MariaDB services in the same way
    that the WordPress application does. This will be a critical step in our troubleshooting
    process.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述详细信息，我们可以以与WordPress应用程序相同的方式连接到MariaDB服务。这将是我们故障排除过程中的关键步骤。
- en: Connecting as the WordPress user
  id: totrans-235
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 以WordPress用户身份连接
- en: Now that we have the database credentials, we can test the connectivity again
    with the `mysql` command. To connect to MariaDB with a specific username and password,
    we will need to use the `–u` (user) and `–p` (password) flags with the `mysql`
    command.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据库凭据，我们可以使用`mysql`命令再次测试连接性。要使用特定的用户名和密码连接到MariaDB，我们需要使用`mysql`命令的`-u`（用户）和`-p`（密码）标志。
- en: '[PRE36]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the preceding command, we can see that we added the username after the `–u`
    flag but did not include the password after`–p`. Since we did not include the
    password, the `mysql` client simply asked for the password after we hit enter.
    While it is possible to include the password after`–p`, this is considered a bad
    practice from a security perspective. It is always better to let the `mysql` client
    ask for the password to reduce the chances of the password being compromised by
    those looking through the command history.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们可以看到我们在`-u`标志后添加了用户名，但没有在`-p`后包含密码。由于我们没有包含密码，`mysql`客户端在我们按回车键后简单地要求输入密码。虽然可以在`-p`后包含密码，但从安全的角度来看，这被认为是一种不好的做法。最好让`mysql`客户端要求输入密码，以减少密码被查看命令历史的人泄露的机会。
- en: From the `mysql` client connection, we can see that by using the same credentials
    as WordPress, we were able to log into the MariaDB service. This is important
    as the inability to connect to the database service would impact the WordPress
    application and could have been a possible cause of the reported issue.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从`mysql`客户端连接，我们可以看到通过使用与WordPress相同的凭据，我们能够登录到MariaDB服务。这很重要，因为无法连接到数据库服务将影响WordPress应用程序，并可能是报告的问题的可能原因。
- en: Validating the database structure
  id: totrans-240
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 验证数据库结构
- en: Since we can connect to the MariaDB service by using the WordPress credentials,
    we should next validate whether the database structure exists and is intact.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以使用WordPress凭据连接到MariaDB服务，接下来我们应该验证数据库结构是否存在且完整。
- en: Tip
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In this section, we will be executing **Structured Query Language** (**SQL**)
    statements from the MariaDB command-line interface. These statements are not shell
    commands but SQL queries.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从MariaDB命令行界面执行**结构化查询语言**（**SQL**）语句。这些语句不是shell命令，而是SQL查询。
- en: SQL is the standard language for interacting with relational databases such
    as MySQL, MariaDB, Postgres, and Oracle. While SQL is not necessarily a language
    that every administrator needs to know, it is my advice that any systems administrator
    that supports a significant number of databases should at least know the basics
    of SQL.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是与MySQL、MariaDB、Postgres和Oracle等关系数据库交互的标准语言。虽然SQL不一定是每个管理员都需要了解的语言，但我建议任何支持大量数据库的系统管理员至少应该了解SQL的基础知识。
- en: This is particularly true if the environment you support does not have specific
    database administrators that manage the database and the database services.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您支持的环境没有专门的数据库管理员来管理数据库和数据库服务，这一点尤其重要。
- en: The first item to validate is that the database itself is created and accessible.
    We can do this by using the `show databases` query.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证的第一项是数据库本身是否已创建并可访问。我们可以通过使用`show databases`查询来做到这一点。
- en: '[PRE37]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We can see that the WordPress database is in fact listed in this output, meaning
    that it exists. To validate that the WordPress database is accessible, we will
    use the `use` SQL statement.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到WordPress数据库实际上在这个输出中列出，这意味着它是存在的。为了验证WordPress数据库是可访问的，我们将使用`use` SQL语句。
- en: '[PRE38]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: With the `Database changed` result, it seems that we have confirmed that the
    database itself is created and accessible. Now, what about the tables within this
    database? We can validate that the database tables have been created by using
    the `show tables` query.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Database changed`的结果，似乎我们已经确认了数据库本身是创建并且可访问的。那么，这个数据库中的表呢？我们可以通过使用`show tables`查询来验证数据库表是否已经创建。
- en: '[PRE39]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: From the results, it appears that quite a few tables exist.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果来看，似乎存在相当多的表。
- en: 'Since we are new to WordPress, it is possible that we may be missing a table
    and not even know it. As WordPress is documented online quite extensively, we
    are likely to find a list of tables by googling *WordPress list of database tables*,
    which returns a very useful database description from the WordPress documentation
    pages: ([https://codex.wordpress.org/Database_Description](https://codex.wordpress.org/Database_Description))'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对WordPress还很陌生，有可能我们会缺少一个表，甚至不知道。由于WordPress在网上有很多文档，我们很可能会通过搜索*WordPress数据库表列表*来找到一个表列表，这返回了WordPress文档页面上非常有用的数据库描述：([https://codex.wordpress.org/Database_Description](https://codex.wordpress.org/Database_Description))
- en: After comparing the output of the `show tables` query and the Database Description
    page, we find that no tables are missing.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较`show tables`查询的输出和数据库描述页面，我们发现没有缺少表。
- en: Since we know which tables exist, we should check whether these tables are accessible;
    we can do this by running a `select` query.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道哪些表是存在的，我们应该检查这些表是否可访问；我们可以通过运行`select`查询来做到这一点。
- en: '[PRE40]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: At long last, we have found an error!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 终于，我们找到了一个错误！
- en: The error that we have found, however, is quite interesting as it is not an
    error that you would typically see from an SQL query. In fact, this error seems
    to indicate that there is an issue with a file that contains the table data.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们发现的错误非常有趣，因为它不是您通常从SQL查询中看到的错误。事实上，这个错误似乎表明存在一个包含表数据的文件的问题。
- en: What we learned from the database validation
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从数据库验证中我们学到了什么
- en: 'At this point, after validating the database, we have learnt the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，经过验证数据库之后，我们学到了以下内容：
- en: MariaDB is accessible by both the root user and the WordPress application
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB可以被root用户和WordPress应用程序访问
- en: The database being accessed is created and accessible by the WordPress user
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在访问的数据库是由WordPress用户创建并可访问的
- en: An error is shown when querying one of the database tables
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询数据库表中的一个时，会显示一个错误
- en: With this information, we can move to the next step of the troubleshooting process
    by establishing a hypothesis.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，我们可以通过建立一个假设来进入故障排除过程的下一步。
- en: Establishing a hypothesis
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立假设
- en: At this stage of the troubleshooting process, we will take all of the information
    that we have gathered and use it to establish an idea as to why the issue occurred
    and what can be done to resolve it.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在故障排除过程的这个阶段，我们将收集到的所有信息，并用它来建立一个关于为什么出现问题以及如何解决问题的想法。
- en: To start, let's first review what we have learnt from the Data Gathering steps.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们首先回顾一下我们从数据收集步骤中学到的东西。
- en: An established blog site is currently showing a page that is designed to only
    be shown during initial installation of the blog software
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个已经建立的博客网站目前显示的是一个设计为仅在博客软件的初始安装期间显示的页面
- en: The blog is using the open source software WordPress
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个博客使用开源软件WordPress
- en: WordPress is written in PHP and utilizes both Apache and MariaDB services
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress是用PHP编写的，并且利用了Apache和MariaDB服务
- en: Apache and PHP are working correctly and showing no errors
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache和PHP都正常工作，没有显示错误
- en: The WordPress installation is located at `/var/www/html`
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress安装在`/var/www/html`目录下
- en: The MariaDB service is up and accepting connections
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB服务正在运行并接受连接
- en: The WordPress application is able to connect to the database service
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress应用程序能够连接到数据库服务
- en: When reading from the database tables, we receive an error that indicates an
    issue with the files that contain the database data
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当从数据库表中读取数据时，我们收到一个错误，表明包含数据库数据的文件存在问题
- en: 'The hypothesis that we can formulate from all of these data points is as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从所有这些数据点中得出的假设是：
- en: At some point, the data files for MariaDB, and more specifically the WordPress
    database, are inaccessible to the MariaDB service. It appears that when WordPress
    connects to the database, it cannot query the tables; thus, it believes that the
    application has not been installed. Since WordPress does not believe that the
    application has been installed, it presents an installation page.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，MariaDB的数据文件，特别是WordPress数据库，对MariaDB服务是不可访问的。当WordPress连接到数据库时，它似乎无法查询表；因此，它认为应用程序尚未安装。由于WordPress认为应用程序尚未安装，它呈现了一个安装页面。
- en: 'We can formulate this hypothesis on the basis of the following key points of
    information:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据以下关键信息点来制定这个假设：
- en: The only error we have seen is the error from MariaDB.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到的唯一错误是来自MariaDB的错误。
- en: The error is not a typical SQL error, and the message itself indicates an issue
    with accessing the database files.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个错误不是典型的SQL错误，消息本身表明存在访问数据库文件的问题。
- en: There are no PHP errors in the Apache logs.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Apache日志中没有PHP错误。
- en: Everything else about the WordPress environment seems to be correct.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于WordPress环境的其他一切似乎都是正确的。
- en: 'Now that we have formed a hypothesis, we need to validate that this is true
    by attempting to resolve the issue. This brings us to the third stage of the troubleshooting
    process: *Trial and Error*.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经形成了一个假设，我们需要通过尝试解决问题来验证这一点。这将引导我们到故障排除过程的第三阶段：*试错*。
- en: Resolving the issue
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决问题
- en: In this stage, we will attempt to resolve the issue. To do this, let's take
    a look at what these data files are and what they are used for.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将尝试解决这个问题。为了做到这一点，让我们看看这些数据文件是什么，它们用于什么。
- en: Understanding database data files
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解数据库数据文件
- en: Most databases with the exception of in-memory-only databases have some sort
    of file that is used to store the data on a file system; this is often referred
    to as persistent storage. MariaDB and MySQL are no exception to this rule.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 除了仅内存数据库之外，大多数数据库都有一种用于在文件系统上存储数据的文件；这通常被称为持久存储。MariaDB和MySQL也不例外。
- en: Depending on the database storage engine in use, there may be one big file or
    multiple files with different file extensions. Irrespective of the file type or
    where/how the files are stored, at the end of the day, if these files are not
    accessible, the database will have issues.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的数据库存储引擎，可能会有一个大文件或多个具有不同文件扩展名的文件。无论文件类型或文件存储在何处/如何存储，最终，如果这些文件无法访问，数据库将出现问题。
- en: Finding the MariaDB data folder
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找MariaDB数据文件
- en: Since we are new to this environment, we currently do not know where the MariaDB
    data files are stored. Identifying the location of these files will be the first
    step in correcting the issue. One way to identify the data folder is to look through
    the database services' configuration file.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对这个环境还很陌生，我们目前不知道MariaDB数据文件存储在哪里。确定这些文件的位置将是纠正问题的第一步。识别数据文件夹的一种方法是查看数据库服务的配置文件。
- en: Since the `/etc` folder is home to most (but not all) configuration files, this
    is the first place we should look.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`/etc`文件夹是大多数（但不是所有）配置文件的所在地，这是我们应该首先查找的地方。
- en: '[PRE41]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: To identify the proper configuration file, we can use the `ls` command to list
    the `/etc` folder and the `grep` command to search the results for anything with
    the string "`maria`." The abovementioned `grep` command uses the `–i` (insensitive)
    flag, which causes `grep` to search for both uppercase and lowercase strings.
    This can be helpful if the folder or file has a mixed case name.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定正确的配置文件，我们可以使用`ls`命令列出`/etc`文件夹，并使用`grep`命令在结果中搜索包含“maria”字符串的内容。上述的`grep`命令使用了`-i`（不区分大小写）标志，这会导致`grep`搜索大写和小写字符串。如果文件夹或文件具有混合大小写名称，这可能会有所帮助。
- en: Since our command printed no output, there is no folder or file with the string
    "`maria`" in its name. This means that the MariaDB services' configuration either
    is named something that we are not expecting or is not within the `/etc/` folder.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的命令没有输出，所以在名称中没有包含“maria”的文件夹或文件。这意味着MariaDB服务的配置要么命名为我们不期望的名称，要么不在`/etc/`文件夹中。
- en: Since MariaDB is supposed to be a drop-in replacement for MySQL, we should also
    check whether there is a `mysql`-named folder or file.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MariaDB应该是MySQL的一个可替换的解决方案，我们还应该检查是否有一个名为`mysql`的文件夹或文件。
- en: '[PRE42]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: It appears that there is no folder or file matching this name either.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来也没有与这个名称匹配的文件夹或文件。
- en: We could easily spend several hours trying to find configuration files for MariaDB
    by using the `ls` command. Fortunately, there is a faster way to find the configuration
    files.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ls`命令来花费几个小时来寻找MariaDB的配置文件。幸运的是，有一种更快的方法来找到配置文件。
- en: Since MariaDB was installed via an RPM package, we can use the `rpm` command
    to list all files and folders deployed by the package. Earlier when checking how
    MariaDB was installed, the `rpm` command shows multiple packages for MariaDB.
    The package that we are interested in is the `mariadb-server` package. This package
    installs the MariaDB service as well as the default configuration files.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MariaDB是通过RPM软件包安装的，我们可以使用`rpm`命令列出软件包部署的所有文件和文件夹。早些时候在检查MariaDB的安装方式时，`rpm`命令显示了多个MariaDB软件包。我们感兴趣的软件包是`mariadb-server`软件包。该软件包安装了MariaDB服务以及默认配置文件。
- en: Earlier we used the `–q` and `–l` flags of `rpm` to list all files deployed
    by this package. If we wanted to limit our query to only configuration files,
    we could use the `–q` and `–c` flags.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们使用了`rpm`的`-q`和`-l`标志列出了该软件包部署的所有文件。如果我们只想限制查询到配置文件，我们可以使用`-q`和`-c`标志。
- en: '[PRE43]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: From the above, we can see that the `mariadb-server` package deploys three configuration
    files. The `mariadb.log` and `logrotate.d` files are not likely to contain the
    information that we are looking for as they are related to the logging process.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面可以看出，`mariadb-server`软件包部署了三个配置文件。`mariadb.log`和`logrotate.d`文件不太可能包含我们正在寻找的信息，因为它们与日志记录过程有关。
- en: This leaves the `/etc/my.cnf.d/server.cnf` file. We can read this file by using
    the `cat` command.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这留下了`/etc/my.cnf.d/server.cnf`文件。我们可以使用`cat`命令读取这个文件。
- en: '[PRE44]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Unfortunately, this file also does not contain the data folder details as we
    had hoped. This file does, however, give us a clue as to where to look next.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个文件也不包含我们希望的数据文件夹的详细信息。然而，这个文件确实给了我们一个线索，告诉我们接下来应该去哪里找。
- en: The parent folder of the `server.conf` file is the `/etc/my.cnf.d` folder. The
    `.d` at the end of the folder name is important, as this naming convention has
    a special purpose in Linux. The `.d` (dot D) folder types are designed to allow
    users to simply add a file or many files with custom configurations for the service.
    When the service is started, all files within this folder are read and the configurations
    are applied.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.conf`文件的父文件夹是`/etc/my.cnf.d`文件夹。文件夹名称末尾的`.d`很重要，因为这种命名约定在Linux中有特殊用途。`.d`（点D）文件夹类型旨在允许用户简单地为服务添加一个文件或多个文件，以进行自定义配置。当服务启动时，该文件夹中的所有文件都会被读取，并应用配置。'
- en: This allows users to configure a service without editing the default configuration
    files; they can simply drop in the configurations that they want to add by creating
    a new file in the `.d` folder.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户配置服务而无需编辑默认配置文件；他们可以通过在`.d`文件夹中创建一个新文件来简单地添加他们想要添加的配置。
- en: It's important to note that this is a configuration scheme and not every service
    supports this scheme. It seems, however, that the MariaDB service does in fact
    support this scheme.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这是一种配置方案，并非每个服务都支持这种方案。然而，似乎MariaDB服务确实支持这种方案。
- en: What is interesting, however, is the name of this `.d` folder. Typically, the
    naming convention for a `.d` configuration folder is the service name or folder
    purpose followed by `.d`. You can see this in practice with the `/etc/cron.d`
    or `/etc/http/conf.d` folder. The name of the MariaDB `.d` folder suggests that
    the main configuration file may be named `my.cnf`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有趣的是，这个`.d`文件夹的名称。通常，`.d`配置文件夹的命名约定是服务名称或文件夹用途后跟`.d`。您可以在`/etc/cron.d`或`/etc/http/conf.d`文件夹中看到这一点。MariaDB的`.d`文件夹的名称表明主配置文件可能被命名为`my.cnf`。
- en: If we check whether such a file exists or not, we will see that it does.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查这样的文件是否存在，我们会发现确实存在。
- en: '[PRE45]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This file appears to be the main MariaDB configuration file, which will hopefully
    contain the data folder configuration. To find out, we can read this file with
    the `cat` command.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件似乎是主MariaDB配置文件，希望其中包含数据文件夹配置。要找出，我们可以使用`cat`命令读取这个文件。
- en: '[PRE46]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As anticipated, this file does actually contain the data folder configuration.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，这个文件实际上包含了数据文件夹的配置。
- en: '[PRE47]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Armed with this information, we can now troubleshoot the current state of the
    WordPress database's data files.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，我们现在可以对WordPress数据库的数据文件的当前状态进行故障排除。
- en: Resolving data file issues
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决数据文件问题
- en: If we change to the `/var/lib/mysql` folder and use the `ls` command to list
    the folder contents, we can see quite a few database data files/folders.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们切换到`/var/lib/mysql`文件夹并使用`ls`命令列出文件夹内容，我们会看到相当多的数据库数据文件/文件夹。
- en: '[PRE48]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: It appears that each database created on this server exists as a folder under
    `/var/lib/mysql/`. It also appears from the `ls` output that the folders are in
    a normal state. Since the issue is with the WordPress database, we will focus
    on this database by switching to the `wordpress` folder.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来，这台服务器上创建的每个数据库都存在于`/var/lib/mysql/`下的一个文件夹中。从`ls`输出中还可以看出，这些文件夹处于正常状态。由于问题出在WordPress数据库上，我们将专注于这个数据库，切换到`wordpress`文件夹。
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Right after executing the `ls` command, we can see that there is something unusual
    with the files within this folder.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`ls`命令后，我们可以看到这个文件夹中的文件有些不寻常。
- en: The item that stands out is simply the fact that all the `.frm` files have a
    file mode of `000`. This means that neither the owner nor the group or other Linux
    users can read or write these files. This includes the user that MariaDB runs
    as.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的问题只是所有的`.frm`文件都具有`000`的文件模式。这意味着所有者、组或其他Linux用户都无法读取或写入这些文件。这包括MariaDB运行的用户。
- en: If we look back at the error that we received from MariaDB, we find that the
    error seems to support the supposition that the invalid permissions are in fact
    causing an issue. To correct this error, we simply need to reset the permissions
    to the correct values.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下从MariaDB收到的错误，我们会发现错误似乎支持这样的假设，即无效的权限实际上导致了问题。要纠正这个错误，我们只需要将权限重置为正确的值。
- en: Since we are new to MariaDB, we currently do not know exactly what these values
    should be.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对MariaDB还很陌生，目前我们不知道这些值应该是什么。
- en: 'Luckily, there is an easy way to figure out what the permissions should be:
    simply look at another database''s file permissions.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种简单的方法可以弄清楚权限应该是什么：只需查看另一个数据库的文件权限。
- en: If we look back at the output of the folder listing for `/var/lib/mysql`, we
    find that there were several folders. At least one of these other folders should
    also be a database's data folder. To determine what permissions our `.frm` files
    should have, we simply need to find other `.frm` files.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下`/var/lib/mysql`文件夹的列表输出，我们会发现有几个文件夹。其中至少一个其他文件夹也应该是数据库的数据文件夹。要确定我们的`.frm`文件应该具有什么权限，我们只需要找到其他`.frm`文件。
- en: '[PRE50]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `find` command is a very useful command for troubleshooting and can be used
    in many different situations. In our example, we use the `find` command to search
    for any file in the `/var/lib/mysql` folder that has a filename that ends with
    "`.frm`" via the `–name` flag. The `–ls` (folder listing) flag tells the `find`
    command to print any files that it finds in a long list format, which will show
    each file's permissions without having to run a second command.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`命令是一个非常有用的故障排除命令，可以在许多不同的情况下使用。在我们的示例中，我们使用`find`命令通过`–name`标志搜索`/var/lib/mysql`文件夹中以“`.frm`”结尾的任何文件。`–ls`（文件夹列表）标志告诉`find`命令以长列表格式打印它找到的任何文件，这将显示每个文件的权限，而无需运行第二个命令。'
- en: From the `find` command's output, we can see that the permissions on the `.frm`
    files are set to `-rw-rw----`; the numeric representation of this is `660`. These
    permissions seem appropriate for our database table and allow the owner and group
    to read and write these files.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 从`find`命令的输出中，我们可以看到`.frm`文件的权限设置为`-rw-rw----`；这个的数字表示是`660`。这些权限似乎适用于我们的数据库表，并允许所有者和组读写这些文件。
- en: To reset the permissions on our WordPress data files, we will use the `chmod`
    command.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重置WordPress数据文件的权限，我们将使用`chmod`命令。
- en: '[PRE51]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In the preceding command, the `–v` (verbose) flag was used with `chmod` so that
    we could see the changes in each file's permissions as the command executed.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，使用了`–v`（详细）标志与`chmod`，以便我们可以看到每个文件的权限在命令执行时的变化。
- en: Validating
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证
- en: Now that the permissions have been set, we can yet again validate with an SQL
    `select` query.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 现在权限已经设置好，我们可以再次使用SQL`select`查询进行验证。
- en: '[PRE52]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: From the above query, we can see there is still an error with MariaDB accessing
    these files. This means that we must not have corrected all of the issues with
    the data files.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的查询中，我们可以看到MariaDB访问这些文件仍然存在错误。这意味着我们可能没有纠正所有数据文件的问题。
- en: '[PRE53]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: By reviewing the `ls` command's output, we can see one more difference from
    the example `.frm` files.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看`ls`命令的输出，我们可以看到与示例`.frm`文件的另一个不同之处。
- en: '[PRE54]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The owner and group permissions for the files in the `wordpress` folder are
    set to `root`, whereas the other `.frm` files are owned and grouped as the `mysql`
    user.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`wordpress`文件夹中文件的所有者和组权限设置为`root`，而其他`.frm`文件的所有者和组为`mysql`用户。'
- en: The permissions of `660` mean that only the owner and group members of the file
    can access it. In the case of our WordPress files, this means that only the root
    user and any member of the root group can access these files.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`660`的权限意味着只有文件的所有者和组成员可以访问它。对于我们的WordPress文件，这意味着只有root用户和root组的任何成员可以访问这些文件。'
- en: Since MariaDB runs as the `mysql` user, the MariaDB service still cannot access
    these files. We can reset the ownership and group membership with the `chown`
    command.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MariaDB以`mysql`用户运行，MariaDB服务仍然无法访问这些文件。我们可以使用`chown`命令重置所有权和组成员。
- en: '[PRE55]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Now that the ownership and the group membership of the files are `mysql`, we
    can rerun our query to see whether the issue is resolved.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在文件的所有权和组成员是`mysql`，我们可以重新运行我们的查询，看看问题是否已解决。
- en: '[PRE56]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: At long last, we have resolved the error by querying the WordPress database
    tables.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们通过查询WordPress数据库表解决了错误。
- en: Final validation
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终验证
- en: Since we have resolved the database error, and we did not find any other errors
    while troubleshooting, the next validation step is to see whether the blog is
    still showing the installation screen.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已解决了数据库错误，并且在故障排除过程中没有发现其他错误，下一个验证步骤是查看博客是否仍然显示安装屏幕。
- en: '![Final validation](img/00003.jpeg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![最终验证](img/00003.jpeg)'
- en: By navigating to `http://blog.example.com` from our browser, we can now see
    that we no longer receive the installation page, but rather the blog's front page.
    At this point, it seems that the issue has been resolved.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从浏览器访问`http://blog.example.com`，我们现在可以看到我们不再收到安装页面，而是博客的首页。此时，问题似乎已经解决了。
- en: In general, when working on an issue reported by a person, it is a best practice
    to have the person who initially reported the problem to validate that everything
    has been restored to an expected state. I have seen many instances where an incident
    is caused by more than one issue, and while the more apparent issue is resolved
    quickly, the other issue(s) is(are) often overlooked. Having the user verify that
    we have fixed the entire problem will help to ensure that everything has been
    truly resolved.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，当处理由某人报告的问题时，最佳做法是让最初报告问题的人验证一切是否已恢复到预期状态。我见过许多情况，其中一个事件是由多个问题引起的，虽然更明显的问题很快得到解决，但其他问题往往被忽视。让用户验证我们已经解决了整个问题将有助于确保一切都已真正解决。
- en: For this scenario, when we asked the business user who reported the issue to
    check whether the issue has been resolved, he/she replied with *Everything looks
    fixed. Thank you!*
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，当我们询问报告问题的业务用户是否问题已解决时，他/她回答说*一切看起来都修复了。谢谢！*
- en: Summary
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we walked through the troubleshooting process by using an issue
    that can easily occur in the real world. We iterated through Steps 1, 2, and 3
    of the troubleshooting process to collect data, establish a hypothesis, and resolve
    the issue; these steps were covered in detail in [Chapter 1](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 1. Troubleshooting Best Practices"), *Troubleshooting Best Practices*.
    We then used several commands and log files that we learned about in [Chapter
    2](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4 "Chapter 2. Troubleshooting
    Commands and Sources of Useful Information"), *Troubleshooting Commands and Sources
    of Useful Information* as well as a few new ones.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过使用在现实世界中可能经常发生的问题来走过了故障排除过程。我们详细介绍了故障排除过程的步骤1、2和3，以收集数据、建立假设和解决问题；这些步骤在[第1章](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "第1章。故障排除最佳实践")*故障排除最佳实践*中有详细介绍。我们还使用了在[第2章](part0019_split_000.html#I3QM2-8ae10833f0c4428b9e1482c7fee089b4
    "第2章。故障排除命令和有用信息来源")*故障排除命令和有用信息来源*中学到的几个命令和日志文件，以及一些新的命令。
- en: While learning the commands used in this chapter is important for any systems
    administrator working with web applications, it is more important to look at the
    process that we followed. We started working on the problem with no prior knowledge
    of the environment or application, but with some basic data collection and trial
    and error, we could resolve the problem.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然学习本章中使用的命令对于任何与Web应用程序一起工作的系统管理员来说都很重要，但更重要的是看我们遵循的过程。我们开始处理问题时对环境或应用程序没有先验知识，但通过一些基本的数据收集和反复试验，我们可以解决问题。
- en: In the next chapter, we will use this same troubleshooting process and similar
    tools for troubleshooting performance issues.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用相同的故障排除过程和类似的工具来解决性能问题。
