- en: Chapter 4. Creating Code Snippets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。创建代码片段
- en: If you like using the command line, but also like some of the features associated
    with using graphical **Integrated Development Environments** (**IDEs**), then
    this chapter may reveal some new ideas to you. We can create shortcuts for commonly
    used script elements using the `vi` or `vim` text editors from the command line.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢使用命令行，但也喜欢使用图形**集成开发环境**（**IDE**）的一些功能，那么本章可能会为您揭示一些新的想法。我们可以使用命令行中的`vi`或`vim`文本编辑器为常用的脚本元素创建快捷方式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating abbreviations in `.vimrc`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`.vimrc`中创建缩写
- en: Reading snippets with `vim` text editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vim`文本编辑器阅读片段
- en: Using color in terminal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端中使用颜色
- en: Abbreviations
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩写
- en: We have already taken one short sojourn into the `~/.vimrc` file and we will
    now revisit this file to look at abbreviations or `abbr` controls. This file acts
    as the run control mechanism for the `vim` text editor, which is likely to be
    installed on your Linux distribution. Older distributions or Unix variants may
    have the original `vi` text editor and will make use of the `~/.exrc` file. If
    you are uncertain of the identity of your version of `vi` and the correct run
    control file to use, simply, enter the `vi` command. If a blank page opens, it
    is indeed `vi`. However, if a new blank document opens with the `vim` splash screens,
    then you are using the improved `vim` or `Vi`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经短暂地进入了`~/.vimrc`文件，现在我们将重新访问这个文件，看看缩写或`abbr`控制。这个文件充当了`vim`文本编辑器的运行控制机制，很可能已经安装在您的Linux发行版上。旧的发行版或Unix变种可能会有原始的`vi`文本编辑器，并且会使用`~/.exrc`文件。如果您不确定您的`vi`版本的身份和要使用的正确运行控制文件，只需输入`vi`命令。如果打开了一个空白页面，那么确实是`vi`。但是，如果打开了带有`vim`启动屏幕的新空白文档，那么您正在使用改进的`vim`或`Vi`。
- en: 'Abbreviations allow for a shortcut string to be used in place of a longer string.
    These abbreviations can be set during a `vim` session from the last line mode
    but are often set in the control file. The shebang can be easily represented by
    an abbreviation, as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写允许在较长的字符串的位置使用快捷字符串。这些缩写可以在`vim`会话中从最后一行模式设置，但通常在控制文件中设置。shebang可以很容易地表示为一个缩写，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The basic syntax of an abbreviation is shown in the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写的基本语法如下命令所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using this abbreviation, we just need to type `_sh` while in the edit mode.
    On pressing the *ENTER* key after the shortcut code, the full text for the shebang
    is printed. In reality, not just the *ENTER* key but pressing any key after the
    `abbr` code will expand the shortcut. Simple elements like this can add a lot
    to the experience of using `vim` as our text editor. The following screenshot
    shows the updated `~/.vimrc` file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个缩写，我们只需要在编辑模式下输入`_sh`。在输入快捷代码后按下*ENTER*键，shebang的完整文本就会打印出来。实际上，不仅仅是*ENTER*键，按下`abbr`代码后的任意键都会展开快捷方式。像这样的简单元素可以大大增加使用`vim`作为我们的文本编辑器的体验。下面的截图显示了更新后的`~/.vimrc`文件：
- en: '![Abbreviations](img/00039.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Abbreviations](img/00039.jpeg)'
- en: 'We are not limited to the single abbreviation code, as we can add more `abbr`
    entries. For example, to support the shebang for Perl scripts at the line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不限于单个缩写代码，可以添加更多的`abbr`条目。例如，为了支持Perl脚本的shebang，可以在行上添加：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The use of the underscore is not required, but the aim is to keep the shortcut
    code unique and not to have a typed error. We are also not limited to a single
    line; although, this is where abbreviations are most used. Consider the following
    abbreviation for an `if` statement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线的使用并不是必需的，但目的是保持快捷代码的唯一性，避免输入错误。我们也不限于单行；尽管如此，缩写通常用于单行。考虑以下`if`语句的缩写：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Although this does work, the formatting of the `if` statement will not be perfect
    and multiline abbreviations are far from ideal. This is where we may consider
    using code snippets that we prepared in advance.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这样做是有效的，但`if`语句的格式化不会完美，多行缩写远非理想。这就是我们可以考虑使用预先准备的代码片段的地方。
- en: Using code snippets
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码片段
- en: 'All we mean by the term code snippets is a prepared code that we can read into
    our current script. This is especially easy with `vim` being able to read the
    contents of other text files during editing:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的代码片段的含义只是准备好的代码，我们可以读入我们当前的脚本。这对于`vim`能够在编辑过程中读取其他文本文件的内容来说特别容易。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, if we need to read the contents of a file called `if` located
    in `$HOME/snippets`, we will use the following key sequences in `vim`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们需要读取位于`$HOME/snippets`中的名为`if`的文件的内容，我们将在`vim`中使用以下键序列：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The contents of this file is read into the current document below the current
    cursor position. In this way, we can make the code snippets as complex as we need
    and maintain the correct indentations to aide readability and consistency.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的内容被读入当前文档的当前光标位置下方。通过这种方式，我们可以使代码片段尽可能复杂，并保持正确的缩进以帮助可读性和一致性。
- en: 'So, we will make it our duty to always create a snippets directory in our home
    directory:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将把创建一个片段目录放在我们的主目录中作为我们的职责：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It is not required to share the directory, so it is good practice to set the
    mode to `700` or private to the user when it is being created.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要共享目录，因此在创建时将模式设置为`700`或私有用户是一个好习惯。
- en: 'When creating snippets, it is your choice to use a pseudo-code or real examples.
    My preference is to use real examples that are edited to reflect the requirements
    of the recipient script. The contents of a simple `if` snippet will be:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建代码片段时，您可以选择使用伪代码或真实示例。我更喜欢使用真实示例，这些示例经过编辑以反映接收脚本的要求。一个简单的`if`片段的内容将是：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This gives us the layout to create an `if` statement with a practical example.
    In this case, we check to see if `$1` is unset and send an error to the user before
    exiting the script. The key is in keeping the snippet short to limit the changes
    that need to be made but easily understood and expandable, as required.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了创建带有实际示例的`if`语句的布局。在这种情况下，我们检查`$1`是否未设置，并在退出脚本之前向用户发送错误。关键在于保持片段简短，以限制需要进行的更改，但易于理解和扩展，根据需要。
- en: Bringing color to the terminal
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给终端带来色彩
- en: If we are to display text messages to the users and operators executing the
    scripts, we can provide colors to help in message interpretation. Using red as
    a synonym for errors and green indicating success makes it easier to add functionality
    to our scripts. Not all but certainly a vast majority of Linux terminals support
    color. The built-in command `echo` when used with the `-e` option can display
    color to users.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要向用户和执行脚本的操作员显示文本消息，我们可以提供颜色以帮助解释消息。使用红色作为错误的同义词，绿色表示成功，可以更轻松地为我们的脚本添加功能。并非所有，但肯定是绝大多数的Linux终端都支持颜色。内置命令`echo`在与`-e`选项一起使用时可以向用户显示颜色。
- en: 'To display a text in red we can use the `echo` command, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要以红色显示文本，我们可以使用`echo`命令，如下所示：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows both the code and the output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了代码和输出：
- en: '![Bringing color to the terminal](img/00040.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![给终端带来色彩](img/00040.jpeg)'
- en: The red text will bring immediate attention to the text and the potential of
    failure of script execution. The use of color in this way adheres to the basics
    of principals application design. If you find the code cumbersome, then simply
    use friendly variables to represent the colors and the reset code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 红色文本将立即引起注意，可能导致脚本执行失败。以这种方式使用颜色符合基本的应用设计原则。如果您觉得代码复杂，那么只需使用友好的变量来表示颜色和重置代码。
- en: 'In the previous code, we used red and the final rest code to set the text back
    to the shell default. We could easily create variables for these color codes and
    others:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了红色和最终的重置代码来将文本设置回shell默认值。我们可以轻松地为这些颜色代码和其他颜色创建变量：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `\033` value is the *ESCAPE* character and `[31m` is the color code for
    red.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`\033`值是*ESCAPE*字符，`[31m`是红色的颜色代码。'
- en: 'We need to take care while using variables, to ensure that they are properly
    delimited from the text. Modifying the earlier example, we can see how this is
    easily achieved:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用变量时，我们需要小心，以确保它们与文本正确分隔。修改前面的示例，我们可以看到如何轻松实现这一点：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We use the brace brackets to ensure that the `RED` variable is identified and
    separated from the `Error` word.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用大括号确保`RED`变量被识别并与`Error`单词分隔开。
- en: 'Saving the variable definitions to the `$HOME/snippets/color` file will allow
    them to be used in other scripts. Interestingly, we don''t need to edit this script;
    we can use the command `source` to read these variables definitions into the script
    at runtime. Within the recipient script, we need to add the following line:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量定义保存到`$HOME/snippets/color`文件中将允许它们在其他脚本中使用。有趣的是，我们不需要编辑这个脚本；我们可以使用`source`命令在运行时将这些变量定义读入脚本。在接收脚本中，我们需要添加以下行：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using the shell built-in `source` command will read the color variables into
    the script executing at runtime. The following screenshot shows a modified version
    of the `hello5.sh` script that we now call `hello7.sh`, which makes use of these
    colors:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用shell内置的`source`命令将颜色变量读入脚本执行时。以下截图显示了`hello5.sh`脚本的修改版本，现在我们称之为`hello7.sh`，它使用了这些颜色：
- en: '![Bringing color to the terminal](img/00041.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![给终端带来色彩](img/00041.jpeg)'
- en: 'We can see the effect this has when we execute the script. In the following
    screenshot, you will see the execution and output both with and without a supplied
    parameter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行脚本时，我们可以看到这种效果。在下面的截图中，您将看到执行和输出，无论是否提供了参数：
- en: '![Bringing color to the terminal](img/00042.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![给终端带来色彩](img/00042.jpeg)'
- en: We can easily identify the success and failure of the script via the color coded
    output; the green **Hello fred** where we supply the parameter and the red `Usage`
    statement where we have not provided the required name.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过颜色编码的输出轻松识别脚本的成功和失败；绿色的**Hello fred**是我们提供参数的地方，红色的`Usage`语句是我们没有提供所需名称的地方。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: To any administrator script reuse will always be upmost in the quest for efficiency.
    Using `vim` at the command line can make for very quick and effective editing
    of a script and we can save typing in the use of abbreviations. These are best
    set within a user's personal `.vimrc` file and are defined with the `abbr` control.
    Beyond abbreviations, we can see the sense in using code snippets. These are pre-prepared
    blocks of code that can be read into the current script.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何管理员脚本重用始终是效率追求中的首要问题。在命令行使用`vim`可以快速有效地编辑脚本，并且可以节省缩写的输入。最好在用户的个人`.vimrc`文件中设置这些缩写，并使用`abbr`控制进行定义。除了缩写，我们可以看到使用代码片段的意义。这些是预先准备好的代码块，可以读入当前脚本。
- en: Finally, we had a look at the value in using color at the command line where
    a script will provide feedback. In the first look, these color codes are not the
    friendliest, but we can simplify the process by using variables. These variables
    can be set at runtime within the script and by using the `source` command their
    values to read them into the current environment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了一下在命令行中使用颜色的价值，脚本将提供反馈。乍一看，这些颜色代码并不友好，但我们可以通过使用变量来简化这个过程。这些变量可以在脚本内在运行时设置，并通过`source`命令将它们的值读入当前环境。
- en: In the next chapter, we will look at other mechanisms that we can use to write
    test expressions simplifying the use of integers and variables.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看其他机制，我们可以使用它们来编写测试表达式，简化整数和变量的使用。
