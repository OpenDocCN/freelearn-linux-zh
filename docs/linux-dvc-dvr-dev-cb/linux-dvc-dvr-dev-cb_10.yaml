- en: 'Additional Information: Managing Interrupts and Concurrency'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加信息：管理中断和并发
- en: 'Recalling what we did in [Chapter 3](https://cdp.packtpub.com/linux_device_driver_development_cookbook/wp-admin/post.php?post=28&action=edit#post_26), *Working
    with Char Drivers,* when we talked about the `read()` system call and how we can
    implement it for our char driver (see `chapter_4/chrdev/chrdev.c` file on  GitHub),
    we noticed that our implementation was tricky because data was always available:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们在[第3章](https://cdp.packtpub.com/linux_device_driver_development_cookbook/wp-admin/post.php?post=28&action=edit#post_26)中所做的工作，即*使用Char驱动程序*，当我们讨论`read()`系统调用以及如何为我们的char驱动程序实现它时（请参阅GitHub上的`chapter_4/chrdev/chrdev.c`文件），我们注意到我们的实现很棘手，因为数据总是可用的：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, the data inside `chrdev->buf` is always there, but
    in a real peripheral, this is very often not true; we must usually wait for new
    data and then the current process should be suspended (that is, *put to sleep*).
    That is why our `chrdev_read()` should be something like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`chrdev->buf`中的数据总是存在的，但在真实的外围设备中，这往往并不是真的；我们通常必须等待新数据，然后当前进程应该被挂起（即*休眠*）。这就是为什么我们的`chrdev_read()`应该是这样的：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Please note that this example is deliberately not complete, due to the fact
    that a real (and complete) `read()` system call implementation will be presented
    in [Chapter 7](3a9fe19d-0ba6-4959-bc71-493d9f499cc4.xhtml), *Advanced Char Driver
    Operations*. In this chapter, we simply introduce mechanisms and not how we can
    use them in a device driver.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于一个真实（完整的）`read()`系统调用实现将在[第7章](3a9fe19d-0ba6-4959-bc71-493d9f499cc4.xhtml)中呈现，所以本示例故意不完整。在本章中，我们只是介绍机制，而不是如何在设备驱动程序中使用它们。
- en: By using the  `wait_for_event()` function, we are asking the kernel to test
    whether there is some available data and, if so, to permit process execution,
    otherwise, the current process will be put to sleep and then woken up again once
    the condition, `chrdev->available > 0` is true.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`wait_for_event()`函数，我们要求内核测试是否有一些可用数据，如果有的话，允许进程执行，否则，当前进程将被挂起，一旦条件`chrdev->available
    > 0`为真，就会再次唤醒。
- en: Peripherals usually use interrupts to notify the CPU that some new data is available
    (or that some important activity must be done with them), and then it's quite
    obvious that it's there, inside the interrupt handler, where we, as device driver
    developers, have to inform the kernel that the sleeping process, waiting for that
    data, should be awakened. In the following sections, we'll see, by using very
    simple examples, which mechanisms are available in the kernel and how they can
    be used to suspend a process, and we'll also see when we can do it safely! In
    fact, if we ask the scheduler to revoke the CPU to the current process to give
    it to another process within an interrupt handler, we're simply trying to carry
    out a nonsense operation. When we are in an interrupt context, we are not executing
    process code, so what process can we revoke the CPU? Simply speaking, the executing
    process can *go to sleep* when the CPU is in the process context, while, when
    we are in interrupt context we can't because no process is currently, officially,
    holding the CPU!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 外围设备通常使用中断来通知CPU有新数据可用（或者必须对它们进行一些重要的活动），因此很明显，我们作为设备驱动程序开发人员，必须在中断处理程序中通知内核，等待数据的睡眠进程应该被唤醒。在接下来的章节中，我们将通过使用非常简单的示例来看看内核中有哪些机制可用，并且它们如何被用来挂起一个进程，我们还将看到什么时候可以安全地这样做！事实上，如果我们要求调度程序在中断处理程序中将CPU撤销给当前进程以便将其分配给另一个进程，那么我们只是在进行一个无意义的操作。当我们处于中断上下文时，我们并不执行进程代码，那么我们可以撤销CPU给哪个进程呢？简而言之，当CPU处于进程上下文时，执行进程可以*进入睡眠*，而当我们处于中断上下文时，我们不能这样做，因为当前没有进程正式持有CPU！
- en: This last concept is very important and it must be well understood by device
    driver developers; in fact, if we try to go to sleep when the CPU is in the interrupt
    context, then a severe exception will be generated and, most probably, the complete
    system will hang.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念非常重要，设备驱动程序开发人员必须充分理解；事实上，如果我们尝试在CPU处于中断上下文时进入睡眠状态，那么将会生成一个严重的异常，并且很可能整个系统都会挂起。
- en: Another important concept to be really clear about is **atomic operations.**
    A device driver is not a normal program with a regular beginning and end; instead,
    a device driver is a collection of methods and asynchronous interrupt handlers
    that can run simultaneously. That's why we'll most probably have to protect our
    data from race conditions that may corrupt them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要真正清楚的重要概念是**原子操作**。设备驱动程序不是一个有常规开始和结束的正常程序；相反，设备驱动程序是一组可以同时运行的方法和异步中断处理程序。这就是为什么我们很可能必须保护我们的数据，以防可能损坏它们的竞争条件。
- en: For instance, if we use a buffer to save just the received data from a peripheral,
    we must be sure that the data is correctly queued so that the reading process
    can read valid data and no information is lost. Then, in these cases, we should
    use some mutual exclusion mechanisms that Linux offers to us to do our job. However,
    we must pay attention to what we do since some of these mechanisms can be safely
    used in both processes or interrupt contexts, while others can't; some of them
    can be used only in the process context and they can damage our system if we use
    them in the interrupt context.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们使用缓冲区仅保存来自外围设备的接收数据，我们必须确保数据被正确排队，以便读取进程可以读取有效数据，而且不会丢失任何信息。因此，在这些情况下，我们应该使用一些Linux提供给我们的互斥机制来完成我们的工作。然而，我们必须注意我们所做的事情，因为其中一些机制可以在进程或中断上下文中安全使用，而另一些则不行；其中一些只能在进程上下文中使用，如果我们在中断上下文中使用它们，可能会损坏我们的系统。
- en: Moreover, we should take into account that modern CPUs have more than one core,
    so using the trick to disable a CPU's interrupts to get atomic code doesn't work
    at all, and a specific mutual exclusion mechanism must be used instead. In Linux,
    this mechanism is called **spinlocks** and it can be used in both the interrupt
    or process context, but for very short periods of time, since they are implemented
    using a busy-waiting approach. This means that, in order to perform an atomic
    operation, while one core is operating in the critical section of the code belonging
    to such an atomic operation, all the other cores in the CPU are kept out of the
    same critical section, making them wait by actively spinning in a tight loop,
    which, in turn, signifies that you are effectively throwing away the CPU's cycles,
    which are doing nothing useful.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们应该考虑到现代CPU有多个核心，因此使用禁用CPU中断的技巧来获得原子代码根本行不通，必须使用特定的互斥机制。在Linux中，这种机制称为**自旋锁**，它可以在中断或进程上下文中使用，但是只能用于非常短的时间，因为它们是使用忙等待方法实现的。这意味着为了执行原子操作，当一个核心在属于这种原子操作的关键代码部分中操作时，CPU中的所有其他核心都被排除在同一关键部分之外，通过在紧密循环中积极旋转来等待，这反过来意味着你实际上在浪费CPU的周期，这些周期没有做任何有用的事情。
- en: In the next sections, we're going to see, in detail, all these aspects and we'll
    try to explain their usage with very simple examples; in [Chapter 7](https://cdp.packtpub.com/linux_device_driver_development_cookbook/wp-admin/post.php?post=28&action=edit#post_30), *Advanced
    Char Driver Operations*, we'll see how we can use these mechanisms in a device
    driver.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细讨论所有这些方面，并尝试用非常简单的例子解释它们的用法；在[第7章](https://cdp.packtpub.com/linux_device_driver_development_cookbook/wp-admin/post.php?post=28&action=edit#post_30)，*高级字符驱动程序操作*中，我们将看到如何在设备驱动程序中使用这些机制。
- en: Deferring work
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推迟工作
- en: 'A long time ago, there were the **bottom halves**, that is, a hardware event
    was split into two halves: the top half (the hardware interrupt handler) and the
    bottom half (the software interrupt handler). This is because an interrupt handler
    must execute as quickly as possible to be ready to serve the next incoming interrupts,
    so, for instance, the CPU cannot stay for a long time in the interrupt handler''s
    body waiting for the slow peripheral sending or receiving of its data. That''s
    why we used bottom halves; interrupts were split into two parts: the top one,
    the real hardware interrupt handler, which executes quickly and with disabled
    interrupts that simply acknowledges the peripheral and then starts a bottom half,
    executed with enabled interrupts, which can safely complete the sending/receiving
    job by taking its time.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，有**底半部**，也就是说，硬件事件被分成两半：顶半部（硬件中断处理程序）和底半部（软件中断处理程序）。这是因为中断处理程序必须尽快执行，以准备为下一个传入的中断提供服务，因此，例如，CPU不能在中断处理程序的主体中等待慢速外围设备发送或接收数据的时间太长。这就是为什么我们使用底半部；中断被分成两部分：顶部是真正的硬件中断处理程序，它快速执行并禁用中断，只是确认外围设备，然后启动一个底半部，启用中断，可以安全地完成发送/接收工作。
- en: However, bottom halves were very limiting, so kernel developers introduced **tasklets** in
    Linux 2.4 series. Tasklets allowed the dynamic creation of deferrable functions
    in a very simple manner; they were executed in the software interrupt context
    and were suitable for fast execution as they couldn't sleep. However, if we need
    to sleep, we must use another mechanism. In the Linux 2.6 series, **workqueues** were
    introduced as a replacement for a similar construct called taskqueue, which was
    already present in the Linux 2.4 series; they allow kernel functions to be activated
    (or deferred) for later execution as tasklets do, but in comparison tasklets (which
    are executed within software interrupts), they are executed in special kernel
    threads called **worker threads**. This implies that both can be used to defer
    jobs, but workqueue handlers can sleep. This handler, of course, has higher latency
    but, in comparison, workqueues include a richer API for work deferral.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，底半部非常有限，因此内核开发人员在Linux 2.4系列中引入了**tasklets**。Tasklets允许以非常简单的方式动态创建可延迟的函数；它们在软件中断上下文中执行，适合快速执行，因为它们不能休眠。但是，如果我们需要休眠，我们必须使用另一种机制。在Linux
    2.6系列中，**workqueues**被引入作为Linux 2.4系列中已经存在的类似构造称为taskqueue的替代品；它们允许内核函数像tasklets一样被激活（或延迟）以供以后执行，但是与tasklets（在软件中断中执行）相比，它们在称为**worker
    threads**的特殊内核线程中执行。这意味着两者都可以用于推迟工作，但是workqueue处理程序可以休眠。当然，这个处理程序的延迟更高，但是相比之下，workqueues包括更丰富的工作推迟API。
- en: There are two other important concepts to talk about before ending this recipe: the shared
    work queue and the `container_of()` macro.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本食谱之前，还有两个重要的概念要谈论：共享工作队列和`container_of()`宏。
- en: The shared work queue
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享工作队列
- en: 'The preceding example in the recipe can be simplified by using the **shared
    work queue**. This is a special work queue defined by the kernel itself that can
    be used by device drivers (and other kernel entities) if they *promise* not to
    monopolize the queue for long periods of time (that is no long periods of sleep
    and no long-running tasks), if they accept the fact that their handlers may take
    longer to get their fair share of CPU. If both conditions are met, we can avoid
    creating a custom work queue with `create_singlethread_workqueue()` and we can
    schedule work by simply using `schedule_work()` and `schedule_delayed_work()`
    as follows. Here are the handlers:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱中的前面的例子可以通过使用**共享工作队列**来简化。这是内核本身定义的一个特殊工作队列，如果设备驱动程序（和其他内核实体）*承诺*不会长时间垄断队列（也就是说不会长时间休眠和不会长时间运行的任务），如果它们接受它们的处理程序可能需要更长时间来获得公平的CPU份额。如果两个条件都满足，我们可以避免使用`create_singlethread_workqueue()`创建自定义工作队列，并且可以通过简单地使用`schedule_work()`和`schedule_delayed_work()`来安排工作。以下是处理程序：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, the modifications for the initialization and removal:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，初始化和移除的修改：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding patch can be found in the GitHub repository in the `add_workqueue_2_to_irqtest_module.patch` file and
    it can be applied as usual with the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的补丁可以在GitHub存储库的`add_workqueue_2_to_irqtest_module.patch`文件中找到，并且可以使用以下命令像往常一样应用：
- en: '**`$ patch -p1 < add_workqueue_2_to_irqtest_module.patch`**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$ patch -p1 < add_workqueue_2_to_irqtest_module.patch`**'
- en: The container_of() macro
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`container_of()`宏'
- en: 'As a final note, we should utilize some words to explain a bit about the  `container_of()` macro.
    This macro is defined in `linux/include/linux/kernel.h` as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该利用一些词来解释一下`container_of()`宏。该宏在`linux/include/linux/kernel.h`中定义如下：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `container_of()`  function takes three arguments: a pointer `ptr`, the `type` of
    the container, and the name of the `member` the pointer refers to within the container.
    By using this information, the macro can expand to a new address pointing to the
    containing structure, which accommodates the respective member.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`container_of()`函数接受三个参数：一个指针`ptr`，容器的`type`，以及指针在容器内引用的`member`的名称。通过使用这些信息，宏可以扩展为指向包含结构的新地址，该结构容纳了相应的成员。'
- en: So, in our example, in `irqtest_work_handler()`, we can get a `struct irqtest_data` pointer
    to tell `container_of()` which is the address of its member named `work`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的示例中，在`irqtest_work_handler()`中，我们可以获得一个指向`struct irqtest_data`的指针，以告诉`container_of()`其成员`work`的地址。
- en: For further information regarding `container_of()` function, the internet is
    your friend; however, a good starting point is in kernel sources within the  `linux/Documentation/driver-model/design-patterns.txt` file, which describes
    a few common design patterns found in device drivers using this macro.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`container_of()`函数的更多信息，可以在互联网上找到；但是，一个很好的起点是内核源代码中的`linux/Documentation/driver-model/design-patterns.txt`文件，该文件描述了在使用此宏的设备驱动程序中发现的一些常见设计模式。
- en: It could be interesting to take a look at **Notifier Chains**, simply called **notifiers**,
    which are a general mechanism provided by the kernel and designed to provide a way
    for kernel elements to express interest in being informed about the occurrence
    of general **asynchronous** **events**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有兴趣看一下**通知器链**，简称**通知器**，它是内核提供的一种通用机制，旨在为内核元素提供一种表达对一般**异步**事件发生感兴趣的方式。
- en: Notifiers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知器
- en: 'The basic building block of the notifiers'' mechanism is the `struct notifier_block` defined
    in the `linux/include/linux/notifier.h` header file, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通知器机制的基本构建块是在`linux/include/linux/notifier.h`头文件中定义的`struct notifier_block`，如下所示：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The structure contains the pointer `notifier_call` to the function to be called
    when the event occurs. The parameters passed to the notifier function when it's
    called, include an `nb` pointer to the notifier block itself, an event `action` code, which
    depends on the particular used chain, and a  `data` pointer to an unspecified
    private data type, which can be used in a similar manner as tasklets or waitqueues.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构包含指向发生事件时要调用的函数的指针`notifier_call`。当调用通知器函数时传递的参数包括指向通知器块本身的`nb`指针，一个依赖于特定使用链的事件`action`代码，以及指向未指定私有数据类型的`data`指针，该类型可以以与tasklets或waitqueues类似的方式使用。
- en: The `next` field is managed by notifier internals, while the `priority` field defines
    the priority of the function pointed by `notifier_call` within the notifier chain. First
    the functions having higher priority are executed.  In reality, priority is left
    by nearly all registrations out of the notifier block definition, which means
    it gets 0 as the default value and execution order ends up depending only on the
    registration order (that is a semi-random order).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`next`字段由通知器内部管理，而`priority`字段定义了在通知器链中由`notifier_call`指向的函数的优先级。首先执行具有更高优先级的函数。实际上，几乎所有注册都将优先级留给通知器块定义之外，这意味着它以0作为默认值，并且执行顺序最终取决于注册顺序（这是一种半随机顺序）。'
- en: 'Device driver developers shouldn''t need to create their own notifiers, and
    very often it happens that they need to use an existing one. Linux defines several
    notifiers, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 设备驱动程序开发人员不应该需要创建自己的通知器，而且很多时候他们需要使用现有的通知器。Linux定义了几个通知器，如下所示：
- en: Netdevice notifier (see `linux/include/linux/netdevice.h`)—reports networking
    device's events
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设备通知器（参见`linux/include/linux/netdevice.h`）-报告网络设备的事件
- en: Backlight notifier (see `linux/include/linux/backlight.h`)—reports LCD backlight
    events
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背光通知器（参见`linux/include/linux/backlight.h`）-报告LCD背光事件
- en: Suspend notifier (see `linux/include/linux/suspend.h`)—reports power to suspend
    and resume related events
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂起通知器（参见`linux/include/linux/suspend.h`）-报告挂起和恢复相关事件的电源
- en: Reboot notifier (see `linux/include/linux/reboot.h`)—reports rebooting requests
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启通知器（参见`linux/include/linux/reboot.h`）-报告重启请求
- en: Power supply notifier (see `linux/include/linux/power_supply.h`)—reports power
    supply activities
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源供应通知器（参见`linux/include/linux/power_supply.h`）-报告电源供应活动
- en: 'Each notifier has a register function that can be used to ask the system to
    be informed whenever a particular event happens. For example, the following code
    is reported as a useful example to request networking device and rebooting events:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个通知器都有一个注册函数，可以用来要求系统在特定事件发生时通知。例如，以下代码被报告为请求网络设备和重启事件的有用示例：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: All code presented here is in the `notifier.c` file from GitHub repository regarding
    this chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里呈现的所有代码都在GitHub存储库中的`notifier.c`文件中。
- en: 'Both the `register_netdevice_notifier()` and `register_reboot_notifier()` functions
    work on two struct notifier_block defined as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_netdevice_notifier()`和`register_reboot_notifier()`函数都使用以下定义的两个struct
    notifier_block：'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notifier functions are defined like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通知器函数的定义如下：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By using `container_of()`, as usual, we can get a pointer to our data structure, `struct
    notifier_data`; then, once our job is done, we have to return a well-fixed value
    defined in the `linux/include/linux/notifier.h` header:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`container_of()`，像往常一样，我们可以获得指向我们的数据结构`struct notifier_data`的指针；然后，一旦我们的工作完成，我们必须返回在`linux/include/linux/notifier.h`头文件中定义的一个固定值：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Their meanings are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的含义如下：
- en: '`NOTIFY_DONE`: Not interested in this notification.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOTIFY_DONE`：对此通知不感兴趣。'
- en: '`NOTIFY_OK`: Notification was correctly processed.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOTIFY_OK`：通知已正确处理。'
- en: '`NOTIFY_BAD`: Something went wrong with this notification, so stop calling
    callback functions for this event!'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOTIFY_BAD`：此通知出现问题，因此停止调用此事件的回调函数！'
- en: '`NOTIFY_STOP_MASK` can be used to encapsulate (negative) `errno` values as
    follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOTIFY_STOP_MASK`可以用于封装（负）`errno`值，如下所示：'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `errno` value can then be retrieved with `notifier_to_errno()`, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用`notifier_to_errno()`检索`errno`值，如下所示：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To test our simple example, we have to compile the `notifier.c` kernel module and
    then move the `notifier.ko` module to the ESPRESSObin, where it can be inserted
    into the kernel as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的简单示例，我们必须编译`notifier.c`内核模块，然后将`notifier.ko`模块移动到ESPRESSObin，然后可以将其插入内核，如下所示：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Just after insertion, some events are already notified; however, to generate
    new events, we can try, for instance, to disable or enable a network device using
    the following `ip` command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 插入后，已经通知了一些事件；但是，为了生成新事件，我们可以尝试使用以下`ip`命令禁用或启用网络设备：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Code `0xd` corresponds to the `NETDEV_PRE_UP` event as defined in `linux/include/linux/netdevice.h`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码`0xd`对应于`linux/include/linux/netdevice.h`中定义的`NETDEV_PRE_UP`事件：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we reboot the system, we should see the following message within the kernel
    messages:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新启动系统，我们应该在内核消息中看到以下消息：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Kernel timers
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核定时器
- en: 'A **kernel timer** is an easy way to ask the kernel to execute a specific function
    after a well-defined amount of time. Linux implements two different types of kernel
    timers: old but still valid kernel timers defined in the `linux/include/linux/timer.h` header
    file and new **high-resolution** kernel timers defined in the `linux/include/linux/hrtimer.h `header
    file. Even if they are implemented differently, both mechanisms work in a very
    similar manner: we have to declare a structure holding timer''s data, which can
    be initialized by proper functions, and then the timer can be started using the
    proper function. Once expired, the timer calls a handler to execute the desired
    actions and, eventually, we have the possibility of stopping or restarting the
    timer.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**内核定时器**是请求内核在经过明确定义的时间后执行特定函数的简单方法。 Linux实现了两种不同类型的内核定时器：在`linux/include/linux/timer.h`头文件中定义的旧但仍然有效的内核定时器和在`linux/include/linux/hrtimer.h`头文件中定义的新的**高分辨率**内核定时器。即使它们实现方式不同，但两种机制的工作方式非常相似：我们必须声明一个保存定时器数据的结构，可以通过适当的函数进行初始化，然后可以使用适当的函数启动定时器。一旦到期，定时器调用处理程序执行所需的操作，最终，我们有可能停止或重新启动定时器。'
- en: Legacy kernel timers are only supported at a resolution of 1 jiffy. The length
    of a jiffy is dependent on the value of the defined `HZ` in the Linux kernel (see
    the `linux/include/asm-generic/param.h `file); usually, it's 1 millisecond on
    PCs and some other platforms, while it's set to 10 milliseconds on most embedded
    platforms. Having a resolution of 1 millisecond resolved most problems for device
    drivers developers in the past, but nowadays, most peripherals need higher resolution
    to be correctly managed. This is why higher resolution timers come into play,
    allowing the system to wake up and process data quickly at more accurate time
    intervals. Currently, kernel timers have been obsoleted by high-resolution timers
    (even if they are still used around the kernel sources), which have the target
    to implement the POSIX 1003.1b Section 14 (Clocks and Timers) API in Linux, that
    is, timers with accuracy better than 1 jiffy.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 传统内核定时器仅支持1个jiffy的分辨率。 jiffy的长度取决于Linux内核中定义的`HZ`的值（请参阅`linux/include/asm-generic/param.h`文件）；通常在PC和其他一些平台上为1毫秒，在大多数嵌入式平台上设置为10毫秒。过去，1毫秒的分辨率解决了大多数设备驱动程序开发人员的问题，但是现在，大多数外围设备需要更高的分辨率才能得到正确管理。这就是为什么需要更高分辨率的定时器，允许系统在更准确的时间间隔内快速唤醒和处理数据。目前，内核定时器已被高分辨率定时器所取代（即使它们仍然在内核源代码周围使用），其目标是在Linux中实现POSIX
    1003.1b第14节（时钟和定时器）API，即精度优于1个jiffy的定时器。
- en: Note that we just saw that, to delay a job, we can also use delayed workqueues.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们刚刚看到，为了延迟作业，我们还可以使用延迟工作队列。
