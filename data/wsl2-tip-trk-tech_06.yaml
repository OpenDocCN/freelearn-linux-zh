- en: '*Chapter 4*: Windows to Linux Interoperability'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：Windows与Linux的互操作性'
- en: In [*Chapter 1*](B16412_01_Final_JC_ePub.xhtml#_idTextAnchor017), *Introduction
    to the Windows Subsystem for Linux*, we compared the WSL experience to running
    Linux in a virtual machine; where virtual machines are focused around isolation,
    WSL has strong interoperability built in between Windows and Linux. In this chapter,
    you will start to be introduced to these capabilities, starting with interacting
    with files and applications running under WSL and files from the Windows host
    environment. This will include looking at how to pipe output between scripts running
    in Windows and WSL. After this, we will look at how WSL enables web applications
    in Linux to be accessed from Windows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B16412_01_Final_JC_ePub.xhtml#_idTextAnchor017)中，我们将WSL体验与在虚拟机中运行Linux进行了比较；虚拟机专注于隔离，而WSL在Windows和Linux之间具有强大的互操作性。在本章中，您将开始了解这些功能，从与在WSL下运行的文件和应用程序进行交互开始，以及从Windows主机环境访问文件。这将包括查看如何在Windows和WSL中的脚本之间传递输出。之后，我们将看看WSL如何使Linux中的Web应用程序可以从Windows访问。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主要内容：
- en: Accessing Linux files from Windows
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Windows访问Linux文件
- en: Running Linux applications from Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Windows运行Linux应用程序
- en: Accessing Linux web applications from Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Windows访问Linux Web应用程序
- en: Let's get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Accessing Linux files from Windows
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Windows访问Linux文件
- en: 'When you have WSL installed, you get a new `\\wsl$` path that you can address
    in Windows Explorer and other programs. If you type `\\wsl$` into the address
    bar in Windows Explorer, it will list any running Linux **distributions** (**distros**)
    as shown in the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装了WSL后，您会得到一个新的`\\wsl$`路径，您可以在Windows资源管理器和其他程序中使用它。如果您在Windows资源管理器的地址栏中键入`\\wsl$`，它将列出任何正在运行的Linux发行版（distros），如下面的截图所示：
- en: '![Figure 4.1 – A screenshot showing \\wls$ in Windows Explorer'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 - 在Windows资源管理器中显示\\wls$的截图
- en: '](img/B16412_04_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_04_01.jpg)'
- en: Figure 4.1 – A screenshot showing \\wls$ in Windows Explorer
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 - 在Windows资源管理器中显示的\\wls$的截图
- en: As you can see in the preceding screenshot, each running distro shows as a path
    under `\\wsl$`. Each `\\wsl$\<distroname>` is the path to the root of the file
    system for `<distroname>`. For example, `\\wsl$\Ubuntu-20.04` is the Windows path
    for accessing the root of the file system for the `Ubuntu-20.04` distro from Windows.
    This is a very flexible and powerful capability bringing full access to the file
    systems of your Linux distros to Windows.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，每个正在运行的发行版都显示为`\\wsl$`下的路径。每个`\\wsl$\<distroname>`都是访问`<distroname>`文件系统根目录的Windows路径。例如，`\\wsl$\Ubuntu-20.04`是从Windows访问`Ubuntu-20.04`发行版文件系统根目录的路径。这是一种非常灵活和强大的功能，使您可以完全访问Windows上的Linux发行版的文件系统。
- en: 'The following screenshot shows the `\\wsl$\Ubuntu-20.04\home\stuart\tmp` path
    in Windows Explorer. This corresponds to the `~/tmp` folder in the `Ubuntu-20.04`
    distro:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了Windows资源管理器中的`\\wsl$\Ubuntu-20.04\home\stuart\tmp`路径。这对应于`Ubuntu-20.04`发行版中的`~/tmp`文件夹：
- en: '![Figure 4.2 – A screenshot showing the contents of a Linux distro in Windows
    Explorer'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 - 在Windows资源管理器中显示Linux发行版内容的截图
- en: '](img/B16412_04_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_04_02.jpg)'
- en: Figure 4.2 – A screenshot showing the contents of a Linux distro in Windows
    Explorer
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 - 在Windows资源管理器中显示Linux发行版内容的截图
- en: 'In these screenshots, you can see the Linux file system in Windows Explorer,
    but these paths can be used by any application that can accept UNC paths (that
    is, paths starting with `\\`). From PowerShell, for example, you can read and
    write from the Linux file system the same as you would from Windows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些截图中，您可以在Windows资源管理器中看到Linux文件系统，但是任何可以接受UNC路径（即以`\\`开头的路径）的应用程序都可以使用这些路径。例如，从PowerShell中，您可以像在Windows中一样读取和写入Linux文件系统：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, a text file has been created as `~/tmp/hello-wsl.txt` in the
    Ubuntu 20.04 distro, with the contents `Hello from WSL!`, and the `Get-Content`
    PowerShell cmdlet is used to read the contents of the file using the `\\wsl$\...`
    path we saw previously.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，在Ubuntu 20.04发行版中创建了一个名为`~/tmp/hello-wsl.txt`的文本文件，内容为`Hello from WSL!`，并使用`Get-Content`
    PowerShell cmdlet使用我们之前看到的`\\wsl$\...`路径读取文件的内容。
- en: 'As you browse the file system in Windows Explorer, double-clicking on a file
    will attempt to open it in Windows. For example, double-clicking on the text file
    we looked at in *Figure 4.2* will open it in your default text editor (Notepad
    in my case), as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows资源管理器中浏览文件系统时，双击文件将尝试在Windows中打开它。例如，双击我们在*图4.2*中查看的文本文件将在您的默认文本编辑器（在我的情况下是记事本）中打开，如下面的截图所示：
- en: '![Figure 4.3 – A screenshot showing a Linux file open in Notepad'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 - 在记事本中打开的Linux文件的截图
- en: '](img/B16412_04_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_04_03.jpg)'
- en: Figure 4.3 – A screenshot showing a Linux file open in Notepad
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 - 在记事本中打开的Linux文件的截图
- en: This screenshot shows the same content as in the previous example of getting
    the file content via PowerShell but open in Notepad. The `\\wsl$\...` path.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了与之前通过PowerShell获取文件内容的示例相同的内容，但在记事本中打开。使用`\\wsl$\...`路径。
- en: Tip
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you browse to `\\wsl$` and don't see one of your installed distros, then
    it is an indication that the distro isn't running.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您浏览到`\\wsl$`并且看不到您安装的发行版之一，则表示该发行版未运行。
- en: An easy way to start the distro is by launching a shell in it with Windows Terminal.
    Alternatively, if you know the distro name, you can type `\\wsl$\<distroname>`
    in the Windows Explorer address bar (or whatever application you are using) and
    WSL will automatically start the distro to allow you to browse the file system!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 启动发行版的简单方法是使用Windows终端在其中启动一个shell。或者，如果您知道发行版的名称，您可以在Windows资源管理器的地址栏（或您正在使用的任何应用程序）中键入`\\wsl$\<distroname>`，WSL将自动启动发行版，以允许您浏览文件系统！
- en: As you have seen in this section, the `\\wsl$\` share provides the ability to
    access files inside the file systems of your WSL distros from Windows applications.
    This is a useful step in bridging Windows and Linux with WSL as it allows you
    to use Windows tools and applications to work with files in the Linux file system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本节中所看到的，`\\wsl$\`共享提供了从Windows应用程序访问WSL发行版文件系统内文件的能力。这是在WSL中桥接Windows和Linux的有用步骤，因为它允许您使用Windows工具和应用程序来处理Linux文件系统中的文件。
- en: Next, we'll take a look at running applications in WSL from Windows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下如何从Windows中运行WSL中的应用程序。
- en: Running Linux applications from Windows
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Windows中运行Linux应用程序
- en: In [*Chapter 2*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023), *Installing
    and Configuring the Windows Subsystem for Linux*, you were briefly introduced
    to the `wsl` command and you saw how it could be used both for controlling running
    distros and for executing applications inside distros. In this section, we're
    going to dig deeper into running applications in distros with the `wsl` command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023)中，*安装和配置Windows子系统*，我们简要介绍了`wsl`命令，并且您看到了它如何用于控制运行的发行版和在发行版内执行应用程序。在本节中，我们将深入探讨使用`wsl`命令在发行版中运行应用程序。
- en: As we saw in the last section, being able to access files across Windows and
    Linux is useful and being able to invoke applications builds on this further.
    WSL doesn't stop with just being able to run applications in a distro from Windows,
    it also lets you pipe output between applications. When building up scripts in
    either Windows or Linux, piping output between applications is a very common way
    to build up script functionality. Being able to pipe output between Windows and
    Linux commands allows you to build scripts that run across both Windows *and*
    Linux, which really helps build that sense of uniting the two environments. We'll
    start looking at how that works next.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，能够在Windows和Linux之间访问文件非常有用，而能够调用应用程序进一步增强了这一功能。WSL不仅可以从Windows中的发行版运行应用程序，还可以在应用程序之间进行输出导入。在Windows或Linux中构建脚本时，通过应用程序之间的输出导入来构建脚本功能是一种非常常见的方式。能够在Windows和Linux命令之间进行输出导入，使您能够构建在Windows和Linux上运行的脚本，这真的有助于建立这两个环境的统一感。我们将开始看一下它是如何工作的。
- en: Piping into Linux
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入到Linux中
- en: 'In this section, we''re going to explore piping data from Linux to Windows.
    A scenario I have encountered many times is having some data such as log output
    that I want to perform some processing on. An example of this could be processing
    each line to extract an HTTP status code and then grouping and counting to calculate
    how many successes versus failures were logged. We''ll use an example that is
    representative of this scenario but doesn''t require any real setup: we will examine
    the files in the Windows directory and determine how many files there are that
    start with each letter of the alphabet.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨将数据从Linux传输到Windows的方法。我遇到过很多次的一种情况是有一些数据，比如日志输出，我想对其进行一些处理。一个例子是处理每一行以提取HTTP状态码，然后进行分组和计数，以计算记录了多少个成功和失败。我们将使用一个代表这种情况的示例，但不需要任何真实的设置：我们将检查Windows目录中以每个字母开头的文件数量。
- en: 'Let''s start with some PowerShell (we''ll build the script up, so don''t worry
    if you''re not totally familiar with PowerShell):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些PowerShell开始（我们将逐步构建脚本，所以如果您对PowerShell不太熟悉，不用担心）：
- en: 'First of all, we will use `Get-ChildItem` to get the contents of the `Windows`
    folder as shown in the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用`Get-ChildItem`获取`Windows`文件夹的内容，如下所示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we can perform the extraction, in this case taking the first letter of
    the filename. We can add to our previous command by piping the output from `Get-ChildItem`
    into the `ForEach-Object` cmdlet as shown here:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以执行提取操作，例如提取文件名的第一个字母。我们可以通过将`Get-ChildItem`的输出导入到`ForEach-Object` cmdlet中来扩展我们之前的命令，如下所示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next step is to group and count the items. Since the goal is to demonstrate
    piping output between Windows and Linux, we''ll ignore the PowerShell `Group-Object`
    cmdlet for now and instead use some common Linux utilities: `sort` and `uniq`.
    If you were using these commands in Linux with some other output, you could pipe
    that into them as `other-command | sort | uniq -c`. However, since `sort` and
    `uniq` are Linux commands and we''re running this from Windows, we need to use
    the `wsl` command to run them as shown in the following output:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是对项目进行分组和计数。由于目标是演示在Windows和Linux之间进行输出导入，我们暂时忽略PowerShell的`Group-Object`
    cmdlet，而是使用一些常见的Linux实用工具：`sort`和`uniq`。如果您在Linux中使用这些命令与其他输出一起使用，可以将其作为`other-command
    | sort | uniq -c`进行管道传输。然而，由于`sort`和`uniq`是Linux命令，我们在Windows上运行此命令，需要使用`wsl`命令来运行它们，如下面的输出所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding output shows the result we were aiming for: a count of the number
    of files and folders starting with each letter. But more importantly, it shows
    that piping output from a Windows command into a Linux command just works!'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示了我们的目标结果：每个字母开头的文件和文件夹的数量。但更重要的是，它显示了将Windows命令的输出导入Linux命令的管道工作正常！
- en: 'In this example, we called `wsl` twice: once for `sort` and once for `uniq`,
    which will cause the output to be piped between Windows and Linux for each stage
    in the pipeline. We can use a single `wsl` call if we structure the commands slightly
    differently. It might be tempting to try piping the input into `wsl sort | uniq
    -c` but that tries to pipe the output of `wsl sort` into a Windows `uniq` command.
    You might also consider `wsl "sort | uniq -c"` but that fails with the error `/bin/bash:
    sort | uniq -c: command not found`. Instead, we can use `wsl` to run `bash` with
    our command `wsl bash -c "sort | uniq -c"`. The full command is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '在此示例中，我们调用了两次`wsl`：一次用于`sort`，一次用于`uniq`，这将导致输出在管道中的每个阶段在Windows和Linux之间进行传输。如果我们稍微改变命令的结构，我们可以使用单个`wsl`调用。尝试将输入管道到`wsl
    sort | uniq -c`可能会很诱人，但这会尝试将`wsl sort`的输出管道到Windows的`uniq`命令中。您还可以考虑`wsl "sort
    | uniq -c"`，但会出现错误`/bin/bash: sort | uniq -c: command not found`。相反，我们可以使用`wsl`运行`bash`和我们的命令`wsl
    bash -c "sort | uniq -c"`。完整的命令如下：'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, this gives the same output as the previous version but with
    only a single execution of `wsl`. While this might not be the most obvious way
    to run complex commands, it is a useful technique.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这与先前版本的输出相同，但只执行了一次`wsl`。虽然这可能不是运行复杂命令的最明显的方法，但它是一种有用的技术。
- en: In this example, we have been focused on piping data into Linux, but it works
    equally well when piping output from Linux commands, as we'll see next.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们一直关注将数据导入Linux，但当从Linux命令导出输出时，它同样有效，我们将在下一节中看到。
- en: Piping from Linux
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Linux进行管道传输
- en: In the previous section we looked at piping the output from Windows commands
    into Linux, and explored this by using PowerShell to retrieve the items in the
    `Windows` folder and get their first letters before passing the letters to Linux
    utilities to sort, group, and count them. In this section, we will be looking
    at piping output from Linux utilities to Windows. We'll use the reverse example
    of listing files via Bash and processing the output with Windows utilities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看了如何将Windows命令的输出导入Linux，并通过使用PowerShell检索`Windows`文件夹中的项目并获取它们的首字母，然后将字母传递给Linux实用程序进行排序、分组和计数来探索这一点。在本节中，我们将看看如何将Linux实用程序的输出导入Windows。我们将使用反向示例，通过Bash列出文件并使用Windows实用程序处理输出。
- en: 'To start, let''s get the files and folders from the `/usr/bin` folder in our
    default distro:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从默认的发行版中获取`/usr/bin`文件夹中的文件和文件夹：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This output shows the contents of the `/usr/bin` folder and the next step is
    to take the first character of the name. For this, we can use the `cut` command.
    We could run `wsl ls /usr/bin | wsl cut -c1`, but we can reuse the technique we
    saw in the last section to combine it into a single `wsl` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出显示了`/usr/bin`文件夹的内容，下一步是获取名称的第一个字符。为此，我们可以使用`cut`命令。我们可以运行`wsl ls /usr/bin
    | wsl cut -c1`，但我们可以重用我们在上一节中看到的技术将其组合成一个单独的`wsl`命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see from the preceding output, we now have just the first characters
    and we are ready to sort and group them. For this exercise, we will pretend that
    the `sort` and `uniq` commands don''t exist and we will instead use the PowerShell
    `Group-Object` cmdlet:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看到，我们现在只有第一个字符，并且我们已经准备好对它们进行排序和分组。为了进行这个练习，我们假装`sort`和`uniq`命令不存在，而是使用PowerShell的`Group-Object`
    cmdlet：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we can see that the output was successfully piped from the Bash commands
    run in WSL to the PowerShell `Group-Object` cmdlet. In the previous section, we
    forced the characters to be uppercased, but here we didn't need to do that as
    `Group-Object` performs a case-insensitive match by default (although that can
    be overridden with the `-CaseSensitive` switch).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到从在WSL中运行的Bash命令成功地通过管道传输到PowerShell的`Group-Object` cmdlet。在前一节中，我们强制将字符转换为大写，但在这里我们不需要这样做，因为`Group-Object`默认执行不区分大小写的匹配（尽管可以使用`-CaseSensitive`开关覆盖这一点）。
- en: As you've seen through these examples, you call into Linux distros with WSL
    to execute Linux applications and utilities. The examples just used the default
    WSL distro, but in all of the examples above, you can add the `-d` switch on the
    `wsl` command to specify which distro to run the Linux commands in. This can be
    useful if you have multiple distros and the particular application you need is
    only available in one of them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些示例，您可以通过WSL调用Linux发行版来执行Linux应用程序和实用程序。这些示例只使用了默认的WSL发行版，但在上面的所有示例中，您可以在`wsl`命令上添加`-d`开关以指定要在其中运行Linux命令的发行版。如果您有多个发行版，并且您需要的特定应用程序仅在其中一个发行版中可用，这将非常有用。
- en: Being able to pipe output in either direction between Windows and Linux applications
    allows a lot of flexibility in combining applications. If you're more familiar
    with Windows utilities, you might execute Linux applications and then process
    the results with Windows utilities. Or if Linux is where you feel more at home
    but you need to work on a Windows machine, then being able to invoke familiar
    Linux utilities to deal with Windows output will help you be more productive.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在Windows和Linux应用程序之间双向传输输出允许在组合应用程序时具有很大的灵活性。如果您更熟悉Windows实用程序，您可以执行Linux应用程序，然后使用Windows实用程序处理结果。或者，如果Linux是您更熟悉的地方，但您需要在Windows机器上工作，那么能够调用熟悉的Linux实用程序来处理Windows输出将帮助您提高工作效率。
- en: You've seen how to access Linux files from Windows and call Linux applications
    from Windows. In the next section, you'll see how to access a web application
    running in WSL from Windows.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到如何从Windows访问Linux文件并从Windows调用Linux应用程序。在下一节中，您将看到如何从Windows访问在WSL中运行的Web应用程序。
- en: Accessing Linux web applications from Windows
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Windows访问Linux Web应用程序
- en: If you are developing a web application, then you typically have your application
    open in your web browser as `http://localhost` while you are working on it. With
    WSL, your web application is running inside the WSL lightweight virtual machine,
    which has a separate IP address (you can find this with the Linux `ip addr` command).
    Fortunately, WSL forwards localhost addresses to Linux distros to preserve the
    natural workflow. You'll work through that in this section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发Web应用程序，那么在您工作时，通常会在Web浏览器中打开应用程序，地址为`http://localhost`。使用WSL，您的Web应用程序在WSL轻量级虚拟机内运行，该虚拟机具有单独的IP地址（您可以使用Linux的`ip
    addr`命令找到此地址）。幸运的是，WSL将localhost地址转发到Linux发行版以保持自然的工作流程。您将在本节中了解到这一点。
- en: To follow along with this, make sure that you have the code for the book cloned
    in a Linux distro, open a terminal, and navigate to the `chapter-04/web-app` folder
    at [https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques/tree/main/chapter-04](https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques/tree/main/chapter-04).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的内容，请确保您已经在Linux发行版中克隆了本书的代码，在终端中打开，并导航到`chapter-04/web-app`文件夹，网址为[https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques/tree/main/chapter-04](https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques/tree/main/chapter-04)。
- en: 'The sample code uses Python 3, which should already be installed if you are
    using a recent version of Ubuntu. You can test whether Python 3 is installed by
    running `python3 -c ''print("hello")''` in your Linux distro. If the command completes
    successfully, then you''re all set. If not, refer to the Python documentation
    for instructions on installing it: [https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码使用Python 3，如果您使用的是最新版本的Ubuntu，则应该已经安装了Python 3。您可以通过在Linux发行版中运行`python3
    -c 'print("hello")'`来测试是否安装了Python 3。如果命令成功完成，则说明已经准备就绪。如果没有，请参考Python文档以获取安装说明：[https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download)。
- en: 'In the `chapter-04/web-app` folder, you should see `index.html` and `run.sh`.
    In the terminal, run the web server by running `./run.sh`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapter-04/web-app`文件夹中，您应该看到`index.html`和`run.sh`。在终端中运行`./run.sh`来运行Web服务器：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should see output similar to the preceding output to indicate that the web
    server is running.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于前面输出的输出，以指示Web服务器正在运行。
- en: 'You can verify that the web server is running by starting a new terminal in
    your Linux distro and running `curl`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Linux发行版中启动新的终端并运行`curl`来验证Web服务器是否正在运行：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This output shows the HTML returned by the web server in response to the `curl`
    request.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出显示了Web服务器对`curl`请求的响应返回的HTML。
- en: 'Next, open your web browser in Windows and navigate to `http://localhost:8080`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Windows中打开您的Web浏览器，并导航到`http://localhost:8080`。
- en: '![Figure 4.4 – A screenshot showing a WSL web application in the Windows browser'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 - 显示WSL Web应用程序在Windows浏览器中的屏幕截图'
- en: '](img/B16412_04_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16412_04_04.jpg)'
- en: Figure 4.4 – A screenshot showing a WSL web application in the Windows browser
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 - 显示WSL Web应用程序在Windows浏览器中的屏幕截图
- en: As the preceding screenshot shows, WSL forwards traffic for **localhost** in
    Windows into Linux distros. When you are developing a web application with WSL
    or running applications with a web user interface, you can access the web application
    using **localhost** just as you would if it were running locally in Windows; this
    is another integration that really smooths out the user experience.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，WSL将Windows中的**localhost**流量转发到Linux发行版。当您使用WSL开发Web应用程序或运行具有Web用户界面的应用程序时，您可以使用**localhost**访问Web应用程序，就像它在Windows本地运行一样；这是另一种真正平滑用户体验的集成。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have seen the ways in which WSL allows us to interop with
    Linux distros from Windows, starting with accessing the Linux file system via
    the `\\wsl$\...` path. You also saw how to call Linux applications from Windows
    and that you can chain Windows and Linux commands together by piping output between
    them, just as you would normally in either system. Finally, you saw that WSL forwards
    **localhost** requests to web servers running inside WSL distros. This allows
    you to easily develop and run web applications in WSL and test them from the browser
    in Windows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经看到了WSL允许我们如何与Linux发行版在Windows中进行互操作的方式，从通过`\\wsl$\...`路径访问Linux文件系统开始。您还看到了如何从Windows调用Linux应用程序，并且可以通过在它们之间传递输出来链接Windows和Linux命令，就像在任一系统中一样。最后，您看到了WSL将**localhost**请求转发到在WSL发行版内部运行的Web服务器。这使您可以轻松地在WSL中开发和运行Web应用程序，并从Windows浏览器中进行测试。
- en: Being able to access the file systems for your WSL distros and execute commands
    in them from Windows really helps to bring the two systems together, and it helps
    you pick your preferred tools for the tasks you are working on, regardless of
    which operating system they are in. In the next chapter, we will explore the capabilities
    for interacting with Windows from inside a WSL distro.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从Windows访问WSL发行版的文件系统并在其中执行命令，真正有助于将这两个系统结合在一起，并帮助您选择您喜欢的工具来完成您正在进行的任务，而不管它们在哪个操作系统中。在下一章中，我们将探索从WSL发行版内部与Windows交互的能力。
