- en: Chapter 10. Awk Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 awk基础知识
- en: 'The stream editor is not alone in its family and has a big brother awk. In
    this chapter, we will run through the basics or fundamentals of awk and see the
    power of the awk programming language. We will learn why we need and love awk
    and how we can make use of some of the basic features before we start putting
    awk to practical use in the next two chapters. As we work our way through this,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 流编辑器并不孤单，它还有一个大哥awk。在本章中，我们将介绍awk的基础知识，并看到awk编程语言的强大之处。我们将了解为什么我们需要和喜爱awk，以及在开始在接下来的两章中实际使用awk之前，我们如何利用一些基本功能。在这个过程中，我们将涵盖以下主题：
- en: Filtering content from files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中过滤内容
- en: Formatting output
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化输出
- en: Displaying non-system users from `/etc/passwd`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示`/etc/passwd`中的非系统用户
- en: Using `awk` control files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`awk`控制文件
- en: The history behind awk
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: awk背后的历史
- en: 'The `awk` command is a mainstay in the command suite in both Unix and Linux.
    The Unix command `awk` was first developed by Bell Labs in the 1970''s and is
    named after the surnames of the main authors: Alfred Aho, Peter Weinberger, and
    Brian Kernighan. The `awk` command allows access to the awk programming language,
    which is designed to process data within text streams.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`命令是Unix和Linux命令套件中的主要组成部分。Unix命令`awk`最早是在20世纪70年代由贝尔实验室开发的，它的名字取自主要作者的姓氏：Alfred
    Aho，Peter Weinberger和Brian Kernighan。`awk`命令允许访问awk编程语言，该语言旨在处理文本流中的数据。'
- en: 'To demonstrate the programming language that is provided with `awk`, we should
    create a `hello world` program. We know this is compulsory for all languages:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示`awk`提供的编程语言，我们应该创建一个`hello world`程序。我们知道这对于所有语言来说都是强制性的：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Not only can we see that this code will print the ubiquitous hello message,
    we can also generate header information with the `BEGIN` block. Later, we will
    see that we can create summary information with an `END` code block by allowing
    for a main code block.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以看到这段代码将打印无处不在的hello消息，还可以使用`BEGIN`块生成头信息。稍后，我们将看到我们可以通过`END`代码块创建摘要信息，从而允许主代码块。
- en: 'We can see the output of this basic command in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到这个基本命令的输出：
- en: '![The history behind awk](img/00099.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![awk背后的历史](img/00099.jpeg)'
- en: Displaying and filtering content from files
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示和过滤文件中的内容
- en: 'Now of course we all want to be able to print a little more than just **Hello
    World**. The `awk` command can be used to filter content from files and if needed,
    very large files. We should begin by printing the complete file before filtering
    it. In this way, we will get a feel of the syntax of the command. Later, we will
    see how we can add this control information into `awk` files to ease the command
    line. Using the following command, we will print all the lines from the `/etc/passwd`
    file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们都希望能够打印比**Hello World**更多的内容。`awk`命令可以用来过滤文件中的内容，如果需要的话，还可以处理非常大的文件。我们应该先打印完整的文件，然后再进行过滤。这样，我们就可以感受到命令的语法。稍后，我们将看到如何将此控制信息添加到`awk`文件中，以便简化命令行。使用以下命令，我们将打印`/etc/passwd`文件中的所有行：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is equivalent to using the `$0` variable with the `print` statement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用`print`语句的`$0`变量：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `$0` variable refers to the complete line. If there is no argument supplied
    to the `print` command, we assume that the complete line is to be printed. If
    we want to print just the first field from the `/etc/passwd` file, we can use
    the `$1` variable. However, we will need to specify that in this file the field
    separator used is a colon. The `awk` default delimiter is a space or any amount
    of spaces or tabs and newlines. There are two ways to specify the input delimiter;
    these are displayed in the following examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`$0`变量指的是完整的行。如果`print`命令没有提供参数，我们假设要打印整行。如果我们只想打印`/etc/passwd`文件中的第一个字段，我们可以使用`$1`变量。但是，我们需要指定在该文件中使用的字段分隔符是冒号。`awk`的默认分隔符是空格或任意数量的空格或制表符和换行符。有两种方法可以指定输入分隔符；这些方法在以下示例中显示。'
- en: 'The first example is easy and simple to use. The -`F` option works well, especially
    where we do not need any additional header information:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例很容易且简单易用。`-F`选项特别适用，特别是在我们不需要任何额外的头信息时：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We could also do this within the `BEGIN` block; this is useful when we want
    to use the `BEGIN` block to display header information:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在`BEGIN`块中执行此操作；当我们想要使用`BEGIN`块显示头信息时，这是很有用的：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see this clearly in the preceding example, which we named the `BEGIN`
    block and all of the code within it is corralled by the brace brackets. The main
    block has no name and is enclosed within the brace brackets.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的示例中清楚地看到这一点，我们将其命名为`BEGIN`块，其中的所有代码都被大括号括起来。主块没有名称，并且被大括号括起来。
- en: 'After seeing the `BEGIN` block and the main code blocks, we will now look at
    the `END` code block. This is often used to display summary data. For example,
    if we want to print the total lines in the `passwd` file, we can make use of the
    `END` block. The code with the `BEGIN` and `END` blocks is processed just once,
    whereas the main block is processed for each line. The following example adds
    to the code we have written so far to include the total line count:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到`BEGIN`块和主代码块之后，我们现在将看一下`END`代码块。这通常用于显示摘要数据。例如，如果我们想要打印`passwd`文件中的总行数，我们可以利用`END`块。具有`BEGIN`和`END`块的代码只处理一次，而主块则对每一行进行处理。以下示例将添加到我们迄今为止编写的代码中，以包括总行数：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `awk` internal variable `NR` maintains the number of processed lines. If
    we want, we can add some additional text to this. This can be used to annotate
    the summary data. We can also make use of the single quotes that are used with
    the awk language; they will allow us to spread the code across multiple lines.
    Once we have opened the single quotes, we can add new lines to the command line
    right until we close the quote. This is demonstrated in the next example where
    we have extended the summary information:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`内部变量`NR`维护了处理的行数。如果需要，我们可以为此添加一些附加文本。这可以用于注释摘要数据。我们还可以利用awk语言中使用的单引号；它们允许我们将代码跨多行展开。一旦我们打开了单引号，我们就可以在命令行中添加新行，直到我们关闭引号。这在下一个示例中得到了展示，我们扩展了摘要信息：'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we do not wish to end our awk experience here, we can easily display the
    running line count with each line as well as the final total. This is shown in
    the following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想在这里结束我们的awk体验，我们可以轻松地显示每行的运行行数以及最终总数。这在下面的例子中得到了展示：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot captures this command and partial output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图捕获了这个命令和部分输出：
- en: '![Displaying and filtering content from files](img/00100.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![显示和过滤文件内容](img/00100.jpeg)'
- en: 'In the first example with `BEGIN`, we saw that there is no reason why we cannot
    use the `END` code block in isolation without a main code block. If we need to
    emulate the `wc -l` command, we can use the following `awk` statement:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个使用`BEGIN`的示例中，我们看到没有理由不能单独使用`END`代码块而不使用主代码块。如果我们需要模拟`wc -l`命令，我们可以使用以下`awk`语句：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will be the line count from the file. The following screenshot shows
    both the use of the `awk` command and the `wc` command to count the lines in the
    `/etc/passwd` file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是文件的行数。以下截图显示了`awk`命令和`wc`命令用于计算`/etc/passwd`文件中的行数：
- en: '![Displaying and filtering content from files](img/00101.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![显示和过滤文件内容](img/00101.jpeg)'
- en: Remarkably, we can see that the output does tally to 28 lines and our code has
    worked.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们可以看到输出确实符合28行，我们的代码也起作用了。
- en: 'Another feature that we can practice with is about working on selected lines
    only. For example, if we want to print only the first five lines, we will use
    the following statement:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以练习的另一个功能是仅处理选定的行。例如，如果我们只想打印前五行，我们将使用以下语句：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we want to print lines `8` through to `12`, we can use the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想打印第`8`到`12`行，我们可以使用以下代码：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also use regular expressions to match the text in the lines. Take a
    look at the following example where we look at the lines that end in the work
    bash:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用正则表达式来匹配行中的文本。看看下面的例子，我们查看以单词bash结尾的行：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The example and the output it produces is shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例和输出如下截图所示：
- en: '![Displaying and filtering content from files](img/00102.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![显示和过滤文件内容](img/00102.jpeg)'
- en: Formatting output
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化输出
- en: 'We have remained faithful to the `print` command so far, as we have been limited
    in what we require from the output. If we want to print out, say, the username,
    UID, and default shell we need to start formatting the output just a little. In
    this case, we can organize the output in well-shaped columns. Without formatting,
    the command we use will look similar to the following example where we use commas
    to separate the field that we want to print:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直忠于`print`命令，因为我们对输出的要求有限。如果我们想要打印出用户名、UID和默认shell，我们需要开始对输出进行一些格式化。在这种情况下，我们可以将输出组织成形状良好的列。没有格式化的话，我们使用的命令会类似于以下示例，其中我们使用逗号来分隔要打印的字段：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We use the `BEGIN` block here, as we can make use of it to print column headers
    later.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`BEGIN`块，因为我们可以利用它稍后打印列标题。
- en: 'To understand the problem a little better, we can take a look at the following
    screenshot that illustrates the uneven column widths:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解问题，我们可以看一下下面的截图，它说明了不均匀的列宽：
- en: '![Formatting output](img/00103.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![格式化输出](img/00103.jpeg)'
- en: 'The issue that we have in the output is that the columns do not align, as the
    username is of an inconsistent length. To improve on this, we can use the `printf`
    function where we can specify the column width. The syntax for the `awk` statements
    will be similar to the following example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输出中的问题是列不对齐，因为用户名的长度不一致。为了改进这一点，我们可以使用`printf`函数，其中我们可以指定列宽。`awk`语句的语法将类似于以下示例：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `printf` formatting is included within double quotes. We also need to include
    the newline with the `\n`. The `printf` function does not add a new line automatically,
    whereas the `print` function does. We print the three fields; the first accepts
    string values and is set to `10` characters wide. The middle field accepts up
    to 4 numbers and we finish with the default shell field where we allow up to `17`
    string characters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`格式化包含在双引号内。我们还需要用`\n`包括换行符。`printf`函数不会自动添加新行，而`print`函数会。我们打印三个字段；第一个接受字符串值，并设置为`10`个字符宽。中间字段最多接受4个数字，最后是默认shell字段，我们允许最多`17`个字符串字符。'
- en: 'The following screenshot shows how the output can be improved:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何改进输出：
- en: '![Formatting output](img/00104.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![格式化输出](img/00104.jpeg)'
- en: 'We can further enhance this by adding header information. Although the code
    starts to look untidy at this stage, we will later see how we can resolve this
    with awk control files. The following example shows the header information being
    added to the `Begin` block. The semi-colon is used to separate the two statements
    in the `BEGIN` block:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加标题信息进一步增强这一点。尽管在这个阶段代码开始看起来凌乱，但我们稍后将看到如何使用awk控制文件解决这个问题。下面的例子显示了标题信息被添加到`Begin`块中。分号用于分隔`BEGIN`块中的两个语句：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following screenshot, we can see how this improves the output even further:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到这如何进一步改进了输出：
- en: '![Formatting output](img/00105.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![格式化输出](img/00105.jpeg)'
- en: 'In the previous chapter, we saw how we can augment the output with the use
    of colors in the shell. We may also use color from within awk by adding our own
    functions. In the next code example, you will see that awk allows for us to define
    our own functions to facilitate more complex operations and isolate the code.
    We will now modify the previous code to include green output in the header:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到如何在shell中使用颜色来增强输出。我们也可以通过在awk中添加自己的函数来使用颜色。在下面的代码示例中，您将看到awk允许我们定义自己的函数来促进更复杂的操作并隔离代码。我们现在将修改以前的代码以在标题中包含绿色输出：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Creating the function within `awk` allows the color to be added where we require,
    in this case, green text. It will be easy to create functions to define other
    colors. The code and output is included in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`awk`中创建函数允许我们在需要的地方添加颜色，这种情况下是绿色文本。很容易创建函数来定义其他颜色。代码和输出包含在以下截图中：
- en: '![Formatting output](img/00106.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![格式化输出](img/00106.jpeg)'
- en: Further filtering to display users by UID
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步过滤以显示UID用户
- en: We have been able to build our skills with awk piece by piece and what we have
    learned has been useful. We can take these tiny steps and add them to start creating
    something a little more usable. Perhaps, we want to print just the standard users;
    these are usually users higher than 500 or 1000 depending on your particular distribution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够逐步建立我们的awk技能，我们学到的东西都很有用。我们可以将这些小步骤添加起来，开始创建一些更有用的东西。也许，我们想要只打印标准用户；这些通常是高于500或1000的用户，具体取决于您的特定发行版。
- en: 'On the Raspbian distribution that I am using for this book, standard users
    start with UID 1000\. The UID is the third field. This is really a simple matter
    of using the value of the third field as the range operator. We can see this in
    the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我为本书使用的Raspbian发行版中，标准用户的UID从1000开始。UID是第三个字段。这实际上只是简单地使用第三个字段的值作为范围运算符。我们可以在以下示例中看到这一点：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can show users with UID 101 with the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令显示UID为101的用户：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These just give you an idea of some of the possibilities available with awk.
    The reality is that we can play all day with our arithmetic comparison operators.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是让您了解awk的一些可能性。事实上，我们可以整天玩我们的算术比较运算符。
- en: We have also seen that with some of these examples, the `awk` statements become
    a little long. This is where we can implement the `awk` control files. Let's take
    a look at these straight away before we get lost in a mix of syntax.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，有些示例中，`awk`语句变得有点长。这就是我们可以实现`awk`控制文件的地方。在我们陷入语法混乱之前，让我们立即看看这些。
- en: Awk control files
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Awk控制文件
- en: Just as with `sed`, we can simplify the command line by creating and including
    control files. This also makes the later editing of the command more easily achievable.
    The control files contain all the statements that we want `awk` to execute. The
    main thing that we must consider with `sed`, `awk`, and, shell scripts is modularization;
    creating reusable elements that can be used to isolate and reuse the codes. This
    saves us time and work and we get more time for the tasks that we enjoy.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`sed`一样，我们可以通过创建和包含控制文件来简化命令行。这也使得以后编辑命令更容易实现。控制文件包含我们希望`awk`执行的所有语句。我们在使用`sed`、`awk`和shell脚本时必须考虑的主要问题是模块化；创建可重用的元素，以隔离和重用代码。这样可以节省我们的时间和工作，并且我们有更多时间用于我们喜欢的任务。
- en: 'To see an example of an `awk` control file, we should revisit the formatting
    of the `passwd` file. Creating the following file will encapsulate the `awk` statements:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`awk`控制文件的示例，我们应该重新访问`passwd`文件的格式。创建以下文件将封装`awk`语句：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can save this file as `passwd.awk`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此文件保存为`passwd.awk`。
- en: 'Being able to encompass all the `awk` statements in the one file is very convenient
    and the execution becomes clean and tidy:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将所有的`awk`语句都包含在一个文件中非常方便，执行变得干净整洁：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This certainly encourages more complex `awk` statements and allows you to extend
    more functionality to your code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这肯定鼓励更复杂的`awk`语句，并允许您为代码扩展更多功能。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I am hoping that you have a better and clearer understanding of what you can
    use the awk tool for. This is a data-processing tool that runs through text files,
    line by line, and processes the code you add. The main block is run for each line
    that matches the row criteria, if it has been added. Whereas, the `BEGIN` and
    `END` block code is executed just once.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您对可以使用awk工具有更好和更清晰的理解。这是一个数据处理工具，逐行运行文本文件并处理您添加的代码。如果已添加，主要块将针对符合行条件的每一行运行。而`BEGIN`和`END`块代码只执行一次。
- en: In the next two chapters, we will continue working with awk and some practical
    examples of how awk is used in real life.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将继续使用awk，并举一些awk在现实生活中的实际示例。
