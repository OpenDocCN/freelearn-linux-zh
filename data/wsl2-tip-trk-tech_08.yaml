- en: '*Chapter 6*: Getting More from Windows Terminal'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：从Windows终端获取更多信息'
- en: The new Windows Terminal was introduced in [*Chapter 3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037),
    *Getting Started with Windows Terminal*, and you saw how to install it and customize
    the order of your profiles and the color schemes that they use in that chapter.
    In this chapter, we will explore Windows Terminal further and look at a couple
    of different ways to stay productive with multiple different shells running in
    Windows Terminal. After that, we will look at adding custom profiles to enable
    you to simplify your flow for common tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Windows终端在[*第3章*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037)，*开始使用Windows终端*中介绍过，您已经了解了如何安装它以及如何自定义配置文件的顺序和它们在该章节中使用的颜色方案。在本章中，我们将进一步探索Windows终端，并介绍一些在Windows终端中运行多个不同shell的方法。之后，我们将介绍如何添加自定义配置文件，以简化常见任务的流程。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Customizing tab titles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义选项卡标题
- en: Working with multiple panes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个窗格
- en: Adding custom profiles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义配置文件
- en: We'll start the chapter by looking at how to use tab titles to help you manage
    multiple tabs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从查看如何使用选项卡标题来帮助您管理多个选项卡开始本章。
- en: Customizing tab titles
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义选项卡标题
- en: '**Tabbed user interfaces** are great; browsers have them, editors have them,
    and Windows Terminal has them. For some people, myself included, tabbed user interfaces
    also pose a challenge – I end up with a lot of tabs open:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项卡式用户界面**很棒；浏览器有它们，编辑器有它们，Windows终端也有它们。对于某些人，包括我自己在内，选项卡式用户界面也带来了一些挑战 -
    我打开了很多选项卡：'
- en: '![Figure 6.1 – A screenshot of Windows Terminal with lots of tabs open'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - Windows终端的屏幕截图，打开了许多选项卡'
- en: '](img/Figure_6.1_B16412.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.1_B16412.jpg)'
- en: Figure 6.1 – A screenshot of Windows Terminal with lots of tabs open
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - Windows终端的屏幕截图，打开了许多选项卡
- en: As the preceding screenshot shows, with multiple tabs open, it can be hard to
    tell what each tab is running and for what you were using it for. When I'm coding,
    I frequently have a tab open for performing Git operations, another for building
    and running the code, and another for interacting with the code when it's running.
    Add to these an extra tab for some general system interaction and a tab or two
    for looking into a question someone asks about another project, and the number
    grows quickly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，打开多个选项卡时，很难确定每个选项卡正在运行的内容以及您使用它的目的。当我编码时，我经常打开一个选项卡用于执行Git操作，另一个用于构建和运行代码，另一个用于在代码运行时与代码进行交互。除此之外，还有一个额外的选项卡用于一些常规系统交互，以及一个或两个选项卡用于查看其他项目中的问题。这样，选项卡的数量很快就增加了。
- en: The previous screenshot showed that depending on the shell running in a tab,
    you may get some path information, but if you have multiple tabs in the same path,
    even this isn't that helpful as they all show the same value. Fortunately, with
    Windows Terminal you can set the tab titles to help you keep track. We'll look
    at a few different ways you can do that so that you can pick whichever method
    works best for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示，根据选项卡中运行的shell，您可能会获得一些路径信息，但是如果在相同路径下有多个选项卡，即使这样也没有太大帮助，因为它们都显示相同的值。幸运的是，使用Windows终端，您可以设置选项卡标题以帮助您跟踪。我们将介绍几种不同的方法，以便您可以选择最适合您的方法。
- en: Setting tab titles from the context menu
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从上下文菜单设置选项卡标题
- en: 'A simple way to set the title is to right-click in the tab title to bring up
    the context menu and choose **Rename Tab**:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 设置标题的简单方法是右键单击选项卡标题，弹出上下文菜单，然后选择**重命名选项卡**：
- en: '![Figure 6.2 – A screenshot of the tab context menu showing Rename Tab'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 显示重命名选项卡的选项卡上下文菜单的屏幕截图'
- en: '](img/Figure_6.2_B16412.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.2_B16412.jpg)'
- en: Figure 6.2 – A screenshot of the tab context menu showing Rename Tab
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 显示重命名选项卡的选项卡上下文菜单的屏幕截图
- en: 'As the preceding screenshot shows, right-clicking on a tab brings up a context
    menu allowing you to rename a tab or set the tab color to help organize your tabs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的屏幕截图所示，右键单击选项卡会弹出上下文菜单，允许您重命名选项卡或设置选项卡颜色以帮助组织您的选项卡：
- en: '![Figure 6.3 – A screenshot of Windows Terminal with renamed and color-coded
    tabs'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 - Windows终端的屏幕截图，显示已重命名和带颜色的选项卡'
- en: '](img/Figure_6.3_B16412.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.3_B16412.jpg)'
- en: Figure 6.3 – A screenshot of Windows Terminal with renamed and color-coded tabs
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 - Windows终端的屏幕截图，显示已重命名和带颜色的选项卡
- en: This screenshot shows sets of tab titles grouped by the use of color in their
    tab titles. Each tab also has a descriptive title, for example, **git** to indicate
    what the tab is being used for. Naturally, you can pick titles that fit your workflow.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了按照选项卡标题中的颜色进行分组的选项卡标题集合。每个选项卡还有一个描述性标题，例如**git**，表示该选项卡的用途。当然，您可以选择适合您工作流程的标题。
- en: When you're working in the Terminal, you might prefer to be able to use the
    keyboard to set the title, so we'll look at that next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在终端中工作时，您可能更喜欢使用键盘来设置标题，因此我们将在下一节中介绍这一点。
- en: Setting tab titles from your shell using functions
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用函数从shell设置选项卡标题
- en: If you like to keep your hands on the keyboard, it is possible to set the tab
    title from the shell that is running in the tab. The method for doing this depends
    on which shell you are using, so we will look at a few different shells here.
    Let's start by looking at **Bash**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢保持双手在键盘上，可以从选项卡中运行的shell中设置选项卡标题。这取决于您使用的shell的方法，因此我们将在这里介绍一些不同的shell。让我们从**Bash**开始。
- en: 'To make it easy to set the prompt, we can create the following function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便设置提示符，我们可以创建以下函数：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from this snippet, this creates a function called `set-prompt`.
    This function uses escape sequences that control the terminal title, allowing
    us to run commands such as `set-prompt "A new title"` to change the tab title,
    in this example, changing it to `A new title`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从此代码片段中可以看出，这创建了一个名为`set-prompt`的函数。该函数使用控制终端标题的转义序列，允许我们运行诸如`set-prompt "A
    new title"`的命令来更改选项卡标题，在此示例中将其更改为`A new title`。
- en: 'For PowerShell, we can create a similar function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PowerShell，我们可以创建一个类似的函数：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This snippet shows a `Set-Prompt` function, which accesses the PowerShell `$Host`
    object to control the title, allowing us to run commands such as `Set-Prompt "A
    new title"` to change the tab title in a similar way to that in Bash.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码显示了一个`Set-Prompt`函数，它访问PowerShell的`$Host`对象来控制标题，允许我们运行诸如`Set-Prompt "A
    new title"`之类的命令以类似于Bash的方式更改选项卡标题。
- en: For Windows Command Prompt (`cmd.exe`), we can run `TITLE A new title` to control
    the tab title.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows命令提示符（`cmd.exe`），我们可以运行`TITLE A new title`来控制选项卡标题。
- en: Tip
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Some utilities and shell configurations override the default prompt settings
    to control the shell title in addition to the prompt. In these cases, the functions
    from this section will not have any noticeable effect as the prompt will immediately
    overwrite the title specified. If you are having issues using the functions, then
    check your prompt configuration.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些实用程序和shell配置会覆盖默认的提示设置，以控制shell标题以及提示。在这些情况下，本节中的函数将不会有任何明显的效果，因为提示将立即覆盖指定的标题。如果您在使用这些函数时遇到问题，请检查您的提示配置。
- en: For Bash, run echo `$PROMPT_COMMAND` to check your prompt configuration. For
    PowerShell, run `Get-Content function:prompt`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Bash，运行echo `$PROMPT_COMMAND`来检查您的提示配置。对于PowerShell，运行`Get-Content function:prompt`。
- en: 'An example of using the functions we''ve just seen is shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了使用刚才看到的函数的示例：
- en: '![Figure 6.4 – A screenshot showing the use of the set-prompt function'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 - 显示使用set-prompt函数的屏幕截图'
- en: '](img/Figure_6.4_B16412.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.4_B16412.jpg)'
- en: Figure 6.4 – A screenshot showing the use of the set-prompt function
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 - 显示使用set-prompt函数的屏幕截图
- en: In this screenshot, you can see the `set-prompt` function being used in Bash
    to control the tab title. The titles of the other tabs (PowerShell and Command
    Prompt) are also set using the functions shown in this section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，您可以看到在Bash中使用`set-prompt`函数来控制选项卡标题。其他选项卡（PowerShell和命令提示符）的标题也是使用本节中显示的函数设置的。
- en: Using these functions can be a convenient way to update the tab title while
    you are working in the terminal without interrupting your flow to reach for the
    mouse. You can also use these functions to update the title as part of scripts,
    for example, to give an at-a-glance way to see the status of a long-running script
    via the tab title, even if a different tab has the focus.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中工作时，使用这些函数可以方便地更新选项卡标题，而无需中断您的工作流程以使用鼠标。您还可以使用这些函数作为脚本的一部分来更新标题，例如，通过选项卡标题以一目了然的方式查看长时间运行脚本的状态，即使不同的选项卡具有焦点。
- en: The last way of updating the tab title that we'll look at is via the command
    line when launching Windows Terminal.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的最后一种更新选项卡标题的方法是在启动Windows终端时通过命令行进行。
- en: Setting tab titles from the command line
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行设置选项卡标题
- en: The previous section looked at setting the tab title from a running shell in
    Windows Terminal; in this section, we will launch Windows Terminal and pass command-line
    arguments to specify the profiles to load and to set the tab titles.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节介绍了如何从运行的shell中设置选项卡标题；在本节中，我们将启动Windows终端并传递命令行参数来指定要加载的配置文件和设置选项卡标题。
- en: Windows Terminal can be launched from the command-line or run dialog (*Windows*
    + *R*) using the `wt.exe` command. Running `wt.exe` by itself will start Windows
    Terminal with the default profile loaded. The tab title can be controlled with
    the `--title` switch, for example, `wt.exe --title "Put a title here"`. Additionally,
    the `--profile` (or `-p`) switch allows us to specify which profile should be
    loaded, so that `wt.exe -p Ubuntu-20.04 --title "This is Ubuntu"` will load the
    `Ubuntu-20.04` profile and set the tab title.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`wt.exe`命令从命令行或运行对话框（*Windows* + *R*）启动Windows终端。仅运行`wt.exe`将使用默认配置文件启动Windows终端。可以使用`--title`开关来控制选项卡标题，例如，`wt.exe
    --title "Put a title here"`。此外，`--profile`（或`-p`）开关允许我们指定要加载的配置文件，因此`wt.exe -p
    Ubuntu-20.04 --title "This is Ubuntu"`将加载`Ubuntu-20.04`配置文件并设置选项卡标题。
- en: 'One of the motivations for controlling tab titles is to keep track when working
    with multiple tabs. Windows Terminal has a powerful set of command-line arguments
    (we''ll see more of these in the next section) that allow us to launch Terminal
    with one or more specific tabs/profiles. We can build on the previous command
    by appending `; new-tab` (note the semi-colon) to specify a new tab to load, including
    any additional arguments such as `title` and `profile`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 控制选项卡标题的一个动机是在使用多个选项卡时进行跟踪。Windows终端具有一组强大的命令行参数（我们将在下一节中看到更多），允许我们使用一个或多个特定的选项卡/配置文件启动终端。我们可以在前面的命令后面添加`；new-tab`（注意分号），以指定要加载的新选项卡，包括任何其他参数，如`title`和`profile`：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we are specifying the first tab as the `PowerShell` profile
    and a title of `This one is PowerShell`, and a second tab with the `Ubuntu-20.04`
    profile and its title as `WSL here!`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将第一个选项卡指定为`PowerShell`配置文件，并将其标题设置为`This one is PowerShell`，第二个选项卡指定为`Ubuntu-20.04`配置文件，并将其标题设置为`WSL
    here!`。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `new-tab` argument requires a semi-colon before it, but many shells (including
    Bash and PowerShell) treat semi-colons as command separators. To use the previous
    commands successfully, any semi-colons need to be escaped using the backtick in
    PowerShell (``;`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`new-tab`参数需要一个分号在其前面，但许多shell（包括Bash和PowerShell）将分号视为命令分隔符。为了成功使用前面的命令，任何分号都需要在PowerShell中使用反引号进行转义（``;`）。'
- en: As seen in [*Chapter 5*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054), *Linux
    to Windows Interoperability*, in the *Calling Windows apps from Linux* section,
    we can launch Windows applications from WSL. Normally, we can just execute the
    Windows application directly but because Windows Terminal uses a feature called
    execution aliases, we need to launch it via `cmd.exe`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[*第5章*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054)中所见，*Linux与Windows的互操作性*，在*从Linux调用Windows应用程序*部分，我们可以从WSL启动Windows应用程序。通常情况下，我们可以直接执行Windows应用程序，但由于Windows终端使用了一个称为执行别名的功能，我们需要通过`cmd.exe`来启动它。
- en: 'Additionally, because of the way that `wt.exe` works, when launching from Bash,
    it needs to be run using `cmd.exe`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于`wt.exe`的工作方式，当从Bash启动时，需要使用`cmd.exe`运行：
- en: '`cmd.exe /C wt.exe -p "PowerShell" --title "This one is PowerShell"\; new-tab
    -p "Ubuntu-20.04" --title "WSL here!"`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`cmd.exe /C wt.exe -p "PowerShell" --title "这是PowerShell"\; new-tab -p "Ubuntu-20.04"
    --title "在这里运行WSL！"`'
- en: This example shows using `cmd.exe` to launch Windows Terminal with multiple
    tabs (note the backslash to escape the semi-colon), setting the profile and titles.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何使用`cmd.exe`启动Windows终端并打开多个选项卡（注意反斜杠用于转义分号），设置配置文件和标题。
- en: The `new-tab` command with Windows Terminal can be repeated multiple times,
    and in this way, you can create commands or scripts to set up complex Windows
    Terminal tab arrangements in a repeatable manner.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Windows终端的`new-tab`命令可以重复多次，通过这种方式，你可以创建命令或脚本来以可重复的方式设置复杂的Windows终端选项卡布局。
- en: The techniques from this section provide you with a number of ways to set the
    titles of tabs in your Windows Terminal sessions to help you stay organized when
    working with multiple shells open in different tabs. In the next section, we'll
    look at another feature of Windows Terminal for working with multiple shells.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍的技巧提供了多种方法来设置Windows终端会话中选项卡的标题，帮助你在不同选项卡中打开多个Shell时保持组织。在下一节中，我们将介绍Windows终端的另一个用于处理多个Shell的功能。
- en: Working with multiple panes
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个窗格
- en: 'In the previous section, we saw the use of tabs when working with multiple
    shells open at the same time, but sometimes it is desirable to be able to see
    more than one shell at a time. In this section, we will look at how to work with
    multiple panes in Windows Terminal to achieve things like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看到了在同时打开多个Shell时使用选项卡的情况，但有时候希望能够同时看到多个Shell。在本节中，我们将介绍如何在Windows终端中使用多个窗格来实现这样的效果：
- en: '![Figure 6.5 – A screenshot showing multiple panes in Windows Terminal'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 - 展示Windows终端中多个窗格的屏幕截图'
- en: '](img/Figure_6.5_B16412.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.5_B16412.jpg)'
- en: Figure 6.5 – A screenshot showing multiple panes in Windows Terminal
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 - 展示Windows终端中多个窗格的屏幕截图
- en: 'The preceding screenshot shows running multiple profiles in panes in the same
    tab: on the left is PowerShell window that has made a web request, the top-right
    pane is running a web server, and the bottom-right pane has `htop` running to
    track running Linux processes in WSL.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的屏幕截图显示了在同一个选项卡中运行多个配置文件的窗格：左侧是一个已经发出了网络请求的PowerShell窗口，右上角的窗格正在运行一个Web服务器，右下角的窗格正在运行`htop`以跟踪WSL中正在运行的Linux进程。
- en: Tip
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you are familiar with the `tmux` utility ([https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)),
    then this may look familiar, as `tmux` also allows splitting a window into multiple
    panels. But there are some differences. One feature of `tmux` is to allow you
    to disconnect and reconnect from terminal sessions, which can be handy when working
    with `ssh` as it preserves your session if your `tmux` doesn't do.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉`tmux`实用程序（[https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)），那么这可能看起来很熟悉，因为`tmux`也允许将窗口分割成多个面板。但是有一些区别。`tmux`的一个特性是允许你断开和重新连接终端会话，这在使用`ssh`时非常方便，因为它可以保留你的会话，而`tmux`则不会。
- en: In the preceding screenshot, you can see both PowerShell and Bash (in WSL) running
    in different panes in the same tab. It is good to understand the capabilities
    of both `tmux` and Windows Terminal, and pick the right tool for the job – and
    you can always run tmux in a Bash shell in Windows Terminal for the best of both
    worlds!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，你可以看到PowerShell和Bash（在WSL中）在同一个选项卡的不同窗格中运行。了解`tmux`和Windows终端的功能，并选择适合工作的正确工具是很重要的
    - 你始终可以在Windows终端的Bash shell中运行tmux，以获得最佳的体验！
- en: Now that you have a sense of panes, let's take a look at how to set them up.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对窗格有了一定的了解，让我们看看如何设置它们。
- en: Creating panes interactively
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式创建窗格
- en: 'The easiest way to create panes is to create them interactively, as you need
    them. There are a few default shortcut keys that can get you started but if you
    have specific requirements, you can configure your own key bindings as described
    here: [https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建窗格的最简单方法是按需交互式创建。有一些默认的快捷键可以帮助你入门，但如果你有特定的需求，你可以根据这里的描述配置自己的按键绑定：[https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands)。
- en: The first commands are *Alt* + *Shift* + *-*, which will split the current pane
    in half horizontally, and *Alt* + *Shift* + *+*, which will split the pane vertically.
    Both of these commands will launch a new instance of the default profile in the
    newly created pane.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是*Alt* + *Shift* + *-*, 这将把当前窗格水平分割成两半，然后是*Alt* + *Shift* + *+*, 这将把窗格垂直分割。这两个命令都会在新创建的窗格中启动默认配置文件的新实例。
- en: The default profile may not be the profile you want to run, but a common scenario
    is to want another terminal in the same profile that you are already running.
    Pressing *Alt* + *Shift* + *D* will create a pane with a new instance of the profile
    from the current pane. The command will automatically determine whether to split
    horizontally or vertically based on the space available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置文件可能不是你想要运行的配置文件，但通常情况下，你可能希望在同一个配置文件中运行另一个终端。按下*Alt* + *Shift* + *D*将在当前窗格中创建一个新的配置文件实例的窗格。该命令会根据可用空间自动确定是水平分割还是垂直分割。
- en: 'If you want to pick which profile to open in a new pane, you can open the launch
    profile dropdown:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想选择在新窗格中打开哪个配置文件，你可以打开启动配置文件下拉菜单：
- en: '![Figure 6.6 – A screenshot showing the launch profile dropdown'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 - 展示启动配置文件下拉菜单的屏幕截图'
- en: '](img/Figure_6.6_B16412.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.6_B16412.jpg)'
- en: Figure 6.6 – A screenshot showing the launch profile dropdown
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 - 展示启动配置文件下拉菜单的屏幕截图
- en: This screenshot shows the standard dropdown for selecting a profile to run.
    Instead of clicking normally, holding down the *Alt* key while clicking will launch
    the selected profile in a new pane. As with *Alt* + *Shift* + *D*, Windows Terminal
    will determine whether to split the current pane horizontally or vertically.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了用于选择要运行的配置文件的标准下拉菜单。与正常点击不同，按住*Alt*键并单击将在新窗格中启动所选配置文件。与*Alt* + *Shift*
    + *D*一样，Windows终端将确定是水平拆分还是垂直拆分当前窗格。
- en: 'Another option is to use the Windows Terminal command palette using *Ctrl*
    + *Shift* + *P*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用Windows终端命令面板，使用*Ctrl* + *Shift* + *P*：
- en: '![Figure 6.7 – A screenshot showing the split options in the command palette'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7-屏幕截图显示命令面板中的拆分选项'
- en: '](img/Figure_6.7_B16412.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.7_B16412.jpg)'
- en: Figure 6.7 – A screenshot showing the split options in the command palette
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7-屏幕截图显示命令面板中的拆分选项
- en: The command palette allows you to type to filter the command list, and this
    screenshot shows the commands matching `split`. The bottom two commands match
    two of the commands we've already seen, along with their corresponding shortcut
    keys. The top command gives a menu system in the command palette that allows you
    to pick the profile you want to use for the new pane and then how to split the
    existing pane.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 命令面板允许您输入以过滤命令列表，并且此屏幕截图显示与“split”匹配的命令。底部的两个命令与我们已经看到的两个命令以及它们对应的快捷键匹配。顶部的命令在命令面板中提供了一个菜单系统，允许您选择要用于新窗格的配置文件，然后选择如何拆分现有窗格。
- en: Now that we have looked at how to create panes, let's take a look at how to
    work with them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过如何创建窗格，让我们看一下如何使用它们。
- en: Managing panes
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理窗格
- en: The most obvious way to switch the focus between panes is to use the mouse click
    in a pane – doing this changes which pane is focused on (indicated by a highlighted
    color on the pane border). To change the pane using the keyboard, you can use
    *Alt* + a cursor key, that is, *Alt* + *cursor up* will move the focus to a pane
    above the current one.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗格之间切换焦点最明显的方法是使用鼠标在窗格中单击-这样做会更改焦点所在的窗格（窗格边框上会显示突出显示的颜色）。要使用键盘更改窗格，可以使用*Alt*
    + 光标键，即*Alt* + *光标向上*将焦点移动到当前窗格上方的窗格。
- en: To change the size of the panes, we use similar key combinations, *Alt* + *Shift*
    + a cursor key. The *Alt* + *Shift* + *cursor up* and *Alt* + *Shift* + *cursor
    down* combinations adjust the height of the current pane, and the *Alt* + *Shift*
    + *cursor left* and *Alt* + *Shift* + *cursor right* combinations adjust the width
    of the current pane.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改窗格的大小，我们使用类似的键组合，即*Alt* + *Shift* + 光标键。*Alt* + *Shift* + *光标向上*和*Alt* +
    *Shift* + *光标向下*组合调整当前窗格的高度，*Alt* + *Shift* + *光标向左*和*Alt* + *Shift* + *光标向右*组合调整当前窗格的宽度。
- en: If any of the shells running in a pane exit, then that pane will close and the
    other panes will resize to fill its space. You can also close the current pane
    by pressing *Ctrl* + *Shift* + *W* (this shortcut was introduced in [*Chapter
    3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037), *Getting Started with Windows
    Terminal*, in the *Using Windows Terminal* section, as the shortcut to close a
    tab, but at that point, there was only a single pane in a tab!).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何在窗格中运行的shell退出，则该窗格将关闭，并且其他窗格将调整大小以填充其空间。您还可以通过按下*Ctrl* + *Shift* + *W*关闭当前窗格（此快捷键在[*第3章*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037)中引入，*使用Windows终端*部分，作为关闭选项卡的快捷键，但在那时，选项卡中只有一个窗格！）。
- en: Lastly, let's take a look at how to configure panes when launching Windows Terminal
    from the command line.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看一下如何在从命令行启动Windows终端时配置窗格。
- en: Creating panes from the command line
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行创建窗格
- en: Earlier in this chapter, we saw how to use the Windows Terminal command line
    (`wt.exe`) to launch Windows Terminal with multiple tabs loaded. In this section,
    we'll see how to do the same with panes. This is useful when you are working on
    a project and have a set of panes that you commonly set up as you can script them
    and make it easy to launch a consistent layout.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面部分，我们看到了如何使用Windows终端命令行（`wt.exe`）加载多个选项卡启动Windows终端。在本节中，我们将看到如何使用窗格执行相同操作。当您在项目上工作并且有一组常用的窗格设置时，这非常有用，因为您可以对其进行脚本处理，并且可以轻松启动一致的布局。
- en: When launching with multiple tabs, we used the `new-tab` command for `wt.exe`.
    The approach for launching with multiple panes is similar but uses the `split-pane`
    command instead (note that escaping rules for the semi-colons still apply from
    the *Setting tab titles from the command line* section).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用多个选项卡启动时，我们使用`wt.exe`的`new-tab`命令。启动多个窗格的方法类似，但使用`split-pane`命令（请注意，分号的转义规则仍适用于“从命令行设置选项卡标题”部分）。
- en: 'Here''s an example of using `split-pane`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`split-pane`的示例：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, in this example, `split-pane` is used to specify a new pane
    and we can use the `-p` switch to specify which profile should be used for that
    pane. We can either let Windows Terminal pick how to split or we can use `-H`
    to split horizontally or `-V` to split vertically. You may also have noticed that
    `--title` has been specified. Windows Terminal allows each pane to have a title
    and displays the title of the currently focused pane as the tab title. Lastly,
    you may notice that the final pane has the additional arguments `bash -c htop`.
    These arguments are treated as the command to execute within the launched profile.
    The end result of this command is a setup very similar to the screenshot shown
    in *Figure 6.5*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在此示例中，`split-pane`用于指定新窗格，我们可以使用`-p`开关指定该窗格应使用的配置文件。我们可以让Windows终端自动选择如何拆分，或者我们可以使用`-H`进行水平拆分，或者使用`-V`进行垂直拆分。您可能还注意到已指定了`--title`。Windows终端允许每个窗格都有一个标题，并将当前焦点窗格的标题显示为选项卡标题。最后，您可能会注意到最后一个窗格具有附加参数`bash
    -c htop`。这些参数被视为在启动的配置文件中执行的命令。此命令的最终结果与*图6.5*中显示的屏幕截图非常相似。
- en: 'As a bonus, the command palette in Windows Terminal also allows us to use the
    command-line options. Press *Ctrl* + *Shift* + *P* to bring up the command palette
    and then type `>` (right angle-bracket):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个额外的功能，Windows Terminal中的命令面板还允许我们使用命令行选项。按下*Ctrl* + *Shift* + *P*来打开命令面板，然后输入`>`（右尖括号）：
- en: '![Figure 6.8 – A screenshot showing the command palette with command-line options'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 - 屏幕截图显示带有命令行选项的命令面板'
- en: '](img/Figure_6.8_B16412.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.8_B16412.jpg)'
- en: Figure 6.8 – A screenshot showing the command palette with command-line options
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 - 屏幕截图显示带有命令行选项的命令面板
- en: As you can see in this screenshot, we can use the `split-pane` command to split
    the existing pane using the command-line options.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这个屏幕截图中所看到的，我们可以使用`split-pane`命令使用命令行选项来拆分现有的窗格。
- en: So far in this chapter, we've covered ways to work with tabs and panes to help
    manage running multiple profiles. In the final section of this chapter, we'll
    take a look at some additional ideas for profiles that you might want to create.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经介绍了一些使用选项卡和窗格来帮助管理多个配置文件的方法。在本章的最后一节中，我们将看一些其他的配置文件创意想法。
- en: Adding custom profiles
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义配置文件
- en: Windows Terminal does a great job of automatically discovering PowerShell installations
    and WSL distributions to populate your profile list with (and updates it when
    new distributions are installed). This is a good start, but in addition to launching
    an interactive shell, a profile can launch specific applications within a profile
    (as the last section showed with `htop`). In this section, we'll look at a couple
    of examples, but the main purpose of them is to show ideas beyond just launching
    shells to give inspiration for how you might customize your Windows Terminal configuration.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Terminal非常好地自动发现PowerShell安装和WSL分发，以填充您的配置文件列表（并在安装新分发时更新）。这是一个很好的开始，但除了启动交互式shell之外，配置文件还可以在配置文件中启动特定的应用程序（就像上一节中显示的`htop`）。在本节中，我们将看一些示例，但它们的主要目的是展示除了仅仅启动shell之外的想法，以激发您如何自定义Windows
    Terminal配置的灵感。
- en: 'If you have a machine that you regularly connect to via SSH, then you can smooth
    your workflow by creating a Windows Terminal profile that launches directly into
    SSH. Open your settings from the profile dropdown (or by pressing *Ctrl* + *,*)
    and add a profile in the `list` section under `profiles`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您经常通过SSH连接到一台机器，那么您可以通过创建一个直接启动SSH的Windows Terminal配置文件来简化工作流程。从配置文件下拉菜单中打开您的设置（或按*Ctrl*
    + *,*），并在`profiles`下的`list`部分中添加一个配置文件：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Windows Terminal settings file was introduced in [*Chapter 3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037),
    *Getting Started with Windows Terminal*, and in this example profile, you can
    see familiar properties from that chapter such as `name` and `colorScheme`. The
    `commandline` property is where we configure what should be run, and we are using
    that to launch the `wsl` command to run `bash` with a command line that runs `ssh`.
    You should ensure that the `guid` value is different from other profiles in your
    settings. This example shows how to create a profile to execute a command in WSL
    – for SSH, you also have the option to use `ssh` directly in the `commandline`
    property as an SSH client is now included in Windows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Terminal设置文件在[*第3章*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037)中介绍过，*开始使用Windows
    Terminal*，在这个示例配置文件中，您可以看到来自该章节的熟悉属性，如`name`和`colorScheme`。`commandline`属性是我们配置要运行的内容的地方，我们使用它来启动`wsl`命令以运行带有运行`ssh`命令行的`bash`。您应该确保`guid`值与设置中的其他配置文件不同。这个示例展示了如何创建一个在WSL中执行命令的配置文件
    - 对于SSH，您还可以选择在`commandline`属性中直接使用`ssh`，因为Windows现在包含了一个SSH客户端。
- en: Launching this new profile automatically starts `ssh` and connects to the specified
    remote machine. As a bonus, the `background` property can be used to set the background
    color to indicate the environment you are connected to, for example, to easily
    differentiate between development and test environments.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 启动这个新配置文件会自动启动`ssh`并连接到指定的远程机器。作为一个额外的功能，`background`属性可以用来设置背景颜色，以指示您所连接的环境，例如，方便地区分开发和测试环境。
- en: 'If you have a number of machines that you connect to with SSH, then you can
    launch a script to allow you to select which machine to connect to:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多台通过SSH连接的机器，那么您可以启动一个脚本来允许您选择要连接的机器：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This script contains a list of options (`vals`) that are presented to the user
    when the script is executed. When the user selects an option, the script runs
    `ssh` to connect to that machine.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本包含一个选项列表（`vals`），当执行脚本时，这些选项将呈现给用户。当用户选择一个选项时，脚本会运行`ssh`来连接到该机器。
- en: 'If you save this script as `ssh-launcher.sh` in your home folder, you can add
    a profile to your Windows Terminal settings that executes it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将此脚本保存为`ssh-launcher.sh`并放在您的主文件夹中，您可以在Windows Terminal设置中添加一个配置文件来执行它：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding profile, you can see that `commandline` has been replaced
    with one that runs the previous `ssh-launcher.sh` script. When this profile is
    launched, it uses `wsl` to launch the script via `bash`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述配置文件中，您可以看到`commandline`已被替换为运行先前的`ssh-launcher.sh`脚本的命令。当启动此配置文件时，它使用`wsl`通过`bash`来启动脚本：
- en: '![Figure 6.9 – A screenshot showing the ssh launcher script running'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 - 屏幕截图显示ssh启动脚本运行'
- en: '](img/Figure_6.9_B16412.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.9_B16412.jpg)'
- en: Figure 6.9 – A screenshot showing the ssh launcher script running
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 - 屏幕截图显示ssh启动脚本运行
- en: You can see this script in action in the preceding screenshot. The script prompts
    the user to pick from a list of machines and then runs `ssh` to connect to the
    selected machine. This makes for a convenient way to set up connections to regularly
    used machines.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上述屏幕截图中看到此脚本的运行情况。该脚本提示用户从机器列表中选择，并运行`ssh`以连接到所选的机器。这为设置到经常使用的机器的连接提供了一种方便的方式。
- en: As you work with WSL, you will likely find a set of applications that you frequently
    run or steps that you regularly perform, and these are great candidates for additions
    to your Windows Terminal profiles!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用WSL时，您可能会发现一组您经常运行的应用程序或者您经常执行的步骤，这些都是添加到Windows终端配置文件的好选择！
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are various other options that we didn't get chance to look at here, for
    example, setting background images for your profiles, and you can find details
    of these in the Windows Terminal documentation at [https://docs.microsoft.com/en-us/windows/terminal/](https://docs.microsoft.com/en-us/windows/terminal/).
    Windows Terminal is also rapidly adding new features – to see what is coming,
    take a look at the roadmap documentation on GitHub at [https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md](https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有其他一些选项，我们没有机会在这里看到，例如为配置文件设置背景图像，您可以在Windows终端文档中找到这些选项的详细信息，网址为[https://docs.microsoft.com/en-us/windows/terminal/](https://docs.microsoft.com/en-us/windows/terminal/)。Windows终端还在快速添加新功能-要了解即将推出的功能，请查看GitHub上的路线图文档，网址为[https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md](https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md)。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you've seen ways to work with multiple Windows Terminal profiles.
    First, you saw how to work with multiple tabs by controlling tab titles (and colors)
    to help keep track of the context for each tab. Then you saw how to work with
    panes to allow multiple (potentially different) profiles to run in the same tab.
    You may find that you prefer one way of working to the other or that you combine
    tabs and profiles. Either way, you also learned how to use the Windows Terminal
    command line to script the creation of both tabs and panes to allow you to easily
    and quickly create consistent, productive working environments for your projects.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了如何使用多个Windows终端配置文件的方法。首先，您了解了如何通过控制选项卡标题（和颜色）来处理多个选项卡，以帮助跟踪每个选项卡的上下文。然后，您了解了如何使用窗格来允许在同一个选项卡中运行多个（可能不同的）配置文件。您可能会发现您更喜欢一种工作方式，或者将选项卡和配置文件结合起来。无论哪种方式，您还学会了如何使用Windows终端命令行来脚本化选项卡和窗格的创建，以便为您的项目轻松快速地创建一致且高效的工作环境。
- en: The chapter ended by looking at how Windows Terminal profiles can be used for
    more than just running a shell by setting up a profile that launches SSH to connect
    to a remote machine. You then saw how to take that further and prompt you to pick
    from a list of machines to connect to, using a *Bash* script. If you regularly
    connect to machines via SSH, then these examples will hopefully be useful, but
    the goal was to show ideas for how to take further advantage of profiles in Windows
    Terminal. As you find common tasks and applications in your workflow, think about
    whether it is worth spending a few minutes creating a Windows Terminal profile
    to make those repeated tasks quicker and easier. All of these techniques allow
    you to refine your workflow with Windows Terminal and boost your day-to-day productivity.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本章最后介绍了如何使用Windows终端配置文件来运行不仅仅是shell的功能，通过设置一个启动SSH连接到远程机器的配置文件。然后，您了解了如何进一步选择要连接的机器列表，并使用*Bash*脚本提示您选择。如果您经常通过SSH连接到机器，那么这些示例将希望对您有用，但目标是展示如何进一步利用Windows终端中的配置文件。当您在工作流程中找到常见任务和应用程序时，请考虑是否值得花费几分钟创建一个Windows终端配置文件，以使这些重复的任务更快、更容易完成。所有这些技术都可以让您优化Windows终端的工作流程，提高您的日常工作效率。
- en: 'In the next chapter, we will look at a new topic: how to work with containers
    in WSL.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一个新的主题：如何在WSL中使用容器。
