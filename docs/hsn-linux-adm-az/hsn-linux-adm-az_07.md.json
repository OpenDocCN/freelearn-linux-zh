["```\n#Declare Variables\n$myResourceGroup = \"LinuxOnAzure\" \n$myLocation = \"West Europe\" \n$myNSG = \"NSG_LinuxOnAzure\" \n$mySubnet = \"10.0.0.0/24\"\n$myVnet= \"VNET_LinuxOnAzure\"\n```", "```\n# Test if the Resource Group already exists, if not: create it. \nGet-AzResourceGroup -Name $myResourceGroup -ErrorVariable notPresent -ErrorAction SilentlyContinue | out-null\u00a0\u00a0\nif ($notPresent) \n\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0# ResourceGroup doesn't exist, create it: \n\u00a0\u00a0\u00a0\u00a0New-AzResourceGroup -Name $myResourceGroup -Location $myLocation\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Write-Host \"The Resource Group $myResourceGroup is created in the location $myLocation\" \n\u00a0\u00a0}\u00a0\u00a0\nelse \n\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0Write-Host \"The Resource Group $myResourceGroup already exists in the location $myLocation\" \n\u00a0\u00a0}\n```", "```\n#Test if the vnet name not already exists: \nGet-AzVirtualNetwork -Name $myVnet -ResourceGroupName $myResourceGroup -ErrorVariable notPresent -ErrorAction SilentlyContinue | out-null \nif ($notPresent) \n\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0# vnet doesn't exist, create the vnet\n\n\u00a0\u00a0\u00a0\u00a0$virtualNetwork = New-AzVirtualNetwork -ResourceGroupName $myResourceGroup -Location $myLocation -Name $myVnet -AddressPrefix 10.0.0.0/16\n\u00a0\u00a0\u00a0\u00a0# add subnet configuration\n\u00a0\u00a0\u00a0\u00a0$subnetConfig = Add-AzVirtualNetworkSubnetConfig -Name default -AddressPrefix $mySubnet -VirtualNetwork $virtualNetwork\n\u00a0\u00a0\u00a0\u00a0# Associate the subnet to the virtual network\n\u00a0\u00a0\u00a0\u00a0$virtualNetwork | Set-AzVirtualNetwork\n\u00a0\u00a0\u00a0\u00a0\u00a0Write-Host \"The virtual network $myVnet with $mySubnet configured is created in the location $myLocation\" \n\u00a0\u00a0}\nelse \n\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0Write-Host \"The Resource Group $myVnet already exists in the location $myLocation\" \n\u00a0\u00a0}\n```", "```\n# Create NSG\n# Test if the Network Security Group does not already exist:\u00a0\u00a0\n\nGet-AzNetworkSecurityGroup -ResourceGroupName $myResourceGroup -Name $myNSG -ErrorVariable notPresent -ErrorAction SilentlyContinue | out-null \nif ($notPresent) \n{ \n# create the NSG \n$nsg = New-AzNetworkSecurityGroup -ResourceGroupName $myResourceGroup -Location $myLocation -Name $myNSG\n# create the rules for SSH and HTTP \n$nsg | Add-AzNetworkSecurityRuleConfig -Name \"allow_http\" -Description \"Allow HTTP\" -Access Allow '\n\u00a0\u00a0\u00a0\u00a0-Protocol \"TCP\" -Direction Inbound -Priority 1002 -SourceAddressPrefix \"*\" -SourcePortRange * '\n\u00a0\u00a0\u00a0\u00a0-DestinationAddressPrefix * -DestinationPortRange 80 \n$nsg | Add-AzNetworkSecurityRuleConfig -Name \"allow_ssh\" -Description \"Allow SSH\" -Access Allow '\n\u00a0\u00a0\u00a0\u00a0-Protocol \"TCP\" -Direction Inbound -Priority 1001 -SourceAddressPrefix \"*\" -SourcePortRange * '\n\u00a0\u00a0\u00a0\u00a0-DestinationAddressPrefix * -DestinationPortRange 22 \n# Update the NSG.\n\u00a0\u00a0$nsg | Set-AzNetworkSecurityGroup\nWrite-Host \"The NSG: $myNSG is configured is created with rules for SSH and HTTP in the resource group $myResourceGroup\" \n} \nelse \n{ \nWrite-Host \"The NSG $myNSG already existed in the resource group $myResourceGroup\"\u00a0\u00a0\n}\n```", "```\nTest-AzResourceGroupDeployment -ResourceGroupName ExampleResourceGroup' -TemplateFile c:\\MyTemplates\\azuredeploy.json '\n-TemplateParameterFile\u00a0\u00a0c:\\MyTemplates\\storage.parameters.json\n```", "```\nNew-AzResourceGroupDeployment -Name <deployment name> -ResourceGroupName <resource group name> -TemplateFile c:\\MyTemplates\\azuredeploy.json\n-TemplateParameterFile c:\\MyTemplates\\storage.parameters.json\n```", "```\naz group deployment validate \\\u00a0\u00a0\n--resource-group ResourceGroupName \\\n\u00a0\u00a0\u00a0--template-file template.json \\\n\u00a0\u00a0\u00a0--parameters parameters.json\n```", "```\naz group deployment create \\\n\u00a0\u00a0--name DeploymentName \\\n\u00a0\u00a0--resource-group ResourceGroupName \\\n\u00a0\u00a0--template-file template.json \\\n\u00a0\u00a0--parameters parameters.json\n```", "```\n$myResourceGroup = \"<resource group name>\"\n$myLocation = \"<location>\"\n$myVM = \"<vm name>\"\n$Settings = @{ \"commandToExecute\" = \"apt-get -y install nginx\";};\nSet-AzVMExtension -VMName $myVM '\n-ResourceGroupName $myResourceGroup'\n-Location $myLocation '\n-Name \"CustomscriptLinux\" -ExtensionType \"CustomScript\" '\n-Publisher \"Microsoft.Azure.Extensions\" '\n-typeHandlerVersion \"2.0\" -InformationAction SilentlyContinue '\n-Verbose -Settings $Settings\n```", "```\n#!/bin/sh\napt-get install -y nginx firewalld\nfirewall-cmd --add-service=http\nfirewall-cmd --add-service=http --permanent\n```", "```\ncat nginx.sh| base64\n```", "```\n$Settings = @{\"script\" = \"<base64 string>\";};\n```", "```\n{\n\u00a0\u00a0\u00a0\u00a0\"autoUpgradeMinorVersion\": true,\n\u00a0\u00a0\u00a0\u00a0\"location\": \"<location>\",\n\u00a0\u00a0\u00a0\u00a0\"name\": \"CustomscriptLinux\",\n\u00a0\u00a0\u00a0\u00a0\"protectedSettings\": {},\n\u00a0\u00a0\u00a0\u00a0\"provisioningState\": \"Failed\",\n\u00a0\u00a0\u00a0\u00a0\"publisher\": \"Microsoft.Azure.Extensions\",\n\u00a0\u00a0\u00a0\u00a0\"resourceGroup\": \"<resource group name>\",\n\u00a0\u00a0\u00a0\u00a0\"settings\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"script\": \"<base64 string\"\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\"tags\": {},\n\u00a0\u00a0\u00a0\u00a0\"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n\u00a0\u00a0\u00a0\u00a0\"typeHandlerVersion\": \"2.0\",\n\u00a0\u00a0\u00a0\u00a0\"virtualMachineExtensionType\": \"CustomScript\"\n\u00a0\u00a0}\n```", "```\naz vm extension set --resource-group <resource group> \\\n\u00a0\u00a0--vm-name <vm name> \\\n\u00a0\u00a0--name customScript --publisher Microsoft.Azure.Extensions \\\n\u00a0\u00a0--settings ./nginx.json\n```", "```\n#cloud-config\ngroups: users\nusers:\n\u00a0\u00a0- default\n\u00a0\u00a0- name: azureuser\n\u00a0\u00a0- groups: users\n\u00a0\u00a0- shell: /bin/bash\npackage_upgrade: true\npackages:\n\u00a0\u00a0- nginx\n\u00a0\u00a0- nodejs\n\u00a0\u00a0- npm\nwrite_files:\n\u00a0\u00a0- owner: www-data:www-data\n\u00a0\u00a0- path: /etc/nginx/sites-available/default\n\u00a0\u00a0\u00a0\u00a0content: |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0server {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0listen 80;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0location / {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_pass http://localhost:3000;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_http_version 1.1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_set_header Upgrade $http_upgrade;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_set_header Connection keep-alive;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_set_header Host $host;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_cache_bypass $http_upgrade;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0- owner: azureuser:users\n\u00a0\u00a0- path: /home/azureuser/myapp/index.js\n\u00a0\u00a0\u00a0\u00a0content: |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var express = require('express')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var app = express()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var os = require('os');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app.get('/', function (req, res) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.send('Hello World from host ' + os.hostname() + '!')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app.listen(3000, function () {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Hello world app listening on port 3000!')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\nruncmd:\n\u00a0\u00a0- systemctl restart nginx\n\u00a0\u00a0- cd \"/home/azureuser/myapp\"\n\u00a0\u00a0- npm init\n\u00a0\u00a0- npm install express -y\n\u00a0\u00a0- nodejs index.js\n```", "```\naz vm create --resource-group <resource group> \\\n\u00a0\u00a0--name <vm name> --image UbuntuLTS \\\n\u00a0\u00a0--admin-username linuxadmin \\\n\u00a0\u00a0--generate-ssh-keys --custom-data cloudinit.txt\n```", "```\n    cd /tmp\n    wget \\ https://releases.hashicorp.com/vagrant/2.1.2/vagrant_2.1.2_x86_64.deb\n    sudo dpkg -i vagrant_2.1.2_x86_64.deb\n    ```", "```\n    sudo yum install \\\n     https://releases.hashicorp.com/vagrant/2.1.2/ \\\n     vagrant_2.1.2_x86_64.rpm\n    ```", "```\n    az login\n    ```", "```\n    az ad sp create-for-rbac --name vagrant\n    ```", "```\n    az account show\n    ```", "```\n    AZURE_TENANT_ID=\"<tenant id>\"\n    AZURE_SUBSCRIPTION_ID=\"<account id>\"\n    AZURE_CLIENT_ID=\"<app id>\"\n    AZURE_CLIENT_SECRET=\"<password>\"\n    export AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID AZURE_CLIENT_ID\\\n    \u00a0\u00a0AZURE_CLIENT_SECRET\n    ```", "```\n    source <file>\n    ```", "```\n    ssh-keygen\n    ```", "```\n    vagrant plugin install vagrant-azure\n    ```", "```\n    vagrant version\n    ```", "```\nVagrant.configure('2') do |config|\u00a0\u00a0\nconfig.vm.box = 'azure'\u00a0\u00a0\n# use local ssh key to connect to remote vagrant box\u00a0\u00a0config.ssh.private_key_path = '~/.ssh/id_rsa'\u00a0\u00a0\nconfig.vm.provider :azure do |azure, override|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nazure.tenant_id = ENV['AZURE_TENANT_ID']\u00a0\u00a0\u00a0\u00a0\nazure.client_id = ENV['AZURE_CLIENT_ID']\u00a0\u00a0\u00a0\u00a0\nazure.client_secret = ENV['AZURE_CLIENT_SECRET']\u00a0\u00a0\u00a0\u00a0azure.subscription_id = ENV['AZURE_SUBSCRIPTION_ID']\u00a0\u00a0\nend\nend\n```", "```\nvagrant box add azure-dummy\\\n\u00a0\u00a0https://github.com/azure/vagrant-azure/raw/v2.0/dummy.box\\\n\u00a0\u00a0--provider azure\n```", "```\n <publisher>:<image>:<sku>:<version>\n```", "```\nvagrant up \n```", "```\nvagrant ssh\n```", "```\nvagrant destroy\n```", "```\n# Configure the Shell Provisioner\nconfig.vm.provision \"shell\", path: \"provision.sh\"\nend # Vagrant.config\n```", "```\n#!/bin/sh\ntouch /tmp/done\ntouch /var/lib/cloud/instance/locale-check.skip\n```", "```\nvagrant ssh -c \"ls -al /tmp/done\"\n```", "```\nmkdir ~/bin\ncd /tmp\nwget wget https://releases.hashicorp.com/packer/1.2.5/\\\n\u00a0\u00a0packer_1.2.5_linux_amd64.zip\nunzip /tmp/packer*zip\ncp packer ~/bin \n```", "```\nexport PATH=~/bin:$PATH\n```", "```\npacker version\n```", "```\n{ \n\u00a0\u00a0\u00a0\u00a0\"builders\": [{ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"azure-arm\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"client_id\": \"<appId>\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"client_secret\": \"<appPassword>\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"tenant_id\": \"<tenantId>\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"subscription_id\": \"<subscriptionID>\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"managed_image_resource_group_name\": \"LinuxOnAzure\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"managed_image_name\": \"myPackerImage\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"os_type\": \"Linux\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"image_publisher\": \"Canonical\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"image_offer\": \"UbuntuServer\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"image_sku\": \"18.04-LTS\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"location\": \"West Europe\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"vm_size\": \"Standard_B1s\" \n\u00a0\u00a0\u00a0\u00a0}], \n\u00a0\u00a0\u00a0\u00a0\"provisioners\": [{ \n\u00a0\u00a0\u00a0\"type\": \"shell\", \n\u00a0\u00a0\u00a0\"inline\": [ \n\u00a0\u00a0\u00a0\"touch /tmp/done\", \n\u00a0\u00a0\u00a0\"sudo touch /var/lib/cloud/instance/locale-check.skip\" \n\u00a0\u00a0\u00a0] \n\u00a0\u00a0\u00a0\u00a0}] \n\u00a0\u00a0}\n```", "```\npacker validate ubuntu.json\n```", "```\npacker build ubuntu.json\n```", "```\naz vm create \\ \n--resource-group LinuxOnAzure \\\n --name mypackerVM \\ \n--image myPackerImage \\ \n--admin-username azureuser \\ \n--generate-ssh-keys\n```", "```\naz resource delete --resource-group LinuxOnAzure --resource-type images \\\n\u00a0\u00a0--namespace Microsoft.Compute --name myPackerImage\n```", "```\n \"provisioners\": [{\n\u00a0\u00a0\u00a0\u00a0\"type\": \"shell\",\n\u00a0\u00a0\u00a0\u00a0\"inline\": [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"touch /tmp/done\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"sudo touch /var/lib/cloud/instance/locale-check.skip\"\n\u00a0\u00a0\u00a0\u00a0]\n```", "```\n\u00a0\u00a0\u00a0\u00a0\u00a0\"provisioners\": [{\n\u00a0\u00a0\u00a0\u00a0\"type\": \"shell\",\n\u00a0\u00a0\u00a0\u00a0\"execute_command\": \"echo '{{user 'ssh_pass'}}' | {{ .Vars }} sudo -S -E sh '{{ .Path }}'\",\n\u00a0\u00a0\u00a0\u00a0\"inline\": [\n\u00a0\u00a0\u00a0\u00a0\u00a0\"touch /tmp/done\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\"touch /var/lib/cloud/instance/locale-check.skip\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\"/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync\"\n\u00a0\u00a0\u00a0\u00a0]\n\u00a0\u00a0\u00a0\u00a0}]\n\u00a0\u00a0}\n```", "```\n    myRG=capture\n    myLocation=westus\n    az group create --name $myRG --location $myLocation\n    ```", "```\n    myVM=ubuntudevel\n    AZImage=UbuntuLTS\n    Admin=linvirt\n    az vm create --resource-group $myRG\u00a0\u00a0--name $myVM \\\n    \u00a0\u00a0--image $AZImage \\\n    \u00a0\u00a0--admin-username linvirt\u00a0\u00a0--generate-ssh-keys\n    ```", "```\n    sudo waagent -deprovision+user\n    ```", "```\n    az vm deallocate --resource-group $myRG --name $myVM\n    ```", "```\n    az vm generalize --resource-group $myRG --name $myVM\n    ```", "```\n    destIMG=customUbuntu\n    az image create --resource-group $myRG --name $destIMG --source $myVM\n    ```", "```\n    az image list -o table\n    ```", "```\n    az vm create --resource-group <resource group> \\\n    \u00a0\u00a0--name <vm name> \\ \n    \u00a0\u00a0--image $destIMG \\\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0--admin-username <username> \\\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0--generate-ssh-key\n    ```", "```\n    $myRG=\"myNewRG\" \n    $myLocation=\"westus\" \n    $myVM=\"ubuntu-custom\" \n    $AZImage=\"UbuntuLTS\"\n\n    #Create resource group\n    New-AzResourceGroup -Name $myRG -Location $myLocation \n\n    #Create VM\n    New-AzVm '\n    -ResourceGroupName $myRG '\n    -Name $myVM '\n    -ImageName $AZimage '\n    -Location $myLocation '\n    -VirtualNetworkName \"$myVM-Vnet\" '\n    -SubnetName \"$myVM-Subnet\" '\n    -SecurityGroupName \"$myVM-NSG\" '\n    -PublicIpAddressName \"$myVM-pip\"\n    ```", "```\nStop-AzureRmVM -ResourceGroupName <resource group>'\n\u00a0\u00a0-Name <vm name> \n```", "```\nSet-AzVm -ResourceGroupName <resource group> -Name <vm name> '\n -Generalized\n```", "```\n$vm = Get-AzVM \u2013Name <vm name> -ResourceGroupName <resource group name>\n```", "```\n$image = New-AzImageConfig -Location<location> -SourceVirtualMachineId $vm.Id\n```", "```\nNew-AzImage -Image $image -ImageName <image name> '\n -ResourceGroupName <resource group name>\n```", "```\nGet-AzImage \u2013ImageName <Image Name>\n```", "```\nNew-AzVm ' \n-ResourceGroupName \"<resource group name>\" ' \n-Name \"<VM Name>\" ' \n-ImageName \"<Image Name>\" ' \n-Location \"<location>\" ' \n-VirtualNetworkName \"<vnet name>\" ' \n-SubnetName \"<subnet name>\" ' \n-SecurityGroupName \"<nsg name>\" ' \n-PublicIpAddressName \"<public IP name>\"\n```", "```\n    $vm = Get-AzVm -ResourceGroupName <resource group> '\n    \u00a0\u00a0-Name $vmName\n    $snapshot = New-AzSnapshotConfig '\u00a0\u00a0\u00a0\n    \u00a0\u00a0-SourceUri $vm.StorageProfile.OsDisk.ManagedDisk.Id '\u00a0\u00a0\u00a0\n    \u00a0\u00a0-Location <location> -CreateOption copy\n    New-AzSnapshot '\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0-Snapshot $snapshot -SnapshotName <snapshot name> '\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0-ResourceGroupName <resource group>\n    ```", "```\n    $snapshot = Get-AzSnapshot \u2013SnapshotName <Snapshot Name>\n    ```", "```\n    $imageConfig = New-AzImageConfig -Location <location>\n\n    $imageConfig = Set-AzImageOsDisk -Image $imageConfig '\n     -OsState Generalized -OsType Linux -SnapshotId $snapshot.Id\n    ```", "```\n    New-AzImage -ImageName <image name> '\n    \u00a0\u00a0-ResourceGroupName <resource group> -Image $imageConfig\n    ```", "```\n    disk=$(az vm show --resource-group <resource group>\\\n    \u00a0\u00a0--name <vm name> --query \"storageProfile.osDisk.name\" -o tsv)\n    az snapshot create --resource-group <resource group>\\\n    \u00a0\u00a0--name <snapshot name> --source $disk\n    ```", "```\n    snapshotId=$(az snapshot show --name <snapshot name>\\\n    \u00a0\u00a0--resource-group <resource group> --query \"id\" -o tsv)\n    az image create --resource-group <resource group> --name myImage \\\n    \u00a0\u00a0--source $snapshotID --os-type Linux \n    ```", "```\n    cd /boot\n    sudo cp initrd-'uname -r'.img\u00a0\u00a0initrd-'uname -r'.img.bak\n    ```", "```\n    sudo mkinitrd --preload=hv_storvsc --preload=hv_vmbus -v -f initrd-'uname -r'.img 'uname -r'\n    ```", "```\n    console=ttyS0,115200n8 earlyprintk=ttyS0,115200 rootdelay=300\n    ```", "```\n    rhgb quiet crashkernel=auto\n    ```", "```\n    az storage account create --location <location> \\\n    \u00a0\u00a0--resource-group <resource group> --sku Premium_LRS \\\n    \u00a0\u00a0--name <account name> --access-tier Cool --kind StorageV2\n    ```", "```\n    az storage account keys list --account-name <storage account name>\\\n    \u00a0\u00a0--resource-group <resource group>\n    ```", "```\n     az storage container create \\\n    \u00a0\u00a0--account-name <storage account>\\\n    \u00a0\u00a0--account-key <storage account key 1>\u00a0\u00a0\n    \u00a0\u00a0--name <container name> \n    ```", "```\n    az storage blob upload --account-name <storage account>\\\n    \u00a0\u00a0--account-key <storage account key> \\\n    \u00a0\u00a0--container-name <container name> \\ \n    \u00a0\u00a0--type page --file ./bionic-server-cloudimg-amd64.vhd \\\n    \u00a0\u00a0--name bionic.vhd\n    ```", "```\n    az storage blob url --account-name <storage account> \\\n    \u00a0\u00a0--account-key <storage account key> \\\n    \u00a0\u00a0--container-name <container name> \\\n    \u00a0\u00a0--name bionic.vhd\n    ```", "```\n    az disk create --resource-group <resoure group> \\\n     --name bionic --source <blob url> --Location <location>\n    ```", "```\n    az image create --resource-group <resource group> \\\n    \u00a0\u00a0--name bionic --source <blob url> --os-type linux \n    \u00a0\u00a0--location <location>\n    ```", "```\n    az vm create --resource-group <resource group> \\\n     --name <vm name> \\ \n     --image bionic \\\u00a0\u00a0\u00a0\u00a0\n     --admin-username <username> \\\u00a0\u00a0\u00a0\u00a0\n     --generate-ssh-key \\\n     --location <location>\n    ```"]