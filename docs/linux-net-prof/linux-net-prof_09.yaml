- en: '*Chapter 6*: DNS Services on Linux'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：Linux上的DNS服务'
- en: 'The **Domain Name System** (**DNS**) is a major underpinning of today''s information-based
    society. A proverb used within the technical community (phrased in haiku format)
    is shown here:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**域名系统**（**DNS**）是当今信息社会的重要基础。技术社区中使用的一句谚语（以俳句格式表达）如下所示：'
- en: '*It''s not DNS*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*这不是DNS*'
- en: '*There is no way it''s DNS*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*绝对不可能是DNS*'
- en: '*It was DNS*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*这是DNS*'
- en: 'This describes more technical problems than you might think, up to widespread
    internet or cloud service outages. It also nicely describes the progression of
    how a problem is solved, with the answer: *"The root problem is always DNS."*
    This nicely illustrates just how important this service is to almost every facet
    of today''s corporate networks and public internet.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这描述了比你想象的更多的技术问题，甚至涉及到广泛的互联网或云服务中断。这也很好地描述了问题是如何解决的，答案是：“根本问题总是DNS。”这很好地说明了这项服务对当今几乎每个企业网络和公共互联网的几乎每个方面都是多么重要。
- en: 'In this chapter, we''ll cover several topics that involve DNS basics, then
    build—and finally, troubleshoot—DNS services. We''ll look at the following areas:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖几个涉及DNS基础知识的主题，然后构建和最终排除DNS服务。我们将关注以下领域：
- en: What is DNS?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是DNS？
- en: Two main DNS server implementations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种主要的DNS服务器实现
- en: Common DNS implementations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的DNS实现
- en: DNS troubleshooting and reconnaissance
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS故障排除和侦察
- en: 'Then, with the DNS basics covered, we''ll discuss the following two entirely
    new DNS implementations that are seeing rapid adoption:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在介绍了DNS基础知识之后，我们将讨论以下两种全新的DNS实现，这两种实现正在迅速被采用：
- en: DNS over **HyperText Transfer Protocol Secure** (**HTTPS**), known as **DoH**
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS over **HyperText Transfer Protocol Secure** (**HTTPS**), known as **DoH**
- en: DNS over **Transport Layer Security** (**TLS**), known as **DoT**
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输层安全**（**TLS**）上的DNS，称为**DoT**'
- en: We'll also discuss the **DNS Security Extensions** (**DNSSEC**) implementation,
    which cryptographically signs DNS responses to prove that they are verified and
    haven't been tampered with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论**DNS安全扩展**（**DNSSEC**）实现，该实现对DNS响应进行加密签名，以证明它们已经经过验证并且没有被篡改。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should be able to continue working with your existing Linux host or **virtual
    machine** (**VM**) as we go through the examples in this chapter. There are no
    additional requirements.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，您应该能够继续使用您现有的Linux主机或**虚拟机**（**VM**）。没有额外的要求。
- en: What is DNS?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DNS？
- en: DNS is essentially a translator between what people want and what a network
    needs to make that happen. People, for the most part, understand text names of
    hosts and services—for instance, `google.com` or `paypal.com`. However, these
    names don't mean anything to the underlying network. What DNS does is take those
    "fully qualified hostnames" that someone might type into an application, such
    as their browser at **Open Systems Interconnection** (**OSI**) Layer 7 (remember
    the OSI layers in [*Chapter 3*](B16336_03_Final_NM_ePub.xhtml#_idTextAnchor053),
    *Using Linux and Linux Tools for Network Diagnostics*), and translates them into
    **Internet Protocol** (**IP**) addresses that can then be used to route the application
    request at OSI Layers 3 and 4.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DNS基本上是人们所需的东西和网络所需的东西之间的翻译者。大多数情况下，人们理解主机和服务的文本名称，例如`google.com`或`paypal.com`。然而，这些名称对底层网络并没有意义。DNS所做的就是将那些“完全合格的主机名”（有人可能在应用程序中输入，比如他们在**开放系统互连**（**OSI**）第7层的浏览器中输入的）翻译成**Internet
    Protocol**（**IP**）地址，然后可以用来在OSI第3和第4层路由应用程序请求。
- en: In the reverse direction, DNS can also translate an IP address into a **fully
    qualified domain name** (**FQDN**), using what's called a **pointer** (**PTR**)
    request (for a DNS PTR record) or "reverse lookup". This can be important to technical
    folks, but these requests are not as commonly seen by regular people running their
    browsers and other applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在相反的方向上，DNS也可以将IP地址翻译成**完全合格的域名**（**FQDN**），使用所谓的**指针**（**PTR**）请求（用于DNS PTR记录）或“反向查找”。这对技术人员来说可能很重要，但这些请求并不像常见的人们运行他们的浏览器和其他应用程序那样经常见到。
- en: Two main DNS server implementations
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两种主要的DNS服务器实现
- en: DNS has a large and complex infrastructure on the internet (which we'll touch
    on in this section). This is made up of 13 root name servers (which are each a
    reliable cluster of servers), a group of commonly used name servers (for instance,
    the servers we use at Google or Cloudflare), and a series of registrars who will,
    for a fee, register a DNS domain name for you—for instance, your organization's
    domain name.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: DNS在互联网上有一个庞大而复杂的基础设施（我们将在本节中涉及）。这由13个根名称服务器（每个都是可靠的服务器集群）、一组常用的名称服务器（例如我们在谷歌或Cloudflare使用的服务器）以及一系列注册商组成，他们将为您注册DNS域名，例如您的组织域名，收取一定费用。
- en: However, for the most part, most administrators are working with the needs of
    their organization—working with their internal DNS name servers that face their
    internal folks, or with their external DNS name servers that face the internet.
    It is these two use cases that we'll be focusing on in this chapter. You will
    see as we build these examples out how the Google or Cloudflare DNS infrastructure,
    or even the root DNS servers, are not all that different.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大部分情况下，大多数管理员都在处理他们组织的需求——与面向内部人员的内部DNS名称服务器或者面向互联网的外部DNS名称服务器进行工作。这两种用例将是本章重点讨论的内容。当我们构建这些示例时，您将看到谷歌或Cloudflare
    DNS基础设施，甚至根DNS服务器并没有那么不同。
- en: An organization's "internal" DNS server (and a DNS overview)
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织的“内部”DNS服务器（以及DNS概述）
- en: The most common DNS service that organizations deploy is an **internal DNS server**
    for their own people's use. This server likely has a zone file populated with
    DNS records for internal DNS resolution. This file can either be populated manually
    by editing the zone file or can be populated automatically, using auto-registration
    by the clients or from **Dynamic Host Configuration Protocol** (**DHCP**) leases.
    Often, all three methods are combined.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 组织部署的最常见的DNS服务是供其员工使用的**内部DNS服务器**。该服务器可能具有用于内部DNS解析的DNS记录的区域文件。该文件可以通过手动编辑区域文件或使用客户端的自动注册或**动态主机配置协议**（**DHCP**）租约自动填充。通常，这三种方法都会结合使用。
- en: The basic request flow is simple. A client makes a DNS request. If that request
    is for a host that's internal to the organization and the request is to an internal
    DNS server, the DNS response is supplied immediately since it's on that local
    DNS server.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的请求流程很简单。客户端发出DNS请求。如果该请求是针对组织内部的主机，并且请求是发送到内部DNS服务器，则由于该本地DNS服务器上有该请求，DNS响应将立即提供。
- en: 'If it''s for an external host, then things are bit more complex—for instance,
    let''s query for `www.example.com`. Before we start, note that the following diagram
    shows the *worst case*, but there is a caching process at almost every step that
    usually allows for one or more steps to be skipped along the way:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是针对外部主机的请求，那么事情会变得更加复杂 - 例如，让我们查询`www.example.com`。在开始之前，请注意以下图表显示了*最坏情况*，但几乎每一步都有缓存过程，通常允许跳过一步或多步：
- en: '![Figure 6.1 – A dizzying overview of how complicated a single DNS request
    can get'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - 单个DNS请求可以变得多么复杂的令人眼花缭乱的概述'
- en: '](img/B16336_06_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_06_001.jpg)'
- en: Figure 6.1 – A dizzying overview of how complicated a single DNS request can
    get
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 单个DNS请求可以变得多么复杂的令人眼花缭乱的概述
- en: 'This process looks pretty complicated, but you''ll see that it goes by pretty
    fast, and in fact has a number of *escape hatches* that let the protocol skip
    many of these steps in lots of cases. Let''s look at the entire *worst-case* process
    in detail, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程看起来很复杂，但您会发现它进行得非常快，实际上在许多情况下有许多*逃生舱*可以让协议跳过许多这些步骤。让我们详细看看整个*最坏情况*的过程，如下所示：
- en: If the entry is in the DNS cache of the internal DNS server, and the **time
    to live** (**TTL**) of that entry has not expired, then the response is supplied
    immediately to the client. Similarly, if the client is requesting an entry that's
    hosted on the server in a zone file, the answer is supplied immediately to the
    client.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果内部DNS服务器的DNS缓存中有条目，并且该条目的**生存时间**（**TTL**）尚未过期，则立即向客户端提供响应。同样，如果客户端请求的条目托管在区域文件中的服务器上，则立即向客户端提供答案。
- en: If the entry is not in the cache of the internal DNS server, or if it is in
    the cache but the TTL of that entry has expired, then the internal server forwards
    the request to its upstream providers (often called **forwarders**) to refresh
    the entry.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果内部DNS服务器的缓存中没有条目，或者如果条目在缓存中但其TTL已过期，则内部服务器将请求转发给其上游提供者（通常称为**转发器**）以刷新该条目。
- en: If the query is in the cache of the forwarder, it will simply return the answer.
    If this server has the authoritative name server for the domain, it will simply
    query that host (skipping ahead in the process to *Step 5*).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询在转发器的缓存中，它将简单地返回答案。如果该服务器具有该域的权威名称服务器，它将简单地查询该主机（在过程中跳过到*步骤5*）。
- en: If the forwarder does not have the request in the cache, it will in turn request
    upstream. In this case, though, it will likely query the root name servers. The
    goal in this is to find the "authoritative name server" that has the actual entries
    (in a zone file) for that domain. In this case, the query is made to the root
    name servers for `.com`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果转发器在缓存中没有该请求，它将向上游请求。在这种情况下，它可能会查询根名称服务器。这样做的目的是找到具有该域的实际条目（在区域文件中）的“权威名称服务器”。在这种情况下，查询是针对`.com`的根名称服务器进行的。
- en: The root name server will not return the actual answer, but will instead return
    the authoritative name server for the `.com`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根名称服务器不会返回实际答案，而是返回`.com`的权威名称服务器。
- en: After the forwarder gets this response, it updates its cache with that name
    server entry, then makes the actual query against that server.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转发器收到此响应后，更新其缓存以包含该名称服务器条目，然后对该服务器进行实际查询。
- en: The authoritative server for `.com` returns the authoritative DNS server for
    `example.com`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.com`的权威服务器返回`example.com`的权威DNS服务器。'
- en: The forwarder server then makes a request against this final authoritative name
    server.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转发服务器然后向最终的权威名称服务器发出请求。
- en: The authoritative name server for `example.com` returns the actual query *"answer"*
    to the forwarder server.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`example.com`的权威名称服务器将实际查询的“答案”返回给转发器服务器。'
- en: The forwarder name server caches that answer, then sends a reply back to your
    internal name server.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转发器名称服务器缓存该答案，然后将答复发送回您的内部名称服务器。
- en: Your internal DNS server also caches that answer, then forwards it back to the
    client.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的内部DNS服务器还会缓存该答案，然后将其转发回客户端。
- en: The client caches the request in its local cache, then passes the requested
    information (the DNS response) to the application that requested it (perhaps your
    web browser).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端将请求缓存在其本地缓存中，然后将所请求的信息（DNS响应）传递给请求它的应用程序（也许是您的网络浏览器）。
- en: Again, this process shows the worst-case process to make a simple DNS request
    and receive an answer. In practice, once the servers have been up for even a short
    period of time, caching shortens this considerably. Once in a steady state, the
    internal DNS server for most organizations will have most requests cached, so
    the process skips right from *Step 1* to *Step 10*. In addition, your forwarding
    DNS server will cache—in particular, it will almost never query the root name
    servers; usually, it will have the TLD servers (in this case, the server for `.com`)
    cached as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这个过程展示了最坏情况下的简单DNS请求和接收答案的过程。实际上，一旦服务器运行了一段时间，缓存会大大缩短这个过程。一旦进入稳定状态，大多数组织的内部DNS服务器将会缓存大部分请求，因此该过程会直接从*步骤1*跳到*步骤10*。此外，您的转发DNS服务器也会缓存，特别是它几乎不会查询根名称服务器；通常它也会缓存顶级域服务器（在这种情况下，`.com`的服务器）。
- en: In this description, we also brought up the concept of "root name servers".
    These are the authoritative servers for the root or the `.` zone. There are 13
    root servers for redundancy, each of which in turn is actually a reliable cluster
    of servers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个描述中，我们还提到了“根名称服务器”的概念。这些是根或`.`区域的权威服务器。为了冗余，有13个根服务器，每个实际上都是一个可靠的服务器集群。
- en: 'Which key features do we need to enable on your internal DNS server to make
    all this work? We need to enable the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的内部DNS服务器需要启用哪些关键功能才能使所有这些工作？我们需要启用以下功能：
- en: '**DNS recursion**: This model relies on DNS recursion—the ability for each
    server in turn to make the client''s DNS request "up the line". If the DNS entry
    requested is not defined on the internal server, it needs permission to forward
    those requests on.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS递归**：这种模式依赖于DNS递归，即每个服务器依次向上级服务器发出客户端的DNS请求。如果内部服务器上未定义所请求的DNS条目，它需要获得转发这些请求的权限。'
- en: '**Forwarder entries**: If the requested DNS entry is not hosted on the internal
    server, **internal DNS service** (**iDNS**) requests are forwarded to these configured
    IP addresses—these should be two or more reliable upstream DNS servers. These
    upstream servers will in turn cache DNS entries and expire them as their TTL timers
    expire. In days past, people would use their **internet service provider''s**
    (**ISP''s**) DNS servers for forwarders. In more modern times, the larger DNS
    providers are both more reliable and provide more features than your ISP. Some
    of the common DNS services used as forwarders are listed next (the most commonly
    used addresses appear in bold):![](img/Table_011.jpg)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转发器条目**：如果所请求的DNS条目不托管在内部服务器上，**内部DNS服务**（**iDNS**）请求将被转发到这些配置的IP地址，这些应该是两个或更多可靠的上游DNS服务器。这些上游服务器将依次缓存DNS条目，并在其TTL计时器到期时使其过期。在过去，人们会使用他们的**互联网服务提供商**（**ISP**）的DNS服务器作为转发器。在现代，更大的DNS提供商比您的ISP更可靠并提供更多功能。下面列出了一些常用的用作转发器的DNS服务（最常用的地址以粗体显示）！[](img/Table_011.jpg)'
- en: '**Caching**: In a large organization, a DNS server''s performance can be greatly
    improved by adding memory—this allows more caching, which means that more requests
    can be serviced locally, direct from the memory of the server.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：在一个大型组织中，通过增加内存可以大大提高DNS服务器的性能，这样可以进行更多的缓存，这意味着更多的请求可以直接从服务器的内存中提供服务。'
- en: '**Dynamic registration**: While servers usually have static IP addresses and
    static DNS entries, it''s common for workstations to have addresses assigned by
    DHCP, and having those workstations in DNS is of course desirable as well. DNS
    is often configured to allow dynamic registration of these hosts, either by populating
    DNS from DHCP addresses as they are assigned or by permitting the hosts to register
    themselves in DNS (as described in **Request for Comments** (**RFC**) *2136*).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态注册**：虽然服务器通常具有静态IP地址和静态DNS条目，但工作站通常会通过DHCP分配地址，当然也希望将这些工作站注册到DNS中。DNS通常配置为允许动态注册这些主机，可以通过在分配地址时从DHCP中填充DNS或允许主机自行在DNS中注册（如**请求评论**（**RFC**）*2136*中所述）。'
- en: Microsoft implements an authentication mechanism into their dynamic update process,
    and this is where it is most commonly seen. It is, however, an option in Linux
    DNS (**Berkeley Internet Name Domain**, or **BIND**) as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在他们的动态更新过程中实现了身份验证机制，这是最常见的地方。然而，在Linux DNS（**伯克利互联网名称域**，或**BIND**）中也有这个选项。
- en: '**Host redundancy**: Almost all core services benefit from redundancy. For
    DNS, that is usually with a second DNS server. The database is usually replicated
    in one direction (from the primary to the secondary server) and uses the serial
    number in the zone file to know when to replicate, using a copy process called
    a **zone transfer**. Redundancy is key to account for various systems failures,
    but it''s just as important in allowing system maintenance without a service interruption.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机冗余**：几乎所有核心服务都受益于冗余。对于DNS来说，通常会有第二个DNS服务器。数据库通常是单向复制（从主服务器到辅助服务器），并使用区域文件中的序列号来确定何时进行复制，使用一种称为**区域传输**的复制过程。冗余对于应对各种系统故障至关重要，但同样重要的是它可以允许系统维护而不会中断服务。'
- en: With an internal DNS server in place, what needs to be changed in our configuration
    to make a DNS server that serves a zone to the public internet?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了内部DNS服务器，我们需要在配置中做哪些改变才能使DNS服务器为公共互联网提供区域服务？
- en: An internet-facing DNS server
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向互联网的DNS服务器
- en: In the case of an internet-facing DNS server, you are most likely implementing
    an authoritative DNS server for one or more DNS zones. For instance, in our reference
    diagram (*Figure 6.1*), the authoritative DNS server for `example.com` would be
    a good example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向互联网的DNS服务器的情况下，您很可能正在为一个或多个DNS区域实现权威DNS服务器。例如，在我们的参考图表（*图6.1*）中，`example.com`的权威DNS服务器就是一个很好的例子。
- en: 'In this implementation, the focus shifts from the internal server''s emphasis
    on performance and forwarding to restricting access for maximum security. These
    are the restrictions that we want to implement:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实现中，重点从内部服务器的性能和转发转移到了限制访问以实现最大安全性。这些是我们想要实现的限制：
- en: '**Restrict recursion**: In the DNS model we''ve outlined, this server is "the
    end of the line"—it''s directly answering DNS requests for the zone(s) it is hosting.
    This server should never have to look upstream to service a DNS request.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制递归：在我们概述的DNS模型中，这个服务器是“终点”，它直接回答它托管的区域的DNS请求。这个服务器永远不应该向上游查找以服务DNS请求。
- en: '**Cache is less important**: If you are an organization and you are hosting
    your own public DNS zones, then you only need enough memory to cache your own
    zones.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存不太重要：如果您是一个组织，并且正在托管自己的公共DNS区域，那么您只需要足够的内存来缓存自己的区域。
- en: '**Host redundancy**: Again, if you are hosting your own zone files, adding
    a second host is likely more important to you than adding a cache. This gives
    your DNS service some hardware redundancy so that you can do maintenance on one
    server without interrupting the service.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机冗余：再次，如果您正在托管自己的区域文件，添加第二台主机对您来说可能比添加缓存更重要。这为您的DNS服务提供了一些硬件冗余，这样您就可以在不中断服务的情况下对一台服务器进行维护。
- en: '**Restricting zone transfers**: This is a key restriction that you want to
    implement—you want to answer individual DNS queries as they arrive. There isn''t
    a good reason for a DNS client on the internet to request all entries for an organization.
    Zone transfers are meant to maintain your zone between redundant servers so that
    as a zone is edited, the changes are replicated to the other servers in the cluster.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制区域传输：这是您想要实施的关键限制——您希望在收到单独的DNS查询时进行回答。互联网上的DNS客户端请求组织的所有条目没有充分的理由。区域传输旨在在冗余服务器之间维护您的区域，以便在编辑区域时将更改复制到群集中的其他服务器。
- en: '**Rate limiting**: DNS servers have a feature called **Response Rate Limiting**
    (**RRL**) that limits how frequently any one source can query that server. Why
    would you implement such a feature?'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速率限制：DNS服务器具有一种称为响应速率限制（RRL）的功能，它限制任何一个源可以查询该服务器的频率。为什么要实施这样的功能？
- en: DNS is often used in "spoofing" attacks. Since it is based on the **User Datagram
    Protocol** (**UDP**), there is no "handshake" to establish a session; it's a simple
    request/response protocol—so, if you want to attack a known address, you can simply
    make DNS queries with your target as the requester, and the unsolicited answer
    will go to that IP.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: DNS经常用于“欺骗”攻击。由于它基于用户数据报协议（UDP），没有建立会话的“握手”；它是一个简单的请求/响应协议，因此，如果您想攻击已知地址，您可以简单地使用目标作为请求者进行DNS查询，未经请求的答案将发送到该IP。
- en: This doesn't seem like an attack, but if you then add a "multiplier" (in other
    words, if you are making small DNS requests and get larger responses—for instance,
    **text** (**TXT**) records—and you are using multiple DNS servers as "reflectors"),
    then the bandwidth you are sending to the target can add up pretty quickly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎不像是一次攻击，但如果您然后添加一个“乘数”（换句话说，如果您正在进行小型DNS请求并获得更大的响应，例如文本（TXT）记录，并且正在使用多个DNS服务器作为“反射器”），那么您发送到目标的带宽可能会很快增加。
- en: This makes rate limiting important—you want to restrict any one IP address to
    make a small number of identical queries per second. This is a reasonable thing
    to do; given the reliance of DNS caching, any one IP address shouldn't make more
    than one or two identical requests in any 5-minute period, since 5 minutes is
    the minimum TTL for any DNS zone.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得速率限制变得重要——您希望限制任何一个IP地址每秒进行少量相同的查询。这是一个合理的做法；鉴于DNS缓存的依赖性，任何一个IP地址在任何5分钟内不应该进行超过一到两个相同的请求，因为5分钟是任何DNS区域的最小TTL。
- en: Another reason to enable rate limiting is to restrict the ability of an attacker
    to do reconnaissance in DNS—making dozens or hundreds of requests for common DNS
    names and compiling a list of your valid hosts for subsequent attacks against
    them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 启用速率限制的另一个原因是限制攻击者在DNS中进行侦察的能力——为常见的DNS名称进行数十甚至数百个请求，并编制您有效主机的列表，以便随后对它们进行攻击。
- en: '**Restricting dynamic registration**: Dynamic registration is, of course, never
    recommended on most internet-facing DNS servers. The one exception would be any
    organization that offers **Dynamic DNS** (**DDNS**) registration as a service.
    Companies of this type include Dynu, DynDNS, FreeDNS, and No-IP, among several
    others. Given the specialist nature of these companies, they each have their own
    methods of securing their DDNS updates (often involving a custom-written agent
    and some form of authentication). The direct use of *RFC 2136* is simply not securable
    for an internet-facing DNS server.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制动态注册：动态注册当然不建议在大多数面向互联网的DNS服务器上。唯一的例外是任何提供动态DNS（DDNS）注册作为服务的组织。这类公司包括Dynu、DynDNS、FreeDNS和No-IP等几家公司。鉴于这些公司的专业性质，它们各自都有自己的方法来保护其DDNS更新（通常涉及自定义代理和某种形式的身份验证）。直接使用RFC
    2136对于面向互联网的DNS服务器来说根本无法保护。
- en: With the basics of implementing both an internal DNS server and starting to
    secure these for their various use cases, which DNS applications do we have available
    to work with to build a DNS infrastructure? Let's learn about this in the next
    section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施内部DNS服务器的基础知识并开始为它们的各种用例进行安全设置，我们有哪些DNS应用程序可用于构建DNS基础设施？让我们在下一节中了解这一点。
- en: Common DNS implementations
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的DNS实现
- en: '**BIND**, also called **named** (for **name daemon**), is the DNS tool most
    often implemented in Linux, and is arguably both the most flexible and complete,
    as well as the most difficult to configure and troubleshoot. For better or worse,
    though, it''s the service you are most likely to see and to implement in most
    organizations. The two main implementation use cases are outlined in the next
    two sections.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: BIND，也称为named（用于名称守护程序），是Linux中最常实现的DNS工具，可以说是最灵活和完整的，同时也是最难配置和排除故障的。不管好坏，它是您最有可能看到和在大多数组织中实施的服务。主要的两种实现用例在接下来的两个部分中进行了概述。
- en: '**DNS Masquerade** (**dnsmasq**) is a competing DNS server implementation.
    It''s commonly seen on network appliances because of its small footprint, but
    also makes a fine DNS server for a smaller organization. The key advantages to
    Dnsmasq would include its built-in **graphical user interface** (**GUI**) that
    can be used for reporting, as well as its integration with DHCP (which we''ll
    discuss in the next chapter), allowing DNS registration directly from the DHCP
    database. In addition, Dnsmasq implements a friendly way to implement DNS blocklists,
    which are very nicely packaged up in the Pi-hole application. If your home network
    has a DNS server on its perimeter firewall or **Wireless Access Point** (**WAP**),
    that DNS server is most likely Dnsmasq.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**DNS伪装**（**dnsmasq**）是一种竞争的DNS服务器实现。它通常出现在网络设备上，因为它的占用空间很小，但也可以作为较小组织的良好DNS服务器。Dnsmasq的主要优势包括其内置的**图形用户界面**（**GUI**），可用于报告，以及其与DHCP的集成（我们将在下一章中讨论），允许直接从DHCP数据库进行DNS注册。此外，Dnsmasq实现了一种友好的方式来实现DNS阻止列表，这在Pi-hole应用程序中非常好地打包起来。如果你的家庭网络在其外围防火墙或**无线接入点**（**WAP**）上有一个DNS服务器，那么该DNS服务器很可能是Dnsmasq。'
- en: In this chapter, we'll focus on the commonly used BIND (or named) DNS server.
    Let's get on with building our internal DNS server using that application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于常用的BIND（或命名）DNS服务器。让我们开始构建我们的内部DNS服务器使用该应用程序。
- en: 'Basic installation: BIND for internal use'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本安装：用于内部使用的BIND
- en: 'As you would expect, installing `bind`, the most popular DNS server in Linux,
    is as simple as this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的，安装`bind`，Linux上最流行的DNS服务器，就是这么简单：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Look at the `/etc/bind/named.conf` file. In older versions, the application
    configuration was all in this one monolithic configuration file, but in newer
    versions it''s simply composed of three `include` lines, as illustrated in the
    following code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`/etc/bind/named.conf`文件。在旧版本中，应用程序配置都在这一个庞大的配置文件中，但在新版本中，它只是由三个`include`行组成，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Edit `/etc/bind/named.conf.options`, and add the following options—be sure
    to use `sudo` as you need admin rights to change any of the configuration files
    for `bind`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`/etc/bind/named.conf.options`，并添加以下选项—确保使用`sudo`因为你需要管理员权限来更改`bind`的任何配置文件：
- en: Allow queries from the list of local subnets. In this example, we're allowing
    all subnets in *RFC 1918*, but you should restrict this to the subnets you have
    in your environment. Note that we're using classless subnet masking to minimize
    the number of entries in this section.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许来自本地子网列表的查询。在这个例子中，我们允许所有*RFC 1918*中的子网，但你应该将其限制在你的环境中拥有的子网。请注意，我们使用无类别子网掩码来最小化这一部分的条目数量。
- en: Define the listening port (this is correct by default).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义监听端口（默认情况下是正确的）。
- en: Enable recursive queries.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用递归查询。
- en: Define a list of DNS forwarders for recursion to work. In this example, we'll
    add Google and Cloudflare for DNS forwarding.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义递归工作的DNS转发器列表。在这个例子中，我们将添加谷歌和Cloudflare作为DNS转发。
- en: 'Once done, our configuration file should look something like this. Note that
    it really is an almost "plain language" configuration—there''s no mystery about
    what any of these sections mean:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们的配置文件应该看起来像这样。请注意，这确实是一个几乎是“普通语言”的配置—对于这些部分的含义没有任何神秘之处：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, edit `/etc/bind/named.conf.local`, and add the server type, zone, and
    zone filename. Also, permit workstations on the specified subnets to register
    their DNS records with the DNS server using the `allow-update` parameter, as illustrated
    in the following code snippet:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑`/etc/bind/named.conf.local`，并添加服务器类型、区域和区域文件名。此外，允许指定子网上的工作站使用`allow-update`参数向DNS服务器注册其DNS记录，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `zone` file itself, where the DNS records are all stored, is not located
    in the same place as these first two `config` files. To edit the `zone` file,
    edit `/var/cache/bind/<zone file name>`—so, in this example, it''s `/var/cache/bind/coherentsecurity.com.zone`.
    You''ll again need `sudo` access to edit this file. Make the following changes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`zone`文件本身，其中存储了所有的DNS记录，不在与这前两个`config`文件相同的位置。要编辑`zone`文件，编辑`/var/cache/bind/<zone
    file name>`—所以，在这个例子中，是`/var/cache/bind/coherentsecurity.com.zone`。你需要`sudo`权限来编辑这个文件。做出以下更改：'
- en: Add records as needed.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要添加记录。
- en: Update the `SOA` line with your zone and name server's FQDN.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用你的区域和域名服务器的FQDN更新`SOA`行。
- en: If needed, update the `TTL` value in the last line in the `SOA` record—the default
    is `86400` seconds (24 hours). This is usually a good compromise as it favors
    caching of records across multiple servers. If you are doing any DNS maintenance,
    though, you might want to edit the file the day before (that is, 24 hours or more
    prior to maintenance) and shorten this to 5 or 10 minutes so that your changes
    aren't delayed due to caching.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，在`SOA`记录的最后一行更新`TTL`值—默认值是`86400`秒（24小时）。这通常是一个很好的折衷方案，因为它有利于在多个服务器上缓存记录。但是，如果你正在进行任何DNS维护，你可能希望在维护前一天（即维护前24小时或更长时间）编辑文件，并将其缩短到5或10分钟，以避免由于缓存而延迟你的更改。
- en: Update the `ns` record, which identifies the DNS server(s) for your domain.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`ns`记录，它标识了你域的DNS服务器。
- en: Add `A` record as needed—these identify the IP addresses for each host. Note
    that for `A` records, we're only using the **common name** (**CN**) for each host,
    not the FQDN name, which would include the domain.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要添加`A`记录—这些标识每个主机的IP地址。请注意，对于`A`记录，我们只使用每个主机的**通用名称**（**CN**），而不是包括域的FQDN名称。
- en: 'Once done, our DNS zone file should look something like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们的DNS区域文件应该看起来像这样：
- en: '![Figure 6.2 – An example DNS zone file'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 一个DNS区域文件示例'
- en: '](img/B16336_06_002.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16336_06_002.jpg)'
- en: Figure 6.2 – An example DNS zone file
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 一个DNS区域文件示例
- en: As we discussed earlier, in an internal DNS zone it's often desirable to have
    clients register themselves in DNS. This allows administrators to reach clients
    by name rather than having to determine their IP addresses. This is a simple edit
    to the `named.conf` file (or, more likely, the applicable included child file).
    Note that this requires us to add `192.168.122.0/24` (defining that whole subnet)
    would likely be more common. A corporate "supernet" that defines the entire company
    is also commonly seen—for instance, `10.0.0.0/8` or `192.168.0.0/16`—but for security
    reasons this is not usually recommended; you likely don't actually need devices
    auto-registering in *every* subnet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，在内部DNS区域中，通常希望客户端在DNS中注册自己。这允许管理员通过名称而不是确定其IP地址来访问客户端。这是对`named.conf`文件（或更可能是适用的包含的子文件）的简单编辑。请注意，这要求我们添加`192.168.122.0/24`（定义整个子网）可能更常见。通常也会看到定义整个公司的企业“超网”，例如`10.0.0.0/8`或`192.168.0.0/16`，但出于安全原因，这通常不建议；您可能实际上不需要设备在*每个*子网中自动注册。
- en: 'In the applicable zone, add the following lines of code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在适用的区域中，添加以下代码行：
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There are a few scripts that will check your work—one for the basic configuration
    and included files, and another for the zone. `named-checkconf` will not return
    any text if there is no error, and `named-checkzone` will give you some `OK` status
    messages, as shown next. If you run these and don''t see errors, you should be
    at least OK enough to start the service. Note that the `named-checkzone` command
    wraps to the next line in the following code example. Errors in the `bind` configuration
    files are common—such as missing semicolons, for instance. These scripts will
    be very specific about issues found, but if they error out and you need more information,
    the log file for these commands (`bind` for `bind` itself) is the standard `/var/log/syslog`
    file, so look there next:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些脚本可以检查您的工作——一个用于基本配置和包含的文件，另一个用于区域。如果没有错误，`named-checkconf`将不返回任何文本，而`named-checkzone`将给出一些`OK`状态消息，如下所示。如果您运行这些并且没有看到错误，那么至少应该足够开始服务。请注意，`named-checkzone`命令在以下代码示例中换行到下一行。`bind`配置文件中的错误很常见——例如缺少分号。这些脚本将非常具体地指出发现的问题，但如果它们出现错误并且您需要更多信息，则这些命令的日志文件（`bind`本身的`bind`）是标准的`/var/log/syslog`文件，因此请在那里查找：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, enable the `bind9` service and start it (or restart it if you are
    "pushing" an update) by running the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过运行以下命令启用`bind9`服务并启动它（或者如果您正在“推送”更新，则重新启动它）：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We''re now able to resolve hostnames in our zone, using the DNS server on our
    local host, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在能够使用本地主机上的DNS服务器解析我们区域中的主机名，方法如下：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Because recursion and forwarders are in place, we can also resolve hosts on
    the public internet, like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于递归和转发器已经就位，我们也可以解析公共互联网上的主机，就像这样：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With our internal DNS server completed and working, let's look at our internet-facing
    DNS, which will allow people to resolve our company's resources from the public
    internet.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完成并运行我们的内部DNS服务器后，让我们看看我们面向互联网的DNS，这将允许人们从公共互联网解析我们公司的资源。
- en: 'BIND: Internet-facing implementation specifics'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BIND：面向互联网的实现细节
- en: Before we start, this configuration is not nearly as common as it once was.
    Going back to the 1990s or earlier, if you wanted people to get to your web server,
    the most common approach was to stand up your own DNS server or to use one provided
    by your ISP. In either case, any DNS changes were manual file edits.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，这种配置已经不像以前那样常见了。回到20世纪90年代或更早，如果您想让人们访问您的Web服务器，最常见的方法是建立自己的DNS服务器或使用由您的ISP提供的DNS服务器。在任何一种情况下，任何DNS更改都是手动文件编辑。
- en: In more recent times, it's much more common to host your DNS services with your
    DNS registrar. This "cloud" approach leaves the security implementation to that
    DNS provider and also simplifies maintenance, as the various providers usually
    give you a web interface to maintain your zone file. The key security consideration
    in this model is that you will want a provider that gives you the option to enable
    **multi-factor authentication** (**MFA**) (for instance, using Google Authenticator
    or similar) to guard against **credential stuffing** attacks against your administrative
    access. It's also worth researching your registrar's account recovery procedures—what
    you don't want is to go through all the work of implementing MFA to then have
    an attacker steal that too with a simple helpdesk call to your DNS registrar!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在更近的时代，更常见的是将DNS服务托管给DNS注册商。这种“云”方法将安全实施留给DNS提供商，并简化了维护，因为各种提供商通常会给您一个Web界面来维护您的区域文件。在这种模型中的关键安全考虑是，您将希望提供商为您提供启用**多因素身份验证**（**MFA**）的选项（例如，使用Google
    Authenticator或类似工具），以防范针对您的管理访问的**凭证填充**攻击。还值得研究您的注册商的帐户恢复程序——您不希望经过所有实施MFA的工作，然后让攻击者通过简单的求助电话来窃取它！
- en: 'All that being said, many organizations still do have a good use case for implementing
    their own DNS servers, so let''s get on with modifying the configuration we have
    from our previous section for use as an internet DNS server, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，许多组织仍然有充分的理由实施自己的DNS服务器，因此让我们继续修改我们在上一节中使用的配置，以用作互联网DNS服务器，方法如下：
- en: '`etc/bind/named.conf.options`, we''ll want to add some form of rate limiting—in
    the case of DNS, this is the RRL algorithm.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etc/bind/named.conf.options`，我们将要添加某种速率限制——在DNS的情况下，这是RRL算法。'
- en: 'However, keep in mind that this has the possibility to deny service to legitimate
    queries. Let''s add a `responses-per-second` value of `10` as a preliminary rate
    limit but set it to a status of `log-only`. Let it run in `log-only` mode for
    some period of time, and adjust the per-second rate up or down until you are comfortable
    that you have a value that is low enough to prevent aggressive attacks but high
    enough that you won''t deny access during legitimate operations. The log file
    to monitor during this process is, as mentioned previously, `/var/log/syslog`.
    When you are happy with your values, remove the `log-only` line. Once in operation,
    be sure to monitor for any situations that trigger this setting—this can be easily
    done in your logging or **Security Information and Event Management** (**SIEM**)
    solution with simple keyword matching. The code is illustrated in the following
    snippet:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，请记住，这有可能拒绝合法查询的服务。让我们将`responses-per-second`值设置为`10`作为初步速率限制，但将其设置为`log-only`状态。让它在`log-only`模式下运行一段时间，并调整每秒速率，直到你确信你有一个足够低以防止激进攻击但又足够高以在合法操作期间不拒绝访问的值。在此过程中要监视的日志文件，如前面提到的，是`/var/log/syslog`。当你对你的值感到满意时，删除`log-only`行。一旦开始运行，请确保监视任何触发此设置的情况——这可以在你的日志记录或**安全信息和事件管理**（**SIEM**）解决方案中通过简单的关键字匹配轻松完成。代码如下所示：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`/etc/bind/named.conf.options`. In addition, remove the forwarders line completely.
    The code is shown here:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/bind/named.conf.options`。此外，完全删除forwarders行。代码如下所示：'
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`allow-query` line to reflect that, as follows:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`allow-query`行修改为如下内容：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have DNS servers for both our internal users and our internet clients,
    which tools might we use to troubleshoot this service?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们既有内部用户的DNS服务器，又有互联网客户端的DNS服务器，我们可以使用哪些工具来排查这项服务？
- en: DNS troubleshooting and reconnaissance
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS故障排除和侦察
- en: 'The main tool in Linux to troubleshoot DNS services is `dig`, which comes pre-installed
    in almost all Linux distributions. If you don''t have `dig` in your distribution,
    you can install it with `apt-get install dnsutils`. The use of this tool is pretty
    simple, as can be seen here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中用于排查DNS服务的主要工具是`dig`，它几乎在所有Linux发行版中预装。如果你的发行版中没有`dig`，你可以用`apt-get install
    dnsutils`来安装它。这个工具的使用非常简单，可以在这里看到：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, to find name server records for a company (we''ll check `sans.org`), we''ll
    make an `ns` query against `sans.org`, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要查找公司（我们将检查`sans.org`）的名称服务器记录，我们将对`sans.org`进行`ns`查询，如下所示：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This has a lot of commented information—knowing which DNS flags are set, as
    well as the exact operation of the DNS question and answer, can be very valuable,
    and that information is all in this default output. However, it''s also common
    to want a "just the facts" output—to get this, we''ll add a second parameter,
    `+short`, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含了很多注释信息——知道哪些DNS标志被设置，以及DNS问题和答案的确切操作，都是非常有价值的信息，而这些信息都在默认输出中。然而，通常也希望得到一个“只有事实”的输出——为了得到这个，我们将添加第二个参数`+short`，如下所示：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `dig` command allows us to make any DNS queries we like. You can only query
    one target with one DNS query at a time, though, so to get **NS** information
    (relating to the **name server**) and **mail exchanger** (**MX**) information,
    you would need two queries. The MX query is shown here:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`dig`命令允许我们进行任何我们喜欢的DNS查询。然而，你一次只能查询一个目标，所以要获取**NS**信息（与**名称服务器**相关）和**邮件交换器**（**MX**）信息，你需要进行两次查询。MX查询如下所示：'
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Which other tools can we use to troubleshoot, and which other DNS implementations
    might be involved?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用哪些其他工具来进行故障排除，还有哪些其他DNS实现可能会涉及？
- en: DoH
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DoH
- en: '**DoH** is a newer DNS protocol; as the name implies, it is carried over HTTPS,
    and in fact, the DNS queries and responses are similar in form to an **application
    programming interface** (**API**). This new protocol was supported first in many
    browsers rather than natively in mainstream operating systems. It is, however,
    now available on most mainstream operating systems, just not enabled by default.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**DoH**是一种较新的DNS协议；顾名思义，它是通过HTTPS传输的，实际上，DNS查询和响应在形式上类似于**应用程序编程接口**（**API**）。这个新协议最初在许多浏览器中得到支持，而不是在主流操作系统中本地支持。然而，现在它已经在大多数主流操作系统上可用，只是默认情况下没有启用。'
- en: 'In order to verify a DoH server remotely, the `curl` (a pun on "*see url*")
    tool can do the job nicely. In the following example, we''re querying against
    Cloudflare''s name server:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了远程验证DoH服务器，`curl`（一个关于“*查看url*”的双关语）工具可以很好地完成这项工作。在以下示例中，我们正在对Cloudflare的名称服务器进行查询：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that the query is simply an `https` request formed as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，查询只是一个形式如下的`https`请求：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The HTTP header in the request is `accept: application/dns-json`. Notice that
    this query is using standard HTTPS, so it''s listening on port `tcp/443`, not
    on the regular `udp/53` and `tcp/53` DNS ports.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '请求中的HTTP头是`accept: application/dns-json`。请注意，这个查询使用标准的HTTPS，因此它监听在端口`tcp/443`上，而不是常规的`udp/53`和`tcp/53`
    DNS端口。'
- en: 'We can make the command output much more readable by piping it through `jq`.
    This simple query shows the flags—the DNS question, answer, and authority stanzas—in
    the output. Note in the following code snippet that the `RD` flag (which stands
    for `RA` flag (which stands for **Recursion Available**) is set by the server:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`jq`将命令输出变得更易读。这个简单的查询显示了输出中的标志——DNS问题、答案和授权部分。请注意在以下代码片段中，服务器设置了`RD`标志（代表`RA`标志（代表**递归可用**）：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Network Mapper** (**Nmap**) can also be used to verify the certificate on
    a remote DoH server, as illustrated in the following code snippet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络映射器**（**Nmap**）也可以用来验证远程DoH服务器上的证书，如下面的代码片段所示：'
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'However, Nmap does not currently come with a script that will verify DoH itself
    by making an actual DoH query. To fill that gap, you can download such a script
    here: https://github.com/robvandenbrink/dns-doh.nse.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Nmap目前没有附带一个脚本，可以通过实际进行DoH查询来验证DoH本身。为了填补这个空白，你可以在这里下载这样一个脚本：https://github.com/robvandenbrink/dns-doh.nse。
- en: 'This script verifies that the port is servicing HTTP requests using the Lua
    `http.shortport` operator, then constructs the query string, and then makes the
    HTTPS request using the correct header. A full write-up of this tool is available
    here: https://isc.sans.edu/forums/diary/Fun+with+NMAP+NSE+Scripts+and+DOH+DNS+over+HTTPS/27026/.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本通过Lua `http.shortport`操作符验证端口是否正在服务HTTP请求，然后构造查询字符串，然后使用正确的标头进行HTTPS请求。此工具的完整说明可在此处找到：https://isc.sans.edu/forums/diary/Fun+with+NMAP+NSE+Scripts+and+DOH+DNS+over+HTTPS/27026/。
- en: With DoH thoroughly explored, which other protocols do we have available to
    validate and encrypt our DNS requests and responses?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在彻底探索DoH之后，我们还有哪些其他协议可用于验证和加密我们的DNS请求和响应？
- en: DoT
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DoT
- en: '`tcp/853`, which means it won''t conflict with DNS (`udp/53` and `tcp/53`)
    or DoH (`tcp/443`)—all three services can be run on the same host if the DNS server
    application supports all three.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`tcp/853`，这意味着它不会与DNS（`udp/53`和`tcp/53`）或DoH（`tcp/443`）发生冲突—如果DNS服务器应用程序支持所有三种服务，则这三种服务都可以在同一主机上运行。'
- en: DoT name resolution is supported on most modern operating systems (as a client).
    It's not always running by default, but it's available to enable if not.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代操作系统（作为客户端）支持DoT名称解析。它并不总是默认运行，但如果需要，可以启用它。
- en: 'Verifying a DoT server remotely is as simple as using Nmap to verify that `tcp/853`
    is listening, as illustrated in the following code snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 远程验证DoT服务器就像使用Nmap验证`tcp/853`是否在监听一样简单，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The open port `tcp/853` is flagged as `domain-s` (DNS over `-sV`) shown in
    the preceding code snippet does show the `DNSStatusRequestTCP` string in the response,
    which is a nice clue that this port is in fact running DoT. Since it''s DoT, we
    can also use Nmap to again verify the certificate that''s validating the DoT service,
    as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中显示的标记为`domain-s`（DNS over `-sV`）的开放端口`tcp/853`显示了响应中的`DNSStatusRequestTCP`字符串，这是一个很好的线索，表明该端口实际上正在运行DoT。由于它是DoT，我们还可以使用Nmap再次验证验证DoT服务的证书，如下所示：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That's about as far as we can go with the tools we've discussed up to now. The
    `dig` tool (at this time) does not support making DoT queries. However, the `knot-dnsutils`
    package gives us an "almost `dig`" command-line tool—`kdig`. Let's use this tool
    to explore DoT a bit more.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们到目前为止讨论的工具所能达到的程度。`dig`工具（目前）不支持进行DoT查询。但是，`knot-dnsutils`软件包为我们提供了一个“几乎与`dig`相同”的命令行工具—`kdig`。让我们使用这个工具来更深入地探索DoT。
- en: knot-dnsutils
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: knot-dnsutils
- en: '`knot-dnsutils` is a Linux package that includes the `kdig` tool. `kdig` duplicates
    what the `dig` tool does but then also adds additional features, which include
    support for DoT queries. To start using this tool, we''ll first have to install
    the `knot-dnsutils` package, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`knot-dnsutils`是一个包含`kdig`工具的Linux软件包。`kdig`复制了`dig`工具的功能，但还添加了其他功能，包括对DoT查询的支持。要开始使用这个工具，我们首先必须安装`knot-dnsutils`软件包，如下所示：'
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that the install is completed, the `kdig` utility is, as mentioned, very
    much like the `dig` command, with a few extra command-line parameters—let''s make
    a DoT query to illustrate this, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，`kdig`实用程序与`dig`命令非常相似，只是增加了一些额外的命令行参数—让我们进行DoT查询以说明这一点，如下所示：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Which new parameters did we use?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了哪些新参数？
- en: 'The `debug` parameter (`-d`) gives us all the preceding lines that include
    the `DEBUG` string. Given that most people would be using `kdig` because of its
    TLS support, those `DEBUG` lines give us some excellent information that we might
    often want while testing a new service. Without the `debug` parameter, our output
    would be much more "`dig`-like", as illustrated in the following code snippet:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`debug`参数（`-d`）给出了包括`DEBUG`字符串的所有前面的行。鉴于大多数人可能会使用`kdig`因为它支持TLS，这些`DEBUG`行为我们提供了一些在测试新服务时可能经常需要的优秀信息。如果没有`debug`参数，我们的输出将更像是`dig`，如下面的代码片段所示：'
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `+short` parameter shortens the output to a "just the facts" display, just
    as in `dig`. Without this, the output would include all sections (not just the
    "answer" section), as illustrated in the following code snippet:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`+short`参数将输出缩短为“只有事实”显示，就像`dig`一样。如果没有这个参数，输出将包括所有部分（不仅仅是“答案”部分），如下面的代码片段所示：'
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The new parameters that we used are listed here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的新参数列在此处：
- en: The `+tls-ca` parameter enforces TLS validation—in other words, it verifies
    the certificate. By default, the system **certificate authority** (**CA**) list
    is used for this.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+tls-ca`参数强制执行TLS验证—换句话说，它验证证书。默认情况下，系统使用**证书颁发机构**（**CA**）列表进行此操作。'
- en: Adding `+tls-hostname` allows you to specify the hostname for TLS negotiation.
    By default, the DNS server name is used, but in our case the server name is `8.8.8.8`—and
    you need a valid hostname that appears in the **CN** or **subject alternative
    name** (**SAN**) list for TLS to negotiate correctly. So, this parameter allows
    you to specify that name independent of what is used in the server name field.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`+tls-hostname`允许您指定TLS协商的主机名。默认情况下，使用DNS服务器名称，但在我们的情况下，服务器名称是`8.8.8.8`—您需要一个出现在TLS正确协商的**CN**或**主题备用名称**（**SAN**）列表中的有效主机名。因此，此参数允许您独立于服务器名称字段中使用的内容指定该名称。
- en: Adding `+tls-sni` adds the **Server Name Indication** (**SNI**) field in the
    request, which is required by many DoT servers. This may seem odd, as the SNI
    field is there to allow an HTTPS server to present multiple certificates (each
    for a different HTTPS site).
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`+tls-sni`在请求中添加了**服务器名称指示**（**SNI**）字段，这是许多DoT服务器所必需的。这可能看起来有点奇怪，因为SNI字段是为了允许HTTPS服务器呈现多个证书（每个用于不同的HTTPS站点）。
- en: 'What happens if you don''t use any of these parameters, and you just use `kdig`
    the way you''d use `dig`? By default, `kdig` doesn''t force the verification of
    a certificate against the FQDN you specify, so it''ll typically just work, as
    illustrated in the following code snippet:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用这些参数，只是像使用`dig`一样使用`kdig`会发生什么？默认情况下，`kdig`不会强制验证证书与您指定的FQDN是否匹配，因此它通常会正常工作，如下面的代码片段所示：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: However, it's a good idea to use TLS the way it was intended, with verification—after
    all, the point is to add another layer of trust into your DNS results. If you
    don't verify the server, all you've done is encrypt the query and response. You
    can't verify without specifying the correct hostname either in the server name
    field or in the TLS hostname field (this value needs to match the certificate
    parameters). Forcing certificate validation is important since this ensures that
    the DNS server is the one you really want to query (that is, your traffic hasn't
    been intercepted) and that the response has not been tampered with in its journey
    back to the client.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好按照TLS的原意使用它，进行验证——毕竟，重点是在DNS结果中添加另一层信任。如果您不验证服务器，那么您所做的就是加密查询和响应。如果不在服务器名称字段或TLS主机名字段中指定正确的主机名，您就无法进行验证（此值需要与证书参数匹配）。强制证书验证很重要，因为这样可以确保DNS服务器是您真正想要查询的服务器（即，您的流量没有被拦截），并且响应在返回客户端的过程中没有被篡改。
- en: Now that we understand how DoT works, how can we troubleshoot it or find out
    whether a DNS host has DoT implemented?
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们了解了DoT的工作原理，那么我们如何进行故障排除或查明DNS主机是否已实施DoT呢？
- en: Implementing DoT in Nmap
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Nmap中实施DoT
- en: Similar to the DoH Nmap example, implementing DoT in Nmap allows you to do DoT
    discovery and queries at a much larger scale, rather than one at a time. Given
    the complexities of making HTTPS calls in Nmap, an easy way to accomplish this
    is to simply call `kdig` from within the Nmap script, using the `os.execute` function
    in Lua.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与DoH Nmap示例类似，实施DoT在Nmap中允许您以更大的规模进行DoT发现和查询，而不是一次一个。考虑到在Nmap中进行HTTPS调用的复杂性，一个简单的方法就是在Nmap脚本中直接调用`kdig`，使用Lua中的`os.execute`函数来完成这个任务。
- en: Another key difference is that instead of testing the target port for the `http`
    function (using the `shortport.http` test), we're using the `shortport.ssl` test
    to verify any open port found for SSL/TLS capabilities; since if it isn't servicing
    valid TLS requests, it can't very well be DoT, can it?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键区别是，我们不是测试`http`功能的目标端口（使用`shortport.http`测试），而是使用`shortport.ssl`测试来验证SSL/TLS功能的任何开放端口；因为如果它不能提供有效的TLS请求服务，那么它就不能是DoT，对吧？
- en: 'The `dns.dot` tool is available for download here:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`dns.dot`工具可在此处下载：'
- en: https://github.com/robvandenbrink/dns-dot
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: https://github.com/robvandenbrink/dns-dot
- en: 'You can view a full write-up here:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处查看完整的说明：
- en: https://isc.sans.edu/diary/Fun+with+DNS+over+TLS+%28DoT%29/27150
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: https://isc.sans.edu/diary/Fun+with+DNS+over+TLS+%28DoT%29/27150
- en: Which other security mechanisms can we implement on the DNS protocol itself?
    Let's take a look at DNSSEC, the original mechanism to verify DNS responses.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在DNS协议本身上实施哪些其他安全机制？让我们来看看DNSSEC，这是验证DNS响应的原始机制。
- en: DNSSEC
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNSSEC
- en: '`udp/53` and `tcp/53`, as it does not encrypt anything—it just adds fields
    to validate standard DNS operations using signing.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`udp/53`和`tcp/53`，因为它不加密任何内容——它只是添加字段来验证使用签名的标准DNS操作。'
- en: 'You can view the public key for any DNS zone by using the `DNSKEY` parameter
    in `dig`. In the following code example, we''re adding the `short` parameter:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`dig`中的`DNSKEY`参数查看任何DNS区域的公钥。在以下代码示例中，我们添加了`short`参数：
- en: '[PRE27]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To view the `DS` parameter, as illustrated in the following code snippet:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`DS`参数，如下面的代码片段所示：
- en: '[PRE28]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we add the `-d` (debug) parameter and filter to see just the `DEBUG` data,
    we''ll see the following line in the output, which indicates that we''re using
    the same port and protocol as a regular DNS query:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加`-d`（调试）参数并过滤以仅查看`DEBUG`数据，我们将在输出中看到以下行，该行指示我们正在使用与常规DNS查询相同的端口和协议：
- en: '[PRE29]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To make a DNSSEC query, just add `+dnssec` to the `dig` command line, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行DNSSEC查询，只需在`dig`命令行中添加`+dnssec`，如下所示：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: DNSSEC is all about authenticating DNS requests between clients and servers,
    and between servers as requests are relayed. As we've seen, it's implemented by
    the owners of any particular zone, to allow requesters to verify that the DNS
    "answers" they are getting are correct. However, because of its complexity and
    reliance on certificates, it just hasn't seen the uptake that DoT and DoH have.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: DNSSEC主要是关于在客户端和服务器之间，以及在中继请求时服务器之间对DNS请求进行认证。正如我们所看到的，它是由任何特定区域的所有者实施的，以允许请求者验证他们得到的DNS“答案”是否正确。然而，由于其复杂性和对证书的依赖，它并没有像DoT和DoH那样被广泛采用。
- en: As we've seen, DoT and DoH focus on personal privacy, encrypting the individual
    DNS requests that a person makes as they go about their business. While this encryption
    makes those DNS requests more difficult to capture as they are made, those requests
    are still recorded on the DNS servers themselves. Also, if an attacker is in a
    position to collect a person's DNS requests, they are also in a position to simply
    record which sites they visit (by IP address).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，DoT和DoH专注于个人隐私，加密个人进行业务时所做的每个DNS请求。虽然这种加密使得这些DNS请求更难以捕获，但这些请求仍然记录在DNS服务器上。此外，如果攻击者能够收集个人的DNS请求，他们也能够简单地记录他们访问的站点（按IP地址）。
- en: All that being said, we won't delve into the depths of DNSSEC, mostly because
    as an industry we've made that same decision and (for the most part) have chosen
    not to implement it. However, you definitely do see it from time to time, especially
    when working through a problem involving DNS, so it's important to know what it
    looks like and why it might be implemented.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们不会深入研究DNSSEC的深度，主要是因为作为一个行业，我们已经做出了同样的决定，并且（在大多数情况下）选择不实施它。然而，您确实会不时地看到它，特别是在解决涉及DNS的问题时，因此了解它的外观以及为什么可能会实施它是很重要的。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With our discussion on DNS drawing to a close, you should now have the tools
    available to build a basic internal DNS server and a standard DNS server facing
    the internet. You should also have the basic tools to start securing these services
    by editing the various configuration files for the Linux `bind` or named service.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们对DNS的讨论接近尾声，您现在应该有了构建基本内部DNS服务器和面向互联网的标准DNS服务器的工具。您还应该具备开始通过编辑Linux `bind`或命名服务的各种配置文件来保护这些服务的基本工具。
- en: In addition, you should have some familiarity with troubleshooting various DNS
    services, using tools such as `dig`, `kdig`, `curl`, and `nmap`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该熟悉使用`dig`、`kdig`、`curl`和`nmap`等工具来排除各种DNS服务的故障。
- en: In our next chapter, we'll continue on with a discussion on DHCP, which—as we've
    seen in this chapter—is definitely separate, but still can be related to DNS.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续讨论DHCP，正如我们在本章中所看到的，它确实是分开的，但仍然与DNS有关。
- en: Questions
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是一些问题列表，供您测试对本章材料的了解。您将在*附录*的*评估*部分找到答案。
- en: How does DNSSEC differ from DoT?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNSSEC与DoT有何不同？
- en: How does DoH differ from "regular" DNS?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DoH与“常规”DNS有何不同？
- en: Which features would you implement on an internal DNS server over an external
    DNS server?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会在内部DNS服务器上实现哪些功能，而不是在外部DNS服务器上实现？
- en: Further reading
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more on the subject:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于这个主题的信息：
- en: '**Definitive DNS references**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权威DNS参考**'
- en: 'Basic DNS has literally dozens of RFCs that define the service as well as best
    practices for implementation. A good list of these RFCs can be found here: https://en.wikipedia.org/wiki/Domain_Name_System#RFC_documents.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 基本DNS实际上有数十个定义服务以及实施最佳实践的RFC。这里可以找到这些RFC的一个好列表：https://en.wikipedia.org/wiki/Domain_Name_System#RFC_documents。
- en: 'However, if you need more detail on DNS and are looking for a more readable
    guide through the protocol and implementation details than the RFCs (emphasis
    on "readable"), many consider Cricket Liu''s books to be an excellent next step:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您需要更多关于DNS的详细信息，并且正在寻找比RFC更易读的协议和实施细节的指南（重点是“易读”），许多人认为Cricket Liu的书是一个很好的下一步：
- en: '*DNS and BIND* by Cricket Liu and Paul Albitz:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*Cricket Liu和Paul Albitz的DNS和BIND*：'
- en: https://www.amazon.ca/DNS-BIND-Help-System-Administrators-ebook/dp/B0026OR2QS/ref=sr_1_1?dchild=1&keywords=dns+and+bind+cricket+liu&qid=1614217706&s=books&sr=1-1
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: https://www.amazon.ca/DNS-BIND-Help-System-Administrators-ebook/dp/B0026OR2QS/ref=sr_1_1?dchild=1&keywords=dns+and+bind+cricket+liu&qid=1614217706&s=books&sr=1-1
- en: '*DNS and BIND on IPv6* by Cricket Liu:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*Cricket Liu的IPv6上的DNS和BIND*：'
- en: https://www.amazon.ca/DNS-BIND-IPv6-Next-Generation-Internet-ebook/dp/B0054RCT4O/ref=sr_1_3?dchild=1&keywords=dns+and+bind+cricket+liu&qid=1614217706&s=books&sr=1-3
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: https://www.amazon.ca/DNS-BIND-IPv6-Next-Generation-Internet-ebook/dp/B0054RCT4O/ref=sr_1_3?dchild=1&keywords=dns+and+bind+cricket+liu&qid=1614217706&s=books&sr=1-3
- en: '**DNS UPDATE (Auto-registration)**'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS更新（自动注册）**'
- en: '*RFC 2136*: *Dynamic Updates in the Domain Name System (DNS UPDATE)*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 2136*：*域名系统（DNS UPDATE）中的动态更新*：'
- en: https://tools.ietf.org/html/rfc2136
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: https://tools.ietf.org/html/rfc2136
- en: '**Authenticated DNS registration in Active Directory (AD)**'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Active Directory（AD）中的经过身份验证的DNS注册**'
- en: '*RFC 3645*: *Generic Security Service Algorithm for Secret Key Transaction
    Authentication for DNS (GSS-TSIG)*:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 3645*：*用于DNS的秘密密钥事务认证的通用安全服务算法（GSS-TSIG）*：'
- en: https://tools.ietf.org/html/rfc3645
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: https://tools.ietf.org/html/rfc3645
- en: '**DoH**'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DoH**'
- en: '*Fun with NMAP NSE Scripts and DOH (DNS over HTTPS):* https://isc.sans.edu/forums/diary/Fun+with+NMAP+NSE+Scripts+and+DOH+DNS+over+HTTPS/27026/'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用NMAP NSE脚本和DOH（HTTPS上的DNS）玩乐*：https://isc.sans.edu/forums/diary/Fun+with+NMAP+NSE+Scripts+and+DOH+DNS+over+HTTPS/27026/'
- en: 'DoH Nmap script: https://github.com/robvandenbrink/dns-doh.nse'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: DoH Nmap脚本：https://github.com/robvandenbrink/dns-doh.nse
- en: '*RFC 8484*: *DNS Queries over HTTPS (DoH):* https://tools.ietf.org/html/rfc8484'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 8484*：*HTTPS上的DNS查询（DoH）*：https://tools.ietf.org/html/rfc8484'
- en: '`dns-dot` Nmap script: https://isc.sans.edu/diary/Fun+with+DNS+over+TLS+%28DoT%29/27150'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dns-dot` Nmap脚本：https://isc.sans.edu/diary/Fun+with+DNS+over+TLS+%28DoT%29/27150'
- en: '*RFC 7858*: *Specification for DNS over Transport Layer Security (TLS):* https://tools.ietf.org/html/rfc7858'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 7858*：*传输层安全性（TLS）上的DNS规范*：https://tools.ietf.org/html/rfc7858'
- en: '**DNSSEC**'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNSSEC**'
- en: '*Domain Name System Security Extensions (DNSSEC):* https://www.internetsociety.org/issues/dnssec/'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*域名系统安全扩展（DNSSEC）*：https://www.internetsociety.org/issues/dnssec/'
- en: '*RFC 4033*: *DNS Security Introduction and Requirements:* https://tools.ietf.org/html/rfc4033'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 4033*：*DNS安全介绍和要求*：https://tools.ietf.org/html/rfc4033'
- en: '*RFC 4034*: *Resource Records for the DNS Security Extensions:* https://tools.ietf.org/html/rfc4034'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 4034*：*DNS安全扩展的资源记录*：https://tools.ietf.org/html/rfc4034'
- en: '*RFC 4035*: *Protocol Modifications for the DNS Security Extensions:* https://tools.ietf.org/html/rfc4035'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 4035*：*DNS安全扩展的协议修改*：https://tools.ietf.org/html/rfc4035'
- en: '*RFC 4470*: *Minimally Covering NSEC Records and DNSSEC On-line Signing:* https://tools.ietf.org/html/rfc4470'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 4470*：*最小覆盖NSEC记录和DNSSEC在线签名*：https://tools.ietf.org/html/rfc4470'
- en: '*RFC 4641*: *DNSSEC Operational Practices:* https://tools.ietf.org/html/rfc4641'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 4641*：*DNSSEC操作实践*：https://tools.ietf.org/html/rfc4641'
- en: '*RFC 5155*: *DNS Security (DNSSEC) Hashed Authenticated Denial of Existence:*
    https://tools.ietf.org/html/rfc5155'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 5155*：*DNS安全（DNSSEC）哈希认证否定存在*：https://tools.ietf.org/html/rfc5155'
- en: '*RFC 6014*: *Cryptographic Algorithm Identifier Allocation for DNSSEC:* https://tools.ietf.org/html/rfc6014'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 6014*：*DNSSEC的加密算法标识符分配*：https://tools.ietf.org/html/rfc6014'
- en: '*RFC 4398*: *Storing Certificates in the Domain Name System (DNS):* https://tools.ietf.org/html/rfc4398'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '*RFC 4398*：*在域名系统（DNS）中存储证书*：https://tools.ietf.org/html/rfc4398'
