["```\n$ uname -r\n5.0.0-36-generic \n```", "```\nmajor#.minor#[.patchlevel][-EXTRAVERSION]\n```", "```\n$ git log --date-order --graph --tags --simplify-by-decoration --pretty=format:'%ai %h %d'\n* 2019-11-24 16:32:01 -0800 219d54332a09  (tag: v5.4)\n* 2019-11-17 14:47:30 -0800 af42d3466bdc  (tag: v5.4-rc8)\n* 2019-11-10 16:17:15 -0800 31f4f5b495a6  (tag: v5.4-rc7)\n* 2019-11-03 14:07:26 -0800 a99d8080aaf3  (tag: v5.4-rc6)\n* 2019-10-27 13:19:19 -0400 d6d5df1db6e9  (tag: v5.4-rc5)\n* 2019-10-20 15:56:22 -0400 7d194c2100ad  (tag: v5.4-rc4)\n* 2019-10-13 16:37:36 -0700 4f5cafb5cb84  (tag: v5.4-rc3)\n* 2019-10-06 14:27:30 -0700 da0c9ea146cb  (tag: v5.4-rc2)\n* 2019-09-30 10:35:40 -0700 54ecb8f7028c  (tag: v5.4-rc1)\n* 2019-09-15 14:19:32 -0700 4d856f72c10e  (tag: v5.3)\n* 2019-09-08 13:33:15 -0700 f74c2bb98776  (tag: v5.3-rc8)\n* 2019-09-02 09:57:40 -0700 089cf7f6ecb2  (tag: v5.3-rc7)\n* 2019-08-25 12:01:23 -0700 a55aa89aab90  (tag: v5.3-rc6)\n[...]\n```", "```\n$ curl -L https://www.kernel.org/finger_banner The latest stable version of the Linux kernel is: 5.10.4\nThe latest mainline version of the Linux kernel is: 5.11-rc2\nThe latest stable 5.10 version of the Linux kernel is: 5.10.4\nThe latest stable 5.9 version of the Linux kernel is: 5.9.16 (EOL)\nThe latest longterm 5.4 version of the Linux kernel is: 5.4.86\nThe latest longterm 4.19 version of the Linux kernel is: 4.19.164\nThe latest longterm 4.14 version of the Linux kernel is: 4.14.213\nThe latest longterm 4.9 version of the Linux kernel is: 4.9.249\nThe latest longterm 4.4 version of the Linux kernel is: 4.4.249\nThe latest linux-next version of the Linux kernel is: next-20210105\n$ \n```", "```\nwget --https-only -O ~/Downloads/linux-5.4.0.tar.xz https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.4.0.tar.xz\n```", "```\ngit clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n```", "```\ngit clone --depth=3 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n```", "```\n$ cd ~/Downloads ; ls -lh linux-5.4.tar.xz\n-rw-rw-r-- 1 llkd llkd 105M Nov 26 08:04 linux-5.4.tar.xz\n```", "```\ntar xf ~/Downloads/linux-5.4.tar.xz\n```", "```\nmkdir -p ~/kernels\ntar xf ~/Downloads/linux-5.4.tar.xz --directory=${HOME}/kernels/\n```", "```\nexport LLKD_KSRC=${HOME}/kernels/linux-5.4\n```", "```\n$ head Makefile\n# SPDX-License-Identifier: GPL-2.0\nVERSION = 5\nPATCHLEVEL = 4\nSUBLEVEL = 0\nEXTRAVERSION =\nNAME = Kleptomaniac Octopus\n\n# *DOCUMENTATION*\n# To see a list of typical targets execute \"make help\"\n# More info can be located in ./README\n$\n```", "```\n$ scripts/get_maintainer.pl -f drivers/android/ Greg Kroah-Hartman <gregkh@linuxfoundation.org> (supporter:ANDROID DRIVERS)\n\"Arve Hj\u00f8nnev\u00e5g\" <arve@android.com> (supporter:ANDROID DRIVERS)\nTodd Kjos <tkjos@android.com> (supporter:ANDROID DRIVERS)\nMartijn Coenen <maco@android.com> (supporter:ANDROID DRIVERS)\nJoel Fernandes <joel@joelfernandes.org> (supporter:ANDROID DRIVERS)\nChristian Brauner <christian@brauner.io> (supporter:ANDROID DRIVERS)\ndevel@driverdev.osuosl.org (open list:ANDROID DRIVERS)\nlinux-kernel@vger.kernel.org (open list)\n$ \n```", "```\n$ cd ${LLKD_KSRC} ; ls arch/\nalpha/ arm64/ h8300/   Kconfig     mips/  openrisc/ riscv/ sparc/ x86/\narc/   c6x/   hexagon/ m68k/       nds32/ parisc/   s390/  um/    xtensa/\narm/   csky/  ia64/    microblaze/ nios2/ powerpc/  sh/    unicore32/\n```", "```\n$ cat init/Kconfig\nconfig DEFCONFIG_LIST\n    string\n    depends on !UML \n    option defconfig_list\n    default \"/lib/modules/$(shell,uname -r)/.config\"\n    default \"/etc/kernel-config\"\n    default \"/boot/config-$(shell,uname -r)\"\n    default ARCH_DEFCONFIG\n    default \"arch/$(ARCH)/defconfig\"\nconfig CC_IS_GCC\n[...]\n```", "```\n\"defconfig_list\"\n    This declares a list of default entries which can be used when\n    looking for the default configuration (which is used when the main\n    .config doesn't exists yet.)\n```", "```\ncp /boot/config-5.0.0-36-generic ${LLKD_KSRC}/.config\n```", "```\nlsmod > /tmp/lsmod.now\ncd ${LLKD_KSRC}\nmake LSMOD=/tmp/lsmod.now localmodconfig\n```", "```\n$ cd ${LKDC_KSRC}         *# root of the kernel source tree*\n$ make help\nCleaning targets:\n clean             - Remove most generated files but keep the config and\n enough build support to build external modules\n mrproper          - Remove all generated files + config + various backup     \n                     files\n distclean         - mrproper + remove editor backup and patch files\n\nConfiguration targets:\n config           - Update current config utilising a line-oriented  \n                    program\n nconfig          - Update current config utilising a ncurses menu based \n                    program\n menuconfig       - Update current config utilising a menu based program\n xconfig          - Update current config utilising a Qt based front-end\n gconfig          - Update current config utilising a GTK+ based front-end\n oldconfig        - Update current config utilising a provided .config as \n                    base\n localmodconfig   - Update current config disabling modules not loaded\n localyesconfig   - Update current config converting local mods to core\n defconfig        - New config with default from ARCH supplied defconfig\n savedefconfig    - Save current config as ./defconfig (minimal config)\n allnoconfig      - New config where all options are answered with no\n allyesconfig     - New config where all options are accepted with yes\n allmodconfig     - New config selecting modules when possible\n alldefconfig     - New config with all symbols set to default\n randconfig       - New config with random answer to all options\n listnewconfig    - List new options\n olddefconfig     - Same as oldconfig but sets new symbols to their\n                    default value without prompting\n kvmconfig        - Enable additional options for kvm guest kernel support\n xenconfig        - Enable additional options for xen dom0 and guest   \n                    kernel support\n tinyconfig       - Configure the tiniest possible kernel\n testconfig       - Run Kconfig unit tests (requires python3 and pytest)\n\nOther generic targets:\n  all             - Build all targets marked with [*]\n[...]\n$\n```", "```\nlsmod > /tmp/lsmod.now\ncd ${LLKD_KSRC} ; make LSMOD=/tmp/lsmod.now localmodconfig\n```", "```\n$ uname -r5.0.0-36-generic $ make LSMOD=/tmp/lsmod.now localmodconfig \nusing config: '/boot/config-5.0.0-36-generic'\nvboxsf config not found!!\nmodule vboxguest did not have configs CONFIG_VBOXGUEST\n*\n* Restart config...\n*\n*\n* General setup\n*\nCompile also drivers which will not load (COMPILE_TEST) [N/y/?] n\nLocal version - append to kernel release (LOCALVERSION) [] \nAutomatically append version information to the version string (LOCALVERSION_AUTO) [N/y/?] n\nBuild ID Salt (BUILD_SALT) [] (NEW) [Enter] Kernel compression mode\n> 1\\. Gzip (KERNEL_GZIP)\n  2\\. Bzip2 (KERNEL_BZIP2)\n  3\\. LZMA (KERNEL_LZMA)\n  4\\. XZ (KERNEL_XZ)\n  5\\. LZO (KERNEL_LZO)\n  6\\. LZ4 (KERNEL_LZ4)\nchoice[1-6?]: 1\nDefault hostname (DEFAULT_HOSTNAME) [(none)] (none)\nSupport for paging of anonymous memory (swap) (SWAP) [Y/n/?] y\nSystem V IPC (SYSVIPC) [Y/n/?] y\n[...]\nEnable userfaultfd() system call (USERFAULTFD) [Y/n/?] y\nEnable rseq() system call (RSEQ) [Y/n/?] (NEW)\n[...]\n  Test static keys (TEST_STATIC_KEYS) [N/m/?] n\n  kmod stress tester (TEST_KMOD) [N/m/?] n\n  Test memcat_p() helper function (TEST_MEMCAT_P) [N/m/y/?] (NEW)\n#\n# configuration written to .config\n#\n$ ls -la .config\n-rw-r--r-- 1 llkd llkd  140764 Mar  7 17:31 .config\n$ \n```", "```\n$ make menuconfig\n UPD scripts/kconfig/.mconf-cfg\n HOSTCC scripts/kconfig/mconf.o\n HOSTCC scripts/kconfig/lxdialog/checklist.o\n HOSTCC scripts/kconfig/lxdialog/inputbox.o\n HOSTCC scripts/kconfig/lxdialog/menubox.o\n HOSTCC scripts/kconfig/lxdialog/textbox.o\n HOSTCC scripts/kconfig/lxdialog/util.o\n HOSTCC scripts/kconfig/lxdialog/yesno.o\n HOSTLD scripts/kconfig/mconf\nscripts/kconfig/mconf Kconfig\n...\n```", "```\n$ make menuconfig\n UPD     scripts/kconfig/.mconf-cfg\n HOSTCC  scripts/kconfig/mconf.o\n YACC    scripts/kconfig/zconf.tab.c\n/bin/sh: 1: bison: not found\nscripts/Makefile.lib:196: recipe for target 'scripts/kconfig/zconf.tab.c' failed\nmake[1]: *** [scripts/kconfig/zconf.tab.c] Error 127\nMakefile:539: recipe for target 'menuconfig' failed\nmake: *** [menuconfig] Error 2\n$\n```", "```\ncd ${LLKD_KSRC}\n```", "```\nlsmod > /tmp/lsmod.now\nmake LSMOD=/tmp/lsmod.now localmodconfig\n```", "```\nmake menuconfig\n```", "```\n<*> Kernel .config support\n[ ]   Enable access to .config through /proc/config.gz (NEW)\n```", "```\n$ grep IKCONFIG .config\nCONFIG_IKCONFIG=y\nCONFIG_IKCONFIG_PROC=y\n$\n```", "```\n$ scripts/diffconfig --help\nUsage: diffconfig [-h] [-m] [<config1> <config2>]\n\nDiffconfig is a simple utility for comparing two .config files.\nUsing standard diff to compare .config files often includes extraneous and\ndistracting information. This utility produces sorted output with only the\nchanges in configuration values between the two files.\n\nAdded and removed items are shown with a leading plus or minus, respectively.\nChanged items show the old and new values on a single line.\n[...]\n```", "```\n$ scripts/diffconfig .config.old .config\n-AX25 n\n-DEFAULT_SECURITY_APPARMOR y\n-DEFAULT_SECURITY_SELINUX n\n-DEFAULT_SECURITY_SMACK n\n[...]\n-SIGNATURE y\n DEBUG_STACK_USAGE n -> y\n DEFAULT_SECURITY_DAC n -> y\n FS_DAX y -> n\n HAMRADIO y -> n\n IKCONFIG m -> y\n IKCONFIG_PROC n -> y\n LOCALVERSION \"\" -> \"-llkd01\"\n MSDOS_FS n -> m\n PROFILING y -> n\n SECURITY y -> n\n UIO n -> m\n+UIO_AEC n\n VBOXGUEST n -> m\n[...]\n$ \n```", "```\ncp init/Kconfig init/Kconfig.orig\n```", "```\nvi init/Kconfig\n```", "```\nmake menuconfig\n[...]\n```", "```\n$ grep \"LLKD_OPTION1\" .config\nCONFIG_LLKD_OPTION1=y\n$ grep \"LLKD_OPTION1\" include/generated/autoconf.h \n$  \n```", "```\nmake -j4\n```", "```\n$ grep \"LLKD_OPTION1\" include/generated/autoconf.h \n#define CONFIG_LLKD_OPTION1 1\n```", "```\nobj-${CONFIG_LLKD_OPTION1}  +=  llkd_option1.o\n```", "```\n#ifdef CONFIG_LLKD_OPTION1\n    do_our_thing();\n#endif\n```", "```\nif (IS_ENABLED(CONFIG_LLKD_OPTION1)) {\n    do_our_thing();\n}\n```", "```\nconfig DEBUG_INFO\n    bool \"Compile the kernel with debug info\"\n    depends on DEBUG_KERNEL && !COMPILE_TEST\n    help\n      If you say Y here the resulting kernel image will include\n      debugging info resulting in a larger kernel image. [...]\n```", "```\nconfig FRAME_WARN\n    int \"Warn for stack frames larger than (needs gcc 4.4)\"\n    range 0 8192\n    default 3072 if KASAN_EXTRA\n    default 2048 if GCC_PLUGIN_LATENT_ENTROPY\n    default 1280 if (!64BIT && PARISC)\n    default 1024 if (!64BIT && !PARISC)\n    default 2048 if 64BIT\n    help\n      Tell gcc to warn at build time for stack frames larger than this.\n      Setting this too low will cause a lot of warnings.\n      Setting it to 0 disables the warning.\n      Requires gcc 4.4\n```", "```\nconfig HAVE_DEBUG_STACKOVERFLOW\n        bool\n\nconfig DEBUG_STACKOVERFLOW\n        bool \"Check for stack overflows\"\n        depends on DEBUG_KERNEL && HAVE_DEBUG_STACKOVERFLOW\n        ---help---\n          Say Y here if you want to check for overflows of kernel, IRQ\n          and exception stacks (if your architecture uses them). This \n          option will show detailed messages if free stack space drops\n          below a certain limit. [...]\n```"]