- en: Chapter 5. Securing Your Installation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。保护您的安装
- en: Of all the things that can happen to your SMTP server, probably the worst is
    having it abused as an open relay—a server that relays mail to third parties without
    your permission. This will consume a lot of bandwidth (which can be costly), eat
    up server resources (possibly slowing down or stopping other services), and can
    be expensive in both time and money. A more serious consequence is that your e-mail
    server will probably end up on one or more blacklists, and any e-mail server that
    refers to those lists will refuse to accept any mail from your server until you
    have proven it to be relay safe. If you need to use e-mail in order to carry out
    business, you will have a big problem.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您的SMTP服务器可能发生的所有事情，最糟糕的可能就是它被滥用为开放中继-一个未经您许可就向第三方中继邮件的服务器。 这将消耗大量带宽（可能会很昂贵），耗尽服务器资源（可能会减慢或停止其他服务），并且在时间和金钱上都可能很昂贵。
    更严重的后果是，您的电子邮件服务器很可能最终会出现在一个或多个黑名单上，任何引用这些列表的电子邮件服务器都将拒绝接受来自您的服务器的任何邮件，直到您证明它是中继安全的。
    如果您需要使用电子邮件来开展业务，您将面临一个大问题。
- en: 'This chapter will explain how to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何：
- en: Protect Postfix from relay abuse
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护Postfix免受中继滥用
- en: Differentiate between statically and dynamically assigned IP addresses
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分静态分配和动态分配的IP地址
- en: Configure relay permissions using Postfix for static IP addresses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Postfix为静态IP地址配置中继权限
- en: Use Cyrus SASL for authentication from unpredictable and dynamic IP addresses
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cyrus SASL进行来自不可预测和动态IP地址的身份验证
- en: Use the Secure Sockets Layer to prevent usernames and passwords from being sent
    in plaintext
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全套接字层防止用户名和密码以明文形式发送
- en: Configure Postfix to defeat or at least slow down dictionary attacks, where
    e-mails are sent to many e-mail addresses within a domain, in the hope that a
    few will reach a valid recipient
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Postfix以打败或至少减缓字典攻击，其中电子邮件发送到域内的许多电子邮件地址，希望其中一些能够到达有效的收件人
- en: Configuring Postfix network maps
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Postfix网络映射
- en: When the Internet was mainly used by academics, no one had to protect their
    mail servers from relay abuse. In fact, not many people had a mail server, and
    so permitting others who did not have an e-mail server to relay e-mail using your
    server was considered a service to them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当互联网主要由学术界使用时，没有人需要保护他们的邮件服务器免受中继滥用。 实际上，没有多少人拥有邮件服务器，因此允许其他没有电子邮件服务器的人使用您的服务器中继电子邮件被视为对他们的服务。
- en: This changed with the advent of people who soon became known as spammers. They
    would abuse open relays to send advertisements to large numbers of remote recipients
    leaving the owner of the mail server to pay for the traffic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着很快就被称为垃圾邮件的人的出现，情况发生了变化。 他们会滥用开放中继向大量远程收件人发送广告，使邮件服务器的所有者为流量付费。
- en: This is when postmasters started to handle relay permissions restrictively.
    They used to permit relaying only for trusted IP addresses, refusing messages
    from other IP addresses. A trusted IP address in this context was an IP address
    that could be associated statically (refer the *Static IP Ranges* section) with
    a host that belonged to a known user, or a range of IP addresses known to belong
    to a trusted network. It worked well as most computers would have static IP addresses
    (the IP address wouldn't change over time).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是邮件管理员开始限制处理中继权限的时候。 他们过去只允许受信任的IP地址进行中继，拒绝来自其他IP地址的消息。 在这种情况下，受信任的IP地址是指可以静态关联（参见*静态IP范围*部分）到属于已知用户的主机的IP地址，或者已知属于受信任网络的IP地址范围。
    这在大多数计算机上运行良好，因为大多数计算机都会有静态IP地址（IP地址不会随时间改变）。
- en: However a new approach had to be found when users became mobile and would use
    dial-up providers to access the Internet and wanted to use a mail server in an
    unknown location. Access providers would give these users dynamic IP addresses,
    that is, their IP address would change every time they dialed in.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当用户变得移动并使用拨号提供商访问互联网并希望在未知位置使用邮件服务器时，必须找到一种新的方法。 接入提供商会给这些用户动态IP地址，也就是说，他们的IP地址每次拨号时都会更改。
- en: 'Suddenly the criteria used to distinguish good users from bad users were gone.
    Postmasters would either have to loosen their relay permissions to permit a whole
    network of potentially untrusted IPs to use the relay, or would have to find another
    way to handle relaying for dynamic IP addresses. Over time, several approaches
    to handle relaying for dynamic IP addresses emerged, such as:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 突然之间，用来区分好用户和坏用户的标准消失了。 邮件管理员要么必须放宽中继权限，允许整个潜在不受信任的IP网络使用中继，要么必须找到另一种处理动态IP地址中继的方法。
    随着时间的推移，出现了几种处理动态IP地址中继的方法，例如：
- en: SMTP-after-POP
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMTP-after-POP
- en: Virtual Private Networks
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟专用网络
- en: SMTP Authentication
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMTP身份验证
- en: All of the three approaches differ in their requirements and how they work.
    The following sections provide more detail on each approach.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种方法在其要求和工作方式上有所不同。 以下各节详细介绍了每种方法。
- en: SMTP-after-POP
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMTP-after-POP
- en: Historically, many internet connections were dial up; if one wished to send
    an e-mail, he/she would have to compose it offline, start the dial-up connection,
    and then tell the e-mail client to "send and receive" mails. In this case, the
    mail client first sends mail (via SMTP) and then checks the server (via POP) to
    see if there is any new mail—the SMTP part happens before the POP part.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，许多互联网连接都是拨号连接； 如果一个人希望发送电子邮件，他/她必须离线撰写邮件，启动拨号连接，然后告诉电子邮件客户端“发送和接收”邮件。
    在这种情况下，邮件客户端首先发送邮件（通过SMTP），然后检查服务器（通过POP）是否有新邮件- SMTP部分发生在POP部分之前。
- en: This makes it impossible for the SMTP server to find out if the sender should
    be permitted to relay, because the dynamic IP is in no relation with any other
    criteria that would make the sender's one a trusted host. ISP's would be able
    to recognize the IP address of the dial-up connection as one of their own, and
    permit relaying. Any connection from outside their own network would typically
    be rejected. For a small organization with users outside the corporate network,
    it is impossible to keep track of all potential valid source IP addresses.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得SMTP服务器无法找出发件人是否应该被允许中继，因为动态IP与使发件人成为受信任主机的任何其他标准无关。ISP将能够识别拨号连接的IP地址作为他们自己的IP地址，并允许中继。来自他们自己网络之外的任何连接通常都会被拒绝。对于一个有着企业网络之外用户的小组织来说，要跟踪所有潜在的有效源IP地址是不可能的。
- en: However, the transactions can be turned on their head, and the checking for
    mail can be performed before sending mail. Checking for mail requires a password,
    which means that the user can be authenticated. Popular e-mail clients can now
    check for e-mail as soon as they are started, and check for new e-mails periodically.
    If the SMTP server can be told that the user at a particular IP address is authenticated
    by the POP server, it can allow relaying. This is the essence of SMTP-after-POP.
    The SMTP server needs to know if a particular IP address has an authentic POP
    user connected to it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，交易可以被颠倒过来，检查邮件可以在发送邮件之前进行。检查邮件需要密码，这意味着用户可以被认证。流行的电子邮件客户端现在可以在启动时检查电子邮件，并定期检查新的电子邮件。如果SMTP服务器可以被告知特定IP地址的用户已通过POP服务器进行了身份验证，它可以允许中继。这就是SMTP-after-POP的本质。SMTP服务器需要知道特定IP地址是否有经过身份验证的POP用户连接到它。
- en: There has to be a time limit on how long the user connection is valid after
    the last connection to the POP server, otherwise a traveling salesman might leave
    a hundred different IP addresses as valid relay hosts a week, one of which might
    later be occupied by a spammer. These days e-mails are often composed while the
    user is online and sent between periodic, automatic checks for new mail. Therefore,
    any composed e-mails sent to the SMTP server will normally be sent within a few
    minutes of a POP3 request, so the time period can be short, typically tens of
    minutes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一次连接到POP服务器之后，用户连接的有效时间必须有一个时间限制，否则一个旅行推销员可能会留下一百个不同的IP地址作为一个星期的有效中继主机，其中一个以后可能被垃圾邮件发送者占用。如今，电子邮件通常是在用户在线时编写的，并在定期自动检查新邮件之间发送。因此，发送到SMTP服务器的任何已编写的电子邮件通常会在进行POP3请求后的几分钟内发送，因此时间段可以很短，通常是几十分钟。
- en: The disadvantages of SMTP-after-POP are that you need a POP server even if you
    only want to allow relaying of messages. A POP server will complicate the setup
    on a server if you don't need it. It might also bind updates of your SMTP server
    to your POP server to keep compatibility. And POP is not a secure method of authentication,
    as it can be spoofed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SMTP-after-POP的缺点是，即使您只想允许中继消息，您也需要一个POP服务器。如果您不需要它，POP服务器将使服务器的设置变得复杂。它还可能将您的SMTP服务器的更新绑定到您的POP服务器以保持兼容性。而且POP不是一种安全的身份验证方法，因为它可以被欺骗。
- en: Virtual Private Networks
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟专用网络
- en: '**Virtual Private Networks** (**VPNs**) assign the client another private IP
    address if authentication to the VPN succeeds. The VPN server will allocate IP
    addresses in a known block. The SMTP server can be configured to permit relaying
    for a mail client coming from a VPN-allocated IP address.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟专用网络**（**VPN**）在验证VPN成功后，为客户端分配另一个私有IP地址。VPN服务器将在已知的区块中分配IP地址。SMTP服务器可以配置为允许来自分配给VPN的IP地址的邮件客户端进行中继。'
- en: Again, running a VPN just for the sake of relaying mails involves a lot of effort.
    It only pays off if additional resources and services are provided via the VPN,
    for example access to shared storage, databases, intranet sites, or applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，仅仅为了中继邮件而运行VPN需要大量的工作。只有在通过VPN提供额外的资源和服务时才会有回报，例如访问共享存储、数据库、内部网站或应用程序。
- en: SMTP Authentication
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMTP身份验证
- en: '**SMTP Authentication**, also known as **SMTP AUTH**, uses a different method
    to identify valid relay users. It requires mail clients to send a username and
    password to the SMTP server during the SMTP dialogue, and if the authentication
    succeeds, they may relay.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**SMTP身份验证**，也称为**SMTP AUTH**，使用不同的方法来识别有效的中继用户。它要求邮件客户端在SMTP对话期间向SMTP服务器发送用户名和密码，如果认证成功，它们可以进行中继。'
- en: It is less complex than running a full-blown POP server or a VPN, and it solves
    the problem where it arises—in the SMTP server. You will learn what it takes to
    offer SMTP AUTH, after you've learned how to configure your server to handle a
    range of trusted static IP addresses.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它比运行一个完整的POP服务器或VPN要简单，而且它解决了在SMTP服务器中出现的问题。学会如何为一系列受信任的静态IP地址配置服务器后，您将了解如何提供SMTP
    AUTH所需的条件。
- en: Static IP ranges
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态IP范围
- en: By default, Postfix will allow only hosts from its own network(s) to relay messages.
    Trustworthy networks are those you configured for your network interfaces. Run
    `ifconfig -a` to get a list of what has been configured on your system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Postfix只允许来自自己的网络的主机中继消息。可信任的网络是您为网络接口配置的网络。运行`ifconfig -a`以获取已在系统上配置的列表。
- en: If you want to change the default, you can either use some generic values using
    the `mynetworks_style` parameter or provide explicit ranges of IP addresses noted
    as values for the `mynetworks` parameter in `main.cf`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改默认设置，您可以使用`mynetworks_style`参数使用一些通用值，或者在`main.cf`中的`mynetworks`参数的值中提供显式的IP地址范围。
- en: Generic relay rules
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用中继规则
- en: To configure generic relay rules, you need to add one of the following values
    to the `mynetworks_style` parameter in `main.cf:`
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置通用中继规则，您需要将以下值之一添加到`main.cf`中的`mynetworks_style`参数中：
- en: '`host:` If you configure `mynetworks_style = host`, Postfix will permit only
    the IP addresses of the host it runs on to send messages to remote destinations.
    If you provide only a webmail interface, this may be acceptable, but no desktop
    clients would be able to connect.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host:` 如果你配置`mynetworks_style = host`，Postfix将只允许它运行的主机的IP地址发送消息到远程目的地。如果你只提供一个webmail界面，这可能是可以接受的，但没有桌面客户端能够连接。'
- en: '`class:` If you configure `mynetworks_style = class`, Postfix will allow every
    host in the network class (Network class A/B/C) it serves to relay. A network
    class specifies a range of IP addresses, either approximately 255 (class C), 65,000
    (class B), or 16,000,000 (class A) addresses.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class:` 如果你配置`mynetworks_style = class`，Postfix将允许它服务的网络类（A/B/C网络类）中的每个主机进行中继。网络类指定了一系列IP地址，大约255个（C类），65000个（B类），或者1600万（A类）地址。'
- en: Explicit relay rules
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式中继规则
- en: Explicit relay rules allow for finer-grained relay permissions. To use this,
    you need to understand the notation used to specify network address ranges. If
    your network spans the range from 192.168.1.0 to 192.168.1.255, then this can
    be specified as 192.168.1.0/24\. The 24 is used as the first 24 bits of the 32-bit
    network address are the same for each client. If you use a DHCP server (for example,
    in your Linux server or a firewall serving a DSL connection), your network address
    range will probably be defined by that device, and you should use appropriate
    values in your Postfix settings. If you allocate IP addresses manually and hard-code
    them, you can either specify each IP address individually as a /32 range, or you
    can ensure that each IP address falls in an easily identifiable range once you
    allocate them. The class A network 10.0.0.0/8, the 16 class B networks in the
    range 172.16.0.0 to 172.31.255.255 and the 256 class C networks in the range 192.168.0.0
    to 192.168.255.255\. These are all available for private network addresses and
    can be used for internal network addresses.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 显式中继规则允许更精细的中继权限。要使用这个，你需要理解用于指定网络地址范围的符号。如果你的网络跨越了从192.168.1.0到192.168.1.255的范围，那么这可以被指定为192.168.1.0/24。24被用作32位网络地址的前24位对于每个客户端都是相同的。如果你使用DHCP服务器（例如，在你的Linux服务器或为DSL连接提供防火墙），你的网络地址范围可能会被该设备定义，并且你应该在你的Postfix设置中使用适当的值。如果你手动分配IP地址并硬编码它们，你可以将每个IP地址单独指定为/32范围，或者你可以确保每个IP地址在你分配它们后落入一个易于识别的范围内。A类网络10.0.0.0/8，B类网络范围在172.16.0.0到172.31.255.255之间的16个，以及C类网络范围在192.168.0.0到192.168.255.255之间的256个。这些都可以用于私人网络地址，并且可以用于内部网络地址。
- en: 'You can add a list of remote and local hosts and/or networks to the `mynetworks`
    parameter in `main.cf`. If you want to permit localhost, all hosts in your LAN
    (in the following example the IP addresses `10.0.0.0` to `10.0.0.254)`, and your
    static IP from home (here `192.0.34.166)` should be noted as a list in CIDR notation
    as shown in this example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`main.cf`的`mynetworks`参数中添加一个远程和本地主机和/或网络的列表。如果你想允许本地主机、LAN中的所有主机（在下面的示例中IP地址为`10.0.0.0`到`10.0.0.254`），以及你家中的静态IP（这里为`192.0.34.166`）作为一个列表以CIDR表示，如下例所示：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you reload Postfix, the new settings will take effect.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你重新加载Postfix，新的设置就会生效。
- en: Dynamic IP ranges
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态IP范围
- en: In the previous section, you saw how to permit relaying for static IP addresses.
    This section will show how you can configure Postfix to permit relaying for dynamic
    IP addresses.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，你看到了如何允许静态IP地址进行中继。本节将展示如何配置Postfix允许动态IP地址进行中继。
- en: Although, as mentioned in this chapter's introduction, there are several ways
    to achieve this, we are only going to describe the method of SMTP authentication.
    It provides a simple and stable mechanism, but the setup is not trivial. The reason
    for this is that SMTP AUTH isn't processed by Postfix on its own. Another software
    module, Cyrus SASL, is required to offer and process SMTP AUTH to mail clients.
    You will need to configure Cyrus SASL, Postfix, and how they interoperate.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如本章介绍中所述，有几种方法可以实现这一点，但我们只会描述SMTP认证的方法。它提供了一个简单而稳定的机制，但设置并不简单。原因是SMTP AUTH并不是由Postfix自己处理的。另一个软件模块Cyrus
    SASL需要提供和处理SMTP AUTH给邮件客户端。你需要配置Cyrus SASL，Postfix以及它们之间的相互操作。
- en: Cyrus SASL
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cyrus SASL
- en: Cyrus SASL ([http://cyrusimap.web.cmu.edu/](http://cyrusimap.web.cmu.edu/))
    is Carnegie Mellon University's implementation of SASL. **SASL** (**Simple Authentication
    and Security Layer**), is an authentication framework described in RFC 2222 ([http://www.ietf.org/rfc/rfc2222.txt](http://www.ietf.org/rfc/rfc2222.txt)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus SASL（[http://cyrusimap.web.cmu.edu/](http://cyrusimap.web.cmu.edu/)）是卡内基梅隆大学对SASL的实现。**SASL**（**简单认证和安全层**），是在RFC
    2222（[http://www.ietf.org/rfc/rfc2222.txt](http://www.ietf.org/rfc/rfc2222.txt)）中描述的认证框架。
- en: SASL was written to provide an application-independent authentication framework
    for any application that needs to use or offer authentication services.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SASL旨在为任何需要使用或提供认证服务的应用程序提供一个与应用程序无关的认证框架。
- en: Cyrus SASL isn't the only SASL available today, but was the first to emerge
    and is used in various applications such as Postfix, Sendmail, Mutt, and OpenLDAP.
    In order to use Cyrus SASL, you need to understand its architecture, how the various
    layers are made to work together, and how the layers' functionalities are configured.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus SASL并不是今天唯一可用的SASL，但它是第一个出现并在各种应用程序中使用的。例如Postfix，Sendmail，Mutt和OpenLDAP。为了使用Cyrus
    SASL，你需要了解它的架构，各个层是如何协同工作的，以及如何配置层的功能。
- en: SASL layers
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SASL层
- en: SASL consists of three layers— **authentication interface, mechanism**, and
    **method**. Each of these takes care of a distinct job when an authentication
    request is being processed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: SASL由三层组成——**认证接口，机制**和**方法**。每个层都在处理认证请求时负责不同的工作。
- en: 'An authentication process usually goes through the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 认证过程通常经历以下步骤：
- en: A client connects to an SASL server.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端连接到SASL服务器。
- en: The server announces its capabilities.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器宣布其能力。
- en: The client recognizes the option to authenticate among the listed capabilities.
    It also recognizes a list of mechanisms it can choose to process authentication.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端识别在列出的功能中进行身份验证的选项。它还识别可以选择以处理身份验证的机制列表。
- en: The client chooses one of the mechanisms and computes a coded message. The exact
    content of the message depends on the mechanism used.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端选择一种机制并计算出一条编码消息。消息的确切内容取决于所使用的机制。
- en: The client sends the command `AUTH <mechanism> <coded message>` to the server.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端向服务器发送命令`AUTH <机制> <编码消息>`。
- en: The server receives the authentication request and hands it over to SASL.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器接收身份验证请求并将其交给SASL。
- en: SASL recognizes the mechanism and decodes the coded message. The decoding depends
    on the mechanism chosen.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SASL识别机制并解码编码的消息。解码取决于所选择的机制。
- en: SASL contacts an authentication backend in order to verify the information given
    by the client. What it exactly looks for, depends on the mechanism used.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SASL联系身份验证后端以验证客户端提供的信息。它确切地寻找什么取决于所使用的机制。
- en: If it can verify the information it will tell the server and the server should
    permit the client to relay a message. If it can't verify the information, it will
    tell the server and the server may reject the client's wish to relay a message.
    In both cases, the server will tell the client whether authentication was successful
    or it failed.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它可以验证信息，它将告诉服务器，服务器应允许客户端中继消息。如果无法验证信息，它将告诉服务器，服务器可能拒绝客户端中继消息。在这两种情况下，服务器都会告诉客户端身份验证是否成功或失败。
- en: Let's take a closer look at the three SASL layers in the following sections.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下部分更仔细地看一下SASL的三个层。
- en: Authentication interface
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份验证接口
- en: In steps 1 to 5 and step 9 that we just discussed, you can see client and server
    exchange data to process authentication. This part of communication takes place
    in the authentication interface.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚讨论的1到5步和第9步中，您可以看到客户端和服务器交换数据以处理身份验证。这部分通信发生在身份验证接口中。
- en: Though SASL defines what data must be exchanged, it does not specify how it
    must be communicated between the client and the server. It leaves this to their
    specific communication protocol, which is why SASL can be used by various services
    such as SMTP, IMAP, or LDAP.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管SASL定义了必须交换的数据，但它并没有指定数据在客户端和服务器之间如何通信。它将这留给它们特定的通信协议，这就是为什么SASL可以被各种服务使用，如SMTP、IMAP或LDAP。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'SASL is not as old as the SMTP protocol (see: RFC 821). It was added later
    in RFC 2554 ([http://www.ietf.org/rfc/rfc2554.txt](http://www.ietf.org/rfc/rfc2554.txt)),
    which describes the **SMTP Service Extension for Authentication**.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SASL并不像SMTP协议那样古老（参见：RFC 821）。它是后来在RFC 2554中添加的（[http://www.ietf.org/rfc/rfc2554.txt](http://www.ietf.org/rfc/rfc2554.txt)），该文档描述了**SMTP身份验证的服务扩展**。
- en: 'An SMTP conversation where the server offers SMTP authentication among its
    other capabilities looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器提供SMTP身份验证以及其他功能的SMTP对话如下：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`250-AUTH PLAIN LOGIN CRAM-MD5 DIGEST-MD5 1):` This line tells the client that
    the server offers `SMTP AUTH`. It consists of two logical parts. The first part,
    `250-AUTH`, announces `SMTP AUTH` capability and the rest of the line is a list
    of available mechanisms from which the client may choose the one it prefers.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`250-AUTH PLAIN LOGIN CRAM-MD5 DIGEST-MD5 1):` 这一行告诉客户端服务器提供`SMTP AUTH`。它由两个逻辑部分组成。第一部分`250-AUTH`宣布了`SMTP
    AUTH`的功能，行的其余部分是客户端可以选择其首选项的可用机制的列表。'
- en: '`250-AUTH=PLAIN LOGIN CRAM-MD5 DIGEST-MD5 2):` This line repeats the line above,
    but differs in the way it announces SMTP authentication. Instead of whitespace
    after `250-AUTH`, it adds an equal sign like this `250-AUTH=`. This is for broken
    clients that do not follow the final specification of SASL.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`250-AUTH=PLAIN LOGIN CRAM-MD5 DIGEST-MD5 2):` 这一行重复了上面的行，但在宣布SMTP身份验证的方式上有所不同。在`250-AUTH`之后，它添加了一个等号，就像这样`250-AUTH=`。这是为了那些不遵循SASL最终规范的损坏客户端。'
- en: Mechanism
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机制
- en: Mechanisms (as described in steps 4 through 7) represent the second layer of
    SASL. They determine the verification strategy used during authentication. There
    are several mechanisms known to SASL. They differ in how they transmit data and
    their level of security during transmission. The most commonly used mechanisms
    can be grouped into **plaintext** and **shared secret** mechanisms.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 机制（如步骤4到7中描述的）代表SASL的第二层。它们确定身份验证期间使用的验证策略。SASL已知有几种机制。它们在传输数据的方式和传输过程中的安全级别上有所不同。最常用的机制可以分为**明文**和**共享密钥**机制。
- en: One mechanism you should never have Postfix offer to clients is the **anonymous**
    mechanism. We will have a look at this first.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您永远不应该让Postfix向客户端提供的一种机制是**匿名**机制。我们将首先看一下这个。
- en: '`anonymous:` The anonymous mechanism requires a client to send any string it
    wants to. It was designed to allow anonymous access to, say, global IMAP folders,
    but not for SMTP. An SMTP server offering `ANONYMOUS` in the AUTH line will eventually
    be abused. You should never offer this in an SMTP server! Postfix does not offer
    anonymous access in out of the box configuration.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anonymous:` 匿名机制要求客户端发送任何它想要的字符串。它旨在允许匿名访问全局IMAP文件夹，但不适用于SMTP。在AUTH行中提供`ANONYMOUS`的SMTP服务器最终会被滥用。您不应该在SMTP服务器中提供这个选项！Postfix在默认配置中不提供匿名访问。'
- en: '`plaintext:` Cyrus SASL knows the **PLAIN** and **LOGIN** plaintext mechanisms.
    `LOGIN` is pretty much the same as `PLAIN`, but is used for mail clients that
    don''t follow the final SASL RFC by the books, such as Outlook and Outlook Express.
    Both mechanisms require the client to calculate a Base64 encoded string of the
    username and password and transmit it to the sever for authentication. The great
    thing about plaintext mechanisms is that they are supported by nearly every mail
    client in use today. The bad news is that plaintext mechanisms are not secure
    if used without **Transport Layer Security** (**TLS**). This is because a Base64
    encoded string is merely encoded, but not encrypted—it can easily be decoded.
    It is safe though to use plaintext mechanisms to transmit one during a Transport
    Layer encrypted session. However, if you use TLS, it will protect the Base64 encoded
    string from eavesdroppers.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plaintext:` Cyrus SASL知道**PLAIN**和**LOGIN**明文机制。`LOGIN`与`PLAIN`几乎相同，但用于不完全遵循最终SASL
    RFC的邮件客户端，如Outlook和Outlook Express。这两种机制都要求客户端计算用户名和密码的Base64编码字符串，并将其传输到服务器进行认证。明文机制的好处是几乎每个现在使用的邮件客户端都支持它们。坏消息是，如果在没有**传输层安全性**（**TLS**）的情况下使用明文机制，它们是不安全的。这是因为Base64编码的字符串只是编码，而不是加密——它很容易被解码。但是，在传输层加密会话期间使用明文机制传输一个是安全的。然而，如果使用TLS，它将保护Base64编码的字符串免受窃听者的侵害。'
- en: '`shared secret:` The shared secret mechanisms available in Cyrus SASL are **CRAM-MD5**
    and **DIGEST-MD5**. Shared secret based authentication has a totally different
    strategy to verify a client. It is based upon the assumption that client and server
    both share a secret. A client choosing a shared secret mechanism will only tell
    the server the name of the specific shared secret mechanism. The server will then
    generate a challenge, based on their secret and send it to the client. The client
    then generates a response, proving that it knows the secret. During the whole
    authentication process neither a username nor a password is sent over the wire.
    That''s why shared secret mechanisms are a lot more secure than the ones mentioned
    before. However, the most popular mail clients Outlook and Outlook Express do
    not support shared secret mechanisms.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared secret:` Cyrus SASL中可用的共享密钥机制有**CRAM-MD5**和**DIGEST-MD5**。基于共享密钥的身份验证具有完全不同的策略来验证客户端。它基于客户端和服务器都共享一个秘密的假设。选择共享密钥机制的客户端只会告诉服务器特定的共享密钥机制的名称。然后，服务器将生成一个基于他们的秘密的挑战，并将其发送给客户端。然后客户端生成一个响应，证明它知道这个秘密。在整个认证过程中，既不会发送用户名也不会发送密码。这就是为什么共享密钥机制比之前提到的机制更安全。然而，最受欢迎的邮件客户端Outlook和Outlook
    Express不支持共享密钥机制。'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On a heterogeneous network, you will probably end up offering plaintext and
    shared secret mechanisms side by side.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在异构网络上，您可能最终会同时提供明文和共享密钥机制。
- en: Now that the mechanisms have been covered, there's only one layer left—the method
    layer. This is where lookups to data stores that hold credentials are configured
    and processed. The next section will tell you more about methods.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经介绍了机制，只剩下一层——方法层。这是配置和处理保存凭据的数据存储的查找的地方。下一节将告诉您更多关于方法的信息。
- en: Method
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: 'The last layer SASL refers to is the method layer. Methods are represented
    by libraries in the Cyrus SASL install directory. They serve to access data stores,
    which Cyrus SASL not only refers to as methods but also as authentication backends.
    Out of the number of methods SASL has, the most commonly used are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: SASL所指的最后一层是方法层。方法由Cyrus SASL安装目录中的库表示。它们用于访问数据存储，Cyrus SASL不仅将其称为方法，还将其称为认证后端。在SASL拥有的许多方法中，最常用的是：
- en: '`rimap:` The `rimap` method stands for **remote IMAP** and enables SASL to
    log in to an IMAP server. It uses the username and password given by the client.
    A successful IMAP login is a successful SASL authentication.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rimap:` `rimap`方法代表**远程IMAP**，使SASL能够登录到IMAP服务器。它使用客户端提供的用户名和密码。成功的IMAP登录是成功的SASL认证。'
- en: '`ldap:` The `ldap` method queries an LDAP server to verify a username and password.
    If the query succeeds the authentication succeeds.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ldap:` `ldap`方法查询LDAP服务器以验证用户名和密码。如果查询成功，则认证成功。'
- en: '`kerberos:` The `kerberos` method uses the popular Kerberos method, and checks
    a Kerberos ticket.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kerberos:` `kerberos`方法使用流行的Kerberos方法，并检查Kerberos票证。'
- en: '`Getpwent/shadow:` The `getpwent` and `shadow` methods access your system''s
    local user password databases to verify an authentication request.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Getpwent/shadow:` `getpwent`和`shadow`方法访问系统的本地用户密码数据库，以验证认证请求。'
- en: '`pam:` The `pam` method accesses any PAM module you configure in your PAM settings
    to verify an authentication request.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pam:` `pam`方法访问您在PAM设置中配置的任何PAM模块，以验证认证请求。'
- en: '`sasldb:` The `sasldb` method reads and even writes to Cyrus SASL''s own database
    called sasldb2\. Usually this database is used in conjunction with Cyrus IMAP,
    but you can use it without the IMAP server.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sasldb:` `sasldb`方法读取甚至写入Cyrus SASL的名为sasldb2的数据库。通常，此数据库与Cyrus IMAP一起使用，但也可以在没有IMAP服务器的情况下使用。'
- en: '`sql:` This method uses SQL queries to access various SQL servers. Currently
    these are MySQL, PostgreSQL, and SQLite.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql:` 此方法使用SQL查询来访问各种SQL服务器。目前支持的有MySQL、PostgreSQL和SQLite。'
- en: Now that you know about the three layers of the SASL architecture, it's time
    to take a look at the SASL service that handles all the requests between them.
    It is called the **password verification service** and will be described in the
    following section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了SASL架构的三个层，是时候来看看处理它们之间所有请求的SASL服务了。它被称为**密码验证服务**，将在接下来的部分中进行描述。
- en: Password verification service
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码验证服务
- en: A password verification service handles an incoming authentication request from
    a server, does mechanism-specific calculations, calls a method to query an authentication
    backend, and finally returns the result to the server that sent the authentication
    request.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 密码验证服务处理来自服务器的认证请求，进行特定于机制的计算，调用方法查询认证后端，最终将结果返回给发送认证请求的服务器。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the case of Postfix, the server that hands over the authentication request
    is the `smtpd` daemon. In the *Postfix SMTP AUTH configuration* section you will
    learn how you can configure the `smtpd` daemon to choose the right password verification
    service.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Postfix的情况下，处理认证请求的服务器是`smtpd`守护程序。在*Postfix SMTP AUTH配置*部分，您将学习如何配置`smtpd`守护程序以选择正确的密码验证服务。
- en: 'Cyrus SASL version 2.1.23, the latest version at the moment, provides us with
    three different password verification services:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus SASL 2.1.23版本，目前的最新版本，为我们提供了三种不同的密码验证服务：
- en: '`saslauthd`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saslauthd`'
- en: '`auxprop`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auxprop`'
- en: '`authdaemond`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authdaemond`'
- en: Mechanisms that your mail clients may use successfully and the methods that
    Cyrus SASL can access during authentication depend on the password verification
    service you tell Postfix to use.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您的邮件客户端可能成功使用的机制以及Cyrus SASL在认证期间可以访问的方法取决于您告诉Postfix使用的密码验证服务。
- en: '`saslauthd: saslauthd` is a standalone daemon. It can be run as root, which
    gives it the privileges needed to access sources accessible to root only. However,
    `saslauthd` is limited in the range of mechanisms it supports; it can handle only
    plaintext mechanisms.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saslauthd：saslauthd`是一个独立的守护程序。它可以作为root运行，这样就具有访问仅限root访问的源所需的特权。但是，`saslauthd`在支持的机制范围上受到限制；它只能处理明文机制。'
- en: '`auxprop: auxprop` is the short name for **auxiliary property plugins**, a
    term used in the Project Cyrus mail server architecture. `auxprop` represents
    a library that is used by the server offering authentication. It accesses sources
    with the privileges of the server that uses it. Unlike `saslauthd, auxprop` can
    handle every mechanism available within the Cyrus SASL authentication framework.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auxprop：auxprop`是**辅助属性插件**的简称，这是Project Cyrus邮件服务器架构中使用的术语。`auxprop`代表一个库，被提供认证的服务器使用。它以使用它的服务器的特权访问源。与`saslauthd`不同，`auxprop`可以处理Cyrus
    SASL认证框架中提供的每种机制。'
- en: '`authdaemond: authdaemond` is a password verification service written especially
    to use Courier''s `authdaemond` as password verifier. This way you can access
    any authentication backend that Courier can deal with. This `auxprop` plugin can
    deal only with plaintext mechanisms.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authdaemond：authdaemond`是一个专门编写的密码验证服务，用于使用Courier的`authdaemond`作为密码验证器。这样，您就可以访问Courier可以处理的任何认证后端。这个`auxprop`插件只能处理明文机制。'
- en: 'The following table gives you an overview of the mechanisms the password verification
    services (methods) can handle:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格为您提供了密码验证服务（方法）可以处理的机制的概述：
- en: '| Method/mechanisms | PLAIN | LOGIN | CRAM-MD5 | DIGEST-MD5 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 方法/机制 | PLAIN | LOGIN | CRAM-MD5 | DIGEST-MD5 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `saslauthd` | yes | yes | no | no |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `saslauthd` | 是 | 是 | 否 | 否 |'
- en: '| `auxprop` | yes | yes | yes | yes |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `auxprop` | 是 | 是 | 是 | 是 |'
- en: '| `authdaemond` | yes | yes | no | no |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `authdaemond` | 是 | 是 | 否 | 否 |'
- en: Only the `auxprop` password verification service is able to handle the more
    secure mechanisms; `saslauthd` and `authdaemond` can process only plaintext mechanisms.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`auxprop`密码验证服务能够处理更安全的机制；`saslauthd`和`authdaemond`只能处理明文机制。
- en: Now we have covered some of the Cyrus SASL theory, it is about time to install
    it. This is exactly what we do in the next sections.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了一些Cyrus SASL理论，现在是时候安装它了。这正是我们在接下来的部分要做的事情。
- en: Installing Cyrus SASL
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Cyrus SASL
- en: 'The chances are that you already have Cyrus SASL on your system. However, various
    Linux distributions have begun to install Cyrus SASL in a different location from
    the typical default one of `/usr/lib/sasl2`. To check if Cyrus SASL is installed
    on your server, either run your package manager and query for `cyrus-sasl` or
    run `find`. A query to the Red Hat package manager (on Fedora Core 11) would return
    something like this if SASL is installed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您的系统上很可能已经安装了Cyrus SASL。但是，各种Linux发行版已经开始将Cyrus SASL安装在与典型默认位置`/usr/lib/sasl2`不同的位置。要检查Cyrus
    SASL是否安装在您的服务器上，可以运行软件包管理器并查询`cyrus-sasl`，或者运行`find`。对于Red Hat软件包管理器（在Fedora Core
    11上）的查询，如果安装了SASL，将返回类似于以下内容：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A query to `dpkg` (on Ubuntu) would return something like this if SASL is installed:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu上的`dpkg`查询，如果安装了SASL，将返回类似于以下内容：
- en: '[PRE3]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A `find` looking for `libsasl*.*` looks like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 查找`libsasl*.*`的结果如下：
- en: '[PRE4]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This proves that you have SASL installed on your system. To verify the location
    of the SASL libraries simply do an `ls` like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明您的系统上已安装了SASL。要验证SASL库的位置，只需像这样运行`ls`：
- en: '![Installing Cyrus SASL](img/8648_05_1.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![安装Cyrus SASL](img/8648_05_1.jpg)'
- en: As mentioned earlier, your distribution might put them somewhere else. In this
    case, the `find` method will locate the correct location, or your distribution's
    documentation should give you this information.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您的发行版可能会将它们放在其他位置。在这种情况下，`find`方法将找到正确的位置，或者您的发行版的文档应该提供这些信息。
- en: If you don't have Cyrus SASL installed, you will have to either use your package
    manager to get it, or install it manually.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装Cyrus SASL，您将需要使用软件包管理器获取它，或者手动安装它。
- en: 'The latest version of Cyrus is normally available to download from [http://cyrusimap.web.cmu.edu/downloads.html](http://cyrusimap.web.cmu.edu/downloads.html).
    To download version 2.1.23 (always choose the latest stable release, not a developer
    release), issue these commands:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus的最新版本通常可以从[http://cyrusimap.web.cmu.edu/downloads.html](http://cyrusimap.web.cmu.edu/downloads.html)下载。要下载2.1.23版本（始终选择最新的稳定版本，而不是开发版本），请执行以下命令：
- en: '[PRE5]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After you have downloaded and unpacked the source files, change into the source
    directory and run `configure`. A typical configuration of the sources goes like
    this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并解压源文件后，进入源目录并运行`configure`。典型的源配置如下：
- en: '[PRE6]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will configure Cyrus SASL to give you plaintext and shared secret mechanisms,
    and will build `saslauthd` and give you the SQL method including support for MySQL
    and PostgreSQL.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置Cyrus SASL以为您提供明文和共享密钥机制，并将构建`saslauthd`并为您提供包括对MySQL和PostgreSQL的支持在内的SQL方法。
- en: After the `configure` script has finished, run `make`, become `root`, and then
    run `make install`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure`脚本完成后，运行`make`，成为`root`，然后运行`make install`。'
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Cyrus SASL will install itself to `/usr/local/lib/sasl2`, but it will expect
    to find the libraries in `/usr/lib/sasl2`. You need to create a symbolic link
    like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus SASL将安装到`/usr/local/lib/sasl2`，但它将期望在`/usr/lib/sasl2`中找到库。您需要创建这样的符号链接：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally you need to check if SASL log messages will be caught and written to
    a log file by `syslogd`. Cyrus SASL logs to the `syslog auth` facility. Check
    your `syslogd` configuration, usually `/etc/syslog.conf`, to see if it contains
    a line that catches auth messages.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要检查SASL日志消息是否会被`syslogd`捕获并写入日志文件。Cyrus SASL记录到`syslog auth`设施。检查您的`syslogd`配置，通常是`/etc/syslog.conf`，看看它是否包含捕获auth消息的行。
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you don't find an entry, add the following, save the file, and restart `syslogd:`
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到条目，请添加以下内容，保存文件，然后重新启动`syslogd`：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once you've got all this done, you are ready to configure SASL.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，您就可以配置SASL了。
- en: Configuring Cyrus SASL
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Cyrus SASL
- en: It is vital that you always configure and test Cyrus SASL before you return
    to Postfix and work on Postfix-specific SMTP AUTH settings.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回到Postfix并处理特定于Postfix的SMTP AUTH设置之前，始终配置和测试Cyrus SASL非常重要。
- en: The reason to follow this procedure is quite simple. An authentication framework
    that cannot authenticate will be of no assistance to any other application using
    it. It's quite possible that you will end up debugging Postfix for hours when
    the problem is Cyrus SASL-related.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循此过程的原因非常简单。一个无法进行身份验证的认证框架对于使用它的任何其他应用程序都没有帮助。当问题与Cyrus SASL相关时，您很可能会花费数小时来调试Postfix。
- en: To understand how and where you must configure SASL, recall that it is an authentication
    framework and was designed to offer its service to many applications. These applications
    might have totally different requirements for not only the password verification
    service to be used but also the mechanisms to be offered, along with the method
    used to access an authentication backend.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解必须在何处以及如何配置SASL，需要记住它是一个认证框架，旨在为许多应用程序提供其服务。这些应用程序可能对要使用的密码验证服务以及要提供的机制以及用于访问认证后端的方法有完全不同的要求。
- en: Cyrus is configured using application-specific files. The configuration for
    each client application is in a separate file. When an application connects to
    the SASL server, it sends its application name. Cyrus uses this name to look for
    the correct configuration file to use.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus是使用特定于应用程序的文件进行配置的。每个客户端应用程序的配置都在单独的文件中。当应用程序连接到SASL服务器时，它会发送其应用程序名称。Cyrus使用此名称来查找要使用的正确配置文件。
- en: In our scenario, the application requiring SMTP AUTH is the `smtpd` daemon within
    Postfix. When it contacts SASL, it not only sends authentication data but also
    its application name, `smtpd`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情景中，需要SMTP AUTH的应用程序是Postfix中的`smtpd`守护程序。当它联系SASL时，它不仅发送认证数据，还发送其应用程序名称`smtpd`。
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The application name `smtpd` is a default value that is sent to Cyrus SASL from
    Postfix. You can change it using the `smtpd_sasl_application_name`, but usually
    this is not required. You need it only if you run different Postfix daemons that
    need different Cyrus SASL configurations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序名称`smtpd`是从Postfix发送到Cyrus SASL的默认值。您可以使用`smtpd_sasl_application_name`进行更改，但通常不需要。只有在运行需要不同Cyrus
    SASL配置的不同Postfix守护程序时才需要。
- en: When Cyrus SASL receives the application name, it will append a `.conf` and
    start to look for a configuration file containing configuration settings.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当Cyrus SASL接收到应用程序名称时，它将附加一个`.conf`并开始查找包含配置设置的配置文件。
- en: By default, the location for `smtpd.conf` is `/usr/lib/sasl2/smtpd.conf` but
    for various reasons some Linux distributions have started to put it in other locations.
    On Debian Linux you will have to create the configuration at `/etc/postfix/sasl/smtpd.conf`.
    Mandrake Linux expects the file to be located at `/var/lib/sasl2/smtpd.conf`.
    All others are known to expect it at `/usr/lib/sasl2/smtpd.conf`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`smtpd.conf`的位置是`/usr/lib/sasl2/smtpd.conf`，但出于各种原因，一些Linux发行版已经开始将其放在其他位置。在Debian
    Linux上，您将不得不在`/etc/postfix/sasl/smtpd.conf`中创建配置。Mandrake Linux希望文件位于`/var/lib/sasl2/smtpd.conf`。所有其他人都知道它应该位于`/usr/lib/sasl2/smtpd.conf`。
- en: 'Check your system and find out if `smtpd.conf` has already been created. If
    not, a simple `touch` command (as root) will create it:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的系统，找出是否已经创建了`smtpd.conf`。如果没有，一个简单的`touch`命令（作为root）将创建它：
- en: '[PRE11]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All of the configuration that follows now will center on `smtpd.conf`. Here''s
    a quick rundown of what we will put in there:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在接下来的所有配置都将集中在`smtpd.conf`上。以下是我们将在其中放置的内容的快速概述：
- en: The name of the password verification service we want to use
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要使用的密码验证服务的名称
- en: The log level at which SASL should send log messages to the log output
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SASL应将日志消息发送到日志输出的日志级别
- en: A list of mechanisms Postfix should advertise when offering SMTP AUTH to clients
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在向客户端提供SMTP AUTH时，Postfix应该宣传的机制列表
- en: Configuration settings specific to the password verification service chosen
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于所选密码验证服务的配置设置
- en: Finally we will configure how the password verification service should access
    the authentication backend. How this needs to be done depends on the password
    verification service we choose and will be explained when we get there.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将配置密码验证服务应如何访问认证后端。这需要根据我们选择的密码验证服务来完成，并将在到达时进行解释。
- en: Selecting a password verification service
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择密码验证服务
- en: 'The first configuration step is to choose the password verification service
    that SASL should use during authentication. The parameter that tells SASL which
    password verification service should handle authentication is `pwcheck_method`.
    The values you may provide are:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步配置是选择SASL在身份验证期间应使用的密码验证服务。告诉SASL应该处理身份验证的密码验证服务的参数是`pwcheck_method`。您可以提供的值是：
- en: '`saslauthd`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saslauthd`'
- en: '`auxprop`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auxprop`'
- en: '`authdaemond`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authdaemond`'
- en: Depending on the password verification service you've chosen, you will have
    to add the correct value. The names should speak for themselves and tell you which
    password verification service will be called. A configuration that would use `saslauthd`
    would add the following line to `smtpd.conf:`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您选择的密码验证服务，您将不得不添加正确的值。名称应该说明情况，并告诉您将调用哪个密码验证服务。使用`saslauthd`的配置将在`smtpd.conf`中添加以下行：
- en: '[PRE12]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Choosing a log level
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择日志级别
- en: Cyrus SASL does not handle logging consistently. What Cyrus SASL will log depends
    on the password verification service and the method that is being used. The parameter
    to define a log level is `log_level`. A reasonable setting during setup would
    be log level 3.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrus SASL的日志处理不一致。Cyrus SASL将记录取决于密码验证服务和正在使用的方法。定义日志级别的参数是`log_level`。在设置期间合理的设置将是日志级别3。
- en: '[PRE13]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This line should be added to `smtpd.conf`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此行应添加到`smtpd.conf`中。
- en: 'Here is a list of all the log levels Cyrus SASL knows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Cyrus SASL知道的所有日志级别的列表：
- en: '| log_level value | Description |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| log_level value | Description |'
- en: '| --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `0` | No logging |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `0` | 无日志 |'
- en: '| `1` | Log unusual errors; this is the default |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `1` | 记录异常错误；这是默认设置 |'
- en: '| `2` | Log all authentication failures |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `2` | 记录所有身份验证失败 |'
- en: '| `3` | Log non-fatal warnings |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `3` | 记录非致命警告 |'
- en: '| `4` | More verbose than 3 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `4` | 比3更详细 |'
- en: '| `5` | More verbose than 4 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `5` | 比4更详细 |'
- en: '| `6` | Log traces of internal protocols |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `6` | 记录内部协议的跟踪 |'
- en: '| `7` | Log traces of internal protocols, including passwords |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `7` | 记录内部协议的跟踪，包括密码 |'
- en: Choosing valid mechanisms
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择有效的机制
- en: Your next step will be to choose the mechanisms that Postfix may offer when
    it advertises SMTP authentication to clients. The parameter in Cyrus SASL to configure
    a list of valid mechanisms is `mech_list`. The names of the mechanisms are exactly
    like the ones we used when we introduced them in the *Mechanism* section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您的下一步将是选择Postfix在向客户端广告SMTP身份验证时可以提供的机制。在Cyrus SASL中配置有效机制列表的参数是`mech_list`。这些机制的名称与我们在*机制*部分中介绍它们时使用的名称完全相同。
- en: It is important to set the `mech_list` parameter and list only the mechanisms
    your password verification service can handle. If you don't do it, Postfix will
    offer all mechanisms SASL provides and authentication will fail if your mail client
    chooses a mechanism that the SASL password verification service cannot handle.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是设置`mech_list`参数，并且只列出您的密码验证服务可以处理的机制。如果不这样做，Postfix将提供SASL提供的所有机制，如果您的邮件客户端选择SASL密码验证服务无法处理的机制，身份验证将失败。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Recall that the password verification services `saslauthd` and `authdaemond`
    can handle only two plaintext mechanisms— `PLAIN` and `LOGIN`. Consequently a
    `mech_list` for those password verification services must hold only the values
    `PLAIN` and `LOGIN`. Any mail client capable of stronger mechanisms will always
    prefer the stronger over the weaker ones. It will do its calculation and send
    the result to the server. The server will fail to authenticate because neither
    `saslauthd` nor `authdaemond` is capable of handling non-plaintext mechanisms.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，密码验证服务`saslauthd`和`authdaemond`只能处理两种明文机制——`PLAIN`和`LOGIN`。因此，这些密码验证服务的`mech_list`必须只包含`PLAIN`和`LOGIN`这两个值。任何能够处理更强机制的邮件客户端都会优先选择更强的机制。它会进行计算并将结果发送给服务器。服务器将无法进行身份验证，因为`Saslauthd`和`authdaemond`都无法处理非明文机制。
- en: The following example would define valid mechanisms for `saslauthd` in `smtpd.conf:`
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将在`smtpd.conf`中为`saslauthd`定义有效机制：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A list of valid mechanisms for any of the `auxprop` password verification services
    could go further and list the following mechanisms:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 任何`auxprop`密码验证服务的有效机制列表可以进一步列出以下机制：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The order of mechanisms in this list has no influence on the mechanism the client
    will choose. Which mechanism is selected depends on the client; it will usually
    choose the one that provides the strongest cryptography.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表中机制的顺序不会影响客户端选择的机制。选择哪种机制取决于客户端；通常会选择提供最强加密的机制。
- en: In the sections that follow, we will take a look at how you configure the password
    verification service to choose an authentication backend and how to provide additional
    information to pick the relevant data. As mentioned before, this is handled differently
    by the three password verification services. We will have a look at each password
    verification service separately.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看看如何配置密码验证服务以选择认证后端，以及如何提供额外信息以选择相关数据。如前所述，这由三个密码验证服务以不同方式处理。我们将分别查看每个密码验证服务。
- en: saslauthd
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: saslauthd
- en: 'Before you can use `saslauthd`, you need to check whether it is able to establish
    a socket in a directory that `saslauthd` refers to as `state dir`. Check this
    carefully because there are two common problems related to the socket:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`saslauthd`之前，您需要检查它是否能够在`saslauthd`称为`state dir`的目录中建立套接字。请仔细检查，因为与套接字相关的两个常见问题是：
- en: '**The directory does not exist:** In this case, `saslauthd` will quit running
    and you will find a log message indicating the missing directory.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**该目录不存在：**在这种情况下，`saslauthd`将停止运行，并且您将找到指示缺少目录的日志消息。'
- en: '**The directory is not accessible to applications other than** `saslauthd:`
    In this case, you will find log messages in the mail log indicating that `smtpd`
    was unable to connect to the socket.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**该目录对于除`saslauthd`之外的应用程序是不可访问的：**在这种情况下，您将在邮件日志中找到指示`smtpd`无法连接到套接字的日志消息。'
- en: 'To get around these problems, you first need to find out where `saslauthd`
    would like to establish the socket. Just fire it up as root, like in the example
    (shown next) and look out for the line that has `run_path` in it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这些问题，您首先需要找出`saslauthd`希望建立套接字的位置。只需像示例中那样以root身份启动它，并寻找包含`run_path`的行：
- en: '[PRE16]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see in the previous example, `saslauthd` would want to access `/var/run/saslauthd`
    as `run_path`. As it cannot access the directory, it quits immediately. Now there
    are two ways to deal with this. It depends whether you acquired `saslauthd` from
    a package or installed it from the source.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，`saslauthd`希望访问`/var/run/saslauthd`作为`run_path`。由于它无法访问该目录，它立即退出。现在有两种方法可以解决这个问题。这取决于您是从软件包中获取`saslauthd`还是从源代码安装它。
- en: In the first case, it is quite likely that the package maintainer built `saslauthd`
    with the default settings; choose a different location as `state dir` and configure
    the `init-script` to override the default path by giving the `-m /path/to/state_dir`
    option.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，软件包维护者很可能使用默认设置构建了`saslauthd`；选择不同的位置作为`state dir`并配置`init-script`以通过给出`-m
    /path/to/state_dir`选项来覆盖默认路径。
- en: 'On Debian systems, you would typically find command-line options in `/etc/default/saslauthd`.
    On Red Hat systems, you would typically find command-line options passed to `saslauthd`
    in `/etc/sysconfig/saslauthd`. The following listing gives you an overview of
    the settings for Fedora Core 2:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian系统中，您通常会在`/etc/default/saslauthd`中找到命令行选项。在Red Hat系统中，您通常会在`/etc/sysconfig/saslauthd`中找到传递给`saslauthd`的命令行选项。以下清单为您提供了Fedora
    Core 2的设置概述：
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Speaking for most Linux distributions, typical locations for the `state dir`
    would be either `/var/state/saslauthd` or `/var/run/saslauthd`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 就大多数Linux发行版而言，`state dir`的典型位置要么是`/var/state/saslauthd`，要么是`/var/run/saslauthd`。
- en: Now consider the case where you built `saslauthd` manually. You should then
    create a directory that matches the value of the `--with-saslauthd` parameter
    you used when you executed the `configure` script.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑手动构建`saslauthd`的情况。然后，您应该创建一个与您在执行`configure`脚本时使用的`--with-saslauthd`参数相匹配的目录。
- en: 'In the SASL configuration example, the value for `--with-saslauthd` was `/var/state/saslauthd`.
    Create this directory and make it accessible to user root and group postfix like
    this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASL配置示例中，`--with-saslauthd`的值为`/var/state/saslauthd`。创建此目录并使其对root用户和postfix组可访问，如下所示：
- en: '[PRE19]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once you have verified `saslauthd` can create a socket and `pid` file in your
    `state dir`, you can start configuring `saslauthd` to access the authentication
    backend of your choice.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您验证了`saslauthd`可以在您的`state dir`中创建套接字和`pid`文件，您可以开始配置`saslauthd`以访问您选择的身份验证后端。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The following examples presume that you don't have to provide an extra run path
    to `saslauthd`. If you need to do so, just add it to the examples given.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例假定您不必为`saslauthd`提供额外的运行路径。如果需要，请将其添加到给出的示例中。
- en: Using an IMAP server as authentication backend
  id: totrans-206
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用IMAP服务器作为身份验证后端
- en: 'Specify the `-a` option together with the value `rimap` to have Cyrus SASL
    log in to an IMAP server with the credentials given by the mail client. Additionally
    you must use the `-O` option to tell `saslauthd` which IMAP server it should turn
    to, like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 指定`-a`选项以及值`rimap`，使Cyrus SASL使用邮件客户端提供的凭据登录到IMAP服务器。此外，您必须使用`-O`选项告诉`saslauthd`它应该转到哪个IMAP服务器，如下所示：
- en: '[PRE20]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Upon successful login into an IMAP server, `saslauthd` will report an authentication
    success to Postfix and Postfix may permit the mail client to hand over the credentials
    to the relay.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录到IMAP服务器后，`saslauthd`将向Postfix报告身份验证成功，Postfix可能允许邮件客户端将凭据交给中继。
- en: Using an LDAP server as authentication backend
  id: totrans-210
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用LDAP服务器作为身份验证后端
- en: Verifying credentials with an LDAP server is a little more complex than with
    an IMAP server. It requires far more configuration and that's why you don't give
    all the options to `saslauthd` on the command line but put them into a configuration
    file instead. By default, `saslauthd` expects the LDAP configuration to be located
    at `/usr/local/etc/saslauthd.conf`. If you choose a different location, you need
    to state it on the command line.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 与IMAP服务器验证凭据比与LDAP服务器验证凭据稍微复杂一些。它需要更多的配置，这就是为什么您不会在命令行上给出所有选项给`saslauthd`，而是将它们放入配置文件中。默认情况下，`saslauthd`期望将LDAP配置位于`/usr/local/etc/saslauthd.conf`。如果选择不同的位置，您需要在命令行上声明它。
- en: '[PRE21]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the previous example, the value `ldap` tells `saslauthd` to turn to an LDAP
    server and the `-O` option provides the path to the configuration file. Your configuration
    file might hold the following parameters:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，值`ldap`告诉`saslauthd`转到LDAP服务器，`-O`选项提供了配置文件的路径。您的配置文件可能包含以下参数：
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you might have expected, you will have to accommodate the settings to suit
    your LDAP tree and other settings specific to your LDAP server. For a complete
    list of all LDAP-related parameters (there are many more than listed here), take
    a look at the `LDAP_SASLAUTHD readme` that comes with the Cyrus SASL sources and
    is located in the `saslauthd` subdirectory.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经预料到的那样，您将不得不调整设置以适应您的LDAP树和其他特定于您的LDAP服务器的设置。要获取所有LDAP相关参数的完整列表（这里列出的远不止这些），请查看随Cyrus
    SASL源代码一起提供的`LDAP_SASLAUTHD readme`，它位于`saslauthd`子目录中。
- en: Using the local user accounts
  id: totrans-216
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用本地用户帐户
- en: This is the configuration that most people use `saslauthd` for. You can either
    configure `saslauthd` to read from the local password file or the local shadow
    password file on systems that support shadow passwords.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大多数人使用`saslauthd`的配置。您可以配置`saslauthd`从本地密码文件或支持影子密码的系统上的本地影子密码文件中读取。
- en: 'To have it read from `/etc/passwd`, use the `-a getpwent` option like this:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`/etc/passwd`中读取，请使用`-a getpwent`选项，如下所示：
- en: '[PRE23]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Most modern Linux distributions do not store passwords in `/etc/passwd`, but
    in `/etc/shadow`. If you want `saslauthd` to read from `/etc/shadow`, run it as
    root like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代Linux发行版不会将密码存储在`/etc/passwd`中，而是存储在`/etc/shadow`中。如果要让`saslauthd`从`/etc/shadow`中读取，请像这样以root身份运行它：
- en: '[PRE24]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using PAM
  id: totrans-222
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用PAM
- en: 'It is also possible to use **PAM (Pluggable Authentication Modules)** as the
    authentication backend, which in turn has to be configured to access other authentication
    backends. Start by running `saslauthd` like this:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用**PAM（可插入认证模块）**作为认证后端，后者又必须配置为访问其他认证后端。首先像这样运行`saslauthd`：
- en: '[PRE25]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then create a `/etc/pam.d/smtp` file or a section in `/etc/pam.conf` and add
    PAM-specific settings to it. If you installed Cyrus SASL from a package, the chances
    are that you already have such a file. For example, on Red Hat it looks like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个`/etc/pam.d/smtp`文件或在`/etc/pam.conf`中添加一个部分，并向其中添加特定于PAM的设置。如果您从软件包中安装了Cyrus
    SASL，那么您很有可能已经有了这样一个文件。例如，在Red Hat上，它看起来像这样：
- en: '[PRE26]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The name of the configuration file must be `smtp`. This has been defined in
    `RFC 2554`, which says that the service name for SASL over SMTP is `smtp`. The
    postfix `smtpd` daemon passes the value `smtp` as the service name to Cyrus SASL.
    `saslauthd` in turn passes it to PAM, which then looks in the `smtp` file for
    authentication instructions.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的名称必须是`smtp`。这在`RFC 2554`中已经定义，其中指出SASL在SMTP上的服务名称是`smtp`。postfix `smtpd`守护程序将`smtp`的值作为服务名称传递给Cyrus
    SASL。然后`saslauthd`将其传递给PAM，后者将在`smtp`文件中查找认证指令。
- en: auxprop
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: auxprop
- en: '**Auxiliary Property Plugins** (or **auxprop)** are configured differently
    from `saslauthd`. Instead of passing command-line options, you simply add auxprop-specific
    settings to your `smtpd.conf`. Any auxprop configuration that you set up in your
    `smtpd.conf` should begin with these three lines:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**辅助属性插件**（或**auxprop)**的配置与`saslauthd`不同。您只需在`smtpd.conf`中添加特定于auxprop的设置，而不是传递命令行选项。您在`smtpd.conf`中设置的任何auxprop配置都应以以下三行开头：'
- en: '[PRE27]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To tell Cyrus SASL which plugin you want to use, you need to add an additional
    parameter to the configuration. The parameter is called `auxprop_plugin` and we
    will examine its use in the following sections.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉Cyrus SASL要使用哪个插件，您需要向配置中添加一个额外的参数。该参数称为`auxprop_plugin`，我们将在以下部分中研究其用法。
- en: Configuring the sasldb plugin
  id: totrans-233
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 配置sasldb插件
- en: The auxprop plugin `sasldb` is the default plugin that Cyrus SASL will use even
    if you don't set the `auxprop_plugin` parameter. `sasldb` is SASL's own database
    that is manipulated with the `saslpasswd2` utility.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: auxprop插件`sasldb`是Cyrus SASL的默认插件，即使您没有设置`auxprop_plugin`参数，它也会使用`sasldb`。`sasldb`是SASL自己的数据库，可以使用`saslpasswd2`实用程序进行操作。
- en: Note
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This tends to irritate people who try to set up a different plugin and have
    something wrong in their configuration. Cyrus SASL will fail if it uses the default
    configuration instead of the desired one. When you get an error message that says
    Cyrus SASL can't locate `sasldb`, it is probably an error in your configuration
    (unless you chose to configure `sasldb` deliberately), and the first step should
    be to check your configuration files.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这往往会激怒那些尝试设置不同插件并在其配置中出现错误的人。如果Cyrus SASL使用默认配置而不是所需的配置，它将失败。当您收到一个错误消息，说Cyrus
    SASL找不到`sasldb`时，这可能是您配置错误的错误（除非您选择故意配置`sasldb`），第一步应该是检查您的配置文件。
- en: To use `sasldb`, first of all you need to create an `sasldb` database. Use the
    following command as root to create an `sasldb2` file and add a user.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`sasldb`，首先需要创建一个`sasldb`数据库。使用以下命令作为root创建一个`sasldb2`文件并添加一个用户。
- en: '[PRE28]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This command will create an `sasldb2` file and will add a user username with
    the realm of `example.com`. It is important that you pay special attention to
    the realm you add, as it will be part of the username the mail client will have
    to send later.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个`sasldb2`文件，并将一个用户名为`example.com`的用户添加到其中。您需要特别注意添加的领域，因为它将成为邮件客户端稍后必须发送的用户名的一部分。
- en: Note
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The realm is part of the concept of Kerberose infrastructure. Kerberose is a
    distributed, encrypted authentication protocol. By adding a realm you can define
    a context (for example, a domain or host) in which the user may do something.
    If you don't add a realm, `saslpasswd2` will add the hostname of your server by
    default.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 领域是Kerberose基础设施概念的一部分。Kerberose是一种分布式的、加密的认证协议。通过添加领域，您可以定义用户可以在其中执行操作的上下文（例如，域或主机）。如果您不添加领域，`saslpasswd2`将默认添加服务器的主机名。
- en: 'Now that you have created the database and added a user, you need to change
    access permissions on `sasldb` to have Postfix access the database as well. Simply
    give access to the group `postfix` to `sasldb2` like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了数据库并添加了一个用户，您需要更改对`sasldb`的访问权限，以便Postfix也可以访问数据库。只需像这样将`postfix`组对`sasldb2`的访问权限：
- en: '[PRE29]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Don''t get confused because the `sasldb` is called `sasldb2`. The format of
    `sasldb` changed when Cyrus SASL major version 2.x came out. For reasons of compatibility,
    the new `sasldb` file is called `sasldb2`. Once you''ve created the database,
    you need to tell Cyrus SASL to use it. Add the `auxprop_plugin` parameter to `smtpd.conf`
    like this:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 不要因为`sasldb`被称为`sasldb2`而感到困惑。当Cyrus SASL主要版本2.x推出时，`sasldb`的格式发生了变化。出于兼容性的原因，新的`sasldb`文件被称为`sasldb2`。创建完数据库后，您需要告诉Cyrus
    SASL使用它。像这样在`smtpd.conf`中添加`auxprop_plugin`参数：
- en: '[PRE30]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'That''s all you need to do and you should be ready to start testing (see the
    *Testing Cyrus SASL authentication* section). If, for any reason, you need to
    put `sasldb` in a location that differs from the default, you can use the following
    additional parameter:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要做的一切，您应该准备好开始测试了（请参阅*测试Cyrus SASL认证*部分）。如果出于任何原因，您需要将`sasldb`放在与默认位置不同的位置，您可以使用以下附加参数：
- en: '[PRE31]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Configuring the sql plugin
  id: totrans-248
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 配置sql插件
- en: The **sql auxprop** plugin is a generic plugin that gives you access to MySQL,
    PostgreSQL, and SQLite. As an example we will show you how to configure the sql
    plugin to access a MySQL database. Configuring access to the other two databases
    is pretty much the same, with one exception that we will note.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**sql auxprop**插件是一个通用插件，可以让您访问MySQL、PostgreSQL和SQLite。我们将以配置sql插件访问MySQL数据库为例进行说明。访问其他两个数据库的配置几乎相同，只有一个我们将注意到的例外。'
- en: First of all, you need to create a database. This, of course, is specific to
    the database you use. Connect to MySQL and create a database if you don't have
    one already.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个数据库。当然，这取决于您使用的数据库。连接到MySQL，如果还没有数据库，则创建一个数据库。
- en: '[PRE32]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then add a table that holds everything you need to SASL-authenticate users.
    It will look similar to this:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加一个包含所有SASL用户身份验证所需内容的表。它看起来类似于这样：
- en: '[PRE33]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The table has fields for username, userrealm, userpassword, and an additional
    field `auth` that we will use later to determine if a user may relay or not. This
    way we can use the table for other authentication purposes as well—for example,
    for granting access to specific folders over `httpd` in conjunction with the `mysql`
    module for Apache.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 该表具有用户名、用户领域、用户密码和一个额外的`auth`字段，我们稍后将使用它来确定用户是否可以中继。这样我们可以将该表用于其他身份验证目的，例如，与Apache的`mysql`模块一起，用于授予对`httpd`上特定文件夹的访问权限。
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget to set a default value for the `userpassword`, as shown in the
    previous example, or all that would be required to get relay permissions would
    be sending a valid username.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记为`userpassword`设置默认值，如前面的示例所示，否则获取中继权限所需的只是发送一个有效的用户名。
- en: 'Once you''ve created the table, add a user like this for testing purposes:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表后，为测试目的添加一个用户，如下所示：
- en: '[PRE34]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then add a user for Postfix to access the database to the user database of
    MySQL like this:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为Postfix添加一个用户，以便访问MySQL的用户数据库，如下所示：
- en: '[PRE35]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once you''re done setting up MySQL, you need to add `sql auxprop-specific`
    parameters to your `smtpd.conf`. The following parameters are available:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 设置MySQL完成后，您需要向`smtpd.conf`添加`sql auxprop-specific`参数。可用的参数如下：
- en: '`sql_engine:` Specifies the database type. You can pick `mysql, pgsql`, or
    `sqlite`. We use `mysql` in this example. If you choose a different database,
    you will need to change this value as appropriate.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_engine:` 指定数据库类型。您可以选择`mysql, pgsql`或`sqlite`。在本示例中，我们使用`mysql`。如果选择不同的数据库，您需要相应地更改此值。'
- en: '`sql_hostnames:` Specifies the database server name. You can specify one or
    more FQDNs or IP addresses separated by commas. Even if you pick `localhost`,
    the SQL engine tries to communicate over a socket.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_hostnames:` 指定数据库服务器名称。您可以指定一个或多个由逗号分隔的FQDN或IP地址。即使选择`localhost`，SQL引擎也会尝试通过套接字进行通信。'
- en: '`sql_database:` Tells Cyrus SASL the name of the database to connect to.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_database:` 告诉Cyrus SASL要连接的数据库的名称。'
- en: '`sql_user:` The value you set here must match the name of the user that connects
    to the database.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_user:` 您在此处设置的值必须与连接到数据库的用户的名称匹配。'
- en: '`sql_passwd:` The value you set here must match the password of the user that
    connects to the database. It must be a plaintext password.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_passwd:` 您在此处设置的值必须与连接到数据库的用户的密码匹配。它必须是明文密码。'
- en: '`sql_select:` The `sql_select` parameter defines the `SELECT` statement to
    authenticate a user.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_select:` `sql_select`参数定义了用于验证用户的`SELECT`语句。'
- en: '`sql_insert:` The `sql_insert` parameter defines an `INSERT` statement that
    would allow Cyrus SASL to create users in the SQL database. You would use the
    `saslpasswd2` program to do so.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_insert:` `sql_insert`参数定义了一个`INSERT`语句，允许Cyrus SASL在SQL数据库中创建用户。您将使用`saslpasswd2`程序来执行此操作。'
- en: '`sql_update:` The `sql_update` parameter defines the `UPDATE` statement that
    would allow Cyrus SASL to modify existing entries in your database. If you choose
    to configure this you will have to use it in combination with the `sql_insert`
    parameter.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_update:` `sql_update`参数定义了`UPDATE`语句，允许Cyrus SASL修改数据库中的现有条目。如果您选择配置此参数，您将不得不与`sql_insert`参数结合使用。'
- en: '`sql_usessl:` You can set either `yes, 1, on`, or `true` to enable SSL to access
    the MySQL over an encrypted connection. By default this option is `off.`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql_usessl:` 您可以设置`yes, 1, on`或`true`来启用SSL以通过加密连接访问MySQL。默认情况下，此选项为`off`。'
- en: 'A straightforward configuration bringing all parameters together would look
    like this:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有参数组合在一起的简单配置如下：
- en: '[PRE36]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As you can see, macros have been used in the `sql_select` statement. Their
    meaning is:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`sql_select`语句中使用了宏。它们的含义是：
- en: '`%u:` This macro is a placeholder for the username that is to be queried for
    during authentication.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%u:` 此宏是要在身份验证期间查询的用户名的占位符。'
- en: '`%p:` This macro is a placeholder for the password.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%p:` 此宏是密码的占位符。'
- en: '`%r:` The `r` stands for realm and whatever was given as realm by the client
    will be inserted at `%r.`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%r:` `r`代表领域，客户端提供的领域将插入到`%r`中。'
- en: '`%v:` This macro is only used in combination with the `sql_update` or `sql_insert`
    statement. It represents the submitted value that should replace an existing value.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%v:` 此宏仅与`sql_update`或`sql_insert`语句结合使用。它表示应替换现有值的提交值。'
- en: Tip
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Take special notice of the notations. Macros must be quoted using single quotation
    marks (').
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意标记。必须使用单引号(')引用宏。
- en: That completes the configuration. If you are using `auxprop` and followed the
    instructions to this point, you are ready to start testing and can skip the next
    section on `authdaemond`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成。如果您使用`auxprop`并按照到此为止的说明进行操作，您已准备好开始测试，并且可以跳过关于`authdaemond`的下一部分。
- en: authdaemond
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: authdaemond
- en: '`authdaemond` was created especially to work together with Courier IMAP. If
    you configure Cyrus SASL to use `authdaemond`, it will connect to Courier authlib''s
    `authdaemond` socket asking Courier authlib to verify the credentials of the mail
    client sent in. On one hand Cyrus SASL benefits from the various backends Courier
    authlib can turn to for user verification, but on the other hand Cyrus SASL''s
    `authdaemond` password verification service is limited to plaintext mechanisms,
    which doesn''t give you the mileage you get when you use `auxprop` plugins.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`authdaemond`是专门为与Courier IMAP配合使用而创建的。如果您配置Cyrus SASL使用`authdaemond`，它将连接到Courier
    authlib的`authdaemond`套接字，询问Courier authlib验证邮件客户端发送的凭据。一方面，Cyrus SASL受益于Courier
    authlib可以用于用户验证的各种后端，但另一方面，Cyrus SASL的`authdaemond`密码验证服务仅限于明文机制，这不如使用`auxprop`插件时所获得的好处多。'
- en: Setting up the authdaemond password verification service is pretty straightforward.
    We will take a look at it in the following sections.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 设置authdaemond密码验证服务非常简单。我们将在接下来的部分中看一下它。
- en: Setting the authdaemond password verification service
  id: totrans-284
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 设置authdaemond密码验证服务
- en: Your first step is to configure Postfix to use the `authdaemond` password verification
    service. Just as with `saslauthd` or `auxprop`, you add the `pwcheck_method` parameter
    to your `smtpd.conf` and choose it to be `authdaemond.`
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一步是配置Postfix以使用`authdaemond`密码验证服务。与`saslauthd`或`auxprop`一样，您将`pwcheck_method`参数添加到您的`smtpd.conf`中，并选择它为`authdaemond`。
- en: '[PRE37]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Due to the limitations of `authdaemond`, you must also limit the list of mechanisms
    to `PLAIN` and `LOGIN`—the only plaintext mechanisms available.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`authdaemond`的限制，您还必须将机制列表限制为`PLAIN`和`LOGIN`——仅有的明文机制。
- en: Configuring the authdaemond socket path
  id: totrans-288
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 配置authdaemond套接字路径
- en: You need to tell Cyrus SASL where it can find the socket that has been created
    by Courier authlib's `authdaemond`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要告诉Cyrus SASL它可以在哪里找到由Courier authlib的`authdaemond`创建的套接字。
- en: Use the `authdaemond_path` parameter to provide the full path including the
    socket name.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`authdaemond_path`参数提供包括套接字名称在内的完整路径。
- en: '[PRE38]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Finally check the permissions of the `authdaemond` directory and verify that
    at least the user `postfix` may access the directory. Once this is done you are
    ready to start testing.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 最后检查`authdaemond`目录的权限，并验证至少用户`postfix`可以访问该目录。完成后，您就可以开始测试了。
- en: Testing Cyrus SASL authentication
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Cyrus SASL身份验证
- en: There are no testing utilities, but you can use the sample applications `sample-server`
    and `sample-client` to test authentication without any other application (example
    Postfix) interfering with the test. If you built Cyrus SASL from source, you can
    find them in the `sample` subdirectory of the Cyrus SASL sources. Fedora-based
    Linux distributions include the samples as part of the `cyrus-sasl-devel` package,
    so if available, you should install that package. Debian-based Linux distributions
    do not have a similar package, so you will now have to build them yourself.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 没有测试工具，但您可以使用示例应用程序`sample-server`和`sample-client`来测试身份验证，而不会有其他应用程序（例如Postfix）干扰测试。如果您从源代码构建了Cyrus
    SASL，您可以在Cyrus SASL源代码的`sample`子目录中找到它们。基于Fedora的Linux发行版将示例包含在`cyrus-sasl-devel`软件包中，因此如果可用，您应该安装该软件包。基于Debian的Linux发行版没有类似的软件包，因此您现在必须自行构建它们。
- en: 'To build just the samples, locate, download, and extract the release of Cyrus
    SASL that matches your installation from your package manager. To locate and install
    the source, follow the instructions as described in the *Cyrus SASL installation*
    section. Then instead of issuing the `make install` command, issue these commands:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅构建示例，请找到、下载并提取与您的软件包管理器安装相匹配的Cyrus SASL版本的发布版。要定位并安装源代码，请按照*Cyrus SASL安装*部分中描述的说明进行操作。然后，不要发出`make
    install`命令，而是发出以下命令：
- en: '[PRE39]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We will use these samples to test the Cyrus SASL configuration we''ve created
    in `smtpd.conf`. However, the programs don''t expect to find their configuration
    in `smtpd.conf`, but in `sample.conf`. We will simply create a symbolic link from
    `sample.conf` to `smtpd.conf` to meet the requirements:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些示例来测试我们在`smtpd.conf`中创建的Cyrus SASL配置。但是，这些程序不希望在`smtpd.conf`中找到它们的配置，而是在`sample.conf`中找到。我们将简单地创建一个从`sample.conf`到`smtpd.conf`的符号链接以满足要求：
- en: '[PRE40]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next we need to start the server application to have it listen for incoming
    connections. Start the server like this:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要启动服务器应用程序以便它监听传入的连接。像这样启动服务器：
- en: '[PRE41]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Do not be concerned about the message `bind: Address already in use`. The fact
    that the server has continued to run indicates that it has managed to listen on
    the specified port. The message is because the application is IPv6 enabled and
    the underlying system does not support IPv6.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '不要担心`bind: Address already in use`的消息。服务器继续运行表明它已经成功监听指定的端口。这是因为应用程序启用了IPv6，而底层系统不支持IPv6。'
- en: 'If you receive an error such as `./server: No such file or directory`, check
    that you have installed the `cyrus-sasl-devel` package from your distribution,
    or that your build from source worked correctly and that you are in the correct
    directory.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您收到类似`./server: No such file or directory`的错误，请检查您是否已从您的发行版安装了`cyrus-sasl-devel`软件包，或者您从源代码构建的工作是否正确，并且您是否在正确的目录中。'
- en: 'The server will listen on port `8000` for incoming connections. Next open a
    new terminal and start the client using the same port and the mechanism `PLAIN`
    and point to `localhost` where your server utility should be listening. When prompted,
    enter `test, test`, and `testpass`, which are valid values provided by the test
    server. A successful authentication looks like this:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将在端口`8000`上监听传入的连接。接下来打开一个新的终端，并使用相同的端口和机制`PLAIN`启动客户端，并指向您的服务器实用程序应该在那里监听的`localhost`。在提示时，输入`test,
    test`和`testpass`，这些是测试服务器提供的有效值。成功的身份验证看起来像这样：
- en: '![Testing Cyrus SASL authentication](img/8648_05_2.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![测试Cyrus SASL身份验证](img/8648_05_2.jpg)'
- en: 'You should be able to see some logging in the `auth` log. If you are going
    to use `saslauthd`, start it on a separate terminal in debug mode and you will
    be able to follow the authentication like this:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在`auth`日志中看到一些日志记录。如果您要使用`saslauthd`，请在调试模式下在单独的终端上启动它，您将能够像这样跟踪身份验证：
- en: '[PRE42]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'saslauthd[4548] :get_accept_lock : acquired accept lock'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 'saslauthd[4548] :get_accept_lock : acquired accept lock'
- en: If you were able to authenticate successfully, proceed to configure `SMTP AUTH`
    in Postfix. If your authentication fails, follow the log and iterate through the
    instructions on how to set up and configure SASL as discussed earlier.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能够成功进行身份验证，请继续配置Postfix中的`SMTP AUTH`。如果您的身份验证失败，请跟随日志并按照之前讨论的设置和配置SASL的说明进行迭代。
- en: Configuring Postfix SMTP AUTH
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Postfix SMTP AUTH
- en: Configuring `SMTP AUTH` in Postfix is pretty straightforward now that you have
    managed to set up and configure Cyrus SASL. The first thing you need to do is
    to check if Postfix was built to support SMTP authentication. Use the `ldd` utility
    to check if the Postfix `smtpd` daemon has been linked to `libsasl:`
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在设置和配置 Cyrus SASL 后，配置 Postfix 中的 `SMTP AUTH` 就变得非常简单了。您需要做的第一件事是检查 Postfix
    是否构建支持 SMTP 身份验证。使用 `ldd` 实用程序检查 Postfix `smtpd` 守护程序是否已链接到 `libsasl`：
- en: '[PRE44]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: If you don't get any output, you will probably have to rebuild Postfix. Read
    the `SASL_README` from the Postfix `README_FILES` directory to get detailed information
    on what you must include in the `CCARGS` and `AUXLIBS` statements.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有任何输出，您可能需要重新构建 Postfix。阅读 Postfix `README_FILES` 目录中的 `SASL_README`，以获取有关必须在
    `CCARGS` 和 `AUXLIBS` 语句中包含的详细信息。
- en: Preparing the configuration
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备配置
- en: Once you've verified that Postfix supports `SMTP AUTH`, you need to verify that
    the `smtpd` daemon does not run `chrooted` while you configure `SMTP AUTH`. Many
    people spend hours with a `chrooted` Postfix that cannot access the `saslauthd`
    socket before they realize that the reason is the `chroot` jail. A Postfix `smtpd`
    daemon that does not run `chrooted` has an `n` in the `chroot` column in `/etc/postfix/master.cf:`
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您验证了 Postfix 支持 `SMTP AUTH`，您需要验证在配置 `SMTP AUTH` 时 `smtpd` 守护程序是否未运行 `chrooted`。许多人在意识到原因是
    `chroot` 监狱之前，花费数小时配置无法访问 `saslauthd` 套接字的 `chrooted` Postfix。不运行 `chrooted` 的
    Postfix `smtpd` 守护程序在 `/etc/postfix/master.cf` 中的 `chroot` 列中有一个 `n`：
- en: '[PRE45]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Reload Postfix if it was running `chrooted` after you changed the `chroot` settings
    for `smtpd` and turn to `main.cf`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Postfix 在更改了 `smtpd` 的 `chroot` 设置后正在运行 `chrooted`，请重新加载它并转到 `main.cf`。
- en: Enabling SMTP AUTH
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 SMTP AUTH
- en: The first thing you will do is enable `SMTP AUTH` by adding the `smtpd_sasl_auth_enable`
    parameter and setting it to `yes:`
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 您要做的第一件事是通过添加 `smtpd_sasl_auth_enable` 参数并将其设置为 `yes` 来启用 `SMTP AUTH`。
- en: '[PRE46]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This will make Postfix offer `SMTP AUTH` to clients that use `ESMTP`, but you
    still need to configure a few settings before you can start testing.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 Postfix 向使用 `ESMTP` 的客户端提供 `SMTP AUTH`，但在开始测试之前，您仍然需要配置一些设置。
- en: Setting the security policy
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置安全策略
- en: 'You will have to decide which mechanisms Postfix should offer using the `smtpd_sasl_security_options`
    parameter. This parameter takes a list of one or more of the following values:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不得不决定 Postfix 应该使用 `smtpd_sasl_security_options` 参数提供哪些机制。此参数接受以下一个或多个值的列表：
- en: '`noanonymous:` You should always set this value or Postfix will offer anonymous
    authentication to mail clients. Allowing anonymous authentication makes you an
    open relay and should not be used for SMTP servers.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noanonymous:` 您应该始终设置此值，否则 Postfix 将向邮件客户端提供匿名身份验证。允许匿名身份验证将使您成为开放中继，并且不应该用于
    SMTP 服务器。'
- en: '`noplaintext:` The `noplaintext` value will prevent Postfix from offering the
    plaintext mechanisms `PLAIN` and `LOGIN`. Usually you don''t want that because
    the most widespread clients support only `LOGIN`. If you set this option, we won''t
    be able to authenticate some clients.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noplaintext:` `noplaintext` 值将阻止 Postfix 提供明文机制 `PLAIN` 和 `LOGIN`。通常情况下，您不希望这样做，因为大多数广泛使用的客户端只支持
    `LOGIN`。如果设置了此选项，我们将无法对一些客户端进行身份验证。'
- en: '`noactive:` This setting excludes SASL mechanisms that are susceptible to active
    (non-dictionary) attacks.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noactive:` 此设置排除了容易受到主动（非字典）攻击的 SASL 机制。'
- en: '`nodictionary:` This keyword excludes all mechanisms that can be broken by
    means of a dictionary attack.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodictionary:` 此关键字排除了所有可以通过字典攻击破解的机制。'
- en: '`mutual_auth:` This form of authentication requires the server to authenticate
    itself to the client as well as the other way around. If you set it, only servers
    and clients capable of doing this form or authentication will be able to authenticate.
    This option is hardly ever used.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutual_auth:` 这种形式的身份验证要求服务器向客户端进行身份验证，反之亦然。如果设置了它，只有能够执行此形式或身份验证的服务器和客户端才能进行身份验证。这个选项几乎从不使用。'
- en: A common setting for the `smtpd_sasl_security_options` parameter adds the following
    line to `main.cf:`
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`smtpd_sasl_security_options` 参数的常见设置将在 `main.cf` 中添加以下行：'
- en: '[PRE47]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This prevents anonymous authentication and permits all others.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这将防止匿名身份验证，并允许所有其他身份验证。
- en: Including broken clients
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包括破损的客户端
- en: 'Next you have to decide if Postfix should offer `SMTP AUTH` to broken clients.
    Broken clients, in the context of `SMTP AUTH`, are clients that will not recognize
    a server''s SMTP AUTH capability if authentication has been offered the way RFC
    2222 requires. Instead they adhere to a draft of the RFC that had an additional
    `=` in the line that shows `SMTP AUTH` capability during SMTP communication. Among
    the clients that are broken are several versions of Microsoft Outlook Express
    and Microsoft Outlook. To get around this problem, just add the `broken_sasl_auth_clients`
    parameter to `main.cf` like this:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要决定 Postfix 是否应该向破损的客户端提供 `SMTP AUTH`。在 `SMTP AUTH` 的上下文中，破损的客户端是指如果身份验证已按照
    RFC 2222 要求的方式提供，它们将不会识别服务器的 SMTP AUTH 能力。相反，它们遵循了 RFC 草案，在显示 SMTP 通信期间的 `SMTP
    AUTH` 能力行中具有额外的 `=`。在破损的客户端中，包括几个版本的 Microsoft Outlook Express 和 Microsoft Outlook。要解决此问题，只需像这样向
    `main.cf` 添加 `broken_sasl_auth_clients` 参数：
- en: '[PRE48]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Postfix will print an additional `AUTH` line when it lists its capabilities
    to the mail client. This line will have the extra `=` in it and the broken clients
    will notice the `SMTP AUTH` capability.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Postfix 列出其功能给邮件客户端时，将打印一个额外的 `AUTH` 行。此行将在其中具有额外的 `=`，并且破损的客户端将注意到 `SMTP
    AUTH` 能力。
- en: 'Finally, if you want to limit the users that may relay to a group with the
    same realm, add the `smtpd_sasl_local_domain` parameter and provide the realm
    as value like this:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果要限制可以中继到具有相同领域的用户组，添加 `smtpd_sasl_local_domain` 参数，并提供该值作为领域，如下所示：
- en: '[PRE49]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Postfix will append the value to all usernames that get sent by mail clients
    successfully limiting relaying to those users whose username contains the `smtpd_sasl_local_domain`
    value in their username.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix 将在成功通过邮件客户端发送的所有用户名后附加该值，成功限制中继到那些用户名中包含 `smtpd_sasl_local_domain` 值的用户。
- en: 'Once you''re done with all the configuration steps, reload Postfix to let the
    settings become active and start testing. As root, issue the command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有配置步骤后，重新加载Postfix以使设置生效并开始测试。作为root用户，发出以下命令：
- en: '[PRE50]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Testing SMTP AUTH
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试SMTP AUTH
- en: When you test SMTP authentication, don't use a regular mail client as the mail
    client may introduce some problems. Instead use the Telnet client program and
    connect to Postfix in an SMTP communication. You will need to send the username
    and password of your test user in a Base64-encoded form so the first step will
    be to create such a string. Use the following command to create a Base64 encoded
    string for the user `test` using the password `testpass:`
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试SMTP身份验证时，不要使用常规邮件客户端，因为邮件客户端可能会引入一些问题。而是使用Telnet客户端程序并在SMTP通信中连接到Postfix。您将需要以Base64编码形式发送测试用户的用户名和密码，因此第一步将是创建这样的字符串。使用以下命令为用户`test`使用密码`testpass`创建Base64编码的字符串：
- en: '[PRE51]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `\0` separates the username from the password, and the username
    will have to be repeated twice. This is because SASL expects two, possibly different
    usernames (`userid, authid`) to support additional functionality that isn't used
    for SMTP authentication.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`\0`将用户名与密码分开，用户名将需要重复两次。这是因为SASL期望两个可能不同的用户名（`userid, authid`）来支持未用于SMTP身份验证的附加功能。
- en: Also keep in mind that if your username or password contains the `@` or `$`
    characters you will need to escape them with a prepended `\`, or Perl will interpret
    them and this will result in a non-functional Base64 encoded string.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，如果您的用户名或密码包含`@`或`$`字符，您将需要使用前置的`\`进行转义，否则Perl将解释它们，这将导致一个无法正常工作的Base64编码的字符串。
- en: 'Once you have the Base64 encoded string at hand, use the Telnet program to
    connect to port `25` on your server like this:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您手头有Base64编码的字符串，使用Telnet程序连接到服务器的端口`25`，如下所示：
- en: '[PRE52]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You can see that in the previous example the authentication was successful.
    First the mail client sent an `EHLO` during the introduction and Postfix responded
    with a list of capabilities. If you set the `broken_sasl_auth_clients` parameter
    to `yes` as we did in our example, you will also have noted the additional `AUTH`
    line containing the `=`.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在前面的示例中，身份验证是成功的。首先，邮件客户端在介绍时发送了`EHLO`，而Postfix则以一系列功能的列表做出了回应。如果您像我们的示例中所做的那样将`broken_sasl_auth_clients`参数设置为`yes`，您还会注意到包含`=`的额外`AUTH`行。
- en: Authentication took place when the client sent the `AUTH` string along with
    the mechanism it wanted to use and, in the case of plain mechanism, appended the
    Base64 encoded string. If your authentication did not succeed, but you were able
    to authenticate during the SASL testing, take a look at the parameters in `main.cf`
    and double-check the `chroot` status of `smtpd` in `master.cf`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 认证发生在客户端发送`AUTH`字符串以及它想要使用的机制时，对于明文机制，还附加了Base64编码的字符串。如果您的身份验证没有成功，但您能够在SASL测试期间进行身份验证，请查看`main.cf`中的参数，并仔细检查`master.cf`中`smtpd`的`chroot`状态。
- en: Enabling relaying for authenticated clients
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为经过身份验证的客户端启用中继
- en: 'If authentication has been successful, we just have to tell Postfix to allow
    relaying of messages for those who have been authenticated. This is done by editing
    `main.cf` and adding the `permit_sasl_authenticated` option to your list of restrictions
    in `smtpd_recipient_restrictions` like this:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份验证成功，我们只需告诉Postfix允许已经经过身份验证的用户中继消息。这是通过编辑`main.cf`并在`smtpd_recipient_restrictions`的限制列表中添加`permit_sasl_authenticated`选项来完成的，如下所示：
- en: '[PRE53]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Reload Postfix and start testing with a real mail client. If possible, ensure
    that its IP address is not part of `mynetworks`, as Postfix might be allowed to
    relay for that reason and not because `SMTP AUTH` worked out. You might want to
    limit relaying to the server only during the test. Change the `mynetwork_classes
    = host` setting so that clients from other machines automatically will not be
    a part of the Postfix network.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载Postfix并开始使用真实的邮件客户端进行测试。如果可能，请确保其IP地址不是`mynetworks`的一部分，因为Postfix可能被允许中继的原因不是因为`SMTP
    AUTH`成功。您可能希望在测试期间将中继限制为仅限服务器。更改`mynetwork_classes = host`设置，以便来自其他计算机的客户端不会自动成为Postfix网络的一部分。
- en: If you still experience problems with `SMTP AUTH`, take a look at `saslfinger`
    ([http://postfix.state-of-mind.de/patrick.koetter/saslfinger/](http://postfix.state-of-mind.de/patrick.koetter/saslfinger/)).
    It's a script that gathers all kinds of useful information about `SMTP AUTH` configuration
    and gives you output that you can append to your mail when you ask on the Postfix
    mailing list.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然遇到`SMTP AUTH`问题，请查看`saslfinger`（[http://postfix.state-of-mind.de/patrick.koetter/saslfinger/](http://postfix.state-of-mind.de/patrick.koetter/saslfinger/)）。这是一个脚本，它收集有关`SMTP
    AUTH`配置的各种有用信息，并为您提供输出，您可以在向Postfix邮件列表询问时附加到您的邮件中。
- en: Securing plaintext mechanisms
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护明文机制
- en: We already noted that `SMTP AUTH` using plaintext mechanisms isn't really safe
    because the string that is sent during authentication is merely encoded and not
    encrypted. This is where **Transport Layer Security** (**TLS**) comes in handy
    because it can shield the transmission of the encoded string from curious eyes.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注意到，使用明文机制的`SMTP AUTH`实际上并不安全，因为在身份验证期间发送的字符串仅仅是编码而不是加密。这就是**传输层安全**（**TLS**）派上用场的地方，因为它可以保护编码字符串的传输免受好奇的眼睛。
- en: Enabling Transport Layer Security
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用传输层安全
- en: To enable TLS you must generate a key pair and a certificate, and then alter
    the postfix configuration to recognize them.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用TLS，您必须生成密钥对和证书，然后修改postfix配置以识别它们。
- en: To generate an SSL certificate, and to use SSL, you need to have the OpenSSL
    package installed. This will be installed in many cases, otherwise use your distribution's
    package manager to install it.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成SSL证书，并使用SSL，您需要安装OpenSSL软件包。在许多情况下，这将被安装，否则请使用您的发行版软件包管理器进行安装。
- en: 'To create a certificate, issue the following commands (as root):'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建证书，请以root身份发出以下命令：
- en: '![Enabling Transport Layer SecuritySASL layerplaintext mechanism](img/8648_05_3.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![启用传输层安全SASL层明文机制](img/8648_05_3.jpg)'
- en: This will create certificates in `/etc/postfix/certs` called `smtpd.key` and
    `smtpd.crt`. Add the `smtpd_use_tls` parameter to `main.cf` and set it to `yes:`
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`/etc/postfix/certs`中创建名为`smtpd.key`和`smtpd.crt`的证书。将`smtpd_use_tls`参数添加到`main.cf`并将其设置为`yes`：
- en: '[PRE54]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then you will need to tell `smtpd` where it can find the key and the certificate
    by adding the `smtpd_tls_key_file` and `smtpd_tls_cert_file` parameters:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要告诉`smtpd`在哪里可以找到密钥和证书，通过添加`smtpd_tls_key_file`和`smtpd_tls_cert_file`参数：
- en: '[PRE55]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'A mail server that sends a certificate to prove its identity must also keep
    a copy of the certification authority''s public certificate on hand. Presuming
    that you''ve already added it to your server''s local CA root store in `/usr/share/ssl/certs`,
    use the following parameter:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 发送证书以证明其身份的邮件服务器还必须随时保留认证机构的公共证书的副本。假设您已经将其添加到服务器的本地CA根存储中的`/usr/share/ssl/certs`，使用以下参数：
- en: '[PRE56]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If the CA certificates aren''t all in one file, but in separate files in the
    same directory, for example `/usr/share/ssl/certs`, use the following parameter
    instead:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 如果CA证书不是在一个文件中，而是在同一个目录中的单独文件中，例如`/usr/share/ssl/certs`，则使用以下参数：
- en: '[PRE57]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Once you have all this configured, you're done with the basic TLS configuration
    and you can take care of securing plaintext authentication.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了所有这些配置，您就完成了基本的TLS配置，可以开始保护明文认证。
- en: Configuring security policy
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置安全策略
- en: There are several ways you can secure plaintext authentication using TLS. The
    most radical approach is to use `smtpd_tls_auth_only` parameter and set it to
    `yes`. If you use it, `SMTP AUTH` will be announced only once the mail client
    and mail server have established an encrypted communication layer. By doing this,
    all username/password combinations will be encrypted and not vulnerable to eavesdropping.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以使用TLS保护明文认证。最激进的方法是使用`smtpd_tls_auth_only`参数，并将其设置为`yes`。如果使用它，只有在邮件客户端和邮件服务器建立了加密通信层后，才会宣布`SMTP
    AUTH`。通过这样做，所有用户名/密码组合都将被加密，不容易被窃听。
- en: However, this punishes all the other mail clients that are capable of using
    other safer mechanisms such as shared secret mechanisms. If you want to handle
    this a little more selectively you should go for the following approach that disables
    plaintext authentication over an unencrypted wire, but permits it as soon as an
    encrypted communication has been established.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这惩罚了所有其他能够使用其他更安全机制的邮件客户端，比如共享密钥机制。如果你想更有选择性地处理这个问题，你应该采取以下方法，禁用未加密传输中的明文认证，但一旦建立了加密通信，就允许它。
- en: 'First of all you need to reconfigure your `smtpd_sasl_security_options` parameter
    to exclude plaintext mechanisms from being offered to mail clients:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要重新配置您的`smtpd_sasl_security_options`参数，以排除向邮件客户端提供明文机制：
- en: '[PRE58]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then you set the additional `smtpd_sasl_tls_security_options` parameter that
    controls the same settings, but applies to TLS sessions only:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 然后设置额外的`smtpd_sasl_tls_security_options`参数，该参数控制相同的设置，但仅适用于TLS会话：
- en: '[PRE59]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: As you can see, the `smtpd_sasl_tls_security_options` parameter will not exclude
    plaintext mechanisms. This way clients that can use other non-plaintext mechanisms
    don't have to go for TLS and those that can only do plaintext mechanisms can do
    it safely once they have established an encrypted session.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`smtpd_sasl_tls_security_options`参数不会排除明文机制。这样一来，可以使用其他非明文机制的客户端无需使用TLS，而只能使用明文机制的客户端一旦建立了加密会话就可以安全地使用它。
- en: Once you've reloaded Postfix, you are ready to test.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您重新加载了Postfix，您就可以开始测试了。
- en: Note
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to add the certificate of the certification authority that signed
    your server's certificate request to your mail client's CA root store, or it will
    at the very minimum complain that it cannot verify the server's identity when
    it presents its server certificate.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将签署您服务器证书请求的认证机构的证书添加到您的邮件客户端的CA根存储中，否则它至少会抱怨无法验证服务器的身份。
- en: Dictionary attacks
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典攻击
- en: 'Dictionary attacks are attacks where clients try to send mail to countless
    potential recipients, whose e-mail addresses are derived from words or names in
    a dictionary:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 字典攻击是指客户端试图向无数潜在收件人发送邮件，这些收件人的电子邮件地址是从字典中的单词或名称派生的：
- en: '[PRE60]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: If your server doesn't have a list of valid recipient addresses, it must accept
    these mails regardless whether the recipient actually exists. Then, this onslaught
    of e-mails needs to be processed as usual (virus check, spam check, local delivery)
    until, at some stage, the system realizes that the recipient does not even exist!
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务器没有有效收件人地址列表，它必须接受这些邮件，无论收件人是否真的存在。然后，这些邮件的攻击需要像往常一样进行处理（病毒检查、垃圾邮件检查、本地投递），直到系统在某个阶段意识到收件人甚至不存在！
- en: Then a non-delivery report will be generated and sent back to the sender.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将生成一个非投递报告并发送回发件人。
- en: So, for every non-existing recipient, one mail is being accepted and processed,
    and additionally another e-mail (the bounce) is generated, and is subject to delivery
    attempts.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于每个不存在的收件人，都会接受和处理一封邮件，并且另外生成一封邮件（退信），并且会进行投递尝试。
- en: As you can see, this course of action wastes precious resources on your servers.
    Because the server is busy trying to deliver mail that it should never have accepted
    in the first place, legitimate mail is falling behind in the flood of spam. Spammers
    can also use the bounce messages to determine legitimate e-mail addresses for
    further attacks. Bounce messages can also give a hint at which SMTP server is
    used, allowing them to target any known vulnerabilities in particular versions.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这种做法浪费了服务器的宝贵资源。因为服务器正忙于尝试传递本来不应该接受的邮件，合法的邮件在垃圾邮件的洪流中落后。垃圾邮件发送者还可以使用退信消息来确定进一步攻击的合法电子邮件地址。退信消息还可以提示使用哪个SMTP服务器，从而使他们能够针对特定版本中已知的任何漏洞。
- en: Recipient maps
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收件人映射
- en: Postfix is able to verify recipient addresses before it accepts a message. It
    can run checks for local domains (listed in `mydestination)` and for relay domains
    (listed in `relay_domains`).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix能够在接受消息之前验证收件人地址。它可以对本地域（列在`mydestination`中）和中继域（列在`relay_domains`中）运行检查。
- en: Checking local domain recipients
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查本地域收件人
- en: 'The `local_recipient_maps` parameter controls which recipients Postfix will
    hold to be valid local recipients. It defaults to the following:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`local_recipient_maps`参数控制Postfix将保留为有效本地收件人的收件人。默认情况如下：'
- en: '[PRE61]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: With this setting, Postfix will check the local `/etc/passwd` file for recipient
    names as well as any map that has been assigned to the `alias_maps` parameter
    in `main.cf`. Adding virtual users is beyond the scope of this book, but if you
    needed to expand this list, you would create a database with the users and add
    the path to the map that holds additional local recipients.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个设置，Postfix将检查本地`/etc/passwd`文件的收件人名称，以及已分配给`main.cf`中的`alias_maps`参数的任何映射。添加虚拟用户超出了本书的范围，但如果您需要扩展此列表，您可以创建一个包含用户的数据库，并添加路径到保存额外本地收件人的映射。
- en: Checking relay domain recipients
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查中继域收件人
- en: The `relay_recipient_maps` parameter controls which recipients are valid for
    relay domains. It is empty by default, and in order to have Postfix get more control,
    you need to build a map where Postfix can look up valid recipients.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`relay_recipient_maps`参数控制中继域的有效收件人。默认情况下为空，为了让Postfix获得更多控制权，您需要构建一个Postfix可以查找有效收件人的映射。'
- en: 'Let''s say your server relays mail to and from `example.com`, then you would
    create the following configuration:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的服务器中继邮件到`example.com`，那么您将创建以下配置：
- en: '[PRE62]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The `relay_domain` parameter tells Postfix to relay mail for recipients in
    the `example.com` domain and the `relay_recipient_maps` parameter points to a
    map that holds valid recipients. In the map you would create a list like this:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`relay_domain`参数告诉Postfix中继`example.com`域的收件人，`relay_recipient_maps`参数指向一个保存有效收件人的映射。在映射中，您可以创建以下列表：'
- en: '[PRE63]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Then run the `postmap` command to create an indexed map like this:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行`postmap`命令创建一个索引映射，如下所示：
- en: '[PRE64]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To get postfix to recognize the new database, reload it:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让postfix识别新的数据库，重新加载它：
- en: '[PRE65]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This will allow only `adam@example.com` and `eve@example.com` as recipients
    for the domain `example.com`. Mail to `snake@example.com` would be rejected with
    a **User unknown in relay recipient table** error message.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只允许`adam@example.com`和`eve@example.com`作为`example.com`域的收件人。发送到`snake@example.com`的邮件将被拒绝，并显示**User
    unknown in relay recipient table**错误消息。
- en: Rate-limiting connections
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制连接速率
- en: Rejecting mail for non-existing recipients helps a lot, but when your server
    is subject to a dictionary attack, it will still accept all the client's connections
    and produce an appropriate error message (or accept the mail, should a valid recipient
    address have been hit by chance).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 拒绝发送到不存在收件人的邮件会有很大帮助，但是当您的服务器受到字典攻击时，它仍会接受所有客户端的连接并生成适当的错误消息（或者接受邮件，如果偶然命中了有效的收件人地址）。
- en: 'Postfix''s anvil server maintains short-term statistics to defend your system
    against clients that hammer your server with either of the following cases within
    a configurable period of time:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: Postfix的anvil服务器维护短期统计数据，以防御您的系统受到在可配置的时间段内以以下任一情况轰炸您的服务器的客户端：
- en: Too many simultaneous sessions
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时会话过多
- en: Too many successive requests
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过多的连续请求
- en: As the hardware and the software you use limit the number of mails your server
    is able to process per given time unit, it makes sense not to accept more mail
    than your server can handle.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件和软件的限制决定了您的服务器每个给定时间单位能够处理的邮件数量，因此不接受超出服务器处理能力的邮件是有意义的。
- en: '[PRE66]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The previous line specifies the time interval used for all the following limits:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行指定了用于所有以下限制的时间间隔：
- en: '`smtpd_client_connection_rate_limit = 40:` This specifies the number of connections
    a client can make during the period specified by `anvil_rate_time_unit`. In this
    case, it''s 40 connections per 60s.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smtpd_client_connection_rate_limit = 40:` 这指定了客户端可以在`anvil_rate_time_unit`指定的时间段内建立的连接数。在这种情况下，是每60秒40个连接。'
- en: '`smtpd_client_connection_count_limit = 16:` This gives the maximum number of
    simultaneous connections any client is allowed to make to this service per `anvil_rate_time_unit`.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smtpd_client_connection_count_limit = 16:` 这是任何客户端允许在`anvil_rate_time_unit`内建立的最大并发连接数。'
- en: '`smtpd_client_message_rate_limit = 100:` This is an important limit, as a client
    could reuse an established connection and send many mails using just this single
    connection.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smtpd_client_message_rate_limit = 100:` 这是一个重要的限制，因为客户端可以重复使用已建立的连接并仅使用这个单个连接发送许多邮件。'
- en: '`smtpd_client_recipient_rate_limit = 32:` This gives the maximum number of
    recipient addresses that any client is allowed to send to this service per `anvil_rate_time_unit`
    regardless of whether or not Postfix actually accepts those recipients.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smtpd_client_recipient_rate_limit = 32:` 这是任何客户端允许在`anvil_rate_time_unit`内发送到此服务的最大收件人地址数量，无论Postfix是否实际接受这些收件人。'
- en: '`smtpd_client_event_limit_exceptions = $mynetworks:` This can be used to exempt
    certain networks or machines from the rate limiting. You may want to exempt your
    mailing list server from the rate limiting, as it will undoubtedly send lots of
    mails to many recipients during a short period.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smtpd_client_event_limit_exceptions = $mynetworks:` 这可以用来豁免某些网络或机器免受速率限制。您可能希望豁免邮件列表服务器免受速率限制，因为它无疑会在短时间内向许多收件人发送大量邮件。'
- en: 'The `anvil` will emit detailed log data about the maximum connection rate (here:
    `5/60s)` and which client reached that maximum rate (`212.227.51.110`) and when
    ( `Dec28 13:19:23)`'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`anvil`将发出关于最大连接速率（这里是`5/60s`）以及哪个客户端达到了最大速率（`212.227.51.110`）以及何时（`Dec28 13:19:23`）的详细日志数据。'
- en: '[PRE67]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This second log entry shows which client established the most concurrent connections
    and when:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这第二个日志条目显示了哪个客户端建立了最多的并发连接以及何时：
- en: '[PRE68]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'If any limit is being exceeded, `anvil` will log this as well:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何限制被超出，`anvil`也会记录这一点：
- en: '[PRE69]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Any client that exceeds these limits will be given a temporary error code, thus
    signaling it to retry at a later time. Legitimate clients will honor that and
    retry. Open proxies and trojaned machines will most likely not retry.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 任何超出这些限制的客户端都将收到临时错误代码，因此表示它在稍后重试。合法的客户端将遵守并重试。开放代理和特洛伊木马可能不会重试。
- en: Summary
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how to secure your installation. There were several
    different topics covered, firstly, the configuration of Postfix to only accept
    e-mail from certain IP addresses, which is useful if all your users are office
    based. Next, the chapter covered using SASL to authenticate users who might connect
    from any IP address. Then, we looked at using TLS to encrypt the authentication
    between client and server. Finally, we looked at limiting clients which behave
    badly, using the `anvil` daemon to limit clients that connect too often within
    a certain time period, and clients that open too many connections at one time.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何保护您的安装。涵盖了几个不同的主题，首先是配置Postfix只接受来自特定IP地址的电子邮件，这在所有用户都是办公室用户时非常有用。接下来，本章介绍了使用SASL对可能来自任何IP地址的用户进行身份验证。然后，我们看了如何使用TLS加密客户端和服务器之间的身份验证。最后，我们看了如何限制表现不佳的客户端，使用`anvil`守护程序限制在一定时间内连接过于频繁的客户端，以及一次打开太多连接的客户端。
- en: The measures shown in this chapter will make your life as a postmaster easier,
    and also help to limit the amount of spam that your users endure, and if you had
    inadvertently configured an open relay, limit the amount of spam passed on to
    other Internet users too. For more details on limiting spam, move on to Chapter
    8 that describes using the open source spam filtering tool SpamAssassin. Or read
    on to Chapter 6 that covers using Procmail to manipulate e-mail messages as they
    arrive.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍的措施将使您作为邮件管理员的生活更轻松，并有助于限制用户遭受的垃圾邮件数量，如果您无意中配置了开放中继，还可以限制传递给其他互联网用户的垃圾邮件数量。有关限制垃圾邮件的更多细节，请移步到描述使用开源垃圾邮件过滤工具SpamAssassin的第8章。或者继续阅读第6章，介绍使用Procmail在电子邮件到达时对其进行操作。
