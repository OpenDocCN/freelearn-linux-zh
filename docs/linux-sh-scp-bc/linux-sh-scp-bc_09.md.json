["```\n#!/bin/sh\n#\n# 6/7/2017\n#\necho \"Chapter 9 - Script 1\"\n\nx=0\nwhile [ $x -lt 5 ]\ndo\n echo \"x: $x\"\n let x++\n\ny=0\nwhile [ $y -lt 5 ]\ndo\n echo \"y: $y\"\n let y++\ndone\n\n# more code here\n# more code here\n\necho \"End of script1\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/7/2017\n#\necho \"Chapter 9 - Script 2\"\n\necho \"Start of x loop\"\nx=0\nwhile [ $x -lt 5 ]\ndo\n echo \"x: $x\"\n let x++\n\necho \"Start of y loop\"\ny=0\nwhile [ $y -lt 5 ]\ndo\n echo \"y: $y\"\n let y++\ndone\n\n# more code here\n# more code here\n\necho \"End of script2\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/7/2017\n#\necho \"Chapter 9 - Script 3\"\n\nif [ $# -ne 1 ] ; then\n echo \"Usage: script3 parameter\"\n exit 255\nfi\n\nparm=$1\necho \"parm: $parm\"\n\nif [ \"$parm\" = \"home\" ] ; then\n echo \"parm is home.\"\nelif if [ \"$parm\" = \"cls\" ] ; then\n echo \"parm is cls.\"\nelif [ \"$parm\" = \"end\" ] ; then\n echo \"parm is end.\"\nelse\n echo \"Unknown parameter: $parm\"\nfi\n\necho \"End of script3\"\nexit 0\n```", "```\nfor i in *.txt\n echo \"i: $i\"\ndone\n```", "```\n./script-bad: line 8: syntax error near unexpected token `echo'\n./script-bad: line 8: ` echo \"i: $i\"'\n```", "```\n#!/bin/sh\n#\n# 6/7/2017\n#\necho \"Chapter 9 - Script 4\"\n\nx=0\nwhile [ $x -lt 5 ]\ndo\n echo \"x: $x\"\n let x++\ndone\n\necho \"x after loop: $x\"\nlet maxx=x\n\ny=1\nwhile [ $y -le 5 ]\ndo\n echo \"y: $y\"\n let y++\ndone\n\necho \"y after loop: $y\"\nlet maxy=y-1                 # must subtract 1\n\necho \"Max. number of x: $maxx\"\necho \"Max. number of y: $maxy\"\n\necho \"End of script4\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/7/2017\n#\nset -x                       # turn debugging on\n\necho \"Chapter 9 - Script 5\"\n\nx=0\nwhile [ $x -lt 5 ]\ndo\n echo \"x: $x\"\n let x++\ndone\n\necho \"End of script5\"\nexit 0\n```", "```\n + echo 'Chapter 9 - Script 5'\n Chapter 9 - Script 5\n```", "```\n#!/bin/sh\n#\n# 6/8/2017\n#\nset +x                       # turn debugging off\n\necho \"Chapter 9 - Script 7\"\n\nx=0\nfor fn in *.txt\ndo\n echo \"x: $x - fn: $fn\"\n array[$x]=\"$fn\"\n let x++\ndone\n\nmaxx=$x\necho \"Number of files: $maxx\"\n\nset -x                       # turn debugging on\n\nx=0\nwhile [ $x -lt $maxx ]\ndo\n  echo \"File: ${array[$x]}\"\n  let x++\ndone\n\nset +x                       # turn debugging off\n\necho \"End of script7\"\nexit 0\n```", "```\n#!/bin/sh\n#\n# 6/8/2017\n#\necho \"Chapter 9 - Script 8\"\nTTY=/dev/pts/35              # TTY of other terminal\n\n# Subroutines\np1()                         # display to TTY\n{\n rc1=0                       # default is no error\n if [ $# -ne 1 ] ; then\n  rc1=2                      # missing parameter\n else\n  echo \"$1\" > $TTY\n  rc1=$?                     # set error status of echo command\n fi\n\n return $rc1\n}\n\n# Code\np1                           # missing parameter\necho $?\n\np1 Hello\necho $?\n\np1 \"Linux Rules!\"\necho $?\n\np1 \"Programming is fun!\"\necho $?\n\necho \"End of script8\"\nexit 0\n```", "```\n#!/bin/sh\n# 6/8/2017\n# Chapter 9 - Script 9\n#\nTTY=/dev/pts/35              # debug terminal\n\n# Subroutines\ncls()\n{\n tput clear\n}\n\nmove()                       # move cursor to row, col\n{\n tput cup $1 $2\n}\n\nmovestr()                    # move cursor to row, col\n{\n tput cup $1 $2\n echo -n \"$3\"                # display string\n}\n\nchecktermsize()\n{\n p1 \"Entering routine checktermsize.\"\n\n rc1=0                       # default is no error\n if [[ $LINES -lt $1 || $COLUMNS -lt $2 ]] ; then\n  rc1=1                      # set return code\n fi\n return $rc1\n}\n\ninit()                       # set up the cursor position array\n{\n p1 \"Entering routine init.\"\n\n srow[0]=2;  scol[0]=7       # name\n srow[1]=4;  scol[1]=12      # address 1\n srow[2]=6;  scol[2]=12      # address 2\n srow[3]=8;  scol[3]=7       # city\n srow[4]=8;  scol[4]=37      # state\n srow[5]=8;  scol[5]=52      # zip code\n srow[6]=10; scol[6]=8       # email\n}\n\ndrawscreen()                 # main screen draw routine\n{\n p1 \"Entering routine drawscreen.\"\n\n cls                         # clear the screen\n movestr 0 25 \"Chapter 9 - Script 9\"\n movestr 2 1 \"Name:\"\n movestr 4 1 \"Address 1:\"\n movestr 6 1 \"Address 2:\"\n movestr 8 1 \"City:\"\n movestr 8 30 \"State:\"\n movestr 8 42 \"Zip code:\"\n movestr 10 1 \"Email:\"\n}\n\ngetdata()\n{\n p1 \"Entering routine getdata.\"\n\n x=0                         # array subscript\n rc1=0                       # loop control variable\n while [ $rc1 -eq 0 ]\n do\n  row=${srow[x]}; col=${scol[x]}\n\n  p1 \"row: $row  col: $col\"\n\n  move $row $col\n  read array[x]\n  let x++\n  if [ $x -eq $sizeofarray ] ; then\n   rc1=1\n  fi\n done\n return 0\n}\n\nshowdata()\n{\n p1 \"Entering routine showdata.\"\n\n fn=0\n echo \"\"\n read -p \"Enter filename, or just Enter to skip: \" filename\n if [ -n \"$filename\" ] ; then       # if not blank\n  echo \"Writing to '$filename'\"\n  fn=1                       # a filename was given\n fi\n echo \"\"                     # skip 1 line\n echo \"Data array contents: \"\n y=0\n while [ $y -lt $sizeofarray ]\n do\n  echo \"$y - ${array[$y]}\"\n  if [ $fn -eq 1 ] ; then\n   echo \"$y - ${array[$y]}\" >> \"$filename\"\n  fi\n  let y++\n done\n return 0\n}\n\np1()                         # display to TTY\n{\n rc1=0                       # default is no error\n if [ $# -ne 1 ] ; then\n  rc1=2                      # missing parameter\n else\n  echo \"$1\" > $TTY\n  rc1=$?                     # set error status of echo command\n fi\n\n return $rc1\n}\n\n# Code starts here\n\np1 \" \"                       # carriage return\np1 \"Starting debug of script9\"\n\nsizeofarray=7                # number of array elements\n\nif [ \"$1\" = \"--help\" ] ; then\n p1 \"In Usage clause.\"\n\n echo \"Usage: script9 --help\"\n echo \" This script shows how to create an interactive screen program\"\n echo \" and how to use another terminal for debugging.\"\n exit 255\nfi\n\nchecktermsize 25 80\nrc=$?\nif [ $rc -ne 0 ] ; then\n echo \"Please size the terminal to 25x80 and try again.\"\n exit 1\nfi\n\ninit                         # initialize the screen array\ndrawscreen                   # draw the screen\ngetdata                      # cursor movement and data input routine\nshowdata                     # display the data\n\np1 \"At exit.\"\nexit 0\n```"]