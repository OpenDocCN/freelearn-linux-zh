["```\n:0 c\nbackup\n:0 ic\ncd backup && rm -f dummy `ls -t msg.* | sed -e 1,32d`\n\n```", "```\n:0 c\nbackup\n\n```", "```\n:0 ic\n| cd backup && rm -f dummy `ls -t msg.* | sed -e 1,32d`\n\n```", "```\nSHELL=/bin/sh # for other shells, this might need adjustment\n:0 Whc: vacation.lock\n# Perform a quick check to see if the mail was addressed to us\n$TO_:.*\\<$\\LOGNAME\\>\n# Filter out the mail senders we don't want to send replies to - Ever\n* !^FROM_DAEMON\n# Make sure that we do not create an endless loop that keeps\n# replying to the reply by checking to see if we have already processed\n# this message and inserted a loop detection header\n* !^X-Loop: your@own.mail.address\n| formail -rD 8192 vacation.cache\n:0 ehc\n# We are pretty certain it's OK to send a reply to the sender of this message\n| (\nformail -rA\"Precedence: junk\" \\\n-A\"X-Loop: your@own.mail.address\" ; \\\necho \"Hi, Your message was delivered to my mailbox,\"; \\\necho \"but I won't be back until Monday.\"; \\\necho \"-- \"; cat $HOME/.signature \\\n) | $SENDMAIL -oi -t\n\n```", "```\n# Here is a full line comment\nMAILDIR=${HOME}/Maildir # This comment spans multiple\n# lines for clarity.\n:0: # Comment OK here\n* condition # BAD comment. NOT allowed.\n# Old versions of Procmail don't understand this.\n* condition\n{ # Comment OK\n# Comment OK\ndo_something # Comment OK\n}\n\n```", "```\nMAILDIR=${HOME}/Maildir # Set the value of the MAILDIR\nLOGFILE=${MAILDIR}/log # Store logfiles in the MAILDIR\n\n```", "```\nVAR = \"\" # Set VAR to null\nVAR = ${VAR:-\"val1\"} # VAR = \"val1\"\nVAR = \"\"\nVAR = ${VAR-\"val2\"} # VAR = \"\"\nVAR = \"\"\nVAR = ${VAR:+\"val3\"} # VAR = \"\"\nVAR = \"\"\nVAR = ${VAR+\"val4\"} # VAR = \"val4\"\nVAR = \"val\"\nVAR = ${VAR:+\"val3\"} # VAR = \"val3\"\nVAR = \"val\"\nVAR = ${VAR+\"val4\"} # VAR = \"val4\"\nVAR # unset VAR\nVAR = ${VAR:-\"val1\"} # VAR = \"val1\"\nVAR\nVAR = ${VAR-\"val2\"} # VAR = \"val2\"\nVAR\nVAR = ${VAR:+\"val3\"} # no action\nVAR\nVAR = ${VAR+\"val4\"} # no action\n\n```", "```\n  `cmd1 | cmd2`\n\n```", "```\n#\n# Simple Procmail recipe to dump variables to a log file\n#\nLOG=\"Dump of ProcMail Variables\nMAILDIR is currently :${MAILDIR}:\nMSGPREFIX is currently :${MSGPREFIX}:\nDEFAULT is currently :${DEFAULT}:\nORGMAIL is currently :${ORGMAIL}:\nSHELL is currently :${SHELL}:\nSHELLFLAGS is currently :${SHELLFLAGS}:\nSENDMAIL is currently :${SENDMAIL}:\nSENDMAILFLAGS is currently :${SENDMAILFLAGS}:\nUMASK is currently :${UMASK}:\nSHELLMETAS is currently :${SHELLMETAS}:\nTRAP is currently :${TRAP}:\nEXITCODE is currently :${EXITCODE}:\nLOGFILE is currently :${LOGFILE}:\nLOG is currently :${LOG}:\nVERBOSE is currently :${VERBOSE}:\nLOGABSTRACT is currently :${LOGABSTRACT}:\nCOMSAT is currently :${COMSAT}:\nPROCMAIL_OVERFLOW is currently :${PROCMAIL_OVERFLOW}:\nTODO is currently :${TODO}:\nHOST is currently :${HOST}:\nDELIVERED is currently :${DELIVERED}:\nLASTFOLDER is currently :${LASTFOLDER}:\n\\$= is currently :$=:\n\\$1 is currently :$1:\n\\$2 is currently :$2:\n\\$$ is currently :$$:\n\\$? is currently :$?:\n\\$_ is currently :$_:\n\\$- is currently :$-:\nLOCKFILE is currently :${LOCKFILE}:\nLOCKEXT is currently :${LOCKEXT}:\nLOCKSLEEP is currently :${LOCKSLEEP}:\nLOCKTIMEOUT is currently :${LOCKTIMEOUT}:\nTIMEOUT is currently :${TIMEOUT}:\nNORESRETRY is currently :${NORESRETRY}:\nSUSPEND is currently :${SUSPEND}:\"\n\n```", "```\n# procmail ./rc.dump\n<CTRL-D>\n\n```", "```\n# procmail ./rc.dump\n<CTRL-D>\n\"Dump of ProcMail Variables\nMAILDIR is currently :.:\nMSGPREFIX is currently :msg.:\nDEFAULT is currently :/var/spool/mail/root:\nORGMAIL is currently :/var/spool/mail/root:\nSHELL is currently :/bin/bash:\nSHELLFLAGS is currently :-c:\nSENDMAIL is currently :/usr/sbin/sendmail:\nSENDMAILFLAGS is currently :-oi:\nUMASK is currently ::\nSHELLMETAS is currently :&|<>~;?*[:\nTRAP is currently ::\nEXITCODE is currently ::\nLOGFILE is currently ::\nLOG is currently ::\nVERBOSE is currently :1:\nLOGABSTRACT is currently ::\nCOMSAT is currently :no:\nPROCMAIL_OVERFLOW is currently ::\nTODO is currently ::\nHOST is currently :delta.adepteo.net:\nDELIVERED is currently ::\nLASTFOLDER is currently ::\n$= is currently :0:\n$1 is currently ::\n$2 is currently ::\n$$ is currently :9014:\n$? is currently :0:\n$_ is currently :./rc.dump:\n$- is currently ::\nLOCKFILE is currently ::\nLOCKEXT is currently :.lock:\nLOCKSLEEP is currently ::\nLOCKTIMEOUT is currently ::\nTIMEOUT is currently ::\nNORESRETRY is currently ::\nSUSPEND is currently ::\n\n```", "```\n:0 <flags>:\n\n```", "```\n:0 <flags> :scriptname.lock\n\n```", "```\n:0 <flags>\n\n```", "```\n:0\n* condition1\n* condition2\naction_on_condition1_and_condition2\n\n```", "```\n# Save all remaining messages to DEFAULT\n:0:\n${DEFAULT}/\n\n```", "```\nVERBOSE=1\n:0cB:\n* [0-9]+ Linux Rules [ok!]\n${MAILDIR}/linuxrules/\nVERBOSE=0\n\n```", "```\n*? /unix/command/line | another/command*emphasis>\n```", "```\nVERBOSE=1\n:0B:\n* ? /bin/sed -n 3p | /bin/egrep \"Linux Rules\"\n${MAILDIR}/linuxrules/\nVERBOSE=0\n\n```", "```\n* ! condition\n\n```", "```\n:0:\n* !^TO.*cjtaylor\n${MAILDIR}/not_sent_to_me/\n\n```", "```\n* $ condition\n\n```", "```\nURGMATCH=`cat $HOME/.urgent`\n:0:\n* $^From.*${URGMATCH}\n$MAILDIR/urgent/\n\n```", "```\n! user1@domain2.net user2@domain1.com user3 ...\n\n```", "```\n| $SENDMAIL \"$SENDMAILFLAGS\"\n\n```", "```\n! -t\n\n```", "```\n:0:\n* ^Subject.*support\n! support@adepteo.net\n\n```", "```\n| cmd1 param1 | cmd2 -opt param2 >>file\n\n```", "```\nVAR=| cmd1 | cmd2 ...\n\n```", "```\nVERBOSE=1\n#Copy the data and pass the headers to the process\n:0hc:\n* ^Subject: Book Pipeline Example\n#Copy so that the next recipe will still work\n| cat - > /tmp/cjt_header.txt\n#Final recipe so do not copy here, but pass the body\n:0b:\n| cat - > /tmp/cjt_body.txt\nVERBOSE=0\n\n```", "```\n/path/to/filename\n\n```", "```\ndirectory/\n\n```", "```\ndirectory/.\n\n```", "```\n{\n# ... more recipes\n}\n\n```", "```\nVERBOSE=1\n:0:\n* ^Subject: Book Pipeline Example\n{\n#Copy so that the next recipe will still work\n:0hc:\n| cat - > /tmp/cjt_header.txt\n#Final recipe so do not copy here\n:0b:\n| cat - > /tmp/cjt_body.txt\n}\nVERBOSE=0\n\n```", "```\n:0 HB:\n* mystical monsters\n${MAILDIR}/monsters/\n\n```", "```\n:0:\n* ^Content-Type: multipart/[^;]+;[ ]*boundary=\"?\\/[^\"]+\n${MAILDIR}/mime/\n\n```", "```\n:0\n* Dragons ... mystical monsters\n${MAILDIR}/result/\n\n```", "```\nDragons are mystical monsters\nDragons and mystical monsters\nDragons but mystical monsters\n\n```", "```\n:0\n* Dragons ....? Mystical monsters\n${MAILDIR}/result/\n\n```", "```\n:0\n* Dragons ..d? Mystical monsters\n${MAILDIR}/result/\n\n```", "```\n:0\n* ^Subject: Choose.*online\n${MAILDIR}/result/\nSubject: Choose discount pharmacy and expedite the service online.\nSubject: Choose hassle free online shopping\nSubject: Choose reliable online shopping site for reliable service and quality meds\nSubject: Choose reliable service provider and save more online.\nSubject: Choose the supplier for more hot offers online\nSubject: Choose to shop online and choose to save\n\n```", "```\n:0\n* ^Subject: .*!!!*\n${MAILDIR}/result/\nSubject: Breathtaking New Year sale on now!!! Get ready for it!! Subject: Hey Ya!! New Year Sale on right now!! Subject: It Doesn't Matter!!\n\n```", "```\n:0\n* ^Subject: .*!!!+\n${MAILDIR}/result/\n\n```", "```\nSubject: Breathtaking New Year sale on now!!! Get ready for it!!\n\n```", "```\nThere is only one problem\nThere are 10 problems\n\n```", "```\nThere (is only one)+ problem\n\n```", "```\nThere (is only one|are)+ problem\n\n```", "```\nSubject: Online Casino\n\n```", "```\nSubject: (o|0)n(1|l)ine casin(o|0)\n\n```", "```\n:0\n* ^Subject: (o|0)n(1|l)ine\n* ^Subject: casin(o|0)\n${MAILDIR}/_maybespam/\n\n```", "```\n:0\n* ^Subject: [a-z]*[01]+[a-z]*\n${MAILDIR}/_maybespam\nSubject: Hot Shot St0ckInfo VCSC loadstone Subject: M1CR0S0FT, SYMANNTEC, MACR0MEDIA, PC GAMES FROM $20 EACH Subject: R0LEX Replica - make your first impressions count! Subject: Small-Cap DTOI St0cks reimburse Subject: TimelySt0ck DTOI Buy of the Week evasive\n\n```", "```\n[^0-9]\n\n```", "```\nSubject: any subject message\n\n```", "```\nOld-Subject:\n\n```", "```\n^Subject: any subject message\n\n```", "```\n^Subject:.* now$\n\n```", "```\n\"(^((Original-)?(Resent-)?(To|Cc|Bcc)|\\\n(X-Envelope|Apparently(-Resent)?)-To):(.*[^-a-zA-Z0-9_.])?)\"\n\n```", "```\n\"(^(Mailing-List:|Precedence:.*(junk|bulk|list)|\\\nTo: Multiple recipients of |\\\n(((Resent-)?(From|Sender)|X-Envelope-From):|>?From )([^>]*[^(.%@a-z0-9])?(\\\nPost(ma?(st(e?r)?|n)|office)|(send)?Mail(er)?|daemon|m(mdf|ajordomo)|n?uucp|\\\nLIST(SERV|proc)|NETSERV|o(wner|ps)|r(e(quest|sponse)|oot)|b(ounce|bs\\\\.smtp)|\\\necho|mirror|s(erv(ices?|er)|mtp(error)?|ystem)|\\\nA(dmin(istrator)?|MMGR|utoanswer)\\\n)(([^).!:a-z0-9][-_a-z0-9]*)?[%@> ][^<)]*(\\\\(.*\\\\).*)?)?$([^>]|$)))\"\n\n```", "```\n\"(^(((Resent-)?(From|Sender)|X-Envelope-From):|\\\n>?From )([^>]*[^(.%@a-z0-9])?(\\\nPost(ma(st(er)?|n)|office)|(send)?Mail(er)?|daemon|mmdf|n?uucp|ops|\\\nr(esponse|oot)|(bbs\\\\.)?smtp(error)?|s(erv(ices?|er)|ystem)|A(dmin(istrator)?|\\\nMMGR)\\\n)(([^).!:a-z0-9][-_a-z0-9]*)?[%@> ][^<)]*(\\\\(.*\\\\).*)?)?$([^>]|$))\"\n\n```", "```\n:0:\n* ^FROM_DAEMON\n${YY}/${MM}/daemon\n\n```", "```\n:0 Whc: vacation.lock\n# Perform a quick check to see if the mail was addressed to us\n* $^To_:.*\\<$\\LOGNAME\\>\n# Don't reply to daemons and mailinglists\n* !^FROM_DAEMON\n# Mail loops are evil\n* !^X-Loop: $RECIPIENT\n| formail -rD 8192 vacation.cache\n\n```", "```\n:0 ehc\n# if the name was not in the cache\n| (\nformail -rA\"Precedence: junk\" \\\n-A\"X-Loop: $RECIPIENT\" ; \\\ncat $HOME/.vacation_message \\\n) | $SENDMAIL -oi -t\n\n```", "```\n#Assign the name of the folder by extracting the year and month\n# parts from the external date command.\nMONTHFOLDER=`date +%y/%m`\n#Unconditional rule to create the folder. Using the test\n#command. we create the monthly folder if it does not exist.\n:0 ic\n* ? test ! -d ${MONTHFOLDER}\n| mkdir -p ${MONTHFOLDER}\n#Alternative way of creating the folder using an assignment operation\nDUMMY=`test -d $MONTHFOLDER || mkdir $MONTHFOLDER`\n#Now store any email matching 'meeting' in an appropriate folder\n:0:\n* meeting\n${MONTHFOLDER}/meeting/\n\n```", "```\n#This obtains the date formatted as YYYY MM DD, e.g. 2009 09 08 date = `date \"+%Y %m %d\"`\n#Now assign the Year YYYY style :0 * date ?? ^^()\\/ { YYYY = $MATCH }\n#Now assign the Year YY style :0 * date ?? ^^..\\/ { YY = $MATCH }\n#Now assign the Month MM style :0 * date ?? ^^.....\\/ { MM = $MATCH }\n#Now assign the Day DD style :0 * date ?? ()\\/..^^ { DD = $MATCH }\n#Create the various directory formats you are going to use\nDUMMY=`test -d ${YYYY}/${MM}/${DD} || mkdir -p ${YYYY}/${MM}/${DD}`\nDUMMY=`test -d ${YY}/${MM} || mkdir -p ${YY}/${MM}`\n#Now store the data in an appropriate folder using the variables\n#YYYY, MM and DD setup above.\n:0:\n* ^FROM_DAEMON\n${YYYY}/${MM}/${DD}/daemon/\n\n```", "```\n:0:\n* >100000\n{\nMAIN PROCESS WILL GO HERE\n}\n\n```", "```\n#Place a copy in the largemail folder\n:0 c:\nlargemail/\n\n```", "```\n#Strip the body to 1kb\n:0 bfwi\n| /usr/bin/head -c1024\n\n```", "```\n#ReWrite the subject line\n:0 fhw\n* ^Subject:\\/.*\n| formail -I \"Subject: {* -BIG- *} $MATCH\"\n\n```", "```\n:0: * >100000\n{\n#Place a copy in the largemail folder\n:0 c: largemail/\n#Strip the body to 1kb :0 bfwi | /usr/bin/head -c1024 #ReWrite the subject line :0 fhw * ^Subject:\\/.* | formail -I \"Subject: {* -BIG- *} $MATCH\" }\n\n```", "```\n#This obtains the date formatted as YYYY MM DD date = `date \"+%Y %m %d\"`\n#Now assign the Year YYYY style :0 * date ?? ^^()\\/ { YYYY = $MATCH }\n#Now assign the Year YY style :0 * date ?? ^^..\\/ { YY = $MATCH }\n#Now assign the Month MM style :0 * date ?? ^^.....\\/ { MM = $MATCH }\n#Now assign the Day DD style :0 * date ?? ()\\/..^^ { DD = $MATCH }\n#Create the various directory formats you are going to use\nDUMMY=`test -d ${YYYY}/${MM}/${DD} || mkdir -p ${YYYY}/${MM}/${DD}`\nDUMMY=`test -d ${YY}/${MM} || mkdir -p ${YY}/${MM}`\n#Make a backup copy of all incoming mail\n:0 c\nbackup/\n#Restrict the history to just 32 mail items\n:0 ic\n| cd backup && rm -f dummy `ls -t msg.* | sed -e 1,32d`\n#Make sure that all mails have a valid From value\n:0 fhw\n| formail -I \"From \" -a \"From \"\n#\n## Don't include this unless we need to\n## INCLUDERC=${HOME}/Procmail/rc.testing\n##\n## Now include the various process listings\nINCLUDERC=${HOME}/Procmail/rc.system\nINCLUDERC=${HOME}/Procmail/rc.lists\nINCLUDERC=${HOME}/Procmail/rc.killspam\nINCLUDERC=${HOME}/Procmail/rc.vacation\nINCLUDERC=${HOME}/Procmail/rc.largefiles\nINCLUDERC=${HOME}/Procmail/rc.virusfilter\nINCLUDERC=${HOME}/Procmail/rc.spamfilter\n\n```", "```\n# Filter system mail messages into a dated folder structure.\n# The variables YY and MM are defined in the calling recipe\n# and each of the directories will have been created if necessary.\n:0:\n* ^From:.*root@delta.adepteo.net\n${YY}/${MM}/daemon/\n:0:\n* ^From:.*root@ramsbottom.adepteo.net\n${YY}/${MM}/daemon/\n:0:\n* ^TO_pager@adepteo.net\n${YY}/${MM}/daemon/\n:0:\n* ^From:.*MAILER-DAEMON@delta.adepteo.net\n${YY}/${MM}/daemon/\n:0:\n* ^From:.*me@localhost.com\n${YY}/${MM}/daemon/\n\n```", "```\n# Mailing lists\n# Store by date folder\n# The variables DD and MM are defined in the calling recipe.\n# and each of the directories will have been created if necessary.\n:0:\n* ^From:.*mapserver-users-admin@lists.gis.umn.edu\n${YY}/${MM}/mapserver/\n:0:\n* ^TO_mapserver-users@lists.gis.umn.edu\n${YY}/${MM}/mapserver/\n:0:\n* ^From:.*yourtopjob@topjobs.co.uk\n${YY}/${MM}/jobs/\n:0:\n* ^Subject: silicon Jobs-by-Email Alert\n${YY}/${MM}/jobs/\n:0:\n* ^Reply-To: Axandra Search Engine Facts <facts@Axandra.com>\n${YY}/${MM}/lists/\n:0:\n* ^Subject: A Joke A Day\n${YY}/${MM}/lists/\n:0:\n* ^List-Owner: <mailto:owner-tribune@lists.sitepoint.com>\n${YY}/${MM}/lists/\n:0:\n* ^Reply-To: newsletter@192.com\n${YY}/${MM}/lists/\n:0:\n* ^Subject: Developer Shed Weekly Update\n${YY}/${MM}/lists/\n\n```", "```\n#Kill file for known spammers\n# If the sender is in the killfile then discard the mail into the bit bucket\n# Here we use the external command 'grep' to search our killfile for a\n# matching sending sending by testing the return status from grep.\n:0:\n* ? grep -i `formail -rtzxTo:` $HOME/.killfile\n/dev/null\n\n```", "```\n#Vacation Replies\n:0 Whc: vacation.lock\n# Perform a quick check to see if the mail was addressed to us\n* $^To_:.*\\<$\\LOGNAME\\>\n# Don't reply to daemons and mailinglists\n* !^FROM_DAEMON\n# Mail loops are evil\n* !^X-Loop: $RECIPIENT\n| formail -rD 8192 vacation.cache\n:0 ehc\n# if the name was not in the cache reply with the contents\n# of our vacation message in the body of the email.\n| (\nformail -rA\"Precedence: junk\" \\\n-A\"X-Loop: $RECIPIENT\" ; \\\ncat $HOME/.vacation_message \\\n) | $SENDMAIL -oi -t\n\n```", "```\n#Assume that files larger than 100k are not spam\n:0: * >100000\n{\n#Place a copy in the largemail folder\n:0 c: largemail/\n#Strip the body to 1kb :0 bfwi | /usr/bin/head -c1024\n#ReWrite the subject line :0 fhw * ^Subject:\\/.* | formail -I \"Subject: {* -BIG- *} $MATCH\" }\n\n```", "```\n#Virus Filter\n#X-Virus-Status: Infected\n:0:\n* ^X-Virus-Status: Infected\n_virus/\n\n```", "```\n#Spam Filter\n:0fw\n* < 256000\n| spamc\n# Mails with a score of 15 or higher are almost certainly\n# spam (with 0.05% false positives according to\n# rules/STATISTICS.txt). Let's put them in a\n# different mbox. (This one is optional.)\n#\n# The regular expression below matches the SpamAssassin\n# header with 15 asterisks or more.\n#\n:0:\n* ^X-Spam-Level: \\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n_almost-certainly-spam/\n# All mail tagged as spam (eg. with a score higher than the\n# set threshold)\nis moved to \"probably-spam\".\n:0:\n* ^X-Spam-Status: Yes\n_probably-spam/\n\n```"]