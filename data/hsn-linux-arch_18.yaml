- en: Getting Your Hands Salty
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变得更加熟悉Salt
- en: 'After going through the basic concepts of **Salt**, we will finally in this
    chapter get hands-on with Salt. We will have the chance to work on a real-life
    scenario and to design and install proof-of-concept infrastructure for our potential
    customer. We will do such things as the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过**Salt**的基本概念后，我们最终将在本章中开始实践Salt。我们将有机会在真实情景下工作，并为潜在客户设计和安装概念验证基础设施。我们将做一些如下的事情：
- en: Provisioning cloud infrastructure via Terraform
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Terraform配置云基础设施
- en: Installing and configuring Salt masters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Salt主服务器
- en: Installing and configuring minions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置minions
- en: Creating states and formulas for minions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为minions创建状态和公式
- en: Provisioning a load balancer via Salt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Salt配置负载均衡器
- en: After performing these tasks, you should have the basic knowledge and hands-on
    experience to start learning Salt more in depth.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些任务后，您应该具备基本知识和实践经验，可以开始更深入地学习Salt。
- en: Hands-on with Salt
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Salt进行实践
- en: We have learned about the different Salt components and capabilities that the
    software has, and how it can help us to achieve control of our infrastructure.
    But we haven't used any of the components to actually maintain any system or even
    install Salt. So, let's get our hands dirty with Salt and start making use of
    our newly acquired knowledge.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '我们已经了解了Salt的不同组件和软件的功能，以及它如何帮助我们控制我们的基础设施。但我们还没有使用任何组件来实际维护任何系统，甚至安装Salt。因此，让我们开始使用Salt，并开始利用我们新获得的知识。 '
- en: Before starting, we are going to set up a scenario to make more sense of what
    we will be doing in this chapter, and it will be related to a real-life scenario.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们将设置一个情景，以便更清楚地了解本章中我们将要做的事情，它将与一个真实情景相关。
- en: Scenario
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 情景
- en: You have been hired by Mr. Don High to design the system's management platform
    for his company. He wants to run his web server workloads on Azure **Virtual Machines**
    (**VMs**), with an **Infrastructure as a Service** (**IaaS**) model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您已被Don High先生聘用，为他的公司设计系统管理平台。他希望在Azure **虚拟机**（**VMs**）上运行他的Web服务器工作负载，采用**基础设施即服务**（**IaaS**）模型。
- en: 'His setup is fairly simple: he wants to have two virtual machines running a
    website written in `Node.js` in front of an nginx load balancer to route the traffic
    into the website''s VMs. All of his infrastructure has to be managed via a configuration
    management solution, in a way that, every time they provision a new VM, the application
    is loaded alongside any configuration that might be needed for their website to
    run.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 他的设置非常简单：他希望有两台虚拟机运行一个用`Node.js`编写的网站，位于nginx负载均衡器前面，将流量路由到网站的虚拟机中。他的所有基础设施都必须通过配置管理解决方案进行管理，以便每次他们提供新的虚拟机时，应用程序都会加载，并且可能需要运行其网站所需的任何配置。
- en: One more thing that he mentioned to you is that the company's staff haven't
    deployed any resources in Azure, and that they would like to see how **Infrastructure
    as Code** (**IaC**) works for deployments in the cloud, so that their developers
    are able to use it in the future.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 他还告诉你的另一件事是，公司的员工在Azure中没有部署任何资源，并且他们希望看到**基础设施即代码**（**IaC**）如何在云中部署，以便他们的开发人员将来能够使用它。
- en: Terraforming our initial infrastructure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的初始基础设施
- en: We mentioned **Terraform** in the previous chapter, and we want to take advantage
    of the fact that our client is asking us to deploy his infrastructure via an IaC
    software, so this is the perfect chance to use this great tool.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中提到了**Terraform**，并且我们希望利用我们的客户要求我们通过IaC软件部署他的基础设施的事实，所以这是使用这个伟大工具的绝佳机会。
- en: We will briefly explain each step before executing it, but if you would like to
    find out more, we will suggest more books in the *Further reading* section that
    talk more in depth about Terraform.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行每一步之前，我们将简要解释每一步，但如果您想了解更多，我们将在*进一步阅读*部分建议更多关于Terraform的深入讨论的书籍。
- en: Setting up Terraform
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Terraform
- en: We will assume that you will be executing the following steps from a Unix-like
    workstation. Installing Terraform is fairly simple. Terraform is only a binary
    that can be downloaded from the `terraform.io` website.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您将从类Unix工作站执行以下步骤。安装Terraform非常简单。Terraform只是一个可以从`terraform.io`网站下载的二进制文件。
- en: '[https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html)'
- en: 'In my case, I will be using a macOS Terminal to install Terraform:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我将使用macOS终端安装Terraform：
- en: '![](img/feabe7e2-a66a-428a-931c-9ccbbdb755bb.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/feabe7e2-a66a-428a-931c-9ccbbdb755bb.png)
- en: 'Once downloaded, you can go ahead and unzip the binary in a directory part
    of your path:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，您可以继续并在路径的一部分解压缩二进制文件：
- en: '![](img/5d5c9321-527e-4c2d-98d9-8bb819acce1b.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/5d5c9321-527e-4c2d-98d9-8bb819acce1b.png)
- en: 'Check the Terraform version by running `terraform version`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`terraform version`检查Terraform版本：
- en: '![](img/9dab0bb8-1b00-4e36-b1ec-018bd71ee8cb.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dab0bb8-1b00-4e36-b1ec-018bd71ee8cb.png)'
- en: Once Terraform has been installed, we require the Azure CLI to be installed
    to configure access to the customer's Azure subscription. You can find the steps
    to install the Azure CLI and set up the subscription in our *Installing Kubernetes* chapters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Terraform后，我们需要安装Azure CLI以配置访问客户的Azure订阅。您可以在我们的*安装Kubernetes*章节中找到安装Azure
    CLI和设置订阅的步骤。
- en: With the Azure CLI installed and your default account set, we can configure
    Terraform to use the appropriate credentials in order for it to be able to deploy
    infrastructure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Azure CLI并设置了默认帐户后，我们可以配置Terraform以使用适当的凭据，以便它能够部署基础设施。
- en: 'First, we will create a directory to store our Terraform files:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个目录来存储我们的Terraform文件：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we will create a service principal ID via the Azure CLI, which will be
    used to authenticate Terraform with our subscription.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过Azure CLI创建一个服务主体ID，该ID将用于验证Terraform与我们的订阅。
- en: 'Save the subscription ID from the output of this command into a `$SUB_ID` variable:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将此命令的输出中的订阅ID保存到`$SUB_ID`变量中：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, run the following command to create the service principal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令来创建服务主体：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Take note of the returned values of `appId`, `password`, and `tenant` returned
    from the previous command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意从上一个命令返回的`appId`、`password`和`tenant`的值。
- en: Now, inside the `terrafiles` directory, create a file called `terraform.tfvars`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`terrafiles`目录中，创建一个名为`terraform.tfvars`的文件。
- en: This file is special because Terraform will automatically load by default any
    file with this name if any is present in the directory when we execute Terraform.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件很特殊，因为当我们执行Terraform时，Terraform会自动加载默认情况下存在的任何具有这个名称的文件。
- en: 'This file should contain the following information:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件应包含以下信息：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When you have the file ready, create another file called `az_creds.tf` with
    the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好文件后，创建另一个名为`az_creds.tf`的文件，其中包含以下内容：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file will be our variables file, and it will load the credential variables
    into the Azure Resource Manager Terraform provider.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件将是我们的变量文件，并且它将把凭据变量加载到Azure资源管理器Terraform提供程序中。
- en: Creating IaC
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建IaC
- en: 'Now we are ready to start creating our IaC declaration files. Terraform uses
    its own language called **Hashicorp Configuration Language** (**HCL**). You can
    find out more about it in the following link: [https://www.terraform.io/docs/configuration/index.html](https://www.terraform.io/docs/configuration/index.html).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始创建我们的IaC声明文件。Terraform使用自己的语言称为**Hashicorp配置语言**（**HCL**）。你可以在以下链接找到更多信息：[https://www.terraform.io/docs/configuration/index.html](https://www.terraform.io/docs/configuration/index.html)。
- en: Let's begin defining our resources. Create a file called `main.tf`*.* This will
    be our main modules file. A module is a set of resources that share a common goal
    or are all part of the same application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始定义我们的资源。创建一个名为`main.tf`的文件。这将是我们的主模块文件。一个模块是一组共享共同目标或属于同一应用程序的资源。
- en: The name `main.tf`is the recommended name by Hashicorp, the company owner of
    the Terraform Open Source project, for a minimal module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.tf`的名称是Hashicorp推荐的名称，Hashicorp是Terraform开源项目的公司所有者，用于最小模块。'
- en: 'You can find out more about modules in the Terraform documentation here: [https://www.terraform.io/docs/modules/index.html](https://www.terraform.io/docs/modules/index.html).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Terraform文档中了解更多关于模块的信息：[https://www.terraform.io/docs/modules/index.html](https://www.terraform.io/docs/modules/index.html)。
- en: Our file should contain all of the following resources that we will be declaring
    next.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的文件应包含接下来我们将声明的所有资源。
- en: 'Here is the resource group that will contain our Azure resources:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将包含我们Azure资源的资源组：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the virtual network for our subnets:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们子网的虚拟网络：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that we are getting values from our previous resources, by calling them
    with the following syntax:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们通过以下语法从先前的资源中获取值：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the subnet(s) with the address space for our VMs:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们VM的地址空间的子网(s)：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we are creating only one subnet that will contain our masters and minions,
    but you can always create separate subnets, as long as they are inside the VNET
    address space, for the masters and minions to have network separation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只创建一个包含我们的主节点和minions的子网，但只要它们在VNET地址空间内，你可以随时创建单独的子网，以便主节点和minions进行网络隔离。
- en: With our virtual network and subnet created, we need to create the firewall
    rules for our virtual machines. Firewalls in Azure are called **network security
    groups**, and we will go ahead and use the network security group provider to
    create the firewall and its rules.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了虚拟网络和子网后，我们需要为虚拟机创建防火墙规则。Azure中的防火墙称为**网络安全组**，我们将继续使用网络安全组提供程序来创建防火墙及其规则。
- en: 'Here is the network security group for the load balancer:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们负载均衡器的网络安全组：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The following are the network security group rules for access to the load balancer
    VM.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于访问负载均衡器VM的网络安全组规则。
- en: 'Ports for `https`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`https`的端口：'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Port for `http`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`http`端口：'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Port for SSH `access`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`access`的SSH端口：'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The second network security group for the master VM is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 主VM的第二个网络安全组如下：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The following are the network security group rules for the master VM.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是主VM的网络安全组规则。
- en: 'The following is the Salt `publisher` port:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Salt的`publisher`端口：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the request server port for Salt:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Salt的请求服务器端口：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `ssh` port for the master is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 主机的`ssh`端口如下：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The network security group for the minions is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: minions的网络安全组如下：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This last network security group is special because we will not create any rules
    for it. The default rules that Azure provides only allow VMs to talk with Azure
    resources, which is exactly what we want for these VMs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的网络安全组很特殊，因为我们不会为它创建任何规则。Azure提供的默认规则只允许VM与Azure资源通信，这正是我们这些VM所希望的。
- en: 'A public IP address for our Nginx load balancer VM is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Nginx负载均衡器VM的公共IP地址如下：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The virtual network interface for our load balancer is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们负载均衡器的虚拟网络接口如下：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The virtual network interfaces for our web server VMs are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Web服务器VM的虚拟网络接口如下：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Following is the public IP address for our master VM:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们主VM的公共IP地址：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This public IP address will be used for us to SSH into the master VM; that's
    why we are allocating it dynamically.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个公共IP地址将用于我们SSH到主VM；这就是为什么我们要动态分配它。
- en: 'The virtual network interface for the master VM is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 主VM的虚拟网络接口如下：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Following are the web server VMs:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Web服务器VMs：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Replace `os_profile.admin_username` and `os_profile_linux_config.key_data` with
    your own information.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 用你自己的信息替换`os_profile.admin_username`和`os_profile_linux_config.key_data`。
- en: 'The master VM is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 主VM如下：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Following is the Nginx load balancer VM:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Nginx负载均衡器VM：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once you have saved the file with all of the previously created resources,
    run the `terraform init` command; this will initialize the current directory with
    the Terraform files and download the Azure Resource Manager plugin:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 保存了所有先前创建的资源的文件后，运行`terraform init`命令；这将使用Terraform文件初始化当前目录并下载Azure Resource
    Manager插件：
- en: '![](img/93e5f877-3ccb-4d9a-8341-7c5856fe74e1.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93e5f877-3ccb-4d9a-8341-7c5856fe74e1.png)'
- en: If you want to learn more about the `init` command, you can go to [https://www.terraform.io/docs/commands/init.html](https://www.terraform.io/docs/commands/init.html).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`init`命令的信息，您可以访问[https://www.terraform.io/docs/commands/init.html](https://www.terraform.io/docs/commands/init.html)。
- en: After running the `init` command, we will proceed to run the `terraform plan`
    command, which will calculate all of the changes necessary to achieve the desired
    state that we defined in our `tf` file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`init`命令后，我们将继续运行`terraform plan`命令，该命令将计算实现我们在`tf`文件中定义的所需状态的所有必要更改。
- en: 'This will not make any changes to the existing infrastructure until we run
    the `terraform``apply` command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`terraform apply`命令之前，这不会对现有基础设施进行任何更改：
- en: '![](img/a8664294-dfb1-4dac-b50f-0e8b9ba6c0c4.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8664294-dfb1-4dac-b50f-0e8b9ba6c0c4.png)'
- en: For more information about the `plan` command, visit [https://www.terraform.io/docs/commands/plan.html](https://www.terraform.io/docs/commands/plan.html).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`plan`命令的更多信息，请访问[https://www.terraform.io/docs/commands/plan.html](https://www.terraform.io/docs/commands/plan.html)。
- en: 'Immediately after you have finished the `plan` command, you can go ahead and
    run `terraform apply` and you will be prompted with a confirmation to apply the
    changes:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完成`plan`命令后，您可以继续运行`terraform apply`，然后会提示您确认应用更改：
- en: '![](img/dc8b2af1-fd20-4c75-88fe-34fda9b02123.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc8b2af1-fd20-4c75-88fe-34fda9b02123.png)'
- en: 'Once it is finished, you should be able to see the following message:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该能够看到以下消息：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'There are two ways of installing Salt: you can either use a bootstrap script
    to install the masters and minions, or you can install and configure them manually
    via the Salt repositories.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Salt有两种方式：您可以使用引导脚本安装主服务器和minions，也可以通过Salt存储库手动安装和配置它们。
- en: We will be covering both ways in order to familiarize ourselves with the install
    process.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖两种方式，以便熟悉安装过程。
- en: Installing Salt with package managers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用软件包管理器安装Salt
- en: In our current infrastructure, we have one master and three minions. Our master
    and one minion are running CentOS 7.5 and the rest of the VMs are on Ubuntu 16.04\.
    The process will be sort of different on both distros but some steps will be the
    same on both.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的基础设施中，我们有一个主服务器和三个minions。我们的主服务器和一个minion正在运行CentOS 7.5，其余的VM都在Ubuntu
    16.04上。在这两个发行版上，流程会有所不同，但在两者上有一些相同的步骤。
- en: Installing CentOS yum
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装CentOS yum
- en: Previously, Salt was only available through the EPEL repositories. But now SaltStack
    has its own repository that we can import and perform the install from there.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，Salt只能通过EPEL存储库获得。但现在SaltStack有自己的存储库，我们可以从那里导入并执行安装。
- en: 'First, install SSH into the master VM and run the following command to import
    the SaltStack repository:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在主VM中安装SSH，然后运行以下命令导入SaltStack存储库：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Optionally, you can run `yum clean expire-cache`, but as this is a new VM, this
    is not necessary.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的，您可以运行`yum clean expire-cache`，但由于这是一个新的虚拟机，这是不必要的。
- en: 'Once finished, we will go ahead and install the `salt-master` package:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们将继续安装`salt-master`包：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Go ahead and enable the `systemd` salt-master service unit:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 继续启用`systemd` salt-master服务单元：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Check whether the service is running:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 检查服务是否正在运行：
- en: '![](img/e769658e-a6f2-4b19-bccb-a448ec47b6f6.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e769658e-a6f2-4b19-bccb-a448ec47b6f6.png)'
- en: 'Once the service is up and running, check whether the private IP of the VM
    is the one that we configured in our Terraform definitions by running the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务正常运行，请通过运行以下命令检查VM的私有IP是否与我们在Terraform定义中配置的IP一致：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once you have the IP address confirmed, open another terminal and SSH into the
    load balancer minion. Repeat the process of adding the repository as we did in
    the master VM.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 确认了IP地址后，打开另一个终端并SSH到负载均衡器minion。重复在主VM中添加存储库的过程。
- en: 'Once the repository is added, run the following command to install the `salt-minion`
    package:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 添加存储库后，运行以下命令安装`salt-minion`包：
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Enable and start the `systemd` service unit by running this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令启用和启动`systemd`服务单元：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s check whether the service started successfully before we implement any
    changes to it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对其进行任何更改之前，让我们检查服务是否成功启动：
- en: '![](img/825d4968-b0ff-44e2-9a6a-1f48c0e6d3e8.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/825d4968-b0ff-44e2-9a6a-1f48c0e6d3e8.png)'
- en: We can see that we are getting errors on the service saying that the master
    has changed the public key and we are not unable to connect to the Salt master.
    We now need to configure the minion to talk to the master. But first, let's install
    the remaining two Ubuntu minions, because the process of registering the minions
    is the same on both distributions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到服务上出现错误，说主服务器已更改公钥，我们无法连接到Salt主服务器。现在我们需要配置minion与主服务器通信。但首先，让我们安装剩下的两个Ubuntu
    minions，因为在两个发行版上注册minions的过程是相同的。
- en: Ubuntu apt-getting Salt
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu apt-getting Salt
- en: The only complicated part of this is that, due to the fact that our web servers
    do not have a public IP address assigned to them, you have to SSH to them from
    either the master VM or the load balancer VM. To do this, you can set up SSH key
    authentication to the minions from either of these two VMs. If you are reading
    this book, you will be familiar with how to perform such a task.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这唯一复杂的部分是，由于我们的Web服务器没有分配给它们的公共IP地址，您必须从主VM或负载均衡器VM对它们进行SSH。为此，您可以从这两个VM中的任何一个设置SSH密钥认证到minions。如果您正在阅读本书，您将熟悉如何执行此任务。
- en: When you log in to the web server VMs, perform the following task in both VMs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到Web服务器VM后，在两个VM中执行以下任务。
- en: 'Import the `gpg` key for the Salt repository:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 导入Salt存储库的`gpg`密钥：
- en: '![](img/1e052271-d854-4803-bf72-0f1141732e2f.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e052271-d854-4803-bf72-0f1141732e2f.png)'
- en: 'Run the following to create the repository:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令创建存储库：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Once the repository has been added, run `apt update`, and you should be able
    to see the repository listed:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了存储库后，运行`apt update`，您应该能够看到存储库已列出：
- en: '![](img/4b4b29ec-0fb9-492b-a738-586bd3599e16.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b4b29ec-0fb9-492b-a738-586bd3599e16.png)'
- en: 'Proceed to install the `salt-minion` package:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 继续安装`salt-minion`软件包：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Enable and check the status of the `salt-minion` service by running the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令启用并检查`salt-minion`服务的状态：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You should see the same messages we saw in the CentOS LB virtual machine.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到与CentOS LB虚拟机中看到的相同的消息。
- en: Installing Salt via the bootstrap script
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过引导脚本安装Salt
- en: The second way of installing Salt is via a **bootstrap script**. This script
    automatically detects our distribution and downloads the defined packages. The
    script also provides us with the `-A` flag, which will add the address of the
    master to our minions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**引导脚本**安装Salt的第二种方法。此脚本会自动检测我们的发行版并下载定义的软件包。该脚本还为我们提供了`-A`标志，该标志将主机的地址添加到我们的minions中。
- en: 'To get the script, you can either use `wget` or `curl`; the official SaltStack
    uses `curl`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取脚本，您可以使用`wget`或`curl`；官方SaltStack使用`curl`：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This script applies for both masters and minions; the difference is which flags
    you use when running the script.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本适用于主机和minions；运行脚本时使用的标志不同。
- en: 'To install the master components, run the script with the `-M` flag for master
    and `-P` to allow any Python `pip` packages to be installed. We can also specify
    the master address with `-A` and tell the script not to install the minion service
    in the master with the `-N` flag:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装主机组件，请使用`-M`标志运行脚本，用于主机和`-P`允许安装任何Python `pip`软件包。我们还可以使用`-A`指定主机地址，并告诉脚本不要使用`-N`标志在主机中安装minion服务：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To install the minion, just run this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装minion，只需运行此命令：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Master and minion handshake
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机和minion握手
- en: On this stage of the install, we will go ahead and allow our minions to talk
    to the master, verify their fingerprints, and set up configuration files.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装的这个阶段，我们将允许我们的minions与主机通信，验证它们的指纹，并设置配置文件。
- en: First, we will SSH into the master VM and edit the master's configuration file
    to tell the salt-master daemon to which IP we want it to bind.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将SSH到主机VM并编辑主机的配置文件，告诉salt-master守护程序要绑定到哪个IP。
- en: 'Edit the `/etc/salt/master` file, look for the `interface:` line, and add the
    master''s IP address:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`/etc/salt/master`文件，查找`interface:`行，并添加主机的IP地址：
- en: '![](img/b4c6833d-9ee3-48ef-8875-5dac0eb854b1.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4c6833d-9ee3-48ef-8875-5dac0eb854b1.png)'
- en: 'After modifying the file, run the `daemon-reload` and `restart` commands so
    that the service acknowledges the changes:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 修改文件后，运行`daemon-reload`和`restart`命令，以便服务确认更改：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can verify whether the Salt master is listening on the correct IP address
    by running an `ss` command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行`ss`命令来验证Salt主机是否在正确的IP地址上监听：
- en: '![](img/9204ea5f-fd29-400e-9658-997a74380305.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9204ea5f-fd29-400e-9658-997a74380305.png)'
- en: Now that our master is listening on the IP address that we require, it's time
    to configure our minions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的主机正在监听我们需要的IP地址，是时候配置我们的minions了。
- en: Let's start by modifying the minion's configuration file. Remember that these
    steps are to be performed on all of the minions regardless of their distribution.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始修改minion的配置文件。请记住，这些步骤需要在所有minions上执行，而不管它们的发行版如何。
- en: 'Look for the `/etc/salt/minion` file and edit it by adding the noted IP address
    of the master under `master:`. We will find an already-configured value: `master:
    salt`*; *this is because Salt, by default, looks for the master via a DNS query
    to the hostname, `salt`, but as we intend in the future to have more than one
    master, we will be setting this file with the static IP address of our master
    VM:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '查找`/etc/salt/minion`文件，并通过在`master:`下添加主机的IP地址来编辑它。我们将找到一个已配置的值：`master: salt`*；*这是因为Salt默认情况下通过对主机名`salt`进行DNS查询来查找主机，但是因为我们打算在将来拥有多个主机，所以我们将使用我们主机VM的静态IP地址设置此文件：'
- en: '![](img/119ef727-6f47-4379-ab79-30e57a5d9790.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/119ef727-6f47-4379-ab79-30e57a5d9790.png)'
- en: Before our minions can exchange keys, we need to add the master's fingerprint
    into our minions' configuration file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的minions可以交换密钥之前，我们需要将主机的指纹添加到我们minions的配置文件中。
- en: 'SSH back to the master and run the following command to obtain your master''s
    public fingerprint:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: SSH回到主机并运行以下命令以获取主机的公共指纹：
- en: '![](img/2ad8c09e-e899-4e05-b0a0-1b694a2372d9.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ad8c09e-e899-4e05-b0a0-1b694a2372d9.png)'
- en: 'Copy the value of `master.pub` and go back to editing the minion''s configuration
    file. In the minion''s configuration file, edit the `master_finger: '' ''` line
    with the master''s public key, obtained in the preceding step:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '复制`master.pub`的值，并返回编辑minion的配置文件。在minion的配置文件中，使用在前一步中获得的主机公钥编辑`master_finger:
    '' ''`行：'
- en: '![](img/457bff79-3eda-4ead-afe0-3d8ea04b6c68.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/457bff79-3eda-4ead-afe0-3d8ea04b6c68.png)'
- en: 'Reload and restart the minion daemon, once you have completed this last task:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 完成最后一个任务后，重新加载并重新启动minion守护程序：
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Before exiting each minion, run the following command and take note of the
    minion''s fingerprint:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在退出每个minion之前，运行以下命令并注意minion的指纹：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Once you have taken note of all of the minions' fingerprints, go ahead and log
    in to the master.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您注意到所有minions的指纹，请继续登录到主机。
- en: In the master, we will compare the fingerprints that the master sees to the
    fingerprint that we saw locally on each minion. In this way, we will identify
    that the minions that we will be accepting are indeed our minions.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机上，我们将比较主机看到的指纹与我们在每个minion本地看到的指纹。通过这种方式，我们将确定我们将接受的minions确实是我们的minions。
- en: 'To do this, run the following command in the master: `salt-key -F`. This will
    print all of the keys, so you don''t have to print each key individually:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，在主机上运行以下命令：`salt-key -F`。这将打印所有密钥，因此您不必逐个打印每个密钥：
- en: '![](img/6cbc1bd3-57c7-419a-b01d-ade25cef3e1b.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cbc1bd3-57c7-419a-b01d-ade25cef3e1b.png)'
- en: Make sure the keys are the same, and then we will proceed to accept the keys.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 确保密钥相同，然后我们将继续接受密钥。
- en: 'Under the `salt-key -F` command, we saw that we have unaccepted keys to accept after
    verifying them; we will run `salt-key -A` to accept all of the pending keys and
    you can run `salt-key -L` to verify that the keys were accepted:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在`salt-key -F`命令下，我们看到有未接受的密钥需要验证；我们将运行`salt-key -A`来接受所有待处理的密钥，然后可以运行`salt-key
    -L`来验证这些密钥是否被接受：
- en: '![](img/9e63d0bb-c9b8-4324-abda-1dcf5aeab75f.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e63d0bb-c9b8-4324-abda-1dcf5aeab75f.png)'
- en: Now that our minions have been authenticated, we can go ahead and issue commands
    from our master.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的minion已经经过身份验证，我们可以继续从master发出命令。
- en: 'To test our minions, we will invoke the `ping` function from the test module:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的minion，我们将从测试模块调用`ping`函数：
- en: '![](img/62c648ed-d9c6-4e8c-b3f5-7580aec2204d.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62c648ed-d9c6-4e8c-b3f5-7580aec2204d.png)'
- en: All minions should respond `True`, meaning that the Salt minion daemon is responding
    and we are ready to begin managing our infrastructure.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 所有minion应该回应`True`，表示Salt minion守护程序正在响应，我们准备开始管理我们的基础设施。
- en: Working with Salt
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Salt工作
- en: With our SaltStack up and running, we are ready to start creating the formulas
    and customized configurations for our VMs.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的SaltStack已经运行起来了，我们准备开始为我们的虚拟机创建公式和定制配置。
- en: Creating WebServer formulas
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建WebServer公式
- en: We will now be creating the necessary state files to create the formula that
    will install and configure our webservers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建必要的状态文件来创建安装和配置我们的web服务器的公式。
- en: 'Before we begin, we need to create our state tree first, which will contain
    all of our state files:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要首先创建我们的状态树，其中将包含所有状态文件：
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Inside this directory, we will be creating something called the `top.sls` file.
    This file is what tells Salt which states are applied to which minions. As for
    every definition in Salt, `top.sls` is a YAML- based file that will contain the
    minions to target and the state files that should be applied to those minions.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，我们将创建一个名为`top.sls`的文件。这个文件告诉Salt要应用哪些状态到哪些minion上。和Salt中的每个定义一样，`top.sls`是一个基于YAML的文件，其中包含要定位的minion和应用到这些minion的状态文件。
- en: 'Create a file called `top.sls` in the `/srv/salt` directory with the following
    content:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/srv/salt`目录中创建一个名为`top.sls`的文件，内容如下：
- en: '[PRE43]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`base:` means the environment in which we are working on; as this is a simple
    environment, we only need the base environment; for working with multiple environments,
    you can consult one of the books we will suggest in the *Further reading* section.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`base:`表示我们正在工作的环境；由于这是一个简单的环境，我们只需要基本环境；如果要处理多个环境，可以参考我们在*进一步阅读*部分建议的一本书。'
- en: Next, we have the `web*`entry; this entry tells Salt which minion IDs are going
    to be the states applied to. As you can see, you are able to use globbing to target
    minion IDs.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`web*`条目；这个条目告诉Salt要应用状态的minion IDs。正如你所看到的，你可以使用globbing来定位minion IDs。
- en: Finally, `- webserver.nodejs` is where we indicate which states to apply; `webserver`indicates
    the folder in which the `nodejs.sls` file is in. As the YAML is read by the Python
    interpreter, we need to define the paths with periods (.) instead of slashes (`/`).
    The last word would be the name of the `.sls` file to load.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`- webserver.nodejs`是我们指示要应用的状态；`webserver`表示`nodejs.sls`文件所在的文件夹。由于YAML是由Python解释器读取的，我们需要用句点（.）而不是斜杠（/）来定义路径。最后一个词将是要加载的`.sls`文件的名称。
- en: 'Because we defined the `Node.js` file to be in a directory called `webserver`,
    which is the directory that we will be storing all of our web server state files,
    we need to create such a directory:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们定义了`Node.js`文件在一个名为`webserver`的目录中，这个目录将存储我们所有的web服务器状态文件，我们需要创建这样一个目录：
- en: '[PRE44]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now that we have the directory where we will store our state definitions, let''s
    create our first state definition that will install the `node.js` package and
    `npm`. Create a file called `nodejs.sls` in the `/srv/salt/webserver/` directory
    with the following content:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了存储状态定义的目录，让我们创建我们的第一个状态定义，安装`node.js`包和`npm`。在`/srv/salt/webserver/`目录中创建一个名为`nodejs.sls`的文件，内容如下：
- en: '[PRE45]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `nodejs` field is the package to be installed, followed by the `pkg.installed` function
    to invoke.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`nodejs`字段是要安装的包，后面是要调用的`pkg.installed`函数。'
- en: 'With the `state` file created, apply the `state` files to the web server minions:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`state`文件后，将`state`文件应用到web服务器minion上：
- en: '[PRE46]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'After a while, you will receive output with the applied changes and the duration:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 过一会儿，你将收到应用更改和持续时间的输出：
- en: '![](img/c190431a-8901-4572-a771-31a159e753ce.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c190431a-8901-4572-a771-31a159e753ce.png)'
- en: The output of the following example has been truncated for readability.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例的输出已经被截断以提高可读性。
- en: With Node.JS installed, we need to create now the user for the Node.JS website
    to run on.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Node.JS后，我们现在需要为Node.JS网站创建用户。
- en: We will create another state file that will define the user configuration.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建另一个状态文件来定义用户配置。
- en: 'Create another file called `webuser.sls` under the `/srv/salt/webserver/` directory,
    with the following declaration:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/srv/salt/webserver/`目录下创建另一个名为`webuser.sls`的文件，内容如下声明：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Before executing the state, modify the `top.sls` file to reflect the newly
    added state file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行状态之前，修改`top.sls`文件以反映新添加的状态文件：
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Execute the `salt ''*'' state.apply` command again, and you should receive
    the output of the user creation:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行`salt '*' state.apply`命令，你应该会收到用户创建的输出：
- en: '![](img/a4c327a2-dc6f-482c-b61c-fe50304b37be.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4c327a2-dc6f-482c-b61c-fe50304b37be.png)'
- en: Now that we have the user that will be running the website, it's time to copy
    the website files into our website servers. For this, we will be creating another
    state file, which will use Git to download the website files and load them into
    the VM.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了将运行网站的用户，是时候将网站文件复制到我们的网站服务器上了。为此，我们将创建另一个状态文件，使用Git下载网站文件并加载到VM中。
- en: 'Modify your `top.sls` file and add another state called `gitfetch` under the
    same web server directory, like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 修改你的`top.sls`文件，并在同一个web服务器目录下添加另一个名为`gitfetch`的状态：
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, proceed to create the `gitfetch.sls`file using the `git.latest` function
    to download the code from a Git repository and install the `Node.js` dependencies
    every time the repository is downloaded:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续使用`git.latest`函数创建`gitfetch.sls`文件，以从Git存储库下载代码并在每次下载存储库时安装`Node.js`依赖项：
- en: '[PRE50]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Go ahead and run the `state.apply`function again to download the application
    on both web servers. You should be able to see output similar to this after running
    the command:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 继续运行`state.apply`函数，以在两台Web服务器上下载应用程序。运行命令后，您应该能够看到类似于以下内容的输出：
- en: '![](img/57ccb71f-cd5a-4e5f-a3e6-9ed585b01935.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57ccb71f-cd5a-4e5f-a3e6-9ed585b01935.png)'
- en: With the code in our web servers, we are almost done with the configuration
    of our Ubuntu minions.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的Web服务器中的代码，我们几乎完成了我们的Ubuntu minions的配置。
- en: We now require our Node.JS application to run as a daemon.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将我们的Node.JS应用程序作为守护程序运行。
- en: 'For this, we will be using the Supervisor Open Source Project: [https://github.com/Supervisor/supervisor](https://github.com/Supervisor/supervisor).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将使用Supervisor开源项目：[https://github.com/Supervisor/supervisor](https://github.com/Supervisor/supervisor)。
- en: 'Now, let''s configure Salt, to make `Supervisor` watch our Node.JS web application.
    Edit the `top.sls` file with the following line, as we have done before:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们配置Salt，使`Supervisor`监视我们的Node.JS Web应用程序。编辑`top.sls`文件，添加以下行，就像我们以前做过的那样：
- en: '[PRE51]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Before creating the `supervisor` state file, we first need to create the configuration
    file for `supervisor` that we are going to push to our minions. Create a file
    called `supervisor.conf` in the web server directory, with the following content:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`supervisor`状态文件之前，我们首先需要创建要推送到我们minions的`supervisor`配置文件。在Web服务器目录中创建一个名为`supervisor.conf`的文件，内容如下：
- en: '[PRE52]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now create the `suppkg.sls` state file, which will be in charge of managing
    the previous configuration file, under the web server folder:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建`suppkg.sls`状态文件，负责管理之前的配置文件，在Web服务器文件夹下：
- en: '[PRE53]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Once the file is created, go ahead and run the `salt 'web*' state.apply` command
    to apply the latest states.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件后，继续运行`salt 'web*' state.apply`命令以应用最新状态。
- en: 'With this last state applied, our web application should be up and running.
    You can try accessing it via the `curl` command:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 应用了最后一个状态后，我们的Web应用程序应该已经启动运行。您可以尝试通过`curl`命令访问它：
- en: '![](img/16008511-4326-40d9-93f0-2217fe0f0660.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16008511-4326-40d9-93f0-2217fe0f0660.png)'
- en: Now that our web servers are ready, we shall tag them as such. Remember in the
    previous chapter when we talked about grains. This is what we will be doing next.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Web服务器已经准备好了，我们将对它们进行标记。还记得上一章我们谈到的grains吗。这就是我们接下来要做的事情。
- en: Let's go ahead and tag our `web-00` and `web-01` servers with the appropriate
    role tags.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续为我们的`web-00`和`web-01`服务器打上适当的角色标签。
- en: 'To do this, run the following command for each server:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，为每台服务器运行以下命令：
- en: '![](img/972a54da-2dcc-4f31-8cb0-058bfe8cf641.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/972a54da-2dcc-4f31-8cb0-058bfe8cf641.png)'
- en: 'You can check whether the roles were successfully applied by running the following
    `grep`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下`grep`来检查角色是否成功应用：
- en: '![](img/1e6f0ed5-af0b-404a-9595-534b7ea5b304.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e6f0ed5-af0b-404a-9595-534b7ea5b304.png)'
- en: Creating load-balancing formulas
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建负载均衡公式
- en: Now that both our web servers are correctly set up, we can configure our last
    minion. This minion will be running Nginx in order to balance and proxy requests
    to our web servers behind the load balancer.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的两台Web服务器已经正确设置，我们可以配置我们的最后一个minion。这个minion将运行Nginx，以便在负载均衡器后面平衡和代理请求到我们的Web服务器。
- en: 'Let''s create a directory where we will store all of the states for our load
    balancer:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个目录，我们将在其中存储我们的负载均衡器的所有状态：
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'With the directory created, let''s proceed to edit our `top.sls` file one last
    time to include the `load balancer` state file. The `top.sls` file should look
    like this:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建目录后，让我们继续最后一次编辑我们的`top.sls`文件，以包括`负载均衡器`状态文件。`top.sls`文件应该如下所示：
- en: '![](img/2bd3ae04-7f0a-4f1e-952e-e79ae6e34324.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bd3ae04-7f0a-4f1e-952e-e79ae6e34324.png)'
- en: 'Before we create our `load balancer` state file, we will create the Nginx configuration
    file that we will be pushing to our `load balancer` VM. Create a file called `nginx.conf`
    with the following content:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的`负载均衡器`状态文件之前，我们将创建要推送到我们`负载均衡器`VM的Nginx配置文件。创建一个名为`nginx.conf`的文件，内容如下：
- en: '[PRE55]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, let''s proceed to create our final state file. Create a file named `lb.sls`
    under the `nginxlb` directory in `/srv/salt/`, with the following content:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建我们的最终状态文件。在`/srv/salt/`的`nginxlb`目录下创建一个名为`lb.sls`的文件，内容如下：
- en: '[PRE56]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: To apply the final changes, you can run the `state.apply` command.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 应用最终更改，您可以运行`state.apply`命令。
- en: 'Once it''s done, you can go ahead and test the load balancer running a cURL
    to its public IP address:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以继续测试负载均衡器，运行cURL到其公共IP地址：
- en: '![](img/0c17a1c2-32f2-43dd-8521-734d0f1fecc4.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c17a1c2-32f2-43dd-8521-734d0f1fecc4.png)'
- en: With this final configuration, we have concluded the proof of concept for Mr.
    Don High. One very important fact to note is that this example is nowhere near
    ready for be put into production; this is just an example to show you the basic
    functionalities and what is possible with Salt Stack.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个最终配置，我们已经完成了对Don High先生的概念验证。一个非常重要的事实要注意的是，这个例子还远远没有准备好投入生产；这只是一个例子，展示了Salt
    Stack的基本功能和可能性。
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we finally got hands-on interaction with Salt by deploying
    an infrastructure through IaC. We used Terraform to set up our initial environment
    and to start using Terraform, we simply downloaded the binary from `terraform.io`.
    The version of Terraform can be checked through the `terraform version` command.
    With Terraform installed, we obtained the correct details to connect to our Azure
    subscription using the AZ CLI.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们最终通过IaC部署了Salt，与Salt进行了互动。我们使用Terraform设置了我们的初始环境，并且要开始使用Terraform，我们只需从`terraform.io`下载二进制文件。可以通过`terraform
    version`命令检查Terraform的版本。安装了Terraform后，我们获取了连接到我们的Azure订阅的正确详细信息，使用AZ CLI。
- en: Once Terraform was able to connect to Azure, we proceeded to create the IaC
    declaration file, which contained the necessary information to correctly deploy
    the resources we wanted in Azure, the way we wanted it.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Terraform能够连接到Azure，我们就开始创建IaC声明文件，其中包含了在Azure中正确部署我们想要的资源的必要信息，以我们想要的方式。
- en: With the deployment up and running through Terraform, we then moved into installing
    Salt. This can be done in two different ways, through the package manager of the
    OS (`yum` and `apt`) or through a bootstrap script.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Terraform部署完成后，我们开始安装Salt。这可以通过操作系统的软件包管理器（`yum`和`apt`）或引导脚本的两种不同方式来完成。
- en: When installing through the package manager, we needed to add the Salt repository,
    as it was not available in the base repos; we did this by downloading the `rpm`
    from the `saltstack` site.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过软件包管理器安装时，我们需要添加Salt存储库，因为它在基本存储库中不可用；我们通过从`saltstack`网站下载`rpm`来完成这一点。
- en: To install the master, we ran `sudo yum install salt-master`, and to install
    the minions, we ran `sudo yum install salt-minion -y`. For Ubuntu, the process
    was similar, except the `apt` package manager was used.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装master，我们运行了`sudo yum install salt-master`，为了安装minions，我们运行了`sudo yum install
    salt-minion -y`。对于Ubuntu，过程类似，只是使用了`apt`软件包管理器。
- en: After Salt completed the installation, we enabled the `systemctl` units. Once
    Salt was running, we needed to allow the minions to talk to the master; this was
    done through SSH fingerprints.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在Salt完成安装后，我们启用了`systemctl`单元。一旦Salt运行起来，我们需要允许minions与master通信；这是通过SSH指纹完成的。
- en: At this point, Salt was running and the minions were communicating to the master,
    so we then moved into creating the web server formulas, which ran the definitions
    necessary to deploy the application.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，Salt正在运行，minions正在与master通信，所以我们开始创建web服务器公式，运行必要的定义来部署应用程序。
- en: In the next chapter, the last of this book, we will go through some of the best
    practices when designing solutions.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，本书的最后一章，我们将介绍设计解决方案时的一些最佳实践。
