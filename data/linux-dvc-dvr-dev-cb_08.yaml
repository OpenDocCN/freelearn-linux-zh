- en: 'Additional Information: Working with Char Drivers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加信息：使用字符驱动程序
- en: Exchanging data with a char driver
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与字符驱动程序交换数据
- en: 'Exchanging data with a peripheral means sending or receiving data to and from
    it, and, to do so, we have already seen that we have to use the `write()` and `read()` system
    calls, whose prototypes are defined in the kernel, as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与外围设备交换数据意味着向其发送或接收数据，为此，我们已经看到我们必须使用在内核中定义的`write()`和`read()`系统调用的原型。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On the other hand, their counterparts in user space look like the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，它们在用户空间中的对应形式如下：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding prototypes (both in the kernel or user space) look similar but,
    of course, they have different meanings and, as driver developers we must know
    perfectly what these meanings are to do our job accurately.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的原型（无论是在内核空间还是用户空间）看起来很相似，但是它们的含义当然是不同的，作为驱动程序开发人员，我们必须完全了解这些含义，以便准确地完成我们的工作。
- en: Let's start with `write()`; when we call the `write()` system call from our
    user space program, we must supply a file descriptor, `fd`; a buffer, `buf`, filled
    with data to write; and the buffer size, `count`. Then, the system call returns
    a value that can be negative (if there are errors), positive (which refers to
    how many bytes have actually been written), or zero (which means that nothing
    has been written).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`write()`开始；当我们从用户空间程序调用`write()`系统调用时，我们必须提供一个文件描述符`fd`；一个填充有要写入的数据的缓冲区`buf`；以及缓冲区大小`count`。然后，系统调用返回一个值，可以是负值（如果有错误），正值（表示实际写入的字节数），或零（表示没有写入任何内容）。
- en: Note that `count` does **not** represent how many bytes we wish to write, but
    just the buffer size! In fact, `write()` can return a positive value that is smaller
    than `count`. That's why I enclosed the `write()` system call of the `chrdev_test.c` program inside
    a `for()` loop! In fact, if I have to write a buffer that is 10 bytes long and `write()` returns,
    for instance, 4 bytes, I have to recall it until all the remaining 6 bytes have
    been written.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`count`并不代表我们希望写入多少字节，而只是缓冲区的大小！实际上，`write()`可以返回一个小于`count`的正值。这就是为什么我在`chrdev_test.c`程序的`write()`系统调用中使用了`for()`循环！实际上，如果我必须写入一个长度为10字节的缓冲区，而`write()`返回了4字节，我必须重复调用它，直到剩下的6字节都被写入。
- en: From the kernel space perspective, we see the file descriptor, `fd`, as `struct
    file *filp` (where kernel information about our file descriptor is stored), while
    the data buffer is specified by the `buf` pointer and the `count` variable (for
    the moment, do not consider the `ppos` pointer; it will be explained soon).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从内核空间的角度来看，我们将文件描述符`fd`视为`struct file *filp`（存储有关文件描述符的内核信息），而数据缓冲区由`buf`指针和`count`变量指定（暂时不考虑`ppos`指针；稍后将对其进行解释）。
- en: 'As we can see from the `write()` kernel prototype, the `buf` parameter is marked
    with the `__user` attribute, which points out the fact that this buffer comes
    from the user space, so we cannot read directly from it. In fact, this memory
    area is virtual and, as such, it cannot actually be mapped into real physical
    memory when our driver''s `write()` method is executed! In order to address this
    situation, the kernel provides the `copy_from_user()` function, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从`write()`内核原型中可以看出，`buf`参数带有`__user`属性，这表明这个缓冲区来自用户空间，因此我们不能直接从中读取。实际上，这个内存区域是虚拟的，因此在执行我们的驱动程序的`write()`方法时，它实际上不能映射到真正的物理内存中！为了解决这种情况，内核提供了`copy_from_user()`函数，如下所示：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we can see, this function takes data from the user space buffer, `from`,
    and then, after verifying that the memory area pointed by `from` is OK for reading,
    copies them to the buffer pointed by `to`. Once the data has been transferred
    to the kernel space (inside the buffer pointed by `to`), our driver can access
    it freely.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这个函数从用户空间缓冲区`from`中获取数据，然后在验证指向`from`的内存区域可以进行读取后，将它们复制到指向`to`的缓冲区中。一旦数据被传输到内核空间（在`to`指向的缓冲区内），我们的驱动程序就可以自由访问它。
- en: These same steps (even if in the opposite direction) are performed for the `read()` system
    call. We still have a file descriptor, `fd`; a buffer, `buf`, into which read
    data has to be placed, and its `count` size. Then, the system call returns a value
    that can be negative (if there are errors), positive (which means how many bytes
    have been actually read), or zero (which means we are at end-of-file).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`read()`系统调用，执行相同的步骤（即使是相反的方向）。我们仍然有一个文件描述符`fd`；一个缓冲区`buf`，用于存放读取的数据，以及它的`count`大小。然后，系统调用返回一个值，可以是负值（如果有错误），正值（表示实际读取的字节数），或零（表示我们已经到达文件末尾）。
- en: Again, we should notice that `count` is **not** how many bytes we wish to read
    but just the buffer size. In fact, `read()` can return a positive value smaller
    than `count`, which is why I put it inside a `for()` loop in the `chrdev_test.c` program.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们应该注意`count`不是我们希望读取的字节数，而只是缓冲区的大小。实际上，`read()`可以返回小于`count`的正值，这就是为什么我在`chrdev_test.c`程序中将其放在`for()`循环中的原因。
- en: More significantly than in the preceding `write()` case, the `read()` system
    call can also return `0`, which means **end-of-file**; that is, no more data is
    available from this file descriptor and we should stop reading.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的`write()`情况相比，`read()`系统调用还可以返回`0`，表示**文件末尾**；也就是说，从这个文件描述符中没有更多的数据可用，我们应该停止读取。
- en: 'As for the preceding `write()` case, we still have the `__user` attribute associated
    with the buffer pointed by `buf`, which means that to read data from it, we must
    use the `copy_to_user()` function, which is defined as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的`write()`情况一样，`buf`指向的缓冲区仍然带有`__user`属性，这意味着要从中读取数据，我们必须使用`copy_to_user()`函数，其定义如下：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Both `copy_from_user()` and `copy_to_user()` are defined in the `linux/include/linux/uaccess.h` file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy_from_user()`和`copy_to_user()`都在`linux/include/linux/uaccess.h`文件中定义。'
- en: Now, before the end of this section, we have to spend some time on the `ppos` pointer, which
    is present in both of the kernel prototypes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在本节结束之前，我们必须花一些时间来讨论内核原型中存在的`ppos`指针。
- en: When we wish to read some data stored in a file, we have to use the `read()` system
    call several times (especially if the file is quite big and our memory buffer
    is small). To do this, we'd like to simply call `read()` multiple times without
    bothering to keep track of where we arrived in each of the previous iterations;
    for example, if we have a file with a size of 16 KB and we wish to read it by
    using a 4 KB memory buffer, we simply call the `read()` system call four times,
    but how is each call supposed to know where the previous one finished its job?
    Well, this task is assigned to the `ppos` pointer: when the file is opened, it
    starts by pointing at the first byte of the file (at index 0) and then, each time `read()` is
    called, the system call itself moves it to the next position so that the following `read()` call
    knows exactly where it should start reading the next chunk of data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望读取文件中存储的一些数据时，我们必须多次使用 `read()` 系统调用（特别是如果文件很大而我们的内存缓冲区很小）。为了做到这一点，我们希望简单地多次调用
    `read()` 而不必担心在每个前一次迭代中到达的位置；例如，如果我们有一个大小为 16 KB 的文件，并且希望使用 4 KB 内存缓冲区来读取它，我们只需调用
    `read()` 系统调用四次，但是每次调用应该如何知道前一个调用完成了它的工作？嗯，这个任务被分配给了 `ppos` 指针：当文件被打开时，它开始指向文件的第一个字节（索引为
    0），然后每次调用 `read()` 时，系统调用本身将它移动到下一个位置，以便接下来的 `read()` 调用知道它应该从哪里开始读取下一块数据。
- en: Note that `ppos` is unique for both read and write operations, so if we perform `read()` first and
    then `write()`, the data will be written, not at beginning of the file, but exactly
    where the preceding `read()` call finished its operation!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`ppos` 对于读操作和写操作都是唯一的，因此如果我们先执行 `read()`，然后再执行 `write()`，数据将被写入的位置不是文件的开头，而是在前一个
    `read()` 调用完成其操作的地方！
