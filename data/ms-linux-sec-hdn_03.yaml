- en: Securing Your Server with a Firewall
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用防火墙保护您的服务器
- en: Security is one of those things that's best done in layers. *Security-in-depth*,
    we call it. So, on any given corporate network, you will find a firewall appliance
    separating the internet from the **demilitarized zone** (**DMZ**), where your
    internet-facing servers are kept. You will also find a firewall appliance between
    the DMZ and the internal LAN, and firewall software installed on each individual
    server and client. We want to make it as tough as possible for intruders to reach
    their final destinations within our networks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是最好分层处理的事情之一。我们称之为*深度安全*。因此，在任何公司网络上，您都会发现一个防火墙设备将互联网与**非军事区**（**DMZ**）分开，您的面向互联网的服务器就在其中。您还会在DMZ和内部局域网之间发现防火墙设备，并在每台独立的服务器和客户端上安装防火墙软件。我们希望尽可能地让入侵者难以到达我们网络中的最终目的地。
- en: Interestingly though, of all the major Linux distros, only the SUSE distros
    and the Red Hat-type distros come with firewalls already set up and enabled. When
    you look at your Ubuntu virtual machine, you'll see that it's wide open, as if
    it were extending a hearty welcome to any would-be intruder.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，尽管所有主要的Linux发行版中，只有SUSE发行版和Red Hat类型的发行版已经设置并启用了防火墙。当您查看您的Ubuntu虚拟机时，您会发现它是完全开放的，就好像它在热烈欢迎任何潜在的入侵者一样。
- en: Since the focus of this book is on hardening our Linux servers, we'll focus
    this chapter on that last level of defense, the firewalls on our servers and clients.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的重点是加固我们的Linux服务器，我们将把本章重点放在我们服务器和客户端上的最后一道防线，即防火墙上。
- en: 'In this chapter, we''ll cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: An overview of iptables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iptables的概述
- en: Uncomplicated Firewall for Ubuntu systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu系统的Uncomplicated Firewall
- en: firewalld for Red Hat systems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat系统的firewalld
- en: nftables, a more universal type of firewall system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nftables，一种更通用的防火墙系统
- en: An overview of iptables
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iptables的概述
- en: 'A common misconception is that iptables is the name of the Linux firewall.
    In reality, the name of the Linux firewall is **netfilter** and every Linux distro
    has it built-in. What we know as iptables is just one of several command-line
    utilities that we can use to manage netfilter. It was originally introduced as
    a feature of Linux kernel, version 2.6, so it''s been around for a long time.
    With iptables, you do have a few advantages:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的误解是iptables是Linux防火墙的名称。实际上，Linux防火墙的名称是**netfilter**，每个Linux发行版都内置了它。我们所知道的iptables只是我们可以用来管理netfilter的几个命令行实用程序之一。它最初是作为Linux内核2.6版本的一个功能引入的，所以它已经存在了很长时间。使用iptables，您确实有一些优势：
- en: It's been around long enough that most Linux admins already know how to use
    it
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它已经存在了足够长的时间，以至于大多数Linux管理员已经知道如何使用它
- en: It's easy to use iptables commands in shell scripts to create your own custom
    firewall configuration
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在shell脚本中使用iptables命令创建自己的自定义防火墙配置很容易
- en: It has great flexibility, in that you can use it to set up a simple port filter,
    a router, or a virtual private network
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有很大的灵活性，您可以使用它来设置一个简单的端口过滤器、路由器或虚拟专用网络
- en: It comes preinstalled on pretty much every Linux distro, although most distros
    don't come with it preconfigured
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它预装在几乎每个Linux发行版上，尽管大多数发行版不会预先配置它
- en: It's very well documented, with free of charge, book-length tutorials available
    on the internet
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有很好的文档，可以在互联网上免费获得书籍长度的教程
- en: 'But, as you might know, there are also a few disadvantages:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可能知道，也有一些缺点：
- en: IPv4 and IPv6 require their own special implementation of iptables. So, if your
    organization still needs to run IPv4 while in the process of migrating to IPv6,
    you'll have to configure two firewalls on each server, and run a separate daemon
    for each (one for IPv4, the other for IPv6).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv4和IPv6需要它们自己特殊的iptables实现。因此，如果您的组织在迁移到IPv6的过程中仍需要运行IPv4，您将不得不在每台服务器上配置两个防火墙，并为每个运行单独的守护程序（一个用于IPv4，另一个用于IPv6）。
- en: If you need to do Mac bridging that requires **ebtables**, which is the third
    component of iptables, with its own unique syntax.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要进行需要**ebtables**的Mac桥接，这是iptables的第三个组件，具有自己独特的语法。
- en: arptables, the fourth component of iptables, also requires its own daemon and
    syntax.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: arptables，iptables的第四个组件，也需要自己的守护程序和语法。
- en: Whenever you add a rule to a running iptables firewall, the entire iptables
    ruleset has to be reloaded, which can have a huge impact on performance.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当您向正在运行的iptables防火墙添加规则时，整个iptables规则集都必须重新加载，这可能会对性能产生巨大影响。
- en: Until recently, iptables was the default firewall manager on every Linux distro.
    It still is on most distros, but Red Hat Enterprise Linux 7 and all of its offspring
    now use a newer technology called **firewalld**. Ubuntu comes with **Uncomplicated
    Firewall** (**ufw**), an easy-to-use frontend for iptables. An even newer technology
    that we'll explore at the end of the chapter is **nftables**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，iptables是每个Linux发行版上的默认防火墙管理器。大多数发行版仍然是如此，但Red Hat Enterprise Linux 7及其所有后代现在使用了一种称为**firewalld**的新技术。Ubuntu自带**Uncomplicated
    Firewall**（**ufw**），这是一个易于使用的iptables前端。我们将在本章末尾探讨一种更新的技术**nftables**。
- en: For the purposes of this chapter, we'll only look at the IPv4 component of iptables.
    (The syntax for the IPv6 component would be very similar.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是只看iptables的IPv4组件。（IPv6组件的语法会非常相似。）
- en: Basic usage of iptables
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iptables的基本用法
- en: 'iptables consists of four tables of rules, each with its own distinct purpose:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: iptables由四个规则表组成，每个表都有自己独特的目的：
- en: '**Filter table**: For basic protection of our servers and clients, this is
    the only table that we would normally use'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤表**：对于我们的服务器和客户端的基本保护，这是我们通常会使用的唯一表'
- en: '**NAT table**: **Network Address Translation** (**NAT**) is used to connect
    the public internet to private networks'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NAT表**：**网络地址转换**（**NAT**）用于将公共互联网连接到私有网络'
- en: '**Mangle table**: This is used to alter network packets as they go through
    the firewall'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**篡改表**：这用于在网络数据包通过防火墙时进行更改'
- en: '**Security table**: The security table is only used for systems that have SELinux
    installed'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全表**：安全表仅用于安装了SELinux的系统'
- en: Since we're currently only interested in basic host protection, we'll only look
    at the filter table. Each table consists of chains of rules, and the filter table
    consists of the `INPUT`, `FORWARD`, and `OUTPUT` chains. Since our CentOS 7 machine
    uses Red Hat's firewalld, we'll look at this on our Ubuntu machine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们目前只对基本主机保护感兴趣，我们只会查看过滤器表。每个表由规则链组成，过滤器表由`INPUT`，`FORWARD`和`OUTPUT`链组成。由于我们的CentOS
    7机器使用Red Hat的firewalld，我们将在我们的Ubuntu机器上查看这个。
- en: While it's true that Red Hat Enterprise Linux 7 and its offspring do come with
    iptables already installed, it's disabled by default so that we can use firewalld.
    It's not possible to have both iptables and firewalld running at the same time,
    because they're two totally different animals that are completely incompatible.
    So, if you need to run iptables on a Red Hat 7 system, you can do so, but you
    must disable firewalld first.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Red Hat Enterprise Linux 7及其后代确实已经安装了iptables，但默认情况下已禁用，以便我们可以使用firewalld。不可能同时运行iptables和firewalld，因为它们是两种完全不兼容的完全不同的动物。因此，如果您需要在Red
    Hat 7系统上运行iptables，可以这样做，但必须首先禁用firewalld。
- en: However, if your organization is still running its network with version 6 of
    either Red Hat or CentOS, then your machines are still running with iptables,
    since firewalld isn't available for them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的组织仍在使用Red Hat或CentOS的第6版运行其网络，则您的机器仍在使用iptables，因为firewalld对它们不可用。
- en: 'We''ll first look at our current configuration with `sudo iptables -L` command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用`sudo iptables -L`命令查看当前配置：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And remember, we said that you need a separate component of iptables to deal
    with IPv6\. Here we will use `sudo ip6tables -L` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 而且请记住，我们说您需要一个独立的iptables组件来处理IPv6。在这里，我们将使用`sudo ip6tables -L`命令：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In both cases, you see that there are no rules, and that the machine is wide
    open. Unlike the SUSE and Red Hat folk, the Ubuntu folk expect you to do the work
    of setting up a firewall. We''ll start by creating a rule that will allow the
    passage of incoming packets from servers to which our host has requested a connection:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，您会看到没有规则，并且机器是完全开放的。与SUSE和Red Hat的人不同，Ubuntu的人希望您自己设置防火墙。我们将首先创建一个规则，允许来自我们的主机请求连接的服务器的传入数据包通过：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the breakdown of this command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个命令的分解：
- en: '`-A INPUT`: The `-A` places a rule at the end of the specified chain, which
    in this case is the `INPUT` chain. We would have used a `-I` had we wanted to
    place the rule at the beginning of the chain.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-A INPUT`：`-A`将规则放在指定链的末尾，本例中是`INPUT`链。如果我们想要将规则放在链的开头，我们将使用`-I`。'
- en: '`-m`: This calls in an iptables module. In this case, we''re calling in the
    `conntrack` module for tracking connection states. This module allows iptables
    to determine whether our client has made a connection to another machine, for
    example.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`：这调用了一个iptables模块。在这种情况下，我们调用`conntrack`模块来跟踪连接状态。这个模块允许iptables确定我们的客户端是否与另一台机器建立了连接。'
- en: '`--ctstate`: The `ctstate` or connection state, portion of our rule is looking
    for two things. First, it''s looking for a connection that the client established
    with a server. Then, it looks for the related connection that''s coming back from
    the server, in order to allow it to connect to the client. So, if a user were
    to use a web browser to connect to a website, this rule would allow packets from
    the web server to pass through the firewall to get to the user''s browser.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--ctstate`：我们的规则的`ctstate`或连接状态部分正在寻找两件事。首先，它正在寻找客户端与服务器建立的连接。然后，它寻找从服务器返回的相关连接，以允许它连接到客户端。因此，如果用户使用Web浏览器连接到网站，此规则将允许来自Web服务器的数据包通过防火墙传递到用户的浏览器。'
- en: '`-j`: This stands for *jump*. Rules jump to a specific target, which in this
    case is `ACCEPT`. (Please don''t ask me who came up with this terminology.) So,
    this rule will accept packets that return from the server with which the client
    has requested a connection.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-j`：这代表*jump*。规则跳转到特定目标，本例中是`ACCEPT`。（请不要问我是谁想出了这个术语。）因此，此规则将接受从客户端请求连接的服务器返回的数据包。'
- en: 'Our new ruleset looks like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新规则集如下：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll next open up port `22` in order to allow us to connect through Secure
    Shell. For now, we don''t want to open any more ports, so we''ll finish this with
    a rule that blocks everything else:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将打开端口`22`，以便允许我们通过安全外壳进行连接。目前，我们不想打开更多的端口，所以我们将以阻止其他所有内容的规则结束：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the breakdown:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是分解：
- en: '`-A INPUT`: As before, we want to place this rule at the end of the INPUT chain
    with a `-A`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-A INPUT`：与以前一样，我们希望使用`-A`将此规则放在INPUT链的末尾。'
- en: '`-p tcp`: The `-p` indicates the protocol that this rule affects. This rule
    affects the TCP protocol, of which Secure Shell is a part.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p tcp`：`-p`表示此规则影响的协议。此规则影响TCP协议，其中安全外壳是其中的一部分。'
- en: '`--dport ssh`: When an option name consists of more than one letter, we need
    to precede it with two dashes, instead of just one. The `--dport` option specifies
    the destination port on which we want this rule to operate. (Note that we could
    also have listed this portion of the rule as `--dport 22`, since `22` is the number
    of the SSH port.)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dport ssh`：当选项名称由多个字母组成时，我们需要在其前面加上两个破折号，而不是一个。`--dport`选项指定我们希望此规则操作的目标端口。（请注意，我们也可以将规则的这部分列为`--dport
    22`，因为`22`是SSH端口的编号。）'
- en: '`-j ACCEPT`: Put it all together with `-j ACCEPT`, and we have a rule that
    allows other machines to connect to this one through Secure Shell.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-j ACCEPT`：将所有内容与`-j ACCEPT`放在一起，我们就有了一个允许其他机器通过安全外壳连接到这台机器的规则。'
- en: The `DROP` rule at the end silently blocks all connections and packets that
    aren't specifically allowed in by our two `ACCEPT` rules.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的`DROP`规则悄悄地阻止所有未经特别允许的连接和数据包。
- en: 'There are actually two ways in which we could have written that final blocking
    rule:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以以两种方式编写最终的阻止规则：
- en: '`sudo iptables -A INPUT -j DROP`: It causes the firewall to silently block
    packets, without sending any notification back to the source of those packets.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo iptables -A INPUT -j DROP`：它会导致防火墙默默地阻止数据包，而不会向这些数据包的源发送任何通知。'
- en: '`sudo iptables -A INPUT -j REJECT`: It would also cause the firewall to block
    packets, but it would also send a message back to the source about the fact that
    the packets have been blocked. In general, it''s better to use `DROP`, because
    we normally want to make it harder for malicious actors to figure out what our
    firewall configuration is.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo iptables -A INPUT -j REJECT`：它也会导致防火墙阻止数据包，但它还会向源发送有关数据包被阻止的消息。一般来说，最好使用`DROP`，因为我们通常希望使恶意行为者更难以弄清楚我们的防火墙配置。'
- en: Either way, you always want to have this rule at the end of the chain, because
    any `ALLOW` rule that comes after it will have no effect.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，您总是希望将此规则放在链的末尾，因为在它之后的任何`ALLOW`规则都将不起作用。
- en: 'Finally, we have an almost complete, usable ruleset for our `INPUT` chain:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们对`INPUT`链有了一个几乎完整的、可用的规则集：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It''s almost complete, because there''s still one little thing that we forgot.
    That is, we need to allow traffic for the loopback interface. That''s okay, because
    it gives us a good chance to see how to insert a rule where we want it, if we
    don''t want it at the end. In this case, we''ll insert the rule at `INPUT 1`,
    which is the first position of the `INPUT` chain:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它几乎完成了，因为还有一件小事我们忘了。也就是说，我们需要允许环回接口的流量。这没关系，因为这给了我们一个很好的机会，看看如果我们不想把它放在最后，我们如何在想要的位置插入规则。在这种情况下，我们将在`INPUT
    1`处插入规则，这是`INPUT`链的第一个位置：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we look at our new ruleset, we''ll see something that''s rather strange:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看我们的新规则集时，我们会看到一些非常奇怪的东西：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hmmm...
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯...
- en: 'The first rule and the last rule look the same, except that one is a `DROP`
    and the other is an `ACCEPT`. Let''s look at it again with the `-v` option:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则和最后一条规则看起来是一样的，只是一个是`DROP`，另一个是`ACCEPT`。让我们再次使用`-v`选项查看一下：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we see that `lo`, for loopback, shows up under the `in` column of the
    first rule, and `any` shows up under the `in` column of the last rule. This all
    looks great, except that if we were to reboot the machine right now, the rules
    would disappear. The final thing that we need to do is make them permanent. There
    are several ways to do this, but the simplest way to do this on an Ubuntu machine
    is to install the `iptables-persistent` package:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们看到`lo`，即环回，出现在第一条规则的`in`列下，`any`出现在最后一条规则的`in`列下。这一切看起来很不错，除了如果我们现在重新启动机器，规则将消失。我们需要做的最后一件事是使它们永久。有几种方法可以做到这一点，但在Ubuntu机器上最简单的方法是安装`iptables-persistent`软件包：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'During the installation process, you''ll be presented with two screens that
    ask whether you want to save the current set of iptables rules. The first screen
    will be for IPv4 rules, and the second will be for IPv6 rules:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，您将看到两个屏幕，询问您是否要保存当前的iptables规则集。第一个屏幕将用于IPv4规则，第二个屏幕将用于IPv6规则：
- en: '![](img/052567bc-129d-4fcc-a237-81b925648105.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/052567bc-129d-4fcc-a237-81b925648105.png)'
- en: 'You''ll now see two new rules files in the `/etc/iptables` directory:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将在`/etc/iptables`目录中看到两个新的规则文件：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you were to now reboot the machine, you'd see that your iptables rules are
    still there and in effect.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在重新启动机器，您会看到您的iptables规则仍然存在并生效。
- en: Hands-on lab for basic iptables usage
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本iptables用法的实验室
- en: You'll do this lab on your Ubuntu virtual machine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在您的Ubuntu虚拟机上进行此实验室。
- en: Shut down your Ubuntu virtual machine, and create a snapshot.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭您的Ubuntu虚拟机，并创建一个快照。
- en: You'll roll back to this snapshot for the lab in the next section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在下一节的实验室中回滚到此快照。
- en: 'Look at your iptables rules, or lack thereof, with:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令查看您的iptables规则，或者缺少规则：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create the rules that you need for a basic firewall, allowing for Secure Shell
    access but denying everything else:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建您需要的基本防火墙规则，允许安全外壳访问，但拒绝其他所有内容：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'View the results with:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令查看结果：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Oops, it looks like you forgot about that loopback interface. Add a rule for
    it at the top of the list:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哎呀，看来您忘记了环回接口。在列表顶部为其添加一个规则：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'View the results with these two commands. Note the difference between the output
    of each:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这两个命令查看结果。注意每个输出之间的差异：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Install the `iptables-persistent` package, and choose to save the IPv4 and
    IPv6 rules when prompted:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`iptables-persistent`软件包，并在提示时选择保存IPv4和IPv6规则：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Reboot the virtual machine and verify that your rules are still active.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动虚拟机，并验证您的规则是否仍然有效。
- en: End of lab.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验室结束。
- en: Now, I know you're thinking, "*Wow, that's a lot of hoops to jump through just
    to set up a basic firewall*." And yeah, you're right. So, give me a moment to
    get rid of what I just did with iptables, and I'll show you what the Ubuntu folk
    came up with to make things simpler.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我知道你在想，“*哇，为了设置一个基本防火墙，要跳过这么多环节*。”是的，你是对的。所以，请给我一点时间来摆脱我刚刚用iptables做的事情，我会向您展示Ubuntu人民是如何简化事情的。
- en: You can get the whole scoop on how to do iptables on Ubuntu here: [https://help.ubuntu.com/community/IptablesHowTo](https://help.ubuntu.com/community/IptablesHowTo).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里了解如何在Ubuntu上使用iptables的全部信息：[https://help.ubuntu.com/community/IptablesHowTo](https://help.ubuntu.com/community/IptablesHowTo)。
- en: Uncomplicated Firewall for Ubuntu systems
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu系统的Uncomplicated Firewall
- en: The Uncomplicated Firewall is already installed on your Ubuntu machine. It still
    uses the iptables service, but it offers a vastly simplified set of commands.
    Perform just one simple command to enable it, and you have a good, preconfigured
    firewall. There's a graphical frontend for use on desktop machines, but since
    we're learning about server security, we'll just cover the command-line utility
    here.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Uncomplicated Firewall已经安装在您的Ubuntu机器上。它仍然使用iptables服务，但提供了一组大大简化的命令。执行一个简单的命令来启用它，您就有了一个良好的、预配置的防火墙。桌面机器上有一个图形化的前端，但由于我们正在学习服务器安全性，我们只会在这里介绍命令行实用程序。
- en: Basic usage of ufw
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ufw的基本用法
- en: 'ufw is disabled by default, so you''ll need to enable it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ufw默认处于禁用状态，因此您需要启用它：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To do this, I logged in to the virtual machine remotely from a terminal of my
    trusty OpenSUSE workstation. It gave me a warning that my Secure Shell connection
    could be disrupted, but that didn't happen. (It could be because of connection
    tracking rules, or it could be that I just got lucky.) I'll leave it up to you
    to do a `sudo iptables -L`, because ufw creates a very large default ruleset that
    would be impossible to display in this book.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我从我信任的OpenSUSE工作站的终端远程登录到了虚拟机。它警告我说我的安全Shell连接可能会中断，但并没有发生。 （这可能是因为连接跟踪规则，也可能是我运气好。）我会留给你去运行`sudo
    iptables -L`，因为ufw创建了一个非常庞大的默认规则集，这在这本书中是不可能显示的。
- en: 'Next, let''s add a rule that will allow us to remotely connect through Secure
    Shell in the future:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一条规则，以便将来可以通过安全Shell进行远程连接：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Do a `sudo iptables -L`, and you''ll see that the new rule shows up in the
    `ufw-user-input` chain:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`sudo iptables -L`，你会看到新规则出现在`ufw-user-input`链中：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the preceding `sudo ufw allow 22/tcp` command, we had to specify the TCP
    protocol, because TCP is all that we need for Secure Shell. We can also open a
    port for both TCP and UDP just by not specifying a protocol. For example, if you''re
    setting up a DNS server, you''ll want to have port `53` open for both protocols
    (you''ll see the entries for port `53` listed as `domain` ports):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`sudo ufw allow 22/tcp`命令中，我们必须指定TCP协议，因为TCP是我们安全Shell所需的。我们也可以只通过不指定协议来为TCP和UDP打开端口。例如，如果你正在设置DNS服务器，你会希望为两种协议打开端口`53`（你会看到端口`53`的条目列为`domain`端口）：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you do `sudo ip6tables -L`, you'll see that a rule for IPv6 also got added
    for both of the two preceding examples.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`sudo ip6tables -L`，你会看到IPv6的规则也被添加到了前面两个示例中。
- en: Hands-on lab for basic ufw usage
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本ufw使用的实验。
- en: 'You''ll do this lab on a clean snapshot of your Ubuntu virtual machine:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在你的Ubuntu虚拟机的干净快照上进行这个实验：
- en: Shut down your Ubuntu virtual machine and restore the snapshot. (You want to
    do this to get rid of all of the iptables stuff that you just did.)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭你的Ubuntu虚拟机并恢复快照。（你要这样做是为了摆脱你刚刚做的所有iptables的东西。）
- en: 'When you''ve restarted the virtual machine, verify that the iptables rules
    are now gone:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你重新启动虚拟机后，验证iptables规则现在已经消失：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'View the status of ufw, enable it, and view the results:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看ufw的状态，启用它，并查看结果：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open port `22/tcp` to allow Secure Shell access:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`22/tcp`端口以允许安全Shell访问：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This time, open port `53` for both TCP and UDP:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，为TCP和UDP同时打开端口`53`：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: End of lab.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: firewalld for Red Hat systems
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Red Hat系统的firewalld
- en: So far, we've looked at iptables, a generic firewall management system that's
    available on all Linux distros, and ufw, which is only available for Ubuntu. For
    our next act, we turn our attention to **firewalld**, which is specific to Red
    Hat Enterprise Linux 7 and all of its offspring.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过iptables，这是一个通用的防火墙管理系统，适用于所有的Linux发行版，以及ufw，它只适用于Ubuntu。接下来，我们将把注意力转向**firewalld**，它是专门针对Red
    Hat Enterprise Linux 7及其所有后代的。
- en: Unlike ufw for Ubuntu, firewalld isn't just an easy-to-use frontend for iptables.
    Rather, it's an entirely new way of doing your firewall business, and it isn't
    compatible with iptables. Understand, though, that iptables still comes installed
    on the Red Hat 7 family, but it isn't enabled, because you can't have iptables
    and firewalld enabled at the same time. If you have to use older shell scripts
    that leverage iptables, you can disable firewalld and enable iptables.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与Ubuntu的ufw不同，firewalld不仅仅是iptables的易于使用的前端。相反，它是一个全新的防火墙业务方式，并且与iptables不兼容。不过，要明白的是，iptables仍然安装在Red
    Hat 7系列上，但没有启用，因为你不能同时启用iptables和firewalld。如果你必须使用利用iptables的旧shell脚本，你可以禁用firewalld并启用iptables。
- en: The reason that iptables and firewalld are incompatible is that iptables stores
    its rules in plain text files in the `/etc/sysconfig` directory, and firewalld
    stores its rules files in `.xml` format files in the `/etc/firewalld` directory
    and in the `/usr/lib/firewalld` directory. Also, iptables doesn't understand the
    concepts of zones and services the way that firewalld does, and the rules themselves
    are of a completely different format. So, even if you could have both iptables
    and firewalld running at the same time, you'd just end up confusing the system
    and breaking the firewall.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: iptables和firewalld不兼容的原因是，iptables将其规则存储在`/etc/sysconfig`目录中的纯文本文件中，而firewalld将其规则文件存储在`/etc/firewalld`目录和`/usr/lib/firewalld`目录中的`.xml`格式文件中。此外，iptables不理解firewalld所理解的区域和服务的概念，规则本身的格式也完全不同。因此，即使你可以同时运行iptables和firewalld，你最终只会混淆系统并破坏防火墙。
- en: The bottom line is, you can run either iptables or firewalld on your Red Hat
    or CentOS machine, but you can't run both at the same time.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，你可以在Red Hat或CentOS机器上运行iptables或firewalld，但不能同时运行两者。
- en: If you're running Red Hat or CentOS on a desktop machine, you'll see in the
    applications menu that there is a GUI frontend for firewalld. On a text-mode server,
    though, all you have is the firewalld commands. For some reason, the Red Hat folk
    haven't created an ncurses-type program for text-mode servers, the way they did
    for iptables configuration on older versions of Red Hat.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在桌面机上运行Red Hat或CentOS，你会在应用程序菜单中看到有一个firewalld的GUI前端。然而，在文本模式服务器上，你只能使用firewalld命令。出于某种原因，Red
    Hat的人们没有为文本模式服务器创建一个类似ncurses的程序，就像他们在旧版本的Red Hat上为iptables配置所做的那样。
- en: A big advantage of firewalld is the fact that it's dynamically managed. That
    means that you can change the firewall configuration without restarting the firewall
    service, and without interrupting any existing connections to your server.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: firewalld的一个重要优势是它是动态管理的。这意味着你可以在不重启防火墙服务的情况下更改防火墙配置，并且不会中断到服务器的任何现有连接。
- en: Verifying the status of firewalld
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证firewalld的状态
- en: 'Let''s start by verifying the status of firewalld. There are two ways to do
    this. We can use the `--state` option of `firewall-cmd`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先验证firewalld的状态。有两种方法可以做到这一点。我们可以使用`firewall-cmd`的`--state`选项：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Or, if we want a more detailed status, we can just check the daemon, the same
    as we would any other daemon on a systemd machine:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想要更详细的状态，我们可以像检查systemd机器上的任何其他守护程序一样检查守护程序：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: firewalld zones
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: firewalld区域
- en: 'firewalld is a rather unique animal, in that it comes with several preconfigured
    zones and services. If you look in the `/usr/lib/firewalld/zones` directory of
    your CentOS machine, you''ll see the zones files, all in `.xml` format:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: firewalld是一个相当独特的工具，因为它带有几个预配置的区域和服务。如果您查看您的CentOS机器的`/usr/lib/firewalld/zones`目录，您将看到以`.xml`格式的区域文件：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Each zone file specifies which ports are to be open, and which ones are to be
    blocked for various given scenarios. Zones can also contain rules for ICMP messages,
    forwarded ports, masquerading information, and rich language rules.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区域文件都指定了要打开的端口以及要为各种给定情况阻止的端口。区域还可以包含有关ICMP消息、转发端口、伪装信息和丰富语言规则的规则。
- en: 'For example, the `.xml` file for the public zone, which is set as the default,
    looks like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，公共区域的`.xml`文件，它被设置为默认值，看起来像这样：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `service name` lines, you can see that the only open ports are for Secure
    Shell access and for DHCPv6 discovery. Look at the `home.xml` file, and you''ll
    see that it also opens the ports for Multicast DNS, and the ports that allow this
    machine to access shared directories from either Samba servers or Windows servers:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在`service name`行中，您可以看到唯一打开的端口是用于安全外壳访问和用于DHCPv6发现的端口。查看`home.xml`文件，您将看到它还打开了用于多播DNS的端口，以及允许此计算机从Samba服务器或Windows服务器访问共享目录的端口：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `firewall-cmd` utility is what you would use to configure firewalld. You
    can use it to view the list of zone files on your system, without having to `cd`
    into the zone file directory:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`firewall-cmd`实用程序是您用于配置firewalld的工具。您可以使用它查看系统上区域文件的列表，而无需`cd`到区域文件目录中：'
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'A quick way to see how each zone is configured is to use the `--list-all-zones`
    option:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 查看每个区域配置的快速方法是使用`--list-all-zones`选项：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Of course, this is only a portion of the output, because the listing for all
    zones is more than we can display here. More likely, you''ll just want to see
    information about one particular zone:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是输出的一部分，因为所有区域的列表超出了我们可以在这里显示的范围。更有可能的是，您只想查看有关特定区域的信息：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: So, the `internal` zone allows the `ssh`, `mdns`, `samba-client`, and `dhcpv6-client`
    services. This would be handy for setting up client machines on your internal
    LAN.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`internal`区域允许`ssh`、`mdns`、`samba-client`和`dhcpv6-client`服务。这对于在内部局域网上设置客户端机器非常方便。
- en: 'Any given server or client will have one or more installed network interface
    adapter. Each adapter in a machine can be assigned one, and only one, firewalld
    zone. To see the default zone:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 任何给定的服务器或客户端都将安装一个或多个网络接口适配器。机器中的每个适配器可以分配一个且仅一个firewalld区域。要查看默认区域：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'That''s great, except that it doesn''t tell you anything about which network
    interface is associated with this zone. To see that information:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但它并没有告诉您与该区域关联的任何网络接口的信息。要查看该信息：
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'When you first install Red Hat or CentOS, the firewall will already be active
    with the public zone as the default. Now, let''s say that you''re setting up your
    server in the DMZ, and you want to make sure that its firewall is locked down
    for that. You can change the default zone to the `dmz` zone. Let''s take a look
    at the `dmz.xml` file to see what that does for us:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次安装Red Hat或CentOS时，防火墙将已经处于活动状态，并且公共区域将作为默认值。现在，假设您正在将服务器设置在DMZ中，并且希望确保其防火墙针对此进行了锁定。您可以将默认区域更改为`dmz`区域。让我们看看`dmz.xml`文件，看看它对我们有什么作用：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'So, the only thing that the DMZ allows through is the Secure Shell. Okay, that''s
    good enough for now, so let''s set the `dmz` zone as the default:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，DMZ允许的唯一事物是安全外壳。好的，现在足够了，让我们将`dmz`区域设置为默认值：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We''ll verify:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将验证：
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: And we're all good. Except, that is, that an internet-facing server in the DMZ
    probably needs to do more than just allow SSH connections. This is where we'll
    use the firewalld services. But, before we look at that, let's consider one more
    important point.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一切都很好。除了在DMZ中面向互联网的服务器可能需要做的不仅仅是允许SSH连接。这就是我们将使用firewalld服务的地方。但是，在我们看看之前，让我们考虑另一个重要的问题。
- en: 'You never want to modify the files in the `/usr/lib/firewalld` directory. Whenever
    you modify the firewalld configuration, you''ll see the modified files show up
    in the `/etc/firewalld` directory. So far, all we''ve modified is the default
    zone. So, we''ll see this in `/etc/firewalld`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 不要修改`/usr/lib/firewalld`目录中的文件。每当您修改firewalld配置时，您会看到修改后的文件出现在`/etc/firewalld`目录中。到目前为止，我们只修改了默认区域。因此，我们将在`/etc/firewalld`中看到这个：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can do a `diff` on those two files to see the difference between them:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对这两个文件进行`diff`，以查看它们之间的差异：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So, the newer of the two files shows that the `dmz` zone is now the default.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这两个文件中较新的文件显示`dmz`区域现在是默认区域。
- en: 'To get more information about firewalld zones, enter:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关firewalld区域的更多信息，请输入：
- en: '`man firewalld.zones`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`man firewalld.zones`'
- en: firewalld services
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: firewalld服务
- en: Each service file contains a list of ports that need to be opened for a particular
    service. Optionally, the service files may contain one or more destination addresses,
    or call in any needed modules, such as for connection tracking. For some services,
    all you need to do is to open just one port. Other services, such as the Samba
    service, require that multiple ports be opened. Either way, it's sometimes handier
    to remember the service name, rather than the port numbers, that goes with each
    service.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务文件都包含需要为特定服务打开的端口列表。可选地，服务文件可能包含一个或多个目标地址，或调用任何所需的模块，例如用于连接跟踪。对于某些服务，您只需要打开一个端口。其他服务，例如Samba服务，需要打开多个端口。无论哪种方式，有时记住与每个服务相关的服务名称比端口号更方便。
- en: 'The services files are in the `/usr/lib/firewalld/services` directory. You
    can look at the list of them with the `firewall-cmd` command, just as you could
    do with the list of zones:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 服务文件位于`/usr/lib/firewalld/services`目录中。您可以使用`firewall-cmd`命令查看它们的列表，就像您可以查看区域列表一样：
- en: '[PRE40]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `dropbox-lansync` service would be very handy for us Dropbox users. Let''s
    see which ports this opens:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropbox-lansync`服务对我们Dropbox用户非常有用。让我们看看这打开了哪些端口：'
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: It looks like Dropbox uses ports `17500` UDP and TCP.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来Dropbox使用端口`17500` UDP和TCP。
- en: 'Now, let''s say that we have our web server set up in the DMZ, with the `dmz`
    zone set as its default:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们在DMZ中设置了我们的Web服务器，并将`dmz`区域设置为其默认值：
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As we saw before, the Secure Shell port is the only one that''s open. Let''s
    fix that so that users can actually access our website:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，只有安全外壳端口是打开的。让我们修复一下，以便用户实际访问我们的网站：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'When we look at the info for the `dmz` zone again, we''ll see:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次查看`dmz`区域的信息时，我们会看到：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We see that the `http` service is now allowed through. But look what happens
    when we add the `--permanent` option to this `info` command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`http`服务现在是允许的。但是当我们在`info`命令中添加`--permanent`选项时会发生什么：
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Oops! The `http` service isn't here. What's going on?
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕！`http`服务不在这里。怎么回事？
- en: For pretty much every command-line alteration of either zones or services, you
    need to add the `--permanent` option to make the change persistent across reboots.
    But, without that `--permanent` option, the change takes effect immediately. With
    the `--permanent` option, you'll have to reload the firewall configuration in
    order for the change to take effect. To demo, I'm going to reboot the virtual
    machine to get rid of the `http` service.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何命令行对区域或服务的更改，您都需要添加`--permanent`选项，以使更改在重新启动后持久生效。但是，如果没有`--permanent`选项，更改将立即生效。有了`--permanent`选项，您必须重新加载防火墙配置才能使更改生效。为了演示，我将重新启动虚拟机以摆脱`http`服务。
- en: 'Okay, I''ve rebooted, and the `http` service is now gone:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我已经重新启动，`http`服务现在已经消失了：
- en: '[PRE46]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This time, I''ll add two services with just one command, and specify for the
    change to be permanent:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我将使用一个命令添加两个服务，并指定更改为永久性：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can add as many services as you need to with a single command, but you
    have to separate them with commas and enclose the whole list within a pair of
    curly brackets. Let''s look at the results:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用单个命令添加尽可能多的服务，但是您必须用逗号分隔它们，并在一对花括号中将整个列表括起来。让我们看看结果：
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Since we decided to make this configuration permanent, it hasn''t yet taken
    effect. But, if we add the `--permanent` option to this `--info-zone` command,
    we''ll see that the configuration files have indeed been changed:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我们决定将此配置变为永久性后，它还没有生效。但是，如果我们在`--info-zone`命令中添加`--permanent`选项，我们会看到配置文件确实已经更改：
- en: '[PRE49]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We now need to make that change take effect by reloading the configuration:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要通过重新加载配置来使更改生效：
- en: '[PRE50]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Run the `sudo firewall-cmd --info-zone=dmz` command again, and you'll see that
    the new configuration is now in effect.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`sudo firewall-cmd --info-zone=dmz`命令，您将看到新配置现在已生效。
- en: To remove a service from a zone, just replace `--add-service` with `--remove-service`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要从区域中删除服务，只需用`--remove-service`替换`--add-service`。
- en: Note that we never specified which zone we're working with in any of these service
    commands. That's because if we don't specify a zone, firewalld just assumes that
    we're working with the default zone. If you want to add a service to something
    other than the default zone, just add a `--zone=` option to your commands.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在所有这些服务命令中，我们从未指定我们正在处理的区域。这是因为如果我们不指定区域，firewalld会假定我们正在处理默认区域。如果要将服务添加到除默认区域以外的其他区域，只需在命令中添加`--zone=`选项。
- en: Adding ports to a firewalld zone
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向firewalld区域添加端口
- en: 'Having the service files is handy, except that not every service that you''ll
    need to run has its own predefined service file. Let''s say that you''ve installed
    Webmin on your server, which requires port `10000/tcp` to be open. A quick `grep`
    operation will show that port `10000` isn''t in any of our predefined services:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有服务文件很方便，只是并非您需要运行的每个服务都有自己预定义的服务文件。假设您在服务器上安装了Webmin，它需要打开端口`10000/tcp`。快速的`grep`操作将显示端口`10000`不在我们预定义的任何服务中：
- en: '[PRE51]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'So, let''s just add that port to our default zone, which is still the `dmz`
    zone:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们将该端口添加到我们的默认区域，即`dmz`区域：
- en: '[PRE52]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Again, this isn''t permanent, because we didn''t include the `--permanent`
    option. Let''s do it again and then reload:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这不是永久性的，因为我们没有包括`--permanent`选项。让我们再做一次，然后重新加载：
- en: '[PRE53]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can also add multiple ports at once by enclosing the comma-separated list
    within a pair of curly brackets, just as we did with the services (yeah, I purposely
    left the `--permanent` out):'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在一对花括号中包含逗号分隔的列表一次添加多个端口，就像我们在服务中所做的那样（是的，我故意没有加上`--permanent`）：
- en: '[PRE54]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: And of course, you can remove ports from a zone by substituting `--remove-port`
    for `--add-port`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以用`--remove-port`替换`--add-port`来从区域中删除端口。
- en: firewalld rich language rules
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: firewalld丰富的语言规则
- en: What we've looked at so far might be all you'll ever need for general use scenarios,
    but for more granular control, you'll want to know about **rich language rules**.
    (Yes, that really is what they're called.)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看到的可能是您在一般使用场景中所需的全部内容，但是，为了更精细的控制，您需要了解**丰富的语言规则**。（是的，这确实是它们的名称。）
- en: 'Compared to iptables rules, rich language rules are a bit less cryptic, and
    are closer to plain English. So, if you''re new to the business of writing firewall
    rules, you might find rich language a bit easier to learn. On the other hand,
    if you''re already used to writing iptables rules, you might find some elements
    of rich language a bit quirky. Let''s look at one example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 与iptables规则相比，丰富的语言规则稍微不那么神秘，并且更接近普通英语。因此，如果您是新手编写防火墙规则，您可能会发现丰富的语言更容易学习。另一方面，如果您已经习惯编写iptables规则，您可能会发现丰富语言的某些元素有点古怪。让我们看一个例子：
- en: '[PRE55]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'So, we''re adding a rich rule. Note that the entire rule is surrounded by a
    pair of single quotes, and the assigned value for each parameter is surrounded
    by a pair of double quotes. With this rule, we''re saying that we''re working
    with IPv4, and that we want to silently block the `http` port from accepting packets
    from the `200.192.0.0/24` network. We didn''t use the `--permanent` option, so
    this rule will disappear when we reboot the machine. Let''s see what our zone
    looks like with this new rule:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们正在添加一个丰富的规则。请注意，整个规则被一对单引号包围，并且每个参数的分配值被一对双引号包围。使用此规则，我们正在说我们正在使用IPv4，并且我们希望静默地阻止`http`端口接受来自`200.192.0.0/24`网络的数据包。我们没有使用`--permanent`选项，因此当我们重新启动机器时，此规则将消失。让我们看看我们的区域在添加了这条新规则后是什么样子：
- en: '[PRE56]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The rich rule shows up at the bottom. After we''ve tested this rule to make
    sure that it does what we need it to do, we''ll make it permanent:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 丰富的规则显示在底部。在我们测试了这条规则以确保它能够满足我们的需求之后，我们将使其永久化：
- en: '[PRE57]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You could just as easily write a rule for IPv6 by replacing `family="ipv4"`
    with `family="ipv6"`, and supplying the appropriate IPv6 address range.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地通过将`family="ipv4"`替换为`family="ipv6"`并提供适当的IPv6地址范围来为IPv6编写规则。
- en: 'Some rules are generic, and apply to either IPv4 or IPv6\. Let''s say that
    we want to log messages about **Network Time Protocol** (**NTP**) packets, and
    you want to log no more than one message per minute. The command to create that
    rule would look like this:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有些规则是通用的，适用于IPv4或IPv6。假设我们想要记录关于**网络时间协议**（**NTP**）数据包的消息，并且您希望每分钟记录不超过一条消息。创建该规则的命令如下：
- en: '[PRE58]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'There is, of course, a lot more to firewalld rich language rules than we can
    present here. But, you at least now know the basics. For more information, consult
    the `man` page:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，firewalld丰富的语言规则还有很多内容，我们无法在这里全部呈现。但是，至少您现在知道了基础知识。有关更多信息，请参阅`man`页面：
- en: '[PRE59]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Hands-on lab for firewalld commands
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: firewalld命令的实践实验
- en: 'With this lab, you''ll get some practice with basic firewalld commands:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个实验，您将练习基本的firewalld命令：
- en: 'Log into your CentOS 7 virtual machine and run the following commands. Observe
    the output after each one:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的CentOS 7虚拟机并运行以下命令。观察每个命令后的输出：
- en: '[PRE60]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Briefly view the `man` pages that deal with firewalld zones:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简要查看处理firewalld区域的`man`页面：
- en: '[PRE61]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: (Yes, there are two of them. One explains the zone configuration files, and
    the other explains the zones themselves.)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: （是的，有两个。一个解释了区域配置文件，另一个解释了区域本身。）
- en: 'Look at the configuration information for all of the available zones:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看所有可用区域的配置信息：
- en: '[PRE62]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Look at the list of predefined services. Then, look at information about the
    `dropbox-lansync` service:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看预定义服务列表。然后，查看有关`dropbox-lansync`服务的信息：
- en: '[PRE63]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Set the default zone to `dmz`. Look at information about the zone, add the
    `http` and `https` services, and then look at the zone information again:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认区域设置为`dmz`。查看有关该区域的信息，添加`http`和`https`服务，然后再次查看区域信息：
- en: '[PRE64]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Reload the firewall configuration, and look at zone info again. Also, look
    at the list of services that are being allowed:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载防火墙配置，并再次查看区域信息。还要查看正在允许的服务列表：
- en: '[PRE65]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Permanently open port `10000/tcp`, and view the results:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 永久打开端口`10000/tcp`，并查看结果：
- en: '[PRE66]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Remove the port that you just added:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除刚刚添加的端口：
- en: '[PRE67]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'View the list of main pages for firewalld:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看firewalld的主要页面列表：
- en: '[PRE68]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: End of lab.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: nftables – a more universal type of firewall system
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nftables-一种更通用的防火墙系统
- en: 'Let''s now turn our attention to nftables, the new kid on the block. So, what
    does nftables bring to the table? (Yes, the pun was intended.):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把注意力转向nftables，这个新来的。那么，nftables有什么优点？（是的，这是一个双关语。）
- en: You can now forget about needing separate daemons and utilities for all of the
    different networking components. The functionality of iptables, ip6tables, ebtables,
    and arptables is now all combined in one neat package. The nft utility is now
    the only firewall utility that you'll need.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，您可以忘记需要单独的守护程序和实用程序来处理所有不同的网络组件。 iptables，ip6tables，ebtables和arptables的功能现在都合并在一个整洁的软件包中。
    nft实用程序现在是您唯一需要的防火墙实用程序。
- en: With nftables, you can create multidimensional trees to display your rulesets.
    This makes troubleshooting vastly easier, because it's now easier to trace a packet
    all the way through all of the rules.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用nftables，您可以创建多维树来显示您的规则集。这使得故障排除变得更加容易，因为现在更容易跟踪数据包通过所有规则。
- en: With iptables, you have the filter, NAT, mangle, and security tables installed
    by default, whether or not you use each one. With nftables, you only create the
    tables that you intend to use, resulting in enhanced performance.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iptables，默认情况下会安装过滤器、NAT、mangle和安全表，无论您是否使用每个表。使用nftables，您只创建您打算使用的表，从而提高性能。
- en: Unlike iptables, you can specify multiple actions in one rule, instead of having
    to create multiple rules for each action.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与iptables不同，您可以在一条规则中指定多个操作，而不必为每个操作创建多个规则。
- en: Unlike iptables, new rules get added atomically. (That's a fancy way of saying
    that there's no longer a need to reload the entire ruleset in order to just add
    one rule.)
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与iptables不同，新规则是原子性添加的。（这是说，不再需要重新加载整个规则集才能添加一个规则。）
- en: nftables has its own built-in scripting engine, allowing you to write scripts
    that are more efficient and more human-readable.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nftables具有自己的内置脚本引擎，允许您编写更高效和更易读的脚本。
- en: If you already have lots of iptables scripts that you still need to use, you
    can install a set of utilities that will help you convert them to nftables format.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已经有很多仍然需要使用的iptables脚本，您可以安装一组实用程序，以帮助您将它们转换为nftables格式。
- en: nftables tables and chains
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nftables表和链
- en: 'If you''re used to iptables, you might recognize some of the nftables terminology.
    The only problem is, some of the terms are used in different ways, with different
    meanings. Here''s some of what I''m talking about:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您习惯于iptables，您可能会认识到一些nftables术语。唯一的问题是，一些术语以不同的方式使用，具有不同的含义。这就是我所说的一些内容：
- en: '**Tables**: Tables in nftables refer to a particular protocol family. The table
    types are ip, ip6, inet, arp, bridge, and netdev.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tables**: nftables中的表指的是特定的协议家族。表类型有ip、ip6、inet、arp、bridge和netdev。'
- en: '**Chains**: Chains in nftables roughly equate to tables in iptables. For example,
    in nftables you could have filter, route, or NAT chains.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chains**: nftables中的链大致相当于iptables中的表。例如，在nftables中，你可以有filter、route或NAT链。'
- en: Getting started with nftables
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用nftables
- en: Let's start with a clean snapshot of our Ubuntu virtual machine, and install
    the nftables package.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Ubuntu虚拟机的干净快照开始，并安装nftables包。
- en: The command-line utility for nftables is `nft`. You can either do `nft` commands
    from the Bash shell, or you can do `sudo nft -i` to run nft in interactive mode.
    For our present demos, we'll just run the commands from the Bash shell.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: nftables的命令行实用程序是`nft`。你可以在Bash shell中执行`nft`命令，或者可以执行`sudo nft -i`以运行交互模式下的nft。对于我们目前的演示，我们将在Bash
    shell中运行命令。
- en: 'Now, let''s take a look at the list of installed tables:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下已安装的表的列表：
- en: '[PRE69]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Hmmm... You didn't see any tables, did you? So, let's load some up.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯...你没有看到任何表，对吧？所以，让我们加载一些表。
- en: 'If you look at the `nftables.conf` file in the `/etc` directory, you''ll see
    the beginnings of a basic nft firewall configuration:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`/etc`目录中查看`nftables.conf`文件，你会看到一个基本的nft防火墙配置的开端：
- en: '[PRE70]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Here''s the breakdown of what all this means:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有这些意思的分解：
- en: '`#!/usr/sbin/nft -f`: Although you can create normal Bash shell scripts with
    nftables commands, it''s better to use the built-in scripting engine that''s included
    with nftables. That way, we can make our scripts more human-readable, and we don''t
    have to type `nft` in front of everything we want to do.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#!/usr/sbin/nft -f`: 虽然你可以用nftables命令创建普通的Bash shell脚本，但最好使用nftables附带的内置脚本引擎。这样，我们可以使我们的脚本更易读，并且不必在每个想要执行的命令前面输入`nft`。'
- en: '`flush ruleset`: We want to start with a clean slate, so we''ll flush out any
    rules that may have already been loaded.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush ruleset`: 我们想要从一个干净的状态开始，所以我们将清除已经加载的任何规则。'
- en: '`table inet filter`: This creates an inet family filter, which works for both
    IPv4 and IPv6\. The name of this table is `filter`, but it could just as well
    have been something a bit more descriptive.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table inet filter`: 这创建了一个inet家族的过滤器，适用于IPv4和IPv6。这个表的名称是`filter`，但也可以是更具描述性的名称。'
- en: '`chain input`: Within the first pair of curly brackets, we have a chain with
    the name of `input`. (Again, the name could have been something more descriptive.)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chain input`: 在第一对花括号中，我们有一个名为`input`的链。（再次强调，名称可以更具描述性。）'
- en: '`type filter hook input priority 0;`: Within the next pair of curly brackets,
    we define our chain and then list the rules. This chain is defined as a `filter`
    type. `hook input` indicates that this chain is meant to process incoming packets.
    Because this chain has both a `hook` and a `priority`, it will accept packets
    directly from the network stack.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type filter hook input priority 0;`: 在接下来的一对花括号中，我们定义了我们的链，然后列出了规则。这个链被定义为`filter`类型。`hook
    input`表示这个链是用来处理传入的数据包的。因为这个链既有`hook`又有`priority`，所以它将直接接受来自网络堆栈的数据包。'
- en: Finally, we have the standard rules for a very basic host firewall, starting
    with the `iif` rule that allows the loopback interface to accept packets (**iif**
    stands for **input interface**.)
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有一个非常基本的主机防火墙的标准规则，从`iif`规则开始，允许环回接口接受数据包（**iif**代表**输入接口**）。
- en: Next is the standard connection tracking (`ct`) rule, which accepts traffic
    that's in response to a connection request from this host.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是标准的连接跟踪（`ct`）规则，它接受对这个主机发出的连接请求的流量。
- en: Then, there's a commented-out rule to accept Secure Shell and both secure and
    nonsecure web traffic. The `ct state new` indicates that the firewall will allow
    other hosts to initiate connections to our server on these ports.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，有一个被注释掉的规则，用于接受安全外壳和安全和非安全的网页流量。`ct state new`表示防火墙将允许其他主机在这些端口上启动与我们服务器的连接。
- en: The `ipv6` rule accepts neighbor discovery packets, allowing for IPv6 functionality.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipv6`规则接受邻居发现数据包，允许IPv6功能。'
- en: The `counter drop` rule at the end silently blocks all other traffic, and counts
    both the number of packets and the number of bytes that it blocks. (This is an
    example of how you can have one rule perform two different actions.)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的`counter drop`规则会默默地阻止所有其他流量，并计算它阻止的数据包和字节数。这是一个例子，说明一个规则可以执行两种不同的操作。
- en: 'If all you need on your Ubuntu server is a basic, no-frills firewall, your
    best bet is to just edit this `/etc/nftables.conf` file to suit your own needs.
    For starters, let''s remove the comment symbol from in front of the `tcp dport`
    line, and get rid of ports `80` and `443`. The line should now look like:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Ubuntu服务器上只需要一个基本的、简单的防火墙，最好的办法就是编辑`/etc/nftables.conf`文件以满足你自己的需求。首先，让我们从`tcp
    dport`行的前面删除注释符号，并且去掉`80`和`443`端口。现在这行应该是这样的：
- en: '[PRE71]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note that when you're only opening one port, you don't need to enclose that
    port number within curly brackets. When opening multiple ports, just include the
    comma-separated list within curly brackets, with a blank space before the first
    element and after the last element.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你只打开一个端口时，你不需要将该端口号括在花括号中。当打开多个端口时，只需在花括号中包含逗号分隔的列表，第一个元素前面和最后一个元素后面留有空格。
- en: 'Load the configuration file, and view the results:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 加载配置文件，并查看结果：
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Now, let''s say that we want to block certain IP addresses from reaching the
    Secure Shell port of this machine. We can edit the file, placing a `drop` rule
    above the rule that opens port `22`. The relevant section of the file would look
    like this:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要阻止某些IP地址到达这台机器的安全外壳端口。我们可以编辑文件，在打开`22`端口的规则之上放置一个`drop`规则。文件的相关部分将如下所示：
- en: '[PRE73]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: After we reload the file, we'll be blocking SSH access from two different IPv4
    addresses. Note that we've placed the `drop` rule ahead of the `accept` rule,
    because if the `accept` rule gets read first, the `drop` rule will never have
    any effect.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载文件后，我们将阻止来自两个不同IPv4地址的SSH访问。请注意，我们将`drop`规则放在`accept`规则之前，因为如果首先读取`accept`规则，`drop`规则将永远不会生效。
- en: Another really cool thing to note is how we've mixed IPv4 (ip) rules with IPv6
    (ip6) rules in the same configuration file. That's the beauty of using an inet-type
    table. For simplicity and flexibility, you'll want to use inet tables as much
    as possible, rather than separate ip and ip6 tables.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常酷的事情要注意的是，我们在同一个配置文件中混合了IPv4（ip）规则和IPv6（ip6）规则。这就是使用inet类型表的美妙之处。为了简单和灵活性，您应尽可能使用inet表，而不是单独的ip和ip6表。
- en: Most of the time, when all you need is just a simple host firewall, your best
    bet would be to just use this `nftables.conf` file as your starting point, and
    edit the file to suit your own needs. However, there's also a command-line component
    that you may at times find useful.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，当您只需要一个简单的主机防火墙时，最好的选择就是使用此`nftables.conf`文件作为起点，并编辑文件以满足自己的需求。但是，有时您可能会发现命令行组件也很有用。
- en: Using nft commands
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用nft命令
- en: There are two ways to use the nft utility. You can just do everything directly
    from the Bash shell, prefacing every action you want to perform with nft, followed
    by the `nft` subcommands. You can also use nft in interactive mode. For our present
    purposes, we'll just go with the Bash shell.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 使用nft实用程序有两种方法。您可以直接从Bash shell执行所有操作，每个要执行的操作之前都要加上nft，然后是`nft`子命令。您还可以在交互模式下使用nft。对于我们现在的目的，我们将使用Bash
    shell。
- en: 'Let''s first delete our previous configuration, and create an inet table, since
    we want something that works for both IPv4 and IPv6\. We''ll want to give it a
    somewhat descriptive name, so let''s call it `ubuntu_filter`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先删除先前的配置，并创建一个inet表，因为我们希望它适用于IPv4和IPv6。我们希望给它一个相当描述性的名称，所以让我们称之为`ubuntu_filter`：
- en: '[PRE74]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Next, we'll add an `input` filter chain to the table that we just created. (Note
    that since we're doing this from the Bash shell, we need to escape the semi-colon
    with a backslash.)
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们刚刚创建的表中添加一个`input`过滤器链。（请注意，由于我们是从Bash shell执行此操作，因此需要使用反斜杠转义分号。）
- en: '[PRE75]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In this command, the first `input` after the `ubuntu_filter` is the name of
    the chain. (We could have given it a more descriptive name, but for now, `input`
    works.) Within the pair of curly brackets, we're setting the parameters for this
    chain.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中，`ubuntu_filter`之后的第一个`input`是链的名称。（我们本可以给它一个更具描述性的名称，但目前，`input`就可以了。）在一对花括号内，我们正在为此链设置参数。
- en: 'Each nftables protocol family has its own set of hooks, which define how packets
    will be processed. For now, we''re only concerned with the ip/ip6/inet families,
    which have these hooks:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 每个nftables协议族都有自己的一组钩子，定义了数据包的处理方式。目前，我们只关注ip/ip6/inet族，它们具有以下钩子：
- en: Prerouting
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理
- en: Input
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入
- en: Forward
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前进
- en: Output
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产出
- en: Postrouting
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出口
- en: Of these, we're presently only concerned with the input and output hooks, which
    would apply to filter-type chains. By specifying a hook and a priority for our
    input chain, we're saying that we want this chain to be a base chain, which will
    accept packets directly from the network stack. You also see that certain parameters
    must be terminated by a semicolon, which in turn would need to be escaped with
    a backslash if you're running the commands from the Bash shell. Finally, we're
    specifying a default policy of `drop`. If we had not specified `drop` as the default
    policy, then the policy would have been `accept` by default.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，我们目前只关注输入和输出钩子，这将适用于过滤器类型链。通过为我们的输入链指定一个钩子和优先级，我们正在表示我们希望此链成为基本链，它将直接从网络堆栈接受数据包。您还会看到，某些参数必须以分号结尾，如果您从Bash
    shell运行命令，则需要用反斜杠转义分号。最后，我们正在指定默认策略为`drop`。如果我们没有指定`drop`作为默认策略，那么默认策略将是`accept`。
- en: Every `nft` command that you enter takes effect immediately. So, if you're doing
    this remotely, you'll drop your Secure Shell connection as soon as you create
    a filter chain with a default `drop` policy.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您输入的每个`nft`命令都会立即生效。因此，如果您远程执行此操作，一旦创建了具有默认`drop`策略的过滤器链，您将立即断开安全外壳连接。
- en: Some people like to create chains with a default `accept` policy, and then add
    a `drop` rule as the final rule. Other people like to create chains with a default
    `drop` policy, and then leave off the drop rule at the end. The advantage of using
    a default `accept` rule is that you would be able to perform these firewall commands
    remotely, without having to worry about locking yourself out.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人喜欢创建具有默认`accept`策略的链，然后在最后添加一个`drop`规则。其他人喜欢创建具有默认`drop`策略的链，然后在最后不添加drop规则。使用默认`accept`规则的优势在于，您可以远程执行这些防火墙命令，而不必担心被锁定。
- en: 'Verify that the chain has been added, and you should see something like this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 验证链是否已添加，您应该会看到类似于此的内容：
- en: '[PRE76]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'That''s great, but we still need some rules. Let''s start with a connection
    tracking rule and a rule to open the Secure Shell port. We''ll then verify that
    they got added:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但我们仍然需要一些规则。让我们从连接跟踪规则和打开安全外壳端口的规则开始。然后我们将验证它们是否已添加：
- en: '[PRE77]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Okay, that looks good. You now have a basic, working firewall that allows Secure
    Shell connections. Well, except that just as we did in the ufw chapter, we forgot
    to create a rule to allow the loopback adapter to accept packets. Since we want
    this rule to be at the top of the rules list, we''ll use `insert` instead of `add`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看起来不错。您现在有一个基本的工作防火墙，允许安全外壳连接。好吧，除了我们在ufw章节中所做的一样，我们忘记创建一个允许环回适配器接受数据包的规则。由于我们希望此规则位于规则列表的顶部，因此我们将使用`insert`而不是`add`：
- en: '[PRE78]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now, we''re all set. But what if we want to insert a rule in a specific location?
    For that, you''ll need to use `list` with the `-a` option to see the `handles`
    rule:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备就绪。但是，如果我们想在特定位置插入规则怎么办？为此，您需要使用带有`-a`选项的`list`来查看`handles`规则：
- en: '[PRE79]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'As you can see, there''s no real rhyme or reason to the way the handles are
    numbered. Let''s say that we want to insert the rule about blocking certain IP
    addresses from accessing the Secure Shell port. We see that the `ssh accept` rule
    is `handle 3`, so we''ll need to insert our `drop` rule before it. Our command
    to do that would look like this:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，句柄的编号没有真正的规律或原因。假设我们想要插入一个关于阻止某些IP地址访问安全外壳端口的规则。我们看到`ssh accept`规则是`handle
    3`，所以我们需要在它之前插入我们的`drop`规则。我们的命令看起来像这样：
- en: '[PRE80]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'So, to place the rule before the rule with the `handle 3` label, we have to
    `insert` to `position 3`. The new rule that we just inserted has the label `handle
    6`. To delete a rule, we''ll specify the rule''s handle number:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要将规则放置在具有`handle 3`标签的规则之前，我们必须`插入`到`位置3`。我们刚刚插入的新规则具有标签`handle 6`。要删除规则，我们将指定规则的句柄号码：
- en: '[PRE81]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'As is the case with iptables, everything you do from the command line will
    disappear once you reboot the machine. To make it permanent, let''s redirect the
    output of the `list` subcommand into a configuration file (of course, we''ll want
    to give the file a unique name that''s different from the name of our default
    file):'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 与iptables一样，您从命令行执行的所有操作在重新启动机器后都会消失。为了使其永久生效，让我们将`list`子命令的输出重定向到一个配置文件中（当然，我们需要给文件一个与默认文件名不同的唯一名称）：
- en: '[PRE82]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Due to a quirk in the Bash shell, we can''t just redirect output to a file
    in the `/etc` directory in the normal manner, even when we use `sudo`. That''s
    why I had to add the `sh -c` command, with the `nft list` command surrounded by
    double quotes. Now, when we look at the file, we''ll see that there are a couple
    of things that are missing:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Bash shell的一个怪癖，我们无法像通常那样将输出重定向到`/etc`目录中的文件，即使我们使用`sudo`也不行。这就是为什么我不得不添加`sh
    -c`命令，用双引号括起来的`nft list`命令。现在，当我们查看文件时，我们会发现有一些东西丢失了：
- en: '[PRE83]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'You sharp-eyed folk will see that we''re missing the `flush` rule, and the
    `shebang` line to specify the shell that we want to interpret this script. Let''s
    add them in:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你们这些敏锐的人会发现我们缺少`flush`规则和`shebang`行来指定我们想要解释此脚本的shell。让我们添加它们：
- en: '[PRE84]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Much better. Let''s test it by loading the new configuration and observing
    the `list` output:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 好多了。让我们通过加载新配置并观察`list`输出来测试它：
- en: '[PRE85]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: That's all there is to creating your own simple host firewall. Of course, running
    commands from the command line, rather than just creating a script file in your
    text editor, does make for a lot more typing.  But, it does allow you to test
    your rules on the fly, as you create them. And, creating your configuration in
    this manner and then redirecting the `list` output to your new configuration file
    relieves you of the burden of having to keep track of all of those curly brackets.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是创建自己的简单主机防火墙的全部内容。当然，与仅在文本编辑器中创建脚本文件不同，从命令行运行命令确实需要更多的输入。但是，这样做可以让您在创建规则时即时测试它们。以这种方式创建您的配置，然后将`list`输出重定向到新的配置文件中，可以让您摆脱不得不跟踪所有这些花括号的负担。
- en: It's also possible to take all of the `nft` commands that we just did, and place
    them into a regular, old-fashioned Bash shell script. Trust me, though, you really
    don't want to do that. Just use the nft-native scripting format as we've done
    here, and you'll have a script that performs better, and that is much more human-readable.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以将我们刚刚执行的所有`nft`命令放入一个常规的、老式的Bash shell脚本中。相信我，你真的不想这样做。只需像我们在这里所做的那样使用nft-native脚本格式，您将拥有一个性能更好、更易读的脚本。
- en: Hands-on lab for nftables on Ubuntu
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu上的nftables实验
- en: 'For this lab, you need a clean snapshot of your Ubuntu virtual machine:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，您需要一个干净的Ubuntu虚拟机快照：
- en: 'Restore your Ubuntu virtual machine to a clean snapshot to clear out any firewall
    configurations that you created previously. Verify with the commands:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的Ubuntu虚拟机恢复到一个干净的快照，以清除您之前创建的任何防火墙配置。使用以下命令进行验证：
- en: '[PRE86]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: You should see no rules listed for iptables, and the ufw status should be `inactive`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到iptables列出的规则为空，ufw状态应为`inactive`。
- en: 'Install the `nftables` package:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`nftables`软件包：
- en: '[PRE87]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'List the tables, which should give you no output. Load the default configuration
    file, and list both the tables and the rules:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出表，不应该有任何输出。加载默认配置文件，并列出表和规则：
- en: '[PRE88]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Make a backup copy of the nftables configuration file:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 备份nftables配置文件：
- en: '[PRE89]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Open the original `/etc/nftables.conf` file in your text editor. Just before
    the `tcp dport . . . accept` line, insert this line:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的文本编辑器中的原始`/etc/nftables.conf`文件。在`tcp dport . . . accept`行之前，插入以下行：
- en: '[PRE90]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Save the file and exit the text editor.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并退出文本编辑器。
- en: 'Reload the configuration and view the results:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载配置并查看结果：
- en: '[PRE91]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: End of lab.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Summary
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've looked at four different frontends for the netfilter
    firewall. We first looked at our trusty old friend, iptables. We saw that even
    though it's been around forever and still works, it does have some shortcomings.
    We then saw how Ubuntu's Uncomplicated Firewall can vastly simplify setting up
    an iptables-based firewall. For you Red Hatters, we looked at firewalld, which
    is specific to Red Hat-type distros. Finally, we wrapped things up by looking
    at the latest in Linux firewall technology, nftables.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了四种不同的netfilter防火墙前端。我们首先看了我们值得信赖的老朋友iptables。我们看到，即使它已经存在很长时间并且仍然有效，它确实有一些缺点。然后我们看到Ubuntu的简化防火墙如何大大简化了设置基于iptables的防火墙。对于红帽用户，我们看了看firewalld，这是特定于红帽类型的发行版。最后，我们通过查看最新的Linux防火墙技术nftables来结束了一切。
- en: In the space allotted, I've only been able to present the bare essentials that
    you need to set up basic host protection. But, it is at least enough to get you
    started.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配的空间中，我只能呈现您设置基本主机保护所需的基本要点。但至少足够让您开始。
