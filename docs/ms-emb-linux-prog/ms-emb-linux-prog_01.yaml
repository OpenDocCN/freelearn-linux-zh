- en: Chapter 1. Starting Out
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。起步
- en: You are about to begin working on your next project, and this time it is going
    to be running Linux. What should you think about before you put finger to keyboard?
    Let's begin with a high-level look at embedded Linux and see why it is popular,
    what are the implications of open source licenses, and what kind of hardware you
    will need to run Linux.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你即将开始你的下一个项目，这一次它将运行Linux。在你动手之前，你应该考虑些什么？让我们从一个高层次来看嵌入式Linux，看看为什么它如此受欢迎，开源许可证的影响是什么，以及你需要什么样的硬件来运行Linux。
- en: Linux first became a viable choice for embedded devices around 1999\. That was
    when Axis ([www.axis.com](http://www.axis.com)) released their first Linux-powered
    network camera and TiVo ([www.tivo.com](http://www.tivo.com)) their first **DVR**
    (**Digital Video Recorder**). Since 1999, Linux has become ever more popular,
    to the point that today it is the operating system of choice for many classes
    of product. At the time of writing, in 2015, there are about two billion devices
    running Linux. That includes a large number of smartphones running Android, which
    uses a Linux kernel, and hundreds of millions of set top boxes, smart TVs, and
    Wi-Fi routers, not to mention a very diverse range of devices such as vehicle
    diagnostics, weighing scales, industrial devices, and medical monitoring units
    that ship in smaller volumes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux在1999年左右首次成为嵌入式设备的可行选择。那时Axis（www.axis.com）发布了他们的第一款Linux动力网络摄像头，而TiVo（www.tivo.com）发布了他们的第一款数字视频录像机（DVR）。自1999年以来，Linux变得越来越受欢迎，以至于今天它是许多产品类别的首选操作系统。在撰写本文时，即2015年，有大约20亿台设备运行Linux。其中包括大量运行Android的智能手机，Android使用了Linux内核，以及数亿台机顶盒、智能电视和Wi-Fi路由器，更不用说一系列体积较小的设备，如车辆诊断、称重秤、工业设备和医疗监测单元。
- en: 'So, why does your TV run Linux? At first glance, the function of a TV is simple:
    it has to display a stream of video on a screen. Why is a complex Unix-like operating
    system like Linux necessary?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么你的电视运行Linux？乍一看，电视的功能很简单：它必须在屏幕上显示视频流。为什么像Linux这样复杂的类Unix操作系统是必要的？
- en: 'The simple answer is Moore''s Law: Gordon Moore, co-founder of Intel, observed
    in 1965 that the density of components on a chip will double about every two years.
    That applies to the devices that we design and use in our everyday lives just
    as much as it does to desktops, laptops, and servers. At the heart of most embedded
    devices is a highly integrated chip that contains one or more processor cores
    and interfaces with main memory, mass storage, and peripherals of many types.
    This is referred to as a System on Chip, or SoC, and they are increasing in complexity
    in accordance with Moore''s Law. A typical SoC has a technical reference manual
    that stretches to thousands of pages. Your TV is not simply displaying a video
    stream as the old analog sets used to do.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的答案是摩尔定律：英特尔的联合创始人戈登·摩尔在1965年观察到，芯片上的组件密度大约每两年翻一番。这适用于我们设计和使用的日常生活中的设备，就像它适用于台式机、笔记本电脑和服务器一样。大多数嵌入式设备的核心是一个高度集成的芯片，其中包含一个或多个处理器核心，并与主存储器、大容量存储和多种类型的外围设备进行接口。这被称为片上系统，或SoC，它们随着摩尔定律的增长而变得越来越复杂。典型的SoC有一个技术参考手册，长达数千页。你的电视不仅仅是像旧模拟电视一样显示视频流。
- en: The stream is digital, possibly encrypted, and it needs processing to create
    an image. Your TV is (or soon will be) connected to the Internet. It can receive
    content from smartphones, tablets, and home media servers. It can be (or soon
    will be) used to play games. And so on and so on. You need a full operating system
    to manage this degree of complexity.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 视频流是数字的，可能是加密的，需要处理才能创建图像。你的电视（或很快将会）连接到互联网。它可以接收来自智能手机、平板电脑和家庭媒体服务器的内容。它可以（或很快将会）用于玩游戏。等等。你需要一个完整的操作系统来管理这种复杂程度。
- en: 'Here are some points that drive the adoption of Linux:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些推动Linux采用的要点：
- en: Linux has the necessary functionality. It has a good scheduler, a good network
    stack, support for USB, Wi-Fi, Bluetooth, many kinds of storage media, good support
    for multimedia devices, and so on. It ticks all the boxes.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux具有必要的功能。它有一个良好的调度程序，一个良好的网络堆栈，支持USB、Wi-Fi、蓝牙，许多种存储介质，对多媒体设备的良好支持等等。它满足了所有要求。
- en: Linux has been ported to a wide range of processor architectures, including
    some that are very commonly found in SoC designs — ARM, MIPS, x86, and PowerPC.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux已经移植到了各种处理器架构，包括一些在SoC设计中非常常见的架构——ARM、MIPS、x86和PowerPC。
- en: Linux is open source, so you have the freedom to get the source code and modify
    it to meet your needs. You, or someone working on your behalf, can create a board
    support package for your particular SoC board or device. You can add protocols,
    features, and technologies that may be missing from the mainline source code.
    You can remove features that you don't need to reduce memory and storage requirements.
    Linux is flexible.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux是开源的，所以你有自由获取源代码并修改以满足你的需求。你或者代表你工作的人可以为你特定的SoC板或设备创建一个板支持包。你可以添加可能在主线源代码中缺失的协议、功能和技术。你可以删除你不需要的功能以减少内存和存储需求。Linux是灵活的。
- en: Linux has an active community; in the case of the Linux kernel, very active.
    There is a new release of the kernel every 10 to 12 weeks, and each release contains
    code from around 1,000 developers. An active community means that Linux is up
    to date and supports current hardware, protocols, and standards.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux有一个活跃的社区；在Linux内核的情况下，非常活跃。内核每10到12周发布一个新版本，每个版本都包含来自大约1000名开发人员的代码。活跃的社区意味着Linux是最新的，并支持当前的硬件、协议和标准。
- en: Open source licenses guarantee that you have access to the source code. There
    is no vendor tie-in.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源许可证保证你可以访问源代码。没有供应商的约束。
- en: For these reasons, Linux is an ideal choice for complex devices. But there are
    a few caveats I should mention here. Complexity makes it harder to understand.
    Coupled with the fast moving development process and the decentralized structures
    of open source, you have to put some effort into learning how to use it and to
    keep on re-learning as it changes. I hope that this book will help in the process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Linux是复杂设备的理想选择。但我在这里应该提到一些注意事项。复杂性使得理解变得更加困难。再加上快速发展的开发过程和开源的分散结构，您必须付出一些努力来学习如何使用它，并随着其变化而不断重新学习。我希望本书能在这个过程中有所帮助。
- en: Selecting the right operating system
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的操作系统
- en: 'Is Linux suitable for your project? Linux works well where the problem being
    solved justifies the complexity. It is especially good where connectivity, robustness,
    and complex user interfaces are required. However it cannot solve every problem,
    so here are some things to consider before you jump in:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是否适合您的项目？Linux在解决问题的复杂性得到合理解释的情况下效果很好。在需要连接性、稳健性和复杂用户界面的情况下尤其有效。但它无法解决所有问题，因此在您着手之前需要考虑以下一些事项：
- en: Is your hardware up to the job? Compared to a traditional **RTOS** (**real-time
    operating system**) such as VxWorks, Linux requires a lot more resources. It needs
    at least a 32-bit processor, and lots more memory. I will go into more detail
    in the section on typical hardware requirements.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的硬件是否能胜任？与传统的实时操作系统（RTOS）如VxWorks相比，Linux需要更多的资源。它至少需要一个32位处理器，以及更多的内存。我将在典型硬件要求部分详细介绍。
- en: Do you have the right skill set? The early parts of a project, board bring-up,
    require detailed knowledge of Linux and how it relates to your hardware. Likewise,
    when debugging and tuning your application, you will need to be able to interpret
    the results. If you don't have the skills in-house you may want to outsource some
    of the work. Of course, reading this book helps!
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否具备正确的技能？项目的早期阶段，即板卡调试，需要对Linux及其与硬件的关系有详细的了解。同样，在调试和优化应用程序时，您需要能够解释结果。如果您内部没有这些技能，您可能需要外包一些工作。当然，阅读本书会有所帮助！
- en: Is your system real-time? Linux can handle many real-time activities so long
    as you pay attention to certain details, which I will cover in detail in [Chapter
    14](ch14.html "Chapter 14. Real-time Programming"), *Real-time Programming*.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的系统是否实时？Linux可以处理许多实时活动，只要您注意一些细节，我将在《第14章》中详细介绍，*实时编程*。
- en: Consider these points carefully. Probably the best indicator of success is to
    look around for similar products that run Linux and see how they have done it;
    follow best practice.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细考虑这些要点。成功的最佳指标可能是寻找运行Linux的类似产品，并看看它们是如何做到的；遵循最佳实践。
- en: The players
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参与者
- en: Where does open source software come from? Who writes it? In particular, how
    does this relate to the key components of embedded development—the toolchain,
    bootloader, kernel, and basic utilities found in the root filesystem?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 开源软件是从哪里来的？谁写的？特别是，这与嵌入式开发的关键组件 - 工具链、引导加载程序、内核和根文件系统中的基本实用程序有何关系？
- en: 'The main players are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 主要参与者是：
- en: The open source community. This, after all, is the engine that generates the
    software you are going to be using. The community is a loose alliance of developers,
    many of whom are funded in some way, perhaps by a not-for-profit organization,
    an academic institution, or a commercial company. They work together to further
    the aims of the various projects. There are many of them, some small, some large.
    Some that we will be making use of in the remainder of this book are Linux itself,
    U-Boot, BusyBox, Buildroot, the Yocto Project, and the many projects under the
    GNU umbrella.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源社区。毕竟，这是生成您将要使用的软件的引擎。社区是一群开发人员的松散联盟，其中许多人以某种方式获得资助，可能是通过非营利组织、学术机构或商业公司。他们共同努力以推进各种项目的目标。其中有许多项目，有些小，有些大。我们在本书的其余部分将使用的一些项目是Linux本身、U-Boot、BusyBox、Buildroot、Yocto项目以及GNU组织下的许多项目。
- en: CPU architects—These are the organizations that design the CPUs we use. The
    important ones here are ARM/Linaro (ARM-based SoCs), Intel (x86 and x86_64), Imagination
    Technologies (MIPS), and Freescale/IBM (PowerPC). They implement or, at the very
    least, influence support for the basic CPU architecture.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU架构师 - 这些是设计我们使用的CPU的组织。这里的重要组织包括ARM/Linaro（基于ARM的SoC）、英特尔（x86和x86_64）、想象科技（MIPS）和Freescale/IBM（PowerPC）。他们实现或者至少影响对基本CPU架构的支持。
- en: 'SoC vendors (Atmel, Broadcom, Freescale, Intel, Qualcomm, TI, and many others)—They
    take the kernel and toolchain from the CPU architects and modify it to support
    their chips. They also create reference boards: designs that are used by the next
    level down to create development boards and working products.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SoC供应商（Atmel、Broadcom、Freescale、英特尔、高通、TI等）- 他们从CPU架构师那里获取内核和工具链，并对其进行修改以支持他们的芯片。他们还创建参考板：这些设计被下一级用来创建开发板和实际产品。
- en: Board vendors and OEMs—these people take the reference designs from SoC vendors
    and build them in to specific products, for instance set-top-boxes or cameras,
    or create more general purpose development boards, such as those from Avantech
    and Kontron. An important category are the cheap development boards such as BeagleBoard/BeagleBone
    and Raspberry Pi that have created their own ecosystems of software and hardware
    add-ons.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 板卖家和OEM - 这些人从SoC供应商那里获取参考设计，并将其构建到特定产品中，例如机顶盒或摄像头，或创建更通用的开发板，例如Avantech和Kontron的开发板。一个重要的类别是廉价的开发板，如BeagleBoard/BeagleBone和Raspberry
    Pi，它们已经创建了自己的软件和硬件附加组件生态系统。
- en: These form a chain, with your project usually at the end, which means that you
    do not have a free choice of components. You cannot simply take the latest kernel
    from [kernel.org](http:// kernel.org), except in a few rare cases, because it
    does not have support for the chip or board that you are using.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些构成了一个链条，您的项目通常位于末端，这意味着您不能自由选择组件。您不能简单地从[kernel.org](http:// kernel.org)获取最新的内核，除非在极少数情况下，因为它不支持您正在使用的芯片或板。
- en: This is an ongoing problem with embedded development. Ideally, the developers
    at each link in the chain would push their changes upstream, but they don't. It
    is not uncommon to find a kernel which has many thousands of patches that are
    not merged upstream. In addition, SoC vendors tend to actively develop open source
    components only for their latest chips, meaning that support for any chip more
    than a couple of years old will be frozen and not receive any updates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是嵌入式开发的一个持续问题。理想情况下，每个环节的开发者都会将他们的变更推送到上游，但他们没有这样做。发现一个内核有成千上万个未合并到上游的补丁并不罕见。此外，SoC供应商倾向于只为他们最新的芯片积极开发开源组件，这意味着对于任何超过几年的芯片，支持将被冻结，不会收到任何更新。
- en: The consequence is that most embedded designs are based on old versions of software.
    They do not receive security fixes, performance enhancements, or features that
    are in newer versions. Problems such as Heartbleed (a bug in the OpenSSL libraries)
    and Shellshock (a bug in the bash shell) go unfixed. I will talk more about this
    later in this chapter under the topic of security.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其结果是，大多数嵌入式设计都基于旧版本的软件。它们不会接收安全修复、性能增强或新版本中的功能。像Heartbleed（OpenSSL库中的一个漏洞）和Shellshock（bash
    shell中的一个漏洞）这样的问题得不到修复。我将在本章后面的安全主题下更多地谈论这个问题。
- en: 'What can you do about it? First, ask questions of your vendors: what is their
    update policy, how often do they revise kernel versions, what is the current kernel
    version, what was the one before that? What is their policy for merging changes
    up-stream? Some vendors are making great strides in this way. You should prefer
    their chips.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做些什么？首先，向你的供应商提问：他们的更新政策是什么，他们多久修订一次内核版本，当前的内核版本是什么，之前的是什么？他们的政策是如何将变更合并到上游的？一些供应商在这方面取得了巨大进展。你应该偏好他们的芯片。
- en: Secondly, you can take steps to make yourself more self-sufficient. This book
    aims to explain the dependencies in more detail and show you where you can help
    yourself. Don't just take the package offered to you by the SoC or board vendor
    and use it blindly without considering the alternatives.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你可以采取措施使自己更加自给自足。本书旨在更详细地解释依赖关系，并向你展示在哪些方面你可以自助。不要盲目接受SoC或板卡供应商提供的软件包，而不考虑其他选择。
- en: Project lifecycle
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目生命周期
- en: 'This book is divided into four sections that reflect the phases of a project.
    The phases are not necessarily sequential. Usually they overlap and you will need
    to jump back to revisit things that were done previously. However, they are representative
    of a developer''s preoccupations as the project progresses:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书分为四个部分，反映了项目的各个阶段。这些阶段不一定是顺序的。通常它们会重叠，你需要回头去重新审视之前完成的事情。然而，它们代表了开发者在项目进展过程中的关注点：
- en: Elements of embedded Linux (chapters 1 to 6) will help you set up the development
    environment and create a working platform for the later phases. It is often referred
    to as the "board bring-up" phase.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式Linux的要素（第1至6章）将帮助你建立开发环境，并为后续阶段创建一个工作平台。它通常被称为“板卡引导”阶段。
- en: System architecture and design choices (chapters 7 to 9) will help you to look
    at some of the design decisions you will have to make concerning the storage of
    programs and data, how to divide work between kernel device drivers and applications,
    and how to initialize the system.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统架构和设计选择（第7至9章）将帮助你审视一些关于程序和数据存储、如何在内核设备驱动程序和应用程序之间划分工作，以及如何初始化系统的设计决策。
- en: Writing embedded applications (chapters 10 and 11) show how to make effective
    use of the Linux process and threads model and how to manage memory in a resource-constrained
    device.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写嵌入式应用程序（第10和11章）展示了如何有效利用Linux进程和线程模型，以及如何在资源受限的设备中管理内存。
- en: Debugging and optimizing performance (chapters 12 and 13) describe how to trace,
    profile, and debug your code in both the applications and the kernel.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和优化性能（第12和13章）描述了如何在应用程序和内核中跟踪、分析和调试代码。
- en: The fifth section on real-time ([Chapter 14](ch14.html "Chapter 14. Real-time
    Programming"), *Real-time Programming*) stands somewhat alone because it is a
    small, but important, category of embedded systems. Designing for real-time behavior
    has an impact on each of the four main phases.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实时（[第14章](ch14.html "第14章. 实时编程"), *实时编程*）的第五部分有些独立，因为它是嵌入式系统的一个小但重要的类别。为实现实时行为而设计对四个主要阶段都有影响。
- en: The four elements of embedded Linux
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入式Linux的四个要素
- en: 'Every project begins by obtaining, customizing, and deploying these four elements:
    the toolchain, the bootloader, the kernel, and the root filesystem. This is the
    topic of the first section of this book:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都始于获取、定制和部署这四个要素：工具链、引导加载程序、内核和根文件系统。这是本书第一部分的主题：
- en: '**Toolchain**: This consists of the compiler and other tools needed to create
    code for your target device. Everything else depends on the toolchain.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具链**：这包括为目标设备创建代码所需的编译器和其他工具。其他一切都依赖于工具链。'
- en: '**Bootloader**: This is necessary to initialize the board and to load and boot
    the Linux kernel.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导加载程序**：这是必要的，用于初始化板卡并加载和启动Linux内核。'
- en: '**Kernel**: This is the heart of the system, managing system resources and
    interfacing with hardware.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核**：这是系统的核心，管理系统资源并与硬件进行接口。'
- en: '**Root filesystem**: This contains the libraries and programs that are run
    once the kernel has completed its initialization.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根文件系统**：这包含了在内核完成初始化后运行的库和程序。'
- en: Of course, there is also a fifth element, not mentioned here. That is the collection
    of programs that are specific to your embedded application which make the device
    do whatever it is supposed to do, be it weigh groceries, display movies, control
    a robot, or fly a drone.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里还有第五个要素，没有在这里提到。那就是专门针对你的嵌入式应用程序的程序集合，使设备能够完成其预定任务，无论是称重杂货、播放电影、控制机器人还是驾驶无人机。
- en: 'Typically you will be offered some or all of these elements as a package when
    you buy your SoC or board. But, for the reasons mentioned in the preceding paragraph,
    they may not be the best choices for you. I will give you the background to make
    the right selections in the first six chapters and I will introduce you to two
    tools that automate the whole process for you: Buildroot and the Yocto Project.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当你购买SoC或板卡时，可能会作为一个包的一部分或全部提供这些元素。但是，出于前面段落提到的原因，它们可能不是最好的选择。我将在前六章中为您提供背景，以便做出正确的选择，并向您介绍两个自动化整个过程的工具：Buildroot和Yocto
    Project。
- en: Open source
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源
- en: The components of embedded Linux are open source, so now is a good time to consider
    what that means, why open sources work the way they do and how this affects the
    often proprietary embedded device you will be creating from it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式Linux的组件是开源的，所以现在是考虑这意味着什么，为什么开源工作方式以及这如何影响您将从中创建的通常是专有的嵌入式设备的好时机。
- en: Licenses
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许可证
- en: When talking about open source, the word, "free" is often used. People new to
    the subject often take it to mean nothing to pay, and open source software licenses
    do indeed guarantee that you can use the software to develop and deploy systems
    for no charge. However, the more important meaning here is freedom, since you
    are free to obtain the source code and modify it in any way you see fit and redeploy
    it in other systems. These licenses give you this right. Compare that with shareware
    licenses which allow you to copy the binaries for no cost but do not give you
    the source code, or other licenses that allow you to use the software for free
    under certain circumstances, for example, for personal use but not commercial.
    These are not open source.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到开源时，经常使用“免费”这个词。对于这个主题的新手来说，他们通常认为这意味着无需支付任何费用，而开源软件许可确实保证您可以免费使用软件开发和部署系统。然而，这里更重要的意义是自由，因为您可以自由获取源代码并以任何您认为合适的方式进行修改，并在其他系统中重新部署。这些许可证赋予了您这个权利。与允许您免费复制二进制文件但不提供源代码的共享软件许可证，或者允许您在某些情况下免费使用软件（例如个人使用但不允许商业使用）的其他许可证相比，这些都不是开源。
- en: I will provide the following comments in the interest of helping you understand
    the implications of working with open source licenses, but I would like to point
    out that I am an engineer and not a lawyer. What follows is my understanding of
    the licenses and the way they are interpreted.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提供以下评论，以帮助您了解使用开源许可证的影响，但我想指出，我是一名工程师，而不是律师。以下是我对许可证及其解释方式的理解。
- en: 'Open source licenses fall broadly into two categories: the **GPL** (**General
    Public License**) from the Free Software Foundation and the permissive licenses
    derived from **BSD** (**Berkeley Software Distribution**), the Apache Foundation,
    and others.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 开源许可证大致分为两类：来自自由软件基金会的**GPL**（**General Public License**）和来自**BSD**（**Berkeley
    Software Distribution**）、Apache基金会和其他组织的宽松许可证。
- en: The permissive licenses say, in essence, that you may modify the source code
    and use it in systems of your own choosing so long as you do not modify the terms
    of the license in any way. In other words, with that one restriction, you can
    do with it what you want, including building it into possibly proprietary systems.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 宽松许可证基本上表示，您可以修改源代码并在自己选择的系统中使用它，只要您不以任何方式修改许可证条款。换句话说，在这个限制下，您可以按照自己的意愿使用它，包括将其构建到可能是专有系统中。
- en: The GPL licenses are similar, but have clauses which compel you to pass the
    rights to obtain and modify the software on to your end users. In other words
    you share your source code. One option is to make it completely public by putting
    it onto a public server. Another is to offer it only to your end users by means
    of a written offer to provide the code when requested. The GPL goes further to
    say that you cannot incorporate GPL code into proprietary programs. Any attempt
    to do so would make the GPL apply to the whole. In other words, you cannot combine
    GPL and proprietary code in one program.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: GPL许可证相似，但有条款强制您将获取和修改软件的权利传递给最终用户。换句话说，您分享您的源代码。其中一个选项是通过将其放在公共服务器上使其完全公开。另一个选项是通过书面提供代码的要约，仅向最终用户提供。GPL进一步规定，您不能将GPL代码合并到专有程序中。任何尝试这样做的行为都会使GPL适用于整个程序。换句话说，您不能在一个程序中将GPL和专有代码结合在一起。
- en: So, what about libraries? If they are licensed with the GPL, any program linked
    with them becomes GPL also. However, most libraries are licensed under the **Lesser
    General Public License** (**LGPL**). If this is the case, you are allowed to link
    with them from a proprietary program.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，图书馆呢？如果它们使用GPL许可证，任何与它们链接的程序也会成为GPL。然而，大多数图书馆都是根据**Lesser General Public
    License** (**LGPL**)许可。如果是这种情况，你可以允许从专有程序中链接它们。
- en: All of the preceding description relates specifically to GPL v2 and LGPL v2.1\.
    I should mention the latest versions of GPL v3 and LGPL v3\. These are controversial,
    and I will admit that I don't fully understand the implications. However, the
    intention is to ensure that the GPLv3 and LGPL v3 components in any system can
    be replaced by the end user, which is in the spirit of open source software for
    everyone. It does pose some problems though. Some Linux devices are used to gain
    access to information according to a subscription level or another restriction,
    and replacing critical parts of the software may compromise that. Set-top boxes
    fit into this category. There are also issues with security. If the owner of a
    device has access to the system code, then so might an unwelcome intruder. Often
    the defense is to have kernel images that are signed by an authority, the vendor,
    so that unauthorized updates are not possible. Is that an infringement of my right
    to modify my device? Opinions differ.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的描述都是针对GPL v2和LGPL v2.1的。我应该提到最新版本的GPL v3和LGPL v3。这些是有争议的，我承认我并不完全理解其影响。然而，意图是确保系统中的GPLv3和LGPL
    v3组件可以被最终用户替换，这符合开源软件的精神。但这确实会带来一些问题。一些Linux设备用于根据订阅级别或其他限制获取信息，替换软件的关键部分可能会影响这一点。机顶盒属于这一类。还存在安全问题。如果设备的所有者可以访问系统代码，那么不受欢迎的入侵者也可能会访问。通常的防御措施是拥有由权威（供应商）签名的内核映像，以防止未经授权的更新。这是否侵犯了我修改设备的权利？意见不一。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The TiVo set-top box is an important part of this debate. It uses a Linux kernel,
    which is licensed under GPL v2\. TiVo release the source code of their version
    of the kernel and so comply with the license. TiVo also have a bootloader that
    will only load a kernel binary that is signed by them. Consequently, you can build
    a modified kernel for a TiVo box, but you cannot load it on the hardware. The
    FSF take the position that this is not in the spirit of open source software and
    refer to this procedure as "tivoization". The GPL v3 and LGPL v3 were written
    to explicitly prevent this happening. Some projects, the Linux kernel in particular,
    have been reluctant to adopt the version three licenses because of the restrictions
    it would place on device manufacturers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: TiVo机顶盒是这场辩论的重要组成部分。它使用Linux内核，该内核根据GPL v2许可。TiVo发布了他们版本的内核源代码，因此符合许可证。TiVo还有一个只会加载由他们签名的内核二进制文件的引导加载程序。因此，你可以为TiVo盒构建修改后的内核，但无法在硬件上加载它。自由软件基金会认为这不符合开源软件的精神，并将此过程称为“Tivoization”。GPL
    v3和LGPL v3是明确防止这种情况发生的。一些项目，特别是Linux内核，一直不愿采用第三版许可证，因为它会对设备制造商施加限制。
- en: Hardware for embedded Linux
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式Linux的硬件
- en: If you are designing or selecting hardware for an embedded Linux project, what
    do you look out for?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为嵌入式Linux项目设计或选择硬件，你需要注意什么？
- en: Firstly, a CPU architecture that is supported by the kernel – unless you plan
    to add a new architecture yourself of course! Looking at the source code for Linux
    4.1, there are 30 architectures, each represented by a sub-directory in the `arch/`
    directory. They are all 32- or 64-bit architectures, most with a **memory management
    unit** (**MMU**), but some without. The ones most often found in embedded devices
    are ARM, MIPS, PowerPC, and X86, each in 32- and 64-bit variants, and all of which
    have memory management units.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，CPU架构必须得到内核支持，除非你当然打算自己添加一个新的架构！查看Linux 4.1的源代码，有30种架构，每种都在`arch/`目录下有一个子目录表示。它们都是32位或64位架构，大多数带有内存管理单元（MMU），但也有一些没有。在嵌入式设备中最常见的是ARM、MIPS、PowerPC和X86，每种都有32位和64位变体，并且都有内存管理单元。
- en: Most of this book is written with this class of processor in mind. There is
    another group that doesn't have an MMU that runs a subset of Linux known as micro
    controller Linux or uClinux. These processor architectures include ARC, Blackfin,
    Microblaze, and Nios. I will mention uClinux from time to time but I will not
    go into details because it is a rather specialized topic.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的大部分内容是针对这类处理器编写的。还有另一类没有MMU的处理器，运行一个名为微控制器Linux或uClinux的Linux子集。这些处理器架构包括ARC、Blackfin、Microblaze和Nios。我会不时提到uClinux，但不会详细介绍，因为这是一个相当专业的话题。
- en: Secondly, you will need a reasonable amount of RAM. 16 MiB is a good minimum,
    although it is quite possible to run Linux using half that. It is even possible
    to run Linux with 4 MiB if you are prepared to go to the trouble of optimizing
    every part of the system. It may even be possible to get lower, but there comes
    a point at which it is no longer Linux.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你需要合理数量的RAM。16 MiB是一个不错的最低值，尽管使用一半的RAM也完全可以运行Linux。如果你愿意对系统的每个部分进行优化，甚至可以使用4
    MiB运行Linux。甚至可能更低，但是有一个临界点，那时它就不再是Linux了。
- en: Thirdly, there is non-volatile storage, usually flash memory. 8 MiB is enough
    for a simple device such as a webcam or a simple router. As with RAM, you can
    create a workable Linux system with less storage if you really want to but, the
    lower you go, the harder it becomes. Linux has extensive support for flash storage
    devices, including raw NOR and NAND flash chips and managed flash in the form
    of SD cards, eMMC chips, USB flash memory, and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，通常是闪存这样的非易失性存储。8 MiB对于简单设备如网络摄像头或简单路由器已经足够了。与RAM一样，如果你真的愿意，你可以使用更少的存储创建一个可行的Linux系统，但是越低，就越困难。Linux对闪存设备有广泛的支持，包括原始NOR和NAND闪存芯片以及SD卡、eMMC芯片、USB闪存等形式的受控闪存。
- en: Fourthly, a debug port is very useful, most commonly an RS-232 serial port.
    It does not have to be fitted on production boards, but makes board bring-up,
    debugging, and development much easier.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，调试端口非常有用，最常见的是RS-232串行端口。它不一定要安装在生产板上，但可以使板子的启动、调试和开发更加容易。
- en: Fifthly, you need some means of loading software when starting from scratch.
    A few years ago, boards would have been fitted with a JTAG interface for this
    purpose, but modern SoCs have the ability to load boot code directly from removable
    media, especially SD and micro SD cards, or serial interfaces such as RS-232 or
    USB.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第五，您需要一些手段在从头开始时加载软件。几年前，板子会配备JTAG接口，但现代SoC有能力直接从可移动介质加载引导代码，特别是SD和micro SD卡，或者串行接口，如RS-232或USB。
- en: In addition to these basics, there are interfaces to the specific bits of hardware
    your device needs to get its job done. Mainline Linux comes with open source drivers
    for many thousands of different devices, and there are drivers (of variable quality)
    from the SoC manufacturer and drivers from the OEMs of third-party chips that
    may be included in the design, but remember my comments on the commitment and
    ability of some manufacturers. As a developer of embedded devices, you will find
    that you spend quite a lot of time evaluating and adapting third-party code, if
    you have it, or liaising with the manufacturer if you don't. Finally, you will
    have to write the device support for any interfaces that are unique to the device,
    or find someone to do it for you.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些基础知识外，还有与设备需要完成工作的特定硬件位的接口。主线Linux配备了成千上万种不同设备的开源驱动程序，SoC制造商和第三方芯片的OEM提供了质量不等的驱动程序，但请记住我对一些制造商的承诺和能力的评论。作为嵌入式设备的开发人员，您会发现自己花费了相当多的时间来评估和调整第三方代码，如果有的话，或者与制造商联系，如果没有的话。最后，您将不得不为设备的任何独特接口编写设备支持，或者找人替您完成。
- en: Hardware used in this book
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的硬件
- en: 'The worked examples in this book are intended to be generic, but to make them
    relevant and easy to follow, I have had to choose a specific device as an example.
    I have used two exemplar devices: the BeagleBone Black and QEMU. The first is
    a widely-available and cheap development board which can be used in serious embedded
    hardware. The second is a machine emulator that can be used to create a range
    of systems that are typical of embedded hardware. It was tempting to use QEMU
    exclusively, but, like all emulations, it is not quite the same as the real thing.
    Using a BeagleBone, you have the satisfaction of interacting with real hardware
    and seeing real LEDs flash. It was also tempting to select a more up-to-date board
    than the BeagleBone Black, which is several years old now, but I believe that
    its popularity gives it a degree of longevity and means that it will continue
    to be available for some years yet.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例旨在是通用的，但为了使它们相关且易于遵循，我不得不选择一个特定的设备作为示例。我使用了两个示例设备：BeagleBone Black和QEMU。第一个是广泛可用且便宜的开发板，可用于严肃的嵌入式硬件。第二个是一个机器模拟器，可用于创建典型的嵌入式硬件系统。诱人的是只使用QEMU，但是像所有模拟一样，它与真实情况并不完全相同。使用BeagleBone，您可以满足与真实硬件交互并看到真正的LED闪烁的满足感。诱人的是选择比BeagleBone
    Black更为时尚的板子，但我相信它的流行度使其具有一定的长寿性，并意味着它将在未来几年内继续可用。
- en: In any case, I encourage you to try out as many of the examples as you can using
    either of these two platforms, or indeed any embedded hardware you may have to
    hand.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我鼓励您尝试使用这两个平台中的任何一个或者您手头上可能有的任何嵌入式硬件来尝试尽可能多的示例。
- en: The BeagleBone Black
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BeagleBone Black
- en: 'The BeagleBone and the later BeagleBone Black are open hardware designs for
    a small, credit card sized development board produced by Circuitco LLC. The main
    repository of information is at [www.beagleboard.org](http://www.beagleboard.org).
    The main points of the specification are:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: BeagleBone和后来的BeagleBone Black是由Circuitco LLC生产的一款小型信用卡大小的开放硬件设计的开发板。主要信息库位于[www.beagleboard.org](http://www.beagleboard.org)。规格的主要要点是：
- en: TI AM335x 1GHz ARM® Cortex-A8 Sitara SoC
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TI AM335x 1GHz ARM® Cortex-A8 Sitara SoC
- en: 512 MiB DDR3 RAM
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 512 MiB DDR3 RAM
- en: 2 or 4 GiB 8-bit eMMC on-board flash storage
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2或4 GiB 8位eMMC板载闪存
- en: Serial port for debug and development
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于调试和开发的串行端口
- en: MicroSD connector, which can be used as the boot device
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用作引导设备的MicroSD连接器
- en: Mini USB OTG client/host port that can also be used to power the board
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迷你USB OTG客户端/主机端口，也可用于为板子供电
- en: Full size USB 2.0 host port
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全尺寸USB 2.0主机端口
- en: 10/100 Ethernet port
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10/100以太网端口
- en: HDMI for video and audio output
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HDMI用于视频和音频输出
- en: In addition, there are two 46-pin expansion headers for which there are a great
    variety of daughter boards, known as capes, which allow you to adapt the board
    to do many different things. However, you do not need to fit any capes in the
    examples in this book.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有两个46针扩展头，有许多不同的子板，称为披风，可以使板子适应许多不同的功能。但是，在本书的示例中，您不需要安装任何披风。
- en: 'In addition to the board itself, you will need:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了板子本身，您还需要：
- en: a mini USB to full-size USB cable (supplied with the board) to provide power,
    unless you have the last item on this list.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根迷你USB到全尺寸USB电缆（随板子提供）以提供电源，除非您拥有此列表上的最后一项。
- en: an RS-232 cable that can interface with the 6-pin 3.3 volt TTL level signals
    provided by the board. The Beagleboard website has links to compatible cables.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个RS-232电缆，可以与板子提供的6针3.3伏TTL电平信号进行接口。Beagleboard网站上有兼容电缆的链接。
- en: a microSD card and a means of writing to it from your development PC or laptop,
    which will be needed to load software onto the board.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个microSD卡和一种从开发PC或笔记本电脑上写入软件到板子上所需的手段。
- en: an Ethernet cable, as some of the examples require network connectivity.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根以太网电缆，因为一些示例需要网络连接。
- en: optional, but recommended, a 5V power supply capable of delivering 1 A or more.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选，但建议使用，能够提供1A或更多电流的5V电源适配器。
- en: QEMU
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QEMU
- en: 'QEMU is a machine emulator. It comes in a number of different flavors, each
    of which can emulate a processor architecture and a number of boards built using
    that architecture. For example, we have the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU是一个机器模拟器。它有许多不同的版本，每个版本都可以模拟处理器架构和使用该架构构建的许多板子。例如，我们有以下内容：
- en: '**qemu-system-arm**: ARM'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qemu-system-arm**：ARM'
- en: '**qemu-system-mips**: MIPS'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qemu-system-mips**：MIPS'
- en: '**qemu-system-ppc**: PowerPC'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qemu-system-ppc**：PowerPC'
- en: '**qemu-system-x86**: x86 and x86_64'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qemu-system-x86**：x86和x86_64'
- en: 'For each architecture, QEMU emulates a range of hardware, which you can see
    by using the option `-machine help`. Each machine emulates most of the hardware
    that would normally be found on that board. There are options to link hardware
    to local resources, such as using a local file for the emulated disk drive. Here
    is a concrete example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种架构，QEMU模拟了一系列硬件，您可以通过使用选项`-machine help`来查看。每台机器模拟了通常在该板上找到的大部分硬件。有选项可以将硬件链接到本地资源，例如使用本地文件作为模拟磁盘驱动器。以下是一个具体的例子：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The options used in the preceding command line are:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令行中使用的选项是：
- en: '`-machine vexpress-a9`: creates an emulation of an ARM Versatile Express development
    board with a Cortex A-9 processor'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -machine vexpress-a9：创建一个ARM Versatile Express开发板的模拟，配备Cortex A-9处理器
- en: '`-m 256M`: populates it with 256 MiB of RAM'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -m 256M：为其分配256 MiB的RAM
- en: '`-drive file=rootfs.ext4,sd`: connect the `sd` interface to the local file
    `rootfs.ext4` (which contains a filesystem image)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -drive file=rootfs.ext4,sd：将`sd`接口连接到本地文件`rootfs.ext4`（其中包含文件系统镜像）
- en: '`-kernel zImage`: loads the Linux kernel from the local file named `zImage`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -kernel zImage：从名为`zImage`的本地文件加载Linux内核
- en: '`-dtb vexpress-v2p-ca9.dtb`: loads the device tree from the local file `vexpress-v2p-ca9.dtb`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -dtb vexpress-v2p-ca9.dtb：从本地文件`vexpress-v2p-ca9.dtb`加载设备树
- en: '`-append "..."`: supplies this string as the kernel command line'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -append "..."：将此字符串作为内核命令行提供
- en: '`-serial stdio`: connects the serial port to the terminal that launched QEMU,
    usually so that you can log on to the emulated machine via the serial console'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -serial stdio：将串行端口连接到启动QEMU的终端，通常用于通过串行控制台登录到模拟机器
- en: '`-net nic,model=lan9118`: creates a network interface'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -net nic,model=lan9118：创建一个网络接口
- en: '`-net tap,ifname=tap0`: connects the network interface to the virtual network
    interface `tap0`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -net tap,ifname=tap0：将网络接口连接到虚拟网络接口`tap0`
- en: 'To configure the host side of the network, you need the `tunctl` command from
    the **User Mode Linux** (**UML**) project; on Debian and Ubuntu the package is
    named `uml-utilities`. You use it to create a virtual network using the following
    command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置网络的主机端，您需要来自**用户模式Linux**（**UML**）项目的`tunctl`命令；在Debian和Ubuntu上，该软件包的名称为`uml-utilities`。您可以使用以下命令创建一个虚拟网络：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates a network interface named `tap0` which is connected to the network
    controller in the emulated QEMU machine. You configure `tap0` in exactly the same
    way as any other interface.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`tap0`的网络接口，它连接到模拟的QEMU机器中的网络控制器。您可以像配置任何其他接口一样配置`tap0`。
- en: All of these options are described in detail in the following chapters. I will
    be using Versatile Express for most of my examples, but it should be easy to use
    a different machine or architecture.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选项在接下来的章节中都有详细描述。我将在大多数示例中使用Versatile Express，但使用不同的机器或架构应该也很容易。
- en: Software used in this book
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的软件
- en: I have used only open source software both for the development tools and the
    target operating system and applications. I assume that you will be using Linux
    on your development system. I tested all the host commands using Ubuntu 14.04
    and so there is a slight bias towards that particular version, but any modern
    Linux distribution is likely to work just fine.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我只使用了开源软件来开发工具和目标操作系统和应用程序。我假设您将在开发系统上使用Linux。我使用Ubuntu 14.04测试了所有主机命令，因此对该特定版本有一些偏见，但任何现代Linux发行版都可能运行良好。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Embedded hardware will continue to get more complex, following the trajectory
    set by Moore's Law. Linux has the power and the flexibility to make use of hardware
    in an efficient way.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式硬件将继续变得更加复杂，遵循摩尔定律所设定的轨迹。Linux具有利用硬件的能力和灵活性。
- en: Linux is just one component of open source software out of the many that you
    need to create a working product. The fact that the code is freely available means
    that people and organizations at many different levels can contribute. However,
    the sheer variety of embedded platforms and the fast pace of development lead
    to isolated pools of software which are not shared as efficiently as they should
    be. In many cases, you will become dependent on this software, especially the
    Linux kernel that is provided by your SoC or Board vendor, and to a lesser extent
    the toolchain. Some SoC manufacturers are getting better at pushing their changes
    upstream and the maintenance of these changes is getting easier.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Linux只是开源软件中的一个组件，您需要创建一个可工作产品所需的许多组件。代码是免费提供的，这意味着许多不同层次的人和组织都可以做出贡献。然而，嵌入式平台的多样性和快速发展的步伐导致了软件的孤立池，它们的共享效率不如预期高。在许多情况下，您将依赖于这些软件，特别是由SoC或板卡供应商提供的Linux内核，以及较小程度上的工具链。一些SoC制造商正在更好地推动他们的变更上游，并且这些变更的维护变得更加容易。
- en: Fortunately, there are some powerful tools that can help you create and maintain
    the software for your device. For example, Buildroot is ideal for small systems
    and the Yocto Project for larger ones.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些强大的工具可以帮助您创建和维护设备的软件。例如，Buildroot非常适合小型系统，Yocto Project适合更大的系统。
- en: Before I describe these build tools, I will describe the four elements of embedded
    Linux, which you can apply to all embedded Linux projects, however they are created.
    The next chapter is all about the first of these, the toolchain, which you need
    to compile code for your target platform.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我描述这些构建工具之前，我将描述嵌入式Linux的四个元素，您可以将其应用于所有嵌入式Linux项目，无论它们是如何创建的。下一章将全面介绍这些元素中的第一个，即工具链，您需要用它来为目标平台编译代码。
