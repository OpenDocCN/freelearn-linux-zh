["```\nreader@ubuntu:~/scripts/chapter_13$ vim hello-world-function.sh\nreader@ubuntu:~/scripts/chapter_13$ cat hello-world-function.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-11\n# Description: Prints \"Hello world!\" using a function.\n# Usage: ./hello-world-function.sh\n#####################################\n\n# Define the function before we call it.\nhello_world() {\n  echo \"Hello world!\"\n}\n\n# Call the function we defined earlier:\nhello_world\n\nreader@ubuntu:~/scripts/chapter_13$ bash hello-world-function.sh \nHello world!\n```", "```\nfunction_name() {\n   indented-commands\n   further-indented-commands-as-needed\n }\n```", "```\nfunction function_name {\n   indented-commands\n   further-indented-commands-as-needed\n }\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim complex-function.sh \nreader@ubuntu:~/scripts/chapter_13$ cat complex-function.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-11\n# Description: A more complex function that shows why functions exist.\n# Usage: ./complex-function.sh\n#####################################\n\n# Used to print some current data on the system.\nprint_system_status() {\n  date # Print the current datetime.\n  echo \"CPU in use: $(top -bn1 | grep Cpu | awk '{print $2}')\"\n  echo \"Memory in use: $(free -h | grep Mem | awk '{print $3}')\"\n  echo \"Disk space available on /: $(df -k / | grep / | awk '{print $4}')\" \n  echo # Extra newline for readability.\n}\n\n# Print the system status a few times.\nfor ((i=0; i<5; i++)); do\n  print_system_status\n  sleep 5\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash complex-function.sh \nSun Nov 11 13:40:17 UTC 2018\nCPU in use: 0.1\nMemory in use: 85M\nDisk space available on /: 4679156\n\nSun Nov 11 13:40:22 UTC 2018\nCPU in use: 0.2\nMemory in use: 84M\nDisk space available on /: 4679156\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim functions-and-variables.sh\nreader@ubuntu:~/scripts/chapter_13$ cat functions-and-variables.sh \n#!/bin/bash\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-11\n# Description: Show different variable scopes.\n# Usage: ./functions-and-variables.sh <input>\n#####################################\n\n# Check if the user supplied at least one argument.\nif [[ $# -eq 0 ]]; then\n  echo \"Missing an argument!\"\n  echo \"Usage: $0 <input>\"\n  exit 1\nfi\n\n# Assign the input to a variable.\ninput_variable=$1\n# Create a CONSTANT, which never changes.\nCONSTANT_VARIABLE=\"constant\"\n\n# Define the function.\nhello_variable() {\n  echo \"This is the input variable: ${input_variable}\"\n  echo \"This is the constant: ${CONSTANT_VARIABLE}\"\n}\n\n# Call the function.\nhello_variable\nreader@ubuntu:~/scripts/chapter_13$ bash functions-and-variables.sh teststring\nThis is the input variable: teststring\nThis is the constant: constant\n```", "```\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-11-11\n# Description: Show different variable scopes.\n# Usage: ./functions-and-variables.sh <input>\n#####################################\n<SNIPPED>\n# Define the function.\nhello_variable() {\n FUNCTION_VARIABLE=\"function variable text!\"\n  echo \"This is the input variable: ${input_variable}\"\n  echo \"This is the constant: ${CONSTANT_VARIABLE}\"\n echo \"This is the function variable: ${FUNCTION_VARIABLE}\"\n}\n\n# Call the function.\nhello_variable\n\n# Try to call the function variable outside the function.\necho \"Function variable outside function: ${FUNCTION_VARIABLE}\"\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash functions-and-variables.sh input\nThis is the input variable: input\nThis is the constant: constant\nThis is the function variable: function variable text!\nFunction variable outside function: function variable text!\n```", "```\n#!/bin/bash\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\n# Date: 2018-11-11\n# Description: Show different variable scopes.\n# Usage: ./functions-and-variables.sh <input>\n#####################################\n<SNIPPED>\n# Define the function.\nhello_variable() {\n local FUNCTION_VARIABLE=\"function variable text!\"\n  echo \"This is the input variable: ${input_variable}\"\n  echo \"This is the constant: ${CONSTANT_VARIABLE}\"\n  echo \"This is the function variable: ${FUNCTION_VARIABLE}\"\n}\n<SNIPPED>\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash functions-and-variables.sh more-input\nThis is the input variable: more-input\nThis is the constant: constant\nThis is the function variable: function variable text!\nFunction variable outside function: \n```", "```\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.3.0\n# Date: 2018-11-11\n# Description: Show different variable scopes.\n# Usage: ./functions-and-variables.sh <input>\n#####################################\n<SNIPPED>\n# Define the function.\nhello_variable() {\n local CONSTANT_VARIABLE=\"maybe not so constant?\"\n  echo \"This is the input variable: ${input_variable}\"\n  echo \"This is the constant: ${CONSTANT_VARIABLE}\"\n}\n\n# Call the function.\nhello_variable\n\n# Try to call the function variable outside the function.\necho \"Function variable outside function: ${CONSTANT_VARIABLE}\"\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash functions-and-variables.sh last-input\nThis is the input variable: last-input\nThis is the constant: maybe not so constant?\nFunction variable outside function: constant\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim error-functions.sh\nreader@ubuntu:~/scripts/chapter_13$ cat error-functions.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-11\n# Description: Functions to handle errors.\n# Usage: ./error-functions.sh\n#####################################\n\n# Define a function that handles minor errors.\nhandle_minor_error() {\n echo \"A minor error has occured, please check the output.\"\n}\n\n# Define a function that handles fatal errors.\nhandle_fatal_error() {\n echo \"A critical error has occured, stopping script.\"\n exit 1\n}\n\n# Minor failures.\nls -l /tmp/ || handle_minor_error\nls -l /root/ || handle_minor_error \n\n# Fatal failures.\ncat /etc/shadow || handle_fatal_error\ncat /etc/passwd || handle_fatal_error\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash -x error-functions.sh \n+ ls -l /tmp/\ntotal 8\ndrwx------ 3 root root 4096 Nov 11 11:07 systemd-private-869037dc...\ndrwx------ 3 root root 4096 Nov 11 11:07 systemd-private-869037dc...\n+ ls -l /root/\nls: cannot open directory '/root/': Permission denied\n+ handle_minor_error\n+ echo 'A minor error has occured, please check the output.'\nA minor error has occured, please check the output.\n+ cat /etc/shadow\ncat: /etc/shadow: Permission denied\n+ handle_fatal_error\n+ echo 'A critical error has occured, stopping script.'\nA critical error has occured, stopping script.\n+ exit 1\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim colorful.sh \nreader@ubuntu:~/scripts/chapter_13$ cat colorful.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Some printed text, now with colors!\n# Usage: ./colorful.sh\n#####################################\n\nprint_colored() {\n  # Check if the function was called with the correct arguments.\n  if [[ $# -ne 2 ]]; then\n    echo \"print_colored needs two arguments, exiting.\"\n    exit 1\n  fi\n\n  # Grab both arguments.\n  local string=$1\n  local color=$2\n\n  # Use a case-statement to determine the color code.\n  case ${color} in\n  red)\n    local color_code=\"\\e[31m\";;\n  blue)\n    local color_code=\"\\e[34m\";;\n  green)\n    local color_code=\"\\e[32m\";;\n  *)\n    local color_code=\"\\e[39m\";; # Wrong color, use default.\n  esac\n\n  # Perform the echo, and reset color to default with [39m.\n  echo -e ${color_code}${string}\"\\e[39m\"\n}\n\n# Print the text in different colors.\nprint_colored \"Hello world!\" \"red\"\nprint_colored \"Hello world!\" \"blue\"\nprint_colored \"Hello world!\" \"green\"\nprint_colored \"Hello world!\" \"magenta\"\n```", "```\nprint_colored() {\n  # Check if the function was called with the correct arguments.\n  if [[ $# -ne 2 ]]; then\n    echo \"print_colored needs two arguments, exiting.\"\n    exit 1\n  fi\n\n  # Grab both arguments.\n  local string=$1\n  local color=$2\n```", "```\n  # Use a case-statement to determine the color code.\n  case ${color} in\n  red)\n    color_code=\"\\e[31m\";;\n  blue)\n    color_code=\"\\e[34m\";;\n  green)\n    color_code=\"\\e[32m\";;\n  *)\n    color_code=\"\\e[39m\";; # Wrong color, use default.\n  esac\n```", "```\n  # Perform the echo, and reset color to default with [39m.\n  echo -e ${color_code}${string}\"\\e[39m\"\n}\n\n# Print the text in different colors.\nprint_colored \"Hello world!\" \"red\"\nprint_colored \"Hello world!\" \"blue\"\nprint_colored \"Hello world!\" \"green\"\nprint_colored \"Hello world!\" \"magenta\"\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim reverser.sh \nreader@ubuntu:~/scripts/chapter_13$ cat reverser.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Reverse the input for the user.\n# Usage: ./reverser.sh <input-to-be-reversed>\n#####################################\n\n# Check if the user supplied one argument.\nif [[ $# -ne 1 ]]; then\n  echo \"Incorrect number of arguments!\"\n  echo \"Usage: $0 <input-to-be-reversed>\"\n  exit 1\nfi\n\n# Capture the user input in a variable.\nuser_input=\"_${1}_\" # Add _ for readability.\n\n# Define the reverser function.\nreverser() {\n  # Check if input is correctly passed.\n  if [[ $# -ne 1 ]]; then\n    echo \"Supply one argument to reverser()!\" && exit 1\n  fi\n\n  # Return the reversed input to stdout (default for rev).\n  rev <<< ${1}\n}\n\n# Capture the function output via command substitution.\nreversed_input=$(reverser ${user_input})\n\n# Show the reversed input to the user.\necho \"Your reversed input is: ${reversed_input}\"\n```", "```\n# Capture the user input in a variable.\nuser_input=\"_${1}_\" # Add _ for readability.\n```", "```\n# Define the reverser function.\nreverser() {\n  # Check if input is correctly passed.\n  if [[ $# -ne 1 ]]; then\n    echo \"Supply one argument to reverser()!\" && exit 1\n  fi\n\n  # Return the reversed input to stdout (default for rev).\n  rev <<< ${1}\n}\n```", "```\n# Capture the function output via command substitution.\nreversed_input=$(reverser ${user_input})\n\n# Show the reversed input to the user.\necho \"Your reversed input is: ${reversed_input}\"\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash reverser.sh rain\nYour reversed input is: _niar_\n```", "```\nreader@ubuntu:~$ vim bash-function-library.sh \nreader@ubuntu:~$ cat bash-function-library.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Bash function library.\n# Usage: source ~/bash-function-library.sh\n#####################################\n\n# Check if the number of arguments supplied is exactly correct.\ncheck_arguments() {\n  # We need at least one argument.\n  if [[ $# -lt 1 ]]; then\n    echo \"Less than 1 argument received, exiting.\"\n    exit 1\n  fi  \n\n  # Deal with arguments\n  expected_arguments=$1\n  shift 1 # Removes the first argument.\n\n  if [[ ${expected_arguments} -ne $# ]]; then\n    return 1 # Return exit status 1.\n  fi\n}\n```", "```\nsource <file-name>\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim argument-checker.sh\nreader@ubuntu:~/scripts/chapter_13$ cat argument-checker.sh\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Validates the check_arguments library function\n# Usage: ./argument-checker.sh\n#####################################\n\nsource ~/bash-function-library.sh\n\ncheck_arguments 3 \"one\" \"two\" \"three\" # Correct.\ncheck_arguments 2 \"one\" \"two\" \"three\" # Incorrect.\ncheck_arguments 1 \"one two three\" # Correct.\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash -x argument-checker.sh \n+ source /home/reader/bash-function-library.sh\n+ check_arguments 3 one two three\n+ [[ 4 -lt 1 ]]\n+ expected_arguments=3\n+ shift 1\n+ [[ 3 -ne 3 ]]\n+ check_arguments 2 one two three\n+ [[ 4 -lt 1 ]]\n+ expected_arguments=2\n+ shift 1\n+ [[ 2 -ne 3 ]]\n+ return 1\n+ check_arguments 1 'one two three'\n+ [[ 2 -lt 1 ]]\n+ expected_arguments=1\n+ shift 1\n+ [[ 1 -ne 1 ]]\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim argument-checker.sh \nreader@ubuntu:~/scripts/chapter_13$ cat argument-checker.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-11-17\n# Description: Validates the check_arguments library function\n# Usage: ./argument-checker.sh <argument1> <argument2>\n#####################################\n\nsource ~/bash-function-library.sh\n\n# Check user input. \n# Use double quotes around $@ to prevent word splitting.\ncheck_arguments 2 \"$@\"\necho $?\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh \n1\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh 1\n1\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh 1 2\n0\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh \"1 2\"\n1\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh \"1 2\" 3\n0\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ tail -3 argument-checker.sh \ncheck_arguments 2 $@\necho $?\n\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh \"1 2\"\n0\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim argument-checker.sh \nreader@ubuntu:~/scripts/chapter_13$ cat argument-checker.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\n# Date: 2018-11-17\n# Description: Validates the check_arguments library function\n# Usage: ./argument-checker.sh <argument1> <argument2>\n#####################################\n\nsource ~/bash-function-library.sh\n\n# Check user input. \n# Use double quotes around $@ to prevent word splitting.\ncheck_arguments 2 \"$@\" || \\\n{ echo \"Incorrect usage! Usage: $0 <argument1> <argument2>\"; exit 1; }\n\n# Arguments are correct, print them.\necho \"Your arguments are: $1 and $2\"\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh \nIncorrect usage! Usage: argument-checker.sh <argument1> <argument2>\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh dog cat\nYour arguments are: dog and cat\nreader@ubuntu:~/scripts/chapter_13$ bash argument-checker.sh dog cat mouse\nIncorrect usage! Usage: argument-checker.sh <argument1> <argument2>\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim ~/bash-function-library.sh \nreader@ubuntu:~/scripts/chapter_13$ cat ~/bash-function-library.sh \n#!/bin/bash\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-11-17\n# Description: Bash function library.\n# Usage: source ~/bash-function-library.sh\n#####################################\n<SNIPPED>\n# Set the current working directory to the script location.\nset_cwd() {\n  cd $(dirname $0)\n}\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ cp ../chapter_12/redirect-to-file.sh library-redirect-to-file.sh\nreader@ubuntu:~/scripts/chapter_13$ vim library-redirect-to-file.sh \nreader@ubuntu:~/scripts/chapter_13$ cat library-redirect-to-file.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Redirect user input to file.\n# Usage: ./library-redirect-to-file.sh\n#####################################\n\n# Load our Bash function library.\nsource ~/bash-function-library.sh\n\n# Since we're dealing with paths, set current working directory.\nset_cwd\n\n# Capture the users' input.\nread -p \"Type anything you like: \" user_input\n\n# Save the users' input to a file. > for overwrite, >> for append.\necho ${user_input} >> redirect-to-file.txt\n```", "```\nreader@ubuntu:/tmp$ bash ~/scripts/chapter_13/library-redirect-to-file.sh\nType anything you like: I like ice cream, I guess\nreader@ubuntu:/tmp$ ls -l\ndrwx------ 3 root root 4096 Nov 17 11:20 systemd-private-af82e37c...\ndrwx------ 3 root root 4096 Nov 17 11:20 systemd-private-af82e37c...\nreader@ubuntu:/tmp$ cd ~/scripts/chapter_13\nreader@ubuntu:~/scripts/chapter_13$ ls -l\n<SNIPPED>\n-rw-rw-r-- 1 reader reader 567 Nov 17 19:32 library-redirect-to-file.sh\n-rw-rw-r-- 1 reader reader 26 Nov 17 19:35 redirect-to-file.txt\n-rw-rw-r-- 1 reader reader 933 Nov 17 15:18 reverser.sh\nreader@ubuntu:~/scripts/chapter_13$ cat redirect-to-file.txt \nI like ice cream, I guess\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim ~/bash-function-library.sh\nreader@ubuntu:~/scripts/chapter_13$ cat ~/bash-function-library.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\n# Date: 2018-11-17\n# Description: Bash function library.\n# Usage: source ~/bash-function-library.sh\n#####################################\n<SNIPPED>\n\n# Checks if the argument is an integer.\ncheck_integer() {\n  # Input validation.\n  if [[ $# -ne 1 ]]; then\n    echo \"Need exactly one argument, exiting.\"\n    exit 1 # No validation done, exit script.\n  fi\n\n  # Check if the input is an integer.\n  if [[ $1 =~ ^[[:digit:]]+$ ]]; then\n    return 0 # Is an integer.\n  else\n    return 1 # Is not an integer.\n  fi\n}\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim library-password-generator.sh \nreader@ubuntu:~/scripts/chapter_13$ cat library-password-generator.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Generate a password.\n# Usage: ./library-password-generator.sh <length>\n#####################################\n\n# Load our Bash function library.\nsource ~/bash-function-library.sh\n\n# Check for the correct number of arguments.\ncheck_arguments 1 \"$@\" || \\\n{ echo \"Incorrect usage! Usage: $0 <length>\"; exit 1; }\n\n# Verify the length argument.\ncheck_integer $1 || { echo \"Argument must be an integer!\"; exit 1; }\n\n# tr grabs readable characters from input, deletes the rest.\n# Input for tr comes from /dev/urandom, via input redirection.\n# echo makes sure a newline is printed.\ntr -dc 'a-zA-Z0-9' < /dev/urandom | head -c $1\necho\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash library-password-generator.sh\nIncorrect usage! Usage: library-password-generator.sh <length>\nreader@ubuntu:~/scripts/chapter_13$ bash library-password-generator.sh 10\n50BCuB835l\nreader@ubuntu:~/scripts/chapter_13$ bash library-password-generator.sh 10 20\nIncorrect usage! Usage: library-password-generator.sh <length>\nreader@ubuntu:~/scripts/chapter_13$ bash library-password-generator.sh bob\nArgument must be an integer!\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ vim ~/bash-function-library.sh \nreader@ubuntu:~/scripts/chapter_13$ cat ~/bash-function-library.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.3.0\n# Date: 2018-11-17\n# Description: Bash function library.\n# Usage: source ~/bash-function-library.sh\n#####################################\n<SNIPPED>\n\n# Checks if the user answered yes or no.\ncheck_yes_no() {\n  # Input validation.\n  if [[ $# -ne 1 ]]; then\n    echo \"Need exactly one argument, exiting.\"\n    exit 1 # No validation done, exit script.\n  fi\n\n  # Return 0 for yes, 1 for no, exit 2 for neither.\n  if [[ ${1,,} = 'y' || ${1,,} = 'yes' ]]; then\n    return 0\n  elif [[ ${1,,} = 'n' || ${1,,} = 'no' ]]; then\n    return 1\n  else\n    echo \"Neither yes or no, exiting.\"\n    exit 2\n  fi\n}\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ cp ../chapter_09/yes-no-optimized.sh library-yes-no.sh\nreader@ubuntu:~/scripts/chapter_13$ vim library-yes-no.sh\nreader@ubuntu:~/scripts/chapter_13$ cat library-yes-no.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-11-17\n# Description: Doing yes-no questions from our library.\n# Usage: ./library-yes-no.sh\n#####################################\n\n# Load our Bash function library.\nsource ~/bash-function-library.sh\n\nread -p \"Do you like this question? \" reply_variable\n\ncheck_yes_no ${reply_variable} && \\\necho \"Great, I worked really hard on it!\" || \\\necho \"You did not? But I worked so hard on it!\"\n```", "```\nreader@ubuntu:~/scripts/chapter_13$ bash library-yes-no.sh \nDo you like this question? Yes\nGreat, I worked really hard on it!\nreader@ubuntu:~/scripts/chapter_13$ bash library-yes-no.sh \nDo you like this question? n\nYou did not? But I worked so hard on it!\nreader@ubuntu:~/scripts/chapter_13$ bash library-yes-no.sh \nDo you like this question? MAYBE \nNeither yes or no, exiting.\nreader@ubuntu:~/scripts/chapter_13$ bash library-yes-no.sh \nDo you like this question?\nNeed exactly one argument, exiting.\n```"]