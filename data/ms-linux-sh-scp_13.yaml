- en: Chapter 13. Using Perl as a Bash Scripting Alternative
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。使用Perl作为Bash脚本的替代方案
- en: Scripting with bash can help you with the automation of tasks and you can achieve
    a great deal by mastering bash scripting. However, your journey should not end
    with bash. While we have seen the power available in your bash scripts, we are
    limited by the commands we can run and the options they have. Bash scripts allow
    us to access commands; whereas, if we use Perl scripts, we have access to the
    programming interfaces or the APIs of the system. In this way, we can often achieve
    more with fewer resources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用bash进行脚本编写可以帮助您自动化任务，并且通过掌握bash脚本编写，您可以取得很大成就。然而，您的旅程不应该以bash结束。虽然我们已经看到了在bash脚本中可用的功能，但我们受到可以运行的命令和它们的选项的限制。Bash脚本允许我们访问命令；而如果我们使用Perl脚本，我们就可以访问系统的编程接口或API。通过这种方式，我们通常可以用更少的资源实现更多的功能。
- en: 'In this chapter, we will introduce Perl scripting and some other basic scripts
    that we can use to learn Perl; we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Perl脚本和一些其他基本脚本，我们可以用来学习Perl；我们将涵盖以下主题：
- en: What is Perl?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Perl？
- en: Hello World
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello World
- en: Arrays in Perl
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl中的数组
- en: Conditional tests in Perl
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl中的条件测试
- en: Functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: What is Perl?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Perl？
- en: Perl is a scripting language that was developed in the 1980's by Larry Wall
    to extend the functionality of `sed` and `awk`. It is an acronym for **Practical
    Extraction and Reporting Language** but has grown far bigger than its original
    purpose and today it is available on Unix, Linux, OS X, and Windows operating
    systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Perl是一种脚本语言，由Larry Wall在1980年代开发，用于扩展`sed`和`awk`的功能。它是**Practical Extraction
    and Reporting Language**的首字母缩写，但已经远远超出了最初的目的，今天它可以在Unix、Linux、OS X和Windows操作系统上使用。
- en: 'Although, it is a scripting language, it is not shell scripting; as such there
    is no Perl shell. This means that the code has to be executed via Perl scripts
    and not directly from the command line. The exception to this is the `-e` option
    to the `perl` command that can allow you to execute a `perl` statement. For example,
    we can use the following command line to print the ubiquitous `Hello World`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它是一种脚本语言，但它不是shell脚本；因此没有Perl shell。这意味着代码必须通过Perl脚本执行，而不是直接从命令行执行。唯一的例外是`perl`命令的`-e`选项，它可以允许您执行一个`perl`语句。例如，我们可以使用以下命令行来打印无处不在的`Hello
    World`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will find that Perl is installed by default on most Linux and Unix systems
    as many programs will make use of Perl in their code. To check the version of
    Perl that you have installed on your system you can use the `perl` command, as
    follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现Perl默认安装在大多数Linux和Unix系统上，因为许多程序将在它们的代码中使用Perl。要检查您系统上安装的Perl版本，可以使用`perl`命令，如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of this command is shown in the following screenshot from my Raspberry
    Pi:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出显示在我树莓派上的以下截图中：
- en: '![What is Perl?](img/00125.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Perl？](img/00125.jpeg)'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, Perl in uppercase will refer to the language and `perl` in
    lowercase will refer to the command.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，大写的Perl将指的是语言，小写的`perl`将指的是命令。
- en: 'If we create a Perl script, just like bash it will be an interpreted language
    and the first line will be the shebang, so that the system knows which command
    is to be used to read the script. The /`usr/bin/perl` command can be used to locate
    `perl` often. To verify this, you may use:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个Perl脚本，就像bash一样，它将是一种解释性语言，第一行将是shebang，以便系统知道要使用哪个命令来读取脚本。`/usr/bin/perl`命令通常用于定位`perl`。要验证这一点，可以使用：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Unlike bash, when the `perl` command reads the script it will optimize the script
    at runtime; one simple feature that this will enable is that we can define the
    functions at the end of the script, rather than before they are used. We will
    see this as we look at the Perl script in more detail, as we work through this
    chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与bash不同，当`perl`命令读取脚本时，它将在运行时优化脚本；这将使我们能够在脚本末尾定义函数，而不是在使用之前。当我们在本章中详细查看Perl脚本时，我们将看到这一点。
- en: Hello World
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World
- en: To create a simple Perl script, we can use the text editor of choice. For short
    scripts `vi` or `vim` works well, as does `gedit` if you want to work in GUI.
    For larger projects an IDE may help. Often, the IDE will allow you to change the
    object name easily throughout the script and provide expansion of object names.
    In this chapter, we will make use of very simple scripts so we will continue to
    use `vi`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的Perl脚本，我们可以使用所选的文本编辑器。对于短脚本，`vi`或`vim`效果很好，如果要在GUI中工作，`gedit`也可以。对于较大的项目，IDE可能会有所帮助。通常，IDE将允许您轻松地在整个脚本中更改对象名称并提供对象名称的扩展。在本章中，我们将继续使用`vi`。
- en: 'We will create a `$HOME/bin/hello.pl` file to produce the output we want:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`$HOME/bin/hello.pl`文件来产生我们想要的输出：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The file still needs to be in a directory within our `PATH` variable; hence,
    we create `$HOME/bin`. If it is not in the `PATH` variable then we will need to
    specify the full or relative path of the file, as with bash.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 文件仍然需要在我们的`PATH`变量中的目录中；因此，我们创建`$HOME/bin`。如果它不在`PATH`变量中，那么我们将需要指定文件的完整路径或相对路径，就像bash一样。
- en: 'The file will need to be set with the execute permission. We can do this with
    the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 文件需要设置执行权限。我们可以使用以下命令来实现：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can run the script with the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令运行脚本：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see that the code that we have added is the same as the one we ran the
    earlier `perl -e` command with. The only difference is the shebang. This is also
    quite similar to bash. We now use the print function rather than using the `echo`
    command. Bash scripts run a series of commands, whereas Perl scripts run functions.
    The print function does not automatically add a new line so we add it ourselves
    using the `\n` character. We can also see that the Perl uses the semi-colon to
    terminate a line of code. The shebang is not a line of code, whereas the print
    line is terminated with a semicolon.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们添加的代码与我们之前运行的`perl -e`命令相同。唯一的区别是shebang。这也与bash非常相似。我们现在使用print函数而不是使用`echo`命令。Bash脚本运行一系列命令，而Perl脚本运行函数。print函数不会自动添加新行，因此我们使用`\n`字符自己添加。我们还可以看到Perl使用分号来终止一行代码。shebang不是一行代码，而print行以分号终止。
- en: 'If we are using Perl version 5.10 or later, on the Pi we have seen that it
    is 5.14 and we can also make use of a function `say`. Similar to the `print` command,
    this is used to display output but it also includes the newline. We have to enable
    this feature, which is managed by the `use` keyword. Either of the following scripts
    will print `Hello World` using the `say` function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用的是Perl 5.10或更高版本，在Pi上我们已经看到它是5.14，我们还可以使用一个名为`say`的函数。类似于`print`命令，它用于显示输出，但它还包括换行符。我们必须启用此功能，由`use`关键字管理。以下任一脚本都将使用`say`函数打印`Hello
    World`：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `say` function also simplifies the printing of files and lists.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`say`函数还简化了文件和列表的打印。'
- en: Perl arrays
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Perl数组
- en: Something that we can make use of in Perl is an array. These arrays are variables
    that are created from lists; put simply, they are basically multi-valued variables.
    If we were to use a container analogy to describe a variable, it will be either
    a cup or a placeholder for one value. An array will be analogous to a crate. We
    can describe the crate with a single name but we have to include additional naming
    elements to access each slot within the crate. A crate can hold more than a single
    item, just like an array.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Perl中我们可以利用的一点是数组。这些数组是从列表创建的变量；简单地说，它们基本上是多值变量。如果我们要使用容器类比来描述一个变量，它将是一个杯子或一个值的占位符。数组将类比为一个板条箱。我们可以用一个单一的名称描述板条箱，但是我们必须包括额外的命名元素来访问板条箱内的每个槽。一个板条箱可以容纳多个项目，就像一个数组一样。
- en: We saw that by using bash scripting we can pass command line arguments in the
    script. The arguments were using their own variable name, `$1`, `$2`, and so on.
    This also clashed with the name of the program, to a degree, because of the fact
    that it was `$0`. Even though they may appear similar, there is no logical relationship
    between `$0` and `$1`. The `$0` variable is the name of the script and `$1` is
    the first argument. When we look at this in Perl, we can start to see some of
    the major differences.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到通过使用bash脚本，我们可以在脚本中传递命令行参数。参数使用它们自己的变量名，`$1`，`$2`等。这也与程序的名称有一定的冲突，因为它是`$0`。即使它们看起来可能相似，但`$0`和`$1`之间没有逻辑关系。`$0`变量是脚本的名称，`$1`是第一个参数。当我们在Perl中看到这一点时，我们可以开始看到一些主要的区别。
- en: Program name?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序名称？
- en: 'The program name in Perl can still be accessed with the `$0` variable. We can
    see this in the following script:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Perl中，程序名称仍然可以使用`$0`变量访问。我们可以在以下脚本中看到这一点：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, even though we think of `$0` as quite simple to use, as we have accessed
    it in bash before, if we approach this with fresh eyes it is not so obvious. Perl
    has a module called `English` where we have some more friendly names defined for
    many other variables used in Perl. If we take a look at the following script we
    can see this in use:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使我们认为`$0`使用起来相当简单，因为我们之前在bash中访问过它，但如果我们以全新的眼光来看待它，它并不那么明显。Perl有一个名为`English`的模块，其中定义了许多其他在Perl中使用的变量的更友好的名称。如果我们看一下以下脚本，我们可以看到它的用法：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The line `use` `English`; will import the module that redefines `$0` so that
    it can be referenced as `$PROGRAM_NAME`. Although, this requires more typing it
    also acts as a better name documenting its purpose.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`use English`;这一行将导入重新定义`$0`的模块，以便可以将其引用为`$PROGRAM_NAME`。尽管这需要更多的输入，但它也作为一个更好的名称来记录其目的。'
- en: Argument arrays
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数数组
- en: Rather than using `$1`, `$2,` and so on for the arguments; Perl now uses a list
    of arguments stored in a single array variable. The array name is `@ARGV` and
    we can access each argument supplied by this in the index number or slot number.
    The computers start counting at `0`, so the first argument will be `$ARGV[0]`,
    the second will be `$ARGV[1]`, and so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不再使用`$1`，`$2`等参数；Perl现在使用存储在单个数组变量中的参数列表。数组名称是`@ARGV`，我们可以通过索引号或槽号访问由此提供的每个参数。计算机从`0`开始计数，所以第一个参数将是`$ARGV[0]`，第二个将是`$ARGV[1]`，依此类推。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An index array is named using the `@` symbol. Each element of the array is still
    a single or scalar variable and just like in bash, they are read with the `$`
    symbol.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@`符号命名索引数组。数组的每个元素仍然是单个或标量变量，就像在bash中一样，它们使用`$`符号读取。
- en: 'When we look at the following script, `$HOME/bin/args.pl`, we can see how to
    make the Hello script more portable by accepting arguments:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看以下脚本`$HOME/bin/args.pl`时，我们可以看到如何通过接受参数使Hello脚本更具可移植性：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can see this in action by running the script, as shown in the following
    screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行脚本来看到这一点，如下面的屏幕截图所示：
- en: '![Argument arrays](img/00126.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![参数数组](img/00126.jpeg)'
- en: Counting elements in an array
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算数组中的元素
- en: 'We can see that the command-line arguments are stored in the `@ARGV` array.
    We can count the number of arguments or, in fact, the elements in any array using
    the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到命令行参数存储在`@ARGV`数组中。我们可以使用以下代码计算参数的数量，或者实际上是任何数组中的元素：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So instead of using the `$#` to count the supplied arguments, we will use the
    code as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用以下代码来计算提供的参数，而不是使用`$#`：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we add this to our script, it will be seen, as shown in the following code
    block:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个添加到我们的脚本中，它将会被看到，如下面的代码块所示：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also take a note from the previous code block that we can concatenate
    the output of a command with a test using the period character.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从前面的代码块中注意到，我们可以使用句点字符将命令的输出与测试连接起来。
- en: Looping through an array
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环遍历数组
- en: 'In bash, we have a simple mechanism with `$*` to refer the list of arguments
    supplied to a script. In Perl, this is just a little different from having to
    loop through the list. However, the `foreach` keyword is built for this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash中，我们有一个简单的机制，使用`$*`来引用提供给脚本的参数列表。在Perl中，这与必须循环遍历列表略有不同。然而，`foreach`关键字是为此而建立的：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can see that the code is defined within the loop and is contained using the
    brace brackets. If you recall, bash did not specifically have a `foreach` keyword
    and it made use of `do` and `done` to constrain the code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，代码是在循环内定义的，并使用大括号括起来。如果您还记得，bash并没有专门的`foreach`关键字，而是使用`do`和`done`来限制代码。
- en: 'If we implement this code in the `$HOME/bin/forargs.pl` file, we can execute
    it as a code similar to the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`$HOME/bin/forargs.pl`文件中实现此代码，我们可以执行类似以下屏幕截图的代码：
- en: '![Looping through an array](img/00127.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![循环遍历数组](img/00127.jpeg)'
- en: Creating arrays
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组
- en: So far, we have relied on the `@ARGV` system array and this has proved to be
    a great way to learn how to access and array. We now need to see how to create
    arrays of our own design.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直依赖于`@ARGV`系统数组，这已被证明是学习如何访问数组的好方法。现在我们需要看看如何创建我们自己设计的数组。
- en: 'Arrays are lists of values that can store mixed data types; so, there is no
    reason why we cannot have an array that stores both strings and numbers. The order
    in which the items are supplied to the array will set their index position. In
    other words, the first item in the list will be the first index or index `0` in
    the array. Consider the following code: `$HOME/bin/array.pl`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是可以存储混合数据类型的值的列表；因此，我们可以有一个既存储字符串又存储数字的数组是毫无问题的。提供给数组的项目的顺序将设置它们的索引位置。换句话说，列表中的第一项将是数组中的第一个索引或索引`0`。考虑以下代码：`$HOME/bin/array.pl`：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first thing we should notice is that when we are setting a variable of any
    type, including an array, we will use the designator for the variable type. We
    see here that the use of `@user = …`, will make use of the `@` symbol as previously
    mentioned to denote that the variable is an array variable. If we were setting
    a scalar variable similar to the ones we use in bash, we will set `$user`. In
    bash, we do not use the designator when setting a variable and we cannot have
    spaces surrounding the assignment operator, `=`. Perl will allow the spaces and
    aids in the readability with an extra whitespace.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意的第一件事是，当我们设置任何类型的变量时，包括数组时，我们将使用变量类型的指示符。我们在这里看到，使用`@user = …`，将使用先前提到的`@`符号来表示变量是一个数组变量。如果我们设置一个类似于我们在bash中使用的标量变量，我们将设置`$user`。在bash中，设置变量时不使用指示符，并且我们不能在赋值运算符`=`周围有空格。Perl将允许空格，并通过额外的空格提高可读性。
- en: Next, we should notice that the list contains strings and an integer. This is
    perfectly acceptable and the array can hold different data types. A single name
    of the array makes sense, as we can now store related data into one object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该注意到列表包含字符串和整数。这是完全可以接受的，数组可以容纳不同的数据类型。数组的单个名称是有意义的，因为我们现在可以将相关数据存储到一个对象中。
- en: The final point to take note of in the supplied code is that we can easily concatenate
    the string values with integer values using Perl. There is no need to provide
    any form of data translation. Within the single string, we print the first name,
    last name, and age of the user.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的代码中需要注意的最后一点是，我们可以轻松地使用Perl将字符串值与整数值连接起来。无需提供任何形式的数据转换。在单个字符串中，我们打印用户的名字、姓氏和年龄。
- en: 'On script execution, we should receive an output, as shown in the following
    screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本执行时，我们应该收到一个输出，如下面的屏幕截图所示：
- en: '![Creating arrays](img/00128.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![创建数组](img/00128.jpeg)'
- en: Conditional statements in Perl
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Perl中的条件语句
- en: Similar to the rest of the Perl language, we will have similarities with bash
    scripting and some completely new ways of implementing conditions. This will often
    work in our favor; thus, making the code more readable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与Perl语言的其余部分类似，我们将与bash脚本编写有相似之处，也有一些完全实现条件的新方法。这通常对我们有利，因此使代码更易读。
- en: Replacing command line lists
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换命令行列表
- en: 'First, we do not have the command line list logic, which we use in bash and
    we do not make use of the `&&` and `||`. Instead of these rather weird looking
    symbols, the conditional logic for single statements in Perl is written in the
    following manner:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们没有命令行列表逻辑，我们在bash中使用的逻辑，也不使用`&&`和`||`。在Perl中，单个语句的条件逻辑是以以下方式编写的，而不是这些看起来相当奇怪的符号：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the first example, we exit with an error code of `2`, if we have supplied
    less than one command-line argument. The bash equivalent to this will be:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，如果我们提供的命令行参数少于一个，我们将以错误代码`2`退出。这在bash中的等效操作将是：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the second example, we will only print the `hello` statement if we have
    supplied arguments. This will be written in bash, as shown in the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，只有在我们提供了参数时，我们才会打印`hello`语句。这将在bash中编写，如下例所示：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Personally, I like Perl; the way as it at least uses words, so we may understand
    what is happening even if we have not come across the symbols before.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我喜欢Perl；至少它使用单词的方式，这样我们即使以前没有遇到过这些符号，也可以理解发生了什么。
- en: If and unless
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: If和unless
- en: Within Perl, as we have already seen in the previous examples, we can make use
    of negative logic using `unless`. We both have the traditional `if` keyword and
    now `unless` is an addition. We can use these in our short code, as we have seen
    or in complete blocks of code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Perl中，我们已经在之前的例子中看到，我们可以使用`unless`来使用负逻辑。我们既有传统的`if`关键字，现在又有了`unless`。我们可以在我们已经看到的短代码中使用这些，也可以在完整的代码块中使用。
- en: 'We can edit the existing `args.pl` to create a new file: `$HOME/bin/ifargs.pl`.
    The file should read similar to the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编辑现有的 `args.pl` 来创建一个新文件：`$HOME/bin/ifargs.pl`。文件应该类似于以下代码：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The code now has an additional argument, which we have declared and set with
    the line that reads `my $count = scalar @ARGV;`. We used this value as a condition
    for the `if` statement. The block of code constrained in the brace brackets will
    execute only if the condition is true.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码有了一个额外的参数，我们已经声明并设置了这一行 `my $count = scalar @ARGV;`。我们使用这个值作为 `if` 语句的条件。在大括号中限定的代码块只有在条件为真时才会执行。
- en: 'We demonstrate the running of this program with and without arguments in the
    following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示了在下面的截图中使用和不使用参数运行此程序：
- en: '![If and unless](img/00129.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![If and unless](img/00129.jpeg)'
- en: 'We can write a similar code using `unless`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `unless` 来编写类似的代码：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The code in the brackets now runs only if the condition is false. In this case,
    if we have not supplied arguments, the code will not run.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的代码现在只有在条件为假时才运行。在这种情况下，如果我们没有提供参数，代码将不运行。
- en: Using functions within Perl
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Perl 中使用函数
- en: As with all languages, the ability to encapsulate a code within functions can
    make the code more readable and ultimately results in easier to manage codes,
    with less number of lines. Unlike bash, the functions in Perl can be defined after
    they are referenced in the code and we often choose to define the functions at
    the end of the script.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有语言一样，将代码封装在函数中可以使代码更易读，并最终导致更易管理的代码，代码行数也更少。与 bash 不同，Perl 中的函数可以在代码中引用后定义，我们通常选择在脚本末尾定义函数。
- en: Prompt for user input
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示用户输入
- en: 'We have seen the use of command-line arguments in Perl; now, let''s take a
    look at prompting for user input. This becomes a great way to encapsulate the
    code to execute and store the prompt within a function. First of all, we will
    look at a simple script that prompts for the username and then we will modify
    it to include the function. We will create the `$HOME/bin/prompt.pl` file to read,
    as shown in the following code example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了在 Perl 中使用命令行参数；现在，让我们来看看如何提示用户输入。这成为了一种封装执行代码和存储提示的好方法。首先，我们将看一个简单的脚本，提示用户名，然后我们将修改它以包含函数。我们将创建
    `$HOME/bin/prompt.pl` 文件来读取，如下面的代码示例所示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In line 2, we have declared the variable using `my`. The keyword `my` defines
    the variable with a local scope. In other words, it is local to the block of code
    that it is created within. As this has been created in the main body of the script,
    the variable is available to the entire script. The line declares the variable
    but we do not set the value at this time. Perl does not force you to declare the
    variables, but it is a good idea and a great practice. In fact, we can tell Perl
    to enforce this with the use of the `use strict;` line. We can implement this,
    as shown in the following code block:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 行，我们使用 `my` 声明了变量。关键字 `my` 定义了具有局部作用域的变量。换句话说，它仅在创建它的代码块中可用。由于这是在脚本的主体中创建的，变量对整个脚本都是可用的。这一行声明了变量，但我们此时没有设置值。Perl
    不强制您声明变量，但这是一个好主意和一个很好的实践。事实上，我们可以告诉 Perl 使用 `use strict;` 行来强制执行这一点。我们可以实现这一点，如下面的代码块所示：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this in place, we are forced to declare the variables and the code will
    fail if they are not. The idea behind this is to help troubleshooting by identifying
    misspelled variables later in the code. Try deleting the line starting with `my`
    and re-executing the code; it will fail. Similarly, we can make use of the `use
    warnings;` line, to warn us if we have used a variable only once.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们被迫声明变量，如果没有声明，代码将失败。这背后的想法是通过在代码后期识别拼写错误的变量来帮助故障排除。尝试删除以 `my` 开头的行并重新执行代码；它将失败。同样，我们可以使用
    `use warnings;` 行，如果我们只使用了一次变量，它会警告我们。
- en: We prompt for the user name and do not use a newline here. We want the prompt
    to be on the same line with the one the user will enter the data into. The function
    `chomp` is great isn't it? This function will remove or chomp the newline from
    the input that we submit. We will need to use the *Enter* key to submit the data
    and `chomp` removes the newline for us.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提示用户输入用户名，这里不使用换行符。我们希望提示与用户输入数据的行在同一行上。`chomp` 函数很棒，不是吗？这个函数将删除或截断我们提交的输入中的换行符。我们需要使用
    *Enter* 键提交数据，`chomp` 会为我们删除换行符。
- en: Creating the function
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建函数
- en: 'We are currently only prompting for a user name, so we need just one prompt
    but we could easily ask for a first name and last name. Rather than writing the
    code for the prompt each time, we can create a function. These are defined using
    the keyword `sub`, as we can see in the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们只提示用户输入用户名，所以我们只需要一个提示，但我们也可以很容易地要求名字和姓氏。我们可以创建一个函数，而不是每次都写提示的代码。这些是使用关键字
    `sub` 定义的，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `prompt_user` function takes a single argument, which will become the message
    to display with the prompt. For the reference to the argument, we use the system
    array `@_` and index `0`. This is written as `$_[0]`. If we remember, arrays are
    multi-valued and each entry in the array is a scalar variable. Within the function,
    we use the function return to send the value that the user has set back to the
    calling code. We can see that the main code block is simpler now with the code
    for the prompt being abstracted into a function. When we look at this, we may
    think that it took a lot of work, but when we look at adding it in a prompt for
    a first name and last name, it is now much simpler.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`prompt_user` 函数接受一个参数，这个参数将成为显示提示的消息。对于参数的引用，我们使用系统数组 `@_` 和索引 `0`。这写作 `$_[0]`。如果我们记得，数组是多值的，数组中的每个条目都是一个标量变量。在函数内部，我们使用函数返回将用户设置的值发送回调用代码。我们可以看到主代码块现在更简单了，因为提示的代码被抽象成了一个函数。当我们看到这个时，可能会觉得这需要很多工作，但是当我们为名字和姓氏添加提示时，现在就简单多了。'
- en: 'Functions are good things to use and hopefully the following code will help
    you see this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数是一个好习惯，希望下面的代码能帮助你看到这一点：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So this concludes our whirlwind tour and the introduction to Perl. We have seen
    the similarities with bash, as well as, the new features and differences. The
    main points to take from this are that once you become proficient in one language
    it becomes easier to learn other coding languages.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们的风风火火的旅程和对Perl的介绍。我们已经看到了它与bash的相似之处，以及新的特性和区别。从中可以得出的主要观点是，一旦你精通一种语言，学习其他编程语言就会变得更容易。
- en: To keep us in the mood of learning new languages, we will now take a quick tour
    of Python in the next chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持学习新语言的兴致，我们接下来将在下一章快速了解Python。
