["```\n{\n\u00a0\u00a0\u00a0\u00a0\"name\": \"chapter-10-01-web-app\",\n...\n```", "```\n* Serving Flask app \"app.py\"\n * Environment: development\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```", "```\nRUN apt-get update \\\n\u00a0\u00a0\u00a0\u00a0\u00a0&& export \nDEBIAN_FRONTEND=noninteractive \\\"\n\u00a0\u00a0\u00a0\u00a0# Install docker\n\u00a0\u00a0\u00a0\u00a0&& apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \\\n\u00a0\u00a0\u00a0\u00a0&& curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | apt-key add - 2>/dev/null \\\n\u00a0\u00a0\u00a0\u00a0&& add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable\" \\\n\u00a0\u00a0\u00a0\u00a0&& apt-get update \\\n\u00a0\u00a0\u00a0\u00a0&& apt-get install -y docker-ce-cli \\\n\u00a0\u00a0\u00a0\u00a0# Install docker (END)\n\u00a0\u00a0\u00a0\u00a0# Install icu-devtools\n\u00a0\u00a0\u00a0\u00a0&& apt-get install -y icu-devtools \\ \n\u00a0\u00a0\u00a0\u00a0# Clean up\n\u00a0\u00a0\u00a0\u00a0&& apt-get autoremove -y \\\n\u00a0\u00a0\u00a0\u00a0&& apt-get clean -y \\\n\u00a0\u00a0\u00a0\u00a0&& rm -rf /var/lib/apt/lists/*\n```", "```\n\"mounts\": [\n\u00a0\u00a0\u00a0\u00a0// mount the host docker socket (for Kind and docker builds)\n\u00a0\u00a0\u00a0\u00a0\"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\"\n],\n```", "```\n# docker ps\nCONTAINER ID\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IMAGE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0COMMAND\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATED\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0STATUS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PORTS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NAMES\n6471387cf184\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vsc-03-web-app-kind-44349e1930d9193efc2813 97a394662f\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/bin/sh -c 'echo Co\u2026\"\u00a0\u00a0\u00a054 seconds ago \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Up 53 seconds\u00a0\u00a0\n```", "```\ndocker build -t simple-python-app-2:v1 -f Dockerfile .\n```", "```\n# docker run -d --network=container:$HOSTNAME --name chapter-10-example simple-python-app-2:v1 \nffb7a38fc8e9f86a8dd50ed197ac1a202ea7347773921de6a34b93cec 54a1d95\n```", "```\n# curl localhost:5000\n<html><body><h1>Hello from Linux (4.19.104-microsoft-standard) on ffb7a38fc8e9</h1></body></html>\n```", "```\n\"forwardPorts\": [\n\u00a0\u00a0\u00a0\u00a05000\n]\n```", "```\n# Install Kind\nRUN curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.8.1/kind-linux-amd64 && \\\n\u00a0\u00a0\u00a0\u00a0chmod +x ./kind && \\\n\u00a0\u00a0\u00a0\u00a0mv ./kind /usr/local/bin/kind\n```", "```\n# Install kubectl\nRUN curl -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl \\\n\u00a0\u00a0\u00a0\u00a0&& chmod +x /usr/local/bin/kubectl\n```", "```\n\"mounts\": [\n\u00a0\u00a0\u00a0\u00a0// mount a volume for kube config\n\u00a0\u00a0\u00a0\u00a0\"source=04-web-app-kind-completed-kube,target=/root/.kube,type=volume\",\n\u00a0\u00a0\u00a0\u00a0// mount the host docker socket (for Kind and docker builds)\n\u00a0\u00a0\u00a0\u00a0\"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\"\n],\n```", "```\n\"runArgs\": [\n\u00a0\u00a0\u00a0\u00a0// use host networking (to allow connecting to Kind clusters)\n\u00a0\u00a0\u00a0\u00a0\"--network=host\"\n],\n```", "```\n# kind load docker-image --name chapter-10-03 simple-python-app-2:v1\nImage: \"simple-python-app-2:v1\" with ID \"sha256:7c085e8bde177aa0abd02c36da2cdc68238e672f49f0c9b888581b 9602e6e093\" not yet present on node \"chapter-10-03-control-plane\", loading...\n```", "```\n# kubectl apply -f manifests/\ndeployment.apps/chapter-10-example created\nservice/chapter-10-example created\n```", "```\n# kubectl port-forward service/chapter-10-example 5000\nForwarding from 127.0.0.1:5000 -> 5000\nForwarding from [::1]:5000 -> 5000\n```", "```\n# curl localhost:5000\n<html><body><h1>Hello from Linux (4.19.104-microsoft-standard) on chapter-10-example-99c88ff47-k7599</h1></body></html>\n```", "```\n// Use 'postCreateCommand' to run commands after the container is created.\n\"postCreateCommand\": \"pip3 install -r requirements.txt\",\n```", "```\n// Use 'forwardPorts' to make a list of ports inside the container available locally.\n\"forwardPorts\": [\n\u00a0\u00a0\u00a0\u00a05000,\n\u00a0\u00a0\u00a0\u00a05001\n]\n```", "```\n# Set up bash history\nRUN echo \"export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history\" >> /root/.bashrc\n```", "```\n\"mounts\": [\n\u00a0\u00a0\u00a0\u00a0// mount the host docker socket\n\u00a0\u00a0\u00a0\u00a0\"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\"\n\u00a0\u00a0\u00a0\u00a0// mount the .azure folder\n\u00a0\u00a0\u00a0\u00a0\"source=${env:HOME}${env:USERPROFILE}/.azure,target=//root/.azure,type=bind\",\n// mount a volume for bash history\n\u00a0\u00a0\u00a0\u00a0\"source=myproject-bashhistory,target=/commandhistory,type=volume\",\n],\n```", "```\n\"extensions\": [\n\u00a0\u00a0\u00a0\u00a0\"redhat.vscode-yaml\",\n\u00a0\u00a0\u00a0\u00a0\"ms-vsliveshare.vsliveshare\"\n],\n```", "```\n\"remote.containers.defaultExtensions\": [\n\u00a0\u00a0\u00a0\u00a0\"mhutchie.git-graph\",\n\u00a0\u00a0\u00a0\u00a0\"trentrand.git-rebase-shortcuts\"\n],\n```", "```\n\"remote.containers.dotfiles.repository\": \"stuartleeks/dotfiles\",\n\"remote.containers.dotfiles.targetPath\": \"~/dotfiles\",\n\"remote.containers.dotfiles.installCommand\": \"~/dotfiles/install.sh\",\n```"]