- en: Access Control Lists and Shared Directory Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问控制列表和共享目录管理
- en: In the previous chapter, we reviewed the basics of Discretionary Access Control.
    In this chapter, we'll take our discussion of DAC a step further. We'll look at
    some more advanced techniques that you can use to make DAC do exactly what you
    want it to do.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们回顾了自主访问控制的基础知识。在本章中，我们将进一步讨论DAC，探讨一些更高级的技术，让您可以使用DAC完全按照您的意愿进行操作。
- en: 'Topics in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主题包括：
- en: Creating an **access control list** (**ACL**) for either a user or a group
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户或组创建访问控制列表（ACL）
- en: Creating an inherited ACL for a directory
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为目录创建继承的ACL
- en: Removing a specific permission by using an ACL mask
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用ACL掩码删除特定权限
- en: Using the `tar --acls` option to prevent loss of ACLs during a backup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`tar --acls`选项防止在备份期间丢失ACL
- en: Creating a user group and adding members to it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户组并向其中添加成员
- en: Creating a shared directory for a group, and setting the proper permissions
    on it
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为组创建共享目录，并对其进行适当的权限设置
- en: Setting the SGID bit and the sticky bit on the shared directory
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在共享目录上设置SGID位和粘着位
- en: Using ACLs to allow only certain members of the group to access a file in the
    shared directory
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ACL仅允许组的某些成员访问共享目录中的文件
- en: Creating an access control list for either a user or a group
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户或组创建访问控制列表
- en: The normal Linux file and directory permissions settings are okay, but they're
    not very granular. With an ACL, we can allow only a certain person to access a
    file or directory, or we can allow multiple people to access a file or directory
    with different permissions for each person. If we have a file or a directory that's
    wide open for everyone, we can use an ACL to allow different levels of access
    for either a group or an individual. Towards the end of the chapter, we'll put
    what we've learned all together in order to manage a shared directory for a group.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的Linux文件和目录权限设置还可以，但它们不够精细。通过ACL，我们可以只允许某个人访问文件或目录，或者我们可以允许多个人访问文件或目录，并为每个人设置不同的权限。如果我们有一个对所有人都开放的文件或目录，我们可以使用ACL来允许不同级别的访问，无论是对组还是个人。在本章末尾，我们将把我们学到的知识整合起来，以便为组管理共享目录。
- en: 'You would use `getfacl` to view an access control list for a file or directory.
    (Note that you can''t use it to view all files in a directory at once.) To begin,
    let''s use `getfacl` to see if we have any access control lists already set on
    the `acl_demo.txt` file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`getfacl`查看文件或目录的访问控制列表。（请注意，您不能一次查看目录中的所有文件。）首先，让我们使用`getfacl`来查看`acl_demo.txt`文件上是否已经设置了任何访问控制列表：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All we see here are just the normal permissions settings, so there's no ACL.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们只看到正常的权限设置，所以没有ACL。
- en: 'The first step for setting an ACL is to remove all permissions from everyone
    except for the user of the file. That''s because the default permissions settings
    allow members of the group to have read/write access, and others to have read
    access. So, setting an ACL without removing those permissions would be rather
    senseless:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 设置ACL的第一步是从除文件用户之外的所有人那里删除所有权限。这是因为默认权限设置允许组成员具有读/写访问权限，其他人具有读取权限。因此，在不删除这些权限的情况下设置ACL将是毫无意义的：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When using `setfacl` to set an ACL, you can allow a user or a group to have
    any combination of read, write, or execute privileges. In our case, let''s say
    that I want to let Maggie read the file, and to prevent her from having write
    or execute privileges:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setfacl`设置ACL时，可以允许用户或组具有任何组合的读取、写入或执行权限。在我们的情况下，假设我想让Maggie读取文件，并阻止她具有写入或执行权限：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `-m` option of `setfacl` means that we're about to modify the ACL. (Well,
    to create one in this case, but that's okay.) The `u:` means that we're setting
    an ACL for a user. We then list the user's name, followed by another colon, and
    the list of permissions that we want to grant to this user. In this case, we're
    only allowing Maggie read access. We complete the command by listing the file
    to which we want to apply this ACL. The `getfacl` output shows that Maggie does
    indeed have read access. Finally, we see in the `ls -l` output that the group
    is listed as having read access, even though we've set the `600` permissions setting
    on this file. But, there's also a `+` sign, which tells us that the file has an
    ACL. When we set an ACL, the permissions for the ACL show up as group permissions
    in `ls -l`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`setfacl`的`-m`选项意味着我们将修改ACL。（在这种情况下创建一个也可以，但没关系。）`u:`表示我们正在为用户设置ACL。然后我们列出用户的名称，后跟另一个冒号，以及我们要授予该用户的权限列表。在这种情况下，我们只允许Maggie读取访问。我们通过列出要应用此ACL的文件来完成命令。`getfacl`输出显示Maggie确实具有读取权限。最后，我们在`ls
    -l`输出中看到组被列为具有读取权限，即使我们已经在此文件上设置了`600`权限设置。但是，还有一个`+`号，这告诉我们该文件具有ACL。当我们设置ACL时，ACL的权限显示为`ls
    -l`中的组权限。'
- en: 'To take this a step further, let''s say that I want Frank to have read/write
    access to this file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，假设我想让Frank对此文件具有读/写访问权限：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, we can have two or more different ACLs assigned to the same file. In the
    `ls -l` output, we see that we have `rw` permissions set for the group, which
    is really just a summary of permissions that we've set in the two ACLs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以为同一个文件分配两个或更多不同的ACL。在`ls -l`输出中，我们看到我们已经为组设置了`rw`权限，这实际上只是我们在两个ACL中设置的权限的总结。
- en: 'We can set an ACL for group access by replacing the `u:` with a `g:`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将`u:`替换为`g:`来为组访问设置ACL：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Members of the `accounting` group now have read access to this file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounting`组的成员现在可以读取此文件。'
- en: Creating an inherited access control list for a directory
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为目录创建继承的访问控制列表
- en: There may be times when you'll want all files that get created in a shared directory
    to have the same access control list. We can do that by applying an inherited
    ACL to the directory. Although, understand that, even though this sounds like
    a cool idea, creating files in the normal way will cause files to have the read/write
    permissions set for the group, and the read permission set for others. So, if
    you're setting this up for a directory where users just create files normally,
    the best that you can hope to do is to create an ACL that adds either the write
    or execute permissions for someone. Either that, or ensure that users set the
    `600` permissions settings on all files that they create, assuming that users
    really do need to restrict access to their files.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能希望在共享目录中创建的所有文件都具有相同的访问控制列表。我们可以通过将继承的ACL应用于目录来实现这一点。尽管，要理解的是，即使这听起来像一个很酷的主意，以正常方式创建文件将导致文件对组设置读/写权限，并对其他用户设置读权限。因此，如果您为用户正常创建文件的目录设置了这一点，您最好希望创建一个ACL，为某人添加写或执行权限。或者确保用户为他们创建的所有文件设置`600`权限设置，假设用户确实需要限制对他们的文件的访问。
- en: On the other hand, if you're creating a shell script that creates files in a
    specific directory, you can include `chmod` commands to ensure that the files
    get created with the restrictive permissions that are necessary to make your ACL
    work as intended.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您正在创建一个在特定目录中创建文件的shell脚本，您可以包括`chmod`命令，以确保文件以必要的限制权限创建，以使您的ACL按预期工作。
- en: 'To demo, let''s create the `new_perm_dir` directory, and set the inherited
    ACL on it. I want to have read/write access for files that my shell script creates
    in this directory, and for Frank to have only read access. I don''t want anyone
    else to be able to read any of these files:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，让我们创建`new_perm_dir`目录，并在其中设置继承的ACL。我希望我的shell脚本在此目录中创建的文件具有读/写访问权限，并且Frank只能具有读取权限。我不希望其他人能够读取这些文件：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All I had to do to make this an inherited ACL was to add the `d:` before the
    `u:frank`. I left the default permissions settings on the directory, which allows
    everyone read access to the directory. Next, I''ll create the `donnie_script.sh`
    shell script that will create a file within that directory, and that will set
    read/write permissions for only the user of the new files:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我只需要做的就是在`u:frank`之前添加`d:`，使其成为继承的ACL。我保留了目录上的默认权限设置，允许每个人对目录进行读取。接下来，我将创建`donnie_script.sh`
    shell脚本，该脚本将在该目录中创建一个文件，并且仅为新文件的用户设置读/写权限：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After making the script executable, I''ll run it and view the results:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使脚本可执行后，我将运行它并查看结果：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, `new_file.txt` got created with the correct permissions settings, and with
    an ACL that allows Frank to read it. (I know that this is a really simplified
    example, but you get the idea.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`new_file.txt`以正确的权限设置创建，并且具有允许Frank读取的ACL。（我知道这是一个非常简化的例子，但您明白我的意思。）
- en: Removing a specific permission by using an ACL mask
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过使用ACL掩码删除特定权限
- en: 'You can remove an ACL from a file or directory with the `-x` option. Let''s
    go back to the `acl_demo.txt` file that I created earlier, and remove the ACL
    for Maggie:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-x`选项从文件或目录中删除ACL。让我们回到我之前创建的`acl_demo.txt`文件，并删除Maggie的ACL：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, Maggie''s ACL is gone. But, the `-x` option removes the entire ACL, even
    if that''s not what you really want. If you have an ACL with multiple permissions
    set, you might just want to remove one permission, while leaving the others. Here,
    we see that Frank still has his ACL that grants him read/write access. Let''s
    now say that we want to remove the write permission, while still allowing him
    the read permission. For that, we''ll need to apply a mask:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Maggie的ACL消失了。但是，`-x`选项会删除整个ACL，即使这并不是您真正想要的。如果您有一个设置了多个权限的ACL，您可能只想删除一个权限，而保留其他权限。在这里，我们看到Frank仍然有他的ACL，允许他读/写访问。现在，假设我们想要删除写权限，同时仍然允许他读权限。为此，我们需要应用一个掩码：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `m::r` sets a read-only mask on the ACL. Running `getfacl` shows that Frank
    still has a read/write ACL, but the comment to the side shows his effective permissions
    to be read-only. So, Frank's write permission for the file is now gone. And, if
    we had ACLs set for other users, this mask would affect them the same way.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`m::r`在ACL上设置了只读掩码。运行`getfacl`显示Frank仍然具有读/写ACL，但旁边的注释显示他的有效权限是只读。因此，Frank的文件写权限现在消失了。如果我们为其他用户设置了ACL，这个掩码也会以相同的方式影响他们。'
- en: Using the tar --acls option to prevent the loss of ACLs during a backup
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tar --acls选项来防止备份期间ACLs的丢失
- en: 'If you ever need to use `tar` to create a backup of either a file or a directory
    that has ACLs assigned to it, you''ll need to include the `--acls` option switch.
    Otherwise, the ACLs will be lost. To show this, I''ll create a backup of the `perm_demo_dir`
    directory without the `--acls` option. First, note that I do have ACLs on files
    in this directory, as indicated by the `+` sign on the last two files:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要使用`tar`来创建文件或目录的备份，并且这些文件或目录有ACLs分配给它，您需要包括`--acls`选项开关。否则，ACLs将会丢失。为了证明这一点，我将创建`perm_demo_dir`目录的备份，没有使用`--acls`选项。首先，请注意，我在此目录中的文件上有ACLs，最后两个文件上的`+`符号表示了这一点：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, I''ll do the backup without the `--acls`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将不使用`--acls`进行备份：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It looks good, right? Ah, but looks can be deceiving. Watch what happens when
    I delete the directory, and then restore it from the backup:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，对吧？啊，但外表可能是具有欺骗性的。看看当我删除目录，然后从备份中恢复它时会发生什么：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'I don''t even have to use `getfacl` to see that the ACLs are gone from the
    `perm_demo_dir` directory and all of its files, because the `+` signs are now
    gone from them. Now, let''s see what happens when I include the `--acls` option.
    First, I''ll show you that an ACL is set for this directory and its only file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至不需要使用`getfacl`来查看`perm_demo_dir`目录及其所有文件中的ACL已经消失，因为它们现在已经没有了`+`符号。现在，让我们看看当我包括`--acls`选项时会发生什么。首先，我将向您展示为此目录及其唯一文件设置了ACL：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, I''ll use tar with `--acls`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将使用带有`--acls`的tar：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I''ll now delete the `new_perm_dir` directory, and restore it from backup.
    Again, I''ll use the `--acls` option:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将删除`new_perm_dir`目录，并从备份中恢复它。同样，我将使用`--acls`选项：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The presence of the `+` signs indicates that the ACLs did survive the backup
    and restore procedure. The one slightly tricky part about this is that you must
    use `--acls` for both the backup and the restoration. If you omit the option either
    time, you will lose your ACLs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`+`符号的存在表明ACL确实在备份和恢复过程中幸存下来了。这其中稍微棘手的部分是，你必须在备份和恢复时都使用`--acls`。如果你在任一次中省略了选项，你将丢失你的ACL。'
- en: Creating a user group and adding members to it
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户组并向其中添加成员
- en: So far, I've been doing all of the demos inside my own home directory, just
    for the sake of showing the basic concepts. But, the eventual goal is to show
    you how to use this knowledge to do something more practical, such as controlling
    file access in a shared group directory. The first step is to create a user group
    and to add members to it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我一直在自己的家目录中进行所有演示，只是为了展示基本概念。但最终的目标是向你展示如何利用这些知识做一些更实际的事情，比如在共享组目录中控制文件访问。第一步是创建一个用户组并向其中添加成员。
- en: 'Let''s say that we want to create a `marketing` group for members of—you guessed
    it—the marketing department:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想为市场部门的成员创建一个`marketing`组：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s now add some members. You can do that in three different ways:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一些成员。你可以通过三种不同的方式来做到这一点：
- en: Add members as we create their user accounts
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建用户帐户时添加成员
- en: Use `usermod` to add members that already have user accounts
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`usermod`来添加已经有用户帐户的成员
- en: Edit the `/etc/group` file
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`/etc/group`文件
- en: Adding members as we create their user accounts
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在创建用户帐户时添加成员
- en: 'First, we can add members to the group as we create their user accounts, using
    the `-G` option of `useradd`. On Red Hat or CentOS, the command would look like
    this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以在创建用户帐户时将成员添加到组中，使用`useradd`的`-G`选项。在Red Hat或CentOS上，命令看起来是这样的：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On Debian/Ubuntu, the command would look like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian/Ubuntu上，命令看起来是这样的：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And, of course, I''ll need to assign Cleopatra a password in the normal manner:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我还需要以正常方式为Cleopatra分配一个密码：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using usermod to add an existing user to a group
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用usermod将现有用户添加到组
- en: 'The good news is that this works the same on either Red Hat or CentOS or Debian/Ubuntu:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，在Red Hat或CentOS或Debian/Ubuntu上都是一样的：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this case, the `-a` wasn't necessary, because Maggie wasn't a member of any
    other secondary group. But, if she had already belonged to another group, the
    `-a` would have been necessary to keep from overwriting any existing group information,
    thus removing her from the previous groups.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`-a`是不必要的，因为Maggie不是任何其他次要组的成员。但是，如果她已经属于另一个组，那么`-a`将是必要的，以防止覆盖任何现有的组信息，从而将她从以前的组中删除。
- en: This method is especially handy for use on Ubuntu systems, where it was necessary
    to use `adduser` in order to create encrypted home directories. (As we saw in
    a previous chapter, `adduser` doesn't give you the chance to add a user to a group
    as you create the account.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在Ubuntu系统上特别方便，因为在创建加密的家目录时需要使用`adduser`。（正如我们在前一章中看到的，`adduser`不会给你在创建帐户时添加用户到组的机会。）
- en: Adding users to a group by editing the /etc/group file
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过编辑/etc/group文件将用户添加到组
- en: 'This final method is a good way to cheat, to speed up the process of adding
    multiple existing users to a group. First, just open the `/etc/group` file in
    your favorite text editor, and look for the line that defines the group to which
    you want to add members:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种最后的方法是一个好办法，可以加快将多个现有用户添加到组的过程。首先，只需在您喜欢的文本编辑器中打开`/etc/group`文件，并查找定义要添加成员的组的行：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'So, I''ve already added Cleopatra and Maggie to this group. Let''s edit this
    to add a couple more members:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我已经将Cleopatra和Maggie添加到了这个组。让我们编辑一下，再添加几个成员：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When you're done, save the file and exit the editor.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，保存文件并退出编辑器。
- en: 'A `groups` command for each of them will show that our wee bit of cheating
    works just fine:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个成员的`groups`命令将显示我们微小作弊的效果非常好：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This method is extremely handy for whenever you need to add lots of members
    to a group at the same time.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法非常适用于需要同时向组中添加大量成员的情况。
- en: Creating a shared directory
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建共享目录
- en: 'The next act in our scenario involves creating a shared directory that all
    the members of our marketing department can use. Now, this is another one of those
    areas that engenders a bit of controversy. Some people like to put shared directories
    in the root level of the filesystem, while others like to put shared directories
    in the `/home` directory. And, some people even have other preferences. But really,
    it''s a matter of personal preference and/or company policy. Other than that,
    it really doesn''t much matter where you put them. For our purposes, to make things
    simple, I''ll just create the directory in the root level of the filesystem:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们情节中的下一个行动涉及创建一个共享目录，所有我们市场部门的成员都可以使用。现在，这是另一个引起一些争议的领域。有些人喜欢将共享目录放在文件系统的根级目录，而其他人喜欢将共享目录放在`/home`目录中。还有一些人甚至有其他偏好。但实际上，这是个人偏好和/或公司政策的问题。除此之外，你把它们放在哪里并不重要。为了简化事情，我将在文件系统的根级目录中创建目录：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The new directory belongs to the root user. It has a permissions setting of
    `755`, which permits read and execute access to everybody, and write access only
    to the root user. What we really want is to allow only members of the marketing
    department to access this directory. We''ll first change ownership and group association,
    and then we''ll set the proper permissions:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新目录属于root用户。它的权限设置为`755`，允许每个人读取和执行访问，只允许root用户写入访问。我们真正想要的是只允许市场部门的成员访问这个目录。我们首先更改所有权和组关联，然后设置适当的权限：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this case, we don''t have any one particular user that we want to own the
    directory, and we don''t really want for the root user to own it. So, assigning
    ownership to the `nobody` pseudo user account gives us a way to deal with that.
    I then assigned the `770` permissions value to the directory, which allows read/write/execute
    access to all `marketing` group members, while keeping everyone else out. Now,
    let''s let one of our group members log in to see if she can create a file in
    this directory:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们没有任何特定的用户想要拥有该目录，我们也不希望root用户拥有它。因此，将所有权分配给`nobody`伪用户帐户为我们提供了一种处理的方式。然后，我将`770`权限值分配给目录，这允许所有`marketing`组成员读/写/执行访问，同时让其他人离开。现在，让我们让我们的一个组成员登录，看看她是否可以在这个目录中创建一个文件：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Okay, it works, except for one minor problem. The file belongs to Vicky, as
    it should. But, it's also associated with Vicky's personal group. For the best
    access control of these shared files, we need them to be associated with the `marketing`
    group.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，它有效了，除了一个小问题。文件属于Vicky，这是应该的。但是，它也与Vicky的个人组相关联。为了更好地控制这些共享文件的访问权限，我们需要它们与`marketing`组相关联。
- en: Setting the SGID bit and the sticky bit on the shared directory
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在共享目录上设置SGID位和粘滞位
- en: I've told you before that it's a bit of a security risk to set either the SUID
    or SGID permissions on files, especially on executable files. But, it is both
    completely safe and very useful to set SGID on a shared directory.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前告诉过你，在文件上设置SUID或SGID权限，特别是在可执行文件上，这是一种安全风险。但是，在共享目录上设置SGID是完全安全且非常有用的。
- en: 'SGID behavior on a directory is completely different from SGID behavior on
    a file. On a directory, SGID will cause any files that anybody creates to be associated
    with the same group with which the directory is associated. So, bearing in mind
    that the SGID permission value is `2000`, let''s set SGID on our `marketing` directory:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目录上的SGID行为与文件上的SGID行为完全不同。在目录上，SGID将导致任何人创建的文件都与目录关联的相同组相关联。因此，牢记SGID权限值为`2000`，让我们在我们的`marketing`目录上设置SGID：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `s` in the executable position for the group indicates that the command
    was successful. Let''s now let Vicky log back in to create another file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在组的可执行位置上的`s`表示命令执行成功。现在让Vicky重新登录创建另一个文件：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Vicky''s second file is associated with the `marketing` group, which is just
    what we want. Just for fun, let''s let Charlie do the same:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Vicky的第二个文件与`marketing`组相关联，这正是我们想要的。只是为了好玩，让我们让Charlie做同样的事情：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Again, Charlie''s file is associated with the `marketing` group. But, for some
    strange reason that nobody understands, Charlie really doesn''t like Vicky, and
    decides to delete her files, just out of pure spite:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Charlie的文件与`marketing`组相关联。但是，由于没有人能理解的一些奇怪原因，Charlie真的不喜欢Vicky，并决定删除她的文件，纯粹是出于恶意：
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The system complains that Vicky's original file is write-protected, since it's
    still associated with her personal group. But, the system does still allow Charlie
    to delete it, even without sudo privileges. And, since Charlie has write access
    to the second file, due to its association with the `marketing` group, the system
    allows him to delete it without question.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 系统抱怨Vicky的原始文件受到写保护，因为它仍然与她的个人组相关联。但是，系统仍然允许Charlie删除它，即使没有sudo权限。而且，由于Charlie对第二个文件有写访问权限，因为它与`marketing`组相关联，系统允许他毫不犹豫地删除它。
- en: 'Okay. So, Vicky complains about this, and tries to get Charlie fired. But,
    our intrepid administrator has a better idea. He''ll just set the sticky bit in
    order to keep this from happening again. Since the SGID bit has a value of `2000`,
    and the sticky bit has a value of `1000`, we can just add the two together to
    get a value of `3000`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以，Vicky抱怨了这个问题，并试图让Charlie被解雇。但是，我们勇敢的管理员有一个更好的主意。他将设置粘滞位，以防止这种情况再次发生。由于SGID位的值为`2000`，粘滞位的值为`1000`，我们可以将两者相加得到值为`3000`：
- en: '[PRE31]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `T` in the executable position for others indicates that the sticky bit
    has been set. Since the `T` is uppercase, we know that the executable permission
    for others has not been set. Having the sticky bit set will prevent group members
    from deleting anybody else''s files. Let''s let Vicky show us what happens when
    she tries to retaliate against Charlie:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他人的可执行位置上的`T`表示设置了粘滞位。由于`T`是大写的，我们知道其他人的可执行权限没有被设置。设置了粘滞位将阻止组成员删除其他人的文件。让Vicky演示当她试图对Charlie进行报复时会发生什么：
- en: '[PRE32]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Even with the `-f` option, Vicky still can't delete Charlie's file. Vicky doesn't
    have `sudo` privileges on this system, so it would be useless for her to try that.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用`-f`选项，Vicky仍然无法删除Charlie的文件。Vicky在这个系统上没有`sudo`权限，所以她尝试是没有用的。
- en: Using ACLs to access files in the shared directory
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ACL访问共享目录中的文件
- en: As things currently stand, all members of the `marketing` group have read/write
    access to all other group members' files. Restricting access to a file to only
    specific group members is the same two-step process that we've already covered.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`marketing`组的所有成员都可以读/写其他组成员的文件。将对文件的访问限制为仅特定组成员与我们已经讨论过的相同的两步过程。
- en: Setting the permissions and creating the ACL
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置权限并创建ACL
- en: 'First, Vicky sets the normal permissions to allow only her to access her file.
    Then, she''ll set the ACL:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Vicky设置了普通权限，只允许她访问她的文件。然后，她会设置ACL：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'There''s nothing here that you haven''t already seen. Vicky just removed all
    permissions from the group and from others, and set an ACL that only allows Cleopatra
    to read the file. Let''s see if Cleopatra actually can read it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么是你之前没有见过的。Vicky只是从组和其他人那里删除了所有权限，并设置了一个ACL，只允许Cleopatra读取文件。让我们看看Cleopatra是否真的能读取它：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: So far, so good. But, can Cleopatra write to it?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。但是，Cleopatra能写入吗？
- en: '[PRE35]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Okay, Cleopatra can't do that, since Vicky only allowed her the read privilege
    in the ACL.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，Cleopatra不能这样做，因为Vicky只允许她在ACL中拥有读权限。
- en: Charlie tries to access Vicky's file with an ACL set for Cleopatra
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Charlie尝试使用为Cleopatra设置的ACL访问Vicky的文件
- en: Now, though, what about that sneaky Charlie, who wants to go snooping in other
    users' files?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不过，那个狡猾的Charlie呢，他想要窥探其他用户的文件呢？
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: So, yes, it's really true that only Cleopatra can access Vicky's file, and even
    then only for reading.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，只有Cleopatra才能访问Vicky的文件，即使是只读也是如此。
- en: Hands-on lab – creating a shared group directory
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实验 - 创建共享组目录
- en: 'For this lab, you''ll just put together everything that you''ve learned in
    this chapter to create a shared directory for a group. You can do this on either
    of your virtual machines:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，你将把本章学到的一切放在一起，为一个组创建一个共享目录。你可以在你的任一虚拟机上完成这个操作：
- en: 'On either virtual machine, create the `sales` group:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任一虚拟机上创建`sales`组：
- en: '[PRE37]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create the users Mimi, Mr. Gray, and Mommy, adding them to the sales group as
    you create the accounts.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用户Mimi、Mr. Gray和Mommy，并在创建账户时将他们添加到sales组中。
- en: 'On the CentOS VM, do:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS虚拟机上执行：
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'On the Ubuntu VM, do:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu虚拟机上执行：
- en: '[PRE39]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Assign each user a password.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个用户分配一个密码。
- en: 'Create the `sales` directory in the root level of the filesystem. Set proper
    ownership and permissions, including the SGID and sticky bits:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件系统的根目录级别创建`sales`目录。设置适当的所有权和权限，包括SGID和粘性位：
- en: '[PRE40]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Log in as Mimi, and have her create a file:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以Mimi的身份登录，并让她创建一个文件：
- en: '[PRE41]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Have Mimi set an ACL on her file, allowing only Mr. Gray to read it. Then,
    have Mimi log back out:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让Mimi在她的文件上设置ACL，只允许Mr. Gray读取。然后，让Mimi退出登录：
- en: '[PRE42]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Have Mr. Gray log in to see what he can do with Mimi''s file. Then, have Mr.
    Gray create his own file and log back out:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让Mr. Gray登录，看看他能否对Mimi的文件做些什么。然后，让Mr. Gray创建自己的文件并退出登录：
- en: '[PRE43]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Mommy will now log in and try to wreak havoc by snooping in other users'' files,
    and by trying to delete them:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mommy现在将登录并尝试通过窥探其他用户的文件和尝试删除它们来制造混乱：
- en: '[PRE44]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: End of Lab.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验结束。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how to take Discretionary Access Control to the proverbial
    next level. We first saw how to create and manage access control lists to provide
    more fine-grained access control over files and directories. We then saw how to
    create a user group for a specific purpose, and how to add members to it. Then,
    we saw how we can use the SGID bit, the sticky bit, and access control lists to
    manage a shared group directory.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何将自主访问控制提升到更高的水平。我们首先看到了如何创建和管理访问控制列表，以提供对文件和目录的更精细的访问控制。然后，我们看到了如何为特定目的创建用户组，以及如何向其中添加成员。然后，我们看到了如何使用SGID位、粘性位和访问控制列表来管理共享组目录。
- en: But, sometimes, Discretionary Access Control might not be enough to do the job.
    For those times, we also have mandatory access control, which we'll cover in the
    next chapter. I'll see you there.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时，自主访问控制可能不足以完成工作。对于这些时候，我们还有强制访问控制，我们将在下一章中介绍。到时候再见。
