- en: Chapter 4. Creating and Calling Subroutines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。创建和调用子程序
- en: This chapter shows how to create and call subroutines in a script.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何在脚本中创建和调用子程序。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Show some simple subroutines.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示一些简单的子程序。
- en: Show more advanced routines.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示更高级的例程。
- en: Mention return codes again and how they work in scripts.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次提到返回代码以及它们在脚本中的工作方式。
- en: In the previous chapters we have seen mostly simple scripts that were not very
    complicated. Scripts can actually do a whole lot more which we are about to see.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们主要看到了一些不太复杂的简单脚本。脚本实际上可以做更多的事情，我们将很快看到。
- en: First, let's start with a selection of simple but powerful scripts. These are
    mainly shown to give the reader an idea of just what can be done quickly with
    a script.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从一些简单但强大的脚本开始。这些主要是为了让读者了解脚本可以快速完成的工作。
- en: Clearing the screen
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清屏
- en: The `tput clear` terminal command can be used to clear the current command-line
    session. You could type `tput clear` all the time, but wouldn't just `cls` be
    nicer?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`tput clear`终端命令可用于清除当前的命令行会话。您可以一直输入`tput clear`，但只输入`cls`会不会更好？'
- en: 'Here''s a simple script that clears the current screen:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的清除当前屏幕的脚本：
- en: Chapter 4 - Script 1
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章 - 脚本1
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice that this was so simple I didn''t even bother to include a `Usage` message
    or return code. Remember, to make this a command on your system do this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是如此简单，以至于我甚至都没有包括`Usage`消息或返回代码。记住，要在您的系统上将其作为命令执行，请执行以下操作：
- en: '`cd $HOME/bin`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd $HOME/bin`'
- en: create/edit a file named `cls`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/编辑名为`cls`的文件
- en: copy and paste the preceding code into this file
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将上述代码复制并粘贴到此文件中
- en: save the file
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存文件
- en: run `chmod 755 cls`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`chmod 755 cls`
- en: You can now type `cls` from any terminal (under that user) and your screen will
    clear. Try it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在任何终端（在该用户下）输入`cls`，屏幕将被清除。试试看。
- en: File redirection
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件重定向
- en: At this point we need to go over file redirection. This is the ability to have
    the output from a command or script be copied into a file instead of going to
    the screen. This is done by using the redirection operator, which is really just
    the greater than sign.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要讨论文件重定向。这是将命令或脚本的输出复制到文件而不是显示在屏幕上的能力。这是通过使用重定向运算符来完成的，实际上就是大于号。
- en: 'Here is the screenshot of some commands that were run on my system:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在我的系统上运行的一些命令的屏幕截图：
- en: '![File redirection](img/B07040_04_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![文件重定向](img/B07040_04_01.jpg)'
- en: As you can see, the output from the `ifconfig` command was sent (or redirected)
    to the `ifconfig.txt` file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`ifconfig`命令的输出被发送（或重定向）到`ifconfig.txt`文件。
- en: Command piping
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令管道
- en: Now let's look at command piping, which is the ability to run a command and
    have the output from it serve as the input to another command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看命令管道，即运行一个命令并将其输出作为另一个命令的输入的能力。
- en: 'Suppose a program or script named `loop1` is running on your system and you
    want to know the PID of it. You could run the `ps auxw` command to a file, and
    then `grep` the file for `loop1`. Alternatively, you could do it in one step by
    using a pipe as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的系统上正在运行名为`loop1`的程序或脚本，并且您想知道其PID。您可以运行`ps auxw`命令到一个文件，然后使用`grep`命令在文件中搜索`loop1`。或者，您可以使用管道一步完成如下操作：
- en: '![Command piping](img/B07040_04_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![命令管道](img/B07040_04_02.jpg)'
- en: Pretty cool, right? This is a very powerful feature in a Linux system and is
    used extensively. We will be seeing a lot more of this soon.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？这是Linux系统中非常强大的功能，并且被广泛使用。我们很快将看到更多。
- en: 'The next section shows another very short script using some command piping.
    This clears the screen and then shows only the first 10 lines from `dmesg`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分显示了另一个非常简短的使用一些命令管道的脚本。它清除屏幕，然后仅显示`dmesg`的前10行：
- en: Chapter 4 - Script 2
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章 - 脚本2
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is the output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 4 - Script 2](img/B07040_04_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![第4章 - 脚本2](img/B07040_04_03.jpg)'
- en: The next section shows file redirection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分显示文件重定向。
- en: Chapter 4 - Script 3
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章 - 脚本3
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Try it on your system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上试一试。
- en: This shows how easy it is to create a script to perform commands that you would
    normally type on the command line. Also notice the use of the `FN` variable. If
    you want to use a different filename later, you only have to make the change in
    one place.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了创建一个脚本来执行通常在命令行上键入的命令是多么容易。还要注意`FN`变量的使用。如果以后要使用不同的文件名，您只需在一个地方进行更改。
- en: Subroutines
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子程序
- en: 'Now let''s really get into subroutines. To do this we will use more of the
    `tput` commands:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们真正进入子程序。为此，我们将使用更多的`tput`命令：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is the script. This was mainly written to show the concept of a subroutine,
    however, it can also be used as a guide on writing interactive tools.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是脚本。这主要是为了展示子程序的概念，但也可以作为编写交互式工具的指南使用。
- en: Chapter 4 - Script 4
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章 - 脚本4
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 4 - Script 4](img/B07040_04_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![第4章 - 脚本4](img/B07040_04_04.jpg)'
- en: Try this on your system. If you run it with the `home` parameter it might look
    a little strange to you. The code puts a capital `X` at the `home position` (0,0)
    and this causes the prompt to print one character over. Nothing is wrong here,
    it just looks a little weird. Don't worry if this still doesn't make sense to
    you, just go ahead and look at *Script 5*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上尝试一下。如果您使用`home`参数运行它，可能会对您看起来有点奇怪。代码在`home位置`（0,0）放置了一个大写的`X`，这会导致提示打印一个字符。这里没有错，只是看起来有点奇怪。如果这对您来说仍然不合理，不要担心，继续查看*脚本5*。
- en: Using parameters
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用参数
- en: 'Okay, let''s add some routines to this script to show how to use parameters
    with a `subroutine`. In order to make the output look better the `cls` routine
    is called first to clear the screen:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们向这个脚本添加一些例程，以展示如何在`子例程`中使用参数。为了使输出看起来更好，首先调用`cls`例程清除屏幕：
- en: Chapter 4 - Script 5
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章 - 脚本5
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Since this script only has two extra functions you can just run them. This
    will be shown one command at a time as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此脚本只有两个额外的功能，您可以直接运行它们。这将逐个命令显示如下：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Chapter 4 - Script 5](img/B07040_04_05.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![第4章-脚本5](img/B07040_04_05.jpg)'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Chapter 4 - Script 5](img/B07040_04_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![第4章-脚本5](img/B07040_04_06.jpg)'
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Chapter 4 - Script 5](img/B07040_04_07.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![第4章-脚本5](img/B07040_04_07.jpg)'
- en: Since we are now placing the cursor at a specific location, the output should
    make more sense to you. Notice how the command-line prompt reappears where the
    last cursor position was.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在将光标放在特定位置，输出对您来说应该更有意义。请注意，命令行提示重新出现在上次光标位置的地方。
- en: You probably noticed that the parameters to a subroutine work just like with
    a script. Parameter 1 is `$1`, parameter 2 is `$2`, and so on. This is good and
    bad, good because you don't have to learn anything radically different. But bad
    in that it is very easy to get the `$1`, `$2`, vars mixed up if you are not careful.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，子例程的参数与脚本的参数工作方式相同。参数1是`$1`，参数2是`$2`，依此类推。这既是好事也是坏事，好的是您不必学习任何根本不同的东西。但坏的是，如果不小心，很容易混淆`$1`，`$2`等变量。
- en: A possible solution, and the one I use, is to assign the `$1`, `$2`, and so
    on variables in the main script to a variable with a good meaningful name.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的解决方案，也是我使用的解决方案，是将主脚本中的`$1`，`$2`等变量分配给一个有意义的变量。
- en: For example, in these example scripts I set `parm1` equal to `$1 (parm1=$1)`,
    and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这些示例脚本中，我将`parm1`设置为`$1（parm1=$1）`，依此类推。
- en: 'Take a good look at the script in the next section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细查看下一节中的脚本：
- en: Chapter 4 - Script 6
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章-脚本6
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And here's the output
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出
- en: '![Chapter 4 - Script 6](img/B07040_04_08.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![第4章-脚本6](img/B07040_04_08.jpg)'
- en: There are some new concepts here and so we will go through this one very carefully.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些新概念，所以我们会非常仔细地讲解这个。
- en: First, we define the subroutines. Notice that a return code has been added.
    A `cls` routine has also been included so that a return code could be shown.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义了子例程。请注意，已添加了返回代码。还包括了一个`cls`例程，以便显示返回代码。
- en: We are now at the start of the code. The `cls` routine is called and then the
    return value from it is stored in the `rc` variable. Then the `echo` statement
    showing which script this is will be displayed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始编码。调用`cls`例程，然后将其返回值存储在`rc`变量中。然后将显示显示脚本标题的`echo`语句。
- en: So, why did I have to put the return code from the `cls` command into the `rc`
    var? Couldn't I have just displayed it after the `echo` of the script title? No,
    because the `echo $?` always refers to the command immediately preceding it. This
    is easy to forget so make sure you understand this point.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我必须将`cls`命令的返回代码放入`rc`变量中呢？我不能在显示脚本标题的`echo`之后直接显示它吗？不行，因为`echo $?`总是指的是紧随其后的命令。这很容易被忘记，所以请确保您理解这一点。
- en: Okay, so now we reset the `rc` var to `0` and continue on. I could have used
    a different variable for this, but since the value of `rc` is not going to be
    needed again I chose to just reuse the `rc` variable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们将`rc`变量重置为`0`并继续。我本可以使用不同的变量，但由于`rc`的值不会再次需要，我选择重用`rc`变量。
- en: Now, at the check for parameters, the `Usage` statement will be displayed if
    three parameters are not there.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在检查参数时，如果没有三个参数，将显示`Usage`语句。
- en: After three parameters are entered we display them. This is always a good idea
    especially when first writing a script/program. You can always take it out later
    if it is not needed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输入三个参数后，我们会显示它们。这总是一个好主意，特别是在首次编写脚本/程序时。如果不需要，您随时可以将其删除。
- en: The first subroutine, `sub1`, is run with `1` parameter. This is checked and
    an error is displayed if needed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个子例程`sub1`以`1`个参数运行。这将进行检查，如果需要，将显示错误。
- en: The same thing happens with `sub2`, but in this case I intentionally set it
    to run with only one parameter so that the error message would be displayed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`sub2`也是一样的情况，但在这种情况下，我故意设置它只运行一个参数，以便显示错误消息。'
- en: For `sub3`, you can see that the main parameters are still accessible from a
    subroutine. In fact, all of the named variables are, and also the wildcard `*`
    and other file expansion tokens. Only the main script parameters cannot be accessed,
    which is why we put them into variables.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`sub3`，您可以看到主要参数仍然可以从子例程中访问。实际上，所有命名变量都可以访问，还有通配符`*`和其他文件扩展标记。只有主脚本参数无法访问，这就是为什么我们将它们放入变量中的原因。
- en: The final routine was created in order to show how errors can be handled. You
    can see that the `tput` command itself displayed the error, and then we also captured
    it in the script.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建了最终例程以展示如何处理错误。您可以看到，`tput`命令本身显示了错误，然后我们还在脚本中捕获了它。
- en: Finally, the script exits with the main `rc` variable.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本以主`rc`变量退出。
- en: As was mentioned earlier, this script has a lot in it so be sure to study it
    carefully. Note that when I wanted to show an error in `tput`, I just assumed
    that `firephasers` was going to be an unknown command. I would have been rather
    surprised if some phasers had actually shot out of (or worse, into) my computer!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，这个脚本包含了很多内容，所以一定要仔细研究它。请注意，当我想在`tput`中显示错误时，我只是假设`firephasers`将成为一个未知的命令。如果一些相位器实际上从我的计算机中射出（或更糟的是，射入），我会感到非常惊讶！
- en: Making a current backup of your work
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份您的工作
- en: 'And now, for another bonus the next section shows the script I used to backup
    my current book''s chapter every 60 seconds:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为另一个奖励，下一节显示了我用来每60秒备份当前书籍章节的脚本：
- en: Chapter 4 – Script 7
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章-脚本7
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And for the output on my system
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上的输出
- en: '![Chapter 4 – Script 7](img/B07040_04_09.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![第4章-脚本7](img/B07040_04_09.jpg)'
- en: There's not much in this script that we have not already covered. The informal
    comments at the top are mainly for me, so that I don't forget what I wrote or
    why.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本中没有我们尚未涵盖的内容。顶部的非正式注释主要是为了我自己，这样我就不会忘记我写了什么或为什么写了。
- en: The parms are checked and the back subdirectory is created if it does not already
    exist. I never seem to be able to remember to create it, so I let the script do
    it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 检查参数并在不存在时创建后备子目录。我似乎总是记不住要创建它，所以我让脚本来做。
- en: Next, the main variables are set up and then the `.bak` file is created if it
    doesn't exist (this helps with the logic).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，设置了主要变量，然后如果`.bak`文件不存在就创建它（这有助于逻辑）。
- en: In the `while` loop, which you can see runs forever, the `cmp` Linux command
    is used to see if the original file has changed from the backup file. If so, the
    `cmp` command returns non-zero and the file is copied back to the `subdir` as
    a numbered backup using our `cbS` script. The file is also copied to the backup
    directory, which in this case is my USB drive. The loop continues until I start
    a new chapter, in which case I press *Ctrl* + *C* to quit.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环中，你可以看到它永远运行，使用`cmp` Linux命令来查看原始文件是否与备份文件发生了变化。如果是，`cmp`命令返回非零值，文件将使用我们的`cbS`脚本作为带编号的备份复制回`subdir`。该文件也会被复制到备份目录，这种情况下是我的USB驱动器。循环会一直持续，直到我开始新的章节，这时我按下*Ctrl*
    + *C*退出。
- en: This is a good example of script automation, which will be covered in more detail
    in [Chapter 6](ch06.html "Chapter 6. Automating Tasks with Scripts"), *Automating
    Tasks with Scripts*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是脚本自动化的一个很好的例子，将在[第6章](ch06.html "第6章. 使用脚本自动化任务")*使用脚本自动化任务*中更详细地介绍。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started with some very simple scripts and then proceeded to show some simple
    subroutines.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一些非常简单的脚本开始，然后继续展示一些简单的子程序。
- en: We then showed some subroutines that take parameters. Return codes were mentioned
    again to show how they work in subroutines. We including several scripts to show
    the concepts, and also included a special bonus script at no extra charge.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们展示了一些带参数的子程序。再次提到了返回码，以展示它们在子程序中的工作原理。我们包括了几个脚本来展示这些概念，并且还额外免费包含了一个特别的奖励脚本。
- en: In the next chapter we will go over how to create interactive scripts.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何创建交互式脚本。
