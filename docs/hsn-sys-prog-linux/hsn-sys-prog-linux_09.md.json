["```\n$ ps\n PID TTY          TIME CMD\n 3396 pts/3    00:00:00 bash\n21272 pts/3    00:00:00 ps\n$ \n```", "```\n $ exec ps\n```", "```\nmain()\n         foo()\n              exec(something)\n         bar()\n```", "```\n#include <unistd.h>\nextern char **environ;\n\nint execl(const char *path, const char *arg, ...);\nint execlp(const char *file, const char *arg, ...);\nint execle(const char *path, const char *arg, ...,\n            char * const envp[]);\nint execv(const char *path, char *const argv[]);\nint execvp(const char *file, char *const argv[]);\nint execvpe(const char *file, char *const argv[],\n             char *const envp[]);\n    execvpe(): _GNU_SOURCE\n```", "```\nint execl(const char *path, const char *arg, ...);\n```", "```\nint main(int argc, char **argv)\n{\n    if (argc < 2) {\n        [...]\n    }\n\n    /* Have us, the predecessor, exec the successor! */\n    if (execl(\"/bin/uname\", \"uname\", argv[1], (char *)0) == -1)\n        FATAL(\"execl failed\\n\");\n\n    printf(\"This should never get executed!\\n\");\n    exit (EXIT_SUCCESS);\n}\n```", "```\n$ ./execl_eg\nUsage: ./execl_eg {-a|-r}\n -a : display all uname info\n -r : display only kernel version\n$\n```", "```\n$ ./execl_eg -r\n4.13.0-36-generic\n$ ./execl_eg -a\nLinux seawolf-mindev 4.13.0-36-generic #40-Ubuntu SMP Fri Feb 16 20:07:48 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n$ ./execl_eg -eww\nuname: invalid option -- 'e'\nTry 'uname --help' for more information.\n$ \n```", "```\nexecl(\"/bin/uname\", \"uname\", argv[1], (char *)0);\nFATAL(\"execl failed\\n\");\n```", "```\n$ ./predcs_name \nUsage: ./predcs_name {successor_name} [do-it-right]\n$ ./predcs_name UseThisAsName &\n[1] 12571\nUseThisAsName:parameters received:\nargv[0]=UseThisAsName\nargv[1]=UseThisAsName\nUseThisAsName: attempt to set name to 1st param \"UseThisAsName\" [Wrong]\nUseThisAsName: pausing now...\n$ \n$ ps\n PID TTY          TIME CMD\n 1392 pts/0    00:00:01 Bash\n12571 pts/0    00:00:00 successor_setnm\n12576 pts/0    00:00:00 ps\n$ \n```", "```\n$ jobs\n[1]+  Running                 ./predcs_name UseThisAsName &\n$ kill %1\n[1]+  Terminated              ./predcs_name UseThisAsName\n$ \n```", "```\n[...]\n    if (argc == 3) { /* the \"do-it-right\" case! */\n        printf(\"%s: setting name to \\\"%s\\\" via prctl(2)\"\n                \" [Right]\\n\", argv[0], argv[2]);\n        if (prctl(PR_SET_NAME, argv[2], 0, 0, 0) < 0)\n            FATAL(\"prctl failed\\n\");\n    } else { /* wrong way... */\n        printf(\"%s: attempt to implicitly set name to \\\"%s\\\"\"\n            \" via the argv[0] passed to execl [Wrong]\\n\",\n            argv[0], argv[1]);\n    }\n[...]\n$ ./predcs_name \nUsage: ./predcs_name {successor_name} [do-it-right]\n$ \n```", "```\n$ ./predcs_name NotThis ThisNameIsRight &\n[1] 12621\nThisNameIsRight:parameters received:\nargv[0]=ThisNameIsRight\nargv[1]=NotThis\nargv[2]=ThisNameIsRight\nThisNameIsRight: setting name to \"ThisNameIsRight\" via prctl(2) [Right]\nThisNameIsRight: pausing now...\n$ ps\n PID TTY          TIME CMD\n 1392 pts/0    00:00:01 Bash\n12621 pts/0    00:00:00 ThisNameIsRight\n12626 pts/0    00:00:00 ps\n$ kill %1\n[1]+  Terminated              ./predcs_name NotThis ThisNameIsRight\n$ \n```", "```\n#include <unistd.h>\nextern char **environ;\n\nint execl(const char *path, const char *arg, ...);\nint execlp(const char *file, const char *arg, ...);\nint execle(const char *path, const char *arg, ...,\n            char * const envp[]);\nint execv(const char *path, char *const argv[]);\nint execvp(const char *file, char *const argv[]);\nint execvpe(const char *file, char *const argv[],\n             char *const envp[]);\n    execvpe(): _GNU_SOURCE\n```", "```\n$ echo $PATH\n/home/seawolf/bin:/home/seawolf/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n$ \n```", "```\nconst char *pdf_reader_app=\"/usr/bin/evince\";\nstatic int exec_pdf_reader_app(char *pdfdoc)\n{\n    char * const pdf_argv[] = {\"evince\", pdfdoc, 0};\n\n    if (execv(pdf_reader_app, pdf_argv) < 0) {\n        WARN(\"execv failed\");\n        return -1;\n    }\n    return 0; /* never reached */\n}\n```", "```\n   if (exec_pdf_reader_app(argv[1]) < 0)\n        FATAL(\"exec pdf function failed\\n\");\n```", "```\n$ ./pdfrdr_exec\nUsage: ./pdfrdr_exec {pathname_of_doc.pdf}\n$ ./pdfrdr_exec The_C_Programming_Language_K\\&R_2ed.pdf 2>/dev/null \n$ \n```", "```\n$ ./pdfrdr_exec ~/Seawolf_MinDev_User_Guide.pdf \n!WARNING! pdfrdr_exec.c:exec_pdf_reader_app:33: execv failed\nperror says: No such file or directory\nFATAL:pdfrdr_exec.c:main:48: exec pdf function failed\nperror says: No such file or directory\n$ \n```", "```\n$ ltrace ./pdfrdr_exec The_C_Programming_Language_K\\&R_2ed.pdf \nexecv(\"/usr/bin/evince\", 0x7ffcd861fc00 <no return ...>\n--- Called exec() ---\ng_static_resource_init(0x5575a5aff400, 0x7ffc5970f888, 0x7ffc5970f8a0, 32) = 0\nev_get_locale_dir(2, 0x7ffc5970f888, 0x7ffc5970f8a0, 32)                  = 0x7fe1ad083ab9\n[...]\n```", "```\n$ strace ./pdfrdr_exec The_C_Programming_Language_K\\&R_2ed.pdf \nexecve(\"./pdfrdr_exec\", [\"./pdfrdr_exec\", \"The_C_Programming_Language_K&R_2\"...], 0x7fff7f7720f8 /* 56 vars */) = 0\nbrk(NULL)                               = 0x16c0000\naccess(\"/etc/ld.so.preload\", R_OK)      = 0\nopenat(AT_FDCWD, \"/etc/ld.so.preload\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0\n[...]\n```"]