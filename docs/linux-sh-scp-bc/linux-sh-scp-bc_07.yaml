- en: Chapter 7. Working with Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章-文件操作
- en: This chapter will show how to read from and write to text files. It will also
    cover file encryption and checksums.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将展示如何从文本文件中读取和写入。它还将涵盖文件加密和校验和。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Show how to write out a file using the redirection operator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示如何使用重定向操作符写出文件
- en: Show how to read a file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示如何读取文件
- en: Explain how the output from a command can be captured and used in a script
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释如何捕获命令的输出并在脚本中使用
- en: Go over `cat` and other important commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看`cat`和其他重要命令
- en: Cover file encryption and checksum programs such as sum and OpenSSL
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涵盖文件加密和校验和程序，如sum和OpenSSL
- en: Writing files
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写文件
- en: 'We showed in some of the previous chapters how to create and write files by
    using the redirection operator. To recap, this command will create the file `ifconfig.txt`
    (or overwrite the file if it already exists):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的一些章节中展示了如何使用重定向操作符创建和写入文件。简而言之，此命令将创建文件`ifconfig.txt`（或覆盖文件，如果文件已经存在）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following command will append to any previous file or create a new one
    if it does not already exist:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将追加到任何先前的文件，如果文件不存在，则创建一个新文件：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some of the previous scripts used the back-tick operator to retrieve the data
    from a file. Let''s recap by looking at *Script 1*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的一些脚本使用反引号操作符从文件中检索数据。让我们通过查看*脚本1*来回顾一下：
- en: Chapter 7 - Script 1
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本1
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is a screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个截图：
- en: '![Chapter 7 - Script 1](img/B07040_07_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本1](img/B07040_07_01.jpg)'
- en: This is pretty straight forward. It removes the file (silently) if it exists,
    and then outputs each line to the file, incrementing `x` each time. When `x` gets
    to `10` the loop terminates.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。如果文件存在，它会将文件（静默地）删除，然后输出每一行到文件，每次增加`x`。当`x`达到`10`时，循环终止。
- en: Reading files
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文件
- en: 'Now let''s look again at the method the backup scripts in the last chapter
    used to get the value from a file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次看看上一章中备份脚本用于从文件中获取值的方法：
- en: Chapter 7 - Script 2
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本2
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the screenshot for *Script 2*:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*脚本2*的截图：
- en: '![Chapter 7 - Script 2](img/B07040_07_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本2](img/B07040_07_02.jpg)'
- en: We start by setting the `FN` variable to the name of the file (`filenum1.txt`).
    It is displayed by the `cat` command and then the contents of the file are assigned
    to the `count` variable. It is displayed and then incremented by 1\. The new value
    is written back to the file and then it is displayed again. Run this one at least
    6 times to see how it wraps around.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将`FN`变量设置为文件名（`filenum1.txt`）。它由`cat`命令显示，然后文件的内容被分配给`count`变量。它被显示，然后增加1。新值被写回文件，然后再次显示。至少运行6次以查看其如何循环。
- en: This is just one simple way to create and read a file. Now let's look at a script
    that reads several lines from a file. It will use the file `file1.txt` that was
    created by the preceding *Script 1*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是创建和读取文件的一种简单方法。现在让我们看一个从文件中读取多行的脚本。它将使用前面*脚本1*创建的文件`file1.txt`。
- en: Chapter 7 - Script 3
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本3
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here is the output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 7 - Script 3](img/B07040_07_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本3](img/B07040_07_03.jpg)'
- en: 'The structure here may look a little strange as it is rather different from
    what we have seen before. This script uses the `read` command to get each line
    of the file. In the statement:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的结构可能看起来有点奇怪，因为它与我们以前看到的非常不同。此脚本使用`read`命令获取文件的每一行。在语句中：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `IFS=` (**Internal Field Separator**) prevents `read` from trimming leading
    and trailing whitespace characters. The `-r` parameter to read causes backslash
    escape sequences to be ignored. The next line uses the redirection operator to
    enable `file1.txt` as the input for `read`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`IFS=`（**内部字段分隔符**）防止`read`修剪前导和尾随的空白字符。`-r`参数使`read`忽略反斜杠转义序列。下一行使用重定向操作符，将`file1.txt`作为`read`的输入。'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There is a lot of new material here and so look this over carefully until you
    get comfortable with it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多新材料，所以仔细查看，直到你对它感到舒适为止。
- en: 'There is a slight flaw in the above script. If the file does not exist an error
    will occur. Look at the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的脚本有一个小缺陷。如果文件不存在，将会出现错误。看看下面的截图：
- en: '![Chapter 7 - Script 3](img/B07040_07_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本3](img/B07040_07_04.jpg)'
- en: Shell scripts are interpreted, meaning each line is examined and run by the
    system one at a time. This is different from say a program written in the C language
    which is compiled. This means any syntax errors will appear during the compile
    stage and not when the program is run. We will discuss how to avoid most shell
    scripting syntax errors in [Chapter 9](ch09.html "Chapter 9. Debugging Scripts"),
    *Debugging scripts*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Shell脚本是解释性的，这意味着系统会逐行检查并运行。这与用C语言编写的程序不同，后者是经过编译的。这意味着任何语法错误都会在编译阶段出现，而不是在运行程序时出现。我们将在第9章“调试脚本”中讨论如何避免大多数shell脚本语法错误。
- en: 'Here is *Script 4* with a solution to the missing file problem:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*脚本4*，解决了缺少文件的问题：
- en: Chapter 7 - Script 4
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本4
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the following is the output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 7 - Script 4](img/B07040_07_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本4](img/B07040_07_05.jpg)'
- en: Keep this in mind when using files and always check to make sure the file exists
    before trying to read it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用文件时请记住这一点，并始终检查文件是否存在，然后再尝试读取它。
- en: Reading and writing files
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读写文件
- en: 'This next script reads a text file and creates a copy of it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个脚本读取一个文本文件并创建其副本：
- en: Chapter 7 - Script 5
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本5
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the screenshot for *Script 5*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*脚本5*的截图：
- en: '![Chapter 7 - Script 5](img/B07040_07_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本5](img/B07040_07_06.jpg)'
- en: 'This shows how to read and write a text file in a script. The following explains
    each line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了如何在脚本中读写文本文件。以下解释了每一行：
- en: The script starts by checking if two parameters were given and if not the `Usage`
    message is displayed.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本开始时检查是否给出了两个参数，如果没有，则显示“用法”消息。
- en: It then checks if the input file exists and exits with code `100` if it does
    not.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后检查输入文件是否存在，如果不存在，则以代码`100`退出。
- en: A check is made to insure the user is not trying to copy to the same file, because
    a syntax error at line 34 would have occurred. This code insures that will not
    happen.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查以确保用户没有尝试复制到相同的文件，因为在第34行可能会发生语法错误。这段代码确保不会发生这种情况。
- en: The output file is removed if it exists. This is because we want to copy to
    a new file and not append to an existing one.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输出文件存在，则删除它。这是因为我们想要复制到一个新文件，而不是追加到现有文件。
- en: The `while` loop reads and writes the lines. A count is made of the number of
    lines in `x`.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`循环读取和写入行。对`x`中行数进行计数。'
- en: When the loops ends the number of lines is output.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环结束时输出行数。
- en: As a sanity check, the `diff` command is used to make sure the files are the
    same.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一个健全性检查，使用`diff`命令来确保文件是相同的。
- en: And as an added check the `sum` command is run on the two files.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且作为额外的检查，对这两个文件运行`sum`命令。
- en: Reading and writing files interactively
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式地读写文件
- en: 'This next script is similar to one in Chapter 5, Creating Interactive Scripts.
    It reads the file specified, displays a form, and allows the user to edit and
    then save it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本与第5章中的一个类似，创建交互式脚本。它读取指定的文件，显示一个表单，并允许用户编辑然后保存它：
- en: Chapter 7 - Script 6
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本6
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is what this looks like on my system:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上是这样的：
- en: '![Chapter 7 - Script 6](img/B07040_07_07.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本6](img/B07040_07_07.jpg)'
- en: 'Here is a description of the code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码的描述：
- en: The first thing that gets set up in this script is a trap of *Ctrl* + *C* which
    causes the file to be saved and the script to end.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个脚本中设置的第一件事是一个*Ctrl* + *C*的陷阱，它会导致文件被保存并且脚本结束。
- en: The subroutines are defined.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义子例程。
- en: The `getdata` routine is used to read the user input.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`getdata`例程读取用户输入。
- en: The `savefile` routine writes out the data array.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`savefile`例程写出数据数组。'
- en: The `getfile` routine reads the file, if it exists, into the array.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getfile`例程将文件（如果存在）读入数组。'
- en: The parameters are checked as one filename is required.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查参数，因为需要一个文件名。
- en: The `FN` variable is set to the name of the file.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`FN`变量设置为文件的名称。
- en: When using arrays it's a good idea to have a set size, that is, `sizeofarray`.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用数组时，最好有一个固定的大小，即`sizeofarray`。
- en: The size of the terminal is checked to make sure it is 25x80 (or 80x25 depending
    on your GUI).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查终端的大小，确保它是25x80（或80x25，取决于你的GUI）。
- en: The `init` routine is called which sets up the screen array.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`init`例程设置屏幕数组。
- en: The routines `getfile` and `drawscreen` are called.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`getfile`和`drawscreen`例程。
- en: The `getdata` routine is used to move the cursor and get the data from the fields
    into the proper array location.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getdata`例程用于移动光标并将字段中的数据放入正确的数组位置。'
- en: '*Ctrl* + *C* is used to save the file and terminate the script.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *C*用于保存文件并终止脚本。'
- en: 'This is an example of how a simple screen input/output routine can be developed
    in Bash. This script could use a few refinements, here is a partial list:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的Bash屏幕输入/输出例程的示例。这个脚本可能需要一些改进，以下是部分列表：
- en: Check an existing file for a specific header. This could help insure the file
    is in the correct format and avoid a syntax error.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查现有文件是否有特定的头。这可以帮助确保文件格式正确，避免语法错误。
- en: 'Check the input file to make sure it is text and not binary. Hint: Use the
    file and `grep` commands.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查输入文件，确保它是文本而不是二进制。提示：使用`file`和`grep`命令。
- en: If the file cannot be written out properly make sure to catch the error gracefully.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件无法正确写出，请确保优雅地捕获错误。
- en: File checksums
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件校验和
- en: You probably noticed the use of the `sum` command above. It displays the checksum
    and block count of files which can be used to determine if two or more files are
    the same file (that is, have the exact same contents).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到了上面使用了`sum`命令。它显示文件的校验和和块计数，可用于确定两个或更多个文件是否是相同的文件（即具有完全相同的内容）。
- en: 'Here is a real world example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个真实世界的例子：
- en: Suppose you are writing a book, and the files are being sent from the author
    to the publisher for review. The publisher makes some revisions and then sends
    the revised file back to the author. It is sometimes easy to get out of sync,
    and receive a file that doesn't look any different. If you run the `sum` command
    against the two files you can easily determine if they are the same.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在写一本书，文件正在从作者发送到出版商进行审阅。出版商进行了一些修订，然后将修订后的文件发送回作者。有时很容易出现不同步的情况，并收到一个看起来没有任何不同的文件。如果对这两个文件运行`sum`命令，你可以轻松地确定它们是否相同。
- en: 'Take a look at the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的截图：
- en: '![File checksums](img/B07040_07_08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![文件校验和](img/B07040_07_08.jpg)'
- en: The first column is the checksum and the second column is the block count. If
    both of these are the same that means the contents of the files are identical.
    So, in this example bookfiles 1, 2, and 4 are the same. Bookfiles 3 and 5 are
    also the same. However, bookfiles 6, 7, and 8 don't match up with anything, and
    the last two don't even have the same block count.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列是校验和，第二列是块计数。如果这两者都相同，那意味着文件的内容是相同的。所以，在这个例子中，bookfiles 1、2和4是相同的。Bookfiles
    3和5也是相同的。然而，bookfiles 6、7和8与任何文件都不匹配，最后两个甚至没有相同的块计数。
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note: The `sum` command only looks at the contents and block count of the files.
    It does not look at the filename or other file attributes such as ownership or
    permissions. To do that you could use the `ls` and `stat` commands.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：`sum`命令只查看文件的内容和块计数。它不查看文件名或其他文件属性，如所有权或权限。要做到这一点，你可以使用`ls`和`stat`命令。
- en: File encryption
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件加密
- en: There are times you might want to encrypt some important and/or confidential
    files on your system. Some people store their passwords in a file on their computers,
    this is probably okay but only if some type of file encryption is being used.
    There are many encryption programs available, here we will show OpenSSL.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能想要加密系统中一些重要和/或机密的文件。有些人把他们的密码存储在计算机的文件中，这可能没问题，但前提是要使用某种类型的文件加密。有许多加密程序可用，在这里我们将展示OpenSSL。
- en: The OpenSSL command line tool is very popular and is most likely already installed
    on your computer (it came by default on my CentOS 6.8 systems). It has several
    options and methods of encryption, however we will cover just the basics.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL命令行工具非常流行，很可能已经安装在您的计算机上（它默认安装在我的CentOS 6.8系统上）。它有几个选项和加密方法，但我们只会涵盖基础知识。
- en: 'Using `file1.txt` again from above try the following on your system:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用上面的`file1.txt`在您的系统上尝试以下操作：
- en: '![File encryption](img/B07040_07_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![文件加密](img/B07040_07_09.jpg)'
- en: 'We start by performing a sum on the `file1.txt` file, then run `openssl`. Here
    is the syntax:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先对`file1.txt`文件执行求和，然后运行`openssl`。以下是语法：
- en: '`enc`: specify which encoding to use, in this case it''s `aes-256-cbc`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enc`：指定要使用的编码，在本例中是`aes-256-cbc`'
- en: '`-in`: the input file'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-in`：输入文件'
- en: '`-out`: the output file'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-out`：输出文件'
- en: '`-d`: decrypt'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`：解密'
- en: After running the `openssl` command we perform an `ls -la` to verify that the
    output file was indeed created.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`openssl`命令后，我们执行`ls -la`来验证输出文件是否确实已创建。
- en: We then decrypt the file. Note the order of the files and the addition of the
    `-d` parameter (to decrypt). We do another sum to verify that the resulting file
    is the same as the original.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们解密文件。请注意文件的顺序和添加`-d`参数（用于解密）。我们再次进行求和，以验证生成的文件与原始文件相同。
- en: 'Since there is no way I am going to type that all the time let''s write a quick
    script to do it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我不可能一直这样输入，让我们写一个快速脚本来做到这一点：
- en: Chapter 7 - Script 7
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章-脚本7
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕截图：
- en: '![Chapter 7 - Script 7](img/B07040_07_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![第7章-脚本7](img/B07040_07_10.jpg)'
- en: This is obviously a lot easier than typing (or trying to remember) the syntax
    for openssl. As you can see the resulting decrypted file (`file2.txt`) is the
    same as the `file1.txt` file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然比输入（或尝试记住）openssl的语法要容易得多。正如您所看到的，解密后的文件（`file2.txt`）与`file1.txt`文件相同。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we showed how to write out a file using the redirection operator
    and how to read a file using the (properly formatted) `read` command. Converting
    the contents of a file into a variable was covered as was the use of checksums
    and file encryption.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了如何使用重定向运算符写出文件，以及如何使用（格式正确的）`read`命令读取文件。涵盖了将文件内容转换为变量的内容，以及使用校验和和文件加密。
- en: In the next chapter we will look at some utilities that can be used to gather
    information from web pages on the Internet.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些可以用来从互联网上的网页收集信息的实用程序。
