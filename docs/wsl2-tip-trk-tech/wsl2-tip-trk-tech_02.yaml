- en: '*Chapter 1*: Introduction to the Windows Subsystem for Linux'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：Windows子系统介绍Linux
- en: In this chapter, you will learn some of the use cases for the **Windows Subsystem
    for Linux** (**WSL**) and start to get an idea of what WSL actually is, and how
    it compares to just running a Linux virtual machine. This will aid us in our understanding
    of the rest of the book, where we will learn all about WSL and how to install
    and configure it, as well as picking up tips for getting the most from it for
    your developer workflows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到**Windows子系统Linux**（**WSL**）的一些用例，并开始对WSL的实际情况以及与仅运行Linux虚拟机相比的优劣有所了解。这将帮助我们理解本书的其余部分，我们将学习有关WSL的所有内容，以及如何安装和配置它，并获取有关如何在开发者工作流中充分利用它的技巧。
- en: With WSL, you can run Linux utilities on Windows to help get your work done.
    You can build Linux applications using native Linux tooling such as **debuggers**,
    opening up a world of projects that only have Linux-based build systems. Many
    of these projects also produce Windows binaries as an output but are otherwise
    hard for Windows developers to access and contribute to. But because WSL gives
    you the combined power of Windows and Linux, you can do all of this and still
    use your favorite Windows utilities as part of your flow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过WSL，您可以在Windows上运行Linux实用工具来帮助您完成工作。您可以使用原生Linux工具（如**调试器**）构建Linux应用程序，从而打开了一系列仅具有基于Linux的构建系统的项目。其中许多项目还会生成Windows二进制文件作为输出，但对于Windows开发人员来说，访问和贡献这些项目通常很困难。但由于WSL为您提供了Windows和Linux的综合功能，您可以做到这一切，并且仍然可以使用您喜爱的Windows实用工具作为工作流的一部分。
- en: This book focuses on version 2 of WSL, which is a major reworking of the feature
    and this chapter will give you an overview of how this version works as well as
    how it compares to version 1.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书重点介绍WSL的第2版，这是一个重大改进的功能，本章将为您概述此版本的工作原理以及与第1版的比较。
- en: 'In this chapter, we will cover the following topics in particular:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将特别涵盖以下主题：
- en: What is WSL?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是WSL？
- en: Exploring the differences between WSL 1 and 2
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索WSL 1和2之间的区别
- en: So, let's begin by defining WSL!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们从定义WSL开始！
- en: What is WSL?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是WSL？
- en: At a high level, WSL provides the ability to run Linux binaries on Windows.
    The desire to run Linux binaries has been around for many years, at least if the
    existence of projects such as **Cygwin** ([https://cygwin.com](https://cygwin.com)
    ) is anything to go by. According to its homepage, Cygwin is *'a large collection
    of GNU and Open Source tools which provide functionality similar to a Linux distribution
    on Windows'*. To run Linux application on Cygwin, it needs to be rebuilt from
    source. WSL provides the ability to run Linux binaries on Windows without modification.
    This means that you can grab the latest release of your favorite application and
    work with it immediately.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，WSL提供了在Windows上运行Linux二进制文件的能力。多年来，人们一直希望能够运行Linux二进制文件，至少可以从**Cygwin**（[https://cygwin.com](https://cygwin.com)）等项目的存在来看。根据其主页的介绍，Cygwin是“一个大型的GNU和开源工具集，提供类似于Linux发行版的功能”。在Cygwin上运行Linux应用程序需要重新构建源代码。WSL提供了在Windows上运行Linux二进制文件的能力，无需修改。这意味着您可以立即获取您喜爱的应用程序的最新版本并与之一起工作。
- en: 'The reasons for wanting to run Linux applications on Windows are many and varied
    and include the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在Windows上运行Linux应用程序的原因有很多，包括以下几点：
- en: You are currently using Windows but have experience and familiarity with Linux
    applications and utilities.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您目前正在使用Windows，但对Linux应用程序和实用工具有经验和熟悉。
- en: You are developing on Windows but targeting Linux for the deployment of your
    application (either directly or in containers).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在Windows上进行开发，但针对应用程序的部署目标是Linux（直接或在容器中）。
- en: You are using developer stacks where the ecosystem has a stronger presence on
    Linux, for example, Python, where some libraries are specific to Linux.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在使用开发堆栈，其中生态系统在Linux上具有更强的存在，例如Python，其中一些库是特定于Linux的。
- en: Whatever your reason for wanting to run Linux applications on Windows, WSL brings
    you this capability and does so in a new and productive way. Whilst it has been
    possible to run a Linux **virtual machine** (**VM**) in Hyper-V for a long time,
    running a VM introduces some barriers to your workflow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您希望在Windows上运行Linux应用程序的原因是什么，WSL都可以以一种新的、高效的方式为您提供这种能力。虽然在Hyper-V中运行Linux**虚拟机**（**VM**）一直是可能的，但运行虚拟机会对您的工作流程产生一些障碍。
- en: For example, starting a VM takes enough time for you to lose your flow of thought
    and requires a dedicated amount of memory from the host machine. Additionally,
    the file system in a VM is dedicated to that VM and isolated from the host. This
    means that accessing files between the Windows host and Linux VM requires setting
    up Hyper-V features for Guest Integration Services or setting up traditional network
    file sharing. The isolation of the VM also means that processes inside and outside
    the VM have no easy way to communicate with each other. Essentially, at any point
    in time, you are either working in the VM or outside of it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，启动虚拟机需要足够的时间，以至于您会中断思路，并且需要从主机机器中分配一定的内存。此外，虚拟机中的文件系统专用于该虚拟机，并与主机隔离。这意味着在Windows主机和Linux虚拟机之间访问文件需要设置Hyper-V功能的客户机集成服务或设置传统的网络文件共享。虚拟机的隔离还意味着虚拟机内部和外部的进程之间没有简单的通信方式。基本上，在任何时候，您要么在虚拟机中工作，要么在虚拟机外工作。
- en: When you first launch a terminal using WSL, you have a terminal application
    in Windows running a Linux shell. In contrast to the VM experience, this seemingly
    simple difference already integrates better into workflows as it is easier to
    switch between windows on the same machine than between applications on Windows
    and those in a VM session.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次使用WSL启动终端时，您将在Windows上运行Linux shell的终端应用程序。与虚拟机体验相比，这个看似简单的差异已经更好地融入了工作流程，因为在同一台机器上的窗口之间切换比在Windows上的应用程序和虚拟机会话之间切换更容易。
- en: However, the work in WSL to integrate the Windows and Linux environments goes
    further. Whereas the file systems are isolated by design in a VM, with the WSL
    file system access is configured for you by default. From Windows, you can access
    a new `\\wsl$\` networked file share that is automatically available for you when
    the WSL is running and provides access to your Linux file systems. From Linux,
    your local Windows drives are automatically mounted for you by default. For example,
    the Windows `C:` drive is mounted as `/mnt/c`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，WSL在集成Windows和Linux环境方面的工作还不止于此。虽然在虚拟机中，文件系统是被设计为隔离的，但在WSL中，默认情况下为你配置了文件系统访问。从Windows中，你可以访问一个名为`\\wsl$\`的网络文件共享，当WSL运行时，它会自动为你提供访问你的Linux文件系统的权限。从Linux中，默认情况下会自动挂载你的本地Windows驱动器。例如，Windows的`C:`驱动器会被挂载为`/mnt/c`。
- en: Even more impressively, you can invoke processes in Linux from Windows and vice
    versa. As an example, as part of a Bash script in the WSL, you can invoke a Windows
    application and process the output from that application in Linux by piping it
    to another command, just as you would with a native Linux application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 更令人印象深刻的是，你可以在Windows中调用Linux中的进程，反之亦然。例如，在WSL的Bash脚本中，你可以调用一个Windows应用程序，并通过将其输出导入到另一个命令中在Linux中处理该应用程序的输出，就像你使用本地Linux应用程序一样。
- en: This integration goes beyond what can be achieved with traditional VMs and creates
    some amazing opportunities for integrating the capabilities of Windows and Linux
    into a single, productive environment that gives you the best of both worlds!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种集成超越了传统虚拟机所能实现的范围，并为将Windows和Linux的能力整合到一个单一的、高效的环境中创造了一些令人惊叹的机会，让你兼具两者的优势！
- en: The integration that has been achieved between the Windows host and the Linux
    VM environments with WSL is impressive. However, if you have used WSL 1 or are
    familiar with how it works, you may have read the previous paragraphs and wondered
    why WSL 2 moved away from the previous architecture, which didn't use a VM. In
    the next section, we'll take a brief look at the different architectures between
    WSL 1 and WSL 2 and what the use of a VM unlocks despite the extra challenges
    the WSL team faced to create the level of integration that we have just seen.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: WSL在Windows主机和Linux虚拟机环境之间实现的集成令人印象深刻。然而，如果你使用过WSL 1或熟悉它的工作原理，你可能已经阅读了前面的段落，并想知道为什么WSL
    2放弃了之前的不使用虚拟机的架构。在接下来的部分中，我们将简要介绍WSL 1和WSL 2之间的不同架构，以及使用虚拟机带来的额外挑战，尽管WSL团队面临了创建我们刚刚看到的集成水平的难题。
- en: Exploring the differences between WSL 1 and 2
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索WSL 1和2之间的差异
- en: While this book discusses version 2 of the **Windows Subsystem for Linux** (**WSL
    2**), it is helpful to briefly look at how version one (WSL 1) works. This will
    help you to understand the limitations of WSL 1 and provide context for the change
    in architecture in WSL 2 and the new capabilities that this unlocks. This is what
    will be covered in this section, after which the remainder of the book will focus
    on WSL 2.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书讨论的是**Windows子系统Linux**（**WSL 2**）的第二个版本，但简要了解第一版（WSL 1）的工作原理是有帮助的。这将帮助你了解WSL
    1的限制，并为WSL 2中的架构变化和新功能提供背景。本节将介绍这些内容，之后本书的其余部分将重点介绍WSL 2。
- en: Overview of WSL 1
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WSL 1概述
- en: 'In the first version of WSL, the WSL team created a translation layer between
    Linux and Windows. This layer implements **Linux syscalls** on top of the Windows
    kernel and is what enables Linux binaries to run without modification; when a
    Linux binary runs and makes syscalls, it is the WSL translation layer that it
    is invoking and that makes the conversion into calls to the Windows kernel. This
    is shown in the following figure:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在WSL的第一个版本中，WSL团队在Linux和Windows之间创建了一个翻译层。这个层在Windows内核之上实现了Linux系统调用，使得Linux二进制文件可以无需修改地运行；当Linux二进制文件运行并进行系统调用时，它调用的是WSL翻译层，并将其转换为对Windows内核的调用。如下图所示：
- en: '![Figure 1.1 – Outline showing the WSL 1 translation layer'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 - 显示WSL 1翻译层的概述'
- en: '](img/Figure_1.1_B16412.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.1_B16412.jpg)'
- en: Figure 1.1 – Outline showing the WSL 1 translation layer
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 - 显示WSL 1翻译层的概述
- en: In addition to the translation layer, there was also investments made to enable
    other capabilities such as file access between Windows and WSL and the ability
    to invoke binaries between the two systems (including capturing the output). These
    capabilities help to build the overall richness of the feature.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了翻译层之外，还进行了其他投资，以实现Windows和WSL之间的文件访问以及在两个系统之间调用二进制文件（包括捕获输出）的能力。这些能力有助于构建整体功能的丰富性。
- en: The creation of the translation layer in WSL 1 was a bold move and opened up
    new possibilities on Windows, however, not all of the Linux syscalls are implemented
    and Linux binaries can only run if all the syscalls they require are implemented.
    Fortunately, the syscalls that *are* implemented allow a wide range of applications
    to run, such as **Python** and **Node.js**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在WSL 1中创建翻译层是一个大胆的举动，为Windows开辟了新的可能性，然而，并非所有的Linux系统调用都被实现，只有当所需的所有系统调用都被实现时，Linux二进制文件才能运行。幸运的是，已经实现的系统调用可以让各种应用程序运行，例如Python和Node.js。
- en: The translation layer was responsible for bridging the gap between the Linux
    and Windows kernels and this posed some challenges. In some cases, bridging these
    differences added performance overhead. Applications that performed a lot of file
    access ran noticeably slower on WSL 1; for example, due to the overhead of translating
    between the Linux and Windows worlds.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译层负责弥合Linux和Windows内核之间的差距，这带来了一些挑战。在某些情况下，弥合这些差异会增加性能开销。在WSL 1上运行大量文件访问的应用程序明显较慢；例如，由于在Linux和Windows之间进行翻译的开销。
- en: In other cases, the differences between Linux and Windows run deeper and it
    is harder to see how to reconcile them. As an example, on Windows attempting to
    rename a directory when a file contained within it has been opened results in
    an error, whereas on Linux the rename can be successfully performed. In cases
    such as this, it is harder to see how the translation layer could have resolved
    the difference. This led to some syscalls not being implemented, resulting in
    some Linux applications that just couldn't be run on WSL 1\. The next section
    looks at the changes made in WSL 2 and how they address this challenge.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，Linux和Windows之间的差异更深，很难看到如何调和它们。例如，在Windows上，当打开一个目录中包含的文件时尝试重命名该目录会导致错误，而在Linux上可以成功执行重命名操作。在这种情况下，很难看到翻译层如何解决差异。这导致一些系统调用未被实现，结果是一些Linux应用程序无法在WSL
    1上运行。下一节将介绍WSL 2中所做的更改以及它们如何解决这个挑战。
- en: Overview of WSL 2
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WSL 2概述
- en: 'As impressive a feat as the WSL 1 translation layer was, it was always going
    to have performance challenges and syscalls that were hard or impossible to implement
    correctly. With WSL 2, the WSL team went back to the drawing board and came up
    with a new solution: a **virtual machine**! This approach avoids the translation
    layer from WSL 1 by running the Linux kernel:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WSL 1翻译层面虽然令人印象深刻，但它总是会面临性能挑战和难以正确实现的系统调用。通过WSL 2，WSL团队重新审视了问题，并提出了一个新的解决方案：一个**虚拟机**！这种方法通过运行Linux内核避免了WSL
    1的翻译层：
- en: '![Figure 1.2 – Outline showing the WSL 2 architecture'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 - 显示WSL 2架构的概要'
- en: '](img/Figure_1.2_B16412.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.2_B16412.jpg)'
- en: Figure 1.2 – Outline showing the WSL 2 architecture
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 - 显示WSL 2架构的概要
- en: When you think of a virtual machine, you probably think of something that is
    slow to start (at least compared to starting a shell prompt), takes a big chunk
    of memory when it starts up, and runs in isolation from the host machine. On the
    face of it, using virtualization for WSL 2 might seem unexpected after the work
    put in to bring the two environments together in WSL 1\. In fact, the capability
    to run a Linux VM has long existed on Windows. So, what makes WSL 2 different
    from running a virtual machine?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到虚拟机时，你可能会想到启动速度慢（至少与启动shell提示符相比），启动时占用大量内存，并且与主机机器隔离运行的东西。从表面上看，使用虚拟化来运行WSL
    2可能似乎出乎意料，因为在WSL 1中将这两个环境整合在一起的工作已经完成。实际上，在Windows上运行Linux虚拟机的能力早已存在。那么，WSL 2与运行虚拟机有何不同？
- en: The big differences come with the use of what the documentation refers to as
    a **Lightweight utility virtual machine** (see [https://docs.microsoft.com/en-us/windows/wsl/wsl2-about](https://docs.microsoft.com/en-us/windows/wsl/wsl2-about)).
    This virtual machine has a rapid startup that only consumes a small amount of
    memory. As you run processes that require memory, the virtual machine dynamically
    grows its memory usage. Better still, as that memory is freed within the virtual
    machine, it is returned to the host!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文档中所称的**轻量级实用虚拟机**（参见[https://docs.microsoft.com/en-us/windows/wsl/wsl2-about](https://docs.microsoft.com/en-us/windows/wsl/wsl2-about)），带来了很大的差异。这个虚拟机具有快速启动，只消耗少量内存。当运行需要内存的进程时，虚拟机会动态增加其内存使用量。更好的是，当虚拟机内的内存被释放时，它会返回给主机！
- en: 'Running a virtual machine for WSL 2 means that it is now running the Linux
    kernel (the source code for it is available at [https://github.com/microsoft/WSL2-Linux-Kernel](https://github.com/microsoft/WSL2-Linux-Kernel)).
    This in turn means that the challenges faced by the WSL 1 translation layer are
    removed: performance and syscall compatibility are both massively improved in
    WSL 2.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行WSL 2的虚拟机意味着它现在正在运行Linux内核（其源代码可在[https://github.com/microsoft/WSL2-Linux-Kernel](https://github.com/microsoft/WSL2-Linux-Kernel)上获得）。这反过来意味着WSL
    1翻译层面临的挑战被消除了：在WSL 2中，性能和系统调用兼容性都得到了极大改善。
- en: Coupled with the work to preserve the overall experience of WSL 1 (interoperability
    between Windows and Linux), WSL 2 presents a positive step forward for most scenarios.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: WSL 2对于大多数情况来说是向前迈出的积极一步，同时也保留了WSL 1（Windows和Linux之间的互操作性）的整体体验。
- en: For most use cases, WSL 2 will be the preferred version due to compatibility
    and performance, but there are a couple of things worth noting. One of these is
    that (at the time of writing) the generally available version of WSL 2 doesn't
    support GPU or USB access (full details at [https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#can-i-access-the-gpu-in-wsl-2-are-there-plans-to-increase-hardware-support](https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#can-i-access-the-gpu-in-wsl-2-are-there-plans-to-increase-hardware-support)).
    GPU support was announced at the *Build* conference in May 2020, and at the time
    of writing is available through the Windows Insiders Program ([https://insider.windows.com/en-us/](https://insider.windows.com/en-us/)).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数用例来说，由于兼容性和性能，WSL 2将是首选版本，但有几个值得注意的事项。其中之一是（在撰写本文时）WSL 2的普遍可用版本不支持GPU或USB访问（详细信息请参见[https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#can-i-access-the-gpu-in-wsl-2-are-there-plans-to-increase-hardware-support](https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#can-i-access-the-gpu-in-wsl-2-are-there-plans-to-increase-hardware-support)）。GPU支持在2020年5月的*Build*会议上宣布，并且在撰写本文时可通过Windows
    Insiders计划获得（[https://insider.windows.com/en-us/](https://insider.windows.com/en-us/)）。
- en: Another consideration is that because WSL 2 uses a virtual machine, applications
    running in WSL 2 will connect to the network via a separate network adapter from
    the host (which has a separate IP address). As we will see in [*Chapter 5*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054),
    *Linux to Windows Interoperability,* the WSL team has made investments in network
    interoperability to help reduce the impact of this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个考虑因素是，由于WSL 2使用虚拟机，运行在WSL 2中的应用程序将通过与主机不同的网络适配器连接到网络（具有单独的IP地址）。正如我们将在[*第5章*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054)中看到的那样，WSL团队在网络互操作性方面进行了投资，以帮助减少这种影响。
- en: Fortunately, WSL 1 and WSL 2 can be run side by side so if you have a particular
    scenario where WSL 1 is needed, you can use it for that and still use WSL 2 for
    the rest.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，WSL 1和WSL 2可以并行运行，因此如果您有特定的情况需要使用WSL 1，您可以在那种情况下使用它，并且仍然可以在其他情况下使用WSL 2。
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you saw what WSL is and how it differs from the experience
    of a traditional VM by allowing integration between file systems and processes
    across the Windows and Linux environments. You also saw an overview of the differences
    between WSL 1 and WSL 2 and why, for most cases, the improved performance and
    compatibility make WSL 2 the preferred option.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了WSL是什么以及它如何通过允许在Windows和Linux环境之间进行文件系统和进程集成来与传统虚拟机的体验有所不同。您还了解了WSL
    1和WSL 2之间的区别概述以及为什么在大多数情况下，改进的性能和兼容性使得WSL 2成为首选选项。
- en: In the next chapter, you will learn how to install and configure WSL and Linux
    distributions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何安装和配置WSL和Linux发行版。
