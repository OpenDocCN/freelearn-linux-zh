- en: GPIO Controller Drivers – gpio_chip
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPIO 控制器驱动程序 - gpio_chip
- en: 'In the previous chapter, we dealt with GPIO lines. Those lines are exposed
    to the system by means of a special device called the GPIO controller. This chapter
    will explain step by step how to write drivers for such devices, thus covering
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们处理了 GPIO 线路。这些线路通过一个名为 GPIO 控制器的特殊设备向系统公开。本章将逐步解释如何为这类设备编写驱动程序，从而涵盖以下主题：
- en: GPIO controller driver architecture and data structures
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 控制器驱动程序架构和数据结构
- en: Sysfs interface for GPIO controllers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 控制器的 Sysfs 接口
- en: GPIO controllers representation in DT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DT 中 GPIO 控制器的表示
- en: Driver architecture and data structures
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序架构和数据结构
- en: 'Drivers for such devices should provide:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这类设备的驱动程序应该提供：
- en: Methods to establish GPIO direction (input and output).
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立 GPIO 方向（输入和输出）的方法。
- en: Methods used to access GPIO values (get and set).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于访问 GPIO 值的方法（获取和设置）。
- en: Methods to map a given GPIO to IRQ and return the associated number.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将给定的 GPIO 映射到 IRQ 并返回相关的编号的方法。
- en: Flag saying whether calls to its methods may sleep, this is very important.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志，表示其方法是否可以休眠，这非常重要。
- en: Optional `debugfs dump` method (showing extra state like pullup config).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的 `debugfs dump` 方法（显示额外状态，如上拉配置）。
- en: Optional numbers called base number, from which GPIO numbering should start.
    It will be automatically assigned if omitted.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的基数号码，从哪里开始对 GPIO 进行编号。如果省略，将自动分配。
- en: 'In the kernel, a GPIO controller is represented as an instance of `struct gpio_chip`
    , defined in `linux/gpio/driver.h` :'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在内核中，GPIO 控制器表示为 `struct gpio_chip` 的实例，定义在 `linux/gpio/driver.h` 中：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the meaning of each element in the structure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结构中每个元素的含义：
- en: '`request` is an optional hook for chip-specific activation. If provided, it
    is executed prior to allocating GPIO whenever one calls `gpio_request()` or `gpiod_get()`
    .'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request` 是一个可选的钩子，用于特定于芯片的激活。如果提供，它将在分配 GPIO 之前执行，每当调用 `gpio_request()` 或
    `gpiod_get()` 时。'
- en: '`free` is an optional hook for chip-specific deactivation. If provided, it
    is executed before the GPIO is deallocated whenever one calls `gpiod_put()` or
    `gpio_free()` .'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`free` 是一个可选的钩子，用于特定于芯片的停用。如果提供，它将在每次调用 `gpiod_put()` 或 `gpio_free()` 时，在释放
    GPIO 之前执行。'
- en: '`get_direction` is executed whenever one needs to know the direction of the
    GPIO `offset` . Return value should be 0 to mean out, and 1 to mean in, (same
    as `GPIOF_DIR_XXX` ), or negative error.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_direction` 每当需要知道 GPIO `offset` 的方向时执行。返回值应为 0 表示输出，1 表示输入（与 `GPIOF_DIR_XXX`
    相同），或者负错误。'
- en: '`direction_input` configures the signal `offset` as input, or returns error.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`direction_input` 配置信号 `offset` 为输入，或返回错误。'
- en: '`get` returns value of GPIO `offset` ; for output signals, this returns either
    the value actually sensed, or zero.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get` 返回 GPIO `offset` 的值；对于输出信号，这将返回实际感应到的值，或者零。'
- en: '`set` assigns output value to GPIO `offset` .'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set` 将输出值分配给 GPIO `offset`。'
- en: '`set_multiple` is called when one needs to assign output values for multiple
    signals defined by `mask` . If not provided, the kernel will install a generic
    hook that will walk through `mask` bits and execute `chip->set(i)` on each bit
    set.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_multiple` 当需要为 `mask` 定义的多个信号分配输出值时调用。如果未提供，内核将安装一个通用的钩子，将遍历 `mask` 位并在每个设置的位上执行
    `chip->set(i)` 。'
- en: 'Please see the following which shows how one can implement this function:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，显示了如何实现此功能：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`set_debounce` if supported by the controller, this hook is an optional callback
    provided to set the debounce time for specified GPIO.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_debounce` 如果控制器支持，这个钩子是一个可选的回调，用于设置指定 GPIO 的去抖时间。'
- en: '`to_irq` is an optional hook to provide GPIO to IRQ mapping. This is called
    whenever one wants to execute the `gpio_to_irq()` or `gpiod_to_irq()` function.
    This implementation may not sleep.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_irq` 是一个可选的钩子，用于提供 GPIO 到 IRQ 的映射。每当需要执行 `gpio_to_irq()` 或 `gpiod_to_irq()`
    函数时，就会调用这个函数。这个实现可能不会休眠。'
- en: '`base` identifies the first GPIO number handled by this chip; or, if negative
    during registration, the kernel will automatically (dynamically) assign one.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base` 标识了该芯片处理的第一个 GPIO 编号；或者，在注册期间为负时，内核将自动（动态）分配一个。'
- en: '`ngpio` is the number of GPIOs this controller provides, starts from `base`
    , to `(base + ngpio - 1)` .'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngpio` 是该控制器提供的 GPIO 数量，从 `base` 开始，到 `(base + ngpio - 1)` 结束。'
- en: '`names` , if set, must be an array of strings to use as alternative names for
    the GPIOs in this chip. The array must be `ngpio` sized, and any GPIO that does
    not need an alias may have its entry set to `NULL` in the array.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`names`，如果设置，必须是一个字符串数组，用作该芯片中 GPIO 的替代名称。数组的大小必须为 `ngpio`，任何不需要别名的 GPIO 可以在数组中的条目中设置为
    `NULL`。'
- en: '`can_sleep` is a Boolean flag to be set if `get()` /`set()` method may sleep.
    It is the case for GPIO controller (also known as expander) sitting on a bus,
    such as I2C or SPI, whose accesses may lead to sleep. This implies that if the
    chip supports IRQs, these IRQs need to be threaded as the chip access may sleep
    when, for example, reading out the IRQ status registers. For GPIO controller mapped
    to memory (part of SoC), this can be set to false.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`can_sleep` 是一个布尔标志，如果 `get()`/`set()` 方法可能会休眠，则设置。对于 GPIO 控制器（也称为扩展器）位于总线上，如
    I2C 或 SPI，其访问可能会导致休眠。这意味着如果芯片支持 IRQ，这些 IRQ 需要被线程化，因为芯片访问可能会休眠，例如，读取 IRQ 状态寄存器时。对于映射到内存（SoC
    的一部分）的 GPIO 控制器，可以将其设置为 false。'
- en: '`irq_not_threaded` is a Boolean flag and must be set if `can_sleep` is set,
    but the IRQs don''t need to be threaded.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`irq_not_threaded` 是一个布尔标志，如果设置了 `can_sleep`，则必须设置该标志，但 IRQs 不需要被线程化。'
- en: Each chip exposes a number of signals, identified in method calls by offset
    values in the range 0 (`ngpio - 1` ). When those signals are referenced through
    calls like `gpio_get_value(gpio)` , the offset is calculated by subtracting base
    from the GPIO number.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个芯片公开了一些信号，通过方法调用中的偏移值（在范围 0（`ngpio - 1`）内）进行标识。当这些信号通过 `gpio_get_value(gpio)`
    等调用引用时，偏移量是通过从 GPIO 编号中减去基数来计算的。
- en: After every callback has been defined and other fields set, one should call
    `gpiochip_add()` on the configured `struct gpio_chip` structure in order to register
    the controller with the kernel. When it comes to unregister, use `gpiochip_remove()`
    . That is all. You can see how easy it is to write your own GPIO controller driver.
    In the book sources repository, you will find a working GPIO controller driver,
    for MCP23016 I2C I/O expander from microchip, whose data sheet is available at
    [http://ww1.microchip.com/downloads/en/DeviceDoc/20090C.pdf](http://ww1.microchip.com/downloads/en/DeviceDoc/20090C.pdf)
    .
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了每个回调和其他字段之后，应在配置的 `struct gpio_chip` 结构上调用 `gpiochip_add()`，以便向内核注册控制器。在注销时，使用
    `gpiochip_remove()`。就是这样。您可以看到编写自己的 GPIO 控制器驱动程序有多么容易。在本书源代码库中，您将找到一个可用的 MCP23016
    I2C I/O 扩展器的 GPIO 控制器驱动程序，其数据表可在 [http://ww1.microchip.com/downloads/en/DeviceDoc/20090C.pdf](http://ww1.microchip.com/downloads/en/DeviceDoc/20090C.pdf)
    上找到。
- en: 'To write such drivers, you should include:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写这样的驱动程序，您应该包括：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is an excerpt from the driver we have written for our controller,
    just to show you how easy the task, of writing a GPIO controller driver is:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们为控制器编写的驱动程序的摘录，只是为了向您展示编写 GPIO 控制器驱动程序有多么容易：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To request a self-owned GPIO from within the controller driver, one should
    not use `gpio_request()` . A GPIO driver can use the following functions instead
    to request and free descriptors without being pinned to the kernel forever:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要从控制器驱动程序内部请求自有 GPIO，不应使用 `gpio_request()`。GPIO 驱动程序可以使用以下函数来请求和释放描述符，而不会永远固定在内核中：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Descriptors requested with `gpiochip_request_own_desc()` must be released with
    `gpiochip_free_own_desc()` .
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `gpiochip_request_own_desc()` 请求的描述符必须使用 `gpiochip_free_own_desc()` 释放。
- en: Pin controller guideline
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引脚控制器指南
- en: 'Depending on the controller you write the driver for, you may need to implement
    some pin control operation to handle pin multiplexing, configuration, and so on:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您为其编写驱动程序的控制器，您可能需要实现一些引脚控制操作，以处理引脚复用、配置等：
- en: For a pin controller that can only do simple GPIO, a simple `struct gpio_chip`
    will be sufficient to handle it. There is no need to set up a `struct pinctrl_desc`
    structure, just write the GPIO controller driver as it.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于只能执行简单 GPIO 的引脚控制器，简单的 `struct gpio_chip` 就足以处理它。无需设置 `struct pinctrl_desc`
    结构，只需编写 GPIO 控制器驱动程序即可。
- en: If the controller can generate interrupts on top of the GPIO functionality,
    a `struct irq_chip` must be set up and registered to the IRQ subsystem.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果控制器可以在 GPIO 功能之上生成中断，则必须设置并向 IRQ 子系统注册 `struct irq_chip`。
- en: 'For a controller having pin multiplexing, advanced pin driver strength, complex
    biasing, you should set up the following three interfaces :'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有引脚复用、高级引脚驱动强度、复杂偏置的控制器，您应该设置以下三个接口：
- en: '`struct gpio_chip` , discussed earlier in this chapter'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`struct gpio_chip`，在本章前面讨论过'
- en: '`struct irq_chip` , discussed in the next chapter ([Chapter 16](http://advanced)
    , *Advanced IRQ Management* )'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`struct irq_chip`，在下一章（[第16章](http://advanced)，*高级中断管理*）中讨论。'
- en: '`struct pinctrl_desc` , not discussed in the book, but well explained in the
    kernel documentation in *Documentation/pinctrl.txt*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`struct pinctrl_desc`，本书未讨论，但在内核文档 *Documentation/pinctrl.txt* 中有很好的解释'
- en: Sysfs interface for GPIO controller
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPIO 控制器的 Sysfs 接口
- en: 'On successful `gpiochip_add()` , a directory entry with a path like `/sys/class/gpio/gpiochipX/`
    will be created, where `X` is the GPIO controller base (controller providing GPIOs
    starting at `#X` ), having the following attributes:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 成功调用 `gpiochip_add()` 后，将创建一个目录条目，路径类似于 `/sys/class/gpio/gpiochipX/`，其中 `X`
    是 GPIO 控制器基地址（提供从 `#X` 开始的 GPIO 的控制器），具有以下属性：
- en: '`base` , whose value is same as `X` , and which corresponds to `gpio_chip.base`
    (if assigned statically), and being the first GPIO managed by this chip.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base`，其值与 `X` 相同，对应于 `gpio_chip.base`（如果静态分配），并且是由此芯片管理的第一个 GPIO。'
- en: '`label` , which is provided for diagnostics (not always unique).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`，用于诊断（不一定是唯一的）。'
- en: '`ngpio` , which tells how many GPIOs this controller provides (`N to N + ngpio
    - 1` ). This is the same as defined in `gpio_chip.ngpios` .'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngpio`，告诉这个控制器提供多少个 GPIO（`N` 到 `N + ngpio - 1`）。这与 `gpio_chip.ngpios` 中定义的相同。'
- en: All of the preceding attributes are read-only.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述属性都是只读的。
- en: GPIO controllers and DT
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPIO 控制器和 DT
- en: Every GPIO controller declared in the DT must have the Boolean property `gpio-controller`
    set. Some controllers provide IRQ mapped to the GPIO. In that case, the property
    `interrupt-cells` should be set too and usually one uses `2` , but it depends
    on the need. The first cell is the pin number, and the second represents the interrupt
    flag.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DT 中声明的每个 GPIO 控制器都必须设置布尔属性 `gpio-controller`。一些控制器提供与 GPIO 映射的中断。在这种情况下，还应该设置属性
    `interrupt-cells`，通常使用 `2`，但这取决于需要。第一个单元格是引脚编号，第二个表示中断标志。
- en: '`gpio-cells` should be set to identify how many cells are used to describe
    a GPIO specifier. One usually uses `<2>` , the first cell to identify the GPIO
    number, and the second for flags. Actually, most of the nonmemory mapped GPIO
    controllers do not use the flags:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`gpio-cells` 应设置为标识用于描述 GPIO 指定器的单元格数量。通常使用 `<2>`，第一个单元格用于标识 GPIO 编号，第二个用于标志。实际上，大多数非内存映射
    GPIO 控制器不使用标志：'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding sample is the node of our GPIO-controller device, and the complete
    device driver is provided with the sources of the book.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前述示例是我们的 GPIO 控制器设备节点，完整的设备驱动程序随本书的源代码一起提供。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is much more than a basis to write the driver for a GPIO controller
    that you may encounter. It explains the main structure to describe such devices.
    The next chapter deals with advanced IRQ management, in which we will see how
    to manage an interrupt controller and thus add such functionality in the driver
    of the MCP23016 expander from microchip.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本章远不止是为您可能遇到的 GPIO 控制器编写驱动程序的基础。它解释了描述这些设备的主要结构。下一章将涉及高级中断管理，我们将看到如何管理中断控制器，并在微芯片的
    MCP23016 扩展器驱动程序中添加此功能。
