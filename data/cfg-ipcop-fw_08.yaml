- en: Chapter 8. Managing Bandwidth with IPCop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用IPCop管理带宽
- en: We are now very much aware that IPCop is more than just a basic packet-filtering
    firewall. We have seen the built-in intrusion detection system as well as the
    powerful VPN options. Another addition we have is the ability to manage traffic
    through a couple of different technologies, traffic shaping and caching. We will
    now look at how we can use these to increase the performance of the network where
    we need it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在非常清楚IPCop不仅仅是一个基本的数据包过滤防火墙。我们已经看到了内置的入侵检测系统以及强大的VPN选项。我们还有另一个增加，就是通过几种不同的技术来管理流量，即流量整形和缓存。现在我们将看看如何在需要的地方使用这些技术来提高网络的性能。
- en: The Bandwidth Problem
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带宽问题
- en: In most networks in use at the moment there will generally be a number of different
    services provided and used by the network and there may be multiple links to other
    networks. With so many services in place we can use up bandwidth very quickly.
    The easiest way to ensure you have enough bandwidth for all the services and users
    on your network is to buy fast links with low contention. This is a good theory,
    but the economic reality is a little bit more complex, as bandwidth can be expensive
    and can be a major overhead to a service. In order to combat this, we can work
    with the services we have and try to reduce their bandwidth usage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前大多数网络中通常会提供和使用多种不同的服务，并且可能会有多个链接到其他网络。由于有这么多的服务，我们可以很快地用尽带宽。确保您的网络上有足够的带宽供所有服务和用户使用的最简单方法是购买低争用率的快速链接。这是一个很好的理论，但经济现实要复杂一些，因为带宽可能很昂贵，可能是服务的主要开销。为了应对这一问题，我们可以与我们拥有的服务合作，尝试减少它们的带宽使用。
- en: Reducing bandwidth usage can initially be accomplished by using protocols that
    conserve bandwidth where possible; sometimes, however, we have no choice and have
    to go with a particular protocol dictated by an application, a vendor, or a user.
    This is when we can look at reducing the strain put on the network by that application.
    There are a number of technologies and devices we can use to do this, each with
    varying complexity and results. IPCop itself, however, has a few simple options
    to help look after our bandwidth.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最初可以通过使用尽可能节省带宽的协议来减少带宽使用；然而，有时我们别无选择，必须使用由应用程序、供应商或用户指定的特定协议。这时，我们可以考虑减少该应用程序对网络的负担。我们可以使用一些技术和设备来做到这一点，每种技术和结果都有所不同。然而，IPCop本身有一些简单的选项，可以帮助我们管理带宽。
- en: The HTTP Problem
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP问题
- en: One of the most commonly used protocols, Internet-wide, is HTTP (although peer-to-peer
    filesharing applications are fast catching up). Most businesses have a website
    running on HTTP as their basic Internet presence and there are very few Internet
    users that don't use HTTP. We can be pretty confident that this is going to be
    a protocol used on our network.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个互联网上，最常用的协议之一是HTTP（尽管点对点文件共享应用程序正在迅速赶上）。大多数企业都有一个基于HTTP运行的网站作为他们的基本互联网存在，几乎没有不使用HTTP的互联网用户。我们可以非常有信心地认为这将是我们网络上使用的协议之一。
- en: HTTP presents us with an important problem when it comes to bandwidth—users
    expect HTTP to be almost instantaneous. Introducing delays to a user's web browsing
    experience due to bandwidth congestion is far from an ideal situation and is probably
    the first place network users are going to notice (and complain!) about a lack
    of bandwidth. Luckily, IPCop provides us with very powerful options to reduce
    HTTP's impact on the network.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及带宽时，HTTP给我们带来了一个重要的问题——用户期望HTTP几乎是即时的。由于带宽拥塞而导致用户的网页浏览体验出现延迟，远非理想的情况，可能是网络用户首先会注意到（并抱怨！）缺乏带宽的地方。幸运的是，IPCop为我们提供了非常强大的选项，以减少HTTP对网络的影响。
- en: 'The Solutions: Proxying and Caching'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案：代理和缓存
- en: While use of a proxy isn't a bandwidth-saving measure on its own, it is a feature
    related to bandwidth control and monitoring. A proxy allows you to monitor, modify,
    and control requests for web content. You can choose which traffic to log and/or
    reject as well as modify these requests as they pass through the proxy. Since
    the proxy sits between the web client and the web server, it can perform some
    other functions, such as caching.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然代理本身并不是节省带宽的措施，但它是与带宽控制和监控相关的功能。代理允许您监视、修改和控制对Web内容的请求。您可以选择要记录和/或拒绝的流量，以及在通过代理时修改这些请求。由于代理位于Web客户端和Web服务器之间，它还可以执行一些其他功能，比如缓存。
- en: It's common for users on the same network to access a few of the same websites.
    This means that every time a user hits the website, they will be downloading all
    the HTML and images on the page. It would obviously be beneficial for our network
    if this content was only downloaded once, and then somehow stored to be presented
    to subsequent clients requesting the same content. Our browsers do that for us
    at the local level, and so if we access the same page more than once there is
    a chance our browser has cached a local copy for us.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一网络上的用户通常会访问一些相同的网站。这意味着每当用户访问网站时，他们将下载页面上的所有HTML和图像。如果这些内容只下载一次，然后以某种方式存储以供后续请求相同内容的客户端呈现，那对我们的网络显然是有利的。我们的浏览器在本地级别为我们做到了这一点，因此如果我们多次访问同一页面，我们的浏览器可能已经为我们缓存了本地副本。
- en: This is exactly what a caching proxy would provide us, but it would cache for
    everyone. Whenever a user downloads a page and its images, the proxy will keep
    a copy in its memory (and/or write it to disk). Whenever a request for the same
    content appears, rather than passing it to the original website, the proxy provides
    the client a copy of the cached version of the file. We can reduce bandwidth dramatically,
    especially if our users are visiting many of the same sites. This does not mean
    that the information you get will be out of date; a website can request that proxies
    do not cache information that's time dependent (stock information, weather, and
    so on).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是缓存代理会为我们提供的，但它会为所有人缓存。每当用户下载页面及其图片时，代理将在内存中保留一份副本（和/或将其写入磁盘）。每当出现对相同内容的请求时，代理不会将其传递给原始网站，而是为客户端提供文件的缓存版本的副本。我们可以大大减少带宽，特别是如果我们的用户访问许多相同的网站。这并不意味着您获取的信息将过时；网站可以要求代理不缓存时间相关的信息（股票信息、天气等）。
- en: Introduction to Squid
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Squid简介
- en: '**Squid** is one of the most useful and powerful web proxy and caching systems
    available. It''s free and open source, which is why it can be included with IPCop.
    Squid itself has quite complicated configuration files and performs a variety
    of proxying and caching functions. As we have come to expect from IPCop, it abstracts
    this complication nicely and let''s us configure Squid with some ease.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Squid**是最有用和功能强大的Web代理和缓存系统之一。它是免费和开源的，这就是为什么它可以与IPCop一起使用。Squid本身有相当复杂的配置文件，并执行各种代理和缓存功能。正如我们所期望的那样，IPCop很好地抽象了这种复杂性，并让我们相对轻松地配置Squid。'
- en: Squid was born as a *fork* of Harvest Cached, which was a proxy/caching project
    and released its first version in 1994, therefore Squid has had a development
    timeline spanning over 10 years. This has led to a quite stable and full-featured
    proxying and caching application. The original Harvest Cached project is no longer
    under development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Squid诞生于Harvest Cached的*分支*，Harvest Cached是一个代理/缓存项目，并于1994年发布了其第一个版本，因此Squid的开发时间跨越了10多年。这导致了一个相当稳定和功能齐全的代理和缓存应用程序。原始的Harvest
    Cached项目已不再开发。
- en: Configuring Squid
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Squid
- en: The Squid configuration screen in IPCop is very easy to follow and you can get
    away with clicking a couple of boxes for a basic configuration.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: IPCop中的Squid配置屏幕非常易于操作，您只需点击几个框即可进行基本配置。
- en: '![Configuring Squid](img/1361_08_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![配置Squid](img/1361_08_01.jpg)'
- en: In this example we have only a Green interface present; we can, however, enable
    the proxy on all other interfaces—except Red, which is the internet connection.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只有一个绿色接口；但是，我们可以在所有其他接口上启用代理——除了红色接口，即互联网连接。
- en: The first step is quite obvious; we enable the proxy on the interfaces we need
    it on by clicking the first checkbox and then choosing the port the proxy listens
    on (800 by default in IPCop—although Squid usually runs on port 3128). We can
    also check the **Log Enabled** box, which is interface non-specific, so we either
    log all or log none. It's a good idea to enable this if we want to monitor the
    proxy at some point. We can also chain this proxy through one provided by our
    ISP for example by configuring the **Upstream** options, which would be provided
    by the ISP or other proxy service provider. The host port to connect to, and a
    user name and password may be necessary.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步非常明显；我们通过点击第一个复选框在需要的接口上启用代理，然后选择代理监听的端口（在IPCop中默认为800，尽管Squid通常在端口3128上运行）。我们还可以勾选**启用日志**框，这是接口非特定的，因此我们要么记录所有内容，要么不记录任何内容。如果我们想要在某个时候监视代理，启用这个选项是个好主意。我们还可以通过配置**上游**选项将此代理链路通过我们的ISP提供的代理，例如，这些选项可能由ISP或其他代理服务提供商提供。可能需要连接的主机端口，以及用户名和密码。
- en: 'Transparency requires a little more explanation. Traditionally proxies listened
    on a specific port on the machine, and clients would have to be configured to
    connect to this. For example, the proxy could be on IP address 10.0.0.1 listening
    on port 800\. In this case we would configure all of our HTTP clients to connect
    to this proxy. Firefox and Internet Explorer have network settings dialogs where
    we can configure the proxy access. The Firefox proxy configuration screen is shown
    in the following figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 透明代理需要更多的解释。传统上，代理在机器上的特定端口上监听，客户端必须配置为连接到此端口。例如，代理可以在IP地址10.0.0.1上监听端口800。在这种情况下，我们将配置所有的HTTP客户端连接到此代理。Firefox和Internet
    Explorer有网络设置对话框，我们可以在其中配置代理访问。Firefox代理配置屏幕如下图所示：
- en: '![Configuring Squid](img/1361_08_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![配置Squid](img/1361_08_02.jpg)'
- en: This is a simple method to use, but if we have to configure all of our applications
    like this it could get tedious, especially if we have a number of machines on
    the network to configure in the same way. This is where transparent proxying becomes
    useful. Instead of the proxy listening on one port and forwarding requests through,
    it monitors all traffic passing through the machine, and where it detects HTTP
    traffic, it attempts to cache. This also has a downside in that some other protocols
    may look like HTTP, and an attempt to cache these may break them. If we enable
    transparent proxying and shortly afterwards an application starts having trouble,
    it's worth switching the transparency off as an initial step. This is a rare and
    specific problem but can be quite hard to track down.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简单的使用方法，但如果我们必须像这样配置所有的应用程序，这可能会变得乏味，特别是如果我们有许多需要以相同方式配置的机器。这就是透明代理变得有用的地方。代理不再监听一个端口并转发请求，而是监视通过机器的所有流量，并在检测到HTTP流量时尝试进行缓存。这也有一个缺点，即一些其他协议可能看起来像HTTP，并且尝试缓存这些协议可能会破坏它们。如果我们启用了透明代理，不久后某个应用程序开始出现问题，关闭透明度作为初始步骤是值得的。这是一个罕见而具体的问题，但可能很难追踪。
- en: Cache Management
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存管理
- en: '**Cache size:** How much space on disk do we want the cache to take? This is
    set as a default of 50MB, which is quite sensible for most small networks. If
    we have a lot of users we may want to increase this to a few 100MB. Going beyond
    1 GB on anything but a really large network is rarely necessary. Also, if the
    number is significantly greater than the available memory on the IPCop machine,
    then we will have a lot of disk reads/writes, which could slow things down.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存大小：我们希望缓存占用磁盘多少空间？这默认设置为50MB，对于大多数小型网络来说是相当合理的。如果我们有很多用户，可能需要将其增加到几百兆字节。除非是真正大型网络，否则很少需要超过1GB。此外，如果这个数字明显大于IPCop机器上可用的内存，那么我们将有大量的磁盘读/写，这可能会减慢速度。
- en: '**Min object size:** Sometimes we don''t want to cache the really small files
    as it can be inefficient. Generally, however, it''s a good idea to leave this
    at zero as the repeated HTTP overhead of these files can be a performance hit.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最小对象大小：有时我们不希望缓存真正小的文件，因为这可能效率低下。然而，通常将其设置为零是一个好主意，因为这些文件的重复HTTP开销可能会影响性能。
- en: '**Max object size:** Likewise we may not want overly large files to be cached
    as this will quickly fill up our cache and lead us into the disk read/write problem
    that we hope to avoid.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最大对象大小：同样，我们可能不希望缓存过大的文件，因为这将很快填满我们的缓存，并导致我们陷入磁盘读/写问题，这是我们希望避免的。
- en: The defaults for the previous two options should generally be used unless we
    have a specific need to change them, for example users continually downloading
    the same large files.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应该使用前两个选项的默认设置，除非我们有特定的需求需要更改，例如用户不断下载相同的大文件。
- en: Transfer Limits
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输限制
- en: We can also control the maximum and minimum sizes for file transfers through
    the system. This is not a good idea unless we have a specific case for doing so,
    as it can be very frustrating for the user. It's quite handy if we want to prevent
    users downloading very large files such as ISOs, as an attempt to prevent abuse
    of the network's bandwidth for personal use.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以控制系统中文件传输的最大和最小大小。除非有特定的情况需要这样做，否则这不是一个好主意，因为这可能会让用户非常沮丧。如果我们想要防止用户下载诸如ISO之类的非常大的文件，这将非常方便，以防止滥用网络带宽进行个人使用。
- en: Managing Bandwidth without a Cache
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在没有缓存的情况下管理带宽
- en: HTTP is not the only protocol on our networks that we need adequate bandwidth
    for. For example if we have online games or voice and video communication on our
    network, these services usually warrant higher priority than others due to their
    time-sensitive use. You wouldn't want to have a choppy voice conversation with
    a client because one of the users on the network is downloading large files, or
    on a home network, you wouldn't want to lose your high score in your online game
    because someone decided to start listening to their online radio station. This
    is where traffic shaping comes in.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP并不是我们网络上唯一需要足够带宽的协议。例如，如果我们在网络上有在线游戏或语音和视频通信，这些服务通常由于其对时间敏感的使用而需要比其他服务更高的优先级。你不会希望因为网络上的某个用户正在下载大文件而与客户进行声音不连贯的对话，或者在家庭网络上，你不会希望因为有人决定开始收听在线广播电台而失去在线游戏中的高分。这就是流量整形的用武之地。
- en: Traffic Shaping Basics
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流量整形基础知识
- en: In order to ensure Quality of Service (QoS), we have to control traffic so that
    high priority traffic is treated as just that, high priority! With traffic shaping,
    we can use all the same parameters we use in packet filtering; however, instead
    of deciding whether to pass the traffic, we make more complicated decisions about
    which traffic is afforded the highest priority and is therefore processed first
    or given more bandwidth than the other protocols in use on the network.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保服务质量（QoS），我们必须控制流量，使高优先级的流量被视为高优先级！通过流量整形，我们可以使用与数据包过滤相同的参数；然而，我们不是决定是否传递流量，而是对哪些流量享有最高优先级做出更复杂的决定，因此首先处理或给予比网络上使用的其他协议更多的带宽。
- en: Traffic is used commonly to control media services. Video- and audio-based services
    rely heavily on low latency and ample available bandwidth, and so it's common
    to introduce traffic shaping to a network to accommodate these services.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 流量通常用于控制媒体服务。视频和音频服务严重依赖低延迟和充足的可用带宽，因此在网络中引入流量整形以适应这些服务是很常见的。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**ISPs Capitalizing on Traffic Shaping**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ISP利用流量整形
- en: Some ISP's use traffic shaping in much the same way as we describe here, to
    provide better service to services relying on bandwidth and latency.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一些ISP像我们在这里描述的那样使用流量整形，以提供更好的服务给依赖带宽和延迟的服务。
- en: There is also another commercial use for this in the form of service provisions.
    ISPs can traffic shape (and some do) so that one content provider's services respond
    better than another. For example an ISP can charge for priority shaping, and if
    Google paid for this service, they would be guaranteed that their content and
    services would appear faster and more responsive to those of their competitors
    such as Yahoo! and MSN.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种商业用途，即服务提供。ISP可以进行流量整形（有些确实这样做），以便一个内容提供商的服务比另一个更好。例如，ISP可以收费进行优先整形，如果Google为此服务付费，他们将确保他们的内容和服务比他们的竞争对手如Yahoo!和MSN更快更具响应性。
- en: This is an effective way to push out the competition as the ISPs users would
    likely stick with the *better* content provider. Obviously not entirely in the
    interests of the ISP's users, but certainly a profitable venture for the ISP and
    possibly the content providers that pay for these services.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种有效地排挤竞争对手的方法，因为ISP的用户可能会选择*更好*的内容提供商。显然这并不完全符合ISP用户的利益，但对于ISP和可能为这些服务付费的内容提供商来说，这肯定是一项有利可图的投资。
- en: Traffic Shaping Configuration
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流量整形配置
- en: The traffic shaping configuration page is very simple and could offer us more
    options, but we have the ability to shape based on port in use, which allows us
    to be specific enough to differentiate most services for traffic shaping purposes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 流量整形配置页面非常简单，可能会给我们提供更多选项，但我们有能力基于使用的端口进行整形，这使我们足够具体以区分大多数服务以进行流量整形。
- en: '![Traffic Shaping Configuration](img/1361_08_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![流量整形配置](img/1361_08_03.jpg)'
- en: The checkbox next to the words **Traffic Shaping** is used to enable the service.
    This won't have any effect on the traffic, however, until we define some traffic
    shaping rules.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**流量整形**旁边的复选框用于启用该服务。然而，在我们定义一些流量整形规则之前，这对流量不会产生任何影响。'
- en: We also have to provide the uplink and downlink speeds. This is how fast our
    network can transfer data out and in. A quick reference to common upload and download
    speeds is given in the following table, which may not be entirely accurate for
    our setup. It's recommended we test our own speeds or consult our ISP for more
    accurate information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须提供上行和下行速度。这是我们的网络可以传输数据的速度。常见上传和下载速度的快速参考如下表所示，这可能对我们的设置并不完全准确。建议我们测试自己的速度或咨询我们的ISP以获取更准确的信息。
- en: '| Connection type | Uplink (kbit/sec) | Downlink (kbit/sec) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 连接类型 | 上行（kbit/秒） | 下行（kbit/秒） |'
- en: '| --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Dialup | 48 | 56 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: 拨号 | 48 | 56 |
- en: '| Cable (1 Meg) | 256 | 1000 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 电缆（1兆） | 256 | 1000 |'
- en: '| T1 | 192 | 1540 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| T1 | 192 | 1540 |'
- en: 'A more complete guide to different services with their upload and download
    speeds can be found here: [http://en.wikipedia.org/wiki/List_of_device_bandwidths](http://en.wikipedia.org/wiki/List_of_device_bandwidths).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到更完整的不同服务及其上传和下载速度的指南：[http://en.wikipedia.org/wiki/List_of_device_bandwidths](http://en.wikipedia.org/wiki/List_of_device_bandwidths)。
- en: Adding a Traffic Shaping Service
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加流量整形服务
- en: '![Adding a Traffic Shaping Service](img/1361_08_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![添加流量整形服务](img/1361_08_04.jpg)'
- en: In order to add a service, we fill in the three required fields and then choose
    **Enabled**. Clicking **Add** adds a new line to the **Traffic shaping services**
    in the bottom pane. In this case we have added port **5060 UDP** (SIP) as **High**
    priority, which will ensure that this service is given precedence on the network.
    These are quite basic traffic shaping options and we don't have the ability to
    define port ranges or shaping by IP address. We are limited to three levels of
    priority—low, medium, and high, with ports being added one at a time. It's not
    necessary to list all ports that will pass through IPCop as those not specified
    will be handled at medium level by default. To delete this rule, we simply click
    the trash can on the right-hand side; we can also enable or disable added rules
    using the checkbox under the **Action** heading.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加一个服务，我们填写三个必填字段，然后选择**启用**。点击**添加**会在底部窗格的**流量整形服务**中添加一行新的行。在这种情况下，我们已经添加了端口**5060
    UDP**（SIP）作为**高**优先级，这将确保该服务在网络上优先处理。这些是相当基本的流量整形选项，我们没有能力定义端口范围或按IP地址进行整形。我们只能限制为三个优先级——低、中、高，并且端口一次添加一个。不需要列出所有将通过IPCop的端口，因为未指定的端口将默认以中等级处理。要删除此规则，我们只需点击右侧的垃圾桶；我们还可以使用**操作**标题下的复选框启用或禁用添加的规则。
- en: Editing a Traffic Shaping Service
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑流量整形服务
- en: 'In order to edit a service we have already added, we can click on the pencil
    under the action heading, which should show a screen as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编辑我们已经添加的服务，我们可以点击操作标题下的铅笔，这应该显示如下屏幕：
- en: '![Editing a Traffic Shaping Service](img/1361_08_05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![编辑流量整形服务](img/1361_08_05.jpg)'
- en: We can see that our rule is now highlighted in yellow in order to make it clear
    which rule we are editing, and we have the original parameters in the configuration
    boxes above. The **Add** button has also changed to **Update**. We now modify
    any value we require and click the **Update** button, which will save the rules
    and take us back to the initial Traffic Shaping screen.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们的规则现在以黄色突出显示，以便清楚地知道我们正在编辑哪个规则，并且我们在上面的配置框中有原始参数。**添加**按钮也已更改为**更新**。我们现在修改任何我们需要的值，然后点击**更新**按钮，这将保存规则并将我们带回初始的流量整形屏幕。
- en: There are additional modules available for IPCop that extend these capabilities
    even further, which are worth considering if you have some serious traffic shaping
    work to accomplish.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于IPCop还有其他可用的模块，可以进一步扩展这些功能，如果您有一些严肃的流量整形工作要完成，这是值得考虑的。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have covered caching and traffic shaping with IPCop and how
    to configure these. This can be useful on even the smallest of networks, as we
    prioritize service access, allowing users on the network to be guaranteed the
    best possible service for any critical services in use. The options for doing
    so in IPCop are quite basic, and we are limited in the control we have. We have
    seen, however, that it is possible to make an impact on services in order to improve
    our bandwidth utilization.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了使用IPCop进行缓存和流量整形以及如何配置这些功能。即使在最小的网络中，这也可能很有用，因为我们优先考虑服务访问，允许网络上的用户保证使用中的关键服务获得最佳的服务。在IPCop中进行这样做的选项相当基本，我们在控制方面受到限制。然而，我们已经看到，可以对服务产生影响，以改善我们的带宽利用率。
