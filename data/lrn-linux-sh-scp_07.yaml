- en: Hello World!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World!
- en: In this chapter, we will finally start writing shell scripts. After writing
    and running our very own `Hello World!` script, we will look at some best practices
    for all future scripts. We will use many techniques to increase the readability
    of our scripts, and we will follow the KISS principle (Keep It Simple, Stupid)
    where possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将终于开始编写shell脚本。在编写和运行我们自己的`Hello World!`脚本之后，我们将研究一些适用于所有未来脚本的最佳实践。我们将使用许多技术来提高脚本的可读性，并在可能的情况下遵循KISS原则（保持简单，愚蠢）。
- en: 'The following commands will be introduced in this chapter: `head`, `tail`,
    and `wget`.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下命令：`head`，`tail`和`wget`。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: First steps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步
- en: Readability
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读性
- en: KISS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KISS
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will create our shell scripts directly on our virtual machine; we will not
    be using Atom/Notepad++ just yet.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接在虚拟机上创建我们的shell脚本；我们暂时不会使用Atom/Notepad++。
- en: 'All scripts for this chapter can be found on GitHub: [https://github.com/PacktPublishing/Learn-Linux-Shell-Scripting-Fundamentals-of-Bash-4.4/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-Linux-Shell-Scripting-Fundamentals-of-Bash-4.4/tree/master/Chapter07).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有脚本都可以在GitHub上找到：[https://github.com/PacktPublishing/Learn-Linux-Shell-Scripting-Fundamentals-of-Bash-4.4/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-Linux-Shell-Scripting-Fundamentals-of-Bash-4.4/tree/master/Chapter07)。
- en: First steps
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一步
- en: After getting some background information on Linux, preparing our system, and
    getting an overview of important concepts for scripting in Linux, we have finally
    arrived at the point where we will be writing actual shell scripts!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取有关Linux的一些背景信息，准备我们的系统，并了解Linux脚本编写的重要概念之后，我们终于到达了我们将编写实际shell脚本的地步！
- en: 'To recap, a shell script is nothing more than multiple Bash commands in sequence.
    Scripts are often used to automate repetitive tasks. They can be run interactively
    or non-interactively (meaning with or without user input) and can be shared with
    others. Let''s create our `Hello World` script! We''ll create a folder in our
    `home` directory where we will store all scripts, sorted by each chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，shell脚本只不过是多个Bash命令的顺序排列。脚本通常用于自动化重复的任务。它们可以交互式或非交互式地运行（即带有或不带有用户输入），并且可以与他人共享。让我们创建我们的`Hello
    World`脚本！我们将在我们的`home`目录中创建一个文件夹，用于存储每个章节的所有脚本：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, in the `vim` screen, enter the following text (note how we use an empty
    line *between* the two lines):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`vim`屏幕中，输入以下文本（注意我们在两行之间*使用了空行*）：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we explained before, the `echo` command prints text to the Terminal. Let''s
    run the scripts using the `bash` command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前解释的，`echo`命令将文本打印到终端。让我们使用`bash`命令运行脚本：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Congratulations, you are now a shell scripter! Perhaps not a very good or well-rounded
    one *yet*, but a shell scripter nonetheless.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你现在是一个shell脚本编写者！也许还不是一个非常优秀或全面的*编写者*，但无论如何都是一个shell脚本编写者。
- en: Remember, if `vim` is not doing the trick for you yet, you can always fall back
    to `nano`. Or, even better, run `vimtutor` again and refresh those `vim` actions!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果`vim`还没有完全满足你的需求，你可以随时退回到`nano`。或者，更好的是，再次运行`vimtutor`并刷新那些`vim`操作！
- en: The shebang
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: shebang
- en: 'You are probably wondering about that first line. The second (or third, if
    you count the empty line) should be clear, but that first one is new. It is called
    the **shebang**, but is sometimes also referred to as a *sha-bang*, *hashbang*,
    *pound-bang*, and/or *hash-pling*. Its function is pretty simple: it tells the
    system which binary to use to execute the script. It is always in the format of
    `#!<binary path>`. For our purposes, we will always use the `#!/bin/bash` shebang,
    but for Perl or Python scripts it would be `#!/usr/bin/perl` and `#!/usr/bin/python3` respectively.
    It might seem unnecessary at first sight. We create the script named `hello-world.sh`,
    whereas a Perl or Python script would use `hello-world.pl` and `hello-world.py`.
    Why, then, do we need the shebang?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道第一行是什么意思。第二行（或者第三行，如果你算上空行的话）应该很清楚，但第一行是新的。它被称为**shebang**，有时也被称为*sha-bang*，*hashbang*，*pound-bang*和/或*hash-pling*。它的功能非常简单：它告诉系统使用哪个二进制文件来执行脚本。它的格式始终是`#!<binary
    path>`。对于我们的目的，我们将始终使用`#!/bin/bash` shebang，但对于Perl或Python脚本，分别是`#!/usr/bin/perl`和`#!/usr/bin/python3`。乍一看，这似乎是不必要的。我们创建了名为`hello-world.sh`的脚本，而Perl或Python脚本将使用`hello-world.pl`和`hello-world.py`。那么，为什么我们需要shebang呢？
- en: For Python, it allows us to easily distinguish between Python 2 and Python 3\.
    You would normally expect people to switch to a newer version of a programming
    language as soon as it's there, but for Python this seems to require a lot more
    effort, which is why you see both Python 2 and Python 3 in use today.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python，它允许我们轻松区分Python 2和Python 3。通常情况下，人们会期望尽快切换到编程语言的新版本，但对于Python来说，这似乎需要付出更多的努力，这就是为什么今天我们会看到Python
    2和Python 3同时在使用中的原因。
- en: Bash scripts do not end in `.bash`, but in `.sh`, the general acronym for *shell*.
    So, unless we specify the shebang for Bash, we will end up in a *normal* shell
    execution. While this is fine for some scripts (the `hello-world.sh` script would
    work fine), when we use the advanced functions of Bash, we will run into issues.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Bash脚本不以`.bash`结尾，而是以`.sh`结尾，这是*shell*的一般缩写。因此，除非我们为Bash指定shebang，否则我们将以*正常*的shell执行结束。虽然对于一些脚本来说这没问题（`hello-world.sh`脚本将正常工作），但当我们使用Bash的高级功能时，就会遇到问题。
- en: Running scripts
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行脚本
- en: 'If you were really paying attention, you will have noticed we executed a script
    that was not executable, using the `bash` command. Why would we need the shebang,
    if we specify how to run it anyway? In this case, we would not need the shebang.
    However, we would need to know exactly which kind of script it is and find the
    correct binary on the system to run it, which can be kind of a hassle, especially
    once you have many scripts. Thankfully, there is a better way for us to run these
    scripts: using the executable permission. Let''s see how we can run our `hello-world.sh`
    script by setting the executable permission:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您真的留心观察，您会注意到我们执行了一个没有可执行权限的脚本，使用了`bash`命令。如果我们已经指定了如何运行它，为什么还需要shebang呢？在这种情况下，我们不需要shebang。但是，我们需要确切地知道它是哪种类型的脚本，并找到系统上正确的二进制文件来运行它，这可能有点麻烦，特别是当您有很多脚本时。幸运的是，我们有更好的方法来运行这些脚本：使用可执行权限。让我们看看如何通过设置可执行权限来运行我们的`hello-world.sh`脚本：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can execute a script (or any file, really, if it makes sense for the file
    to be executed) by either running it *fully qualified* or using `./` in the same
    directory, as long as it has the executable permission set. We need the prefix `./`
    because of security: normally when we execute a command the `PATH` variable is
    explored for that name. Now imagine someone putting a malicious binary called
    `ls` in your home directory. If `./` rule wasn''t in place, running the `ls` command
    would result in the binary being run, instead of `/bin/ls` (which is on your `PATH`).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行*完全限定*或在相同目录中使用`./`来执行脚本（或任何文件，只要对于该文件来说有意义）。只要设置了可执行权限，我们就需要前缀`./`。这是因为安全性的原因：通常当我们执行一个命令时，`PATH`变量会被探索以找到该命令。现在想象一下，有人在您的主目录中放置了一个恶意的名为`ls`的二进制文件。如果没有`./`规则，运行`ls`命令将导致运行该二进制文件，而不是`/bin/ls`（它在您的`PATH`上）。
- en: Because we are running a script by just using `./hello-world.sh`, we now need
    the shebang again. Otherwise, Linux would default to using `/bin/sh`, which is
    not what we want in a **Bash** scripting book, right?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们只是使用`./hello-world.sh`来运行脚本，所以现在我们需要再次使用shebang。否则，Linux会默认使用`/bin/sh`，这不是我们在**Bash**脚本书中想要的，对吧？
- en: Readability
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可读性
- en: When writing shell scripts, you should always aim to make sure the code is as
    readable as possible. When you're in the process of creating a script, all the
    logic, commands, and flow of the script will be obvious to you, but if you look
    at the script after putting it down for a little while, this isn't a given anymore.
    Even worse, you'll most likely work together with other people on scripts; these
    people have never had the same considerations you had when writing the script
    (and the same goes for the other way around). How can we promote better readability
    in our scripts? Comments and verbosity are two ways in which we can achieve this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写shell脚本时，您应该始终确保代码尽可能易读。当您正在创建脚本时，所有逻辑、命令和脚本流程对您来说可能是显而易见的，但如果您一段时间后再看脚本，这就不再是显而易见的了。更糟糕的是，您很可能会与其他人一起编写脚本；这些人在编写脚本时从未考虑过您的考虑（反之亦然）。我们如何在脚本中促进更好的可读性呢？注释和冗长是我们实现这一目标的两种方式。
- en: Comments
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: 'As any good software engineer could tell you, placing relevant comments in
    your code increases the quality of the code. A comment is nothing more than a
    bit of text explaining what you''re doing, prefixed by a special character that
    ensures the language you''re coding in does not interpret the text. For Bash,
    this character is the *number sign* `#` (currently more famous for its use in
    #HashTags). When you''re reading other sources, it may also be referred to as
    the *pound sign* or the *hash*. Other examples of comment characters are `//`
    (Java, C++), `--` (SQL), and `<!-- comment here -->` (HTML, XML). The `#` character
    is also used as a comment for Python and Perl.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何优秀的软件工程师都会告诉您，在代码中放置相关注释会提高代码的质量。注释只不过是一些解释您在做什么的文本，前面加上一个特殊字符，以确保您编写代码的语言不会解释这些文本。对于Bash来说，这个字符是*井号*
    `#`（目前更为人所熟知的是在#HashTags中的使用）。在阅读其他来源时，它也可能被称为*井号*或*哈希*。其他注释字符的例子包括`//`（Java，C++），`--`（SQL），以及`<!--
    comment here -->`（HTML，XML）。`#`字符也被用作Python和Perl的注释。
- en: 'A comment can either be used at the beginning of a line, which ensures the
    entire line does not get interpreted, or further in a line. In that case, everything
    up until `#` will be processed. Let''s look at an example of both of these in
    a revised `Hello World` script:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以放在行的开头，以确保整行不被解释，或者放在行的其他位置。在这种情况下，直到`#`之前的所有内容都将被处理。让我们看一个修订后的`Hello World`脚本中这两种情况的例子。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, we can use the following syntax:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下语法：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In general, we prefer putting comments on their own line directly above the
    command. However, once we introduce loops, redirection, and other advanced constructs,
    an *inline comment* can ensure better readability than an entire line. The most
    important thing to remember, though, is: **any relevant comment is always better
    than no comment, whether full line or inline**. By convention, we always prefer
    to keep comments either really short (one to three words) or use a full sentence
    with proper punctuation. In cases where a full sentence would be overkill, use
    a few keywords; otherwise, opt for the full sentence. We guarantee it will make
    your scripts look much more professional.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们更喜欢将注释放在命令的上面单独的一行。然而，一旦我们引入循环、重定向和其他高级结构，*内联注释*可以确保比整行注释更好的可读性。然而，最重要的是：**任何相关的注释总比没有注释更好，无论是整行还是内联**。按照惯例，我们总是更喜欢保持注释非常简短（一到三个单词）或者使用带有适当标点的完整句子。在需要简短句子会显得过于夸张的情况下，使用一些关键词；否则，选择完整句子。我们保证这将使您的脚本看起来更加专业。
- en: Script header
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本头
- en: 'In our scripting endeavors, we always include a *header* at the beginning of
    the script. While this is not necessary for the functioning of the script, it
    can help greatly when other people are working with your scripts (or, again, when
    you''re working with other people''s scripts). A header can include any information
    you think is needed, but in general we always start with the following fields:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的脚本编写中，我们总是在脚本开头包含一个*标题*。虽然这对于脚本的功能来说并不是必需的，但当其他人使用您的脚本时（或者再次，当您使用其他人的脚本时），它可以帮助很大。标题可以包括您认为需要的任何信息，但通常我们总是从以下字段开始：
- en: Author
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者
- en: Version
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本
- en: Date
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: Description
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: Usage
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法
- en: 'By implementing a simple header using comments, we can give someone who stumbles
    upon the script an idea of when it was written and by whom (should they have questions).
    Furthermore, a simple description gives a goal to the script, and usage information
    ensures there is no trial and error when using a script for the first time. Let''s
    create a copy of our `hello-world.sh` script, call it `hello-world-improved.sh`,
    and implement both a header and a comment for the functionality:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用注释实现简单的标题，我们可以让偶然发现脚本的人了解脚本是何时编写的，由谁编写的（如果他们有问题的话）。此外，简单的描述为脚本设定了一个目标，使用信息确保首次使用脚本时不会出现试错。让我们创建`hello-world.sh`脚本的副本，将其命名为`hello-world-improved.sh`，并实现标题和功能的注释：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make sure the script looks like the following, but be sure to enter the *current
    date* and *your own name*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保脚本看起来像下面这样，但一定要输入*当前日期*和*您自己的名字*：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, doesn't that look nice? The only thing that might stick out is that we
    now have a script of 12 lines, where only a single line contains any functionality.
    In this case, indeed, it seems a bit much. However, we're trying to learn good
    practices. As soon as scripts become more complicated, these 10 lines we're using
    for the shebang and the header will not make a difference, but the usability increases
    notably. While we're at it, we're introducing a new `head` command.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看起来不错吧？唯一可能突出的是，我们现在有一个包含任何功能的12行脚本。在这种情况下，的确，这似乎有点过分。然而，我们正在努力学习良好的实践。一旦脚本变得更加复杂，我们用于shebang和标题的这10行将不会有任何影响，但可用性显著提高。顺便说一下，我们正在引入一个新的`head`命令。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `head` command is like `cat`, but it does not print the whole file; by default,
    it only prints the first 10 lines. Which, not entirely coincidentally, is exactly
    as long as we created our header to be. So, anybody that wants to use your script
    (and, let's be honest, **you** after 6 months are also *anybody*) can just use
    `head` to print the header and get all the information needed to start using the
    script.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`head`命令类似于`cat`，但它不会打印整个文件；默认情况下，它只打印前10行。巧合的是，这恰好与我们创建的标题长度相同。因此，任何想要使用您的脚本的人（老实说，**您**在6个月后也是*任何人*）只需使用`head`打印标题，并获取开始使用脚本所需的所有信息。'
- en: 'While we''re introducing `head`, we would be negligent if we did not introduce
    `tail` as well. As the name might imply, while `head` prints the top of the file,
    `tail` prints the end of the file. While this does not help us with our script
    headers, it is very useful when looking at log files for errors or warnings:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入`head`的同时，如果我们不介绍`tail`也是不负责任的。正如名称可能暗示的那样，`head`打印文件的顶部，而`tail`打印文件的末尾。虽然这对我们的脚本标题没有帮助，但在查看错误或警告的日志文件时非常有用：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Verbosity
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冗长
- en: Back to how we can improve the readability of our scripts. While commenting
    is a great way to improve our understanding of a script, if the commands in the
    script use many obscure flags and options, we need many words in our comments
    to explain everything. And, as you might expect, if we need five lines of comments
    to explain our commands, the readability becomes lower instead of higher! Verbosity
    is the balancing act between not too much but also not too little explanation.
    For example, you will probably not have to explain to anyone if and why you are
    using an `ls` command, since that is very basic. However, the `tar` command can
    be quite complex so it might be worthwhile to give a short comment about what
    you're trying to achieve.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们如何改善脚本的可读性。虽然注释是改善我们对脚本理解的好方法，但如果脚本中的命令使用许多晦涩的标志和选项，我们需要在注释中使用许多词语来解释一切。而且，正如您可能期望的那样，如果我们需要五行注释来解释我们的命令，那么可读性会降低而不是提高！冗长是在不要太多但也不要太少的解释之间取得平衡。例如，您可能不必向任何人解释您是否以及为什么使用`ls`命令，因为那是非常基本的。然而，`tar`命令可能相当复杂，因此简短地解释您要实现的目标可能是值得的。
- en: 'In this context, there are three types of verbosity we want to discuss. These
    are the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们想讨论三种类型的冗长。它们分别是：
- en: Verbosity in comments
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释的冗长
- en: Verbosity of commands
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令的冗长
- en: Verbosity of command output
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令输出的冗长
- en: Verbosity in comments
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释的冗长
- en: The issue with verbosity is that it's hard to give definitive rules. Almost
    always it's very dependent on the context. So, while we can say that, indeed,
    we do not have to comment on `echo` or `ls`, this might not always be the case.
    Let's say we use the output of the `ls` command to iterate over some files; perhaps
    we want to mention this in a comment? Or perhaps even this situation is so clear
    for our perceived readers that a short comment on the entire loop would suffice?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 冗长的问题在于很难给出明确的规则。几乎总是非常依赖于上下文。因此，虽然我们可以说，确实，我们不必评论`echo`或`ls`，但情况并非总是如此。假设我们使用`ls`命令的输出来迭代一些文件；也许我们想在注释中提到这一点？或者甚至这种情况对我们的预期读者来说是如此清晰，以至于对整个循环进行简短的评论就足够了？
- en: 'The answer is, very unsatisfactorily, *it depends*. If you''re unsure, it''s
    often a good idea to include the comment anyway, but you might want to keep it
    more sparse. Instead of *This instance of ls lists all the files, which we can
    then use to iterate over for the rest of the scripts,* you might choose *Builds
    list for iteration with ls.* instead. This is mostly a practiced skill, so be
    sure to at least start practicing it: you will most certainly get better as you
    shell-script more.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是，非常不令人满意，*这取决于情况*。如果您不确定，通常最好还是包括注释，但您可能希望保持更加简洁。例如，您可以选择*使用ls构建迭代列表*，而不是*此ls实例列出所有文件，然后我们可以用它来进行脚本的其余部分的迭代*。这在很大程度上是一种实践技能，所以一定要至少开始练习：随着您编写更多的shell脚本，您肯定会变得更好。
- en: Verbosity of commands
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令的冗长
- en: 'Command verbosity is an interesting one. In the previous chapters you were
    introduced to a lot of commands, sometimes with accompanying flags and options
    that alter the functioning of that command. Most options have both a short and
    long syntax that accomplishes the same thing. The following is an example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出的冗长是一个有趣的问题。在之前的章节中，您已经了解了许多命令，有时还有相应的标志和选项，可以改变该命令的功能。大多数选项都有短语法和长语法，可以实现相同的功能。以下是一个例子：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We use `ls` to recursively print the files in our home directory. We first
    use the shorthand option `-R`, and right after the long `--recursive` variant.
    As you can see from the output, the command is exactly the same, even `-R` is
    much shorter and faster to type. However, the `--recursive` option is more verbose,
    since it gives us a much better hint about what we''re doing than just `-R`. So,
    when do you use which? The short answer: **use shorthand options in your daily
    work, but use long options when scripting**. While this works great for most situations,
    it isn''t a foolproof rule. Some shorthand commands are so prevalent that using
    the long option might be more confusing for the reader, as counterintuitive as
    it sounds. For example, when working with SELinux or AppArmor, the `-Z` command
    for `ls` prints the security context. The long option for this is `--context`,
    but this is not as well known as the `-Z` option (in our experience). In this
    case, using shorthand would be better.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ls`递归打印我们的主目录中的文件。我们首先使用简写选项`-R`，然后使用长`--recursive`变体。从输出中可以看出，命令完全相同，即使`-R`更短且输入更快。但是，`--recursive`选项更冗长，因为它比`-R`给出了更好的提示，说明我们在做什么。那么，何时使用哪个？简短的答案是：**在日常工作中使用简写选项，在编写脚本时使用长选项**。虽然这对大多数情况都适用，但这并不是一个绝对可靠的规则。有些简写命令使用得非常普遍，以至于使用长选项可能会更令读者困惑，尽管听起来有些违反直觉。例如，在使用SELinux或AppArmor时，`ls`的`-Z`命令会打印安全上下文。这个的长选项是`--context`，但是这个选项没有`-Z`选项那么出名（根据我们的经验）。在这种情况下，使用简写会更好。
- en: 'There is, however, a command we have already seen that is complicated, but
    a lot more readable when we use long options: `tar`. Let''s look at two ways of
    creating an archive:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们已经看到了一个复杂的命令，但是当我们使用长选项时，它会更加可读：`tar`。让我们看看创建存档的两种方法：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The first command, `tar czvf`, uses only shorthand. A command like this would
    be great for either a full-line comment or inline comment:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令`tar czvf`只使用了简写。这样的命令非常适合作为完整的行注释或内联注释：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, you could use the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下内容：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `tar --create --gzip --verbose --file` command, however, is verbose enough
    *in itself* and would not warrant a comment, because an appropriate comment would
    literally say the same as what the long options are saying!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`tar --create --gzip --verbose --file` 命令本身已经足够冗长，不需要注释，因为适当的注释实际上与长选项所表达的意思相同！'
- en: Shorthand is used to save time. For daily tasks, this is a great way to interact
    with your system. However, when shell scripting, it's much more important to be
    clear and verbose. Using long options is a better idea, since you can prevent
    the need for extra comments when using these options. However, some commands are
    used so often that the longer flag can actually be more confusing; use your best
    judgement here and learn from experience.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简写用于节省时间。对于日常任务来说，这是与系统交互的好方法。但是，在shell脚本中，清晰和冗长更为重要。使用长选项是一个更好的主意，因为使用这些选项时可以避免额外的注释。然而，一些命令使用得非常频繁，以至于长标志实际上可能更加令人困惑；在这里要根据您的最佳判断，并从经验中学习。
- en: Verbosity of command output
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令输出的冗长
- en: 'Lastly, when running a shell script, you will see output from the commands
    in the script (unless you want to remove that output with *redirection*, which
    will be explained in [Chapter 12](15141e02-be0c-4709-90f4-a172809217c4.xhtml), *Using
    Pipes and Redirection in Scripts*). Some commands are verbose by default. Good
    examples of these are the `ls` and `echo` commands: their entire function is to
    print something on screen.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当运行shell脚本时，您将看到脚本中命令的输出（除非您想使用*重定向*来删除该输出，这将在[第12章](15141e02-be0c-4709-90f4-a172809217c4.xhtml)中解释，*在脚本中使用管道和重定向*）。一些命令默认是冗长的。这些命令的很好的例子是`ls`和`echo`命令：它们的整个功能就是在屏幕上打印一些东西。
- en: If we circle back to the `tar` command, we can ask ourselves if we need to see
    all the files that are being archived. If the logic in our script is correct,
    we can assume the correct files are being archived and a list of these files will
    only clutter up the rest of the output from the script. By default, `tar` does
    not print anything; we have used the `-v`/`--verbose` option for this up until
    now. But, for a script, this is often not desirable behavior, so we can safely
    omit this option (unless we have a good reason not to).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到`tar`命令，我们可以问自己是否需要看到正在存档的所有文件。如果脚本中的逻辑是正确的，我们可以假设正在存档正确的文件，并且这些文件的列表只会使脚本的其余输出变得混乱。默认情况下，`tar`不会打印任何内容；到目前为止，我们一直使用`-v`/`--verbose`选项。但是，对于脚本来说，这通常是不可取的行为，因此我们可以安全地省略此选项（除非我们有充分的理由不这样做）。
- en: 'Most commands have appropriate verbosity by default. The output of `ls` is
    printed, but `tar` is hidden by default. For most commands, it is possible to
    reverse the verbosity by using either a `--verbose` or `--quiet` option (or the
    corresponding shorthands, often `-v` or `-q`). A good example of this is `wget`:
    this command is used to grab a file from the internet. By default, it gives a
    lot of output about the connection, hostname resolution, download progress, and
    download destination. Many times, however, all these things are not interesting
    at all! In this case, we use the `--quiet` option for `wget`, because for that
    situation that is the **appropriate verbosity** of the command.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数命令默认具有适当的冗长性。`ls`的输出是打印的，但`tar`默认是隐藏的。对于大多数命令，可以通过使用`--verbose`或`--quiet`选项（或相应的简写，通常是`-v`或`-q`）来反转冗长性。`wget`就是一个很好的例子：这个命令用于从互联网上获取文件。默认情况下，它会输出大量关于连接、主机名解析、下载进度和下载目的地的信息。然而，很多时候，所有这些东西都不是很有趣！在这种情况下，我们使用`wget`的`--quiet`选项，因为对于这种情况来说，这是命令的**适当冗长性**。
- en: When shell scripting, always consider the verbosity of the commands you are
    using. If it is not enough, check the man page for a way to increase the verbosity.
    If it is too much, check that same man page for a quieter option. Most commands
    we have encountered have either or both options present, sometimes in different
    levels (`-q` and `-qq` for even quieter operation!).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写shell脚本时，始终考虑所使用命令的冗长性。如果不够，查看man页面以找到增加冗长性的方法。如果太多，同样查看man页面以找到更安静的选项。我们遇到的大多数命令都有一个或两个选项，有时在不同的级别（`-q`和`-qq`甚至更安静的操作！）。
- en: Keep It Simple, Stupid (KISS)
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持简单，愚蠢（KISS）
- en: 'The KISS principle is a great way to approach shell scripting. While it might
    come across as a bit harsh, the spirit in which it is given is important: it should
    only be considered great advice. Further advice is given in the *Zen of Python*,
    the design principles on which Python rests:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: KISS原则是处理shell脚本的一个很好的方法。虽然它可能显得有点严厉，但给出它的精神是重要的：它应该被视为很好的建议。*Python之禅*中还给出了更多的建议，这是Python的设计原则：
- en: Simple is better than complex
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单胜于复杂
- en: Complex is better than complicated
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂比复杂好
- en: Readability counts
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读性很重要
- en: There are about 17 more aspects in the *Zen of Python*, but these three are
    the most relevant for Bash scripting as well. The last one, '*Readability counts'*,
    should be obvious by now. However, the first two, '*Simple is better than complex'*
    and '*Complex is better than complicated'* are closely related to the KISS principle.
    Keeping things simple is a great goal, but if that is not possible, a complex
    solution is always better than a complicated one (no one likes complicated scripts!).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python之禅*中还有大约17个方面，但这三个对于Bash脚本编写也是最相关的。最后一个，''*可读性很重要''*，现在应该是显而易见的。然而，前两个，''*简单胜于复杂''*和''*复杂胜于复杂''*与KISS原则密切相关。保持简单是一个很好的目标，但如果不可能，复杂的解决方案总是比复杂的解决方案更好（没有人喜欢复杂的脚本！）。'
- en: 'There are a few things you can keep in mind when writing scripts:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本时，有一些事情你可以记住：
- en: 'If the solution you''re cooking up seems to get very complicated, do either
    of the following things:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在构思的解决方案似乎变得非常复杂，请做以下任一事情：
- en: Research your problem; perhaps there is another tool you can use instead of
    what you are using now.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究你的问题；也许有另一个工具可以代替你现在使用的工具。
- en: See whether you can split things into discrete steps, so it gets more complex
    but less complicated.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看是否可以将事情分成离散的步骤，这样它会变得更复杂但不那么复杂。
- en: Ask yourself if you need everything on a single line, or if it is perhaps possible
    to split the command over multiple lines to increase readability. When using pipes
    or other forms of redirection, as explained in greater detail in [Chapter 12](15141e02-be0c-4709-90f4-a172809217c4.xhtml),
    *Using Pipes and Redirection in Scripts*, this becomes something to keep in mind.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问问自己是否需要一行代码完成所有操作，或者是否可能将命令拆分成多行以增加可读性。在使用管道或其他形式的重定向时，如[第12章](15141e02-be0c-4709-90f4-a172809217c4.xhtml)中更详细地解释的那样，*在脚本中使用管道和重定向*，这是需要牢记的事情。
- en: If it works, it's *probably* not a bad solution. However, make sure that the
    solution is not *too* simple, since edge cases might cause trouble later on.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它起作用，那*可能*不是一个坏解决方案。但是，请确保解决方案不要*太*简单，因为边缘情况可能会在以后造成麻烦。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We started this chapter off by creating and running our very first shell script.
    As is almost mandatory when learning a new software language, we printed Hello
    World! onto our Terminal. Continuing, we explained the shebang: the first line
    of a script, it is an instruction to the Linux system about the interpreter it
    should use when running the script. For a Bash script, the convention is to have
    the file name end in .sh, with a shebang of #!/bin/bash.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建和运行我们的第一个shell脚本开始了这一章。学习一门新的软件语言时，几乎是强制性的，我们在终端上打印了Hello World！接着，我们解释了shebang：脚本的第一行，它是对Linux系统的一条指令，告诉它在运行脚本时应该使用哪个解释器。对于Bash脚本，约定是文件名以.sh结尾，带有`#!/bin/bash`的shebang。
- en: 'We explained that there are multiple ways in which we can run a script. We
    can start with the interpreter and pass the script name as the argument (for example:
    `bash hello-world.sh`). In this case, the shebang is not needed because we''re
    specifying the interpreter on the command line. However, normally, we run the
    file by setting the executable permission and calling it directly; in this case,
    the shebang is used to determine which interpreter to use. Because you cannot
    be sure about how a user will run your script, including a shebang should be considered
    mandatory.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了可以运行脚本的多种方式。我们可以从解释器开始，并将脚本名称作为参数传递（例如：`bash hello-world.sh`）。在这种情况下，shebang是不需要的，因为我们在命令行上指定了解释器。然而，通常情况下，我们通过设置可执行权限并直接调用文件来运行脚本；在这种情况下，shebang用于确定使用哪个解释器。因为你无法确定用户将如何运行你的脚本，包含shebang应该被视为强制性的。
- en: To increase the quality of our scripts, we described how to increase the readability
    of our shell scripts. We explained how and when to use comments in our scripts,
    and how we can use comments to create a script header that we can easily view
    by using the `head` command. The `tail` command, which is closely related to `head`,
    was briefly introduced. Besides comments, we also explained the concept of **verbosity**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高我们脚本的质量，我们描述了如何提高我们shell脚本的可读性。我们解释了何时以及如何在我们的脚本中使用注释，以及如何使用注释创建一个我们可以通过使用`head`命令轻松查看的脚本头。我们还简要介绍了与`head`密切相关的`tail`命令。除了注释，我们还解释了**冗长性**的概念。
- en: 'Verbosity can be found in multiple levels: verbosity in comments, verbosity
    in commands, and verbosity in command output. We argued that using long options
    for commands in scripts is almost always a better idea than shorthand, as it increases
    readability and can prevent the need for extra comments, even though we established
    that too many comments are almost always better than no comments.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 冗长性可以在多个级别找到：注释的冗长性，命令的冗长性和命令输出的冗长性。我们认为，在脚本中使用命令的长选项几乎总是比使用简写更好的主意，因为它增加了可读性，并且可以防止需要额外的注释，尽管我们已经确定，太多的注释几乎总是比没有注释更好。
- en: We ended the chapter with a short description of the KISS principle, which we
    linked to some design principles in Python. The reader should realize that, if
    there is a simple solution to a problem, it will most often be the best one. If
    a simple solution isn't an option, a complex solution should be preferred over
    a complicated one.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以简要描述KISS原则结束了本章，我们将其与Python中的一些设计原则联系起来。读者应该意识到，如果有一个简单的解决方案，它往往是最好的。如果简单的解决方案不可行，应优先选择复杂的解决方案而不是复杂的解决方案。
- en: 'The following commands were introduced in this chapter: `head`, `tail`, and `wget`.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了以下命令：`head`，`tail`和`wget`。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What do we, by convention, do as the first thing when we learn a new programming
    or scripting language?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照惯例，当我们学习一门新的编程或脚本语言时，我们首先要做什么？
- en: What is the shebang for Bash?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bash的shebang是什么？
- en: Why is the shebang needed?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要shebang？
- en: In what three ways can we run a script?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以以哪三种方式运行脚本？
- en: Why do we place such emphasis on readability when creating shell scripts?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们在创建shell脚本时要如此强调可读性？
- en: Why do we use comments?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们使用注释？
- en: Why do we recommend including a script header for all shell scripts you write?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们建议为您编写的所有shell脚本包括脚本头？
- en: Which three types of verbosity have we discussed?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们讨论了哪三种冗长性类型？
- en: What is the KISS principle?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KISS原则是什么？
- en: Further reading
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources might be interesting if you''d like to go deeper into
    the subjects of this chapter:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更深入地了解本章主题，以下资源可能会有趣：
- en: '**Hello World (long tutorial)**: [https://bash.cyberciti.biz/guide/Hello,_World!_Tutorial](https://bash.cyberciti.biz/guide/Hello,_World!_Tutorial)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你好，世界（长教程）**：[https://bash.cyberciti.biz/guide/Hello,_World!_Tutorial](https://bash.cyberciti.biz/guide/Hello,_World!_Tutorial)'
- en: '**Bash coding style guide**: [https://bluepenguinlist.com/2016/11/04/bash-scripting-tutorial/](https://bluepenguinlist.com/2016/11/04/bash-scripting-tutorial/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bash编码风格指南**：[https://bluepenguinlist.com/2016/11/04/bash-scripting-tutorial/](https://bluepenguinlist.com/2016/11/04/bash-scripting-tutorial/)'
- en: '**KISS**: [https://people.apache.org/%7Efhanik/kiss.html](https://people.apache.org/%7Efhanik/kiss.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KISS**：[https://people.apache.org/%7Efhanik/kiss.html](https://people.apache.org/%7Efhanik/kiss.html)'
