["```\nbash script.sh argument1 argument2 ...\n```", "```\nreader@ubuntu:~/scripts/chapter_14$ find\n.\n./reverser-crontab\n./wall.txt\n./base-crontab\n./date-redirection-crontab\n```", "```\nreader@ubuntu:~/scripts/chapter_14$ find ../chapter_10\n../chapter_10\n../chapter_10/error.txt\n../chapter_10/grep-file.txt\n../chapter_10/search.txt\n../chapter_10/character-class.txt\n../chapter_10/grep-then-else.sh\n```", "```\nreader@ubuntu:/$ find /boot/ -type d\n/boot/\n/boot/grub\n/boot/grub/i386-pc\n/boot/grub/fonts\n/boot/grub/locale\n```", "```\nreader@ubuntu:/$ find -type d /boot/\nfind: paths must precede expression: '/boot/'\nfind: possible unquoted pattern after predicate '-type'?\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ vim single-flag.sh\nreader@ubuntu:~/scripts/chapter_15$ cat !$\ncat single-flag.sh\n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-08\n# Description: Shows the basic getopts syntax.\n# Usage: ./single-flag.sh [flags]\n#####################################\n\n# Parse the flags in a while loop.\n# After the last flag, getopts returns false which ends the loop.\noptstring=\":v\"\nwhile getopts ${optstring} options; do\n  case ${options} in\n    v)\n      echo \"-v was found!\"\n      ;;\n    ?)\n      echo \"Invalid option: -${OPTARG}.\"\n      exit 1\n      ;; \n  esac\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh # No flag, do nothing.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -p \nInvalid option: -p. # Wrong flag, print an error.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -v \n-v was found! # Correct flag, print the message.\n```", "```\n# Parse the flags in a while loop.\n# After the last flag, getopts returns false which ends the loop.\noptstring=\":v\"\nwhile getopts ${optstring} options; do\n```", "```\ngetopts optstring name [arg]\n```", "```\n  case ${options} in\n    v)\n      echo \"-v was found!\"\n      ;;\n    ?)\n      echo \"Invalid option: -${OPTARG}.\"\n      exit 1\n      ;;\n  esac\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ vim hey.sh \nreader@ubuntu:~/scripts/chapter_15$ cat hey.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-14\n# Description: Getopts with multiple flags.\n# Usage: ./hey.sh [flags]\n#####################################\n\n# Abstract the help as a function, so it does not clutter our script.\nprint_help() {\n  echo \"Usage: $0 [flags]\"\n  echo \"Flags:\"\n  echo \"-h for help.\"\n  echo \"-b for male greeting.\"\n  echo \"-g for female greeting.\"\n}\n\n# Parse the flags.\noptstring=\":bgh\"\nwhile getopts ${optstring} options; do\n  case ${options} in\n    b)\n      gender=\"boy\"\n      ;;\n    g)\n      gender=\"girl\"\n      ;;\n    h)\n      print_help\n      exit 0 # Stop script, but consider it a success.\n      ;;\n    ?)\n      echo \"Invalid option: -${OPTARG}.\"\n      exit 1\n      ;; \n  esac\ndone\n\n# If $gender is n (nonzero), print specific greeting.\n# Otherwise, print a neutral greeting.\nif [[ -n ${gender} ]]; then\n  echo \"Hey ${gender}!\"\nelse\n  echo \"Hey there!\"\nfi\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -h\nUsage: hey.sh [flags]\nFlags:\n-h for help.\n-b for male greeting.\n-g for female greeting.\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh\nHey there!\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -b\nHey boy!\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -g\nHey girl!\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -h -b\nUsage: hey.sh [flags]\nFlags:\n-h for help.\n-b for male greeting.\n-g for female greeting.\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -b -h\nUsage: hey.sh [flags]\nFlags:\n-h for help.\n-b for male greeting.\n-g for female greeting.\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -b -h -g\nUsage: hey.sh [flags]\nFlags:\n-h for help.\n-b for male greeting.\n-g for female greeting.\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -g -b\nHey boy!\nreader@ubuntu:~/scripts/chapter_15$ bash hey.sh -b -g\nHey girl!\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash -x hey.sh -b -g\n+ optstring=:bgh\n+ getopts :bgh options\n+ case ${options} in\n+ gender=boy\n+ getopts :bgh options\n+ case ${options} in\n+ gender=girl\n+ getopts :bgh options\n+ [[ -n girl ]]\n+ echo 'Hey girl!'\nHey girl!\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash -x hey.sh -bgh\n+ optstring=:bgh\n+ getopts :bgh options\n+ case ${options} in\n+ gender=boy\n+ getopts :bgh options\n+ case ${options} in\n+ gender=girl\n+ getopts :bgh options\n+ case ${options} in\n+ print_help\n<SNIPPED>\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ vim single-flag.sh \nreader@ubuntu:~/scripts/chapter_15$ cat single-flag.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.1.0\n# Date: 2018-12-14\n# Description: Shows the basic getopts syntax.\n# Usage: ./single-flag.sh [flags]\n#####################################\n\n# Parse the flags in a while loop.\n# After the last flag, getopts returns false which ends the loop.\noptstring=\":v:\"\nwhile getopts ${optstring} options; do\n  case ${options} in\n    v)\n      echo \"-v was found!\"\n      echo \"-v option argument is: ${OPTARG}.\"\n      ;;\n    ?)\n      echo \"Invalid option: -${OPTARG}.\"\n      exit 1\n      ;; \n  esac\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh \nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -v Hello\n-v was found!\n-v option argument is: Hello.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -vHello\n-v was found!\n-v option argument is: Hello.\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -v\nInvalid option: -v.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -v ''\n-v was found!\n-v option argument is: \n```", "```\nreader@ubuntu:~/scripts/chapter_15$ vim single-flag.sh \nreader@ubuntu:~/scripts/chapter_15$ cat single-flag.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.2.0\n# Date: 2018-12-14\n# Description: Shows the basic getopts syntax.\n# Usage: ./single-flag.sh [flags]\n#####################################\n\n# Parse the flags in a while loop.\n# After the last flag, getopts returns false which ends the loop.\noptstring=\":v:\"\nwhile getopts ${optstring} options; do\n  case ${options} in\n    v)\n      echo \"-v was found!\"\n      echo \"-v option argument is: ${OPTARG}.\"\n      ;;\n :)\n echo \"-${OPTARG} requires an argument.\"\n exit 1\n ;;\n    ?)\n      echo \"Invalid option: -${OPTARG}.\"\n      exit 1\n      ;; \n  esac\ndone\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -v\n-v requires an argument.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -v Hi\n-v was found!\n-v option argument is: Hi.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -x Hi\nInvalid option: -x.\nreader@ubuntu:~/scripts/chapter_15$ bash single-flag.sh -x -v Hi\nInvalid option: -x.\n```", "```\nreader@ubuntu:~/scripts/chapter_15$ vim file-tool.sh \nreader@ubuntu:~/scripts/chapter_15$ cat file-tool.sh \n#!/bin/bash\n\n#####################################\n# Author: Sebastiaan Tammer\n# Version: v1.0.0\n# Date: 2018-12-14\n# Description: A tool which allows us to manipulate files.\n# Usage: ./file-tool.sh [flags] <file-name>\n#####################################\n\nprint_help() {\n  echo \"Usage: $0 [flags] <file-name>\"\n  echo \"Flags:\"\n  echo \"No flags for file listing.\"\n  echo \"-d to delete the file.\"\n  echo \"-e to empty the file.\"\n  echo \"-m <new-file-name> to rename the file.\"\n  echo \"-h for help.\"\n}\n\ncommand=\"ls -l\" # Default command, can be overridden.\n\noptstring=\":dem:h\" # The m option contains an option argument.\nwhile getopts ${optstring} options; do\n  case ${options} in\n    d)\n      command=\"rm -f\";;\n    e)\n      command=\"cp /dev/null\";;\n    m)\n      new_filename=${OPTARG}; command=\"mv\";;\n    h)\n      print_help; exit 0;;\n    :)\n      echo \"-${OPTARG} requires an argument.\"; exit 1;;\n    ?)\n      echo \"Invalid option: -${OPTARG}.\" exit 1;; \n  esac\ndone\n\n# Remove the parsed flags from the arguments array with shift.\nshift $(( ${OPTIND} - 1 )) # -1 so the file-name is not shifted away.\n\nfilename=$1\n\n# Make sure the user supplied a writable file to manipulate.\nif [[ $# -ne 1 || ! -w ${filename} ]]; then\n  echo \"Supply a writable file to manipulate! Exiting script.\"\n  exit 1 \nfi\n\n# Everything should be fine, execute the operation.\nif [[ -n ${new_filename} ]]; then # Only set for -m.\n  ${command} ${filename} $(dirname ${filename})/${new_filename}\nelse # Everything besides -m.\n  ${command} ${filename}\nfi\n```", "```\noptstring=\":dem:h\" # The m option contains an option argument.\n```", "```\nshift $(( ${OPTIND} - 1 )) # -1 so the file-name is not shifted away.\n```"]