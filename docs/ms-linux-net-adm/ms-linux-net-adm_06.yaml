- en: Chapter 6. Configuring Network Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。配置网络服务
- en: So far, we've configured our nodes and allowed them to actually talk to one
    another. We can access our nodes to administer them remotely, transfer files between
    them, monitor their resources, and perform basic networking. In this chapter,
    we'll design the IP address scheme we'll use for our network, as well as set up
    the required services for putting the plan into action. This will include a discussion
    on setting up and configuring **Dynamic Host Control Protocol** (**DHCP**), **Domain
    Name Service**, as well as **Network Time Protocol** (**NTP**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经配置了我们的节点，并允许它们实际上相互通信。我们可以访问我们的节点以远程管理它们，在它们之间传输文件，监视它们的资源，并执行基本的网络操作。在本章中，我们将设计我们将用于网络的IP地址方案，并设置实施计划所需的服务。这将包括讨论设置和配置动态主机控制协议（DHCP）、域名服务以及网络时间协议（NTP）。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Planning your IP address layout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划您的IP地址布局
- en: Installing and configuring a DHCP server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置DHCP服务器
- en: Installing and configuring a DNS server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置DNS服务器
- en: Setting up an internal NTP server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置内部NTP服务器
- en: Planning your IP address layout
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划您的IP地址布局
- en: Taking the time to come up with a great plan before implementing anything on
    your network is a great idea, but your IP address scheme is especially important.
    It's all too easy to accept defaults and get everyone up and running quickly.
    For some small companies, the default IP address layout that ships with your router
    (or whichever device handles DHCP by default) may suffice. But further down the
    road, it needs to change as companies grow. Being prepared for potential growth
    is critical. Implementing an IP address scheme is easy, but changing this scheme
    on a network that's already been rolled out is a great challenge. Always take
    the time to plan accordingly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上实施任何计划之前花时间制定一个很好的计划是一个好主意，但是您的IP地址方案尤其重要。很容易接受默认设置并迅速让所有人上线。对于一些小公司来说，路由器（或默认情况下处理DHCP的任何设备）提供的默认IP地址布局可能足够。但是随着公司的发展，这种情况需要改变。为潜在的增长做好准备至关重要。实施IP地址方案很容易，但是在已经推出的网络上更改此方案是一个巨大的挑战。一定要花时间进行适当的规划。
- en: The first consideration for determining your IP address scheme is what types
    of machines you'll need to provide addresses to. Often, you'll have servers, workstations,
    and printers to deal with. But nowadays, we also have other devices on our network
    such as IP phones, company-issued phones, conference systems, tablets, and more.
    When you start to add all these devices together, a typical 24-bit network with
    254 usable addresses doesn't seem to be all that large, even for a small company.
    Worse, some devices (such as laptops) have multiple network interface cards. If
    you put all that together, you'll find that those 254 addresses can get used up
    really quickly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 确定IP地址方案的首要考虑因素是您需要为哪些类型的设备提供地址。通常，您需要处理服务器、工作站和打印机。但是现在，我们的网络上还有其他设备，如IP电话、公司发放的电话、会议系统、平板电脑等。当您开始将所有这些设备放在一起时，一个典型的具有254个可用地址的24位网络似乎并不那么大，即使对于一个小公司来说也是如此。更糟糕的是，一些设备（如笔记本电脑）有多个网络接口卡。如果将所有这些放在一起，您会发现这254个地址很快就会被用完。
- en: Having multiple subnets would certainly help. With subnetting, you can create
    individual networks for each type of service, each with their own set of IP addresses.
    You can, for example, have your servers on one subnet, printers on another, and
    end-user workstations on their own. Instead of having to split a single 24-bit
    subnet between these three types of devices, you can spread them out over several
    networks. We will cover subnetting in more detail in [Chapter 8](ch08.html "Chapter 8. Understanding
    Advanced Networking Concepts"), *Understanding Advanced Networking Concepts*,
    but for now segregating your network is almost always a good idea, for reasons
    even beyond IP addressing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有多个子网肯定会有所帮助。通过子网划分，您可以为每种类型的服务创建单独的网络，每个网络都有自己的一组IP地址。例如，您可以将服务器放在一个子网上，打印机放在另一个子网上，最终用户工作站放在它们自己的子网上。您可以将一个24位子网分成几个网络，而不是将其在这三种设备类型之间进行划分。我们将在[第8章](ch08.html
    "第8章。理解高级网络概念")中更详细地介绍子网划分，但是现在，隔离您的网络几乎总是一个好主意，原因甚至超出了IP地址的范围。
- en: Another factor to take into consideration is limiting your **broadcast domain**.
    A single 24-bit network (which is often the default on network devices out of
    the box) is a single broadcast domain. In a nutshell, one device can talk to another
    device on your network without being routed first and share the same broadcast
    domain. If you only have a few devices, this doesn't really matter (unless one
    device handles a ridiculously large amount of traffic). But in most networks,
    breaking up your broadcast domain enhances performance. If you have a router separating
    your subnets, you are effectively breaking up your broadcast domain. Thus, it
    would be more difficult for a single node to saturate your network if it is on
    its own subnet. However, no solution is perfect and individual broadcast domains
    can become saturated.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的因素是限制您的广播域。一个24位网络（通常是网络设备默认的）是一个广播域。简而言之，一个设备可以在您的网络上直接与另一个设备通信，而无需先进行路由，并共享相同的广播域。如果您只有几台设备，这并不重要（除非一个设备处理了大量的流量）。但是在大多数网络中，分割广播域可以提高性能。如果您有一个路由器分隔您的子网，那么实际上就是在分割您的广播域。因此，如果一个节点位于自己的子网上，它更难以使您的网络饱和。然而，没有完美的解决方案，单独的广播域也可能会变得饱和。
- en: 'One useful tool that you can use when planning your IP scheme is the `ipcalc`
    utility. The `ipcalc` utility can help you understand how many IP addresses you
    will be able to have available with each scheme. This utility is available via
    `apt-get` in Debian, and it doesn''t need any extra repositories. While there
    is an `ipcalc` command built into CentOS, it''s not the same thing and it''s not
    useful. If possible, I would stick to the Debian version. To use it, simply execute
    `ipcalc` along with a network you are thinking about using. For example, you could
    run the following as a test:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划IP方案时，一个有用的工具是`ipcalc`实用程序。`ipcalc`实用程序可以帮助您了解每个方案可用的IP地址数量。这个实用程序在Debian中通过`apt-get`可用，不需要任何额外的存储库。虽然CentOS中内置了`ipcalc`命令，但它不是同一回事，也没有用。如果可能的话，我建议使用Debian版本。要使用它，只需执行`ipcalc`以及您考虑使用的网络。例如，您可以运行以下内容进行测试：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Planning your IP address layout](img/B03919_06_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: 规划您的IP地址布局
- en: ipcalc showing subnet information for a 10.10.9.60/22 internal network
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ipcalc显示10.10.9.60/22内部网络的子网信息
- en: In the previous example, we can see that if we chose a `10.10.96.0/22` scheme,
    we would have `1022` allowable IP addresses, a subnet mask of `255.255.252.0`
    and this would be a class A private network. While you'll learn more about subnetting
    later in this book, the `ipcalc` utility will be handy for you to play around
    with and determine how specific IP layouts would look.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以看到，如果我们选择了`10.10.96.0/22`方案，我们将有`1022`个可允许的IP地址，子网掩码为`255.255.252.0`，这将是一个A类私有网络。虽然您将在本书的后面学到更多关于子网划分的知识，但`ipcalc`实用程序对您来说将是一个方便的工具，可以让您玩弄并确定特定IP布局的外观。
- en: Another topic that's worth bringing up in IP addressing is IPv4 versus IPv6\.
    For quite a long time, IPv4 has been sufficient for everyone's needs. Unfortunately,
    the time has come where IPv4 addresses on the public Internet are starting to
    run out (and in many situations, already has). The benefit of IPv6 is that there
    are so many IP addresses available; it's completely inconceivable that we would
    ever run out again. There is also a security benefit to IPv6, since the address
    space is so large that targets are abstracted (in essence, security through obscurity).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得讨论的IP地址问题是IPv4与IPv6。很长一段时间以来，IPv4已经足够满足每个人的需求。不幸的是，现在公共互联网上的IPv4地址开始耗尽（在许多情况下已经耗尽）。IPv6的好处在于有如此多的IP地址可用；我们再也不会用尽IP地址是完全不可想象的。IPv6还具有安全性的好处，因为地址空间如此之大，目标被抽象化（本质上是通过混淆来保障安全）。
- en: With this in mind, you might be tempted to roll-out IPv6 addresses over IPv4
    within your network. However, my suggestion is unless you have a very good reason
    to do so, don't bother. The depletion of IPv4 addresses only affects the public
    Internet, not your internal network. While you can certainly roll-out IPv6 internally,
    there's no benefit to doing so. Given that IPv4 has over 4 billion addresses available,
    you would need quite a few devices in order to justify IPv6\. On the other hand,
    IPv6 is certainly useful (and will eventually be required) for telecoms. It's
    also useful for those of you who are studying Cisco exams, as understanding of
    this topic is required. But for the purposes of this book and setting up Linux
    networks, IPv6 doesn't justify the administration overhead.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，您可能会想在网络内部使用IPv6地址而不是IPv4。然而，我的建议是，除非您有非常充分的理由这样做，否则不要费心。IPv4地址的枯竭只影响公共互联网，而不影响您的内部网络。虽然您当然可以在内部部署IPv6，但这样做没有任何好处。鉴于IPv4有超过40亿个可用地址，您需要相当多的设备才能证明IPv6的必要性。另一方面，IPv6对电信业务确实有用（并且最终将是必需的）。对于那些正在学习思科考试的人来说，理解这个主题是必需的。但是对于本书的目的和设置Linux网络来说，IPv6并不能证明管理开销。
- en: In summary, it's important to plan ahead. IPv4 is good enough for our needs
    and splitting our network into subnets is a good idea (even if you think your
    network will never surpass 254 addresses). Plan big; even in the worst-case scenario,
    you may never use all the IP addresses you configured. But even if you don't plan
    on using a large number of IP addresses, having them available in case you wish
    to grow your network is a good idea and much easier to implement later. In my
    experience, I've actually had the task of reconfiguring a company network that
    wasn't designed for growth. While it was definitely a learning experience, it
    wasn't an enjoyable one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，提前规划是很重要的。IPv4对我们的需求已经足够了，将我们的网络划分为子网是一个好主意（即使您认为您的网络永远不会超过254个地址）。规划得越大越好；即使在最坏的情况下，您可能永远不会使用所有配置的IP地址。但即使您不打算使用大量IP地址，将它们保留以备将来扩展网络是一个好主意，而且以后实施起来更容易。根据我的经验，我曾经有过重新配置公司网络的任务，而该网络并不是为了增长而设计的。虽然这绝对是一次学习经历，但并不是一次愉快的经历。
- en: Installing and configuring a DHCP server
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置DHCP服务器
- en: So far in this chapter, we talked about creating a layout for your network.
    In this section, we'll put that plan in action. Here, we'll set up a DHCP server
    on either a Debian or CentOS machine, and configure it to serve IPv4 addresses
    to our network. So, let's get started!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们讨论了为您的网络创建布局。在本节中，我们将付诸行动。在这里，我们将在Debian或CentOS机器上设置DHCP服务器，并将其配置为为我们的网络提供IPv4地址。所以，让我们开始吧！
- en: First, decide on which distribution will run your DHCP server. It doesn't matter
    if you choose Debian, CentOS, or a derivative. The configuration is the same on
    each, with the main difference being the name of the package that you'll need
    to install and the daemon to start up. With Debian, you'll install the `isc-dhcp-server`
    package, and you'll install `dhcp` for CentOS. Debian will enable the DHCP daemon
    (`isc-dhcp-server`) for you, but it won't start up because we haven't configured
    it yet. CentOS will not attempt to start or enable its DHCP daemon (`dhcpd`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，决定哪个发行版将运行您的DHCP服务器。选择Debian、CentOS或其衍生版本都无所谓。在每个版本上，配置都是相同的，主要区别在于您需要安装的软件包的名称和要启动的守护程序。在Debian上，您将安装`isc-dhcp-server`软件包，而在CentOS上，您将安装`dhcp`。Debian将为您启用DHCP守护程序（`isc-dhcp-server`），但它不会启动，因为我们还没有配置它。CentOS不会尝试启动或启用其DHCP守护程序（`dhcpd`）。
- en: For both Debian and CentOS, the configuration file we'll need to edit is located
    at `/etc/dhcp/dhcpd.conf`. In order to set up our DHCP server, we'll need to edit
    this file and then start or restart the daemon. Go ahead and open this file with
    your favorite text editor. If you installed your DHCP server on Debian, you'll
    notice you're provided with a default `/etc/dhcp/dhcpd.conf` file that contains
    a fair amount of example configuration. CentOS, on the other hand, pretty much
    gives you a blank file to work with. For our purposes, we'll create some configuration
    from scratch. You can either remove or back up the default configuration file
    in the case of Debian.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Debian和CentOS，我们需要编辑的配置文件位于`/etc/dhcp/dhcpd.conf`。为了设置我们的DHCP服务器，我们需要编辑这个文件，然后启动或重新启动守护程序。请使用您喜欢的文本编辑器打开这个文件。如果您在Debian上安装了DHCP服务器，您会注意到提供了一个包含相当多示例配置的默认`/etc/dhcp/dhcpd.conf`文件。另一方面，CentOS基本上给了您一个空白的文件来使用。为了我们的目的，我们将从头开始创建一些配置。在Debian的情况下，您可以删除或备份默认配置文件。
- en: What follows is an example configuration `/etc/dhcp/dhcpd.conf` file for DHCP.
    In this example, we're using the same network as identified earlier while demonstrating
    the `ipcalc` utility (`10.10.96.0/22`). This network gives us several subnets
    to use, but you don't have to go ahead with this scheme; feel free to adjust accordingly
    to fit your environment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个DHCP的示例配置文件`/etc/dhcp/dhcpd.conf`。在这个示例中，我们使用了之前确定的相同网络，并演示了`ipcalc`实用程序（`10.10.96.0/22`）。这个网络给了我们几个子网可用，但您不必按照这个方案进行，可以根据需要进行调整以适应您的环境。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, let's go through this configuration line by line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们逐行通过这个配置。
- en: 'First, we have the following two lines:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有以下两行：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we're identifying how long we would like a DHCP lease to last for. In
    practice, when a node requests an IP address, its client will be given a lease
    along with the IP address. This means that the IP address is only valid for a
    particular period of time. Here, we're setting a lease time of `86400`, which
    means our lease time is one day since this is referenced in seconds. We have this
    number listed twice, in the default and maximum lease times. The `default-lease-time`
    is given to any client if it doesn't specify a particular amount of time it is
    requesting the hold onto the IP address for. The `max-lease-time` means that if
    the client requests to hold onto the IP address for longer than this period, it
    won't be allowed to do so. We're basically setting the default and the maximum
    lease time to the same number. If we wanted to, we could have also included `min-lease-time`
    to enforce a minimum lease time in case a client asks for less.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确定了DHCP租约的持续时间。在实践中，当一个节点请求一个IP地址时，它的客户端将获得一个租约以及IP地址。这意味着IP地址只在特定的时间段内有效。在这里，我们设置了一个持续时间为`86400`，这意味着我们的租约时间是一天，因为这是以秒为单位的。我们两次列出了这个数字，分别是默认和最大租约时间。如果客户端没有指定请求保留IP地址的时间，`default-lease-time`将提供给任何客户端。`max-lease-time`意味着如果客户端请求保留IP地址的时间超过这段时间，将不被允许这样做。我们基本上将默认和最大租约时间设置为相同的数字。如果需要，我们还可以包括`min-lease-time`来强制客户端请求更短的最小租约时间。
- en: 'Consider the following two lines:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下两行：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With this section, we're setting the subnet mask that will be given to clients
    as well as the broadcast address. As you probably already know, the subnet mask
    identifies the network that each connecting node will be a part of. When clients
    check their IP info after being provided an address, the subnet mask we identify
    will be shown. The broadcast address is an address on which all nodes within this
    subnet would be able to receive packets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一部分，我们正在设置子网掩码，该子网掩码将被分配给客户端，以及广播地址。正如您可能已经知道的那样，子网掩码标识每个连接节点将成为其中一部分的网络。当客户端在被提供地址后检查其IP信息时，我们标识的子网掩码将显示出来。广播地址是一个所有节点都能够接收数据包的地址。
- en: 'Consider the following two lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下两行：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we're appending the domain name of `local.lan` to the hostnames of each
    node that connect to our DHCP server. This step isn't required by any means, but
    can be useful if normalizing domain names within your network. We also include
    `authoritative` in our configuration to establish that our DHCP server is the
    primary one for this subnet.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`local.lan`的域名附加到连接到我们的DHCP服务器的每个节点的主机名上。这一步并不是必需的，但在规范化网络中的域名时可能会有用。我们还在我们的配置中包括`authoritative`，以确立我们的DHCP服务器是这个子网的主要服务器。
- en: 'Consider the following lines:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下行：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we have a very important block of code at the end. Here, we identify
    the network address for our subnet, its subnet mask, the range of IP addresses
    we''re issuing, the default gateway, and our DNS server. In this example, we''re
    starting our first DHCP-issued address at `10.10.99.100` and ending our pool at
    `10.10.99.254`. If you recall the output of `ipcalc` earlier, you''d notice that
    the first address in this subnet begins at `10.10.96.1`. Instead of starting our
    pool there, we''re starting our pool much later. For the sake of reference, we
    used the `10.10.96.0/22` network, which gives us the following subnets:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在结尾有一个非常重要的代码块。在这里，我们确定了我们子网的网络地址、子网掩码、我们正在分配的IP地址范围、默认网关和我们的DNS服务器。在这个示例中，我们从`10.10.99.100`开始分配我们的第一个DHCP地址，并在`10.10.99.254`结束我们的地址池。如果您回忆一下之前的`ipcalc`输出，您会注意到这个子网中的第一个地址从`10.10.96.1`开始。但我们并没有从那里开始我们的地址池，而是晚了很多。为了参考，我们使用了`10.10.96.0/22`网络，这给了我们以下子网：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we wanted to, we could set our DHCP range to begin at `10.10.96.1` and end
    at `10.10.99.254`. We would have 1,022 DHCP addresses in that case. However, the
    reason I didn't do that in my configuration is because the first three networks
    have been reserved for several purposes. I use the first (`10.10.96.0/22`) for
    servers, the next for DHCP reservations, and the third for network appliances.
    Since the first three subnets are outside the DHCP range, the DHCP server will
    never offer any of those addresses to clients, so I don't have to worry about
    a DHCP lease tackling a static address I may have set up. It's a very common practice
    to ensure that static IP addresses are outside the DHCP range.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们可以将DHCP范围设置为从`10.10.96.1`开始，到`10.10.99.254`结束。在这种情况下，我们将有1,022个DHCP地址。但是，我在我的配置中没有这样做的原因是，前三个网络已被保留用于几个目的。我使用第一个（`10.10.96.0/22`）用于服务器，下一个用于DHCP预留，第三个用于网络设备。由于前三个子网位于DHCP范围之外，DHCP服务器永远不会向客户端提供这些地址，因此我不必担心DHCP租约会处理我可能设置的静态地址。确保静态IP地址位于DHCP范围之外是一种非常常见的做法。
- en: 'To be fair, this configuration is fairly complicated, as I''m showing you how
    to use multiple subnets with DHCP rather than focusing on just one network. To
    simplify a bit, if we were setting up a default 24-bit network, our configuration
    would look like the following (if we were using a `10.10.10.0/24` network):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，这个配置相当复杂，因为我向您展示了如何在DHCP中使用多个子网，而不是专注于一个网络。为了简化一点，如果我们设置一个默认的24位网络，我们的配置将如下所示（如果我们使用`10.10.10.0/24`网络）：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this configuration, I'm setting the DHCP range to start at `10.10.10.10`
    and end at `10.10.10.254`. This gives me nine IP addresses (`10.10.10.1`—`10.10.10.9`)
    that will never be assigned, so I have room to set up a few static IP addresses.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个配置，我将DHCP范围设置为从`10.10.10.10`开始，到`10.10.10.254`结束。这给了我九个IP地址（`10.10.10.1`—`10.10.10.9`），永远不会被分配，所以我有空间设置一些静态IP地址。
- en: So, I mentioned *static IP addresses* a few times here. You probably already
    know what that means, but it's important to elaborate that static IP addresses
    are a great idea for servers. These are addresses that are reserved for certain
    servers or nodes, where you expect them to have the same IP address each time.
    This is probably a no-brainer if you've ever configured a network before. There's
    also the concept of a static lease that's important as well. A static lease is
    also known as a **reservation**. With a static lease, the IP address is still
    provided by the DHCP server, and the client still uses DHCP to request an address.
    The difference is that the client will receive the same address, each and every
    time it connects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我在这里几次提到了*静态IP地址*。你可能已经知道这是什么意思，但重要的是要详细说明静态IP地址对服务器来说是一个很好的主意。这些地址是为某些服务器或节点保留的，您希望它们每次都有相同的IP地址。如果您以前配置过网络，这可能是显而易见的。还有一个重要的静态租约的概念。静态租约也称为**预留**。使用静态租约，IP地址仍由DHCP服务器提供，客户端仍然使用DHCP请求地址。不同之处在于，客户端每次连接时都会收到相同的地址。
- en: 'Setting up static leases is very easy. Reservations can be placed at the end
    of your `/etc/dhcp/dhcpd.conf` file. Here''s an example to show what the syntax
    looks like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设置静态租约非常容易。预留可以放在您的`/etc/dhcp/dhcpd.conf`文件的末尾。以下是一个示例，展示了语法的样子：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we have a host named `bahamut` with a MAC address `28:B2:BD:05:1E:00`.
    The name is arbitrary; it has no actual meaning other than for us to remember
    which host the reservation is for. It doesn't have to match the hostname of the
    device that's requesting an IP. The two lines within the block of code simply
    mean that any time a network card connects to the DHCP server with a MAC address
    `28:B2:BD:05:1E:00`, it needs to be provided an IP address of `10.10.97.4`. We
    can add as many similar code blocks as we'd like for as many static leases we
    wish to assign.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个名为`bahamut`的主机，MAC地址为`28:B2:BD:05:1E:00`。这个名字是任意的；它除了让我们记住预留是为了哪个主机之外没有实际意义。它不必与请求IP的设备的主机名匹配。代码块中的两行只是表示每当网络卡连接到具有MAC地址`28:B2:BD:05:1E:00`的DHCP服务器时，它需要提供IP地址`10.10.97.4`。我们可以添加尽可能多的类似代码块，以便为我们希望分配的静态租约添加尽可能多的代码块。
- en: You might be wondering, when should you use a static IP and when should you
    use a static lease? In my opinion, use static leases whenever it makes sense and
    fits the design of your network. With static leases, you only need to check the
    `/etc/dhcp/dhcpd.conf` file whenever you'd like to see an overview of all your
    reservations. In addition, the host will always receive the same IP address, even
    if you reinstall the OS or boot it from a live install image. There's nothing
    you need to configure on the host itself for a static lease. Generally, static
    leases are easier to manage. Of course, your own preferences will supersede this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道，何时应该使用静态IP，何时应该使用静态租约？在我看来，只要有意义并符合您的网络设计，就可以使用静态租约。使用静态租约，您只需要在想要查看所有预留的概述时检查`/etc/dhcp/dhcpd.conf`文件。此外，即使您重新安装操作系统或从活动安装映像引导主机，主机也将始终收到相同的IP地址。对于静态租约，您无需在主机上进行任何配置。通常，静态租约更容易管理。当然，您自己的偏好将超越这一点。
- en: 'Finally, in order for our DHCP server to run properly, it must be started and
    configured to run at boot. Debian already took care of enabling the daemon, so
    you would just need to restart it for our configuration to take affect:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使我们的DHCP服务器正常运行，必须启动并配置为在启动时运行。Debian已经负责启用守护程序，因此您只需要重新启动它，以便我们的配置生效：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For CentOS, we need to enable and start the service manually:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CentOS，我们需要手动启用和启动服务：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, configuring a DHCP server on Linux is fairly easy and straightforward.
    Of course, there are advanced usage scenarios and a plethora of additional options.
    But for most purposes, a configuration such as the one outlined here should suffice.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，配置Linux上的DHCP服务器非常容易和直接。当然，还有高级用法场景和大量的附加选项。但是对于大多数情况来说，像这里概述的这样的配置应该足够了。
- en: Installing and configuring a DNS server
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置DNS服务器
- en: '**Domain Name System** (**DNS**) makes navigating networked resources much
    easier. Unless you have a very small network, it''s unlikely that you''ll remember
    which IP addresses belong to which machines. DNS helps by mapping names to IP
    addresses, so you can refer to computers by their hostname and DNS will do the
    work of translating that back to the IP address.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**域名系统**（**DNS**）使得浏览网络资源变得更加容易。除非你有一个非常小的网络，否则你不太可能记得哪些IP地址属于哪些机器。DNS通过将名称映射到IP地址来帮助你，这样你就可以通过主机名引用计算机，DNS将负责将其翻译回IP地址。'
- en: DNS is one of those things that virtually everyone with a network connected
    device uses all the time, regardless of whether or not the user realizes it. Computers,
    servers, smart phones, tablets, smart appliances, and more all utilize DNS. Whenever
    you look up a service on the Internet, such as a website or a remote resource,
    DNS translates the name of the resource to the IP address.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: DNS是几乎每个连接到网络的设备都在使用的东西，无论用户是否意识到。计算机、服务器、智能手机、平板电脑、智能家电等都在使用DNS。每当你在互联网上查找一个服务，比如一个网站或一个远程资源，DNS会将资源的名称翻译成IP地址。
- en: Though the idea of DNS and what it does for us may be common knowledge, it's
    one of those things that are easy to take for granted. DNS is one of those mythical
    things that works in the background and makes our lives much easier. Most of us
    use it, but very few of us actually understand how it works. Whenever you connect
    to an **Internet Service Provider** (**ISP**), you're typically assigned a DNS
    server or two that you will use for your connection. The cleverer users out there
    will often bypass the ISP assigned DNS servers, to third-party servers such as
    those used by Google or OpenDNS in an attempt to squeeze additional performance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管DNS的概念和它为我们做的事情可能是常识，但它是那些容易被认为理所当然的东西之一。DNS是那些在背后工作并让我们的生活变得更加容易的神秘事物之一。我们大多数人都在使用它，但很少有人真正理解它是如何工作的。每当你连接到一个**互联网服务提供商**（**ISP**）时，通常会分配给你一个或两个DNS服务器供你使用。一些聪明的用户通常会绕过ISP分配的DNS服务器，使用谷歌或OpenDNS等第三方服务器，以期望获得额外的性能。
- en: DNS can also prove useful within your internal network as well. Most companies
    with more than a handful of workstations will set up DNS, and rightfully so. It
    makes navigating your network a cinch. For example, it's easier to refer to your
    local color printer as `hp-color-01` than it would be to remember an IP address,
    such as `10.19.89.40`. In this case, adding the printer would be easy. Just have
    your operating system browse to it by name. Any resource on your network can be
    named and creating a consistent and predictable naming scheme for all your networked
    resources is a great idea. So, let's do exactly that.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: DNS在内部网络中也可以证明是有用的。大多数有超过一把工作站的公司都会设置DNS，这是理所当然的。它使得浏览你的网络变得轻而易举。例如，更容易将你的本地彩色打印机称为`hp-color-01`，而不是记住IP地址，比如`10.19.89.40`。在这种情况下，添加打印机将会很容易。只需让你的操作系统按名称浏览它。你网络上的任何资源都可以被命名，为所有网络资源创建一个一致和可预测的命名方案是一个好主意。所以，让我们做到这一点。
- en: As is typical, the naming of the required packages is a bit different on Debian-based
    distributions than CentOS. In Debian, the package you'll want to install is `bind9`.
    CentOS simply calls their `bind`. If you were wondering, **BIND** stands for **Berkeley
    Internet Name Domain** (named after where it was developed, namely the University
    of California at Berkeley). This is the most popular name server on the Internet,
    so you'll definitely want to familiarize yourself with it. While you're at it,
    I recommend installing `bind-utils` if you are running through this activity on
    a CentOS system. This gives us the `dig` command, which will be useful for our
    purposes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与CentOS相比，基于Debian的发行版所需软件包的命名通常有所不同。在Debian中，你需要安装的软件包是`bind9`。CentOS简单地称其为`bind`。如果你想知道的话，**BIND**代表**伯克利互联网名称域**（以它被开发的地方命名，即加州大学伯克利分校）。这是互联网上最流行的名称服务器，所以你肯定会想熟悉它。顺便说一句，如果你在CentOS系统上进行这个活动，我建议你安装`bind-utils`。这给了我们`dig`命令，对我们来说会很有用。
- en: 'The first step is to install the required package on your server, and then
    all you''ll need to do is start it and ensure that it''s enabled to run at startup.
    Debian already takes care of starting the daemon and enabling it for us. You can
    confirm this with the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在服务器上安装所需的软件包，然后你只需要启动它并确保它被启用以在启动时运行。Debian已经为我们启动了守护程序并启用了它。你可以用以下命令来确认：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'CentOS doesn''t configure the `bind` daemon to autostart, and it does not start
    it up for you. If CentOS is your distribution of choice, you''ll want to execute
    the following command to enable `bind` and start it up:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS不会自动启动`bind`守护程序，也不会为你启动它。如果你选择的是CentOS发行版，你需要执行以下命令来启用`bind`并启动它：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this done, you actually have a working DNS server. Of course, we didn't
    configure anything, so our DNS server is not actually doing much for us. But now
    that we have it installed, we can add records to it and build our configuration.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，你实际上拥有了一个工作的DNS服务器。当然，我们没有配置任何东西，所以我们的DNS服务器实际上并没有为我们做太多事情。但现在我们已经安装了它，我们可以向其中添加记录并构建我们的配置。
- en: First, let's take a look at the default configuration file. Debian stores the
    default configuration file for bind at `/etc/bind/named.conf`. CentOS stores theirs
    at `/etc/named.conf` (it doesn't have its own directory). Go ahead and take a
    gander at this file to get a feel for how the configuration works. We're going
    to use our own configuration file, so I recommend you to back up the default files
    and we'll install our own.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下默认配置文件。Debian将bind的默认配置文件存储在`/etc/bind/named.conf`中。CentOS将它们存储在`/etc/named.conf`中（它没有自己的目录）。去看看这个文件，了解一下配置是如何工作的。我们将使用我们自己的配置文件，所以我建议你备份默认文件，然后我们将安装我们自己的文件。
- en: 'First, let''s create a fresh `named.conf` file in our distribution''s default
    directory (`/etc/bind/named.conf` in Debian and `/etc/named.conf` in CentOS).
    Regardless of which distribution you''re using, we''ll make the file the same.
    If this file already has text in it, copy it to a backup or empty it, as the following
    two lines are the only text we need in this file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们发行版的默认目录中创建一个新的`named.conf`文件（在Debian中是`/etc/bind/named.conf`，在CentOS中是`/etc/named.conf`）。无论你使用哪个发行版，我们都会使文件相同。如果这个文件已经有文本了，把它复制到一个备份中或清空它，因为接下来的两行是我们在这个文件中需要的唯一文本：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we''re going to include two additional files (which we will create, very
    soon). As you can see, our `named.conf` file is simply calling these files and
    contains no other configuration. This way, we can create our own standard place
    to find these files. `/etc/bind` is already the default location in Debian, but
    by calling out this directory in CentOS, we can force it to look for the configuration
    in the same place. But with CentOS, you''ll need to create the `/etc/bind` directory.
    The command is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将包括两个额外的文件（我们很快将创建）。正如你所看到的，我们的`named.conf`文件只是调用这些文件，不包含其他配置。这样，我们可以创建我们自己的标准位置来找到这些文件。`/etc/bind`已经是Debian中的默认位置，但通过在CentOS中调用这个目录，我们可以强制它在同一个地方查找配置。但是在CentOS中，你需要创建`/etc/bind`目录。命令如下：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, let''s create our `/etc/bind/named.conf.options` file and customize it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的`/etc/bind/named.conf.options`文件并自定义它：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we're creating an options block with some code sandwiched in between curly
    braces, which then includes an additional set of curly braces where we identify
    our forwarding addresses. Since this DNS server is for locating resources within
    our internal network, the forwarders block tells our DNS server where to send
    requests, should it be unable to find what it's looking for locally. Your DNS
    server will likely still function perfectly fine without this, as in most cases
    it will still attempt another DNS server further down the chain. But setting the
    forwarders here allows us to force where we would like DNS lookups to go, in case
    we're looking for something externally. In this sample, I'm using Google's public
    DNS servers. However, you can choose your own. Some additional DNS servers (which
    are typically better) can be found at [www.opennicproject.org](http://www.opennicproject.org),
    which is also a good choice if you're concerned about privacy or tracking.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在创建一个选项块，其中夹在花括号之间的一些代码，然后包括另一组花括号，我们在其中标识了我们的转发地址。由于这个DNS服务器是用于在我们的内部网络中定位资源，转发器块告诉我们的DNS服务器在本地找不到它要找的东西时应该将请求发送到哪里。你的DNS服务器很可能在没有这个的情况下仍然可以正常工作，因为在大多数情况下它仍然会尝试链条下游的另一个DNS服务器。但是在这里设置转发器允许我们强制指定DNS查找应该去哪里，以防我们要查找的是外部的东西。在这个示例中，我使用了谷歌的公共DNS服务器。但你可以选择你自己的。一些额外的DNS服务器（通常更好）可以在[www.opennicproject.org](http://www.opennicproject.org)找到，这也是一个很好的选择，如果你担心隐私或跟踪的话。
- en: 'Our next file is `/etc/bind/named.conf.local`, which contains the following
    code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个文件是`/etc/bind/named.conf.local`，其中包含以下代码：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this file, we start of by identifying our domain name. Here, I chose `local.lan`.
    As this server is not authoritative of anything on the Internet, this name works
    well. Within this block, we're calling out another file, `/etc/bind/net.local.lan`.
    In fact, as you can see, there are several files being called out here (five in
    total). The first is our main DNS zone, and it's the most important of these.
    Those that follow are where we configure reverse DNS lookups. Essentially, DNS
    allows us to not only map hostnames to IP addresses, but we can also do the reverse
    (look map IP addresses back to hostnames). You may not need all the files that
    I created in my example. With mine, I am creating a reverse lookup file for each
    of my four subnets. If you aren't creating multiple subnets, you'll only need
    to create one. The naming convention of these is `revp`, followed by the network
    portion of the IP address. So, for example, the reverse lookup file for my `10.10.99.0`
    network is `revp.10.10.99`. These files will also be stored in `/etc/bind` as
    well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们首先要确定我们的域名。在这里，我选择了`local.lan`。由于这台服务器不是互联网上任何东西的权威，这个名字很合适。在这个块中，我们调用另一个文件`/etc/bind/net.local.lan`。事实上，正如你所看到的，这里调用了几个文件（总共五个）。第一个是我们的主DNS区域，它是其中最重要的。其后的是我们配置反向DNS查找的地方。基本上，DNS不仅允许我们将主机名映射到IP地址，还可以进行反向映射（将IP地址映射回主机名）。你可能不需要我在示例中创建的所有文件。对我来说，我为我的四个子网中的每一个创建了一个反向查找文件。如果你不创建多个子网，你只需要创建一个。这些文件的命名约定是`revp`，后面跟着IP地址的网络部分。所以，例如，我的`10.10.99.0`网络的反向查找文件是`revp.10.10.99`。这些文件也将存储在`/etc/bind`中。
- en: 'Now, let''s take a look at our master record, the `/etc/bind/net.local.lan`
    file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看我们的主记录，`/etc/bind/net.local.lan`文件：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, I placed some generic comments, with lines beginning with a semicolon.
    If a line begins with a semicolon, it is ignored by `bind`. Comments can be a
    good method of leaving notes or facts regarding the configuration. However, comments
    aren''t used very often in `bind`. Next, we set our **Time To Live** (**TTL**)
    to one day:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我放了一些通用的注释，以分号开头的行。如果一行以分号开头，它将被`bind`忽略。注释可以是留下关于配置的注释或事实的好方法。然而，在`bind`中注释并不经常使用。接下来，我们将我们的**生存时间**（**TTL**）设置为一天：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This value governs how long other DNS servers would be able to cache each record.
    After this period, any servers that have cached one of these records must discard
    them. For the purposes of setting up an internal DNS server, this value doesn''t
    affect us a great deal. However, if you''re setting up multiple DNS servers, this
    might be an important value to configure. One example of where the TTL value might
    prove useful is changing an address record to a different IP address. Suppose
    you''re switching your e-mail host to another provider. In that case, you would
    change the address record accordingly. However, before you enact this change,
    you may lower your TTL to something much less, such as one hour, and do this before
    you make this change. Then, servers are forced to discard this zone and refresh
    it, causing it to see your change in e-mail providers much quicker. When you are
    done, you would change this back. With the following line, we are identifying
    a **Start of Authority** (**SOA**):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值决定其他DNS服务器能够缓存每个记录的时间有多长。在此期间，任何缓存了这些记录的服务器必须丢弃它们。为了设置内部DNS服务器，这个值对我们影响不大。但是，如果您设置了多个DNS服务器，这可能是一个重要的配置值。TTL值可能会被证明有用的一个例子是将地址记录更改为不同的IP地址。假设您要将您的电子邮件主机切换到另一个提供商。在这种情况下，您将相应地更改地址记录。但在执行此更改之前，您可能会将TTL降低到更短的时间，比如一小时，然后再进行更改。然后，服务器被迫丢弃这个区域并刷新它，导致它更快地看到您更改的电子邮件提供商。完成后，您将把这个值改回来。在下一行，我们确定了一个**权威起始**（**SOA**）：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this case, we are identifying that this DNS server has the authority for
    the `local.lan` domain. We also clarify that `hostmaster.local.lan` is responsible
    for it. Although it may not look like it, `hostmaster.local.lan` is actually an
    e-mail address in the format that bind prefers. However, this is obviously a fake
    address, which doesn''t matter for our internal DNS server. At the end of this
    line, we are opening a configuration block, in this case with an opening parenthesis.
    The following line represents our serial, and it''s a very important concept to
    understand in order for our DNS server to work properly:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们确定了这个DNS服务器对`local.lan`域有权限。我们还澄清了`hostmaster.local.lan`对此负有责任。虽然看起来可能不像，但`hostmaster.local.lan`实际上是一个按照bind的偏好格式的电子邮件地址。然而，这显然是一个假地址，对于我们的内部DNS服务器并不重要。在这一行的末尾，我们正在打开一个配置块，这里是一个开放括号。下一行代表我们的序列号，这是一个非常重要的概念，为了使我们的DNS服务器正常工作，必须理解。
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Each time our `bind` daemon is restarted, it will reload this file. But when
    it does, the serial number is the first thing it will look at. If it is the same,
    it will likely not load in any changes. Thus, every time you change a zone file
    in `bind`, you must change this serial number as well. In this example, the current
    date is being used without hyphens or spaces. The last digit is just a revision
    number for that day, if the file is changed multiple times in one day. You can
    use whatever scheme you'd like. But using the date is a very popular approach.
    Regardless of the format you use, always ensure you increment the serial by 1
    with every change you make. You'll save yourself frustration wondering why newly
    created records aren't taking affect.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们重新启动`bind`守护程序时，它都会重新加载这个文件。但是当它这样做时，序列号是它首先查看的东西。如果它是相同的，它可能不会加载任何更改。因此，每次您在`bind`中更改区域文件时，您也必须更改这个序列号。在这个例子中，当前日期被使用，没有连字符或空格。最后一位数字只是当天的修订号，如果文件在一天内被多次更改。您可以使用任何您喜欢的方案。但使用日期是一个非常流行的方法。无论您使用的格式是什么，都要确保您在每次更改时将序列号递增1。这样您就不会因为新创建的记录没有生效而感到沮丧。
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: These values dictate how often slave DNS servers will be told to check for updates.
    The first value will configure slaves to refresh zone records from the master
    (this server) every eight hours. In regards to retry, we're letting slaves know
    that should there be a problem connecting, check back in this amount of time.
    Finally, we're setting our minimum age of zone records to one day, and the maximum
    to four weeks. Configuring slave DNS servers is beyond the scope of this book,
    but having this configuration in place doesn't hurt anything in case you do decide
    to configure slave DNS servers later on.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值决定了从属DNS服务器被告知多久检查更新。第一个值将配置从属服务器每八小时从主服务器（本服务器）刷新区域记录。关于重试，我们让从属服务器知道如果连接出现问题，要在这段时间内再次检查。最后，我们将区域记录的最小年龄设置为一天，最大年龄设置为四周。配置从属DNS服务器超出了本书的范围，但是在以后决定配置从属DNS服务器时，有这个配置也不会有任何坏处。
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we're identifying this name server. In my case, I'm calling it `hermes`
    and its full domain name is `hermes.local.lan`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确定了这个名称服务器。在我的情况下，我称之为`hermes`，它的完整域名是`hermes.local.lan`。
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, in this sample configuration, four address records are called out.
    This basically means that any time someone is looking for one of these hosts,
    the request is mapped to the listed domain name. These can be among multiple subnets
    or a single subnet. In my case, these hosts are on different subnets:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这个示例配置中，调用了四个地址记录。这基本上意味着每当有人寻找这些主机中的一个时，请求就会映射到列出的域名上。这些可以是多个子网中的一部分，也可以是单个子网中的一部分。在我的情况下，这些主机位于不同的子网上。
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The final line of this configuration contains a **Canonical Name** (**CNAME**)
    record. Basically, this allows us to refer to a server by another name. In this
    example, `galaxy` is also used for software known as `puppet`, so a CNAME record
    has been set up for it. This way, if someone were to try to access `galaxy.local.lan`
    or `puppet.local.lan`, their request would resolve to the same IP address (`10.10.96.4`).
    A CNAME records can be very useful if a single server provides more than one service
    to the network.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置的最后一行包含一个**规范名称**（**CNAME**）记录。基本上，这允许我们用另一个名称引用一个服务器。在这个例子中，`galaxy`也用于名为`puppet`的软件，因此为它设置了一个CNAME记录。这样，如果有人试图访问`galaxy.local.lan`或`puppet.local.lan`，他们的请求将解析到相同的IP地址（`10.10.96.4`）。如果单个服务器为网络提供多个服务，CNAME记录可能非常有用。
- en: 'Earlier, I called out four reverse lookup records, `/etc/bind/revp.10.10.96`,
    `/etc/bind/revp.10.10.97`, `/etc/bind/revp.10.10.98`, and `revp.10.10.99`. Next,
    I''m going to demonstrate one of these files (in this case, for the `10.10.96.0`
    network):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我提到了四个反向查找记录，`/etc/bind/revp.10.10.96`，`/etc/bind/revp.10.10.97`，`/etc/bind/revp.10.10.98`和`revp.10.10.99`。接下来，我将演示其中一个文件（在这种情况下，是为`10.10.96.0`网络）：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With this configuration, you'll notice we have a *start of authority* record
    as with our master zone, and we also have a serial number. The same idea applies
    here. Whenever you update any record (including reverse lookup records), you should
    update the serial number of the file. The start of authority entry works the same
    as earlier, no surprises here. Where the file differs is how the hosts are called
    out. Rather than calling out an entire IP address, we only need to identify the
    last octet since the entire file is dedicated to reverse IP address lookups from
    the `10.10.96.0` network. For each of your subnets, you'll need to create a similar
    file. Again, in our sample configuration there are four subnets, but you don't
    need that many. It was only provided in this way in order to provide an example
    of how to handle separate subnets, should you need to do so.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个配置，您会注意到我们有一个*权威起始*记录，就像我们的主区域一样，还有一个序列号。这里也适用相同的想法。每当您更新任何记录（包括反向查找记录）时，都应该更新文件的序列号。权威起始条目的工作方式与之前相同，没有什么意外。文件的不同之处在于如何调用主机。我们只需要识别最后一个八位字节，因为整个文件专门用于从`10.10.96.0`网络进行反向IP地址查找。对于您的子网中的每个子网，您都需要创建一个类似的文件。在我们的示例配置中有四个子网，但您不需要那么多。这样提供示例是为了演示如何处理单独的子网，如果您需要的话。
- en: With our configuration in place, feel free to restart the bind service on your
    DNS server and test it out. We can restart `bind` with the `systemctl` command,
    as before.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，可以随时重新启动DNS服务器上的bind服务并进行测试。我们可以使用`systemctl`命令重新启动`bind`，就像以前一样。
- en: 'For Debian, use the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Debian，请使用以下命令：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For CentOS, use the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CentOS，请使用以下命令：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'One way we can test our DNS server is via the `dig` command. With Debian, you
    should already have this package installed. CentOS requires the installation of
    the `bind-utils` package. `dig` (domain information groper) is a utility that
    allows us to request information from a DNS server. To give it a shot, try it
    out with an internal hostname:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`dig`命令测试我们的DNS服务器。在Debian中，您应该已经安装了这个软件包。CentOS需要安装`bind-utils`软件包。`dig`（域信息检索器）是一个实用程序，允许我们从DNS服务器请求信息。要尝试一下，请尝试使用内部主机名：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If your DNS server comes up under `SERVER` in the output, then your DNS server
    is functioning properly. If for some reason it doesn't, verify what you've typed,
    your serial number, and whether or not you have restarted `bind` since your last
    configuration change.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的DNS服务器在输出中显示为`SERVER`，则您的DNS服务器正常运行。如果由于某种原因没有显示，请验证您输入的内容、序列号以及您上次配置更改后是否重新启动了`bind`。
- en: Feel free to practice setting up additional nodes and records within your DNS
    server. Setting up `bind` can be frustrating at first, but stick with it and you'll
    be a pro in no time. Using examples from this section, you should have a working
    skeleton you can use to set up a DNS server within your environment. Make sure
    that you change the hostnames and IP addresses contained within the configuration
    files to those that match your network. In addition, make sure you set up `bind`
    to match your subnets, or remove mentions of other subnets if you don't have any.
    To be safe, instead of copying the configuration directly from this book, it's
    usually better to type everything manually just in case.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随时练习在DNS服务器中设置额外的节点和记录。一开始设置`bind`可能会让人沮丧，但坚持下去，您很快就会成为专家。使用本节中的示例，您应该有一个可以在您的环境中设置DNS服务器的工作框架。确保您将配置文件中包含的主机名和IP地址更改为与您的网络匹配的主机名和IP地址。此外，确保您设置`bind`以匹配您的子网，或者如果没有其他子网，则删除其他子网的提及。为了安全起见，通常最好手动输入所有内容，而不是直接从本书复制配置。
- en: Setting up an internal NTP server
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置内部NTP服务器
- en: 'Most Linux distributions offer a **Network Time Protocol** (**NTP**) client
    that can be used to keep your local time up to date. The idea is that with an
    NTP client configured, your computer or server will periodically check in with
    an NTP server somewhere on the Internet and synchronize its clock to ensure it
    is as exact as possible. This is really important; very strange things can happen
    on Linux machines if the clock is off. These oddities can include things such
    as a node being unable to associate with a DHCP server to obtain an IP address,
    files becoming unsynchronized between file servers, and more. The moral of the
    story is this: you''ll want to have NTP set up and working in your environment.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux发行版都提供了一个**网络时间协议**（**NTP**）客户端，可用于保持本地时间的最新状态。其想法是，通过配置NTP客户端，您的计算机或服务器将定期与互联网上的NTP服务器进行同步，以确保其尽可能精确。这非常重要；如果时钟不准确，Linux机器可能会发生非常奇怪的事情。这些奇怪的事情可能包括节点无法与DHCP服务器关联以获取IP地址，文件在文件服务器之间变得不同步等。故事的教训是：您需要在您的环境中设置并使NTP正常工作。
- en: Quite a few Linux distributions that are targeted toward end-user workstations
    (such as Ubuntu, Linux Mint, and so on) will often set up an NTP client for you.
    This means that out of the box, there's a good chance that your clock is probably
    synchronized already, assuming of course your installation has access to the Internet.
    By default, these clients will connect to a distribution-specific NTP server.
    This can be perfectly fine, but setting up your own NTP server instead has merit.
    One good reason for this is that by setting up your own NTP server, you're being
    a good network citizen. Think about it this way. If you have a company with a
    hundred Linux machines, each of those machines will be checking in with a public
    NTP server periodically if left with the default configuration. This causes unnecessary
    strain on that server. If you set up your own NTP server, only one of your servers
    will be checking in with the public server, which means you'd be absorbing fewer
    of its resources. In addition, some companies do not allow public access to **port
    123** (the port NTP uses) for security reasons. However, perhaps a single NTP
    server would be allowed to access port 123, which you can then configure your
    clients to connect to and use NTP.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 许多面向最终用户工作站的Linux发行版（如Ubuntu、Linux Mint等）通常会为您设置NTP客户端。这意味着开箱即用，您的时钟很可能已经同步，当然前提是您的安装可以访问互联网。默认情况下，这些客户端将连接到特定于发行版的NTP服务器。这可能完全没问题，但是设置自己的NTP服务器也是有价值的。其中一个很好的理由是，通过设置自己的NTP服务器，您正在成为一个良好的网络公民。想想看。如果您有一家拥有一百台Linux机器的公司，如果保持默认配置，每台机器都会定期与公共NTP服务器进行通信。这会给服务器造成不必要的压力。如果您设置自己的NTP服务器，只有一个服务器会与公共服务器进行通信，这意味着您会消耗更少的资源。此外，出于安全原因，一些公司不允许公共访问**端口123**（NTP使用的端口）。然而，也许允许一个单独的NTP服务器访问端口123，然后您可以配置您的客户端连接并使用NTP。
- en: 'Before we get into setting up an NTP server, it''s important to note that Debian
    and CentOS can often be the exception as to having an NTP client installed out
    of the box. Depending on the options and packages you selected during installation,
    the NTP client may or may not be functional yet. In my test environment, neither
    CentOS nor Debian had a working NTP client by default when I installed via a minimal
    installation and a net installation, respectively. However, setting up an NTP
    client is extremely easy. All you have to do is install NTP and enable it. This
    is actually one of those rare cases when both Debian and CentOS have the same
    name for the same package. The package is simply called `ntp`, so go ahead and
    install it if you don''t already have it installed. Once installed, Debian will
    start the `ntp` daemon and enable it for you. With CentOS, execute the following
    commands to get it going:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置NTP服务器之前，重要的是要注意，Debian和CentOS通常可以成为默认安装NTP客户端的例外情况。根据您在安装过程中选择的选项和软件包，NTP客户端可能已经可用，也可能尚未可用。在我的测试环境中，当我分别通过最小安装和网络安装安装时，CentOS和Debian默认情况下都没有一个可用的NTP客户端。然而，设置NTP客户端非常容易。您只需安装NTP并启用它。这实际上是Debian和CentOS具有相同软件包相同名称的罕见情况之一。该软件包简单地称为`ntp`，因此如果您尚未安装，请安装它。安装后，Debian将启动`ntp`守护程序并为您启用它。对于CentOS，请执行以下命令以启动它：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With both distributions, the file `/etc/ntp.conf` will be created once the package
    is installed, and this file will have a default configuration that will point
    your NTP client to your distribution's NTP server. Feel free to take a quick look
    at this file, if you're curious about what it looks like. To view which server
    your machine is synchronizing with, along with some stats regarding its synchronization,
    execute the `ntpq -p` command.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两个发行版，一旦安装了软件包，文件`/etc/ntp.conf`将被创建，并且该文件将具有一个默认配置，该配置将指向您的发行版的NTP服务器。如果您对它的外观感到好奇，可以随意快速查看一下这个文件。要查看您的机器正在与哪个服务器同步，以及关于其同步的一些统计信息，请执行`ntpq
    -p`命令。
- en: '![Setting up an internal NTP server](img/B03919_06_02.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![设置内部NTP服务器](img/B03919_06_02.jpg)'
- en: Viewing connected NTP servers
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 查看连接的NTP服务器
- en: First, let's take a quick look at what these numbers mean. The first column
    `remote` includes a list of NTP servers we're connected to, no surprises there.
    Next is `refid`, which is where those servers are connected to. The `st` column
    refers to the **stratum** of that server, which is a number that refers to the
    layer on which that time server sits. Typically, the lower the number, the better
    it is; as it means that the server is reasonably close to the source that is providing
    it time. Each server down the chain has an increased stratum; lowest doesn't always
    mean that the server is better, but generally speaking, lower numbers are good.
    The `t` column refers to the type. This can be unicast, broadcast, multicast,
    or manycast. In this case, we have `u` for unicast.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们快速看一下这些数字的含义。第一列`remote`包括我们连接的NTP服务器的列表，没有什么意外。接下来是`refid`，表示这些服务器连接到的地方。`st`列是指该服务器的**层**，这是一个指示该时间服务器所在层的数字。通常，数字越低，它就越好；因为这意味着该服务器与提供时间的源相当接近。链条下的每个服务器都有一个增加的层；最低并不总是意味着服务器更好，但一般来说，较低的数字是好的。`t`列是指类型。这可以是单播、广播、组播或多播。在这种情况下，我们使用`u`表示单播。
- en: The `when` column refers to how long ago the server was last polled. In the
    case of the sample screenshot, each server was polled 28, 24, 21 and 61 seconds
    ago, respectively. This can also be listed in hours or days as well. The `poll`
    column refers to the polling frequency, which here is set to poll every 64 seconds.
    The `reach` column is an octal number, which contains the results of the most
    recent eight NTP updates. If all eight were successful, this value will read 377,
    which is as high as it can get. This means that all eight attempts received a
    1 (success) which in octal, totals 377.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`when`列指的是服务器上次轮询的时间。在示例截图中，每个服务器分别在28、24、21和61秒前轮询。这也可以列出小时或天。`poll`列指的是轮询频率，这里设置为每64秒轮询一次。`reach`列是一个八进制数，其中包含最近八次NTP更新的结果。如果所有八次都成功，这个值将读取377，这是它能达到的最高值。这意味着所有八次尝试都收到了1（成功），在八进制中，总共是377。'
- en: Finishing up, the `delay` field references the delay (in milliseconds) to the
    NTP server. The `offset` field corresponds to the difference between the local
    clock and the clock of the server. Finally, `jitter` refers to the network latency
    between you and the server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`delay`字段指的是到NTP服务器的延迟（以毫秒为单位）。`offset`字段对应于本地时钟和服务器时钟之间的差异。最后，`jitter`指的是您和服务器之间的网络延迟。
- en: In order to set up an NTP server, you must first install the client as was mentioned
    earlier in this chapter. Install it, configure the daemon to automatically start,
    and then start it up. After performing those tasks, you're already most of the
    way there (the same client is used for the server as well). Essentially, if you
    point your other computers to a server which has NTP installed and configured,
    you essentially have everything you need.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置NTP服务器，您必须首先安装客户端，就像本章前面提到的那样。安装它，配置守护程序自动启动，然后启动它。执行这些任务后，您已经完成了大部分工作（服务器和客户端使用相同的客户端）。基本上，如果您将其他计算机指向安装和配置了NTP的服务器，您基本上已经拥有了所需的一切。
- en: 'However, there are a few things that should be configured first. Mainly, the
    `/etc/ntp.conf` configuration file. This file is located in the same place on
    both Debian and CentOS. If you look at the file, you''ll see some lines that look
    similar to the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些东西应该首先配置。主要是`/etc/ntp.conf`配置文件。该文件在Debian和CentOS上的位置相同。如果您查看文件，您会看到一些类似以下的行：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, you can see that by default, CentOS is identifying four NTP servers to
    synchronize with. These servers are generally fine for most use cases, but you
    may want to consider official NTP servers. To do so, check out the following website:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到，默认情况下，CentOS标识了四个NTP服务器进行同步。对于大多数用例来说，这些服务器通常都很好，但您可能希望考虑官方的NTP服务器。要这样做，请查看以下网站：
- en: '[http://www.pool.ntp.org](http://www.pool.ntp.org)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.pool.ntp.org](http://www.pool.ntp.org)'
- en: 'That website will allow you to view official NTP servers from the NTP Pool
    Project. To navigate, select your continent on the right and then your country.
    You should then see a list of NTP servers you can use. In my case, I get the following
    details:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站将允许您查看NTP Pool Project的官方NTP服务器。要导航，请在右侧选择您的大陆，然后选择您的国家。然后，您应该看到一个可以使用的NTP服务器列表。在我的情况下，我得到以下细节：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It''s up to you whether you use the NTP servers provided by your distribution
    or those provided by the NTP pool project. Personally, I prefer the latter. Once
    you have your servers configured, there''s one more change we should make. You
    should see a line in the configuration similar to the following in CentOS:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用发行版提供的NTP服务器，也可以选择使用NTP池项目提供的NTP服务器。就我个人而言，我更喜欢后者。一旦您配置了服务器，我们应该进行一次更改。您应该在CentOS的配置中看到类似以下的行：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Alternatively, similar to the following in Debian:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian中类似于以下内容：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'On your NTP server, uncomment that line and change the network address to yours,
    as well as the subnet. Remove `notrust` if it is there. For reference, the line
    in my configuration appears as the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的NTP服务器上，取消注释该行，并将网络地址更改为您的地址，以及子网。如果有`notrust`，请删除它。作为参考，我的配置中的该行如下：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'With this configuration, we''re restricting NTP access to local clients and
    also ensuring that they do not have access to change configuration on the NTP
    server (only read from it). Another change I like to make in NTP is to designate
    a log file. systemd takes care of logging with `journalctl`, but sometimes it''s
    useful to have a text file to peruse in case of problems. If you''d like that,
    then add the following line somewhere near the top:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个配置，我们限制了NTP访问本地客户端，并确保它们无法访问NTP服务器的配置（只能从中读取）。我在NTP中喜欢做的另一个更改是指定一个日志文件。systemd通过`journalctl`负责记录，但有时在出现问题时查看文本文件也很有用。如果您需要，可以在顶部附近添加以下行：
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you have any problems, check that file. Next, if you''re using CentOS as
    your NTP server, you should enable NTP traffic through its firewall. To do that,
    run the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到任何问题，请检查该文件。接下来，如果您将CentOS用作NTP服务器，则应通过其防火墙启用NTP流量。要做到这一点，请运行以下代码：
- en: '[PRE36]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now that we have that out of the way, restart your NTP server. We can do so
    via one of the following commands (as root).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了，重新启动您的NTP服务器。我们可以通过以下命令之一来执行（作为root）。
- en: Use the `systemctl restart ntpd` command on CentOS, or `systemctl restart ntp`
    on Debian.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS上使用`systemctl restart ntpd`命令，或在Debian上使用`systemctl restart ntp`。
- en: 'At this point, you have an NTP server. On your clients, change the server that
    they are configured to synchronize with to the IP of the machine you''ve designated
    as your NTP server. In my case, the command is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您已经有了一个NTP服务器。在您的客户端上，将它们配置为与您指定为NTP服务器的机器的IP同步。在我的情况下，命令如下：
- en: '[PRE37]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After restarting NTP, give your systems some time to synchronize. In some cases,
    it can take over a half an hour for them to start synchronizing. Give it a bit
    of time and then check your configuration to ensure that it is syncing with the
    `ntpq -p` command.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动NTP后，让您的系统一些时间进行同步。在某些情况下，可能需要半个小时以上才能开始同步。给它一些时间，然后检查您的配置，确保它正在使用`ntpq
    -p`命令进行同步。
- en: '![Setting up an internal NTP server](img/B03919_06_03.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![设置内部NTP服务器](img/B03919_06_03.jpg)'
- en: Output from a machine synchronizing with a custom NTP server
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 与自定义NTP服务器同步的机器输出
- en: As you can see in this output of my test environment, I started up an NTP server
    at `10.10.99.123` that this Debian machine is synchronizing with and currently
    the server has a reachability of `7`, but this number is slowing going up. This
    is fine, as the server has only been running a few minutes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的测试环境输出中，您可以看到，我在`10.10.99.123`上启动了一个NTP服务器，这台Debian机器正在与之同步，目前服务器的可达性为`7`，但这个数字正在慢慢上升。这很正常，因为服务器只运行了几分钟。
- en: If you have any issues, make sure that port 123 is open in any firewalls you
    may have in your network (with CentOS as the server, make sure you've run the
    firewall commands that were mentioned earlier). But before you get frustrated,
    give it time—it's not uncommon for an NTP server to take a bit to get going when
    first set up. Typically, everything should get going within 20 minutes, but I've
    seen it take longer.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到任何问题，请确保在您的网络中打开端口123（如果服务器是CentOS，请确保您已运行之前提到的防火墙命令）。但在您感到沮丧之前，请给它一些时间——当第一次设置时，NTP服务器需要一些时间才能启动是很常见的。通常，一切应该在20分钟内开始运行，但我曾经见过更长时间。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we configured the layout of our network. We started off with
    a discussion on planning our network IP address layout, followed by putting that
    into action by creating our own DHCP server. This discussion included how to split
    this configuration into multiple subnets, without multiple subnets. We continued
    with setting up a DNS server so that we can resolve our network nodes by name.
    We wrapped up this chapter by setting up an NTP server, so we can ensure all of
    our nodes have the correct time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们配置了网络的布局。我们首先讨论了规划网络IP地址布局，然后通过创建自己的DHCP服务器来付诸实施。这次讨论包括如何将此配置分成多个子网，而不是多个子网。我们继续设置DNS服务器，以便通过名称解析我们的网络节点。最后，我们通过设置NTP服务器来结束本章，以确保我们的所有节点都具有正确的时间。
- en: In the next chapter, we'll look into hosting web content with Apache.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用Apache托管网页内容。
