- en: Chapter 5. Creating Interactive Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。创建交互式脚本
- en: This chapter shows how to read the keyboard in order to create interactive scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何读取键盘以创建交互式脚本。
- en: 'The topics covered in this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题有：
- en: How to use the `read` built-in command to query the keyboard.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`read`内置命令查询键盘。
- en: The different ways to use `read`.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`read`的不同方式。
- en: The use of traps (interrupts).
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用陷阱（中断）。
- en: The reader will learn how to create interactive scripts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 读者将学习如何创建交互式脚本。
- en: The scripts we have looked at up to this point have run without much user interaction.
    The `read` command is used to create scripts that can query the keyboard. The
    code can then take action based on the input.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们看过的脚本都没有太多用户交互。`read`命令用于创建可以查询键盘的脚本。然后根据输入采取行动。
- en: 'Here is a simple example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子：
- en: Chapter 5 - Script 1
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 - 脚本1
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here is the output when run on my system:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上运行时的输出如下：
- en: '![Chapter 5 - Script 1](img/B07040_05_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![第5章 - 脚本1](img/B07040_05_01.jpg)'
- en: This is a good one to run on your system. Try several different strings, numbers,
    and so on. Notice how the returned string contains whitespace, special characters,
    and so on. You don't have to quote anything, and if you do those will be returned
    as well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在您的系统上运行的好例子。尝试几种不同的字符串、数字等。注意返回的字符串包含空格、特殊字符等。你不必引用任何东西，如果你这样做了，那些也会被返回。
- en: You can also use the `read` command to put a simple pause into your script.
    This will allow you to see the output before it scrolls off the screen. It can
    also be used when debugging which will be shown in [Chapter 9](ch09.html "Chapter 9. Debugging
    Scripts"), *Debugging Scripts*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`read`命令在脚本中加入简单的暂停。这将允许您在屏幕上滚动之前看到输出。它也可以在调试时使用，将在[第9章](ch09.html "第9章。调试脚本")
    *调试脚本*中显示。
- en: 'The following script shows how to create a pause when the output gets to the
    last line of the screen:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本显示了如何在输出到屏幕的最后一行时创建暂停：
- en: Chapter 5 - Script 2
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章 - 脚本2
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is the output when run on my system:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上运行时的输出如下：
- en: '![Chapter 5 - Script 2](img/B07040_05_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![第5章 - 脚本2](img/B07040_05_02.jpg)'
- en: I pressed *Enter* twice, and then *Q* and *Enter* on the last one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我按了两次*Enter*，然后在最后一个上按了*Q*和*Enter*。
- en: 'Let''s try something a bit more interesting. This next script shows how to
    fill an array with values taken from the keyboard:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些更有趣的东西。下一个脚本显示了如何用从键盘获取的值填充数组：
- en: Chapter 5 - Script 3
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章 - 脚本3
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And the output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 和输出：
- en: '![Chapter 5 - Script 3](img/B07040_05_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![第5章 - 脚本3](img/B07040_05_03.jpg)'
- en: Since this script does not require any parameters I decided to add a `Usage`
    statement. This will display if the user runs it with `--help` and is a common
    feature in many system scripts and programs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个脚本不需要任何参数，我决定添加一个`Usage`语句。如果用户使用`--help`运行它，这将显示，并且在许多系统脚本和程序中是一个常见的特性。
- en: The only thing new in this script is the `read` command. The `loop` and `array`
    variables were discussed in an earlier chapter. Note again that, with the `read`
    command what you type is what you get.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本中唯一新的东西是`read`命令。`loop`和`array`变量在之前的章节中已经讨论过。再次注意，使用`read`命令，你输入的就是你得到的。
- en: Now let's create a complete interactive script. But first we need to check the
    size of the current terminal. If it is too small, the output of your script may
    become garbled and the user may not know why or how to fix it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个完整的交互式脚本。但首先我们需要检查当前终端的大小。如果太小，你的脚本输出可能会变得混乱，用户可能不知道原因或如何修复。
- en: 'The following script contains a subroutine that checks the size of the terminal:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本包含一个检查终端大小的子例程：
- en: Chapter 5 - Script 4
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章 - 脚本4
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run this on your system with different-sized terminals to check the result.
    As you can see from the code, it's okay if the terminal is larger than needed;
    it just can't be too small.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上以不同大小的终端运行此脚本以检查结果。从代码中可以看出，如果终端比所需的大，那没问题；只是不能太小。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A word about terminal sizes: When using the `tput` cursor movement commands
    remember that it is row then column. However, most modern GUIs go by column then
    row. This is unfortunate as it is very easy to get them mixed up.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关于终端大小的一点说明：当使用`tput`光标移动命令时，请记住是先行后列。然而，大多数现代GUI是按列然后行。这是不幸的，因为很容易把它们弄混。
- en: 'Now let''s look at a full interactive script:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个完整的交互式脚本：
- en: Chapter 5 - Script 5
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章 - 脚本5
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is some example output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些示例输出：
- en: '![Chapter 5 - Script 5](img/B07040_05_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![第5章 - 脚本5](img/B07040_05_04.jpg)'
- en: There is a lot of new information here, so let's take a look. First the subroutines
    are defined, and you can see we included the `checktermsize` subroutine from the
    preceding *Script 4*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多新信息，让我们来看看。首先定义了子例程，你可以看到我们从前面的*脚本4*中包含了`checktermsize`子例程。
- en: The `init` routine sets up the cursor placement array. It's good programming
    practice to put initial values in a subroutine, particularly if it is going to
    be called again.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`例程设置了光标放置数组。将初始值放入子例程是良好的编程实践，特别是如果它将被再次调用。'
- en: The `drawscreen` routine displays the initial form. Note that I could have used
    the values in the `srow` and `scol` array here, however, I didn't want the script
    to look too cluttered.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawscreen`例程显示初始表单。请注意，我可以在这里使用`srow`和`scol`数组中的值，但我不想让脚本看起来太乱。'
- en: 'Look very carefully at the `getdata` routine because this is where the fun
    begins:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 非常仔细地看`getdata`例程，因为这是乐趣开始的地方：
- en: First the array subscript `x` and control var `rc1` are set to `0`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，数组下标`x`和控制变量`rc1`被设置为`0`。
- en: In the loop the cursor is placed at the first position (`Name:`).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在循环中，光标放置在第一个位置（`Name:`）。
- en: The keyboard is queried and the user's input goes into the array at sub `x`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询键盘，用户的输入进入子`x`的数组。
- en: '`x` is incremented and we go to the next field.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`增加，我们进入下一个字段。'
- en: If `x` is equal to the size of the array we leave the loop. Keep in mind that
    we start counting at `0`.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`x`等于数组的大小，我们离开循环。请记住我们从`0`开始计数。
- en: The `showdata` routine displays the array data and then we are done.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “showdata”例程显示数组数据，然后我们就完成了。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that if the script is run with the `--help` option the `Usage` message
    is displayed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果使用“--help”选项运行脚本，则会显示“Usage”消息。
- en: This is just a small example of an interactive script to show the basic concepts.
    In a later chapter we will go into this in more detail.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个交互式脚本的小例子，展示了基本概念。在后面的章节中，我们将更详细地讨论这个问题。
- en: 'The `read` command can be used in a number of different ways. Here are a few
    examples:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “read”命令可以以多种不同的方式使用。以下是一些示例：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-n` option means to wait for that number of characters and then continue,
    it does not wait for an *Enter* press.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “-n”选项意味着等待那么多个字符，然后继续，它不会等待*Enter*按键。
- en: 'In this example it will wait for 1 char and then go. This can be useful in
    utility scripts and games:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，它将等待1个字符，然后继续。这在实用脚本和游戏中很有用：
- en: Chapter 5 - Script 6
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章-脚本6
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Chapter 5 - Script 6](img/B07040_05_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![第5章-脚本6](img/B07040_05_05.jpg)'
- en: The comments in the script should make this one pretty self explanatory. The
    `read` command has a few more options, one of which will be shown in the next
    script.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本中的注释应该使这个脚本相当容易理解。“read”命令还有一些其他选项，其中一个将在下一个脚本中显示。
- en: Another way to query the keyboard is by using what is called a trap. This is
    a subroutine that is accessed when a special key sequence is pressed, such as
    *Ctrl* + *C*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用所谓的陷阱，还有另一种查询键盘的方法。这是一个在按下特殊键序列时访问的子例程，比如*Ctrl* + *C*。
- en: 'Here is an example of using a trap:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用陷阱的一个例子：
- en: Chapter 5 - Script 7
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章-脚本7
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the output on my system:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我系统上的输出：
- en: '![Chapter 5 - Script 7](img/B07040_05_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![第5章-脚本7](img/B07040_05_06.jpg)'
- en: Try running this one on your system. Press some keys and see the response. Press
    *Ctrl* + *C* a few times as well. When done press *Q*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上运行这个脚本。按一些键，看看反应。也按几次*Ctrl* + *C*。完成后按*Q*。
- en: That `read` statement needs some further explanation. Using `read` with the
    `-t` option (timeout) means to wait that many seconds for a character. If one
    is not input in the allotted time it will return a code with a value greater than
    128\. As we have seen before, the `-n 1` option tells `read` to wait for 1 character.
    So this means we are waiting 1 second for 1 character. This is another way `read`
    can be used to create a game or other interactive script.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那个“read”语句需要进一步解释。使用带有“-t”选项（超时）的“read”意味着等待那么多秒钟的字符。如果在规定的时间内没有输入字符，它将返回一个值大于128的代码。正如我们之前看到的，“-n
    1”选项告诉“read”等待1个字符。这意味着我们等待1秒钟来输入1个字符。这是“read”可以用来创建游戏或其他交互式脚本的另一种方式。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using a trap is a good way to catch an accidental press of *Ctrl* + *C* which
    could cause data to be lost. One word of caution however, if you do decide to
    catch *Ctrl* + *C* make sure your script has some other way to exit. In the simple
    script above the user must type a *Q* to exit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用陷阱是捕捉意外按下*Ctrl* + *C*的好方法，这可能会导致数据丢失。然而，需要注意的是，如果你决定捕捉*Ctrl* + *C*，请确保你的脚本有其他退出方式。在上面的简单脚本中，用户必须输入“Q”才能退出。
- en: If you get yourself into a situation where you can't exit a script you can use
    the `kill` command.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你陷入无法退出脚本的情况，可以使用“kill”命令。
- en: 'For example, if I had needed to stop `script7` the directions would be follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我需要停止“script7”，指示如下：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the terminal where `script7` was running you will see it has stopped with
    the word `Killed` in it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行“script7”的终端上，你会看到它停在那里，并显示“Killed”。
- en: Note, be sure to kill the right process!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一定要终止正确的进程！
- en: In the example above, PID `29880` is my text editor session where I am writing
    `script7`. Killing that would not be a good idea :).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，PID“29880”是我正在写“script7”的文本编辑器会话。杀死它不是一个好主意：）。
- en: 'Now for some fun! The next script allows you to draw crude pictures on the
    screen:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来点乐趣！下一个脚本允许你在屏幕上画粗糙的图片：
- en: Chapter 5 - Script 8
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章-脚本8
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This was fun to write and a bit more fun to play with than I expected it to
    be.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 写这个脚本很有趣，比我预期的更有趣一些。
- en: One thing we haven't covered yet is the `case` statement. This is similar to
    an `if...then...else` but makes the code easier to read. Basically, the value
    that was input to the `read` statement is checked for a match in each `case` clause.
    If it matches, that stanza is executed and then control goes to the line after
    the `esac` statement. It also does this if there is no match.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有涉及的一件事是“case”语句。这类似于“if...then...else”，但使代码更易读。基本上，检查输入到“read”语句的值是否与每个“case”子句中的匹配。如果匹配，那个部分就会被执行，然后控制转到“esac”语句后的行。如果没有匹配，它也会这样做。
- en: Try this script, and remember to make the terminal 25x80 (or 80x25 if that is
    how your GUI works).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这个脚本，并记住将终端设置为25x80（或者如果你的GUI是这样工作的，80x25）。
- en: 'Here is just one example of what can be done with this script:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是这个脚本可以做的一个例子：
- en: '![Chapter 5 - Script 8](img/B07040_05_07.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![第5章-脚本8](img/B07040_05_07.jpg)'
- en: Well okay I guess this shows that I am not much of an artist. I will stick to
    programming and writing books.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我想这表明我不是一个很好的艺术家。我会继续从事编程和写书。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we showed how to use the `read` built-in command to query the
    keyboard. We explained some of the different options to read and also covered
    the use of traps. A simple drawing game was also included.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了如何使用“read”内置命令来查询键盘。我们解释了一些不同的读取选项，并介绍了陷阱的使用。还包括了一个简单的绘图游戏。
- en: The next chapter will show how to automate a script so that it can run unattended.
    We will explain how `cron` can be used to run the script at a specific time. The
    archival programs `zip` and `tar` will also be covered as they are very useful
    when creating automated back up scripts.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将展示如何自动运行脚本，使其可以无人值守地运行。我们将解释如何使用“cron”在特定时间运行脚本。还将介绍归档程序“zip”和“tar”，因为它们在创建自动化备份脚本时非常有用。
