- en: Chapter 14. Using Python as a Bash Scripting Alternative
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。使用Python作为Bash脚本替代品
- en: 'Python is another scripting language and the newest that we have looked at
    so far. Similar to bash and Perl, Python is an interpreted language and makes
    use of the shebang. Although, it does not have a shell interface, we can access
    a console called the REPL where we can type Python codes to interact with the
    system. In this chapter we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python是另一种脚本语言，也是我们迄今为止看过的最新的脚本语言。与bash和Perl类似，Python是一种解释性语言，并使用shebang。尽管它没有shell界面，但我们可以访问一个名为REPL的控制台，在那里我们可以输入Python代码与系统进行交互。在本章中，我们将涵盖以下主题：
- en: What is Python?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Python？
- en: Saying Hello the Python way
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以Python方式说Hello
- en: Pythonic arguments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pythonic参数
- en: Significant whitespace
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要的空白
- en: Read user input
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取用户输入
- en: Using Python to write to files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python写入文件
- en: What is Python?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Python？
- en: Python is an object-oriented interpreted language that is designed to be easy
    to use and to aid Rapid Application Development. This is achieved by the use of
    simplified semantics in the language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种面向对象的解释性语言，旨在易于使用并有助于快速应用程序开发。这是通过在语言中使用简化的语义来实现的。
- en: 'Python was born at the end of the 1980''s, towards the very end of December
    1989 by the Dutch developer, Guido van Rossum. A majority of the design of the
    language is aimed at clarity and simplicity and one of the main rules of the *Zen
    of Python* is:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python诞生于20世纪80年代末，即1989年12月底，由荷兰开发者Guido van Rossum创建。该语言的设计大部分目的在于清晰和简单，而*Python之禅*的主要规则之一是：
- en: '*"There should be one, and preferable only one, obvious way to do it."*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"应该有一种，最好只有一种明显的方法来做到这一点。"*'
- en: Often systems will have both Python 2 and Python 3 installed; however, all newer
    distributions are switching to Python 3\. We will be working with Python 3, it
    being the latest version installed on the Raspberry Pi.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常系统会安装Python 2和Python 3，但是所有更新的发行版都在转向Python 3。我们将使用Python 3，因为它是树莓派上安装的最新版本。
- en: 'Although, there is no shell, we can interact with Python using REPL: read,
    evaluate, print, and loop. We can access this by typing `python3` in the command
    line. You should see something similar to the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管没有shell，我们可以使用REPL与Python进行交互：读取、评估、打印和循环。我们可以通过在命令行中输入`python3`来访问这个。您应该看到类似以下屏幕截图的内容：
- en: '![What is Python?](img/00130.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Python？](img/00130.jpeg)'
- en: We can see that we are presented with the **>>>** prompt and this is known as
    the REPL console. We should emphasize that this is a scripting language and like
    bash and Perl, we will normally execute a code through the text files that we
    create. Those text files will normally be expected to have a `.py` suffix to their
    name.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们被呈现出**>>>**提示，这被称为REPL控制台。我们应该强调这是一种脚本语言，就像bash和Perl一样，我们通常会通过创建的文本文件来执行代码。这些文本文件通常希望其名称具有`.py`后缀。
- en: 'While working with REPL, we can print the version independently by importing
    a module. In Perl, we will use the keyword, in bash we will use the command source
    and in Python we use `import`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用REPL时，我们可以通过导入模块来独立打印版本。在Perl中，我们将使用关键字，在bash中我们将使用命令源，在Python中我们使用`import`：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the module loaded, we can now investigate the object-oriented nature of
    Python by printing the version:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模块后，我们现在可以通过打印版本来研究Python的面向对象的特性：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will navigate to the sys object within our namespace and call the version
    method from that object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导航到我们命名空间中的sys对象，并从该对象调用version方法。
- en: 'Combining these two commands together, we should be able to see the following
    output:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个命令组合在一起，我们应该能够看到以下输出：
- en: '![What is Python?](img/00131.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Python？](img/00131.jpeg)'
- en: 'To close this section about describing Python, we should take a look at the
    **Zen of Python**. From REPL, we can type `import this`, as shown in the following
    screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要结束关于描述Python的这一部分，我们应该看一下**Python之禅**。从REPL，我们可以输入`import this`，如下面的屏幕截图所示：
- en: '![What is Python?](img/00132.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Python？](img/00132.jpeg)'
- en: This is far more than just the Zen of Python; it actually makes up a good rule
    for all programming languages and a guide for developers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这远不仅仅是Python之禅；它实际上构成了所有编程语言的一个很好的规则，也是开发人员的指南。
- en: Finally, to close the REPL, we will use *Ctrl* + *d* in Linux or *Ctrl* + *z*
    in Windows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要关闭REPL，我们将在Linux中使用*Ctrl* + *d*，在Windows中使用*Ctrl* + *z*。
- en: Saying Hello World the Python way
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以Python方式说Hello World
- en: 'The code we write in Python should be clear and uncluttered, sparse is better
    than dense. We will need the shebang on the first line and then the `print` statement.
    The `print` function includes the newline and we do not need semicolons at the
    end of the line. We can see the edited version of `$HOME/bin/hello.py` in the
    following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Python中编写的代码应该清晰而简洁，稀疏比密集更好。我们需要在第一行上使用shebang，然后使用`print`语句。`print`函数包括换行符，我们不需要在行尾使用分号。我们可以在以下示例中看到编辑后的`$HOME/bin/hello.py`版本：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will still need to add the execute permission, but we can run the code as
    earlier using `chmod`. This shown in the following command but we should be a
    little used to this now:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要添加执行权限，但是我们可以像之前一样使用`chmod`来运行代码。这在以下命令中显示，但我们现在应该对此有点习惯了：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finally, we can now execute the code to see our greeting.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在可以执行代码来看到我们的问候语。
- en: Again, knowing at least one language makes it easier to adapt to others and
    there is not a lot of new features in this.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，至少了解一种语言会使适应其他语言变得更容易，而且这并没有太多新功能。
- en: Pythonic arguments
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pythonic参数
- en: We should know by now that we will want to be able to pass command-line arguments
    to Python and we can do this using the `argv` array similar to Perl. However,
    we are more like bash, with Python we combine the program name into the array
    with the other arguments. Python also uses lowercase instead of uppercase in the
    object name.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该知道我们希望能够向Python传递命令行参数，我们可以使用`argv`数组来实现这一点，类似于Perl。但是，与bash更像，使用Python时，我们将程序名称与其他参数组合到数组中。Python还使用小写而不是大写的对象名称。
- en: The `argv` array is a part of the `sys` object
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argv`数组是`sys`对象的一部分'
- en: '`sys.argv[0]` is the script name'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys.argv[0]`是脚本名称'
- en: '`sys.argv[1]` is the first argument supplied to the script'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys.argv[1]`是提供给脚本的第一个参数'
- en: '`sys.argv[2]` is the second supplied argument and so on'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys.argv[2]`是第二个提供的参数，依此类推'
- en: The argument count will always be at least 1, so, keep this in mind when checking
    for supplied arguments
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数计数始终至少为1，因此，在检查提供的参数时请记住这一点
- en: Supplying arguments
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供参数
- en: 'If we create the `$HOME/bin/args.py` file we can see this in action. The file
    should be created as follows and made executable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建`$HOME/bin/args.py`文件，我们可以看到它的运行情况。文件应该创建如下并且可执行：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we run the script with a supplied argument, we should be able to see something
    similar to the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用提供的参数运行脚本，我们应该能够看到类似以下截图的内容：
- en: '![Supplying arguments](img/00133.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![提供参数](img/00133.jpeg)'
- en: Our code is still quite clean and simple; however, we may have noticed that
    we cannot combine the quoted text in the `print` statement with the argument.
    We use the `+` symbol to join or concatenate the two strings together. As there
    is no specific symbol to denote a variable or any other type of object, they cannot
    appear as a static text within quotes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码仍然非常清晰简单；但是，我们可能已经注意到我们不能将`print`语句中的带引号的文本与参数组合在一起。我们使用`+`符号将两个字符串连接在一起。由于没有特定的符号来表示变量或任何其他类型的对象，它们不能出现在引号内作为静态文本。
- en: Counting arguments
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算参数
- en: 'As it was previously mentioned, the script name is the first argument at index
    `0` of the array. So, if we try to count the arguments, then the count should
    always be at the very least one In other words, if we have not supplied arguments,
    the argument count will be one. To count the items in an array, we can use the
    `len()` function. If we edit the script to include a new line we will see this
    work, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，脚本名称是数组中索引为`0`的第一个参数。因此，如果我们尝试计算参数，那么计数应该始终至少为1。换句话说，如果我们没有提供参数，参数计数将为1。要计算数组中的项目数，我们可以使用`len()`函数。如果我们编辑脚本以包含一个新行，我们将看到它的工作情况，如下所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Executing the code as we have earlier, we can see that we have supplied two
    arguments. The script name and then the string `fred`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码，我们可以看到我们提供了两个参数。脚本名称，然后是字符串`fred`：
- en: '![Counting arguments](img/00134.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![计算参数](img/00134.jpeg)'
- en: 'If we try and have a single `print` statement to print the output and the number
    of arguments, then we will find that Python does not like mixing data types. The
    length value is an integer and this cannot be mixed with strings without conversion.
    The following code will fail:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用单个`print`语句来打印输出和参数的数量，我们会发现Python不喜欢混合数据类型。长度值是整数，这不能在没有转换的情况下与字符串混合。以下代码将失败：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, this is not a mammoth task and just requires an explicit conversion.
    From the Zen of Python:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这并不是一项艰巨的任务，只需要明确的转换。来自Python之禅：
- en: '*"Explicit is better than implicit."*'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“明确胜于隐晦。”*'
- en: 'The code will work if modified, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后，代码将正常工作，如下所示：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we try to run the script and omit to supply an argument, then there will
    be a null value in the array when we reference index `1`. This will give an error,
    as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试运行脚本并省略提供参数，那么当我们引用索引`1`时，数组中将会有一个空值。这将导致错误，如下截图所示：
- en: '![Counting arguments](img/00135.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![计算参数](img/00135.jpeg)'
- en: We of course need to handle this to prevent the error and we can now pass into
    the section of significant whitespace.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要处理这个问题以防止错误，现在我们可以进入重要的空白部分。
- en: Significant whitespace
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的空白
- en: A major difference between Python and most other languages is that additional
    whitespace can mean something. The indent level of your code defines the block
    of code to which it belongs. So far, we have not indented the code we have created
    past the start of the line. This means that all of the code is at the same indent
    level and belongs to the same code block. Rather than using brace brackets or
    do and done keywords to define the code block, we use indents. If we indent with
    four spaces, then we must stick to those four spaces. When we return to the previous
    indent level, we return to the previous code block.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Python与大多数其他语言之间的一个主要区别是额外的空白可能意味着某些东西。代码的缩进级别定义了它所属的代码块。到目前为止，我们还没有将创建的代码缩进到行的开头之后。这意味着所有的代码都在相同的缩进级别，并且属于相同的代码块。我们使用缩进而不是使用大括号或`do`和`done`关键字来定义代码块。如果我们使用四个空格进行缩进，那么我们必须坚持使用这四个空格。当我们返回到先前的缩进级别时，我们返回到先前的代码块。
- en: 'This seems complex but it is really quite simple and keeps your code clean
    and uncluttered. If we edit the `arg.py` file to prevent unwelcomed errors, if
    an argument is not supplied, we can see this in action:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎很复杂，但实际上非常简单，可以保持代码的清晰和简洁。如果我们编辑`arg.py`文件以防止不受欢迎的错误，如果没有提供参数，我们可以看到它的运行情况：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `if` statement checks if the argument count is greater than `1` or not.
    We now store for ease, the argument count has its own variable, which we call
    `count`. The code block starts with the colon and then all of the following code
    that is indented to four spaces is part of the code that will execute when the
    condition returns to true.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句检查参数计数是否大于`1`。现在，为了方便起见，我们将参数计数存储为自己的变量，称为`count`。代码块以冒号开始，然后所有缩进到四个空格的后续代码都是将在条件返回为真时执行的代码的一部分。'
- en: When we return to the previous indent level, we return to the main code block
    and we execute the code regardless of the status of the condition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们返回到先前的缩进级别时，我们返回到主代码块并执行代码，无论条件的状态如何。
- en: 'We can see this illustrated in the following screenshot, where we can execute
    the script with and without the argument:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到这一点，我们可以执行带有参数和不带参数的脚本：
- en: '![Significant whitespace](img/00136.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![重要的空白](img/00136.jpeg)'
- en: Reading user input
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取用户输入
- en: 'If we want the welcome message to greet us by name no matter whether we supply
    the argument to the script or not, we can add in a prompt to capture the data
    while the script is running. Python makes this simple and easy to implement. We
    can see from the edited file shown in the screenshot that follows how this is
    achieved:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望欢迎消息无论是否提供脚本参数都能以我们的名字来欢迎我们，我们可以在脚本运行时添加提示来捕获数据。Python使这变得简单且易于实现。我们可以从以下截图中显示的编辑文件中看到如何实现这一点：
- en: '![Reading user input](img/00137.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![读取用户输入](img/00137.jpeg)'
- en: We make use of a new variable in the script that we set in the main block initially,
    to be an empty string. Set it here to make the variable available to the complete
    script and all code blocks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本中使用了一个新变量，最初在主块中设置为空字符串。在这里设置它，以便该变量对整个脚本和所有代码块都可用。
- en: The `input` function in Python 3 or `raw_input` can be used in Python 2 to gain
    user input. We store that input in the `name` variable. If we have supplied an
    argument we pick it up on the code in the `else` block and set the `name` variable
    to the first supplied argument. It is this that is used in the `print` statement
    back in the main block.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中可以使用`input`函数，或者在Python 2中可以使用`raw_input`来获取用户输入。我们将输入存储在`name`变量中。如果我们提供了参数，我们将在`else`块中的代码中获取它，并将`name`变量设置为第一个提供的参数。这将在主块中的`print`语句中使用。
- en: Using Python to write to files
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python写入文件
- en: 'To add some variety to this chapter, we will now look at printing this data
    to a file. Again using Python, this is quite a simple and easy way to pick up.
    We will start by making a copy of our existing `args.py`. We will copy this to
    `$HOME/bin/file.py`. The new `file.py` should read similar to the following screenshot
    and have the execute permission set:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给本章增加一些变化，我们现在将看看如何将这些数据打印到文件中。再次使用Python，这是一个相当简单和容易上手的方法。我们将首先复制我们现有的`args.py`。我们将其复制到`$HOME/bin/file.py`。新的`file.py`应该类似于以下截图，并且设置执行权限：
- en: '![Using Python to write to files](img/00138.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python写入文件](img/00138.jpeg)'
- en: You will notice that we have just altered the final lines and instead of print
    we now open a file. We also see more of the object-orientated life of Python that
    dynamically assigns the `write()` and `close()` methods to the object log, as
    it is seen as an instance of a file. When we open the file, we open it up for
    the purpose of appending, meaning that we do not overwrite the existing content
    if it is already there. If the file is not there, we will create a new file. If
    we use `w`, we will open the file for writing, which might translate to overwriting,
    so take care.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们刚刚修改了最后几行，而不是打印，我们现在打开了一个文件。我们还看到了Python的面向对象生活更多的一面，它动态地将`write()`和`close()`方法分配给了log对象，因为它被视为文件的一个实例。当我们打开文件时，我们是为了追加目的而打开它，这意味着如果已经有内容，我们不会覆盖现有内容。如果文件不存在，我们将创建一个新文件。如果我们使用`w`，我们将打开文件进行写入，这可能会导致覆盖，所以要小心。
- en: You can see that this is an easy task and this is why Python is used in many
    applications and is taught widely in schools.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这是一个简单的任务，这就是为什么Python被用在许多应用程序中并且在学校广泛教授的原因。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This now finishes our look at Python and it certainly has been a brief tour.
    We can again emphasize the similarities that you will see in many languages and
    the importance of learning any coding language. What you learn in one language
    will help in most of the other languages that you come across.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对Python的介绍，这确实是一个简短的旅程。我们再次强调你将在许多语言中看到的相似之处，以及学习任何编程语言的重要性。你在一种语言中学到的东西将有助于你在大多数其他语言中的学习。
- en: 'What we learn from the Zen of Python will help us design and develop a great
    code. We can print the Zen of Python using the following Python code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Python之禅中学到的东西将帮助我们设计和开发出优秀的代码。我们可以使用以下Python代码打印Python之禅：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can type the code on the REPL prompt. Keeping your code clean and well-spaced
    out will aid in the readability and ultimately this will help with the maintenance
    of the code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在REPL提示符上输入代码。保持代码整洁和间隔良好将有助于代码的可读性，最终这将有助于代码的维护。
- en: We have also seen that the Python likes you to be explicit in your code and
    will not implicitly convert the data types.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到Python喜欢你在代码中明确表达，并且不会隐式转换数据类型。
- en: We are also at the end of the book but hopefully, the start of your scripting
    career. Good luck and thank you for reading.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也到了书的结尾，但希望这是你脚本编写生涯的开端。祝你好运，谢谢阅读。
